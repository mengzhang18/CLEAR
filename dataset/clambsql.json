[
    {
        "index": 0,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What is the continent name which Anguilla belongs to?",
        "schema_without_content": "city : countrycode , name , population , district , id  | sqlite_sequence : name , seq  | country : capital , headofstate , localname , lifeexpectancy , gnp , gnpold , continent_name , code , surfacearea , population , code2 , mainland , region , indepyear , governmentform , name  | countrylanguage : language , percentage , isofficial , countrycode",
        "schema_with_content": "city : countrycode (\"DMA\", \"NER\", \"NLD\"), name (\"Scottsdale\", \"Taxco de AlarcÃ³n\", \"Wellington\"), population (89423, 245772, 315382), district (\"Borsod-AbaÃºj-ZemplÃ©n\", \"West Java\", \"Midi-PyrÃ©nÃ©es\"), id (3788, 3629, 340) | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (2973, 3243, 3212), headofstate (\"Hamad ibn Isa al-Khalifa\", None, \"Vicente Fox Quesada\"), localname (\"MÃ©xico\", \"Makedonija\", \"Sverige\"), lifeexpectancy (77.6, 77.0, 54.8), gnp (340238.0, 6041.0, 211860.0), gnpold (573.0, 360478.0, 2141.0), continent_name (\"Europe\", \"Oceania\", \"South America\"), code (\"VCT\", \"SYR\", \"NFK\"), surfacearea (774815.0, 96.0, 1862.0), population (453000, 50456000, 9586000), code2 (\"AD\", \"ID\", \"SK\"), mainland (\"Europe\", \"Oceania\", \"South America\"), region (\"Eastern Europe\", \"Polynesia\", \"Polynesia\"), indepyear (836, 1143, 1581), governmentform (\"Islamic Emirate\", \"Occupied by Marocco\", \"Constitutional Monarchy\"), name (\"French Polynesia\", \"Iran\", \"Chad\") | countrylanguage : language (\"Kanem-bornu\", \"Dari\", \"Yao\"), percentage (8.2, 14.0, 11.4), isofficial (\"T\", \"F\"), countrycode (\"SYC\", \"UMI\", \"LBY\")",
        "ambiguous_queries": [
            "select mainland from country where name = 'Anguilla'",
            "select continent_name from country where name = 'Anguilla'"
        ],
        "gold_ambiguity": {
            "match": "{\"continent\": [{\"country\": [\"mainland\"]}, {\"country\": [\"continent_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"continent\" refers to the schema \"country\".\"continent_name\"",
        "clear_ambiguity": "{\"continent\": {\"country\": [\"continent_name\"]}}",
        "gold_query": "select continent_name from country where name = 'Anguilla'"
    },
    {
        "index": 1,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "schema_without_content": "tv_channel : id , hight_definition_tv , country , language , pixel_aspect_ratio_par , content , pay_per_view_ppv , package_option , series_name  | tv_series : weekly_rank , id , 18_49_rating_share , rating , viewers_m , episode , channel , share , air_date  | cartoon : directed_by , channel , production_code , id , cartoon_name , original_air_date , program_title , written_by",
        "schema_with_content": "tv_channel : id (\"701\", \"701\", \"719\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), pay_per_view_ppv (\"no\"), package_option (\"Option\", \"Sky Famiglia + Sky HD\", \"Option\"), series_name (\"Radio Capital TiVÃ¹\", \"Hip Hop TV\", \"Hip Hop TV\") | tv_series : weekly_rank (66.0, 43.0, 70.0), id (4.0, 9.0, 9.0), 18_49_rating_share (\"2.9/7\", \"2.7/7\", \"3.5/9\"), rating (\"3.8\", \"4.4\", \"3.4\"), viewers_m (\"4.24\", \"9.16\", \"5.61\"), episode (\"Keepers\", \"A Love of a Lifetime\", \"Double Down\"), channel (\"708\", \"728\", \"728\"), share (5.0, 6.0, 6.0), air_date (\"November 19, 2007\", \"October 15, 2007\", \"December 17, 2007\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"704\", \"728\", \"708\"), production_code (106.0, 110.0, 101.0), id (11.0, 1.0, 2.0), cartoon_name (\"Deep Cover for Batman!\", \"Deep Cover for Batman!\", \"Deep Cover for Batman!\"), original_air_date (\"January2,2009\", \"November21,2008\", \"January2,2009\"), program_title (\"Deep Cover for Batman!\", \"Deep Cover for Batman!\", \"Deep Cover for Batman!\"), written_by (\"James Krieg\", \"Matt Wayne\", \"Todd Casey\")",
        "ambiguous_queries": [
            "select cartoon_name, directed_by from cartoon order by original_air_date",
            "select program_title, directed_by from cartoon order by original_air_date"
        ],
        "gold_ambiguity": {
            "match": "{\"cartoon\": [{\"cartoon\": [\"cartoon_name\"]}, {\"cartoon\": [\"program_title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cartoon\" refers to the schema \"cartoon\".\"cartoon_name\"",
        "clear_ambiguity": "{\"cartoon\": {\"cartoon\": [\"cartoon_name\"]}}",
        "gold_query": "select cartoon_name, directed_by from cartoon order by original_air_date"
    },
    {
        "index": 2,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?",
        "schema_without_content": "continents : contid , continent  | countries : name , nationname , countryid , continent  | car_makers : fullname , country , id , maker  | model_list : maker , modelid , model  | car_names : make \", \"chevrolet caprice classic\", \"mercury cougar brougham\", model , makeid  | cars_data : id , edispl , mpg , accelerate , cylinders , horsepower , weight , year",
        "schema_with_content": "continents : contid (3, 3, 1), continent (\"asia\", \"asia\", \"america\") | countries : name (\"japan\", \"sweden\", \"usa\"), nationname (\"japan\", \"sweden\", \"usa\"), countryid (13, 13, 7), continent (2, 5, 4) | car_makers : fullname (\"Mazda\", \"Hyundai\", \"Volkswagen\"), country (\"8\", \"3\", \"3\"), id (16, 9, 18), maker (\"toyota\", \"nissan\", \"mazda\") | model_list : maker (13, 16, 9), modelid (22, 5, 23), model (\"scion\", \"mercedes\", \"fiat\") | car_names : make (\"ford fairmont (man)\", \"chevrolet caprice classic\", \"mercury cougar brougham\"), model (\"volvo\", \"datsun\", \"volvo\"), makeid (60, 113, 257) | cars_data : id (132, 126, 280), edispl (440.0, 156.0, 200.0), mpg (\"31.5\", \"33.7\", \"24.2\"), accelerate (19.5, 14.3, 17.6), cylinders (8, 8, 4), horsepower (\"138\", \"160\", \"160\"), weight (2984, 3613, 1613), year (1980, 1971, 1976)",
        "ambiguous_queries": [
            "select t1.countryid, t1.name from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.name from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'",
            "select t1.countryid, t1.nationname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.nationname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'"
        ],
        "gold_ambiguity": {
            "match": "{\"countries\": [{\"countries\": [\"name\"]}, {\"countries\": [\"nationname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"countries\" refers to the schema \"countries\".\"nationname\"",
        "clear_ambiguity": "{\"countries\": {\"countries\": [\"nationname\"]}}",
        "gold_query": "select t1.countryid, t1.nationname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.nationname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'"
    },
    {
        "index": 3,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What is the total number of people living in the nations that do not use English?",
        "schema_without_content": "city : countrycode , name , population , district , id  | sqlite_sequence : seq , name  | country : region , lifeexpectancy , name , surfacearea , citizen_count , indepyear , headofstate , continent , gnp , code , capital , headcount , code2 , localname , gnpold , governmentform  | countrylanguage : percentage , isofficial , countrycode , language",
        "schema_with_content": "city : countrycode (\"MCO\", \"GMB\", \"SPM\"), name (\"Dabrowa GÃ³rnicza\", \"Shagamu\", \"Bijsk\"), population (760000, 663340, 299676), district (\"HÃ¶fuÃ°borgarsvÃ¦Ã°i\", \"Mary\", \"Haiphong\"), id (2982, 2201, 3105) | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Melanesia\", \"Antarctica\", \"Middle East\"), lifeexpectancy (81.1, 76.7, 81.6), name (\"Moldova\", \"Greece\", \"Cameroon\"), surfacearea (344.0, 28748.0, 108889.0), citizen_count (5496000, 270000, 21000), indepyear (1951, 1944, 1948), headofstate (\"Omar Hassan Ahmad al-Bashir\", \"Ali Abdallah Salih\", \"AntÃ³nio Mascarenhas Monteiro\"), continent (\"Oceania\", \"Antarctica\", \"South America\"), gnp (1941.0, 211860.0, 5332.0), code (\"LBR\", \"PRT\", \"RWA\"), capital (3208, 645, 1530), headcount (5496000, 270000, 21000), code2 (\"AL\", \"WS\", \"YT\"), localname (\"Trinidad and Tobago\", \"Uzbekiston\", \"The Bahamas\"), gnpold (146171.0, 5867.0, 2102826.0), governmentform (\"Territory of Australia\", \"Part of Denmark\", \"Territory of Australia\") | countrylanguage : percentage (12.1, 66.5, 90.6), isofficial (\"T\", \"F\"), countrycode (\"GEO\", \"NOR\", \"SWZ\"), language (\"Persian\", \"Adja\", \"Chinese\")",
        "ambiguous_queries": [
            "select sum(headcount) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English')",
            "select sum(citizen_count) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English')"
        ],
        "gold_ambiguity": {
            "match": "{\"number\": [{\"country\": [\"headcount\"]}, {\"country\": [\"citizen_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"number\" refers to the schema \"country\".\"citizen_count\"",
        "clear_ambiguity": "{\"number\": {\"country\": [\"citizen_count\"]}}",
        "gold_query": "select sum(citizen_count) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English')"
    },
    {
        "index": 4,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "schema_without_content": "stadium : capacity , stadium_id , highest , average , appellation , title , location , lowest  | singer : song_name , country , name , singer_id , age , is_male , song_release_year  | concert : stadium_id , year , concert_id , theme , concert_name  | singer_in_concert : singer_id , concert_id",
        "schema_with_content": "stadium : capacity (3100, 52500, 11998), stadium_id (2, 1, 7), highest (1980, 1980, 837), average (615, 1477, 638), appellation (\"Hampden Park\", \"Glebe Park\", \"Gayfield Park\"), title (\"Hampden Park\", \"Glebe Park\", \"Gayfield Park\"), location (\"Alloa Athletic\", \"East Fife\", \"Raith Rovers\"), lowest (411, 1057, 400) | singer : song_name (\"Dangerous\", \"Gentleman\", \"Love\"), country (\"Netherlands\", \"United States\", \"France\"), name (\"Rose White\", \"Joe Sharp\", \"Joe Sharp\"), singer_id (5, 4, 5), age (43, 41, 43), is_male (\"F\", \"T\"), song_release_year (\"2013\", \"2014\", \"2016\") | concert : stadium_id (\"2\", \"7\", \"1\"), year (\"2014\", \"2015\"), concert_id (1, 2, 4), theme (\"Free choice 2\", \"Free choice\", \"Free choice\"), concert_name (\"Week 1\", \"Super bootcamp\", \"Week 2\") | singer_in_concert : singer_id (\"6\", \"2\", \"4\"), concert_id (4, 1, 3)",
        "ambiguous_queries": [
            "select location, title from stadium where capacity between 5000 and 10000",
            "select location, appellation from stadium where capacity between 5000 and 10000"
        ],
        "gold_ambiguity": {
            "match": "{\"stadiums\": [{\"stadium\": [\"title\"]}, {\"stadium\": [\"appellation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"stadiums\" refers to the schema \"stadium\".\"title\"",
        "clear_ambiguity": "{\"stadiums\": {\"stadium\": [\"title\"]}}",
        "gold_query": "select location, title from stadium where capacity between 5000 and 10000"
    },
    {
        "index": 5,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Find the city with the largest population that uses English.",
        "schema_without_content": "city : district , id , number_of_residents , name , total_inhabitants , countrycode  | sqlite_sequence : name , seq  | country : continent , gnpold , code2 , surfacearea , capital , headofstate , localname , gnp , region , lifeexpectancy , indepyear , code , population , governmentform , name  | countrylanguage : isofficial , language , countrycode , percentage",
        "schema_with_content": "city : district (\"Qaraghandy\", \"Cusco\", \"Kairouan\"), id (2411, 963, 3444), number_of_residents (201838, 194260, 137061), name (\"Torbat-e Heydariyeh\", \"Pondokgede\", \"Abohar\"), total_inhabitants (201838, 194260, 137061), countrycode (\"HUN\", \"GEO\", \"PAK\") | sqlite_sequence : name (\"city\"), seq (4079) | country : continent (\"Asia\", \"Oceania\", \"Africa\"), gnpold (11203.0, 189122.0, 170.0), code2 (\"GS\", \"AO\", \"SL\"), surfacearea (88946.0, 5765.0, 108889.0), capital (3493, 2814, 549), headofstate (\"Akihito\", \"Hosni Mubarak\", \"Vicente Fox Quesada\"), localname (\"Australia\", \"BouvetÃ¸ya\", \"Italia\"), gnp (1206.0, 935.0, 82710.0), region (\"Micronesia/Caribbean\", \"Western Europe\", \"Antarctica\"), lifeexpectancy (46.7, 53.1, 68.9), indepyear (1828, 1143, 1964), code (\"TUV\", \"BRB\", \"KGZ\"), population (8861400, 68470000, 40377000), governmentform (\"Monarchy\", \"Administrated by the UN\", \"Constitutional Monarchy\"), name (\"Italy\", \"United States Minor Outlying Islands\", \"Czech Republic\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Nuer\", \"Luri\", \"Zapotec\"), countrycode (\"HTI\", \"TUN\", \"NPL\"), percentage (74.1, 26.3, 39.4)",
        "ambiguous_queries": [
            "select t1.name, t1.total_inhabitants from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = 'English' order by t1.total_inhabitants desc limit 1",
            "select t1.name, t1.number_of_residents from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = 'English' order by t1.number_of_residents desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"city\": [\"total_inhabitants\"]}, {\"city\": [\"number_of_residents\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"city\".\"number_of_residents\"",
        "clear_ambiguity": "{\"population\": {\"city\": [\"number_of_residents\"]}}",
        "gold_query": "select t1.name, t1.number_of_residents from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = 'English' order by t1.number_of_residents desc limit 1"
    },
    {
        "index": 6,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_type , amount , fee  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : home_phone , cell_number , last_name , email_address , zip_code , city , first_name , state , owner_id , street  | dogs : name , gender , dog_id , age , date_departed , breed_code , weight , date_of_birth , date_adopted , owner_id , date_arrived , abandoned_yn , size_code  | professionals : zip_code , street , professional_id , role_code , last_name , state , cell_number , email_address , home_phone 304-4499x59146\", \"022.529.0550x1319\", \"325-155-0801x7005\", city , first_name  | treatments : cost_of_treatment , date_of_treatment , treatment_id , professional_id , treatment_type_code , dog_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), amount (98, 322, 640), fee (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : home_phone (\"130-796-4589x05454\", \"130-796-4589x05454\", \"363.948.1090\"), cell_number (\"478.978.0729\", \"478.978.0729\", \"739-136-7202\"), last_name (\"Hauck\", \"Prohaska\", \"Nicolas\"), email_address (\"edythe62@example.org\", \"pearlie18@example.com\", \"pearlie18@example.com\"), zip_code (\"92406\", \"35747\", \"86010\"), city (\"Beerton\", \"Beerton\", \"New Margaretteborough\"), first_name (\"Rolando\", \"Cindy\", \"Rolando\"), state (\"Arizona\", \"SouthDakota\", \"Maryland\"), owner_id (14, 2, 13), street (\"692 Jaskolski Forges\", \"60352 Kayleigh Crossing Suite 700\", \"57382 Yost Ridges\") | dogs : name (\"Narciso\", \"Evangeline\", \"Kacey\"), gender (\"1\", \"0\"), dog_id (2, 10, 1), age (\"9\", \"6\", \"9\"), date_departed (\"2018-03-25 02:47:40\", \"2018-03-25 10:25:46\", \"2018-03-25 10:25:46\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), weight (\"8.96\", \"4.01\", \"7.57\"), date_of_birth (\"2009-04-12 06:02:48\", \"2012-01-27 05:11:53\", \"2017-09-19 05:39:09\"), date_adopted (\"2018-03-08 15:03:00\", \"2018-02-27 11:54:35\", \"2018-03-10 15:06:43\"), owner_id (13, 11, 2), date_arrived (\"2017-10-24 04:45:13\", \"2017-06-18 19:45:38\", \"2017-10-16 20:06:21\"), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\") | professionals : zip_code (\"84515\", \"41215\", \"41215\"), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), professional_id (10, 1, 7), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Braun\", \"Ullrich\", \"Hyatt\"), state (\"Montana\", \"Wisconsin\", \"Hawaii\"), cell_number (\"1-258-285-4707x8020\", \"609-405-2990\", \"880-659-7577x736\"), email_address (\"lourdes.lowe@example.net\", \"deanna.schuster@example.com\", \"delphine29@example.com\"), home_phone (\"(920)304-4499x59146\", \"022.529.0550x1319\", \"325-155-0801x7005\"), city (\"Kirastad\", \"Baileymouth\", \"West Heidi\"), first_name (\"Karley\", \"Monte\", \"Danny\") | treatments : cost_of_treatment (313, 681, 147), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-24 22:25:58\", \"2018-02-26 09:08:53\"), treatment_id (10, 8, 2), professional_id (7, 6, 4), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (12, 12, 7)",
        "ambiguous_queries": [
            "select charge_type, amount from charges",
            "select charge_type, fee from charges"
        ],
        "gold_ambiguity": {
            "match": "{\"amount\": [{\"charges\": [\"amount\"]}, {\"charges\": [\"fee\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"amount\" refers to the schema \"charges\".\"fee\"",
        "clear_ambiguity": "{\"amount\": {\"charges\": [\"fee\"]}}",
        "gold_query": "select charge_type, fee from charges"
    },
    {
        "index": 7,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "schema_without_content": "poker_player : poker_player_id , best_finish , money_rank , people_id , earnings , final_table_made  | people : nationality , people_id , height , complete_name , full_name , birth_date",
        "schema_with_content": "poker_player : poker_player_id (4, 1, 1), best_finish (1.0, 2.0, 3.0), money_rank (166.0, 58.0, 166.0), people_id (5, 1, 1), earnings (596462.0, 189233.0, 142800.0), final_table_made (10.0, 19.0, 19.0) | people : nationality (\"Russia\", \"Bulgaria\"), people_id (6, 4, 7), height (194.0, 182.0, 194.0), complete_name (\"Teodor Salparov\", \"Maksim Botin\", \"Teodor Salparov\"), full_name (\"Teodor Salparov\", \"Maksim Botin\", \"Teodor Salparov\"), birth_date (\"August 8, 1986\", \"February 8, 1981\", \"July 14, 1983\")",
        "ambiguous_queries": [
            "select full_name, birth_date from people order by full_name asc",
            "select complete_name, birth_date from people order by complete_name asc"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"people\": [\"full_name\"]}, {\"people\": [\"complete_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"people\".\"complete_name\"",
        "clear_ambiguity": "{\"names\": {\"people\": [\"complete_name\"]}}",
        "gold_query": "select complete_name, birth_date from people order by complete_name asc"
    },
    {
        "index": 8,
        "db_id": "museum_visit",
        "ambig_type": "column",
        "db_file": "column/museum_visit/museum_visit.sqlite",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "schema_without_content": "museum : num_of_staff , name , open_year , museum_id  | visitor : age , level_of_membership , id , name  | visit : total_paid , num_of_ticket , museum_id , visitor_id , expenditure_total",
        "schema_with_content": "museum : num_of_staff (12, 25, 17), name (\"Capital Plaza Museum\", \"Jefferson Development Museum\", \"Place Tower Museum\"), open_year (\"2000\", \"2010\", \"2008\"), museum_id (6, 3, 4) | visitor : age (35, 28, 28), level_of_membership (1, 8, 5), id (2, 2, 4), name (\"Guti Midfielder\", \"Gonzalo HiguaÃ­n \", \"Rafael van der Vaart\") | visit : total_paid (89.98, 320.44, 20.44), num_of_ticket (2, 10, 2), museum_id (4, 2, 8), visitor_id (\"5\", \"3\", \"6\"), expenditure_total (89.98, 320.44, 20.44)",
        "ambiguous_queries": [
            "select sum(t2.expenditure_total) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1",
            "select sum(t2.total_paid) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"ticket expense\": [{\"visit\": [\"expenditure_total\"]}, {\"visit\": [\"total_paid\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ticket expense\" refers to the schema \"visit\".\"expenditure_total\"",
        "clear_ambiguity": "{\"ticket expense\": {\"visit\": [\"expenditure_total\"]}}",
        "gold_query": "select sum(t2.expenditure_total) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1"
    },
    {
        "index": 9,
        "db_id": "pets_1",
        "ambig_type": "column",
        "db_file": "column/pets_1/pets_1.sqlite",
        "question": "How many different types of pet are there?",
        "schema_without_content": "student : city_code , fname , advisor , sex , age , stuid , major , lname  | has_pet : stuid , petid  | pets : pet_age , kind , petid , type , weight",
        "schema_with_content": "student : city_code (\"DAL\", \"BOS\", \"ATL\"), fname (\"Charles\", \"Eric\", \"Susan\"), advisor (8723, 8721, 7723), sex (\"F\", \"M\"), age (21, 26, 18), stuid (1024, 1016, 1001), major (550, 540, 550), lname (\"Gompers\", \"Shieber\", \"Kim\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pet_age (3, 2, 1), kind (\"cat\", \"dog\"), petid (2001, 2002, 2003), type (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3)",
        "ambiguous_queries": [
            "select count(distinct type) from pets",
            "select count(distinct kind) from pets"
        ],
        "gold_ambiguity": {
            "match": "{\"types\": [{\"pets\": [\"type\"]}, {\"pets\": [\"kind\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"types\" refers to the schema \"pets\".\"kind\"",
        "clear_ambiguity": "{\"types\": {\"pets\": [\"kind\"]}}",
        "gold_query": "select count(distinct kind) from pets"
    },
    {
        "index": 10,
        "db_id": "voter_1",
        "ambig_type": "column",
        "db_file": "column/voter_1/voter_1.sqlite",
        "question": "What are the maximum and minimum values of area codes?",
        "schema_without_content": "area_code_state : zip_code , postal_code , state  | contestants : contestant_name , contestant_number  | votes : vote_id , created , phone_number , contestant_number , state",
        "schema_with_content": "area_code_state : zip_code (878, 602, 256), postal_code (878, 602, 256), state (\"KS\", \"MS\", \"CO\") | contestants : contestant_name (\"Nita Coster\", \"Ericka Dieter\", \"Ericka Dieter\"), contestant_number (5, 7, 3) | votes : vote_id (1, 5, 1), created (\"2018-03-09 19:03:21\", \"2018-03-09 19:03:40\", \"2018-03-09 19:03:36\"), phone_number (5112677315, 5112677315, 7182887233), contestant_number (2, 3, 5), state (\"NY\", \"CA\", \"NJ\n\")",
        "ambiguous_queries": [
            "select max(zip_code), min(zip_code) from area_code_state",
            "select max(postal_code), min(postal_code) from area_code_state"
        ],
        "gold_ambiguity": {
            "match": "{\"codes\": [{\"area_code_state\": [\"zip_code\"]}, {\"area_code_state\": [\"postal_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"codes\" refers to the schema \"area_code_state\".\"zip_code\"",
        "clear_ambiguity": "{\"codes\": {\"area_code_state\": [\"zip_code\"]}}",
        "gold_query": "select max(zip_code), min(zip_code) from area_code_state"
    },
    {
        "index": 11,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "column",
        "db_file": "column/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , date_effective_to , version_number , template_id , template_type_code , date_effective_from  | documents : document_description , document_name , other_details , template_id , document_id  | paragraphs : paragraph_id , para_content , segment_text , document_id , other_details",
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Presentation\", \"Book\"), template_type_code (\"CV\", \"CV\", \"PPT\") | templates : template_details (\"\"), date_effective_to (\"1999-07-08 03:31:04\", \"1999-07-08 03:31:04\", \"1994-12-07 13:26:23\"), version_number (0, 8, 8), template_id (11, 19, 16), template_type_code (\"AD\", \"PPT\", \"AD\"), date_effective_from (\"1986-12-09 14:51:36\", \"2003-06-05 04:03:45\", \"1986-11-14 12:20:18\") | documents : document_description (\"u\", \"y\", \"b\"), document_name (\"Introduction of OS\", \"Summer Show\", \"Understanding DB\"), other_details (None), template_id (20, 25, 1), document_id (50123, 3830, 2394) | paragraphs : paragraph_id (9, 280120913, 280120913), para_content (\"Ireland\", \"UK\", \"Brazil\"), segment_text (\"Ireland\", \"UK\", \"Brazil\"), document_id (3540024, 3830, 50123), other_details (None)",
        "ambiguous_queries": [
            "select t1.paragraph_id, t1.para_content from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
            "select t1.paragraph_id, t1.segment_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'"
        ],
        "gold_ambiguity": {
            "match": "{\"paragraphs\": [{\"paragraphs\": [\"para_content\"]}, {\"paragraphs\": [\"segment_text\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"paragraphs\" refers to the schema \"paragraphs\".\"para_content\"",
        "clear_ambiguity": "{\"paragraphs\": {\"paragraphs\": [\"para_content\"]}}",
        "gold_query": "select t1.paragraph_id, t1.para_content from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'"
    },
    {
        "index": 12,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "schema_without_content": "continents : continent , contid  | countries : countryid , continent , nationname , name  | car_makers : maker , fullname , id , country  | model_list : model , maker , modelid  | car_names : make \", model , makeid  | cars_data : mpg , edispl , id , accelerate , year , horsepower , cylinders , weight",
        "schema_with_content": "continents : continent (\"europe\", \"africa\", \"africa\"), contid (5, 2, 4) | countries : countryid (5, 9, 3), continent (1, 2, 3), nationname (\"new zealand\", \"sweden\", \"egypt\"), name (\"new zealand\", \"sweden\", \"egypt\") | car_makers : maker (\"saab\", \"amc\", \"fiat\"), fullname (\"General Motors\", \"Daimler Benz\", \"Triumph\"), id (19, 20, 4), country (\"7\", \"4\", \"7\") | model_list : model (\"mercury\", \"mercedes\", \"subaru\"), maker (1, 12, 5), modelid (33, 7, 24) | car_names : make (\"datsun 200sx\", \"datsun 210 mpg\", \"peugeot 504 (sw)\"), model (\"saab\", \"subaru\", \"subaru\"), makeid (109, 110, 344) | cars_data : mpg (\"24.3\", \"27\", \"34.1\"), edispl (140.0, 146.0, 130.0), id (183, 259, 285), accelerate (14.2, 15.3, 19.5), year (1976, 1972, 1972), horsepower (\"155\", \"69\", \"129\"), cylinders (6, 8, 8), weight (4215, 2210, 2815)",
        "ambiguous_queries": [
            "select t1.name from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.name having count(*) >= 3",
            "select t1.nationname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.nationname having count(*) >= 3"
        ],
        "gold_ambiguity": {
            "match": "{\"countries\": [{\"countries\": [\"name\"]}, {\"countries\": [\"nationname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"countries\" refers to the schema \"countries\".\"name\"",
        "clear_ambiguity": "{\"countries\": {\"countries\": [\"name\"]}}",
        "gold_query": "select t1.name from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.name having count(*) >= 3"
    },
    {
        "index": 13,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "schema_without_content": "continents : contid , continent  | countries : countryid , countryname , continent  | car_makers : id , fullname , maker , country  | model_list : modelid , maker , model  | car_names : makeid , make , model  | cars_data : accelerate , id , mileage_per_gallon , cylinders , fuel_efficiency , horsepower , year , weight , edispl",
        "schema_with_content": "continents : contid (5, 3, 3), continent (\"asia\", \"asia\", \"asia\") | countries : countryid (11, 8, 8), countryname (\"egypt\", \"mexico\", \"usa\"), continent (2, 5, 4) | car_makers : id (3, 22, 22), fullname (\"Ford Motor Company\", \"Opel\", \"Renault\"), maker (\"kia\", \"subaru\", \"daimler benz\"), country (\"8\", \"5\", \"3\") | model_list : modelid (15, 13, 1), maker (9, 11, 14), model (\"chrysler\", \"amc\", \"chevrolet\") | car_names : makeid (148, 323, 352), make (\"renault 12tl\", \"volkswagen super beetle\", \"mazda rx-4\"), model (\"triumph\", \"triumph\", \"chevrolet\") | cars_data : accelerate (20.4, 16.8, 16.7), id (249, 348, 298), mileage_per_gallon (\"19.2\", \"36.1\", \"21\"), cylinders (6, 4, 8), fuel_efficiency (\"19.2\", \"36.1\", \"21\"), horsepower (\"77\", \"208\", \"98\"), year (1980, 1977, 1977), weight (1955, 4278, 2640), edispl (340.0, 108.0, 262.0)",
        "ambiguous_queries": [
            "select avg(fuel_efficiency) from cars_data where cylinders = 4",
            "select avg(mileage_per_gallon) from cars_data where cylinders = 4"
        ],
        "gold_ambiguity": {
            "match": "{\"mpg\": [{\"cars_data\": [\"fuel_efficiency\"]}, {\"cars_data\": [\"mileage_per_gallon\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"mpg\" refers to the schema \"cars_data\".\"mileage_per_gallon\"",
        "clear_ambiguity": "{\"mpg\": {\"cars_data\": [\"mileage_per_gallon\"]}}",
        "gold_query": "select avg(mileage_per_gallon) from cars_data where cylinders = 4"
    },
    {
        "index": 14,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "schema_without_content": "tv_channel : country , id , program_name , pay_per_view_ppv , hight_definition_tv , package_option , pixel_aspect_ratio_par , content , language , show_name  | tv_series : 18_49_rating_share , viewers_m , air_date , episode , rating , id , share , channel , weekly_rank  | cartoon : directed_by , title , channel , id , original_air_date , written_by , production_code",
        "schema_with_content": "tv_channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"700\", \"708\", \"701\"), program_name (\"MTV Live HD\", \"Music Box Italia\", \"MTV Dance\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia\", \"Option\", \"Sky Famiglia\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), language (\"Italian\", \"English\"), show_name (\"MTV Live HD\", \"Music Box Italia\", \"MTV Dance\") | tv_series : 18_49_rating_share (\"2.7/7\", \"1.7/5\", \"2.4/6\"), viewers_m (\"6.05\", \"5.13\", \"6.06\"), air_date (\"September 24, 2007\", \"November 19, 2007\", \"September 24, 2007\"), episode (\"Keepers\", \"Blowback\", \"Winterland\"), rating (\"4.3\", \"3.7\", \"4.0\"), id (12.0, 6.0, 3.0), share (9.0, 9.0, 6.0), channel (\"728\", \"717\", \"719\"), weekly_rank (72.0, 65.0, 43.0) | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), title (\"The Rise of the Blue Beetle!\", \"The Rise of the Blue Beetle!\", \"Evil Under the Sea!\"), channel (\"707\", \"703\", \"705\"), id (9.0, 8.0, 6.0), original_air_date (\"January9,2009\", \"January23,2009\", \"December12,2008\"), written_by (\"Matt Wayne\", \"Michael Jelenic\", \"Adam Beechen\"), production_code (110.0, 102.0, 107.0)",
        "ambiguous_queries": [
            "select count(distinct show_name), count(distinct content) from tv_channel",
            "select count(distinct program_name), count(distinct content) from tv_channel"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"tv_channel\": [\"show_name\"]}, {\"tv_channel\": [\"program_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"tv_channel\".\"program_name\"",
        "clear_ambiguity": "{\"names\": {\"tv_channel\": [\"program_name\"]}}",
        "gold_query": "select count(distinct program_name), count(distinct content) from tv_channel"
    },
    {
        "index": 15,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "schema_without_content": "highschooler : id , full_name , grade , given_name  | friend : student_id , friend_id  | likes : liked_id , student_id",
        "schema_with_content": "highschooler : id (1304, 1510, 1304), full_name (\"Haley\", \"Logan\", \"John\"), grade (12, 10, 10), given_name (\"Haley\", \"Logan\", \"John\") | friend : student_id (1689, 1316, 1689), friend_id (1661, 1641, 1501) | likes : liked_id (1689, 1304, 1101), student_id (1709, 1911, 1689)",
        "ambiguous_queries": [
            "select t2.full_name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
            "select t2.given_name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"highschooler\": [\"full_name\"]}, {\"highschooler\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"highschooler\".\"given_name\"",
        "clear_ambiguity": "{\"names\": {\"highschooler\": [\"given_name\"]}}",
        "gold_query": "select t2.given_name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id"
    },
    {
        "index": 16,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "schema_without_content": "addresses : line_3 , zip_postcode , line_2 , city , address_id , other_address_details , line_1 , state_province_county , country  | courses : course_id , course_name , course_description , other_details  | departments : department_name , other_details , department_id , department_description  | degree_programs : other_details , degree_summary_description , degree_summary_name , degree_program_id , department_id  | sections : course_id , other_details , section_id , section_description , section_name  | semesters : semester_name , semester_description , other_details , semester_id  | students : date_first_registered , cell_mobile_number 919-3594x3661\", \"889-8954x524\", \"877.549.9067x8723\", first_name , email_address , date_left , second_name , additional_name , last_name , ssn , other_student_details , permanent_address_id , student_id , current_address_id  | student_enrolment : student_id , degree_program_id , semester_id , student_enrolment_id , other_details  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_id , transcript_date , other_details  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : line_3 (None), zip_postcode (\"847\", \"148\", \"386\"), line_2 (\"Apt. 406\", \"Suite 383\", \"Apt. 305\"), city (\"Rutherfordtown\", \"Lake Careyberg\", \"South Palma\"), address_id (2, 9, 3), other_address_details (None), line_1 (\"67942 Carlotta Ferry Apt. 686\", \"979 Haag Shores Suite 656\", \"0643 Muller Vista\"), state_province_county (\"Florida\", \"Idaho\", \"NorthCarolina\"), country (\"Norfolk Island\", \"Gibraltar\", \"Iceland\") | courses : course_id (1, 5, 6), course_name (\"ml\", \"os\", \"oop\"), course_description (\"q\", \"w\", \"k\"), other_details (None) | departments : department_name (\"engineer\", \"geography\", \"geography\"), other_details (None), department_id (7, 12, 5), department_description (\"autem\", \"error\", \"nihil\") | degree_programs : other_details (None), degree_summary_description (\"earum\", \"unde\", \"architecto\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (14, 9, 2), department_id (15, 14, 12) | sections : course_id (12, 14, 6), other_details (None), section_id (12, 13, 3), section_description (\"quis\", \"reprehenderit\", \"facilis\"), section_name (\"p\", \"d\", \"o\") | semesters : semester_name (\"spring 2016\", \"spring 2016\", \"spring 2010\"), semester_description (\"o\", \"c\", \"x\"), other_details (None), semester_id (1, 7, 11) | students : date_first_registered (\"2004-12-24 12:36:46\", \"2017-01-04 08:10:25\", \"1982-02-14 08:46:35\"), cell_mobile_number (\"(605)919-3594x3661\", \"(096)889-8954x524\", \"877.549.9067x8723\"), first_name (\"Jett\", \"Gregg\", \"Stanford\"), email_address (\"lhartmann@example.org\", \"lhartmann@example.org\", \"gracie29@example.com\"), date_left (\"2006-08-04 17:26:49\", \"2006-08-04 17:26:49\", \"1975-10-09 00:49:27\"), second_name (\"Mossie\", \"Anna\", \"Neal\"), additional_name (\"Mossie\", \"Anna\", \"Neal\"), last_name (\"Rempel\", \"Carroll\", \"Schuppe\"), ssn (\"3\", \"43\", \"141072406\"), other_student_details (\"assumenda\", \"qui\", \"omnis\"), permanent_address_id (11, 3, 8), student_id (12, 15, 10), current_address_id (14, 2, 2) | student_enrolment : student_id (5, 9, 1), degree_program_id (9, 11, 8), semester_id (13, 2, 12), student_enrolment_id (2, 12, 8), other_details (None) | student_enrolment_courses : course_id (12, 6, 14), student_enrolment_id (4, 2, 8), student_course_id (76, 604750, 2) | transcripts : transcript_id (7, 14, 15), transcript_date (\"1975-10-28 15:16:51\", \"2013-06-30 13:01:40\", \"1990-03-05 11:59:41\"), other_details (None) | transcript_contents : student_course_id (45105806, 76, 96), transcript_id (4, 11, 4)",
        "ambiguous_queries": [
            "select first_name, second_name, last_name from students order by date_left asc limit 1",
            "select first_name, additional_name, last_name from students order by date_left asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"students\": [\"second_name\"]}, {\"students\": [\"additional_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"students\".\"additional_name\"",
        "clear_ambiguity": "{\"name\": {\"students\": [\"additional_name\"]}}",
        "gold_query": "select first_name, additional_name, last_name from students order by date_left asc limit 1"
    },
    {
        "index": 17,
        "db_id": "museum_visit",
        "ambig_type": "column",
        "db_file": "column/museum_visit/museum_visit.sqlite",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "schema_without_content": "museum : museum_id , num_of_staff , name , open_year  | visitor : id , years_old , level_of_membership , visitor_age , name  | visit : visitor_id , total_spent , num_of_ticket , museum_id",
        "schema_with_content": "museum : museum_id (7, 1, 2), num_of_staff (62, 25, 12), name (\"Capital Plaza Museum\", \"Central City District Residential Museum\", \"Central City District Residential Museum\"), open_year (\"2008\", \"2012\", \"2000\") | visitor : id (3, 1, 2), years_old (56, 36, 27), level_of_membership (1, 5, 5), visitor_age (56, 36, 27), name (\"Guti Midfielder\", \"Gonzalo HiguaÃ­n \", \"Guti Midfielder\") | visit : visitor_id (\"5\", \"3\", \"6\"), total_spent (209.98, 20.44, 320.44), num_of_ticket (24, 20, 2), museum_id (1, 2, 4)",
        "ambiguous_queries": [
            "select t1.id, t1.name, t1.visitor_age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id having count(*) > 1",
            "select t1.id, t1.name, t1.years_old from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id having count(*) > 1"
        ],
        "gold_ambiguity": {
            "match": "{\"visitors\": [{\"visitor\": [\"visitor_age\"]}, {\"visitor\": [\"years_old\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"visitors\" refers to the schema \"visitor\".\"years_old\"",
        "clear_ambiguity": "{\"visitors\": {\"visitor\": [\"years_old\"]}}",
        "gold_query": "select t1.id, t1.name, t1.years_old from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id having count(*) > 1"
    },
    {
        "index": 18,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "schema_without_content": "city : name , population , id , district , countrycode  | sqlite_sequence : name , seq  | country : gnp , continent , governmentform , localname , region , land_area , code , name , gnpold , headofstate , extent , indepyear , code2 , capital , lifeexpectancy , population  | countrylanguage : language , percentage , countrycode , isofficial",
        "schema_with_content": "city : name (\"Yatsushiro\", \"Olmalik\", \"Oral\"), population (161023, 368993, 250718), id (197, 3953, 3215), district (\"MayagÃ¼ez\", \"Borsod-AbaÃºj-ZemplÃ©n\", \"North Austria\"), countrycode (\"VNM\", \"PNG\", \"ISR\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnp (6398.0, 3377.0, 5951.0), continent (\"Europe\", \"Antarctica\", \"South America\"), governmentform (\"Constitutional Monarchy, Federation\", \"US Territory\", \"Dependent Territory of Norway\"), localname (\"MoÃ§ambique\", \"Rwanda/Urwanda\", \"CÃ´te dâIvoire\"), region (\"North America\", \"Nordic Countries\", \"North America\"), land_area (883749.0, 8547403.0, 2381741.0), code (\"KOR\", \"TCA\", \"NOR\"), name (\"Madagascar\", \"Burkina Faso\", \"Mali\"), gnpold (4697.0, 7984.0, 173610.0), headofstate (\"Nursultan Nazarbajev\", \"Harald V\", \"Milan Kucan\"), extent (883749.0, 8547403.0, 2381741.0), indepyear (1978, 1838, 1838), code2 (\"KI\", \"AE\", \"CV\"), capital (608, 2253, 2429), lifeexpectancy (79.0, 74.9, 81.6), population (20000, 43000, 5171300) | countrylanguage : language (\"Malenasian Languages\", \"Soninke\", \"KabyÃ©\"), percentage (99.6, 53.1, 0.3), countrycode (\"ARG\", \"TJK\", \"DMA\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select name, land_area from country order by land_area desc limit 5",
            "select name, extent from country order by extent desc limit 5"
        ],
        "gold_ambiguity": {
            "match": "{\"surface areas\": [{\"country\": [\"land_area\"]}, {\"country\": [\"extent\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"surface areas\" refers to the schema \"country\".\"land_area\"",
        "clear_ambiguity": "{\"surface areas\": {\"country\": [\"land_area\"]}}",
        "gold_query": "select name, land_area from country order by land_area desc limit 5"
    },
    {
        "index": 19,
        "db_id": "pets_1",
        "ambig_type": "column",
        "db_file": "column/pets_1/pets_1.sqlite",
        "question": "Find the type and weight of the youngest pet.",
        "schema_without_content": "student : fname , advisor , major , lname , city_code , age , sex , stuid  | has_pet : stuid , petid  | pets : kind , type , petid , weight , pet_age",
        "schema_with_content": "student : fname (\"Dinesh\", \"Dinesh\", \"Stacy\"), advisor (5718, 8741, 7271), major (540, 550, 520), lname (\"Cheng\", \"Brody\", \"Leighton\"), city_code (\"DAL\", \"DET\", \"NYC\"), age (19, 19, 17), sex (\"F\", \"M\"), stuid (1012, 1031, 1029) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : kind (\"cat\", \"dog\"), type (\"cat\", \"dog\"), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1)",
        "ambiguous_queries": [
            "select type, weight from pets order by pet_age limit 1",
            "select kind, weight from pets order by pet_age limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"type\": [{\"pets\": [\"type\"]}, {\"pets\": [\"kind\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type\" refers to the schema \"pets\".\"type\"",
        "clear_ambiguity": "{\"type\": {\"pets\": [\"type\"]}}",
        "gold_query": "select type, weight from pets order by pet_age limit 1"
    },
    {
        "index": 20,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "schema_without_content": "stadium : name , average , highest , lowest , location , seating_capacity , maximum_capacity , stadium_id  | singer : song_release_year , singer_id , country , name , is_male , song_name , age  | concert : theme , concert_id , concert_name , stadium_id , year  | singer_in_concert : singer_id , concert_id",
        "schema_with_content": "stadium : name (\"Balmoor\", \"Balmoor\", \"Balmoor\"), average (864, 730, 638), highest (1980, 780, 1980), lowest (466, 315, 411), location (\"Peterhead\", \"Stirling Albion\", \"Raith Rovers\"), seating_capacity (3808, 3808, 11998), maximum_capacity (3808, 3808, 11998), stadium_id (9, 5, 3) | singer : song_release_year (\"1992\", \"1992\", \"2016\"), singer_id (3, 4, 3), country (\"Netherlands\", \"United States\", \"France\"), name (\"Rose White\", \"John Nizinik\", \"Timbaland\"), is_male (\"F\", \"T\"), song_name (\"Love\", \"Dangerous\", \"Dangerous\"), age (52, 52, 43) | concert : theme (\"Free choice 2\", \"Party All Night\", \"Free choice 2\"), concert_id (6, 5, 4), concert_name (\"Super bootcamp\", \"Auditions\", \"Week 2\"), stadium_id (\"1\", \"10\", \"2\"), year (\"2014\", \"2015\") | singer_in_concert : singer_id (\"2\", \"3\", \"4\"), concert_id (1, 2, 6)",
        "ambiguous_queries": [
            "select name, seating_capacity from stadium order by average desc limit 1",
            "select name, maximum_capacity from stadium order by average desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"capacity\": [{\"stadium\": [\"seating_capacity\"]}, {\"stadium\": [\"maximum_capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"capacity\" refers to the schema \"stadium\".\"seating_capacity\"",
        "clear_ambiguity": "{\"capacity\": {\"stadium\": [\"seating_capacity\"]}}",
        "gold_query": "select name, seating_capacity from stadium order by average desc limit 1"
    },
    {
        "index": 21,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "Give the city and country for the Alton airport.",
        "schema_without_content": "airlines : airline , uid , abbreviation , country  | airports : airportname , airportcode , countryabbrev , city , nation , sovereign_state  | flights : destairport , flightno , airline , sourceairport",
        "schema_with_content": "airlines : airline (\"AirTran Airways\", \"Northwest Airlines\", \"Delta Airlines\"), uid (4, 12, 12), abbreviation (\"Continental\", \"USAir\", \"Virgin\"), country (\"USA\") | airports : airportname (\"Anacortes \", \"Aspen \", \"Algona \"), airportcode (\"ALB\", \"APG\", \"AXB\"), countryabbrev (\"US \", \"US\"), city (\"Appleton \", \"Antlers \", \"Akron/Canton \"), nation (\"United States \"), sovereign_state (\"United States \") | flights : destairport (\" AKO\", \" ARC\", \" QAW\"), flightno (1087, 1255, 1260), airline (7, 8, 9), sourceairport (\" TDW\", \" ADG\", \" AYZ\")",
        "ambiguous_queries": [
            "select city, nation from airports where airportname = 'Alton'",
            "select city, sovereign_state from airports where airportname = 'Alton'"
        ],
        "gold_ambiguity": {
            "match": "{\"airport\": [{\"airports\": [\"nation\"]}, {\"airports\": [\"sovereign_state\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airport\" refers to the schema \"airports\".\"nation\"",
        "clear_ambiguity": "{\"airport\": {\"airports\": [\"nation\"]}}",
        "gold_query": "select city, nation from airports where airportname = 'Alton'"
    },
    {
        "index": 22,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "schema_without_content": "players : player_id , family_name , country_code , first_name , surname , birth_date , hand  | matches : winner_age , best_of , winner_ht , loser_name , tourney_id , loser_age , tourney_date , loser_id , winner_id , loser_ht , score  6-4\", \"6-2 3-6 6-2\", \"6-2 6-7 7-5\", winner_name , round , loser_entry , winner_hand , surface , loser_hand , loser_rank_points , winner_entry , loser_rank , winner_seed , minutes , match_num , tourney_level , draw_size , year , winner_rank , tourney_name , loser_seed , loser_ioc , winner_ioc , winner_rank_points  | rankings : ranking , player_id , tours , ranking_points , ranking_date",
        "schema_with_content": "players : player_id (215069, 208717, 215182), family_name (\"Ninomiya\", \"Nooni\", \"Leal\"), country_code (\"SUI\", \"AUS\", \"CAN\"), first_name (\"Tamaryn\", \"Lyuboslava\", \"Shelley\"), surname (\"Ninomiya\", \"Nooni\", \"Leal\"), birth_date (19951119, 19780514, 19780308), hand (\"U\", \"R\", \"\") | matches : winner_age (23.0444900753, 20.917180013699998, 27.947980835), best_of (3), winner_ht (184, 175, 180), loser_name (\"Jelena Jankovic\", \"Kiki Bertens\", \"Alize Cornet\"), tourney_id (\"2016-1087\", \"2016-1072\", \"2017-1005\"), loser_age (27.4442162902, 25.4839151266, 27.7754962355), tourney_date (20170807, 20170403, 20160307), loser_id (201506, 201621, 201458), winner_id (201520, 201596, 201619), loser_ht (176, 174, 180), score (\"7-6(0) 6-4\", \"6-2 3-6 6-2\", \"6-2 6-7(4) 7-5\"), winner_name (\"Na Li\", \"Svetlana Kuznetsova\", \"Julia Goerges\"), round (\"R16\", \"F\", \"SF\"), loser_entry (\"\"), winner_hand (\"R\", \"L\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_hand (\"R\", \"L\"), loser_rank_points (2050, 6850, 2590), winner_entry (\"\"), loser_rank (1, 60, 5), winner_seed (18, 22, 30), minutes (94, 162, 74), match_num (291, 298, 197), tourney_level (\"P\", \"W\", \"P\"), draw_size (8, 8, 32), year (2013, 2016, 2017), winner_rank (13, 37, 9), tourney_name (\"Biel\", \"Rabat\", \"Dubai\"), loser_seed (12, 11, 11), loser_ioc (\"ROU\", \"JPN\", \"POL\"), winner_ioc (\"SVK\", \"NED\", \"SRB\"), winner_rank_points (1343, 1652, 3060) | rankings : ranking (1031, 713, 804), player_id (204379, 214278, 216138), tours (9, 14, 21), ranking_points (4191, 1646, 6144), ranking_date (19980202, 20080428, 19880912)",
        "ambiguous_queries": [
            "select first_name, family_name from players where hand = 'L' order by birth_date",
            "select first_name, surname from players where hand = 'L' order by birth_date"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"players\": [\"family_name\"]}, {\"players\": [\"surname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"players\".\"surname\"",
        "clear_ambiguity": "{\"names\": {\"players\": [\"surname\"]}}",
        "gold_query": "select first_name, surname from players where hand = 'L' order by birth_date"
    },
    {
        "index": 23,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "schema_without_content": "tv_channel : id , hight_definition_tv , series_name , package_option \", \"Option\", \"Option\", content , language , pay_per_view_ppv , pixel_aspect_ratio_par , country  | tv_series : air_date , id , rating , share , episode , 18_49_rating_share , channel , viewers_m , weekly_rank  | cartoon : title , id , broadcast_network , directed_by , production_code , written_by , original_air_date , tv_station",
        "schema_with_content": "tv_channel : id (\"700\", \"705\", \"719\"), hight_definition_tv (\"no\", \"yes\"), series_name (\"MTV Classic\", \"MTV Rocks\", \"MTV Music\"), package_option (\"no ( FTV )\", \"Option\", \"Option\"), content (\"music\"), language (\"Italian\", \"English\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : air_date (\"October 1, 2007\", \"October 15, 2007\", \"December 17, 2007\"), id (1.0, 3.0, 1.0), rating (\"5.8\", \"3.4\", \"5.8\"), share (5.0, 7.0, 5.0), episode (\"Emily\", \"The Year of the Rabbit\", \"The Legend of Dylan McCleen\"), 18_49_rating_share (\"2.1/5\", \"3.2/8\", \"2.4/6\"), channel (\"719\", \"713\", \"701\"), viewers_m (\"6.05\", \"6.75\", \"8.23\"), weekly_rank (67.0, 65.0, 61.0) | cartoon : title (\"Dawn of the Dead Man!\", \"Terror on Dinosaur Island!\", \"Dawn of the Dead Man!\"), id (9.0, 3.0, 6.0), broadcast_network (\"701\", \"708\", \"707\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (106.0, 112.0, 111.0), written_by (\"Steven Melching\", \"Adam Beechen\", \"Todd Casey\"), original_air_date (\"February27,2009\", \"January30,2009\", \"February6,2009\"), tv_station (\"701\", \"708\", \"707\")",
        "ambiguous_queries": [
            "select production_code, broadcast_network from cartoon order by original_air_date limit 1",
            "select production_code, tv_station from cartoon order by original_air_date limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"cartoon\": [{\"cartoon\": [\"broadcast_network\"]}, {\"cartoon\": [\"tv_station\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cartoon\" refers to the schema \"cartoon\".\"tv_station\"",
        "clear_ambiguity": "{\"cartoon\": {\"cartoon\": [\"tv_station\"]}}",
        "gold_query": "select production_code, tv_station from cartoon order by original_air_date limit 1"
    },
    {
        "index": 24,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "What is the average and the maximum capacity of all stadiums?",
        "schema_without_content": "stadium : stadium_id , maximum_capacity , lowest , seating_capacity , highest , name , average , location  | singer : name , song_name , is_male , song_release_year , country , singer_id , age  | concert : concert_name , theme , year , stadium_id , concert_id  | singer_in_concert : singer_id , concert_id",
        "schema_with_content": "stadium : stadium_id (4, 2, 3), maximum_capacity (4125, 52500, 52500), lowest (400, 466, 466), seating_capacity (4125, 52500, 52500), highest (1125, 837, 780), name (\"Forthbank Stadium\", \"Forthbank Stadium\", \"Bayview Stadium\"), average (864, 730, 638), location (\"Alloa Athletic\", \"Ayr United\", \"East Fife\") | singer : name (\"Rose White\", \"Timbaland\", \"Tribal King\"), song_name (\"You\", \"Dangerous\", \"Hey Oh\"), is_male (\"F\", \"T\"), song_release_year (\"2016\", \"2003\", \"2008\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 2, 4), age (41, 25, 32) | concert : concert_name (\"Week 2\", \"Auditions\", \"Auditions\"), theme (\"Happy Tonight\", \"Party All Night\", \"Happy Tonight\"), year (\"2014\", \"2015\"), stadium_id (\"1\", \"7\", \"1\"), concert_id (6, 5, 1) | singer_in_concert : singer_id (\"6\", \"4\", \"4\"), concert_id (1, 4, 3)",
        "ambiguous_queries": [
            "select avg(seating_capacity), max(seating_capacity) from stadium",
            "select avg(maximum_capacity), max(maximum_capacity) from stadium"
        ],
        "gold_ambiguity": {
            "match": "{\"capacity\": [{\"stadium\": [\"seating_capacity\"]}, {\"stadium\": [\"maximum_capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"capacity\" refers to the schema \"stadium\".\"seating_capacity\"",
        "clear_ambiguity": "{\"capacity\": {\"stadium\": [\"seating_capacity\"]}}",
        "gold_query": "select avg(seating_capacity), max(seating_capacity) from stadium"
    },
    {
        "index": 25,
        "db_id": "battle_death",
        "ambig_type": "column",
        "db_file": "column/battle_death/battle_death.sqlite",
        "question": "List the name, date and result of each battle.",
        "schema_without_content": "battle : engagement_date , name , battle_date , id , latin_commander , bulgarian_commander , result  | ship : lost_in_battle , tonnage , disposition_of_ship , name , ship_type , id , location  | death : id , injured , caused_by_ship_id , killed , note",
        "schema_with_content": "battle : engagement_date (\"31 June 1208\", \"4 September 1207\", \"14 April 1205\"), name (\"Battle of Messinopolis\", \"Battle of Messinopolis\", \"Battle of Serres\"), battle_date (\"31 June 1208\", \"4 September 1207\", \"14 April 1205\"), id (3, 2, 3), latin_commander (\"Baldwin I\", \"John of Brienne\", \"Thierry de Termond\"), bulgarian_commander (\"Boril\", \"Unknown\", \"Kaloyan\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\") | ship : lost_in_battle (8, 6, 5), tonnage (\"t\", \"391\", \"225\"), disposition_of_ship (\"Sank\", \"Sank\", \"Wrecked\"), name (\"Mary\", \"Three Brothers\", \"HMS Avon\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), id (3, 3, 3), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\") | death : id (10, 1, 11), injured (0, 9, 5), caused_by_ship_id (5, 1, 5), killed (8, 25, 29), note (\"Gajapati, Odisha\", \"East Champaran, Bihar\", \"Bastar, Chattisgarh\")",
        "ambiguous_queries": [
            "select name, battle_date from battle",
            "select name, engagement_date from battle"
        ],
        "gold_ambiguity": {
            "match": "{\"battle\": [{\"battle\": [\"battle_date\"]}, {\"battle\": [\"engagement_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"battle\" refers to the schema \"battle\".\"battle_date\"",
        "clear_ambiguity": "{\"battle\": {\"battle\": [\"battle_date\"]}}",
        "gold_query": "select name, battle_date from battle"
    },
    {
        "index": 26,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "schema_without_content": "addresses : line_1 , address_id , line_2 , other_address_details , line_3 , zip_postcode , city , country , state_province_county  | courses : course_description , course_id , other_details , course_name  | departments : department_id , department_name , other_details , department_description  | degree_programs : program_name , degree_summary_description , degree_program_id , department_id , other_details , degree_name  | sections : section_description , course_id , other_details , section_name , section_id  | semesters : other_details , semester_name , semester_id , semester_description  | students : date_left , last_name , cell_mobile_number 153-1469x1733\", \"153-1469x1733\", ssn , email_address , current_address_id , other_student_details , middle_name , first_name , date_first_registered , permanent_address_id , student_id  | student_enrolment : student_id , semester_id , student_enrolment_id , other_details , degree_program_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : line_1 (\"2294 Grant Square Apt. 235\", \"7081 Eda Center\", \"193 Marlin Brook\"), address_id (10, 15, 6), line_2 (\"Suite 865\", \"Apt. 335\", \"Suite 830\"), other_address_details (None), line_3 (None), zip_postcode (\"839\", \"839\", \"847\"), city (\"Lake Laishafurt\", \"Prohaskafort\", \"Port Oceane\"), country (\"Croatia\", \"Lesotho\", \"Bermuda\"), state_province_county (\"Kansas\", \"Kansas\", \"Arkansas\") | courses : course_description (\"c\", \"v\", \"q\"), course_id (9, 15, 12), other_details (None), course_name (\"cal\", \"nlp\", \"rs\") | departments : department_id (1, 12, 9), department_name (\"history\", \"medical\", \"engineer\"), other_details (None), department_description (\"autem\", \"nihil\", \"nisi\") | degree_programs : program_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"voluptas\", \"aperiam\", \"cumque\"), degree_program_id (5, 10, 7), department_id (4, 7, 4), other_details (None), degree_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_description (\"et\", \"ad\", \"quis\"), course_id (8, 8, 10), other_details (None), section_name (\"d\", \"j\", \"j\"), section_id (15, 13, 10) | semesters : other_details (None), semester_name (\"winter 2010\", \"winter 2018\", \"fall 2010\"), semester_id (10, 15, 15), semester_description (\"t\", \"m\", \"y\") | students : date_left (\"2007-03-31 09:53:19\", \"2004-12-08 05:29:11\", \"2007-03-31 09:53:19\"), last_name (\"Schuppe\", \"Gleichner\", \"Osinski\"), cell_mobile_number (\"07661787471\", \"(982)153-1469x1733\", \"(982)153-1469x1733\"), ssn (\"402\", \"3\", \"494\"), email_address (\"nya.lesch@example.net\", \"jhuel@example.com\", \"swift.kolby@example.com\"), current_address_id (9, 7, 14), other_student_details (\"non\", \"facilis\", \"autem\"), middle_name (\"Osborne\", \"Anna\", \"Brooklyn\"), first_name (\"Jarvis\", \"Hobart\", \"Jarvis\"), date_first_registered (\"1982-06-19 13:15:18\", \"1982-02-14 08:46:35\", \"2017-01-04 08:10:25\"), permanent_address_id (15, 5, 9), student_id (15, 12, 6) | student_enrolment : student_id (12, 5, 5), semester_id (4, 13, 6), student_enrolment_id (10, 4, 6), other_details (None), degree_program_id (5, 8, 2) | student_enrolment_courses : course_id (6, 2, 8), student_course_id (1, 9860, 438800), student_enrolment_id (13, 2, 13) | transcripts : other_details (None), transcript_id (15, 12, 10), transcript_date (\"1975-10-28 15:16:51\", \"1985-08-21 09:32:39\", \"1975-10-28 15:16:51\") | transcript_contents : student_course_id (76, 76, 2), transcript_id (15, 5, 9)",
        "ambiguous_queries": [
            "select t1.program_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.program_name order by count(*) desc limit 1",
            "select t1.degree_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_name order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"program\": [{\"degree_programs\": [\"program_name\"]}, {\"degree_programs\": [\"degree_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"program\" refers to the schema \"degree_programs\".\"degree_name\"",
        "clear_ambiguity": "{\"program\": {\"degree_programs\": [\"degree_name\"]}}",
        "gold_query": "select t1.degree_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_name order by count(*) desc limit 1"
    },
    {
        "index": 27,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "schema_without_content": "poker_player : earnings , final_table_made , money_rank , people_id , poker_player_id , best_finish  | people : birth_date , nationality , height , people_id , full_name , complete_name",
        "schema_with_content": "poker_player : earnings (476090.0, 189233.0, 104871.0), final_table_made (26.0, 42.0, 21.0), money_rank (58.0, 166.0, 166.0), people_id (7, 5, 5), poker_player_id (4, 2, 3), best_finish (1.0, 2.0, 3.0) | people : birth_date (\"August 8, 1986\", \"August 16, 1982\", \"July 14, 1983\"), nationality (\"Russia\", \"Bulgaria\"), height (196.0, 205.0, 182.0), people_id (7, 1, 6), full_name (\"Roman Bragin\", \"Aleksey Ostapenko\", \"Teodor Salparov\"), complete_name (\"Roman Bragin\", \"Aleksey Ostapenko\", \"Teodor Salparov\")",
        "ambiguous_queries": [
            "select t1.full_name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
            "select t1.complete_name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"people\": [\"full_name\"]}, {\"people\": [\"complete_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"people\".\"full_name\"",
        "clear_ambiguity": "{\"names\": {\"people\": [\"full_name\"]}}",
        "gold_query": "select t1.full_name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000"
    },
    {
        "index": 28,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "Show all the grades of the high schoolers.",
        "schema_without_content": "highschooler : id , class_grade , level , name  | friend : friend_id , student_id  | likes : liked_id , student_id",
        "schema_with_content": "highschooler : id (1510, 1101, 1316), class_grade (12, 9, 9), level (12, 9, 9), name (\"Andrew\", \"Tiffany\", \"Gabriel\") | friend : friend_id (1641, 1661, 1468), student_id (1468, 1661, 1911) | likes : liked_id (1304, 1468, 1709), student_id (1247, 1782, 1911)",
        "ambiguous_queries": [
            "select level from highschooler",
            "select class_grade from highschooler"
        ],
        "gold_ambiguity": {
            "match": "{\"grades\": [{\"highschooler\": [\"level\"]}, {\"highschooler\": [\"class_grade\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"grades\" refers to the schema \"highschooler\".\"level\"",
        "clear_ambiguity": "{\"grades\": {\"highschooler\": [\"level\"]}}",
        "gold_query": "select level from highschooler"
    },
    {
        "index": 29,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
        "schema_without_content": "addresses : line_1 , country , line_2 , other_address_details , state_province_county , line_3 , zip_postcode , city , address_id  | courses : course_description , course_id , course_name , other_details  | departments : other_details , department_id , department_description , department_name  | degree_programs : degree_summary_name , degree_summary_description , other_details , degree_program_id , department_id  | sections : section_name , course_id , section_id , other_details , section_description  | semesters : semester_description , semester_id , semester_name , other_details  | students : current_address_id , date_first_registered , last_name , ssn , forename , given_name , permanent_address_id , date_left , student_id , middle_name , other_student_details , email_address , cell_mobile_number  | student_enrolment : student_enrolment_id , degree_program_id , student_id , other_details , semester_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : line_1 (\"16998 Mraz Lodge\", \"0643 Muller Vista\", \"2294 Grant Square Apt. 235\"), country (\"Kyrgyz Republic\", \"Gibraltar\", \"Saudi Arabia\"), line_2 (\"Suite 674\", \"Apt. 370\", \"Apt. 689\"), other_address_details (None), state_province_county (\"Kentucky\", \"Virginia\", \"Kentucky\"), line_3 (None), zip_postcode (\"400\", \"148\", \"446\"), city (\"New Clemensburgh\", \"Port Evanston\", \"Lake Laishafurt\"), address_id (3, 11, 14) | courses : course_description (\"b\", \"n\", \"k\"), course_id (10, 13, 4), course_name (\"pl\", \"fr\", \"db\"), other_details (None) | departments : other_details (None), department_id (15, 6, 3), department_description (\"consequatur\", \"doloribus\", \"nostrum\"), department_name (\"law\", \"engineer\", \"economics\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"et\", \"unde\", \"assumenda\"), other_details (None), degree_program_id (5, 1, 15), department_id (11, 3, 14) | sections : section_name (\"u\", \"e\", \"d\"), course_id (12, 12, 6), section_id (14, 4, 9), other_details (None), section_description (\"facilis\", \"provident\", \"doloremque\") | semesters : semester_description (\"t\", \"m\", \"q\"), semester_id (13, 11, 9), semester_name (\"spring 2015\", \"spring 2014\", \"spring 2015\"), other_details (None) | students : current_address_id (6, 9, 1), date_first_registered (\"1982-06-19 13:15:18\", \"2004-12-24 12:36:46\", \"2014-03-28 05:48:23\"), last_name (\"Schuppe\", \"Mohr\", \"Mohr\"), ssn (\"304246\", \"3\", \"68095\"), forename (\"Warren\", \"Helga\", \"Milton\"), given_name (\"Warren\", \"Helga\", \"Milton\"), permanent_address_id (15, 5, 11), date_left (\"1999-08-24 00:07:10\", \"2016-04-09 12:27:04\", \"2006-08-04 17:26:49\"), student_id (8, 3, 2), middle_name (\"Anna\", \"Aaliyah\", \"Alberta\"), other_student_details (\"assumenda\", \"dolorum\", \"qui\"), email_address (\"johns.unique@example.net\", \"nya.lesch@example.net\", \"lhartmann@example.org\"), cell_mobile_number (\"03174364122\", \"1-879-796-8987x164\", \"1-009-710-5151\") | student_enrolment : student_enrolment_id (14, 1, 9), degree_program_id (11, 2, 4), student_id (4, 14, 5), other_details (None), semester_id (12, 9, 12) | student_enrolment_courses : course_id (6, 10, 12), student_course_id (9860, 76, 681404), student_enrolment_id (14, 8, 4) | transcripts : other_details (None), transcript_id (1, 11, 14), transcript_date (\"1985-04-29 01:20:20\", \"2010-12-13 10:55:15\", \"1998-11-22 12:18:29\") | transcript_contents : student_course_id (7, 45105806, 2), transcript_id (2, 15, 9)",
        "ambiguous_queries": [
            "select t1.forename from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' union select forename from students where cell_mobile_number = '09700166582'",
            "select t1.given_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' union select given_name from students where cell_mobile_number = '09700166582'"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"students\": [\"forename\"]}, {\"students\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"students\".\"forename\"",
        "clear_ambiguity": "{\"first name\": {\"students\": [\"forename\"]}}",
        "gold_query": "select t1.forename from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' union select forename from students where cell_mobile_number = '09700166582'"
    },
    {
        "index": 30,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "schema_without_content": "employee : age , name , city , employee_id  | shop : district , number_products , business_name , location , shop_id , title , manager_name  | hiring : is_full_time , start_from , employee_id , shop_id  | evaluation : year_awarded , bonus , employee_id",
        "schema_with_content": "employee : age (30, 36, 40), name (\"Phil Vickery\", \"Phil Vickery\", \"Louis Deacon\"), city (\"Sale\", \"Leicester\", \"Leicester\"), employee_id (2, 10, 9) | shop : district (\"Tapiolan Urheilupuisto\", \"Arto Tolsa Areena\", \"Finnair Stadium\"), number_products (3500, 3516, 3516), business_name (\"FC Inter\", \"FC Inter\", \"FC KooTeePee\"), location (\"Valkeakoski\", \"Valkeakoski\", \"Turku\"), shop_id (4, 5, 9), title (\"FC Inter\", \"FC Inter\", \"FC KooTeePee\"), manager_name (\"Kai NyyssÃ¶nen\", \"Mika Lehkosuo\", \"Tommi Kautonen\") | hiring : is_full_time (\"T\", \"F\"), start_from (\"2008\", \"2011\", \"2013\"), employee_id (5, 4, 4), shop_id (4, 6, 1) | evaluation : year_awarded (\"2018\", \"2011\", \"2016\"), bonus (3000.0, 3000.0, 3200.0), employee_id (\"4\", \"1\", \"2\")",
        "ambiguous_queries": [
            "select count(*), t2.title from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.title",
            "select count(*), t2.business_name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.business_name"
        ],
        "gold_ambiguity": {
            "match": "{\"shop\": [{\"shop\": [\"title\"]}, {\"shop\": [\"business_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"shop\" refers to the schema \"shop\".\"title\"",
        "clear_ambiguity": "{\"shop\": {\"shop\": [\"title\"]}}",
        "gold_query": "select count(*), t2.title from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.title"
    },
    {
        "index": 31,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "Show the stadium names without any concert.",
        "schema_without_content": "stadium : lowest , average , capacity , appellation , title , location , stadium_id , highest  | singer : song_release_year , song_name , age , country , is_male , name , singer_id  | concert : stadium_id , theme , concert_name , year , concert_id  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "stadium : lowest (400, 315, 331), average (2106, 864, 615), capacity (52500, 3100, 3100), appellation (\"Hampden Park\", \"Balmoor\", \"Hampden Park\"), title (\"Hampden Park\", \"Balmoor\", \"Hampden Park\"), location (\"Alloa Athletic\", \"Ayr United\", \"Raith Rovers\"), stadium_id (3, 4, 9), highest (1763, 1057, 1763) | singer : song_release_year (\"1992\", \"2003\", \"2014\"), song_name (\"You\", \"Dangerous\", \"Hey Oh\"), age (25, 25, 52), country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), name (\"Rose White\", \"Timbaland\", \"Timbaland\"), singer_id (4, 1, 3) | concert : stadium_id (\"10\", \"2\", \"1\"), theme (\"Free choice 2\", \"Free choice 2\", \"Free choice 2\"), concert_name (\"Week 1\", \"Super bootcamp\", \"Home Visits\"), year (\"2014\", \"2015\"), concert_id (5, 4, 6) | singer_in_concert : concert_id (3, 4, 6), singer_id (\"3\", \"5\", \"5\")",
        "ambiguous_queries": [
            "select title from stadium where stadium_id not in (select stadium_id from concert)",
            "select appellation from stadium where stadium_id not in (select stadium_id from concert)"
        ],
        "gold_ambiguity": {
            "match": "{\"stadium names\": [{\"stadium\": [\"title\"]}, {\"stadium\": [\"appellation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"stadium names\" refers to the schema \"stadium\".\"title\"",
        "clear_ambiguity": "{\"stadium names\": {\"stadium\": [\"title\"]}}",
        "gold_query": "select title from stadium where stadium_id not in (select stadium_id from concert)"
    },
    {
        "index": 32,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "schema_without_content": "continents : continent , contid  | countries : countryid , countryname , continent  | car_makers : fullname , maker , id , country  | model_list : model_name , maker , vehicle_name , modelid  | car_names : makeid , model , make  | cars_data : weight , year , cylinders , accelerate , edispl , horsepower , mpg , id",
        "schema_with_content": "continents : continent (\"australia\", \"america\", \"africa\"), contid (5, 2, 2) | countries : countryid (14, 1, 15), countryname (\"uk\", \"korea\", \"russia\"), continent (2, 2, 5) | car_makers : fullname (\"Subaru\", \"Chrysler\", \"Daimler Benz\"), maker (\"ford\", \"honda\", \"kia\"), id (15, 19, 12), country (\"4\", \"2\", \"2\") | model_list : model_name (\"scion\", \"buick\", \"ford\"), maker (18, 14, 15), vehicle_name (\"scion\", \"buick\", \"ford\"), modelid (13, 26, 23) | car_names : makeid (274, 344, 14), model (\"audi\", \"fiat\", \" volkswagen\"), make (\"mercury marquis brougham\", \"ford granada\", \"plymouth reliant\") | cars_data : weight (4464, 2672, 3060), year (1976, 1978, 1976), cylinders (6, 4, 3), accelerate (11.5, 15.2, 14.5), edispl (183.0, 76.0, 89.0), horsepower (\"120\", \"135\", \"79\"), mpg (\"27.4\", \"22.3\", \"17.5\"), id (251, 39, 209)",
        "ambiguous_queries": [
            "select distinct t1.model_name from model_list as t1 join car_names as t2 on t1.model_name = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford Motor Company'",
            "select distinct t1.vehicle_name from model_list as t1 join car_names as t2 on t1.vehicle_name = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford Motor Company'"
        ],
        "gold_ambiguity": {
            "match": "{\"models\": [{\"model_list\": [\"model_name\"]}, {\"model_list\": [\"vehicle_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"models\" refers to the schema \"model_list\".\"model_name\"",
        "clear_ambiguity": "{\"models\": {\"model_list\": [\"model_name\"]}}",
        "gold_query": "select distinct t1.model_name from model_list as t1 join car_names as t2 on t1.model_name = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford Motor Company'"
    },
    {
        "index": 33,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "Find the name of airports which do not have any flight in and out.",
        "schema_without_content": "airlines : abbreviation , airline , country , uid  | airports : aviation_terminal , country , city , aerodrome_name , countryabbrev , airportcode  | flights : destairport , sourceairport , flightno , airline",
        "schema_with_content": "airlines : abbreviation (\"Virgin\", \"Continental\", \"Frontier\"), airline (\"Frontier Airlines\", \"Frontier Airlines\", \"AirTran Airways\"), country (\"USA\"), uid (8, 4, 8) | airports : aviation_terminal (\"Ft Mcclellan Bus Trml \", \"Albuquerque International \", \"Arcata \"), country (\"United States \"), city (\"Astoria \", \"Abingdon \", \"Alice \"), aerodrome_name (\"Ft Mcclellan Bus Trml \", \"Albuquerque International \", \"Arcata \"), countryabbrev (\"US \", \"US\"), airportcode (\"ADM\", \"TDW\", \"ESF\") | flights : destairport (\" CVO\", \" ASX\", \" ADM\"), sourceairport (\" ABR\", \" ALS\", \" ALE\"), flightno (1285, 581, 81), airline (9, 1, 12)",
        "ambiguous_queries": [
            "select aerodrome_name from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
            "select aviation_terminal from airports where airportcode not in (select sourceairport from flights union select destairport from flights)"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"airports\": [\"aerodrome_name\"]}, {\"airports\": [\"aviation_terminal\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"airports\".\"aerodrome_name\"",
        "clear_ambiguity": "{\"name\": {\"airports\": [\"aerodrome_name\"]}}",
        "gold_query": "select aerodrome_name from airports where airportcode not in (select sourceairport from flights union select destairport from flights)"
    },
    {
        "index": 34,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "column",
        "db_file": "column/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Show all template type codes and descriptions.",
        "schema_without_content": "ref_template_types : code_name , template_type_description , type_id  | templates : template_details , date_effective_to , template_type_code , template_id , date_effective_from , version_number  | documents : document_description , other_details , document_id , template_id , document_name  | paragraphs : document_id , paragraph_id , paragraph_text , other_details",
        "schema_with_content": "ref_template_types : code_name (\"PP\", \"CV\", \"PPT\"), template_type_description (\"Book\", \"Presentation\", \"CV\"), type_id (\"PP\", \"CV\", \"PPT\") | templates : template_details (\"\"), date_effective_to (\"1995-09-19 22:27:48\", \"2006-02-06 23:52:04\", \"1974-09-14 06:34:39\"), template_type_code (\"PPT\", \"PPT\", \"PPT\"), template_id (10, 20, 18), date_effective_from (\"1975-05-20 22:51:19\", \"1979-10-20 21:23:20\", \"2002-08-25 13:26:23\"), version_number (5, 0, 2) | documents : document_description (\"b\", \"f\", \"f\"), other_details (None), document_id (3540024, 76, 82), template_id (25, 7, 8), document_name (\"A history of Arts\", \"Do not panic\", \"A history of Arts\") | paragraphs : document_id (2394, 3540024, 385906526), paragraph_id (9, 1104059, 241), paragraph_text (\"Korea\", \"Palestinian Territory\", \"Micronesia\"), other_details (None)",
        "ambiguous_queries": [
            "select type_id, template_type_description from ref_template_types",
            "select code_name, template_type_description from ref_template_types"
        ],
        "gold_ambiguity": {
            "match": "{\"type codes\": [{\"ref_template_types\": [\"type_id\"]}, {\"ref_template_types\": [\"code_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type codes\" refers to the schema \"ref_template_types\".\"code_name\"",
        "clear_ambiguity": "{\"type codes\": {\"ref_template_types\": [\"code_name\"]}}",
        "gold_query": "select code_name, template_type_description from ref_template_types"
    },
    {
        "index": 35,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_id , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : home_phone 563-0260x454\", \"1-346-655-5842x768\", street , city , cell_number , last_name , forename , given_name , email_address , zip_code , state , owner_id  | dogs : size_code , abandoned_yn , breed_code , gender , owner_id , weight , dog_id , age , name , date_arrived , date_of_birth , date_departed , date_adopted  | professionals : professional_id , state , city , home_phone 338-3342x585\", \"346.594.3739\", street , email_address , first_name , role_code , last_name , zip_code , cell_number 908-7311x065\", \"908-7311x065\", \"1-185-137-1945x409\" | treatments : treatment_id , dog_id , treatment_type_code , professional_id , cost_of_treatment , date_of_treatment",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : home_phone (\"318-052-6573\", \"(799)563-0260x454\", \"1-346-655-5842x768\"), street (\"60352 Kayleigh Crossing Suite 700\", \"51934 Treutel Harbor\", \"68118 Daniel Row\"), city (\"Port Zackery\", \"Lake Jennyferfort\", \"Port Reannamouth\"), cell_number (\"1-739-421-2225x38148\", \"739-136-7202\", \"481-483-9083x37986\"), last_name (\"Hamill\", \"Stoltenberg\", \"Price\"), forename (\"Lorenz\", \"Rachelle\", \"Johann\"), given_name (\"Lorenz\", \"Rachelle\", \"Johann\"), email_address (\"zboncak.madonna@example.net\", \"pearlie18@example.com\", \"pearlie18@example.com\"), zip_code (\"93165\", \"35747\", \"02647\"), state (\"NewYork\", \"Arkansas\", \"Mississippi\"), owner_id (9, 12, 15) | dogs : size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), owner_id (1, 2, 12), weight (\"1.72\", \"4.36\", \"1.72\"), dog_id (10, 9, 11), age (\"2\", \"1\", \"6\"), name (\"Narciso\", \"Lyric\", \"Lyric\"), date_arrived (\"2018-01-17 11:44:16\", \"2017-10-16 20:06:21\", \"2017-09-08 20:10:13\"), date_of_birth (\"2008-05-19 15:54:49\", \"2008-05-30 12:51:34\", \"2012-05-31 08:01:36\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 06:46:07\", \"2018-03-25 04:42:14\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-08 15:03:00\", \"2018-03-05 06:05:23\") | professionals : professional_id (7, 13, 15), state (\"Utah\", \"Alabama\", \"NorthCarolina\"), city (\"McLaughlinfort\", \"Kirastad\", \"East Ila\"), home_phone (\"1-138-287-3775\", \"(230)338-3342x585\", \"346.594.3739\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), email_address (\"deanna.schuster@example.com\", \"jerrod.bahringer@example.org\", \"jeichmann@example.com\"), first_name (\"Karley\", \"Taryn\", \"Karley\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Walter\", \"Jacobs\", \"Watsica\"), zip_code (\"52476\", \"06646\", \"33020\"), cell_number (\"(369)908-7311x065\", \"(369)908-7311x065\", \"1-185-137-1945x409\") | treatments : treatment_id (14, 8, 10), dog_id (13, 10, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (10, 14, 7), cost_of_treatment (681, 852, 681), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-13 12:22:58\", \"2018-03-14 19:10:40\")",
        "ambiguous_queries": [
            "select t1.given_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
            "select t1.forename, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"owners\": [\"given_name\"]}, {\"owners\": [\"forename\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"owners\".\"forename\"",
        "clear_ambiguity": "{\"name\": {\"owners\": [\"forename\"]}}",
        "gold_query": "select t1.forename, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id"
    },
    {
        "index": 36,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "What are all the possible breed type and size type combinations?",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , cell_number , zip_code , email_address , home_phone 997-7627\", street , state , first_name , last_name , city  | dogs : pedigree_code , date_adopted , gender , abandoned_yn , dog_id , weight , name , date_arrived , race_code , size_code , date_of_birth , date_departed , owner_id , age  | professionals : email_address , professional_id , first_name , role_code , zip_code , state , street , last_name , home_phone 2898266914\", cell_number 908-7311x065\", \"1-258-285-4707x8020\", \"461-801-2600\", city  | treatments : date_of_treatment , treatment_id , treatment_type_code , professional_id , cost_of_treatment , dog_id",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (8, 1, 4), cell_number (\"341.667.8085\", \"478.978.0729\", \"478.978.0729\"), zip_code (\"92406\", \"25609\", \"45244\"), email_address (\"zboncak.madonna@example.net\", \"kturner@example.net\", \"kturner@example.net\"), home_phone (\"01802479758\", \"1-682-845-0116x63235\", \"(058)997-7627\"), street (\"692 Jaskolski Forges\", \"57382 Yost Ridges\", \"6950 Katherine Forges Apt. 630\"), state (\"NorthDakota\", \"Florida\", \"NewYork\"), first_name (\"Rachelle\", \"Emelie\", \"Gay\"), last_name (\"Schmitt\", \"Fisher\", \"Nicolas\"), city (\"Brakusfurt\", \"Barrettburgh\", \"East Maribelbury\") | dogs : pedigree_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-02-25 23:45:30\", \"2018-03-21 10:41:18\", \"2018-03-05 06:05:23\"), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), dog_id (7, 1, 14), weight (\"9.48\", \"1.72\", \"8.16\"), name (\"Mavis\", \"Jesus\", \"Evangeline\"), date_arrived (\"2018-01-17 11:44:16\", \"2018-01-02 03:15:29\", \"2018-01-17 11:44:16\"), race_code (\"ESK\", \"BUL\", \"HUS\"), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2012-07-11 17:15:10\", \"2013-02-20 14:50:56\", \"2017-09-19 05:39:09\"), date_departed (\"2018-03-25 04:50:22\", \"2018-03-25 14:15:41\", \"2018-03-24 23:48:59\"), owner_id (2, 5, 8), age (\"6\", \"3\", \"3\") | professionals : email_address (\"west.eula@example.net\", \"lucile.shanahan@example.org\", \"jerrod.bahringer@example.org\"), professional_id (1, 14, 8), first_name (\"Karley\", \"Olaf\", \"Domenica\"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"54312\", \"06646\", \"43129\"), state (\"Hawaii\", \"SouthCarolina\", \"NewMexico\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"72532 Hane Course\nLake Berylland, ND 95283\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), last_name (\"Tillman\", \"Jacobs\", \"Pouros\"), home_phone (\"312.216.3352\", \"320-508-6023\", \"+71(6)2898266914\"), cell_number (\"(369)908-7311x065\", \"1-258-285-4707x8020\", \"461-801-2600\"), city (\"Baileymouth\", \"New Laurytown\", \"North Adelberttown\") | treatments : date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-01 04:14:46\", \"2018-03-15 19:10:02\"), treatment_id (10, 1, 11), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (5, 9, 14), cost_of_treatment (349, 139, 656), dog_id (4, 10, 1)",
        "ambiguous_queries": [
            "select distinct race_code, size_code from dogs",
            "select distinct pedigree_code, size_code from dogs"
        ],
        "gold_ambiguity": {
            "match": "{\"breed type\": [{\"dogs\": [\"race_code\"]}, {\"dogs\": [\"pedigree_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"breed type\" refers to the schema \"dogs\".\"race_code\"",
        "clear_ambiguity": "{\"breed type\": {\"dogs\": [\"race_code\"]}}",
        "gold_query": "select distinct race_code, size_code from dogs"
    },
    {
        "index": 37,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the car wmodel with the highest mpg?",
        "schema_without_content": "continents : contid , continent  | countries : countryname , countryid , continent  | car_makers : fullname , maker , country , id  | model_list : model , modelid , maker  | car_names : makeid , vehicle_model , designation , make  | cars_data : year , weight , cylinders , accelerate , horsepower , mpg , id , edispl",
        "schema_with_content": "continents : contid (4, 1, 1), continent (\"europe\", \"asia\", \"america\") | countries : countryname (\"usa\", \"usa\", \"australia\"), countryid (12, 2, 5), continent (1, 5, 2) | car_makers : fullname (\"Opel\", \"Hyundai\", \"General Motors\"), maker (\"amc\", \"bmw\", \"renault\"), country (\"8\", \"1\", \"4\"), id (5, 5, 5) | model_list : model (\"mercury\", \"renault\", \"oldsmobile\"), modelid (28, 23, 34), maker (8, 18, 5) | car_names : makeid (205, 199, 383), vehicle_model (\"mazda\", \"mercedes-benz\", \"capri\"), designation (\"mazda\", \"mercedes-benz\", \"capri\"), make (\"oldsmobile cutlass ls\", \"mercury zephyr\", \"saab 99e\") | cars_data : year (1976, 1982, 1971), weight (2515, 2984, 2905), cylinders (5, 3, 8), accelerate (11.3, 21.0, 20.4), horsepower (\"82\", \"96\", \"61\"), mpg (\"13\", \"19.9\", \"33.8\"), id (36, 114, 5), edispl (86.0, 135.0, 86.0)",
        "ambiguous_queries": [
            "select t1.vehicle_model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1",
            "select t1.designation from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"car wmodel\": [{\"car_names\": [\"vehicle_model\"]}, {\"car_names\": [\"designation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"car wmodel\" refers to the schema \"car_names\".\"vehicle_model\"",
        "clear_ambiguity": "{\"car wmodel\": {\"car_names\": [\"vehicle_model\"]}}",
        "gold_query": "select t1.vehicle_model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1"
    },
    {
        "index": 38,
        "db_id": "battle_death",
        "ambig_type": "column",
        "db_file": "column/battle_death/battle_death.sqlite",
        "question": "What is the ship id and name that caused most total injuries?",
        "schema_without_content": "battle : latin_commander , date , bulgarian_commander , id , result , name  | ship : vessel_name , tonnage , ship_name , location , ship_type , lost_in_battle , id , disposition_of_ship  | death : id , note , injured , caused_by_ship_id , killed",
        "schema_with_content": "battle : latin_commander (\"Boniface of Montferrat\", \"Henry I\", \"Unknown\"), date (\"14 April 1205\", \"June 1205\", \"31 January 1206\"), bulgarian_commander (\"Boril\", \"Unknown\", \"Kaloyan\"), id (4, 6, 1), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), name (\"Battle of Rodosto\", \"Battle of Rusion\", \"Battle of Rodosto\") | ship : vessel_name (\"Bon Accord\", \"Three Brothers\", \"Lettice\"), tonnage (\"t\", \"391\", \"225\"), ship_name (\"Bon Accord\", \"Three Brothers\", \"Lettice\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), lost_in_battle (5, 8, 5), id (6, 2, 2), disposition_of_ship (\"Scuttled\", \"Sank\", \"Scuttled\") | death : id (2, 2, 2), note (\"East Champaran, Bihar\", \"Bokaro, Jharkhand\", \"Kanker, Chhattisgarh\"), injured (0, 9, 5), caused_by_ship_id (4, 4, 1), killed (2, 25, 14)",
        "ambiguous_queries": [
            "select t2.id, t2.ship_name from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id group by t2.id order by count(*) desc limit 1",
            "select t2.id, t2.vessel_name from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id group by t2.id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"ship\": [\"ship_name\"]}, {\"ship\": [\"vessel_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"ship\".\"ship_name\"",
        "clear_ambiguity": "{\"name\": {\"ship\": [\"ship_name\"]}}",
        "gold_query": "select t2.id, t2.ship_name from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id group by t2.id order by count(*) desc limit 1"
    },
    {
        "index": 39,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "How many people are there of each nationality?",
        "schema_without_content": "poker_player : best_finish , money_rank , earnings , poker_player_id , people_id , final_table_made  | people : height , name , people_id , country , citizenship , birth_date",
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), money_rank (166.0, 154.0, 68.0), earnings (189233.0, 476090.0, 189233.0), poker_player_id (2, 3, 5), people_id (5, 5, 7), final_table_made (10.0, 10.0, 26.0) | people : height (187.0, 194.0, 194.0), name (\"Roman Bragin\", \"Sergey Grankin\", \"Aleksey Ostapenko\"), people_id (5, 3, 5), country (\"Russia\", \"Bulgaria\"), citizenship (\"Russia\", \"Bulgaria\"), birth_date (\"July 14, 1983\", \"April 17, 1987\", \"May 26, 1986\")",
        "ambiguous_queries": [
            "select country, count(*) from people group by country",
            "select citizenship, count(*) from people group by citizenship"
        ],
        "gold_ambiguity": {
            "match": "{\"nationality\": [{\"people\": [\"country\"]}, {\"people\": [\"citizenship\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"nationality\" refers to the schema \"people\".\"citizenship\"",
        "clear_ambiguity": "{\"nationality\": {\"people\": [\"citizenship\"]}}",
        "gold_query": "select citizenship, count(*) from people group by citizenship"
    },
    {
        "index": 40,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Give me Brazil's population and life expectancies.",
        "schema_without_content": "city : name \", \"Eastbourne\", id , population , countrycode , district  | sqlite_sequence : seq , name  | country : surfacearea , headofstate , code2 , life_span , name , gnp , localname , gnpold , indepyear , region , life_length , population , code , governmentform , capital , continent  | countrylanguage : language , percentage , countrycode , isofficial",
        "schema_with_content": "city : name (\"Remscheid\", \"Vadodara (Baroda)\", \"Eastbourne\"), id (1381, 2320, 203), population (232811, 122600, 151088), countrycode (\"NAM\", \"CRI\", \"FJI\"), district (\"North Ossetia-Alania\", \"al-Tamim\", \"Chittagong\") | sqlite_sequence : seq (4079), name (\"city\") | country : surfacearea (47000.0, 377829.0, 1138914.0), headofstate (\"Glafkos Klerides\", \"Khamtay Siphandone\", \"Carl XVI Gustaf\"), code2 (\"KH\", \"PE\", \"GP\"), life_span (67.8, 76.5, 68.6), name (\"Virgin Islands, British\", \"Ghana\", \"Ireland\"), gnp (3377.0, 382.0, 5493.0), localname (\"Ukrajina\", \"Al-Bahrayn\", \"Wallis-et-Futuna\"), gnpold (7967.0, 9555.0, 4837.0), indepyear (1941, 885, -660), region (\"Polynesia\", \"Southern and Central Asia\", \"Eastern Europe\"), life_length (67.8, 76.5, 68.6), population (6097000, 11234000, 82164700), code (\"NRU\", \"ALB\", \"IRL\"), governmentform (\"Co-administrated\", \"Part of Denmark\", \"Dependent Territory of the US\"), capital (554, 2462, 185), continent (\"Africa\", \"Africa\", \"South America\") | countrylanguage : language (\"Orija\", \"Irish\", \"Tagalog\"), percentage (66.5, 5.9, 99.2), countrycode (\"BIH\", \"LAO\", \"MMR\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select population, life_length from country where name = 'Brazil'",
            "select population, life_span from country where name = 'Brazil'"
        ],
        "gold_ambiguity": {
            "match": "{\"life expectancies\": [{\"country\": [\"life_length\"]}, {\"country\": [\"life_span\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"life expectancies\" refers to the schema \"country\".\"life_length\"",
        "clear_ambiguity": "{\"life expectancies\": {\"country\": [\"life_length\"]}}",
        "gold_query": "select population, life_length from country where name = 'Brazil'"
    },
    {
        "index": 41,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Which cities do more than one employee under age 30 come from?",
        "schema_without_content": "employee : age , employee_id , home_town , residence_city , name  | shop : name , location , shop_id , district , manager_name , number_products  | hiring : employee_id , is_full_time , start_from , shop_id  | evaluation : employee_id , bonus , year_awarded",
        "schema_with_content": "employee : age (32, 32, 43), employee_id (10, 3, 6), home_town (\"Wasps\", \"Bristol\", \"Leicester\"), residence_city (\"Wasps\", \"Bristol\", \"Leicester\"), name (\"George Chuter\", \"Louis Deacon\", \"Jason Hobson\") | shop : name (\"FC Honka\", \"FC Honka\", \"IFK Mariehamn\"), location (\"Lahti\", \"Kotka\", \"Kuopio\"), shop_id (1, 2, 2), district (\"Magnum Areena\", \"Tehtaan kenttÃ¤\", \"Veritas Stadion\"), manager_name (\"Mika Lehkosuo\", \"Tommi Kautonen\", \"Pekka Lyyski\"), number_products (5000, 5000, 10000) | hiring : employee_id (5, 1, 1), is_full_time (\"T\", \"F\"), start_from (\"2011\", \"2012\", \"2012\"), shop_id (5, 4, 4) | evaluation : employee_id (\"7\", \"2\", \"4\"), bonus (3000.0, 3000.0, 2900.0), year_awarded (\"2011\", \"2018\", \"2015\")",
        "ambiguous_queries": [
            "select residence_city from employee where age < 30 group by residence_city having count(*) > 1",
            "select home_town from employee where age < 30 group by home_town having count(*) > 1"
        ],
        "gold_ambiguity": {
            "match": "{\"cities\": [{\"employee\": [\"residence_city\"]}, {\"employee\": [\"home_town\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cities\" refers to the schema \"employee\".\"residence_city\"",
        "clear_ambiguity": "{\"cities\": {\"employee\": [\"residence_city\"]}}",
        "gold_query": "select residence_city from employee where age < 30 group by residence_city having count(*) > 1"
    },
    {
        "index": 42,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the names of nations where both English and French are official languages?",
        "schema_without_content": "city : id , name , district , population , countrycode  | sqlite_sequence : seq , name  | country : continent , capital , surfacearea , governmentform \", \"Monarchy\", code2 , nation , code , gnp , indepyear , region , localname , title , population , headofstate , lifeexpectancy , gnpold  | countrylanguage : percentage , isofficial , language , countrycode",
        "schema_with_content": "city : id (1659, 3321, 520), name (\"Soligorsk\", \"Guntur\", \"Charlotte Amalie\"), district (\"Abu Dhabi\", \"Wasit\", \"Sardinia\"), population (106914, 461126, 138100), countrycode (\"GAB\", \"PAK\", \"BEN\") | sqlite_sequence : seq (4079), name (\"city\") | country : continent (\"Europe\", \"Antarctica\", \"Africa\"), capital (927, 3248, 3334), surfacearea (1.5, 22696.0, 108889.0), governmentform (\"Autonomous Area\", \"Monarchy (Sultanate)\", \"Monarchy\"), code2 (\"CR\", \"VU\", \"LS\"), nation (\"Bangladesh\", \"Christmas Island\", \"Iran\"), code (\"VEN\", \"SMR\", \"BHS\"), gnp (1626.0, 818.0, 61289.0), indepyear (None, 1984, 1804), region (\"South America\", \"Polynesia\", \"Baltic Countries\"), localname (\"Guinea Ecuatorial\", \"Micronesia\", \"Lubnan\"), title (\"Bangladesh\", \"Christmas Island\", \"Iran\"), population (3775100, 12878000, 22720000), headofstate (\"Arthur N. R. Robinson\", \"Gyanendra Bir Bikram\", \"Arthur N. R. Robinson\"), lifeexpectancy (73.1, 48.8, 70.9), gnpold (75617.0, 243948.0, 46966.0) | countrylanguage : percentage (53.1, 8.0, 31.7), isofficial (\"T\", \"F\"), language (\"Kotokoli\", \"Buryat\", \"Sardinian\"), countrycode (\"ESH\", \"VCT\", \"IDN\")",
        "ambiguous_queries": [
            "select t1.nation from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' and t2.isofficial = 'T' intersect select t1.nation from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French' and t2.isofficial = 'T'",
            "select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' and t2.isofficial = 'T' intersect select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French' and t2.isofficial = 'T'"
        ],
        "gold_ambiguity": {
            "match": "{\"names of nations\": [{\"country\": [\"nation\"]}, {\"country\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names of nations\" refers to the schema \"country\".\"title\"",
        "clear_ambiguity": "{\"names of nations\": {\"country\": [\"title\"]}}",
        "gold_query": "select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' and t2.isofficial = 'T' intersect select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French' and t2.isofficial = 'T'"
    },
    {
        "index": 43,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "schema_without_content": "conductor : year_of_work , conductor_id , nationality , age , full_name , title  | orchestra : orchestra , orchestra_id , major_record_format , year_of_founded , conductor_id , record_company  | performance : date , share , orchestra_id , type , official_ratings_ , performance_id , weekly_rank  | show : if_first_show , result , attendance , performance_id , show_id",
        "schema_with_content": "conductor : year_of_work (21, 12, 10), conductor_id (8, 2, 4), nationality (\"USA\", \"UK\", \"France\"), age (63, 49, 41), full_name (\"Antal Brown\", \"Charles Dutoit\", \"Charles Dutoit\"), title (\"Antal Brown\", \"Charles Dutoit\", \"Charles Dutoit\") | orchestra : orchestra (\"Seattle Symphony Orchestra\", \"Royal Concertgebouw Orchestra\", \"Columbia Symphony Orchestra\"), orchestra_id (6, 6, 5), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), year_of_founded (2002.0, 2006.0, 2002.0), conductor_id (5, 11, 6), record_company (\"Delos Records\", \"Delos Records\", \"RCA\") | performance : date (\"10 June\", \"16 June\", \"10 June\"), share (\"34.0%\", \"28.0%\", \"28.0%\"), orchestra_id (1, 7, 3), type (\"Series average\", \"Live final results\", \"Auditions 4\"), official_ratings_(millions) (9.28, 6.73, 6.73), performance_id (9, 10, 4), weekly_rank (\"TBC\", \"9\", \"TBC\") | show : if_first_show (\"Fir Park\", \"Hampden Park\", \"Fir Park\"), result (\"T\", \"F\"), attendance (555.0, 2431.0, 2431.0), performance_id (2, 1, 4), show_id (1, 4, 5)",
        "ambiguous_queries": [
            "select full_name from conductor order by year_of_work desc",
            "select title from conductor order by year_of_work desc"
        ],
        "gold_ambiguity": {
            "match": "{\"names of conductors\": [{\"conductor\": [\"full_name\"]}, {\"conductor\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names of conductors\" refers to the schema \"conductor\".\"title\"",
        "clear_ambiguity": "{\"names of conductors\": {\"conductor\": [\"title\"]}}",
        "gold_query": "select title from conductor order by year_of_work desc"
    },
    {
        "index": 44,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "schema_without_content": "stadium : stadium_id , average , capacity , title , appellation , highest , location , lowest  | singer : name , song_release_year , song_name , country , singer_id , age , is_male  | concert : concert_name , concert_id , stadium_id , year , theme  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "stadium : stadium_id (2, 9, 3), average (642, 615, 864), capacity (3100, 4000, 2000), title (\"Hampden Park\", \"Hampden Park\", \"Bayview Stadium\"), appellation (\"Hampden Park\", \"Hampden Park\", \"Bayview Stadium\"), highest (921, 4812, 921), location (\"Peterhead\", \"Alloa Athletic\", \"Alloa Athletic\"), lowest (533, 331, 533) | singer : name (\"Joe Sharp\", \"Joe Sharp\", \"Justin Brown\"), song_release_year (\"1992\", \"2013\", \"2003\"), song_name (\"Hey Oh\", \"Hey Oh\", \"You\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 5, 6), age (43, 32, 32), is_male (\"F\", \"T\") | concert : concert_name (\"Week 2\", \"Week 2\", \"Home Visits\"), concert_id (3, 4, 6), stadium_id (\"1\", \"1\", \"1\"), year (\"2014\", \"2015\"), theme (\"Bleeding Love\", \"Bleeding Love\", \"Bleeding Love\") | singer_in_concert : concert_id (5, 5, 2), singer_id (\"4\", \"2\", \"4\")",
        "ambiguous_queries": [
            "select t2.title, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
            "select t2.appellation, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id"
        ],
        "gold_ambiguity": {
            "match": "{\"stadium name\": [{\"stadium\": [\"title\"]}, {\"stadium\": [\"appellation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"stadium name\" refers to the schema \"stadium\".\"appellation\"",
        "clear_ambiguity": "{\"stadium name\": {\"stadium\": [\"appellation\"]}}",
        "gold_query": "select t2.appellation, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id"
    },
    {
        "index": 45,
        "db_id": "museum_visit",
        "ambig_type": "column",
        "db_file": "column/museum_visit/museum_visit.sqlite",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "schema_without_content": "museum : museum_id , open_year , num_of_staff , name  | visitor : identifier , name , age , level_of_membership , unique_id  | visit : num_of_ticket , visitor_id , museum_id , total_spent",
        "schema_with_content": "museum : museum_id (1, 3, 3), open_year (\"2009\", \"2009\", \"2011\"), num_of_staff (18, 18, 16), name (\"RiverPark Museum\", \"Jefferson Development Museum\", \"Capital Plaza Museum\") | visitor : identifier (2, 2, 4), name (\"Fernando Gago\", \"Gonzalo HiguaÃ­n \", \"Gonzalo HiguaÃ­n \"), age (36, 27, 28), level_of_membership (5, 5, 6), unique_id (2, 2, 4) | visit : num_of_ticket (2, 2, 24), visitor_id (\"5\", \"3\", \"6\"), museum_id (1, 8, 1), total_spent (19.98, 320.44, 320.14)",
        "ambiguous_queries": [
            "select t1.unique_id, t1.name, t1.age from visitor as t1 join visit as t2 on t1.unique_id = t2.visitor_id group by t1.unique_id having count(*) > 1",
            "select t1.identifier, t1.name, t1.age from visitor as t1 join visit as t2 on t1.identifier = t2.visitor_id group by t1.identifier having count(*) > 1"
        ],
        "gold_ambiguity": {
            "match": "{\"id\": [{\"visitor\": [\"unique_id\"]}, {\"visitor\": [\"identifier\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"id\" refers to the schema \"visitor\".\"identifier\"",
        "clear_ambiguity": "{\"id\": {\"visitor\": [\"identifier\"]}}",
        "gold_query": "select t1.identifier, t1.name, t1.age from visitor as t1 join visit as t2 on t1.identifier = t2.visitor_id group by t1.identifier having count(*) > 1"
    },
    {
        "index": 46,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "List the arrival date and the departure date for all the dogs.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_id , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : street , state , email_address , city , zip_code , cell_number 399-3116\", \"1-626-264-7659x1697\", \"739-136-7202\", owner_id , first_name , home_phone , last_name  | dogs : departure_date , breed_code , name , exit_date , dog_id , size_code , owner_id , date_adopted , abandoned_yn , date_arrived , date_of_birth , gender , weight , age  | professionals : last_name , first_name , cell_number 908-7311x065\", street , home_phone , professional_id , role_code , zip_code , email_address , state , city  | treatments : date_of_treatment , dog_id , professional_id , cost_of_treatment , treatment_type_code , treatment_id",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : street (\"59509 Mellie Mountain\", \"2417 Keara Stravenue Apt. 146\", \"692 Jaskolski Forges\"), state (\"Pennsylvania\", \"Florida\", \"Virginia\"), email_address (\"ybergstrom@example.com\", \"ykris@example.com\", \"hudson.favian@example.com\"), city (\"Lake Valentin\", \"Lake Valentin\", \"Lake Carleyborough\"), zip_code (\"78297\", \"35747\", \"35747\"), cell_number (\"(257)399-3116\", \"1-626-264-7659x1697\", \"739-136-7202\"), owner_id (2, 6, 14), first_name (\"Cindy\", \"Emelie\", \"Jaclyn\"), home_phone (\"066.264.7885\", \"085.557.0379x84348\", \"1-332-849-1908\"), last_name (\"Price\", \"Stoltenberg\", \"Price\") | dogs : departure_date (\"2018-03-25 06:29:10\", \"2018-03-25 02:11:32\", \"2018-03-25 06:46:07\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"George\", \"Hipolito\", \"Lyric\"), exit_date (\"2018-03-25 06:29:10\", \"2018-03-25 02:11:32\", \"2018-03-25 06:46:07\"), dog_id (13, 3, 11), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (11, 3, 5), date_adopted (\"2018-03-08 15:03:00\", \"2018-03-18 07:47:40\", \"2018-02-27 00:27:57\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-10-16 20:06:21\", \"2017-12-29 23:24:13\", \"2017-06-25 10:14:05\"), date_of_birth (\"2012-10-14 14:44:37\", \"2009-04-12 06:02:48\", \"2009-04-12 06:02:48\"), gender (\"1\", \"0\"), weight (\"7.57\", \"3.52\", \"7.57\"), age (\"9\", \"3\", \"9\") | professionals : last_name (\"Considine\", \"Kshlerin\", \"Kshlerin\"), first_name (\"Lesly\", \"Vernice\", \"Domenica\"), cell_number (\"880-659-7577x736\", \"1-181-670-9466\", \"(369)908-7311x065\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), home_phone (\"346.594.3739\", \"346.594.3739\", \"246-951-0080x76716\"), professional_id (6, 14, 9), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"07412\", \"52476\", \"98844\"), email_address (\"jerrod.bahringer@example.org\", \"lambert62@example.org\", \"jerrod.bahringer@example.org\"), state (\"Hawaii\", \"Alabama\", \"Indiana\"), city (\"New Maryjane\", \"West Heidi\", \"South Rockyport\") | treatments : date_of_treatment (\"2018-02-26 09:08:53\", \"2018-02-28 17:09:43\", \"2018-03-15 19:10:02\"), dog_id (12, 2, 2), professional_id (5, 5, 9), cost_of_treatment (429, 668, 852), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (8, 8, 12)",
        "ambiguous_queries": [
            "select date_arrived, exit_date from dogs",
            "select date_arrived, departure_date from dogs"
        ],
        "gold_ambiguity": {
            "match": "{\"departure date\": [{\"dogs\": [\"exit_date\"]}, {\"dogs\": [\"departure_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"departure date\" refers to the schema \"dogs\".\"departure_date\"",
        "clear_ambiguity": "{\"departure date\": {\"dogs\": [\"departure_date\"]}}",
        "gold_query": "select date_arrived, departure_date from dogs"
    },
    {
        "index": 47,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : country , fullname , maker , id  | model_list : model , modelid , maker  | car_names : manufacturer , brand , model , makeid  | cars_data : edispl , year , cylinders , weight , id , horsepower , mpg , accelerate",
        "schema_with_content": "continents : contid (2, 3, 2), continent (\"africa\", \"asia\", \"europe\") | countries : countryid (4, 2, 4), continent (5, 2, 5), countryname (\"sweden\", \"egypt\", \"uk\") | car_makers : country (\"7\", \"2\", \"4\"), fullname (\"Hyundai\", \"Honda\", \"Daimler Benz\"), maker (\"hyundai\", \"ford\", \"gm\"), id (23, 7, 21) | model_list : model (\"cadillac\", \"honda\", \"mazda\"), modelid (16, 15, 8), maker (21, 16, 2) | car_names : manufacturer (\"amc ambassador sst\", \"ford thunderbird\", \"mercury grand marquis\"), brand (\"amc ambassador sst\", \"ford thunderbird\", \"mercury grand marquis\"), model (\"bmw\", \"subaru\", \"buick\"), makeid (166, 176, 186) | cars_data : edispl (83.0, 68.0, 318.0), year (1973, 1975, 1976), cylinders (8, 6, 3), weight (3336, 4312, 2905), id (386, 46, 72), horsepower (\"115\", \"62\", \"60\"), mpg (\"22.3\", \"38\", \"32.7\"), accelerate (21.8, 16.2, 18.0)",
        "ambiguous_queries": [
            "select t2.manufacturer, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)",
            "select t2.brand, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)"
        ],
        "gold_ambiguity": {
            "match": "{\"make\": [{\"car_names\": [\"manufacturer\"]}, {\"car_names\": [\"brand\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"make\" refers to the schema \"car_names\".\"manufacturer\"",
        "clear_ambiguity": "{\"make\": {\"car_names\": [\"manufacturer\"]}}",
        "gold_query": "select t2.manufacturer, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)"
    },
    {
        "index": 48,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "schema_without_content": "continents : contid , continent  | countries : countryname , continent , countryid  | car_makers : maker , country , id , fullname  | model_list : model , modelid , maker  | car_names : make \", \"datsun 200sx\", \"subaru\", model , makeid  | cars_data : mpg , cylinders , edispl , torque , power , weight , id , accelerate , year",
        "schema_with_content": "continents : contid (1, 3, 5), continent (\"europe\", \"africa\", \"africa\") | countries : countryname (\"brazil\", \"usa\", \"germany\"), continent (3, 2, 4), countryid (9, 3, 6) | car_makers : maker (\"honda\", \"citroen\", \"citroen\"), country (\"4\", \"8\", \"2\"), id (1, 1, 17), fullname (\"Citroen\", \"Triumph\", \"Toyota\") | model_list : model (\"bmw\", \"chrysler\", \"fiat\"), modelid (8, 8, 5), maker (8, 9, 17) | car_names : make (\"amc rebel sst (sw)\", \"datsun 200sx\", \"subaru\"), model (\"mercedes-benz\", \"buick\", \"mercury\"), makeid (368, 385, 52) | cars_data : mpg (\"32.4\", \"20.5\", \"9\"), cylinders (5, 6, 3), edispl (97.0, 122.0, 181.0), torque (\"122\", \"122\", \"133\"), power (\"122\", \"122\", \"133\"), weight (3169, 1955, 2391), id (113, 119, 33), accelerate (21.7, 11.1, 17.0), year (1978, 1981, 1978)",
        "ambiguous_queries": [
            "select t1.power from cars_data as t1 order by t1.accelerate desc limit 1",
            "select t1.torque from cars_data as t1 order by t1.accelerate desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"horsepower\": [{\"cars_data\": [\"power\"]}, {\"cars_data\": [\"torque\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"horsepower\" refers to the schema \"cars_data\".\"torque\"",
        "clear_ambiguity": "{\"horsepower\": {\"cars_data\": [\"torque\"]}}",
        "gold_query": "select t1.torque from cars_data as t1 order by t1.accelerate desc limit 1"
    },
    {
        "index": 49,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : cell_number 271-6744x4507\", \"559.874.3011x989\", \"121.381.3316x6535\", city , email_address , street , last_name , zip_code , home_phone , forename , owner_id , state , given_name  | dogs : abandoned_yn , date_arrived , gender , date_adopted , breed_code , weight , owner_id , size_code , date_of_birth , name , date_departed , age , dog_id  | professionals : cell_number 939-2435x80863\", street , home_phone 0259033559\", \"+020259033559\", \"1-138-287-3775\", zip_code , role_code , last_name , first_name , email_address , city , professional_id , state  | treatments : treatment_type_code , date_of_treatment , cost_of_treatment , dog_id , professional_id , treatment_id",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : cell_number (\"(783)271-6744x4507\", \"559.874.3011x989\", \"121.381.3316x6535\"), city (\"Brakusfurt\", \"East Hillardberg\", \"Lake Valentin\"), email_address (\"christy49@example.org\", \"angeline99@example.com\", \"ykris@example.com\"), street (\"15828 Spencer Extensions\", \"89011 Kertzmann Spring Suite 642\", \"57382 Yost Ridges\"), last_name (\"Rippin\", \"Fisher\", \"Nicolas\"), zip_code (\"86010\", \"11990\", \"93165\"), home_phone (\"893-862-5295x61709\", \"1-682-845-0116x63235\", \"01802479758\"), forename (\"Cindy\", \"Jaclyn\", \"Tre\"), owner_id (10, 3, 3), state (\"Washington\", \"Indiana\", \"Virginia\"), given_name (\"Cindy\", \"Jaclyn\", \"Tre\") | dogs : abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-12-29 23:24:13\", \"2017-06-18 19:45:38\"), gender (\"1\", \"0\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-02-27 11:54:35\", \"2018-03-10 15:06:43\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), weight (\"9.48\", \"1.72\", \"8.04\"), owner_id (2, 1, 14), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2012-01-27 05:11:53\", \"2012-10-14 14:44:37\", \"2008-05-19 15:54:49\"), name (\"Holden\", \"Troy\", \"Betty\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-24 19:12:22\", \"2018-03-24 19:36:59\"), age (\"2\", \"4\", \"8\"), dog_id (3, 14, 7) | professionals : cell_number (\"1-185-137-1945x409\", \"962-983-8109x3509\", \"(275)939-2435x80863\"), street (\"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), home_phone (\"+02(1)0259033559\", \"+02(1)0259033559\", \"1-138-287-3775\"), zip_code (\"07412\", \"41215\", \"98844\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Ullrich\", \"Considine\", \"Hyatt\"), first_name (\"Lesly\", \"Vernice\", \"Olaf\"), email_address (\"lucile.shanahan@example.org\", \"cole.margarita@example.org\", \"schneider.kathryne@example.org\"), city (\"New Maryjane\", \"Baileymouth\", \"West Heidi\"), professional_id (13, 15, 6), state (\"NorthCarolina\", \"Mississippi\", \"Indiana\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\", \"2018-03-15 20:25:34\"), cost_of_treatment (852, 407, 852), dog_id (7, 7, 4), professional_id (9, 10, 9), treatment_id (9, 15, 13)",
        "ambiguous_queries": [
            "select t1.given_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
            "select t1.forename, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'"
        ],
        "gold_ambiguity": {
            "match": "{\"first names\": [{\"owners\": [\"given_name\"]}, {\"owners\": [\"forename\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first names\" refers to the schema \"owners\".\"forename\"",
        "clear_ambiguity": "{\"first names\": {\"owners\": [\"forename\"]}}",
        "gold_query": "select t1.forename, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'"
    },
    {
        "index": 50,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "schema_without_content": "continents : contid , continent  | countries : countryname , countryid , continent  | car_makers : country , maker , id , fullname  | model_list : modelid , maker , model  | car_names : make , model , makeid  | cars_data : accelerate , id , horsepower , year , edispl , mpg , weight , engine_cylinders , pistons",
        "schema_with_content": "continents : contid (1, 4, 2), continent (\"europe\", \"australia\", \"asia\") | countries : countryname (\"france\", \"russia\", \"france\"), countryid (4, 5, 15), continent (4, 5, 3) | car_makers : country (\"1\", \"7\", \"3\"), maker (\"opel\", \"hyundai\", \"renault\"), id (6, 11, 4), fullname (\"Peugeaut\", \"Renault\", \"Ford Motor Company\") | model_list : modelid (25, 19, 32), maker (17, 10, 16), model (\"datsun\", \"hyundai\", \"mazda\") | car_names : make (\"toyota celica gt liftback\", \"cadillac seville\", \"plymouth fury gran sedan\"), model (\"mercedes\", \"chrysler\", \"citroen\"), makeid (267, 195, 212) | cars_data : accelerate (21.9, 10.5, 17.3), id (83, 122, 3), horsepower (\"83\", \"75\", \"107\"), year (1971, 1976, 1974), edispl (134.0, 181.0, 198.0), mpg (\"34.4\", \"44.6\", \"29\"), weight (2430, 2405, 3210), engine_cylinders (3, 6, 8), pistons (3, 6, 8)",
        "ambiguous_queries": [
            "select t1.engine_cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1",
            "select t1.pistons from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"cylinders\": [{\"cars_data\": [\"engine_cylinders\"]}, {\"cars_data\": [\"pistons\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cylinders\" refers to the schema \"cars_data\".\"pistons\"",
        "clear_ambiguity": "{\"cylinders\": {\"cars_data\": [\"pistons\"]}}",
        "gold_query": "select t1.pistons from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1"
    },
    {
        "index": 51,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , home_phone 997-7627\", \"997-7627\", \"130-796-4589x05454\", street , city , last_name , first_name , email_address , cell_number 768-5439x484\", \"739-136-7202\", state , zip_code  | dogs : date_of_birth , date_arrived , owner_id , breed_code , age , size_code , date_departed , gender , dog_id , date_adopted , weight , abandoned_yn , name  | professionals : home_phone 304-4499x59146\", \"971.048.3763x9404\", \"+020259033559\", last_name , role_code , street , cell_number 908-7311x065\", \"461-801-2600\", professional_id , zip_code , email_address , city , territory , province , first_name  | treatments : professional_id , date_of_treatment , cost_of_treatment , treatment_type_code , treatment_id , dog_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (3, 5, 8), home_phone (\"(058)997-7627\", \"(058)997-7627\", \"130-796-4589x05454\"), street (\"89011 Kertzmann Spring Suite 642\", \"89011 Kertzmann Spring Suite 642\", \"0647 Hintz Village Apt. 024\"), city (\"South Afton\", \"South Daisyfurt\", \"Lake Valentin\"), last_name (\"Hauck\", \"Mertz\", \"Prohaska\"), first_name (\"Heather\", \"Cindy\", \"Rachelle\"), email_address (\"angeline99@example.com\", \"wpfeffer@example.net\", \"hudson.favian@example.com\"), cell_number (\"559.874.3011x989\", \"(722)768-5439x484\", \"739-136-7202\"), state (\"Virginia\", \"Vermont\", \"NewYork\"), zip_code (\"92406\", \"35747\", \"22731\") | dogs : date_of_birth (\"2012-01-27 05:11:53\", \"2012-05-31 08:01:36\", \"2008-10-09 22:38:53\"), date_arrived (\"2017-10-25 00:55:34\", \"2018-01-17 11:44:16\", \"2017-06-25 10:14:05\"), owner_id (3, 5, 10), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"2\", \"3\", \"9\"), size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 02:11:32\", \"2018-03-25 05:07:47\"), gender (\"1\", \"0\"), dog_id (6, 13, 4), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-10 15:06:43\", \"2018-03-10 15:06:43\"), weight (\"8.95\", \"7.57\", \"8.04\"), abandoned_yn (\"1\", \"0\"), name (\"Mavis\", \"Mavis\", \"Houston\") | professionals : home_phone (\"(920)304-4499x59146\", \"971.048.3763x9404\", \"+02(1)0259033559\"), last_name (\"Frami\", \"Hyatt\", \"Frami\"), role_code (\"Employee\", \"Veterenarian\"), street (\"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), cell_number (\"1-185-137-1945x409\", \"(369)908-7311x065\", \"461-801-2600\"), professional_id (5, 7, 14), zip_code (\"67980\", \"80775\", \"77129\"), email_address (\"mekhi.little@example.org\", \"goyette.roosevelt@example.net\", \"mekhi.little@example.org\"), city (\"Borisside\", \"New Maryjane\", \"West Heidi\"), territory (\"California\", \"Mississippi\", \"Wyoming\"), province (\"California\", \"Mississippi\", \"Wyoming\"), first_name (\"Velva\", \"Jayson\", \"Brady\") | treatments : professional_id (14, 9, 5), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-16 10:27:36\", \"2018-03-10 11:45:58\"), cost_of_treatment (429, 681, 945), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (1, 11, 5), dog_id (4, 2, 14)",
        "ambiguous_queries": [
            "select role_code, street, city, province from professionals where city like '%West%'",
            "select role_code, street, city, territory from professionals where city like '%West%'"
        ],
        "gold_ambiguity": {
            "match": "{\"state\": [{\"professionals\": [\"province\"]}, {\"professionals\": [\"territory\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"state\" refers to the schema \"professionals\".\"territory\"",
        "clear_ambiguity": "{\"state\": {\"professionals\": [\"territory\"]}}",
        "gold_query": "select role_code, street, city, territory from professionals where city like '%West%'"
    },
    {
        "index": 52,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "How is the math course described?",
        "schema_without_content": "addresses : address_id , zip_postcode , country , state_province_county , city , other_address_details , line_2 , line_3 , line_1  | courses : course_id , course_name , class_desc , subject_description , other_details  | departments : department_name , department_id , department_description , other_details  | degree_programs : degree_summary_name , other_details , degree_program_id , department_id , degree_summary_description  | sections : section_name , section_id , course_id , section_description , other_details  | semesters : semester_description , other_details , semester_id , semester_name  | students : email_address , middle_name , other_student_details , permanent_address_id , current_address_id , last_name , first_name , student_id , ssn , date_left , cell_mobile_number , date_first_registered  | student_enrolment : semester_id , student_id , degree_program_id , other_details , student_enrolment_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : transcript_id , student_course_id",
        "schema_with_content": "addresses : address_id (10, 10, 5), zip_postcode (\"902\", \"895\", \"541\"), country (\"Norfolk Island\", \"Kyrgyz Republic\", \"Samoa\"), state_province_county (\"SouthDakota\", \"Wyoming\", \"WestVirginia\"), city (\"Rutherfordtown\", \"Rutherfordtown\", \"Michelleburgh\"), other_address_details (None), line_2 (\"Apt. 583\", \"Apt. 370\", \"Suite 703\"), line_3 (None), line_1 (\"492 Wilkinson Route\", \"2294 Grant Square Apt. 235\", \"0144 Lamar Plaza Apt. 346\") | courses : course_id (12, 5, 9), course_name (\"dl\", \"ai\", \"rs\"), class_desc (\"b\", \"q\", \"q\"), subject_description (\"b\", \"q\", \"q\"), other_details (None) | departments : department_name (\"management\", \"engineer\", \"dance\"), department_id (3, 5, 11), department_description (\"dolorem\", \"nisi\", \"natus\"), other_details (None) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_program_id (11, 11, 1), department_id (4, 8, 15), degree_summary_description (\"quam\", \"officiis\", \"architecto\") | sections : section_name (\"o\", \"a\", \"e\"), section_id (6, 10, 3), course_id (12, 14, 9), section_description (\"nesciunt\", \"non\", \"non\"), other_details (None) | semesters : semester_description (\"c\", \"f\", \"x\"), other_details (None), semester_id (12, 3, 5), semester_name (\"fall 2018\", \"spring 2014\", \"spring 2013\") | students : email_address (\"jhuel@example.com\", \"nbruen@example.org\", \"beth42@example.org\"), middle_name (\"Mona\", \"Anna\", \"Brooklyn\"), other_student_details (\"atque\", \"rerum\", \"omnis\"), permanent_address_id (5, 8, 8), current_address_id (2, 2, 15), last_name (\"Balistreri\", \"Kemmer\", \"Christiansen\"), first_name (\"Deon\", \"Milton\", \"Reva\"), student_id (8, 4, 5), ssn (\"141072406\", \"\", \"6274274\"), date_left (\"1971-05-17 19:28:49\", \"2007-11-28 12:50:21\", \"2007-11-28 12:50:21\"), cell_mobile_number (\"436.613.7683\", \"1-009-710-5151\", \"436.613.7683\"), date_first_registered (\"1982-02-14 08:46:35\", \"1971-02-05 07:28:23\", \"2017-01-04 08:10:25\") | student_enrolment : semester_id (4, 13, 5), student_id (9, 12, 5), degree_program_id (5, 2, 12), other_details (None), student_enrolment_id (1, 15, 8) | student_enrolment_courses : course_id (10, 13, 14), student_course_id (76, 438800, 681404), student_enrolment_id (6, 8, 14) | transcripts : transcript_date (\"2013-06-30 13:01:40\", \"1988-04-30 01:19:47\", \"1984-01-18 23:07:07\"), transcript_id (6, 5, 1), other_details (None) | transcript_contents : transcript_id (2, 2, 13), student_course_id (45105806, 96, 2)",
        "ambiguous_queries": [
            "select class_desc from courses where course_name = 'math'",
            "select subject_description from courses where course_name = 'math'"
        ],
        "gold_ambiguity": {
            "match": "{\"described\": [{\"courses\": [\"class_desc\"]}, {\"courses\": [\"subject_description\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"described\" refers to the schema \"courses\".\"class_desc\"",
        "clear_ambiguity": "{\"described\": {\"courses\": [\"class_desc\"]}}",
        "gold_query": "select class_desc from courses where course_name = 'math'"
    },
    {
        "index": 53,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "schema_without_content": "addresses : country , address_id , line_1 , line_3 , city , other_address_details , line_2 , zip_postcode , state_province_county  | courses : course_id , other_details , course_description , course_name  | departments : department_id , department_name , department_description , other_details  | degree_programs : degree_summary_description , department_id , other_details , degree_program_id , degree_summary_name  | sections : section_name , section_id , other_details , course_id , section_description  | semesters : other_details , semester_id , semester_name , semester_description  | students : date_first_registered , first_name , last_name , student_id , current_address_id , other_student_details , date_left , email_address , middle_name , cell_mobile_number , ssn , permanent_address_id  | student_enrolment : student_enrolment_id , semester_id , other_details , student_id , degree_program_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : other_details , transcript_id , document_date , record_date  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : country (\"New Caledonia\", \"Croatia\", \"Gibraltar\"), address_id (11, 1, 12), line_1 (\"858 Peggie Bypass Suite 212\", \"74046 Metz Walk Apt. 113\", \"858 Peggie Bypass Suite 212\"), line_3 (None), city (\"Mariliehaven\", \"Lake Laishafurt\", \"South Palma\"), other_address_details (None), line_2 (\"Suite 865\", \"Suite 383\", \"Apt. 468\"), zip_postcode (\"777\", \"148\", \"943\"), state_province_county (\"Idaho\", \"Florida\", \"Delaware\") | courses : course_id (4, 13, 13), other_details (None), course_description (\"k\", \"p\", \"d\"), course_name (\"nlp\", \"oop\", \"ds\") | departments : department_id (2, 9, 3), department_name (\"biology\", \"dance\", \"computer science\"), department_description (\"aliquam\", \"aliquam\", \"dolorem\"), other_details (None) | degree_programs : degree_summary_description (\"quam\", \"officiis\", \"voluptas\"), department_id (3, 2, 8), other_details (None), degree_program_id (7, 13, 8), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_name (\"a\", \"f\", \"f\"), section_id (7, 9, 1), other_details (None), course_id (7, 2, 9), section_description (\"facilis\", \"quis\", \"voluptatem\") | semesters : other_details (None), semester_id (7, 13, 14), semester_name (\"spring 2017\", \"spring 2016\", \"spring 2016\"), semester_description (\"l\", \"f\", \"l\") | students : date_first_registered (\"1989-05-24 23:31:29\", \"2005-12-15 08:42:10\", \"2018-03-13 09:56:22\"), first_name (\"Deon\", \"Reva\", \"Warren\"), last_name (\"Schuppe\", \"Balistreri\", \"Osinski\"), student_id (3, 11, 8), current_address_id (1, 14, 12), other_student_details (\"assumenda\", \"assumenda\", \"voluptatem\"), date_left (\"2007-03-31 09:53:19\", \"1971-05-17 19:28:49\", \"2007-03-31 09:53:19\"), email_address (\"beth42@example.org\", \"jhuel@example.com\", \"gracie29@example.com\"), middle_name (\"Brooklyn\", \"Anna\", \"Cleve\"), cell_mobile_number (\"09700166582\", \"03174364122\", \"877.549.9067x8723\"), ssn (\"39\", \"402\", \"141072406\"), permanent_address_id (3, 14, 3) | student_enrolment : student_enrolment_id (2, 6, 7), semester_id (5, 12, 5), other_details (None), student_id (7, 14, 1), degree_program_id (4, 10, 4) | student_enrolment_courses : student_enrolment_id (5, 4, 9), course_id (10, 6, 2), student_course_id (45105806, 8, 604750) | transcripts : other_details (None), transcript_id (11, 13, 13), document_date (\"1975-05-20 18:31:21\", \"1975-05-20 18:31:21\", \"2013-06-30 13:01:40\"), record_date (\"1975-05-20 18:31:21\", \"1975-05-20 18:31:21\", \"2013-06-30 13:01:40\") | transcript_contents : student_course_id (8, 2, 2), transcript_id (6, 8, 4)",
        "ambiguous_queries": [
            "select record_date, other_details from transcripts order by record_date asc limit 1",
            "select document_date, other_details from transcripts order by document_date asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"date\": [{\"transcripts\": [\"record_date\"]}, {\"transcripts\": [\"document_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"date\" refers to the schema \"transcripts\".\"document_date\"",
        "clear_ambiguity": "{\"date\": {\"transcripts\": [\"document_date\"]}}",
        "gold_query": "select document_date, other_details from transcripts order by document_date asc limit 1"
    },
    {
        "index": 54,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : cell_number , state , street , zip_code , family_name , city , home_phone , email_address , owner_id , first_name , surname  | dogs : date_arrived , gender , size_code , weight , abandoned_yn , date_of_birth , age , owner_id , dog_id , date_adopted , name , breed_code , date_departed  | professionals : state , city , cell_number , zip_code , professional_id , last_name , role_code , first_name , street , home_phone , email_address  | treatments : dog_id , date_of_treatment , treatment_type_code , cost_of_treatment , professional_id , treatment_id",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : cell_number (\"478.978.0729\", \"121.381.3316x6535\", \"559.874.3011x989\"), state (\"Maryland\", \"Arizona\", \"Virginia\"), street (\"9212 Rosenbaum Lights\", \"0647 Hintz Village Apt. 024\", \"89011 Kertzmann Spring Suite 642\"), zip_code (\"02647\", \"45244\", \"61019\"), family_name (\"Stoltenberg\", \"Fisher\", \"Funk\"), city (\"Lake Tia\", \"Lake Valentin\", \"South Afton\"), home_phone (\"363.948.1090\", \"066.264.7885\", \"893-862-5295x61709\"), email_address (\"pearlie18@example.com\", \"kturner@example.net\", \"zboncak.madonna@example.net\"), owner_id (15, 2, 13), first_name (\"Rolando\", \"Rolando\", \"Heather\"), surname (\"Stoltenberg\", \"Fisher\", \"Funk\") | dogs : date_arrived (\"2017-09-08 20:10:13\", \"2017-12-29 23:24:13\", \"2017-12-29 06:08:26\"), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"1.72\", \"8.95\", \"3.52\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2009-04-12 06:02:48\", \"2013-02-20 14:50:56\", \"2013-02-13 05:15:21\"), age (\"3\", \"5\", \"9\"), owner_id (14, 8, 3), dog_id (15, 7, 7), date_adopted (\"2018-03-23 16:02:04\", \"2018-03-07 21:45:43\", \"2018-03-23 16:02:04\"), name (\"Hipolito\", \"George\", \"Kacey\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 05:07:47\", \"2018-03-25 02:47:40\") | professionals : state (\"Alabama\", \"NorthCarolina\", \"Montana\"), city (\"West Heidi\", \"New Laurytown\", \"Raynorfort\"), cell_number (\"1-258-285-4707x8020\", \"328.842.3792\", \"1-258-285-4707x8020\"), zip_code (\"33020\", \"41215\", \"80775\"), professional_id (14, 10, 5), last_name (\"Braun\", \"Kshlerin\", \"Kshlerin\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Lesly\", \"Jayson\", \"Winfield\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), home_phone (\"891.475.2256\", \"022.529.0550x1319\", \"346.594.3739\"), email_address (\"delphine29@example.com\", \"delphine29@example.com\", \"delphine29@example.com\") | treatments : dog_id (15, 1, 1), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-15 19:10:02\", \"2018-03-10 11:45:58\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (428, 852, 266), professional_id (9, 7, 5), treatment_id (14, 6, 2)",
        "ambiguous_queries": [
            "select t1.first_name, t1.surname, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
            "select t1.first_name, t1.family_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"owners\": [\"surname\"]}, {\"owners\": [\"family_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"owners\".\"family_name\"",
        "clear_ambiguity": "{\"last name\": {\"owners\": [\"family_name\"]}}",
        "gold_query": "select t1.first_name, t1.family_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id"
    },
    {
        "index": 55,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_amount , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : email_address , home_phone 997-7627\", state , owner_id , street , cell_number 271-6744x4507\", \"341.667.8085\", \"478.978.0729\", zip_code , city , first_name , last_name  | dogs : gender , dog_id , exit_date , size_code , owner_id , date_arrived , name , weight , date_of_birth , departure_date , abandoned_yn , breed_code , date_adopted , age  | professionals : first_name , last_name , role_code , street , email_address , city , zip_code , home_phone 338-3342x585\", \"346.594.3739\", \"325-155-0801x7005\", professional_id , cell_number , state  | treatments : treatment_id , date_of_treatment , dog_id , professional_id , treatment_type_code , cost_of_treatment",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : email_address (\"ybergstrom@example.com\", \"ykris@example.com\", \"zboncak.madonna@example.net\"), home_phone (\"01802479758\", \"1-332-849-1908\", \"(058)997-7627\"), state (\"Indiana\", \"Wisconsin\", \"Virginia\"), owner_id (2, 11, 11), street (\"89011 Kertzmann Spring Suite 642\", \"60352 Kayleigh Crossing Suite 700\", \"59509 Mellie Mountain\"), cell_number (\"(783)271-6744x4507\", \"341.667.8085\", \"478.978.0729\"), zip_code (\"22731\", \"92406\", \"00589\"), city (\"Brakusfurt\", \"Lake Jennyferfort\", \"Barrettburgh\"), first_name (\"Nora\", \"Jaclyn\", \"Adelle\"), last_name (\"Mertz\", \"Feil\", \"Price\") | dogs : gender (\"1\", \"0\"), dog_id (5, 14, 10), exit_date (\"2018-03-25 14:15:41\", \"2018-03-25 14:15:41\", \"2018-03-25 06:58:44\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (1, 11, 12), date_arrived (\"2017-12-22 05:02:02\", \"2017-12-29 06:08:26\", \"2017-07-25 15:19:07\"), name (\"Troy\", \"Troy\", \"Jesus\"), weight (\"8.95\", \"2.18\", \"6.92\"), date_of_birth (\"2017-09-19 05:39:09\", \"2012-07-11 17:15:10\", \"2012-07-11 17:15:10\"), departure_date (\"2018-03-25 14:15:41\", \"2018-03-25 14:15:41\", \"2018-03-25 06:58:44\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-23 16:02:04\", \"2018-03-23 16:02:04\"), age (\"6\", \"3\", \"4\") | professionals : first_name (\"Lesly\", \"Sigurd\", \"Domenica\"), last_name (\"Watsica\", \"Kshlerin\", \"Considine\"), role_code (\"Employee\", \"Veterenarian\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\"), email_address (\"uboehm@example.org\", \"jeichmann@example.com\", \"delphine29@example.com\"), city (\"North Odellfurt\", \"New Laurytown\", \"McLaughlinfort\"), zip_code (\"80775\", \"17902\", \"84515\"), home_phone (\"(230)338-3342x585\", \"346.594.3739\", \"325-155-0801x7005\"), professional_id (1, 8, 5), cell_number (\"880-659-7577x736\", \"889-940-2676\", \"880-659-7577x736\"), state (\"NewMexico\", \"Alabama\", \"Utah\") | treatments : treatment_id (5, 13, 15), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-03-19 04:39:54\", \"2018-03-08 05:26:23\"), dog_id (7, 12, 1), professional_id (8, 5, 6), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (567, 567, 567)",
        "ambiguous_queries": [
            "select distinct t1.date_arrived, t1.exit_date from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
            "select distinct t1.date_arrived, t1.departure_date from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id"
        ],
        "gold_ambiguity": {
            "match": "{\"departing date\": [{\"dogs\": [\"exit_date\"]}, {\"dogs\": [\"departure_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"departing date\" refers to the schema \"dogs\".\"exit_date\"",
        "clear_ambiguity": "{\"departing date\": {\"dogs\": [\"exit_date\"]}}",
        "gold_query": "select distinct t1.date_arrived, t1.exit_date from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "index": 56,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "schema_without_content": "stadium : location , average , seating_capacity , stadium_id , lowest , name , maximum_capacity , highest  | singer : song_release_year , country , song_name , name , singer_id , age , is_male  | concert : year , concert_id , theme , stadium_id , concert_name  | singer_in_concert : singer_id , concert_id",
        "schema_with_content": "stadium : location (\"Raith Rovers\", \"Ayr United\", \"Alloa Athletic\"), average (637, 642, 638), seating_capacity (52500, 3960, 3960), stadium_id (6, 1, 4), lowest (466, 315, 533), name (\"Glebe Park\", \"Stark's Park\", \"Somerset Park\"), maximum_capacity (52500, 3960, 3960), highest (1763, 837, 780) | singer : song_release_year (\"2008\", \"2016\", \"1992\"), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Sun\", \"You\", \"You\"), name (\"John Nizinik\", \"John Nizinik\", \"Rose White\"), singer_id (4, 2, 4), age (32, 52, 29), is_male (\"F\", \"T\") | concert : year (\"2014\", \"2015\"), concert_id (4, 6, 5), theme (\"Free choice 2\", \"Free choice\", \"Free choice 2\"), stadium_id (\"7\", \"7\", \"1\"), concert_name (\"Week 1\", \"Super bootcamp\", \"Home Visits\") | singer_in_concert : singer_id (\"2\", \"5\", \"6\"), concert_id (2, 2, 5)",
        "ambiguous_queries": [
            "select name, seating_capacity from stadium order by average desc limit 1",
            "select name, maximum_capacity from stadium order by average desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"capacity\": [{\"stadium\": [\"seating_capacity\"]}, {\"stadium\": [\"maximum_capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"capacity\" refers to the schema \"stadium\".\"maximum_capacity\"",
        "clear_ambiguity": "{\"capacity\": {\"stadium\": [\"maximum_capacity\"]}}",
        "gold_query": "select name, maximum_capacity from stadium order by average desc limit 1"
    },
    {
        "index": 57,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "What is the charge amount of the most expensive charge type?",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , fee , amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : cell_number 768-5439x484\", \"1-626-264-7659x1697\", \"121.381.3316x6535\", home_phone 997-7627\", \"066.264.7885\", \"997-7627\", email_address , city , street , state , zip_code , last_name , owner_id , first_name  | dogs : name , dog_id , owner_id , weight , breed_code , abandoned_yn , date_departed , age , gender , date_of_birth , size_code , date_arrived , date_adopted  | professionals : state , professional_id , last_name , cell_number , first_name , street , role_code , zip_code , home_phone 338-3342x585\", \"022.529.0550x1319\", \"346.594.3739\", email_address , city  | treatments : professional_id , date_of_treatment , treatment_id , treatment_type_code , cost_of_treatment , dog_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), fee (98, 322, 640), amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : cell_number (\"(722)768-5439x484\", \"1-626-264-7659x1697\", \"121.381.3316x6535\"), home_phone (\"(058)997-7627\", \"066.264.7885\", \"(058)997-7627\"), email_address (\"edythe62@example.org\", \"zboncak.madonna@example.net\", \"christy49@example.org\"), city (\"Brakusfurt\", \"Barrettburgh\", \"New Margaretteborough\"), street (\"0647 Hintz Village Apt. 024\", \"1204 Mae Highway Apt. 107\", \"60352 Kayleigh Crossing Suite 700\"), state (\"Pennsylvania\", \"Washington\", \"Arkansas\"), zip_code (\"22693\", \"78297\", \"11990\"), last_name (\"Mertz\", \"Stoltenberg\", \"DuBuque\"), owner_id (6, 7, 13), first_name (\"Rolando\", \"Melisa\", \"Cindy\") | dogs : name (\"George\", \"Narciso\", \"Jeffrey\"), dog_id (14, 5, 8), owner_id (12, 12, 11), weight (\"9.8\", \"8.96\", \"1.72\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 02:11:32\", \"2018-03-25 06:29:10\"), age (\"8\", \"2\", \"8\"), gender (\"1\", \"0\"), date_of_birth (\"2017-09-19 05:39:09\", \"2008-10-09 22:38:53\", \"2012-01-27 05:11:53\"), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-07-25 15:19:07\", \"2017-05-06 08:03:52\", \"2017-04-20 00:58:55\"), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-06 16:32:11\", \"2018-02-25 23:45:30\") | professionals : state (\"Alabama\", \"Hawaii\", \"Utah\"), professional_id (4, 13, 8), last_name (\"Walter\", \"Murazik\", \"Jacobs\"), cell_number (\"461-801-2600\", \"609-405-2990\", \"889-940-2676\"), first_name (\"Velva\", \"Velva\", \"Brady\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"06646\", \"34041\", \"80775\"), home_phone (\"(230)338-3342x585\", \"022.529.0550x1319\", \"346.594.3739\"), email_address (\"jeichmann@example.com\", \"deanna.schuster@example.com\", \"west.eula@example.net\"), city (\"Baileymouth\", \"New Laurytown\", \"North Adelberttown\") | treatments : professional_id (14, 7, 7), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-24 22:25:58\", \"2018-03-14 19:10:40\"), treatment_id (11, 5, 6), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (681, 681, 313), dog_id (14, 4, 13)",
        "ambiguous_queries": [
            "select max(amount) from charges",
            "select max(fee) from charges"
        ],
        "gold_ambiguity": {
            "match": "{\"charge amount\": [{\"charges\": [\"amount\"]}, {\"charges\": [\"fee\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"charge amount\" refers to the schema \"charges\".\"fee\"",
        "clear_ambiguity": "{\"charge amount\": {\"charges\": [\"fee\"]}}",
        "gold_query": "select max(fee) from charges"
    },
    {
        "index": 58,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "schema_without_content": "conductor : year_of_work , conductor_id , nationality , name , age  | orchestra : orchestra , orchestra_id , record_company , year_of_founded , conductor_id , major_record_format  | performance : percentage_share , market_share , date , performance_id , type , weekly_rank , official_ratings_ , orchestra_id  | show : show_id , result , attendance , if_first_show , performance_id",
        "schema_with_content": "conductor : year_of_work (6, 16, 12), conductor_id (11, 4, 6), nationality (\"USA\", \"UK\", \"France\"), name (\"Valeri Gergiev\", \"Robert Craft\", \"Antal DorÃ¡ti\"), age (43, 50, 40) | orchestra : orchestra (\"Chicago Symphony Orchestra\", \"Royal Danish Orchestra\", \"Philharmonia Orchestra\"), orchestra_id (6, 7, 7), record_company (\"EMI\", \"Koch Records / Naxos Records\", \"Delos Records\"), year_of_founded (2009.0, 2002.0, 2003.0), conductor_id (12, 12, 5), major_record_format (\"CD\", \"CD / LP\", \"DVD\") | performance : percentage_share (\"38.1%\", \"34.0%\", \"29.4%\"), market_share (\"38.1%\", \"34.0%\", \"29.4%\"), date (\"17 June\", \"9 June\", \"9 June\"), performance_id (4, 6, 4), type (\"Semi-final 3\", \"Live final results\", \"Auditions 3\"), weekly_rank (\"7\", \"TBC\", \"1\"), official_ratings_(millions) (11.45, 9.29, 7.39), orchestra_id (4, 3, 6) | show : show_id (2, 5, 5), result (\"T\", \"F\"), attendance (1026.0, 2431.0, 555.0), if_first_show (\"St. Mirren Park\", \"St. Mirren Park\", \"Fir Park\"), performance_id (5, 4, 3)",
        "ambiguous_queries": [
            "select max(percentage_share), min(percentage_share) from performance where type != 'Live final'",
            "select max(market_share), min(market_share) from performance where type != 'Live final'"
        ],
        "gold_ambiguity": {
            "match": "{\"shares\": [{\"performance\": [\"percentage_share\"]}, {\"performance\": [\"market_share\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"shares\" refers to the schema \"performance\".\"market_share\"",
        "clear_ambiguity": "{\"shares\": {\"performance\": [\"market_share\"]}}",
        "gold_query": "select max(market_share), min(market_share) from performance where type != 'Live final'"
    },
    {
        "index": 59,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "How many cartoons did each director create?",
        "schema_without_content": "tv_channel : country , series_name , pixel_aspect_ratio_par , hight_definition_tv , id , language , package_option , content , pay_per_view_ppv  | tv_series : share , weekly_rank , 18_49_rating_share , air_date , rating , channel , id , viewers_m , episode  | cartoon : original_air_date , director_name , channel , id , filmmaker , written_by , production_code , title",
        "schema_with_content": "tv_channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"MTV Live HD\", \"MTV Classic\", \"Sky Music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), hight_definition_tv (\"no\", \"yes\"), id (\"704\", \"728\", \"708\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\"), content (\"music\"), pay_per_view_ppv (\"no\") | tv_series : share (6.0, 9.0, 5.0), weekly_rank (80.0, 80.0, 61.0), 18_49_rating_share (\"2.2/6\", \"2.2/6\", \"2.1/5\"), air_date (\"November 26, 2007\", \"October 1, 2007\", \"October 1, 2007\"), rating (\"5.8\", \"4.3\", \"3.0\"), channel (\"728\", \"728\", \"708\"), id (12.0, 12.0, 12.0), viewers_m (\"6.06\", \"8.23\", \"6.94\"), episode (\"Game Three\", \"The Hanged Man\", \"The Hanged Man\") | cartoon : original_air_date (\"February6,2009\", \"February27,2009\", \"February27,2009\"), director_name (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"701\", \"700\", \"704\"), id (6.0, 10.0, 1.0), filmmaker (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Michael Jelenic\", \"Michael Jelenic\", \"Todd Casey\"), production_code (110.0, 103.0, 105.0), title (\"The Eyes of Despero!\", \"Day of the Dark Knight!\", \"Fall of the Blue Beetle!\")",
        "ambiguous_queries": [
            "select count(*), director_name from cartoon group by director_name",
            "select count(*), filmmaker from cartoon group by filmmaker"
        ],
        "gold_ambiguity": {
            "match": "{\"director\": [{\"cartoon\": [\"director_name\"]}, {\"cartoon\": [\"filmmaker\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"director\" refers to the schema \"cartoon\".\"director_name\"",
        "clear_ambiguity": "{\"director\": {\"cartoon\": [\"director_name\"]}}",
        "gold_query": "select count(*), director_name from cartoon group by director_name"
    },
    {
        "index": 60,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the population, name and leader of the country with the largest area?",
        "schema_without_content": "city : name , countrycode , population , district , id  | sqlite_sequence : seq , name  | country : surfacearea , code , gnpold , gnp , continent , head , supreme_leader , indepyear , localname , code2 , capital , region , governmentform \", \"Constitutional Monarchy \", lifeexpectancy , name , population  | countrylanguage : percentage , isofficial , countrycode , language",
        "schema_with_content": "city : name (\"Kimje\", \"SÃ£o LuÃ­s\", \"Ica\"), countrycode (\"MSR\", \"LUX\", \"ETH\"), population (259728, 159103, 272806), district (\"Crete\", \"Bratislava\", \"Alabama\"), id (1631, 1617, 969) | sqlite_sequence : seq (4079), name (\"city\") | country : surfacearea (377829.0, 102.0, 388.0), code (\"RUS\", \"BDI\", \"NFK\"), gnpold (189122.0, 153907.0, 2102826.0), gnp (8444.0, 11705.0, 10692.0), continent (\"Antarctica\", \"South America\", \"Africa\"), head (\"Muammar al-Qadhafi\", \"Teburoro Tito\", \"Chandrika Kumaratunga\"), supreme_leader (\"Muammar al-Qadhafi\", \"Teburoro Tito\", \"Chandrika Kumaratunga\"), indepyear (1962, 1976, 1822), localname (\"Guinea Ecuatorial\", \"Dhivehi Raajje/Maldives\", \"Marshall Islands/Majol\"), code2 (\"ID\", \"SJ\", \"PF\"), capital (1889, 584, None), region (\"Micronesia\", \"Middle East\", \"North America\"), governmentform (\"Part of Denmark\", \"Constitutional Monarchy (Emirate)\", \"Constitutional Monarchy (Emirate)\"), lifeexpectancy (77.9, 45.9, 69.1), name (\"Moldova\", \"Western Sahara\", \"Lesotho\"), population (8861400, 8861400, 5398700) | countrylanguage : percentage (95.8, 0.3, 7.2), isofficial (\"T\", \"F\"), countrycode (\"TMP\", \"LBN\", \"IND\"), language (\"Dyula\", \"QuichÃ©\", \"Bengali\")",
        "ambiguous_queries": [
            "select name, population, head from country order by surfacearea desc limit 1",
            "select name, population, supreme_leader from country order by surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{}, {}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"leader\".\"supreme_leader\"",
        "clear_ambiguity": "{\"country\": {\"leader\": [\"supreme_leader\"]}}",
        "gold_query": "select name, population, supreme_leader from country order by surfacearea desc limit 1"
    },
    {
        "index": 61,
        "db_id": "pets_1",
        "ambig_type": "column",
        "db_file": "column/pets_1/pets_1.sqlite",
        "question": "What is the id and weight of every pet who is older than 1?",
        "schema_without_content": "student : city_code , stuid , fname , advisor , age , major , lname , sex  | has_pet : stuid , petid  | pets : mass , pettype , body_weight , pet_age , petid",
        "schema_with_content": "student : city_code (\"DET\", \"HKG\", \"BAL\"), stuid (1028, 1027, 1008), fname (\"Sarah\", \"Derek\", \"Dinesh\"), advisor (8721, 8722, 7271), age (16, 27, 20), major (50, 550, 50), lname (\"Norris\", \"Pang\", \"Smith\"), sex (\"F\", \"M\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : mass (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), body_weight (12.0, 13.4, 9.3), pet_age (3, 2, 1), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select petid, mass from pets where pet_age > 1",
            "select petid, body_weight from pets where pet_age > 1"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"pets\": [\"mass\"]}, {\"pets\": [\"body_weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"pets\".\"body_weight\"",
        "clear_ambiguity": "{\"weight\": {\"pets\": [\"body_weight\"]}}",
        "gold_query": "select petid, body_weight from pets where pet_age > 1"
    },
    {
        "index": 62,
        "db_id": "pets_1",
        "ambig_type": "column",
        "db_file": "column/pets_1/pets_1.sqlite",
        "question": "For students who have pets, how many pets does each student have?",
        "schema_without_content": "student : id , sex , age , student_id , advisor , major , fname , lname , city_code  | has_pet : stuid , petid  | pets : petid , pet_age , pettype , weight",
        "schema_with_content": "student : id (1005, 1031, 1014), sex (\"F\", \"M\"), age (22, 21, 17), student_id (1005, 1031, 1014), advisor (9172, 8772, 1121), major (50, 600, 520), fname (\"Ian\", \"Stacy\", \"Dinesh\"), lname (\"Simms\", \"Prater\", \"Andreou\"), city_code (\"PIT\", \"HKG\", \"SFO\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3)",
        "ambiguous_queries": [
            "select count(*), t1.id from student as t1 join has_pet as t2 on t1.id = t2.stuid group by t1.id",
            "select count(*), t1.student_id from student as t1 join has_pet as t2 on t1.student_id = t2.stuid group by t1.student_id"
        ],
        "gold_ambiguity": {
            "match": "{\"student\": [{\"student\": [\"id\"]}, {\"student\": [\"student_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"student\" refers to the schema \"student\".\"id\"",
        "clear_ambiguity": "{\"student\": {\"student\": [\"id\"]}}",
        "gold_query": "select count(*), t1.id from student as t1 join has_pet as t2 on t1.id = t2.stuid group by t1.id"
    },
    {
        "index": 63,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : city , last_name , zip_code , cell_number 768-5439x484\", email_address , street , first_name , home_phone 747-5094x8134\", \"1-346-655-5842x768\", \"1-332-849-1908\", owner_id , state  | dogs : gender , name , size_code , owner_id , dog_id , weight , date_adopted , date_of_birth , age , abandoned_yn , date_arrived , date_departed , breed_code  | professionals : professional_id , email_address , cell_number , first_name , street , last_name , home_phone 2898266914\", \"246-951-0080x76716\", \"891.475.2256\", role_code , zip_code , city , state  | treatments : treatment_date , healing_date , cost_of_treatment , treatment_type_code , professional_id , dog_id , treatment_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : city (\"Lake Tia\", \"Lake Tia\", \"Port Reannamouth\"), last_name (\"Prohaska\", \"Nicolas\", \"Stoltenberg\"), zip_code (\"36871\", \"87304\", \"35747\"), cell_number (\"739-136-7202\", \"762.589.6117x1328\", \"(722)768-5439x484\"), email_address (\"pearlie18@example.com\", \"pearlie18@example.com\", \"ymaggio@example.com\"), street (\"51934 Treutel Harbor\", \"1858 Jan Park\", \"9212 Rosenbaum Lights\"), first_name (\"Gay\", \"Melisa\", \"Jaclyn\"), home_phone (\"(094)747-5094x8134\", \"1-346-655-5842x768\", \"1-332-849-1908\"), owner_id (11, 1, 12), state (\"Virginia\", \"Washington\", \"Vermont\") | dogs : gender (\"1\", \"0\"), name (\"Holden\", \"Jesus\", \"Bessie\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (14, 5, 7), dog_id (6, 4, 14), weight (\"9.8\", \"3.52\", \"8.04\"), date_adopted (\"2018-02-27 11:54:35\", \"2018-02-27 00:27:57\", \"2018-03-08 15:03:00\"), date_of_birth (\"2010-11-11 07:11:53\", \"2012-05-31 08:01:36\", \"2013-02-13 05:15:21\"), age (\"5\", \"8\", \"6\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-12-29 23:24:13\", \"2018-01-17 11:44:16\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 14:15:41\", \"2018-03-25 06:46:07\"), breed_code (\"ESK\", \"BUL\", \"HUS\") | professionals : professional_id (8, 7, 9), email_address (\"schneider.kathryne@example.org\", \"lucile.shanahan@example.org\", \"marquardt.furman@example.org\"), cell_number (\"1-185-137-1945x409\", \"00230569697\", \"328.842.3792\"), first_name (\"Vernice\", \"Jayson\", \"Ericka\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), last_name (\"Walter\", \"Kshlerin\", \"Ullrich\"), home_phone (\"+71(6)2898266914\", \"246-951-0080x76716\", \"891.475.2256\"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"54312\", \"34041\", \"52476\"), city (\"Baileymouth\", \"South Rockyport\", \"Kirastad\"), state (\"Wisconsin\", \"Montana\", \"Indiana\") | treatments : treatment_date (\"2018-03-15 20:25:34\", \"2018-03-16 10:27:36\", \"2018-03-19 04:39:54\"), healing_date (\"2018-03-15 20:25:34\", \"2018-03-16 10:27:36\", \"2018-03-19 04:39:54\"), cost_of_treatment (514, 681, 656), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (7, 14, 5), dog_id (4, 13, 7), treatment_id (9, 2, 8)",
        "ambiguous_queries": [
            "select t1.treatment_date, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
            "select t1.healing_date, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id"
        ],
        "gold_ambiguity": {
            "match": "{\"date\": [{\"treatments\": [\"treatment_date\"]}, {\"treatments\": [\"healing_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"date\" refers to the schema \"treatments\".\"treatment_date\"",
        "clear_ambiguity": "{\"date\": {\"treatments\": [\"treatment_date\"]}}",
        "gold_query": "select t1.treatment_date, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "index": 64,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , street , home_phone 997-7627\", \"130-796-4589x05454\", \"363.948.1090\", given_name , email_address , forename , last_name , cell_number 768-5439x484\", \"768-5439x484\", state , zip_code , city  | dogs : date_adopted , date_arrived , age , name , date_departed , owner_id , size_code , dog_id , abandoned_yn , weight , gender , date_of_birth , breed_code  | professionals : state , last_name , city , email_address , professional_id , first_name , cell_number , role_code , home_phone 2898266914\", \"+020259033559\", \"304-4499x59146\", street , zip_code  | treatments : professional_id , cost_of_treatment , dog_id , treatment_id , treatment_type_code , date_of_treatment",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (2, 6, 13), street (\"6950 Katherine Forges Apt. 630\", \"1858 Jan Park\", \"1858 Jan Park\"), home_phone (\"(058)997-7627\", \"130-796-4589x05454\", \"363.948.1090\"), given_name (\"Johann\", \"Jaclyn\", \"Cindy\"), email_address (\"marks.gail@example.org\", \"ybergstrom@example.com\", \"zboncak.madonna@example.net\"), forename (\"Johann\", \"Jaclyn\", \"Cindy\"), last_name (\"Rippin\", \"Price\", \"Stoltenberg\"), cell_number (\"739-136-7202\", \"(722)768-5439x484\", \"(722)768-5439x484\"), state (\"Arizona\", \"NewYork\", \"Arizona\"), zip_code (\"78297\", \"22731\", \"45244\"), city (\"Port Reannamouth\", \"West Leonard\", \"Lake Jennyferfort\") | dogs : date_adopted (\"2018-03-21 10:41:18\", \"2018-03-13 12:47:15\", \"2018-03-05 06:05:23\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-06-25 10:14:05\", \"2017-05-06 08:03:52\"), age (\"1\", \"9\", \"6\"), name (\"Hipolito\", \"Lyric\", \"Merritt\"), date_departed (\"2018-03-25 06:46:07\", \"2018-03-25 14:15:41\", \"2018-03-25 10:25:46\"), owner_id (10, 1, 5), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (2, 15, 8), abandoned_yn (\"1\", \"0\"), weight (\"5.16\", \"3.52\", \"8.95\"), gender (\"1\", \"0\"), date_of_birth (\"2015-02-26 21:31:22\", \"2012-07-11 17:15:10\", \"2008-05-30 12:51:34\"), breed_code (\"ESK\", \"BUL\", \"HUS\") | professionals : state (\"Wisconsin\", \"Hawaii\", \"NorthCarolina\"), last_name (\"Pouros\", \"Frami\", \"Christiansen\"), city (\"North Odellfurt\", \"Borisside\", \"Raynorfort\"), email_address (\"jeichmann@example.com\", \"delphine29@example.com\", \"jerrod.bahringer@example.org\"), professional_id (7, 11, 8), first_name (\"Karley\", \"Velva\", \"Jayson\"), cell_number (\"328.842.3792\", \"962-983-8109x3509\", \"880-659-7577x736\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"+71(6)2898266914\", \"+02(1)0259033559\", \"(920)304-4499x59146\"), street (\"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), zip_code (\"67980\", \"07412\", \"17902\") | treatments : professional_id (6, 9, 14), cost_of_treatment (313, 139, 428), dog_id (13, 2, 12), treatment_id (11, 4, 14), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-01 04:14:46\", \"2018-03-14 19:10:40\")",
        "ambiguous_queries": [
            "select t1.given_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
            "select t1.forename, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"owners\": [\"given_name\"]}, {\"owners\": [\"forename\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"owners\".\"given_name\"",
        "clear_ambiguity": "{\"first name\": {\"owners\": [\"given_name\"]}}",
        "gold_query": "select t1.given_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id"
    },
    {
        "index": 65,
        "db_id": "voter_1",
        "ambig_type": "column",
        "db_file": "column/voter_1/voter_1.sqlite",
        "question": "What are the distinct states and create time of all votes?",
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_name , contestant_number  | votes : vote_id , contestant_number , produced , phone_number , state , generated",
        "schema_with_content": "area_code_state : area_code (602, 781, 651), state (\"NH\", \"PA\", \"UT\") | contestants : contestant_name (\"Kelly Clauss\", \"Nita Coster\", \"Tabatha Gehling\"), contestant_number (6, 5, 9) | votes : vote_id (5, 5, 3), contestant_number (2, 3, 5), produced (\"2018-03-09 19:03:40\", \"2018-03-09 19:03:36\", \"2018-03-09 19:03:21\"), phone_number (5112677315, 5112677315, 7148407040), state (\"NY\", \"CA\", \"NJ\n\"), generated (\"2018-03-09 19:03:40\", \"2018-03-09 19:03:36\", \"2018-03-09 19:03:21\")",
        "ambiguous_queries": [
            "select distinct state, generated from votes",
            "select distinct state, produced from votes"
        ],
        "gold_ambiguity": {
            "match": "{\"create time\": [{\"votes\": [\"generated\"]}, {\"votes\": [\"produced\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"create time\" refers to the schema \"votes\".\"produced\"",
        "clear_ambiguity": "{\"create time\": {\"votes\": [\"produced\"]}}",
        "gold_query": "select distinct state, produced from votes"
    },
    {
        "index": 66,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "schema_without_content": "city : population , countrycode , district , name \", \"Braila\", \"Wiesbaden\", id  | sqlite_sequence : name , seq  | country : nation , localname , capital , gnp , region , gnpold , governmentform , headofstate , code , code2 , lifeexpectancy , continent , title , surfacearea , population , indepyear  | countrylanguage : percentage , language , isofficial , countrycode",
        "schema_with_content": "city : population (1573458, 294788, 187206), countrycode (\"ATG\", \"URY\", \"UKR\"), district (\"Hubei\", \"Niamey\", \"Ãle-de-France\"), name (\"Yeotmal (Yavatmal)\", \"Braila\", \"Wiesbaden\"), id (1754, 973, 3127) | sqlite_sequence : name (\"city\"), seq (4079) | country : nation (\"Saudi Arabia\", \"Cape Verde\", \"Sierra Leone\"), localname (\"Sakartvelo\", \"Terres australes franÃ§aises\", \"Tonga\"), capital (928, 33, 149), gnp (4173.0, 19770.0, 6648.0), region (\"Western Europe\", \"Eastern Europe\", \"Western Europe\"), gnpold (2559.0, 2149.0, 146171.0), governmentform (\"Dependent Territory of the US\", \"US Territory\", \"Nonmetropolitan Territory of The Netherlands\"), headofstate (\"Milan Kucan\", \"Zayid bin Sultan al-Nahayan\", \"Robert KotÅ¡arjan\"), code (\"LSO\", \"SMR\", \"IOT\"), code2 (\"KH\", \"BR\", \"CK\"), lifeexpectancy (46.0, 38.3, 80.1), continent (\"South America\", \"Africa\", \"Asia\"), title (\"Saudi Arabia\", \"Cape Verde\", \"Sierra Leone\"), surfacearea (242.0, 28748.0, 2586.0), population (293000, 46844000, 14786000), indepyear (1499, 1968, 1919) | countrylanguage : percentage (11.5, 11.3, 21.6), language (\"Tswana\", \"Gurage\", \"Chewa\"), isofficial (\"T\", \"F\"), countrycode (\"ASM\", \"DOM\", \"HTI\")",
        "ambiguous_queries": [
            "select t1.nation from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.nation order by count(*) desc limit 1",
            "select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.title order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"nation\": [{\"country\": [\"nation\"]}, {\"country\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"nation\" refers to the schema \"country\".\"nation\"",
        "clear_ambiguity": "{\"nation\": {\"country\": [\"nation\"]}}",
        "gold_query": "select t1.nation from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.nation order by count(*) desc limit 1"
    },
    {
        "index": 67,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "schema_without_content": "continents : continent , contid  | countries : continent , countryname , countryid  | car_makers : country , complete_name , id , full_title , maker  | model_list : maker , model , modelid  | car_names : make , model , makeid  | cars_data : horsepower , mpg , edispl , cylinders , year , accelerate , weight , id",
        "schema_with_content": "continents : continent (\"america\", \"africa\", \"asia\"), contid (4, 2, 3) | countries : continent (3, 3, 4), countryname (\"egypt\", \"australia\", \"usa\"), countryid (7, 14, 15) | car_makers : country (\"6\", \"4\", \"7\"), complete_name (\"Opel\", \"Mazda\", \"BMW\"), id (14, 16, 18), full_title (\"Opel\", \"Mazda\", \"BMW\"), maker (\"mazda\", \"volkswagen\", \"triumph\") | model_list : maker (9, 7, 16), model (\"audi\", \"volvo\", \"honda\"), modelid (3, 15, 31) | car_names : make (\" mazda glc deluxe\", \"dodge dart custom\", \"mercury monarch\"), model (\"triumph\", \"volkswagen\", \"peugeot\"), makeid (326, 203, 273) | cars_data : horsepower (\"103\", \"167\", \"225\"), mpg (\"16.9\", \"15.5\", \"19.8\"), edispl (76.0, 429.0, 260.0), cylinders (5, 6, 8), year (1976, 1981, 1970), accelerate (14.3, 13.5, 23.7), weight (4077, 2265, 2575), id (328, 367, 73)",
        "ambiguous_queries": [
            "select t1.complete_name, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id",
            "select t1.full_title, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id"
        ],
        "gold_ambiguity": {
            "match": "{\"full name\": [{\"car_makers\": [\"complete_name\"]}, {\"car_makers\": [\"full_title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"full name\" refers to the schema \"car_makers\".\"full_title\"",
        "clear_ambiguity": "{\"full name\": {\"car_makers\": [\"full_title\"]}}",
        "gold_query": "select t1.full_title, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id"
    },
    {
        "index": 68,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the names of nations speak both English and French?",
        "schema_without_content": "city : population , id , name , countrycode , district  | sqlite_sequence : name , seq  | country : lifeexpectancy , continent , nation , code2 , capital , title , localname , headofstate , gnp , gnpold , indepyear , governmentform , code , region , population , surfacearea  | countrylanguage : isofficial , percentage , countrycode , language",
        "schema_with_content": "city : population (93735, 237500, 107722), id (2805, 2453, 4012), name (\"Sawangan\", \"La Spezia\", \"Shahrud\"), countrycode (\"GUM\", \"NPL\", \"SGP\"), district (\"Riad\", \"Morogoro\", \"San Luis\") | sqlite_sequence : name (\"city\"), seq (4079) | country : lifeexpectancy (38.3, 74.9, 81.1), continent (\"South America\", \"Asia\", \"North America\"), nation (\"Mexico\", \"Turkmenistan\", \"Hong Kong\"), code2 (\"TJ\", \"UY\", \"GB\"), capital (2318, 2511, 2882), title (\"Mexico\", \"Turkmenistan\", \"Hong Kong\"), localname (\"Heard and McDonald Islands\", \"The Gambia\", \"Papua New Guinea/Papua Niugini\"), headofstate (\"Mohammad Rafiq Tarar\", \"Kim Jong-il\", \"Benjamin William Mkapa\"), gnp (1054.0, 4401.0, 1208.0), gnpold (706.0, 8596.0, 23383.0), indepyear (1984, 1944, 1861), governmentform (\"Dependent Territory of Norway\", \"Federation\", \"Federation\"), code (\"BTN\", \"SLE\", \"MSR\"), region (\"Southern and Central Asia\", \"Caribbean\", \"Central America\"), population (599000, 578000, 15085000), surfacearea (48511.0, 322463.0, 21041.0) | countrylanguage : isofficial (\"T\", \"F\"), percentage (19.0, 15.8, 9.7), countrycode (\"AUS\", \"LUX\", \"VIR\"), language (\"Udmur\", \"Assyrian\", \"Ukrainian\")",
        "ambiguous_queries": [
            "select t1.nation from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.nation from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'",
            "select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"country\": [\"nation\"]}, {\"country\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"country\".\"title\"",
        "clear_ambiguity": "{\"names\": {\"country\": [\"title\"]}}",
        "gold_query": "select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.title from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'"
    },
    {
        "index": 69,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "schema_without_content": "city : id , district , population , name , countrycode  | sqlite_sequence : name , seq  | country : gnpold , code2 , gnp , indepyear , population , headofstate , name , code , localname , surfacearea , region , continent , lifeexpectancy , governmentform , capital  | countrylanguage : percentage , tongue , countrycode , dialect , isofficial",
        "schema_with_content": "city : id (1307, 201, 3744), district (\"Erzincan\", \"Siem Reap\", \"Distrito Central\"), population (153086, 403408, 89800), name (\"al-Raqqa\", \"Rampur\", \"Merlo\"), countrycode (\"IRQ\", \"GRL\", \"MHL\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnpold (169264.0, 1872.0, 4935.0), code2 (\"TJ\", \"DO\", \"GN\"), gnp (21929.0, 6964.0, 4401.0), indepyear (1994, 843, 1350), population (57680000, 180000, 4807000), headofstate (\"Rexhep Mejdani\", \"Isayas Afewerki [Isaias Afwerki]\", \"Frederick Chiluba\"), name (\"Pakistan\", \"Austria\", \"Brunei\"), code (\"DOM\", \"GRC\", \"AUT\"), localname (\"Norge\", \"Â´Uman\", \"Solomon Islands\"), surfacearea (587041.0, 2586.0, 637657.0), region (\"Micronesia\", \"Southeast Asia\", \"Eastern Asia\"), continent (\"Antarctica\", \"South America\", \"North America\"), lifeexpectancy (69.2, 53.6, 77.9), governmentform (\"Parliamentary Coprincipality\", \"Dependent Territory of the US\", \"Federal Republic\"), capital (2695, 653, 2928) | countrylanguage : percentage (32.5, 96.6, 6.8), tongue (\"Hadjarai\", \"Khasi\", \"Japanese\"), countrycode (\"GEO\", \"MLI\", \"PAK\"), dialect (\"Hadjarai\", \"Khasi\", \"Japanese\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select tongue, countrycode, max(percentage) from countrylanguage group by countrycode",
            "select dialect, countrycode, max(percentage) from countrylanguage group by countrycode"
        ],
        "gold_ambiguity": {
            "match": "{\"languages\": [{\"countrylanguage\": [\"tongue\"]}, {\"countrylanguage\": [\"dialect\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"languages\" refers to the schema \"countrylanguage\".\"dialect\"",
        "clear_ambiguity": "{\"languages\": {\"countrylanguage\": [\"dialect\"]}}",
        "gold_query": "select dialect, countrycode, max(percentage) from countrylanguage group by countrycode"
    },
    {
        "index": 70,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "Which airports do not have departing or arriving flights?",
        "schema_without_content": "airlines : airline , uid , country , abbreviation  | airports : countryabbrev , aerodrome_name , aviation_terminal , country , city , airportcode  | flights : airline , flightno , sourceairport , destairport",
        "schema_with_content": "airlines : airline (\"United Airlines\", \"Allegiant Air\", \"Allegiant Air\"), uid (12, 6, 10), country (\"USA\"), abbreviation (\"Southwest\", \"AirTran\", \"UAL\") | airports : countryabbrev (\"US \", \"US\"), aerodrome_name (\"Ainsworth \", \"Alton \", \"Akhiok SPB \"), aviation_terminal (\"Ainsworth \", \"Alton \", \"Akhiok SPB \"), country (\"United States \"), city (\"Ada \", \"Anniston \", \"Anaheim \"), airportcode (\"ADG\", \"AHN\", \"RFK\") | flights : airline (9, 7, 10), flightno (636, 310, 640), sourceairport (\" ADM\", \" ABR\", \" ABY\"), destairport (\" ABI\", \" ALB\", \" ALS\")",
        "ambiguous_queries": [
            "select aerodrome_name from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
            "select aviation_terminal from airports where airportcode not in (select sourceairport from flights union select destairport from flights)"
        ],
        "gold_ambiguity": {
            "match": "{\"airports\": [{\"airports\": [\"aerodrome_name\"]}, {\"flights\": [\"aerodrome_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airports\" refers to the schema \"flights\".\"aerodrome_name\"",
        "clear_ambiguity": "{\"airports\": {\"flights\": [\"aerodrome_name\"]}}",
        "gold_query": "select aerodrome_name from airports where airportcode not in (select sourceairport from flights union select destairport from flights)"
    },
    {
        "index": 71,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "schema_without_content": "tv_channel : pay_per_view_ppv , series_name , hight_definition_tv , content , package_option \", \"Option\", pixel_aspect_ratio_par , country , id , language  | tv_series : id , weekly_rank , episode , share , air_date , rating , 18_49_rating_share , channel , viewers_m  | cartoon : cartoon_name , original_air_date , program_title , channel , production_code , id , written_by , directed_by",
        "schema_with_content": "tv_channel : pay_per_view_ppv (\"no\"), series_name (\"myDeejay\", \"Rock TV\", \"MTV Hits\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), package_option (\"Sky Famiglia + Sky HD\", \"no ( FTV )\", \"Option\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"704\", \"704\", \"714\"), language (\"Italian\", \"English\") | tv_series : id (12.0, 12.0, 6.0), weekly_rank (71.0, 70.0, 67.0), episode (\"A Love of a Lifetime\", \"Winterland\", \"A Love of a Lifetime\"), share (7.0, 9.0, 6.0), air_date (\"October 29, 2007\", \"November 26, 2007\", \"November 19, 2007\"), rating (\"4.3\", \"3.4\", \"4.0\"), 18_49_rating_share (\"1.7/5\", \"1.5/4\", \"1.5/4\"), channel (\"714\", \"713\", \"707\"), viewers_m (\"5.61\", \"5.61\", \"8.23\") | cartoon : cartoon_name (\"The Eyes of Despero!\", \"Enter the Outsiders!\", \"Deep Cover for Batman!\"), original_air_date (\"February27,2009\", \"January2,2009\", \"February20,2009\"), program_title (\"The Eyes of Despero!\", \"Enter the Outsiders!\", \"Deep Cover for Batman!\"), channel (\"701\", \"700\", \"706\"), production_code (108.0, 101.0, 104.0), id (8.0, 6.0, 3.0), written_by (\"Michael Jelenic\", \"Steven Melching\", \"Steven Melching\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "ambiguous_queries": [
            "select cartoon_name from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
            "select program_title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'"
        ],
        "gold_ambiguity": {
            "match": "{\"title\": [{\"cartoon\": [\"cartoon_name\"]}, {\"cartoon\": [\"program_title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"title\" refers to the schema \"cartoon\".\"program_title\"",
        "clear_ambiguity": "{\"title\": {\"cartoon\": [\"program_title\"]}}",
        "gold_query": "select program_title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'"
    },
    {
        "index": 72,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "schema_without_content": "addresses : city , line_1 , address_id , other_address_details , line_2 , line_3 , state_province_county , country , zip_postcode  | courses : course_name , course_description , other_details , course_id  | departments : other_details , department_description , department_name , department_id  | degree_programs : other_details , department_id , degree_program_id , degree_summary_name , degree_summary_description  | sections : section_name , other_details , section_id , section_description , course_id  | semesters : semester_id , other_details , semester_name , semester_description  | students : middle_name , surname , date_left , cell_mobile_number 153-1469x1733\", \"889-8954x524\", ssn , student_id , permanent_address_id , email_address , family_name , date_first_registered , first_name , current_address_id , other_student_details  | student_enrolment : degree_program_id , other_details , student_id , semester_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : city (\"Rutherfordtown\", \"Mariliehaven\", \"North Omer\"), line_1 (\"0643 Muller Vista\", \"2294 Grant Square Apt. 235\", \"3999 Aufderhar Ways Suite 593\"), address_id (4, 14, 6), other_address_details (None), line_2 (\"Suite 383\", \"Suite 239\", \"Suite 830\"), line_3 (None), state_province_county (\"Kansas\", \"WestVirginia\", \"Hawaii\"), country (\"New Caledonia\", \"Samoa\", \"Iceland\"), zip_postcode (\"068\", \"638\", \"943\") | courses : course_name (\"en\", \"rs\", \"fr\"), course_description (\"q\", \"v\", \"n\"), other_details (None), course_id (13, 6, 15) | departments : other_details (None), department_description (\"non\", \"consequatur\", \"in\"), department_name (\"geography\", \"management\", \"drama\"), department_id (5, 6, 8) | degree_programs : other_details (None), department_id (14, 15, 2), degree_program_id (13, 3, 11), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"placeat\", \"et\", \"earum\") | sections : section_name (\"e\", \"a\", \"g\"), other_details (None), section_id (8, 12, 7), section_description (\"qui\", \"reprehenderit\", \"doloremque\"), course_id (9, 10, 14) | semesters : semester_id (14, 6, 10), other_details (None), semester_name (\"spring 2017\", \"fall 2010\", \"spring 2016\"), semester_description (\"g\", \"m\", \"y\") | students : middle_name (\"Mossie\", \"Neal\", \"Osborne\"), surname (\"Rempel\", \"Schuppe\", \"Gleichner\"), date_left (\"2016-04-09 12:27:04\", \"1971-05-17 19:28:49\", \"1990-09-01 05:03:27\"), cell_mobile_number (\"677.401.9382\", \"(982)153-1469x1733\", \"(096)889-8954x524\"), ssn (\"304246\", \"34458427\", \"68095\"), student_id (8, 3, 15), permanent_address_id (4, 3, 11), email_address (\"baumbach.lucious@example.org\", \"dell43@example.net\", \"nya.lesch@example.net\"), family_name (\"Rempel\", \"Schuppe\", \"Gleichner\"), date_first_registered (\"2005-12-15 08:42:10\", \"2004-12-24 12:36:46\", \"2005-12-15 08:42:10\"), first_name (\"Jordy\", \"Jett\", \"Timmothy\"), current_address_id (9, 14, 14), other_student_details (\"voluptatem\", \"laborum\", \"et\") | student_enrolment : degree_program_id (5, 4, 10), other_details (None), student_id (7, 6, 5), semester_id (9, 12, 2), student_enrolment_id (2, 6, 10) | student_enrolment_courses : student_enrolment_id (6, 4, 6), student_course_id (7, 7, 0), course_id (2, 10, 13) | transcripts : other_details (None), transcript_date (\"1986-07-12 07:27:29\", \"1985-08-21 09:32:39\", \"1975-05-20 18:31:21\"), transcript_id (12, 1, 14) | transcript_contents : student_course_id (2, 76, 76), transcript_id (2, 11, 4)",
        "ambiguous_queries": [
            "select first_name, middle_name, surname from students order by date_first_registered asc limit 1",
            "select first_name, middle_name, family_name from students order by date_first_registered asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"students\": [\"surname\"]}, {\"students\": [\"family_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"students\".\"surname\"",
        "clear_ambiguity": "{\"first name\": {\"students\": [\"surname\"]}}",
        "gold_query": "select first_name, middle_name, surname from students order by date_first_registered asc limit 1"
    },
    {
        "index": 73,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "Show names of all high school students who do not have any friends.",
        "schema_without_content": "highschooler : full_name , id , given_name , grade  | friend : student_id , friend_id  | likes : student_id , liked_id",
        "schema_with_content": "highschooler : full_name (\"Andrew\", \"Jessica\", \"John\"), id (1101, 1510, 1316), given_name (\"Andrew\", \"Jessica\", \"John\"), grade (9, 11, 11) | friend : student_id (1661, 1101, 1510), friend_id (1247, 1101, 1911) | likes : student_id (1689, 1247, 1501), liked_id (1689, 1304, 1101)",
        "ambiguous_queries": [
            "select full_name from highschooler except select t2.full_name from friend as t1 join highschooler as t2 on t1.student_id = t2.id",
            "select given_name from highschooler except select t2.given_name from friend as t1 join highschooler as t2 on t1.student_id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"highschooler\": [\"full_name\"]}, {\"highschooler\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"highschooler\".\"given_name\"",
        "clear_ambiguity": "{\"names\": {\"highschooler\": [\"given_name\"]}}",
        "gold_query": "select given_name from highschooler except select t2.given_name from friend as t1 join highschooler as t2 on t1.student_id = t2.id"
    },
    {
        "index": 74,
        "db_id": "voter_1",
        "ambig_type": "column",
        "db_file": "column/voter_1/voter_1.sqlite",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_number , contestant_name  | votes : cell_number , contestant_number , state , contact_number , created , vote_id",
        "schema_with_content": "area_code_state : area_code (207, 516, 502), state (\"WI\", \"MT\", \"IL\") | contestants : contestant_number (5, 7, 4), contestant_name (\"Tabatha Gehling\", \"Kelly Clauss\", \"Jessie Alloway\") | votes : cell_number (7148407040, 7148407040, 5112677315), contestant_number (2, 3, 5), state (\"NY\", \"CA\", \"NJ\n\"), contact_number (7148407040, 7148407040, 5112677315), created (\"2018-03-09 19:03:21\", \"2018-03-09 19:03:21\", \"2018-03-09 19:03:39\"), vote_id (3, 3, 5)",
        "ambiguous_queries": [
            "select t2.created, t2.state, t2.cell_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'",
            "select t2.created, t2.state, t2.contact_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'"
        ],
        "gold_ambiguity": {
            "match": "{\"phone numbers\": [{\"votes\": [\"cell_number\"]}, {\"votes\": [\"contact_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"phone numbers\" refers to the schema \"votes\".\"cell_number\"",
        "clear_ambiguity": "{\"phone numbers\": {\"votes\": [\"cell_number\"]}}",
        "gold_query": "select t2.created, t2.state, t2.cell_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'"
    },
    {
        "index": 75,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "List the earnings of poker players in descending order.",
        "schema_without_content": "poker_player : poker_player_id , revenue , income , money_rank , best_finish , final_table_made , people_id  | people : height , people_id , name , birth_date , nationality",
        "schema_with_content": "poker_player : poker_player_id (3, 3, 3), revenue (104871.0, 142800.0, 104871.0), income (104871.0, 142800.0, 104871.0), money_rank (141.0, 58.0, 154.0), best_finish (1.0, 2.0, 3.0), final_table_made (26.0, 21.0, 10.0), people_id (2, 1, 7) | people : height (182.0, 207.0, 196.0), people_id (3, 2, 5), name (\"Maksim Botin\", \"Aleksey Ostapenko\", \"Aleksey Ostapenko\"), birth_date (\"August 16, 1982\", \"August 8, 1986\", \"May 26, 1986\"), nationality (\"Russia\", \"Bulgaria\")",
        "ambiguous_queries": [
            "select income from poker_player order by income desc",
            "select revenue from poker_player order by revenue desc"
        ],
        "gold_ambiguity": {
            "match": "{\"earnings\": [{\"poker_player\": [\"income\"]}, {\"poker_player\": [\"revenue\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"earnings\" refers to the schema \"poker_player\".\"revenue\"",
        "clear_ambiguity": "{\"earnings\": {\"poker_player\": [\"revenue\"]}}",
        "gold_query": "select revenue from poker_player order by revenue desc"
    },
    {
        "index": 76,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "schema_without_content": "players : country_code , player_id , hand , birth_date , first_name , last_name  | matches : loser_hand , winner_hand , winner_rank , draw_size , winner_id , round , loser_ioc , tournament_name , winner_seed , winner_ioc , tourney_level , winner_rank_points , loser_name , event_name , winner_entry , surface , loser_ht , tourney_id , loser_seed , winner_name , winner_age , loser_entry , score  6-4\", \"6-2 3-6 6-2\", \"7-5 7-6\", loser_rank_points , loser_id , year , loser_rank , match_num , tourney_date , minutes , best_of , winner_ht , loser_age  | rankings : ranking_points , tours , ranking , ranking_date , player_id",
        "schema_with_content": "players : country_code (\"GBR\", \"CRC\", \"rc=\"), player_id (212996, 210287, 206624), hand (\"R\", \"U\", \"R\"), birth_date (19450828, 19910321, 19880629), first_name (\"Guadalupe\", \"Fatima Zohra\", \"Karis\"), last_name (\"Chuen\", \"Portel\", \"Cammilleri\") | matches : loser_hand (\"R\", \"L\"), winner_hand (\"R\", \"L\"), winner_rank (33, 61, 6), draw_size (12, 128, 64), winner_id (201458, 201595, 201693), round (\"SF\", \"RR\", \"RR\"), loser_ioc (\"USA\", \"USA\", \"NED\"), tournament_name (\"s-Hertogenbosch\", \"Roland Garros\", \"Roland Garros\"), winner_seed (21, 14, 19), winner_ioc (\"HUN\", \"SWE\", \"DEN\"), tourney_level (\"P\", \"G\", \"W\"), winner_rank_points (845, 5790, 4287), loser_name (\"Simona Halep\", \"Timea Babos\", \"Camila Giorgi\"), event_name (\"s-Hertogenbosch\", \"Roland Garros\", \"Roland Garros\"), winner_entry (\"\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ht (168, 178, 183), tourney_id (\"2016-0703\", \"2016-1067\", \"2017-1098\"), loser_seed (12, 31, 24), winner_name (\"Roberta Vinci\", \"Johanna Larsson\", \"Caroline Wozniacki\"), winner_age (24.041067761799997, 29.2210814511, 27.4743326489), loser_entry (\"\"), score (\"7-6(5) 6-4\", \"6-2 3-6 6-2\", \"7-5 7-6(2)\"), loser_rank_points (3815, 2975, 2590), loser_id (201493, 201425, 202469), year (2013, 2016, 2017), loser_rank (25, 11, 1), match_num (276, 300, 209), tourney_date (20170403, 20170220, 20160404), minutes (107, 135, 73), best_of (3), winner_ht (185, 163, 170), loser_age (24.517453798800002, 31.6167008898, 26.869267624899997) | rankings : ranking_points (2016, 1428, 678), tours (12, 38, 3), ranking (1169, 962, 1023), ranking_date (19940207, 20080218, 20081215), player_id (214106, 202540, 203498)",
        "ambiguous_queries": [
            "select event_name from matches group by event_name having count(*) > 10",
            "select tournament_name from matches group by tournament_name having count(*) > 10"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"matches\": [\"event_name\"]}, {\"matches\": [\"tournament_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"matches\".\"tournament_name\"",
        "clear_ambiguity": "{\"names\": {\"matches\": [\"tournament_name\"]}}",
        "gold_query": "select tournament_name from matches group by tournament_name having count(*) > 10"
    },
    {
        "index": 77,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the country codes for countries that do not speak English?",
        "schema_without_content": "city : name , population , district , id , countrycode  | sqlite_sequence : name , seq  | country : population , code , lifeexpectancy , name , headofstate , capital , indepyear , localname , surfacearea , gnpold , region , continent , gnp , code2 , governmentform \", \"Islamic Emirate\", \"Republic\" | countrylanguage : language , percentage , territorycode , nationcode , isofficial",
        "schema_with_content": "city : name (\"al-Raqqa\", \"Kodaira\", \"Zalantun\"), population (101936, 93985, 139570), district (\"Tortola\", \"FÃ¨s-Boulemane\", \"Yamoussoukro\"), id (1735, 3998, 846), countrycode (\"MNP\", \"ITA\", \"TWN\") | sqlite_sequence : name (\"city\"), seq (4079) | country : population (24318000, 68000, 22455500), code (\"VGB\", \"LUX\", \"NZL\"), lifeexpectancy (52.4, 73.3, 69.9), name (\"Guatemala\", \"Pitcairn\", \"Costa Rica\"), headofstate (\"Cassam Uteem\", \"Robert KotÅ¡arjan\", \"Fidel Castro Ruz\"), capital (1450, 645, 3332), indepyear (1946, 1825, 843), localname (\"Heard and McDonald Islands\", \"Saint Lucia\", \"Angola\"), surfacearea (78866.0, 694.0, 650.0), gnpold (3371.0, 1312.0, 157.0), region (\"Baltic Countries\", \"British Islands\", \"South America\"), continent (\"Europe\", \"Asia\", \"Europe\"), gnp (141.0, 9472.0, 435.0), code2 (\"IO\", \"JP\", \"BW\"), governmentform (\"Constitutional Monarchy (Emirate)\", \"Islamic Emirate\", \"Republic\") | countrylanguage : language (\"Soga\", \"Russian\", \"Philippene Languages\"), percentage (81.0, 1.3, 35.8), territorycode (\"DNK\", \"SHN\", \"GRC\"), nationcode (\"DNK\", \"SHN\", \"GRC\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select nationcode from countrylanguage except select nationcode from countrylanguage where language = 'English'",
            "select territorycode from countrylanguage except select territorycode from countrylanguage where language = 'English'"
        ],
        "gold_ambiguity": {
            "match": "{\"country codes\": [{\"countrylanguage\": [\"nationcode\"]}, {\"countrylanguage\": [\"territorycode\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country codes\" refers to the schema \"countrylanguage\".\"territorycode\"",
        "clear_ambiguity": "{\"country codes\": {\"countrylanguage\": [\"territorycode\"]}}",
        "gold_query": "select territorycode from countrylanguage except select territorycode from countrylanguage where language = 'English'"
    },
    {
        "index": 78,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "schema_without_content": "continents : continent , contid  | countries : countryname , continent , countryid  | car_makers : fullname , id , maker , country  | model_list : modelid , maker , model  | car_names : designation , make , makeid , vehicle_model  | cars_data : accelerate , mpg , edispl , horsepower , year , cylinders , weight , id",
        "schema_with_content": "continents : continent (\"america\", \"asia\", \"australia\"), contid (2, 5, 4) | countries : countryname (\"nigeria\", \"sweden\", \"korea\"), continent (1, 3, 5), countryid (15, 11, 10) | car_makers : fullname (\"Nissan Motors\", \"Triumph\", \"Hyundai\"), id (3, 17, 16), maker (\"mazda\", \"citroen\", \"saab\"), country (\"6\", \"3\", \"2\") | model_list : modelid (31, 11, 8), maker (1, 17, 16), model (\"fiat\", \"cadillac\", \"chrysler\") | car_names : designation (\"honda\", \"opel\", \"chevrolet\"), make (\"chevrolet malibu\", \"mercury monarch ghia\", \"chevrolet chevelle malibu\"), makeid (391, 145, 216), vehicle_model (\"honda\", \"opel\", \"chevrolet\") | cars_data : accelerate (11.5, 15.6, 24.6), mpg (\"35\", \"20.8\", \"14.5\"), edispl (146.0, 400.0, 155.0), horsepower (\"84\", \"145\", \"149\"), year (1971, 1976, 1978), cylinders (4, 5, 8), weight (3449, 2855, 2430), id (236, 106, 71)",
        "ambiguous_queries": [
            "select t1.vehicle_model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1",
            "select t1.designation from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"model\": [{\"car_names\": [\"vehicle_model\"]}, {\"car_names\": [\"designation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"model\" refers to the schema \"car_names\".\"designation\"",
        "clear_ambiguity": "{\"model\": {\"car_names\": [\"designation\"]}}",
        "gold_query": "select t1.designation from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1"
    },
    {
        "index": 79,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Count the number of distinct store locations.",
        "schema_without_content": "employee : age , name , employee_id , city  | shop : number_products , manager_name , name , address , place , shop_id , district  | hiring : shop_id , employee_id , start_from , is_full_time  | evaluation : employee_id , bonus , year_awarded",
        "schema_with_content": "employee : age (23, 23, 30), name (\"Jason Hobson\", \"Steve Borthwick\", \"Lee Mears\"), employee_id (6, 8, 3), city (\"Bath\", \"Leicester\", \"Bristol\") | shop : number_products (5000, 5000, 10770), manager_name (\"Antti Muurinen\", \"Kai NyyssÃ¶nen\", \"Mika Lehkosuo\"), name (\"KuPS\", \"FC Lahti\", \"FC Haka\"), address (\"Turku\", \"Kuopio\", \"Turku\"), place (\"Turku\", \"Kuopio\", \"Turku\"), shop_id (6, 4, 1), district (\"Tapiolan Urheilupuisto\", \"Veritas Stadion\", \"Lahden Stadion\") | hiring : shop_id (8, 6, 6), employee_id (6, 4, 5), start_from (\"2009\", \"2003\", \"2009\"), is_full_time (\"T\", \"F\") | evaluation : employee_id (\"2\", \"4\", \"2\"), bonus (3200.0, 4000.0, 4000.0), year_awarded (\"2018\", \"2017\", \"2015\")",
        "ambiguous_queries": [
            "select count(distinct address) from shop",
            "select count(distinct place) from shop"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"shop\": [\"address\"]}, {\"shop\": [\"place\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"shop\".\"place\"",
        "clear_ambiguity": "{\"locations\": {\"shop\": [\"place\"]}}",
        "gold_query": "select count(distinct place) from shop"
    },
    {
        "index": 80,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "What is the average earnings of poker players?",
        "schema_without_content": "poker_player : revenue , money_rank , income , best_finish , poker_player_id , final_table_made , people_id  | people : height , people_id , name , birth_date , nationality",
        "schema_with_content": "poker_player : revenue (596462.0, 476090.0, 104871.0), money_rank (166.0, 68.0, 154.0), income (596462.0, 476090.0, 104871.0), best_finish (1.0, 2.0, 3.0), poker_player_id (5, 3, 1), final_table_made (42.0, 42.0, 42.0), people_id (5, 5, 2) | people : height (182.0, 193.0, 207.0), people_id (1, 3, 7), name (\"Roman Bragin\", \"Roman Bragin\", \"Sergey Grankin\"), birth_date (\"July 14, 1983\", \"January 22, 1987\", \"February 8, 1981\"), nationality (\"Russia\", \"Bulgaria\")",
        "ambiguous_queries": [
            "select avg(income) from poker_player",
            "select avg(revenue) from poker_player"
        ],
        "gold_ambiguity": {
            "match": "{\"earnings\": [{\"poker_player\": [\"income\"]}, {\"poker_player\": [\"revenue\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"earnings\" refers to the schema \"poker_player\".\"revenue\"",
        "clear_ambiguity": "{\"earnings\": {\"poker_player\": [\"revenue\"]}}",
        "gold_query": "select avg(revenue) from poker_player"
    },
    {
        "index": 81,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "schema_without_content": "employee : city , age , employee_id , name  | shop : supervisor_name , name , district , number_products , location , shop_id , admin_name  | hiring : shop_id , start_from , is_full_time , employee_id  | evaluation : year_awarded , bonus , employee_id",
        "schema_with_content": "employee : city (\"Sale\", \"Bath\", \"Bristol\"), age (29, 23, 23), employee_id (4, 1, 5), name (\"Louis Deacon\", \"Tim Payne\", \"Louis Deacon\") | shop : supervisor_name (\"Mika Laurikainen\", \"Tommi Kautonen\", \"Mika Laurikainen\"), name (\"FC Lahti\", \"FC KooTeePee\", \"FF Jaro\"), district (\"Finnair Stadium\", \"Lahden Stadion\", \"Tapiolan Urheilupuisto\"), number_products (15000, 3516, 5000), location (\"Turku\", \"Espoo\", \"Turku\"), shop_id (4, 1, 9), admin_name (\"Mika Laurikainen\", \"Tommi Kautonen\", \"Mika Laurikainen\") | hiring : shop_id (4, 6, 8), start_from (\"2003\", \"2011\", \"2010\"), is_full_time (\"T\", \"F\"), employee_id (7, 1, 7) | evaluation : year_awarded (\"2016\", \"2011\", \"2018\"), bonus (4000.0, 2900.0, 2900.0), employee_id (\"1\", \"2\", \"7\")",
        "ambiguous_queries": [
            "select supervisor_name, district from shop order by number_products desc limit 1",
            "select admin_name, district from shop order by number_products desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"manager name\": [{\"shop\": [\"supervisor_name\"]}, {\"shop\": [\"admin_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"manager name\" refers to the schema \"shop\".\"supervisor_name\"",
        "clear_ambiguity": "{\"manager name\": {\"shop\": [\"supervisor_name\"]}}",
        "gold_query": "select supervisor_name, district from shop order by number_products desc limit 1"
    },
    {
        "index": 82,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "schema_without_content": "tv_channel : content , subscription_option , id , series_name , tv_service_option , pay_per_view_ppv , hight_definition_tv , country , pixel_aspect_ratio_par , language  | tv_series : channel , weekly_rank , viewers_m , episode , rating , id , air_date , share , 18_49_rating_share  | cartoon : title , id , production_code , original_air_date , directed_by , written_by , channel",
        "schema_with_content": "tv_channel : content (\"music\"), subscription_option (\"Option\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\"), id (\"707\", \"706\", \"701\"), series_name (\"MTV Music\", \"Sky Music\", \"Rock TV\"), tv_service_option (\"Option\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\") | tv_series : channel (\"719\", \"700\", \"719\"), weekly_rank (66.0, 50.0, 67.0), viewers_m (\"8.23\", \"9.16\", \"6.09\"), episode (\"Winterland\", \"Blowback\", \"A Love of a Lifetime\"), rating (\"3.4\", \"3.0\", \"5.3\"), id (2.0, 10.0, 11.0), air_date (\"November 26, 2007\", \"October 29, 2007\", \"November 5, 2007\"), share (7.0, 9.0, 9.0), 18_49_rating_share (\"2.2/6\", \"2.2/6\", \"3.5/9\") | cartoon : title (\"The Eyes of Despero!\", \"Fall of the Blue Beetle!\", \"Terror on Dinosaur Island!\"), id (8.0, 12.0, 4.0), production_code (103.0, 105.0, 102.0), original_air_date (\"January9,2009\", \"February6,2009\", \"January30,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Michael Jelenic\", \"James Krieg\", \"Steven Melching\"), channel (\"701\", \"707\", \"728\")",
        "ambiguous_queries": [
            "select subscription_option, series_name from tv_channel where hight_definition_tv = 'yes'",
            "select tv_service_option, series_name from tv_channel where hight_definition_tv = 'yes'"
        ],
        "gold_ambiguity": {
            "match": "{\"package options\": [{\"tv_channel\": [\"subscription_option\"]}, {\"tv_channel\": [\"tv_service_option\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"package options\" refers to the schema \"tv_channel\".\"tv_service_option\"",
        "clear_ambiguity": "{\"package options\": {\"tv_channel\": [\"tv_service_option\"]}}",
        "gold_query": "select tv_service_option, series_name from tv_channel where hight_definition_tv = 'yes'"
    },
    {
        "index": 83,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "How many people live in countries that do not speak English?",
        "schema_without_content": "city : population , countrycode , district , id , name  | sqlite_sequence : name , seq  | country : indepyear , name , lifeexpectancy , gnpold , continent , gnp , region , headcount , surfacearea , localname , governmentform , code , code2 , citizen_count , headofstate , capital  | countrylanguage : countrycode , percentage , language , isofficial",
        "schema_with_content": "city : population (174500, 353046, 563374), countrycode (\"THA\", \"COD\", \"MUS\"), district (\"Istanbul\", \"Distrito Nacional\", \"Grad Zagreb\"), id (970, 2009, 3629), name (\"Lubao\", \"Dunedin\", \"MÃ¡laga\") | sqlite_sequence : name (\"city\"), seq (4079) | country : indepyear (1948, 1961, 1825), name (\"Guadeloupe\", \"French Polynesia\", \"Tuvalu\"), lifeexpectancy (38.3, 60.9, 56.5), gnpold (3347.0, 3922.0, 256092.0), continent (\"Africa\", \"Antarctica\", \"Europe\"), gnp (258.0, 1687.0, 3205.0), region (\"Western Africa\", \"Melanesia\", \"Central America\"), headcount (94000, 380200, 12646000), surfacearea (622.0, 1759540.0, 1075.0), localname (\"Martinique\", \"Prathet Thai\", \"Timor Timur\"), governmentform (\"Federal Republic\", \"Nonmetropolitan Territory of New Zealand\", \"Dependent Territory of Norway\"), code (\"COM\", \"COK\", \"UMI\"), code2 (\"AS\", \"HN\", \"PW\"), citizen_count (94000, 380200, 12646000), headofstate (\"Mireya Elisa Moscoso RodrÃ­guez\", \"Arnoldo AlemÃ¡n Lacayo\", \"Natsagiin Bagabandi\"), capital (2460, 3243, 3813) | countrylanguage : countrycode (\"BLZ\", \"GHA\", \"CIV\"), percentage (78.8, 7.8, 81.6), language (\"Kannada\", \"Zapotec\", \"Hui\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select sum(headcount) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English')",
            "select sum(citizen_count) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English')"
        ],
        "gold_ambiguity": {
            "match": "{\"countries\": [{\"country\": [\"headcount\"]}, {\"country\": [\"citizen_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"countries\" refers to the schema \"country\".\"headcount\"",
        "clear_ambiguity": "{\"countries\": {\"country\": [\"headcount\"]}}",
        "gold_query": "select sum(headcount) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English')"
    },
    {
        "index": 84,
        "db_id": "museum_visit",
        "ambig_type": "column",
        "db_file": "column/museum_visit/museum_visit.sqlite",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "schema_without_content": "museum : staff_size , employee_count , museum_id , open_year , name  | visitor : level_of_membership , age , name , id  | visit : num_of_ticket , visitor_id , museum_id , total_spent",
        "schema_with_content": "museum : staff_size (17, 17, 15), employee_count (17, 17, 15), museum_id (6, 1, 5), open_year (\"2011\", \"2010\", \"2009\"), name (\"Plaza Museum\", \"Plaza Museum\", \"Plaza Museum\") | visitor : level_of_membership (5, 8, 8), age (35, 36, 36), name (\"Arjen Robben\", \"Gonzalo HiguaÃ­n \", \"RaÃºl Brown\"), id (4, 6, 3) | visit : num_of_ticket (2, 10, 20), visitor_id (\"5\", \"3\", \"6\"), museum_id (2, 2, 1), total_spent (20.44, 20.44, 320.14)",
        "ambiguous_queries": [
            "select avg(employee_count) from museum where open_year < 2009",
            "select avg(staff_size) from museum where open_year < 2009"
        ],
        "gold_ambiguity": {
            "match": "{\"number\": [{\"museum\": [\"employee_count\"]}, {\"museum\": [\"staff_size\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"number\" refers to the schema \"museum\".\"staff_size\"",
        "clear_ambiguity": "{\"number\": {\"museum\": [\"staff_size\"]}}",
        "gold_query": "select avg(staff_size) from museum where open_year < 2009"
    },
    {
        "index": 85,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "List the arrival date and the departure date for all the dogs.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : cell_number 4323592985\", state , last_name , zip_code , street , email_address , home_phone 034-1670\", first_name , city , owner_id  | dogs : entry_date , age , date_of_birth , arrival_date , weight , size_code , owner_id , date_departed , breed_code , date_adopted , name , gender , dog_id , abandoned_yn  | professionals : professional_id , street , zip_code , home_phone , first_name , cell_number , city , state , last_name , email_address , role_code  | treatments : professional_id , dog_id , treatment_type_code , cost_of_treatment , treatment_id , date_of_treatment",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : cell_number (\"1-739-421-2225x38148\", \"1-626-264-7659x1697\", \"+00(2)4323592985\"), state (\"Maryland\", \"Maryland\", \"Washington\"), last_name (\"Nicolas\", \"Ondricka\", \"Hauck\"), zip_code (\"61019\", \"11990\", \"36871\"), street (\"68118 Daniel Row\", \"68118 Daniel Row\", \"2635 Caitlyn Plains\"), email_address (\"lynn81@example.org\", \"wpfeffer@example.net\", \"hudson.favian@example.com\"), home_phone (\"916.976.9480x13851\", \"130-796-4589x05454\", \"(544)034-1670\"), first_name (\"Nora\", \"Nora\", \"Melisa\"), city (\"West Leonard\", \"Beerton\", \"West Leonard\"), owner_id (2, 8, 11) | dogs : entry_date (\"2018-01-02 03:15:29\", \"2017-10-24 04:45:13\", \"2017-12-29 23:24:13\"), age (\"8\", \"6\", \"9\"), date_of_birth (\"2012-05-03 21:42:25\", \"2012-01-27 05:11:53\", \"2017-09-19 05:39:09\"), arrival_date (\"2018-01-02 03:15:29\", \"2017-10-24 04:45:13\", \"2017-12-29 23:24:13\"), weight (\"8.95\", \"6.92\", \"4.36\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (6, 14, 2), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 06:29:10\", \"2018-03-25 06:58:44\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-07 21:45:43\", \"2018-02-27 11:54:35\"), name (\"Kacey\", \"George\", \"Holden\"), gender (\"1\", \"0\"), dog_id (2, 5, 8), abandoned_yn (\"1\", \"0\") | professionals : professional_id (10, 14, 7), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \"), zip_code (\"34041\", \"80775\", \"54312\"), home_phone (\"891.475.2256\", \"1-138-287-3775\", \"346.594.3739\"), first_name (\"Taryn\", \"Karley\", \"Velva\"), cell_number (\"139-321-7313\", \"609-405-2990\", \"011.193.9081x3186\"), city (\"West Heidi\", \"Kirastad\", \"North Adelberttown\"), state (\"Wyoming\", \"NewMexico\", \"SouthCarolina\"), last_name (\"Braun\", \"Kshlerin\", \"Frami\"), email_address (\"jeichmann@example.com\", \"delphine29@example.com\", \"deanna.schuster@example.com\"), role_code (\"Employee\", \"Veterenarian\") | treatments : professional_id (4, 6, 14), dog_id (13, 14, 15), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (428, 266, 852), treatment_id (2, 13, 6), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-11 04:23:15\", \"2018-03-11 04:23:15\")",
        "ambiguous_queries": [
            "select entry_date, date_departed from dogs",
            "select arrival_date, date_departed from dogs"
        ],
        "gold_ambiguity": {
            "match": "{\"arrival date\": [{\"dogs\": [\"entry_date\"]}, {\"dogs\": [\"arrival_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"arrival date\" refers to the schema \"dogs\".\"entry_date\"",
        "clear_ambiguity": "{\"arrival date\": {\"dogs\": [\"entry_date\"]}}",
        "gold_query": "select entry_date, date_departed from dogs"
    },
    {
        "index": 86,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "Show me the cost of the most recently performed treatment.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , first_name , zip_code , city , state , street , email_address , home_phone 747-5094x8134\", cell_number 9217952551\", last_name  | dogs : date_arrived , abandoned_yn , weight , gender , date_of_birth , owner_id , date_departed , date_adopted , name , age , breed_code , dog_id , size_code  | professionals : email_address , professional_id , zip_code , home_phone , street , state , role_code , last_name , cell_number , first_name , city  | treatments : professional_id , treatment_id , treatment_type_code , date_of_treatment , price_of_treatment , fee_of_treatment , dog_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (12, 14, 2), first_name (\"Nora\", \"Orlando\", \"Rolando\"), zip_code (\"11990\", \"45244\", \"11990\"), city (\"Beerton\", \"Lake Jennyferfort\", \"South Daisyfurt\"), state (\"Mississippi\", \"Arizona\", \"NorthDakota\"), street (\"68118 Daniel Row\", \"89011 Kertzmann Spring Suite 642\", \"2417 Keara Stravenue Apt. 146\"), email_address (\"ykris@example.com\", \"ymaggio@example.com\", \"christy49@example.org\"), home_phone (\"893-862-5295x61709\", \"01802479758\", \"(094)747-5094x8134\"), cell_number (\"1-739-421-2225x38148\", \"478.978.0729\", \"+70(4)9217952551\"), last_name (\"Schmitt\", \"Hauck\", \"Hamill\") | dogs : date_arrived (\"2017-12-22 05:02:02\", \"2017-04-20 00:58:55\", \"2017-04-15 09:25:31\"), abandoned_yn (\"1\", \"0\"), weight (\"9.8\", \"2.18\", \"6.92\"), gender (\"1\", \"0\"), date_of_birth (\"2012-10-14 14:44:37\", \"2012-07-11 17:15:10\", \"2012-07-11 17:15:10\"), owner_id (7, 14, 11), date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 06:46:07\", \"2018-03-24 23:48:59\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-02-27 11:54:35\", \"2018-02-27 00:27:57\"), name (\"Jeffrey\", \"Troy\", \"Merritt\"), age (\"3\", \"3\", \"4\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (12, 1, 6), size_code (\"LGE\", \"MED\", \"SML\") | professionals : email_address (\"jeichmann@example.com\", \"cole.margarita@example.org\", \"jacynthe.mclaughlin@example.net\"), professional_id (11, 11, 5), zip_code (\"06646\", \"84515\", \"43129\"), home_phone (\"246-951-0080x76716\", \"891.475.2256\", \"346.594.3739\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\"), state (\"Wisconsin\", \"Utah\", \"Connecticut\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Christiansen\", \"Walter\", \"Watsica\"), cell_number (\"328.842.3792\", \"011.193.9081x3186\", \"1-258-285-4707x8020\"), first_name (\"Ruben\", \"Taryn\", \"Olaf\"), city (\"Raynorfort\", \"West Heidi\", \"Kirastad\") | treatments : professional_id (5, 6, 9), treatment_id (14, 13, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-01 04:14:46\", \"2018-03-01 04:14:46\"), price_of_treatment (147, 668, 852), fee_of_treatment (147, 668, 852), dog_id (12, 7, 10)",
        "ambiguous_queries": [
            "select price_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select fee_of_treatment from treatments order by date_of_treatment desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"cost\": [{\"treatments\": [\"price_of_treatment\"]}, {\"treatments\": [\"fee_of_treatment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cost\" refers to the schema \"treatments\".\"price_of_treatment\"",
        "clear_ambiguity": "{\"cost\": {\"treatments\": [\"price_of_treatment\"]}}",
        "gold_query": "select price_of_treatment from treatments order by date_of_treatment desc limit 1"
    },
    {
        "index": 87,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "column",
        "db_file": "column/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_id , version_number , date_effective_from , date_effective_to , template_details , template_type_code  | documents : other_details , document_description , document_name , template_id , document_id  | paragraphs : segment_text , paragraph_id , other_details , para_content , document_id",
        "schema_with_content": "ref_template_types : template_type_code (\"BK\", \"BK\", \"PP\"), template_type_description (\"Book\", \"Advertisement\", \"CV\") | templates : template_id (15, 20, 15), version_number (1, 6, 5), date_effective_from (\"2005-02-20 00:31:34\", \"1975-05-20 22:51:19\", \"1986-11-14 12:20:18\"), date_effective_to (\"1993-03-24 14:30:23\", \"2006-02-06 23:52:04\", \"1995-09-19 22:27:48\"), template_details (\"\"), template_type_code (\"PP\", \"BK\", \"AD\") | documents : other_details (None), document_description (\"r\", \"f\", \"w\"), document_name (\"Learning French\", \"Welcome to NY\", \"Introduction of OS\"), template_id (8, 11, 11), document_id (801801, 1, 3540024) | paragraphs : segment_text (\"Brazil\", \"Japan\", \"Papua New Guinea\"), paragraph_id (946335436, 510442723, 280120913), other_details (None), para_content (\"Brazil\", \"Japan\", \"Papua New Guinea\"), document_id (16514113, 33930, 80)",
        "ambiguous_queries": [
            "select t1.para_content from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Customer reviews'",
            "select t1.segment_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Customer reviews'"
        ],
        "gold_ambiguity": {
            "match": "{\"paragraph texts\": [{\"paragraphs\": [\"para_content\"]}, {\"paragraphs\": [\"segment_text\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"paragraph texts\" refers to the schema \"paragraphs\".\"para_content\"",
        "clear_ambiguity": "{\"paragraph texts\": {\"paragraphs\": [\"para_content\"]}}",
        "gold_query": "select t1.para_content from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Customer reviews'"
    },
    {
        "index": 88,
        "db_id": "course_teach",
        "ambig_type": "column",
        "db_file": "column/course_teach/course_teach.sqlite",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "schema_without_content": "course : course_id , course , staring_date  | teacher : teacher_id , title , full_name , hometown , age  | course_arrange : course_id , grade , teacher_id",
        "schema_with_content": "course : course_id (1, 3, 5), course (\"Health\", \"French\", \"Language Arts\"), staring_date (\"10 May\", \"11 May\", \"9 May\") | teacher : teacher_id (5, 7, 1), title (\"John Deloor\", \"Kearsley Brown\", \"Anne Walker\"), full_name (\"John Deloor\", \"Kearsley Brown\", \"Anne Walker\"), hometown (\"Kearsley Urban District\", \"Horwich Urban District\", \"Blackrod Urban District\"), age (\"29\", \"26\", \"32\") | course_arrange : course_id (5, 10, 10), grade (5, 3, 7), teacher_id (3, 2, 6)",
        "ambiguous_queries": [
            "select t3.full_name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.full_name",
            "select t3.title, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.title"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"teacher\": [\"full_name\"]}, {\"teacher\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"teacher\".\"full_name\"",
        "clear_ambiguity": "{\"name\": {\"teacher\": [\"full_name\"]}}",
        "gold_query": "select t3.full_name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.full_name"
    },
    {
        "index": 89,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What's the name of the course with most number of enrollments?",
        "schema_without_content": "addresses : address_id , other_address_details , zip_postcode , line_2 , city , line_3 , country , line_1 , state_province_county  | courses : course_description , subject_name , other_details , course_id , class_name  | departments : department_id , other_details , department_name , department_description  | degree_programs : degree_program_id , other_details , department_id , degree_summary_description , degree_summary_name  | sections : section_description , section_name , section_id , other_details , course_id  | semesters : semester_description , semester_id , other_details , semester_name  | students : other_student_details , ssn , current_address_id , date_left , cell_mobile_number , email_address , middle_name , last_name , date_first_registered , first_name , student_id , permanent_address_id  | student_enrolment : other_details , semester_id , student_id , student_enrolment_id , degree_program_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : address_id (12, 13, 7), other_address_details (None), zip_postcode (\"400\", \"777\", \"943\"), line_2 (\"Apt. 388\", \"Apt. 388\", \"Suite 239\"), city (\"Michelleburgh\", \"South Palma\", \"South Palma\"), line_3 (None), country (\"Bermuda\", \"Kyrgyz Republic\", \"Norfolk Island\"), line_1 (\"186 Evan Motorway Apt. 409\", \"9283 Schulist Falls Apt. 037\", \"9283 Schulist Falls Apt. 037\"), state_province_county (\"Florida\", \"Arkansas\", \"Hawaii\") | courses : course_description (\"w\", \"p\", \"v\"), subject_name (\"os\", \"dl\", \"en\"), other_details (None), course_id (9, 10, 15), class_name (\"os\", \"dl\", \"en\") | departments : department_id (7, 13, 2), other_details (None), department_name (\"medical\", \"computer science\", \"statistics\"), department_description (\"autem\", \"nostrum\", \"non\") | degree_programs : degree_program_id (9, 10, 1), other_details (None), department_id (2, 2, 8), degree_summary_description (\"placeat\", \"aperiam\", \"placeat\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_description (\"doloremque\", \"ex\", \"nesciunt\"), section_name (\"l\", \"k\", \"p\"), section_id (1, 14, 7), other_details (None), course_id (9, 4, 6) | semesters : semester_description (\"q\", \"g\", \"l\"), semester_id (11, 12, 2), other_details (None), semester_name (\"fall 2010\", \"fall 2010\", \"fall 2018\") | students : other_student_details (\"non\", \"et\", \"laborum\"), ssn (\"965\", \"156\", \"965\"), current_address_id (12, 12, 7), date_left (\"2007-08-02 04:12:58\", \"2007-03-31 09:53:19\", \"1997-11-16 08:54:33\"), cell_mobile_number (\"1-009-710-5151\", \"677.401.9382\", \"436.613.7683\"), email_address (\"skassulke@example.net\", \"gracie29@example.com\", \"nbruen@example.org\"), middle_name (\"Anna\", \"Brooklyn\", \"Aisha\"), last_name (\"Rogahn\", \"Kemmer\", \"Balistreri\"), date_first_registered (\"1989-05-24 23:31:29\", \"1982-06-19 13:15:18\", \"2005-12-15 08:42:10\"), first_name (\"Jordy\", \"Helga\", \"Gregg\"), student_id (14, 6, 12), permanent_address_id (5, 8, 5) | student_enrolment : other_details (None), semester_id (9, 2, 15), student_id (1, 6, 5), student_enrolment_id (3, 12, 14), degree_program_id (2, 2, 10) | student_enrolment_courses : course_id (2, 14, 3), student_enrolment_id (14, 6, 9), student_course_id (8, 70882679, 28982908) | transcripts : other_details (None), transcript_date (\"1975-05-20 18:31:21\", \"1985-08-21 09:32:39\", \"1990-03-05 11:59:41\"), transcript_id (2, 15, 4) | transcript_contents : student_course_id (45105806, 70882679, 8), transcript_id (6, 2, 12)",
        "ambiguous_queries": [
            "select t1.class_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.class_name order by count(*) desc limit 1",
            "select t1.subject_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.subject_name order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"courses\": [\"class_name\"]}, {\"courses\": [\"subject_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"courses\".\"subject_name\"",
        "clear_ambiguity": "{\"name\": {\"courses\": [\"subject_name\"]}}",
        "gold_query": "select t1.subject_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.subject_name order by count(*) desc limit 1"
    },
    {
        "index": 90,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "schema_without_content": "city : district , countrycode , id , name , population  | sqlite_sequence : seq , name  | country : name , region , continent , code , gnpold , population , gnp , indepyear , code2 , life_span , localname , headofstate , capital , surfacearea , governmentform , life_length  | countrylanguage : countrycode , language , isofficial , percentage",
        "schema_with_content": "city : district (\"Kwangju\", \"Newmaa\", \"Mazandaran\"), countrycode (\"MLT\", \"ZWE\", \"TUR\"), id (3021, 1715, 4001), name (\"Netanya\", \"Tulsa\", \"Resende\"), population (105690, 201273, 148000) | sqlite_sequence : seq (4079), name (\"city\") | country : name (\"Kuwait\", \"Cyprus\", \"Mali\"), region (\"North America\", \"Western Africa\", \"Polynesia\"), continent (\"Europe\", \"South America\", \"Oceania\"), code (\"EGY\", \"VCT\", \"LIE\"), gnpold (3347.0, 1400.0, 2474.0), population (25000, 1277558000, 38653600), gnp (37966.0, 249704.0, 8571.0), indepyear (1956, 1978, 1806), code2 (\"GA\", \"LK\", \"JP\"), life_span (73.2, 75.5, 70.7), localname (\"SÃ£o TomÃ© e PrÃ­ncipe\", \"Slovenija\", \"SÃ©nÃ©gal/Sounougal\"), headofstate (\"Zayid bin Sultan al-Nahayan\", \"Benjamin William Mkapa\", \"Chandrika Kumaratunga\"), capital (3813, 2729, 2696), surfacearea (33851.0, 1958201.0, 505992.0), governmentform (\"Territory of Australia\", \"Federation\", \"Special Administrative Region of China\"), life_length (73.2, 75.5, 70.7) | countrylanguage : countrycode (\"SUR\", \"TZA\", \"UMI\"), language (\"Rakhine\", \"Mongolian\", \"Creole French\"), isofficial (\"T\", \"F\"), percentage (7.5, 89.9, 1.9)",
        "ambiguous_queries": [
            "select name, population, life_length from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select name, population, life_span from country where continent = 'Asia' order by surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"life expectancy\": [{\"country\": [\"life_length\"]}, {\"country\": [\"life_span\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"life expectancy\" refers to the schema \"country\".\"life_span\"",
        "clear_ambiguity": "{\"life expectancy\": {\"country\": [\"life_span\"]}}",
        "gold_query": "select name, population, life_span from country where continent = 'Asia' order by surfacearea desc limit 1"
    },
    {
        "index": 91,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "schema_without_content": "city : countrycode , population , id , district , name  | sqlite_sequence : name , seq  | country : gross_national_product , code2 , surfacearea , national_income , continent , name , region , code , gnpold , localname , headofstate , indepyear , capital , governmentform , lifeexpectancy , population  | countrylanguage : language , isofficial , percentage , countrycode",
        "schema_with_content": "city : countrycode (\"IND\", \"VNM\", \"BMU\"), population (94443, 120753, 123900), id (117, 1390, 3378), district (\"Home Island\", \"KÃ¤rnten\", \"Namangan\"), name (\"Ancona\", \"Dera Ghazi Khan\", \"Annaba\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gross_national_product (4127.0, 121914.0, 5333.0), code2 (\"MP\", \"DJ\", \"US\"), surfacearea (475442.0, 726.0, 9572900.0), national_income (4127.0, 121914.0, 5333.0), continent (\"Asia\", \"Asia\", \"Africa\"), name (\"Germany\", \"Estonia\", \"China\"), region (\"Micronesia\", \"Eastern Asia\", \"Central Africa\"), code (\"MYT\", \"TON\", \"VAT\"), gnpold (10241.0, 22834.0, 2201.0), localname (\"Al-Urdunn\", \"Sri Lanka/Ilankai\", \"Micronesia\"), headofstate (\"GnassingbÃ© EyadÃ©ma\", \"Ange-FÃ©lix PatassÃ©\", \"Blaise CompaorÃ©\"), indepyear (1902, 1919, 1981), capital (192, 538, 4068), governmentform (\"Autonomous Area\", \"Emirate Federation\", \"US Territory\"), lifeexpectancy (73.1, 50.1, 70.3), population (119000, 3101000, 78000) | countrylanguage : language (\"Araucan\", \"Chiu chau\", \"Hadareb\"), isofficial (\"T\", \"F\"), percentage (65.6, 60.4, 12.0), countrycode (\"KAZ\", \"HRV\", \"SWZ\")",
        "ambiguous_queries": [
            "select sum(population), max(gross_national_product) from country where continent = 'Asia'",
            "select sum(population), max(national_income) from country where continent = 'Asia'"
        ],
        "gold_ambiguity": {
            "match": "{\"GNP\": [{\"country\": [\"gross_national_product\"]}, {\"country\": [\"national_income\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"GNP\" refers to the schema \"country\".\"gross_national_product\"",
        "clear_ambiguity": "{\"GNP\": {\"country\": [\"gross_national_product\"]}}",
        "gold_query": "select sum(population), max(gross_national_product) from country where continent = 'Asia'"
    },
    {
        "index": 92,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "Which year had the most matches?",
        "schema_without_content": "players : birth_date , last_name , player_id , country_code , first_name , hand  | matches : best_of , tourney_date , match_num , draw_size , loser_rank , tourney_id , winner_entry , loser_name , score  7-5\", \"6-4 6-0\", loser_hand , winner_ioc , winner_id , winner_hand , loser_age , minutes , winner_rank_points , winner_name , loser_rank_points , round , match_year , surface , loser_ioc , loser_seed , loser_ht , loser_id , winner_rank , tourney_level , loser_entry , tourney_name , winner_age , winner_ht , event_year , winner_seed  | rankings : ranking , ranking_date , ranking_points , tours , player_id",
        "schema_with_content": "players : birth_date (19950816, 19810324, 19690704), last_name (\"Kandinata\", \"Singer\", \"Morita\"), player_id (206260, 215490, 213223), country_code (\"AHO\", \"UKR\", \"KOR\"), first_name (\"Altie\", \"Nam Yeon\", \"Palma\"), hand (\"R\", \"U\", \"L\") | matches : best_of (3), tourney_date (20170508, 20160801, 20170703), match_num (291, 299, 251), draw_size (32, 12, 32), loser_rank (33, 24, 16), tourney_id (\"2016-0808\", \"2017-1086\", \"2017-520\"), winner_entry (\"\"), loser_name (\"Victoria Azarenka\", \"Angelique Kerber\", \"Lauren Davis\"), score (\"6-3 7-5 \", \"6-2 6-7(4) 7-5\", \"6-4 6-0\"), loser_hand (\"R\", \"L\"), winner_ioc (\"GER\", \"JPN\", \"ESP\"), winner_id (201499, 201366, 201594), winner_hand (\"R\", \"L\"), loser_age (28.449007529099998, 21.0896646133, 33.5277207392), minutes (98, 162, 49), winner_rank_points (1145, 4600, 4600), winner_name (\"Misaki Doi\", \"Anastasia Pavlyuchenkova\", \"Julia Goerges\"), loser_rank_points (3010, 2070, 2238), round (\"R16\", \"QF\", \"F\"), match_year (2013, 2016, 2017), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ioc (\"SRB\", \"RUS\", \"AUS\"), loser_seed (29, 17, 11), loser_ht (164, 173, 170), loser_id (201517, 202428, 201320), winner_rank (37, 7, 22), tourney_level (\"W\", \"P\", \"G\"), loser_entry (\"\"), tourney_name (\"Istanbul\", \"Bucharest\", \"Linz\"), winner_age (32.1478439425, 27.282683093800003, 32.9719370294), winner_ht (177, 184, 184), event_year (2013, 2016, 2017), winner_seed (2, 13, 19) | rankings : ranking (931, 38, 872), ranking_date (20040510, 19951009, 20031013), ranking_points (1169, 836, 1696), tours (9, 7, 27), player_id (211682, 211065, 201528)",
        "ambiguous_queries": [
            "select match_year from matches group by match_year order by count(*) desc limit 1",
            "select event_year from matches group by event_year order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"year\": [{\"matches\": [\"match_year\"]}, {\"matches\": [\"event_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year\" refers to the schema \"matches\".\"event_year\"",
        "clear_ambiguity": "{\"year\": {\"matches\": [\"event_year\"]}}",
        "gold_query": "select event_year from matches group by event_year order by count(*) desc limit 1"
    },
    {
        "index": 93,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?",
        "schema_without_content": "continents : continent , contid  | countries : continent , countryid , countryname  | car_makers : maker , fullname , id , country  | model_list : model , maker , modelid  | car_names : model , brandid , make , manufacturerid  | cars_data : accelerate , weight , year , mpg , horsepower , edispl , id , cylinders",
        "schema_with_content": "continents : continent (\"europe\", \"africa\", \"australia\"), contid (3, 4, 4) | countries : continent (2, 2, 2), countryid (14, 5, 7), countryname (\"mexico\", \"mexico\", \"korea\") | car_makers : maker (\"opel\", \"subaru\", \"renault\"), fullname (\"Hyundai\", \"General Motors\", \"Volvo\"), id (6, 8, 22), country (\"8\", \"1\", \"5\") | model_list : model (\"mercedes-benz\", \"audi\", \"saab\"), maker (14, 18, 19), modelid (33, 34, 8) | car_names : model (\"triumph\", \"chevrolet\", \"cadillac\"), brandid (186, 128, 7), make (\"datsun 810 maxima\", \"mazda rx2 coupe\", \"audi 4000\"), manufacturerid (186, 128, 7) | cars_data : accelerate (15.2, 19.0, 15.1), weight (4154, 2694, 2164), year (1971, 1970, 1980), mpg (\"32.4\", \"34.4\", \"21.5\"), horsepower (\"165\", \"130\", \"140\"), edispl (340.0, 113.0, 96.0), id (277, 184, 398), cylinders (3, 8, 4)",
        "ambiguous_queries": [
            "select t2.manufacturerid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.manufacturerid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders <= 3",
            "select t2.brandid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.brandid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders <= 3"
        ],
        "gold_ambiguity": {
            "match": "{\"make ids\": [{\"car_names\": [\"manufacturerid\"]}, {\"car_names\": [\"brandid\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"make ids\" refers to the schema \"car_names\".\"manufacturerid\"",
        "clear_ambiguity": "{\"make ids\": {\"car_names\": [\"manufacturerid\"]}}",
        "gold_query": "select t2.manufacturerid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.manufacturerid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders <= 3"
    },
    {
        "index": 94,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the average transcript date?",
        "schema_without_content": "addresses : country , line_2 , zip_postcode , other_address_details , city , line_3 , line_1 , address_id , state_province_county  | courses : other_details , course_description , course_id , course_name  | departments : department_id , department_name , department_description , other_details  | degree_programs : degree_summary_name , degree_summary_description , department_id , degree_program_id , other_details  | sections : section_name , other_details , section_description , section_id , course_id  | semesters : other_details , semester_id , semester_name , semester_description  | students : permanent_address_id , date_left , student_id , other_student_details , email_address , current_address_id , last_name , cell_mobile_number 919-3594x3661\", first_name , middle_name , ssn , date_first_registered  | student_enrolment : semester_id , degree_program_id , student_enrolment_id , other_details , student_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : record_date , document_date , other_details , transcript_id  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : country (\"Burundi\", \"Bermuda\", \"Burundi\"), line_2 (\"Apt. 689\", \"Suite 703\", \"Apt. 406\"), zip_postcode (\"541\", \"669\", \"943\"), other_address_details (None), city (\"Goodwinhaven\", \"Port Elvisfurt\", \"Michelleburgh\"), line_3 (None), line_1 (\"7081 Eda Center\", \"3999 Aufderhar Ways Suite 593\", \"74046 Metz Walk Apt. 113\"), address_id (2, 13, 3), state_province_county (\"Florida\", \"Arkansas\", \"Kansas\") | courses : other_details (None), course_description (\"l\", \"p\", \"p\"), course_id (12, 11, 11), course_name (\"cal\", \"dl\", \"en\") | departments : department_id (8, 4, 1), department_name (\"biology\", \"law\", \"economics\"), department_description (\"consequatur\", \"autem\", \"doloribus\"), other_details (None) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"unde\", \"unde\", \"esse\"), department_id (4, 15, 7), degree_program_id (5, 7, 7), other_details (None) | sections : section_name (\"e\", \"f\", \"y\"), other_details (None), section_description (\"non\", \"qui\", \"provident\"), section_id (14, 13, 6), course_id (7, 12, 8) | semesters : other_details (None), semester_id (5, 3, 15), semester_name (\"spring 2017\", \"spring 2015\", \"winter 2010\"), semester_description (\"t\", \"q\", \"c\") | students : permanent_address_id (14, 15, 3), date_left (\"1975-10-09 00:49:27\", \"1999-08-24 00:07:10\", \"2016-04-09 12:27:04\"), student_id (11, 10, 10), other_student_details (\"voluptatem\", \"dolorum\", \"autem\"), email_address (\"lhartmann@example.org\", \"jhuel@example.com\", \"gracie29@example.com\"), current_address_id (14, 10, 15), last_name (\"Gleichner\", \"Osinski\", \"Carroll\"), cell_mobile_number (\"677.401.9382\", \"1-009-710-5151\", \"(605)919-3594x3661\"), first_name (\"Jett\", \"Jarvis\", \"Warren\"), middle_name (\"Violet\", \"Golda\", \"Lorenz\"), ssn (\"68095\", \"668\", \"668\"), date_first_registered (\"1982-02-14 08:46:35\", \"1971-02-05 07:28:23\", \"2018-03-13 09:56:22\") | student_enrolment : semester_id (4, 6, 2), degree_program_id (8, 5, 10), student_enrolment_id (7, 7, 7), other_details (None), student_id (6, 7, 7) | student_enrolment_courses : course_id (4, 2, 10), student_course_id (83814225, 96, 83814225), student_enrolment_id (13, 13, 6) | transcripts : record_date (\"1984-01-18 23:07:07\", \"1975-05-06 12:04:47\", \"1998-11-22 12:18:29\"), document_date (\"1984-01-18 23:07:07\", \"1975-05-06 12:04:47\", \"1998-11-22 12:18:29\"), other_details (None), transcript_id (9, 10, 15) | transcript_contents : student_course_id (96, 28982908, 45105806), transcript_id (8, 8, 8)",
        "ambiguous_queries": [
            "select avg(record_date) from transcripts",
            "select avg(document_date) from transcripts"
        ],
        "gold_ambiguity": {
            "match": "{\"transcript date\": [{\"transcripts\": [\"record_date\"]}, {\"transcripts\": [\"document_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"transcript date\" refers to the schema \"transcripts\".\"record_date\"",
        "clear_ambiguity": "{\"transcript date\": {\"transcripts\": [\"record_date\"]}}",
        "gold_query": "select avg(record_date) from transcripts"
    },
    {
        "index": 95,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "schema_without_content": "highschooler : full_name , id , grade , given_name  | friend : friend_id , student_id  | likes : liked_id , student_id",
        "schema_with_content": "highschooler : full_name (\"Haley\", \"Jordan\", \"Alexis\"), id (1510, 1911, 1782), grade (12, 11, 11), given_name (\"Haley\", \"Jordan\", \"Alexis\") | friend : friend_id (1316, 1641, 1689), student_id (1101, 1911, 1316) | likes : liked_id (1247, 1247, 1689), student_id (1025, 1782, 1247)",
        "ambiguous_queries": [
            "select t2.full_name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
            "select t2.given_name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"highschooler\": [\"full_name\"]}, {\"highschooler\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"highschooler\".\"full_name\"",
        "clear_ambiguity": "{\"name\": {\"highschooler\": [\"full_name\"]}}",
        "gold_query": "select t2.full_name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1"
    },
    {
        "index": 96,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "schema_without_content": "conductor : age , year_of_work , name , nationality , conductor_id  | orchestra : record_company , conductor_id , established_year , inception_year , orchestra , major_record_format , orchestra_id  | performance : orchestra_id , type , official_ratings_ , weekly_rank , performance_id , share , date  | show : if_first_show , show_id , result , attendance , performance_id",
        "schema_with_content": "conductor : age (41, 42, 63), year_of_work (11, 6, 12), name (\"Colin Davis\", \"Igor Stravinsky\", \"Igor Stravinsky\"), nationality (\"USA\", \"UK\", \"France\"), conductor_id (12, 5, 4) | orchestra : record_company (\"Decca Records\", \"RCA\", \"RCA\"), conductor_id (10, 8, 9), established_year (2007.0, 2006.0, 2006.0), inception_year (2007.0, 2006.0, 2006.0), orchestra (\"Orchestre de Paris\", \"Chicago Symphony Orchestra\", \"Philharmonia Orchestra\"), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra_id (2, 3, 5) | performance : orchestra_id (10, 4, 2), type (\"Auditions 4\", \"Live final results\", \"Live final results\"), official_ratings_(millions) (5.2, 8.38, 5.2), weekly_rank (\"TBC\", \"9\", \"TBC\"), performance_id (5, 7, 9), share (\"43.7%\", \"40.9%\", \"29.4%\"), date (\"13 June\", \"14 June\", \"15 June\") | show : if_first_show (\"Glebe Park\", \"Glebe Park\", \"Hampden Park\"), show_id (5, 1, 2), result (\"T\", \"F\"), attendance (1925.0, 1026.0, 555.0), performance_id (4, 2, 4)",
        "ambiguous_queries": [
            "select inception_year from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t2.orchestra_id having count(*) > 1",
            "select established_year from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t2.orchestra_id having count(*) > 1"
        ],
        "gold_ambiguity": {
            "match": "{\"years\": [{\"orchestra\": [\"inception_year\"]}, {\"orchestra\": [\"established_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"years\" refers to the schema \"orchestra\".\"inception_year\"",
        "clear_ambiguity": "{\"years\": {\"orchestra\": [\"inception_year\"]}}",
        "gold_query": "select inception_year from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t2.orchestra_id having count(*) > 1"
    },
    {
        "index": 97,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Which shop has the most employees? Give me the shop name.",
        "schema_without_content": "employee : name , employee_id , age , city  | shop : district , number_products , business_name , shop_id , location , manager_name , title  | hiring : employee_id , is_full_time , start_from , shop_id  | evaluation : bonus , employee_id , year_awarded",
        "schema_with_content": "employee : name (\"Steve Borthwick\", \"Tim Payne\", \"George Chuter\"), employee_id (4, 8, 6), age (36, 36, 43), city (\"Leicester\", \"Bath\", \"Sale\") | shop : district (\"Veritas Stadion\", \"Magnum Areena\", \"Magnum Areena\"), number_products (3516, 10000, 4780), business_name (\"FC Honka\", \"FC Lahti\", \"FC Inter\"), shop_id (5, 5, 6), location (\"Helsinki\", \"Mariehamn\", \"Lahti\"), manager_name (\"Olli Huttunen\", \"Kai NyyssÃ¶nen\", \"Antti Muurinen\"), title (\"FC Honka\", \"FC Lahti\", \"FC Inter\") | hiring : employee_id (7, 7, 7), is_full_time (\"T\", \"F\"), start_from (\"2011\", \"2003\", \"2012\"), shop_id (5, 4, 5) | evaluation : bonus (3200.0, 2900.0, 4000.0), employee_id (\"7\", \"2\", \"2\"), year_awarded (\"2017\", \"2016\", \"2011\")",
        "ambiguous_queries": [
            "select t2.title from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
            "select t2.business_name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"shop\": [{}, {}]}",
            "query": "{}"
        },
        "clarification_context": "\"shop\" refers to the schema \"shop name\".\"business_name\"",
        "clear_ambiguity": "{\"shop\": {\"shop name\": [\"business_name\"]}}",
        "gold_query": "select t2.business_name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1"
    },
    {
        "index": 98,
        "db_id": "museum_visit",
        "ambig_type": "column",
        "db_file": "column/museum_visit/museum_visit.sqlite",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "schema_without_content": "museum : open_year , museum_id , num_of_staff , name  | visitor : id , full_name , visitor_name , level_of_membership , age  | visit : num_of_ticket , museum_id , visitor_id , total_spent",
        "schema_with_content": "museum : open_year (\"2009\", \"2009\", \"2010\"), museum_id (6, 4, 1), num_of_staff (62, 16, 12), name (\"Jefferson Development Museum\", \"ZirMed Gateway Museum\", \"Central City District Residential Museum\") | visitor : id (1, 4, 2), full_name (\"Fernando Gago\", \"Arjen Robben\", \"RaÃºl Brown\"), visitor_name (\"Fernando Gago\", \"Arjen Robben\", \"RaÃºl Brown\"), level_of_membership (6, 8, 2), age (35, 35, 56) | visit : num_of_ticket (10, 3, 10), museum_id (1, 2, 4), visitor_id (\"5\", \"3\", \"6\"), total_spent (209.98, 209.98, 320.14)",
        "ambiguous_queries": [
            "select t2.visitor_id, t1.visitor_name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1",
            "select t2.visitor_id, t1.full_name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"visitor\": [\"visitor_name\"]}, {\"visitor\": [\"full_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"visitor\".\"visitor_name\"",
        "clear_ambiguity": "{\"name\": {\"visitor\": [\"visitor_name\"]}}",
        "gold_query": "select t2.visitor_id, t1.visitor_name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1"
    },
    {
        "index": 99,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "How many singers are from each country?",
        "schema_without_content": "stadium : lowest , average , highest , capacity , location , name , stadium_id  | singer : name , nationality , song_release_year , song_name , citizenship , singer_id , is_male , age  | concert : stadium_id , year , concert_id , theme , concert_name  | singer_in_concert : singer_id , concert_id",
        "schema_with_content": "stadium : lowest (1057, 1057, 1294), average (1477, 552, 1477), highest (921, 921, 1125), capacity (10104, 10104, 3960), location (\"Stirling Albion\", \"Raith Rovers\", \"Ayr United\"), name (\"Gayfield Park\", \"Bayview Stadium\", \"Glebe Park\"), stadium_id (5, 2, 9) | singer : name (\"Timbaland\", \"Timbaland\", \"Justin Brown\"), nationality (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2014\", \"1992\", \"2014\"), song_name (\"You\", \"Gentleman\", \"You\"), citizenship (\"Netherlands\", \"United States\", \"France\"), singer_id (5, 3, 1), is_male (\"F\", \"T\"), age (25, 25, 41) | concert : stadium_id (\"2\", \"1\", \"9\"), year (\"2014\", \"2015\"), concert_id (3, 3, 5), theme (\"Wide Awake\", \"Party All Night\", \"Free choice 2\"), concert_name (\"Super bootcamp\", \"Week 2\", \"Week 2\") | singer_in_concert : singer_id (\"2\", \"3\", \"3\"), concert_id (2, 4, 1)",
        "ambiguous_queries": [
            "select nationality, count(*) from singer group by nationality",
            "select citizenship, count(*) from singer group by citizenship"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{\"singer\": [\"nationality\"]}, {\"singer\": [\"citizenship\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"singer\".\"citizenship\"",
        "clear_ambiguity": "{\"country\": {\"singer\": [\"citizenship\"]}}",
        "gold_query": "select citizenship, count(*) from singer group by citizenship"
    },
    {
        "index": 100,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the average edispl of the cars of model volvo?",
        "schema_without_content": "continents : contid , continent  | countries : continent , countryname , countryid  | car_makers : country , fullname , maker , id  | model_list : model , maker , modelid  | car_names : makeid , make \", \"pontiac j2000 se hatchback\", \"honda prelude\", model  | cars_data : year , id , accelerate , mpg , cylinders , engine_size , horsepower , engine_displacement , weight",
        "schema_with_content": "continents : contid (5, 4, 1), continent (\"america\", \"asia\", \"america\") | countries : continent (3, 5, 5), countryname (\"germany\", \"russia\", \"sweden\"), countryid (14, 6, 3) | car_makers : country (\"1\", \"3\", \"7\"), fullname (\"Honda\", \"Nissan Motors\", \"General Motors\"), maker (\"citroen\", \"saab\", \"amc\"), id (21, 4, 18) | model_list : model (\"amc\", \"opel\", \"ford\"), maker (15, 4, 18), modelid (29, 32, 35) | car_names : makeid (355, 329, 189), make (\"amc hornet sportabout (sw)\", \"pontiac j2000 se hatchback\", \"honda prelude\"), model (\"volkswagen\", \"cadillac\", \"mercedes\") | cars_data : year (1971, 1971, 1978), id (325, 107, 284), accelerate (23.5, 17.1, 17.6), mpg (\"20.8\", \"30.7\", \"26.6\"), cylinders (3, 3, 3), engine_size (72.0, 113.0, 429.0), horsepower (\"86\", \"null\", \"130\"), engine_displacement (72.0, 113.0, 429.0), weight (2910, 1980, 1875)",
        "ambiguous_queries": [
            "select avg(t2.engine_displacement) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'",
            "select avg(t2.engine_size) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'"
        ],
        "gold_ambiguity": {
            "match": "{\"edispl\": [{\"cars_data\": [\"engine_displacement\"]}, {\"cars_data\": [\"engine_size\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"edispl\" refers to the schema \"cars_data\".\"engine_size\"",
        "clear_ambiguity": "{\"edispl\": {\"cars_data\": [\"engine_size\"]}}",
        "gold_query": "select avg(t2.engine_size) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'"
    },
    {
        "index": 101,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the average horsepower of the cars before 1980?",
        "schema_without_content": "continents : continent , contid  | countries : countryname , continent , countryid  | car_makers : maker , fullname , country , id  | model_list : model , modelid , maker  | car_names : makeid , model , make  | cars_data : power , edispl , year , cylinders , id , torque , mpg , weight , accelerate",
        "schema_with_content": "continents : continent (\"asia\", \"america\", \"europe\"), contid (2, 5, 5) | countries : countryname (\"uk\", \"germany\", \"new zealand\"), continent (5, 4, 3), countryid (4, 4, 14) | car_makers : maker (\"fiat\", \"gm\", \"honda\"), fullname (\"Chrysler\", \"Kia Motors\", \"Kia Motors\"), country (\"7\", \"1\", \"5\"), id (3, 8, 1) | model_list : model (\"mercedes-benz\", \"nissan\", \"datsun\"), modelid (34, 23, 1), maker (22, 21, 21) | car_names : makeid (158, 228, 312), model (\"oldsmobile\", \"bmw\", \"toyota\"), make (\"plymouth fury\", \"chrysler newport royal\", \"dodge charger 2.2\") | cars_data : power (\"132\", \"77\", \"135\"), edispl (119.0, 144.0, 78.0), year (1973, 1981, 1974), cylinders (8, 5, 4), id (382, 284, 131), torque (\"132\", \"77\", \"135\"), mpg (\"24.2\", \"34.3\", \"19.9\"), weight (2035, 3820, 2865), accelerate (11.3, 16.6, 14.8)",
        "ambiguous_queries": [
            "select avg(power) from cars_data where year < 1980",
            "select avg(torque) from cars_data where year < 1980"
        ],
        "gold_ambiguity": {
            "match": "{\"horsepower\": [{\"cars_data\": [\"power\"]}, {\"cars_data\": [\"torque\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"horsepower\" refers to the schema \"cars_data\".\"torque\"",
        "clear_ambiguity": "{\"horsepower\": {\"cars_data\": [\"torque\"]}}",
        "gold_query": "select avg(torque) from cars_data where year < 1980"
    },
    {
        "index": 102,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : zip_code , owner_id , city , state , first_name , home_phone , cell_number 4323592985\", \"478.978.0729\", email_address , last_name , street  | dogs : name , size_code , weight , lifespan , date_departed , date_arrived , owner_id , years_old , abandoned_yn , gender , dog_id , date_of_birth , breed_code , date_adopted  | professionals : zip_code , city , email_address , professional_id , role_code , street , state , first_name , home_phone 304-4499x59146\", cell_number 908-7311x065\", last_name  | treatments : dog_id , date_of_treatment , treatment_type_code , cost_of_treatment , professional_id , treatment_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : zip_code (\"35747\", \"92406\", \"86010\"), owner_id (8, 6, 4), city (\"Barrettburgh\", \"Lake Valentin\", \"Lake Valentin\"), state (\"Pennsylvania\", \"Arizona\", \"Maryland\"), first_name (\"Adelle\", \"Jaclyn\", \"Heather\"), home_phone (\"916.976.9480x13851\", \"01802479758\", \"130-796-4589x05454\"), cell_number (\"121.381.3316x6535\", \"+00(2)4323592985\", \"478.978.0729\"), email_address (\"margaretta.runte@example.net\", \"pearlie18@example.com\", \"wpfeffer@example.net\"), last_name (\"Hamill\", \"Price\", \"Prohaska\"), street (\"1858 Jan Park\", \"89011 Kertzmann Spring Suite 642\", \"89011 Kertzmann Spring Suite 642\") | dogs : name (\"Mavis\", \"Betty\", \"Jesus\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"8.16\", \"3.52\", \"1.39\"), lifespan (\"8\", \"5\", \"4\"), date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 06:46:07\", \"2018-03-24 23:48:59\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-10-16 20:06:21\", \"2017-12-22 05:02:02\"), owner_id (3, 5, 14), years_old (\"8\", \"5\", \"4\"), abandoned_yn (\"1\", \"0\"), gender (\"1\", \"0\"), dog_id (15, 2, 10), date_of_birth (\"2012-05-31 08:01:36\", \"2012-01-27 05:11:53\", \"2012-10-14 14:44:37\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-02-25 23:45:30\", \"2018-03-23 16:02:04\") | professionals : zip_code (\"06646\", \"67980\", \"52476\"), city (\"Raynorfort\", \"Raynorfort\", \"Jaceton\"), email_address (\"jerrod.bahringer@example.org\", \"marquardt.furman@example.org\", \"jerrod.bahringer@example.org\"), professional_id (15, 11, 7), role_code (\"Employee\", \"Veterenarian\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"72532 Hane Course\nLake Berylland, ND 95283\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), state (\"Montana\", \"Hawaii\", \"SouthCarolina\"), first_name (\"Taryn\", \"Danny\", \"Brady\"), home_phone (\"325-155-0801x7005\", \"312.216.3352\", \"(920)304-4499x59146\"), cell_number (\"328.842.3792\", \"880-659-7577x736\", \"(369)908-7311x065\"), last_name (\"Walter\", \"Hayes\", \"Christiansen\") | treatments : dog_id (14, 13, 13), date_of_treatment (\"2018-03-24 22:25:58\", \"2018-03-04 20:33:43\", \"2018-03-15 19:10:02\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (656, 852, 349), professional_id (5, 7, 10), treatment_id (11, 6, 13)",
        "ambiguous_queries": [
            "select name, years_old, weight from dogs where abandoned_yn = 1",
            "select name, lifespan, weight from dogs where abandoned_yn = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"dogs\": [\"years_old\"]}, {\"dogs\": [\"lifespan\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"dogs\".\"years_old\"",
        "clear_ambiguity": "{\"age\": {\"dogs\": [\"years_old\"]}}",
        "gold_query": "select name, years_old, weight from dogs where abandoned_yn = 1"
    },
    {
        "index": 103,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "schema_without_content": "addresses : line_3 , first_line , primary_address , country , address_id , line_2 , other_address_details , city , zip_postcode , state_province_county  | courses : course_id , course_name , course_description , other_details  | departments : department_description , department_id , department_name , other_details  | degree_programs : degree_summary_name , department_id , degree_program_id , degree_summary_description , other_details  | sections : section_description , section_id , course_id , other_details , section_name  | semesters : semester_name , other_details , semester_description , semester_id  | students : date_first_registered , other_student_details , permanent_address_id , first_name , cell_mobile_number 445-0399x85208\", \"153-1469x1733\", \"365-8405\", current_address_id , email_address , date_left , last_name , middle_name , student_id , ssn  | student_enrolment : student_enrolment_id , degree_program_id , student_id , semester_id , other_details  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : transcript_id , other_details , transcript_date  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : line_3 (None), first_line (\"0144 Lamar Plaza Apt. 346\", \"3999 Aufderhar Ways Suite 593\", \"67942 Carlotta Ferry Apt. 686\"), primary_address (\"0144 Lamar Plaza Apt. 346\", \"3999 Aufderhar Ways Suite 593\", \"67942 Carlotta Ferry Apt. 686\"), country (\"Croatia\", \"Croatia\", \"Burundi\"), address_id (12, 3, 2), line_2 (\"Apt. 335\", \"Apt. 370\", \"Suite 830\"), other_address_details (None), city (\"Michelleburgh\", \"Port Elvisfurt\", \"New Clemensburgh\"), zip_postcode (\"777\", \"902\", \"847\"), state_province_county (\"WestVirginia\", \"SouthDakota\", \"SouthDakota\") | courses : course_id (5, 1, 9), course_name (\"cal\", \"en\", \"cal\"), course_description (\"v\", \"b\", \"w\"), other_details (None) | departments : department_description (\"in\", \"consequatur\", \"doloribus\"), department_id (5, 5, 10), department_name (\"law\", \"engineer\", \"history\"), other_details (None) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (3, 12, 4), degree_program_id (2, 5, 7), degree_summary_description (\"architecto\", \"voluptas\", \"qui\"), other_details (None) | sections : section_description (\"doloremque\", \"doloremque\", \"facilis\"), section_id (11, 7, 1), course_id (1, 2, 7), other_details (None), section_name (\"p\", \"l\", \"k\") | semesters : semester_name (\"spring 2014\", \"spring 2014\", \"summer 2010\"), other_details (None), semester_description (\"g\", \"l\", \"y\"), semester_id (14, 8, 12) | students : date_first_registered (\"2005-12-15 08:42:10\", \"2014-03-28 05:48:23\", \"1997-03-20 16:47:25\"), other_student_details (\"atque\", \"non\", \"laborum\"), permanent_address_id (5, 3, 5), first_name (\"Gregg\", \"Gregg\", \"Deon\"), cell_mobile_number (\"(213)445-0399x85208\", \"(982)153-1469x1733\", \"(507)365-8405\"), current_address_id (14, 10, 14), email_address (\"skassulke@example.net\", \"qo'kon@example.com\", \"gracie29@example.com\"), date_left (\"2013-10-05 17:41:28\", \"2007-03-31 09:53:19\", \"2007-11-28 12:50:21\"), last_name (\"Balistreri\", \"Osinski\", \"Kemmer\"), middle_name (\"Aaliyah\", \"Judd\", \"Cleve\"), student_id (10, 13, 3), ssn (\"668\", \"\", \"34458427\") | student_enrolment : student_enrolment_id (2, 7, 10), degree_program_id (9, 4, 12), student_id (1, 9, 9), semester_id (12, 2, 6), other_details (None) | student_enrolment_courses : student_course_id (0, 8, 28982908), course_id (6, 10, 11), student_enrolment_id (8, 5, 2) | transcripts : transcript_id (13, 9, 4), other_details (None), transcript_date (\"1985-08-21 09:32:39\", \"1990-03-05 11:59:41\", \"2002-09-24 06:11:49\") | transcript_contents : student_course_id (0, 7, 2), transcript_id (8, 15, 5)",
        "ambiguous_queries": [
            "select t1.address_id, t1.first_line, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
            "select t1.address_id, t1.primary_address, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"lines\": [{\"addresses\": [\"first_line\"]}, {\"addresses\": [\"primary_address\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"lines\" refers to the schema \"addresses\".\"first_line\"",
        "clear_ambiguity": "{\"lines\": {\"addresses\": [\"first_line\"]}}",
        "gold_query": "select t1.address_id, t1.first_line, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1"
    },
    {
        "index": 104,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "schema_without_content": "highschooler : id , given_name , full_name , grade  | friend : student_id , friend_id  | likes : liked_id , student_id",
        "schema_with_content": "highschooler : id (1025, 1101, 1641), given_name (\"John\", \"Cassandra\", \"Austin\"), full_name (\"John\", \"Cassandra\", \"Austin\"), grade (12, 10, 9) | friend : student_id (1316, 1101, 1510), friend_id (1661, 1911, 1025) | likes : liked_id (1709, 1689, 1501), student_id (1501, 1934, 1709)",
        "ambiguous_queries": [
            "select t2.full_name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
            "select t2.given_name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"highschooler\": [\"full_name\"]}, {\"highschooler\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"highschooler\".\"full_name\"",
        "clear_ambiguity": "{\"names\": {\"highschooler\": [\"full_name\"]}}",
        "gold_query": "select t2.full_name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id"
    },
    {
        "index": 105,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "schema_without_content": "conductor : full_name , year_of_work , age , title , conductor_id , nationality  | orchestra : record_company , year_of_founded , major_record_format , conductor_id , orchestra_id , orchestra  | performance : date , weekly_rank , share , orchestra_id , official_ratings_ , performance_id , type  | show : attendance , result , show_id , if_first_show , performance_id",
        "schema_with_content": "conductor : full_name (\"Seiji Ozawa\", \"Seiji Ozawa\", \"Paul Jorgensen\"), year_of_work (20, 6, 6), age (42, 43, 42), title (\"Seiji Ozawa\", \"Seiji Ozawa\", \"Paul Jorgensen\"), conductor_id (11, 12, 10), nationality (\"USA\", \"UK\", \"France\") | orchestra : record_company (\"Delos Records\", \"EMI\", \"Deutsche Grammophon\"), year_of_founded (2003.0, 2007.0, 2003.0), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), conductor_id (7, 8, 8), orchestra_id (8, 9, 11), orchestra (\"Philharmonia Orchestra\", \"San Francisco Symphony Orchestra\", \"Kirov Orchestra\") | performance : date (\"11 June\", \"2007\", \"10 June\"), weekly_rank (\"1\", \"7\", \"13\"), share (\"40.9%\", \"34.0%\", \"40.9%\"), orchestra_id (10, 9, 7), official_ratings_(millions) (11.45, 5.2, 8.36), performance_id (6, 7, 7), type (\"Auditions 1\", \"Live final results\", \"Semi-final 3\") | show : attendance (2431.0, 1026.0, 1925.0), result (\"T\", \"F\"), show_id (4, 3, 2), if_first_show (\"Fir Park\", \"St. Mirren Park\", \"Hampden Park\"), performance_id (3, 5, 4)",
        "ambiguous_queries": [
            "select full_name from conductor where nationality != 'USA'",
            "select title from conductor where nationality != 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"conductor\": [\"full_name\"]}, {\"conductor\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"conductor\".\"title\"",
        "clear_ambiguity": "{\"names\": {\"conductor\": [\"title\"]}}",
        "gold_query": "select title from conductor where nationality != 'USA'"
    },
    {
        "index": 106,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the last transcript release date?",
        "schema_without_content": "addresses : state_province_county , line_3 , other_address_details , zip_postcode , line_1 , city , address_id , line_2 , country  | courses : other_details , course_description , course_name , course_id  | departments : department_description , department_id , other_details , department_name  | degree_programs : degree_program_id , degree_summary_description , degree_summary_name , other_details , department_id  | sections : course_id , other_details , section_name , section_id , section_description  | semesters : other_details , semester_id , semester_description , semester_name  | students : date_left , cell_mobile_number 445-0399x85208\", \"436.613.7683\", \"246-7921\", current_address_id , first_name , last_name , other_student_details , student_id , ssn , permanent_address_id , date_first_registered , middle_name , email_address  | student_enrolment : student_id , other_details , student_enrolment_id , semester_id , degree_program_id  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : document_date , transcript_id , other_details , record_date  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : state_province_county (\"WestVirginia\", \"Kansas\", \"Arkansas\"), line_3 (None), other_address_details (None), zip_postcode (\"777\", \"669\", \"068\"), line_1 (\"7081 Eda Center\", \"202 Hessel Views Apt. 468\", \"9283 Schulist Falls Apt. 037\"), city (\"Port Evanston\", \"Port Oceane\", \"Lake Careyberg\"), address_id (4, 15, 3), line_2 (\"Apt. 335\", \"Apt. 406\", \"Suite 703\"), country (\"Gabon\", \"Gibraltar\", \"Burundi\") | courses : other_details (None), course_description (\"q\", \"w\", \"d\"), course_name (\"ai\", \"db\", \"oop\"), course_id (9, 9, 6) | departments : department_description (\"ea\", \"nihil\", \"in\"), department_id (4, 10, 11), other_details (None), department_name (\"computer science\", \"engineer\", \"geography\") | degree_programs : degree_program_id (3, 11, 11), degree_summary_description (\"cumque\", \"architecto\", \"qui\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), department_id (11, 11, 12) | sections : course_id (6, 8, 4), other_details (None), section_name (\"a\", \"f\", \"u\"), section_id (10, 7, 9), section_description (\"voluptas\", \"quis\", \"ad\") | semesters : other_details (None), semester_id (2, 12, 14), semester_description (\"t\", \"x\", \"w\"), semester_name (\"spring 2014\", \"fall 2018\", \"spring 2015\") | students : date_left (\"2007-03-31 09:53:19\", \"2007-11-28 12:50:21\", \"1999-08-24 00:07:10\"), cell_mobile_number (\"(213)445-0399x85208\", \"436.613.7683\", \"(462)246-7921\"), current_address_id (7, 1, 15), first_name (\"Milton\", \"Timmothy\", \"Jett\"), last_name (\"Mohr\", \"Ankunding\", \"Carroll\"), other_student_details (\"dolorum\", \"rerum\", \"omnis\"), student_id (2, 13, 8), ssn (\"141072406\", \"304246\", \"304246\"), permanent_address_id (9, 15, 4), date_first_registered (\"1986-02-24 21:12:23\", \"2004-12-24 12:36:46\", \"1982-06-19 13:15:18\"), middle_name (\"Mossie\", \"Osborne\", \"Alberta\"), email_address (\"qo'kon@example.com\", \"skassulke@example.net\", \"gracie29@example.com\") | student_enrolment : student_id (6, 9, 14), other_details (None), student_enrolment_id (15, 12, 2), semester_id (9, 12, 4), degree_program_id (3, 2, 9) | student_enrolment_courses : student_course_id (83814225, 8, 1), course_id (13, 12, 4), student_enrolment_id (6, 13, 4) | transcripts : document_date (\"2002-09-24 06:11:49\", \"1984-12-19 00:37:21\", \"2013-06-30 13:01:40\"), transcript_id (7, 14, 12), other_details (None), record_date (\"2002-09-24 06:11:49\", \"1984-12-19 00:37:21\", \"2013-06-30 13:01:40\") | transcript_contents : student_course_id (7, 70882679, 45105806), transcript_id (4, 15, 6)",
        "ambiguous_queries": [
            "select record_date from transcripts order by record_date desc limit 1",
            "select document_date from transcripts order by document_date desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"transcript\": [{\"transcripts\": [\"record_date\"]}, {\"transcripts\": [\"document_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"transcript\" refers to the schema \"transcripts\".\"record_date\"",
        "clear_ambiguity": "{\"transcript\": {\"transcripts\": [\"record_date\"]}}",
        "gold_query": "select record_date from transcripts order by record_date desc limit 1"
    },
    {
        "index": 107,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Which cities are in European countries where English is not the official language?",
        "schema_without_content": "city : city_name , id , title , countrycode , district , population  | sqlite_sequence : name , seq  | country : continent , gnp , code2 , code , region , headofstate , population , governmentform , indepyear , gnpold , name , capital , localname , surfacearea , lifeexpectancy  | countrylanguage : language , countrycode , isofficial , percentage",
        "schema_with_content": "city : city_name (\"Saratov\", \"Sanandaj\", \"Qiqihar\"), id (2124, 2101, 1434), title (\"Saratov\", \"Sanandaj\", \"Qiqihar\"), countrycode (\"LKA\", \"LVA\", \"MYT\"), district (\"Pusan\", \"Novosibirsk\", \"Rakhine\"), population (188200, 133642, 587211) | sqlite_sequence : name (\"city\"), seq (4079) | country : continent (\"Europe\", \"Asia\", \"Antarctica\"), gnp (6064.0, 1990.0, 5749.0), code2 (\"NA\", \"RE\", \"GY\"), code (\"NER\", \"CAN\", \"COL\"), region (\"Northern Africa\", \"Central America\", \"Nordic Countries\"), headofstate (\"Jabir al-Ahmad al-Jabir al-Sabah\", \"Ahmed Tejan Kabbah\", \"Bhumibol Adulyadej\"), population (18112000, 62565000, 18886000), governmentform (\"Parliamentary Coprincipality\", \"US Territory\", \"Commonwealth of the US\"), indepyear (1970, 1830, 1976), gnpold (40562.0, 88434.0, 6887.0), name (\"Germany\", \"Liechtenstein\", \"Comoros\"), capital (3173, 3536, 3261), localname (\"Argentina\", \"Saint-Pierre-et-Miquelon\", \"MoÃ§ambique\"), surfacearea (801590.0, 774815.0, 824292.0), lifeexpectancy (70.8, 65.5, 73.2) | countrylanguage : language (\"Tatar\", \"Berberi\", \"Zhuang\"), countrycode (\"GIB\", \"PCN\", \"GBR\"), isofficial (\"T\", \"F\"), percentage (60.4, 6.4, 29.6)",
        "ambiguous_queries": [
            "select distinct t2.city_name from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')",
            "select distinct t2.title from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')"
        ],
        "gold_ambiguity": {
            "match": "{\"cities\": [{\"city\": [\"city_name\"]}, {\"city\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cities\" refers to the schema \"city\".\"city_name\"",
        "clear_ambiguity": "{\"cities\": {\"city\": [\"city_name\"]}}",
        "gold_query": "select distinct t2.city_name from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')"
    },
    {
        "index": 108,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "schema_without_content": "city : district , name , countrycode , id , population  | sqlite_sequence : seq , name  | country : gnp , governmentform , capital , surfacearea , life_span , continent , life_length , gnpold , localname , population , code2 , code , region , indepyear , headofstate , name  | countrylanguage : isofficial , language , percentage , countrycode",
        "schema_with_content": "city : district (\"Haryana\", \"JÃ¶nkÃ¶pings lÃ¤n\", \"Guangxi\"), name (\"Vaduz\", \"Sergijev Posad\", \"Meihekou\"), countrycode (\"LCA\", \"GTM\", \"RUS\"), id (4048, 131, 2233), population (214384, 117396, 125621) | sqlite_sequence : seq (4079), name (\"city\") | country : gnp (776.0, 2108.0, 6.0), governmentform (\"Parlementary Monarchy\", \"Territory of Australia\", \"Islamic Republic\"), capital (1800, 1522, 2455), surfacearea (1240192.0, 2344858.0, 726.0), life_span (77.8, 72.7, 71.5), continent (\"Oceania\", \"Oceania\", \"Antarctica\"), life_length (77.8, 72.7, 71.5), gnpold (58549.0, 45914.0, 442989.0), localname (\"Moldova\", \"Luxembourg/LÃ«tzebuerg\", \"Timor Timur\"), population (4968000, 2662000, 25662000), code2 (\"BF\", \"SG\", \"BY\"), code (\"LTU\", \"TUN\", \"DZA\"), region (\"Northern Africa\", \"Eastern Asia\", \"Micronesia\"), indepyear (-1523, 1499, 1958), headofstate (\"GnassingbÃ© EyadÃ©ma\", \"Hugo BÃ¡nzer SuÃ¡rez\", \"Benjamin William Mkapa\"), name (\"Cook Islands\", \"British Indian Ocean Territory\", \"Seychelles\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Polish\", \"Bemba\", \"Khoekhoe\"), percentage (64.7, 93.5, 6.4), countrycode (\"GEO\", \"CYP\", \"IRL\")",
        "ambiguous_queries": [
            "select avg(life_length) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' and t2.isofficial = 'T')",
            "select avg(life_span) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' and t2.isofficial = 'T')"
        ],
        "gold_ambiguity": {
            "match": "{\"life expectancy\": [{\"country\": [\"life_length\"]}, {\"country\": [\"life_span\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"life expectancy\" refers to the schema \"country\".\"life_length\"",
        "clear_ambiguity": "{\"life expectancy\": {\"country\": [\"life_length\"]}}",
        "gold_query": "select avg(life_length) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' and t2.isofficial = 'T')"
    },
    {
        "index": 109,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "schema_without_content": "poker_player : best_finish , last_round_table , money_rank , endgame_table , poker_player_id , earnings , people_id  | people : nationality , birth_date , people_id , height , name",
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), last_round_table (42.0, 21.0, 21.0), money_rank (68.0, 141.0, 166.0), endgame_table (42.0, 21.0, 21.0), poker_player_id (4, 4, 3), earnings (104871.0, 596462.0, 596462.0), people_id (6, 7, 6) | people : nationality (\"Russia\", \"Bulgaria\"), birth_date (\"July 14, 1983\", \"July 14, 1983\", \"May 26, 1986\"), people_id (1, 5, 6), height (196.0, 194.0, 187.0), name (\"Semen Poltavskiy\", \"Teodor Salparov\", \"Maksim Botin\")",
        "ambiguous_queries": [
            "select max(last_round_table) from poker_player where earnings < 200000",
            "select max(endgame_table) from poker_player where earnings < 200000"
        ],
        "gold_ambiguity": {
            "match": "{\"final tables\": [{\"poker_player\": [\"last_round_table\"]}, {\"poker_player\": [\"endgame_table\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"final tables\" refers to the schema \"poker_player\".\"last_round_table\"",
        "clear_ambiguity": "{\"final tables\": {\"poker_player\": [\"last_round_table\"]}}",
        "gold_query": "select max(last_round_table) from poker_player where earnings < 200000"
    },
    {
        "index": 110,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "schema_without_content": "employee : employee_id , city , name , age  | shop : title , manager_name , location , number_products , shop_id , district , business_name  | hiring : employee_id , start_from , shop_id , is_full_time  | evaluation : bonus , year_awarded , employee_id",
        "schema_with_content": "employee : employee_id (1, 3, 8), city (\"Wasps\", \"Leicester\", \"Bristol\"), name (\"Mark Regan\", \"Tim Payne\", \"Mark Regan\"), age (40, 23, 43) | shop : title (\"FC Honka\", \"FC Haka\", \"FC Haka\"), manager_name (\"Olli Huttunen\", \"Job Dragtsma\", \"Antti Muurinen\"), location (\"Kotka\", \"Mariehamn\", \"Helsinki\"), number_products (4780, 10770, 1600), shop_id (8, 7, 6), district (\"Magnum Areena\", \"Magnum Areena\", \"Magnum Areena\"), business_name (\"FC Honka\", \"FC Haka\", \"FC Haka\") | hiring : employee_id (4, 7, 6), start_from (\"2008\", \"2008\", \"2011\"), shop_id (6, 4, 2), is_full_time (\"T\", \"F\") | evaluation : bonus (4000.0, 4000.0, 3200.0), year_awarded (\"2015\", \"2011\", \"2011\"), employee_id (\"10\", \"7\", \"4\")",
        "ambiguous_queries": [
            "select title, location, district from shop order by number_products desc",
            "select business_name, location, district from shop order by number_products desc"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"shop\": [\"title\"]}, {\"shop\": [\"business_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"shop\".\"business_name\"",
        "clear_ambiguity": "{\"name\": {\"shop\": [\"business_name\"]}}",
        "gold_query": "select business_name, location, district from shop order by number_products desc"
    },
    {
        "index": 111,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "schema_without_content": "breeds : name , title , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , city , cell_number 9217952551\", \"762.589.6117x1328\", \"768-5439x484\", first_name , home_phone 747-5094x8134\", \"318-052-6573\", \"997-7627\", email_address , state , last_name , street , zip_code  | dogs : date_arrived , date_adopted , weight , dog_id , age , breed_code , owner_id , name , gender , size_code , date_of_birth , date_departed , abandoned_yn  | professionals : state , city , cell_number , last_name , email_address , zip_code , first_name , professional_id , street , home_phone 1132733868\", \"971.048.3763x9404\", role_code  | treatments : dog_id , treatment_id , date_of_treatment , treatment_type_code , professional_id , cost_of_treatment",
        "schema_with_content": "breeds : name (\"Eskimo\", \"Husky\", \"Bulldog\"), title (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (13, 12, 10), city (\"East Hillardberg\", \"South Afton\", \"Lake Carleyborough\"), cell_number (\"+70(4)9217952551\", \"762.589.6117x1328\", \"(722)768-5439x484\"), first_name (\"Heather\", \"Kade\", \"Nora\"), home_phone (\"(094)747-5094x8134\", \"318-052-6573\", \"(058)997-7627\"), email_address (\"marks.gail@example.org\", \"fschoen@example.net\", \"zboncak.madonna@example.net\"), state (\"NewYork\", \"Arizona\", \"Pennsylvania\"), last_name (\"Ondricka\", \"Rippin\", \"Ondricka\"), street (\"89011 Kertzmann Spring Suite 642\", \"15828 Spencer Extensions\", \"68118 Daniel Row\"), zip_code (\"87304\", \"78297\", \"00589\") | dogs : date_arrived (\"2017-04-15 09:25:31\", \"2017-10-16 20:06:21\", \"2017-10-24 04:45:13\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-21 10:41:18\", \"2018-03-06 16:32:11\"), weight (\"7.57\", \"8.96\", \"6.92\"), dog_id (2, 9, 5), age (\"4\", \"4\", \"3\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (6, 7, 2), name (\"Troy\", \"Narciso\", \"George\"), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2012-10-14 14:44:37\", \"2017-09-19 05:39:09\", \"2008-05-30 12:51:34\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 06:58:44\", \"2018-03-25 06:29:10\"), abandoned_yn (\"1\", \"0\") | professionals : state (\"Connecticut\", \"NorthCarolina\", \"Connecticut\"), city (\"East Ila\", \"New Laurytown\", \"New Maryjane\"), cell_number (\"328.842.3792\", \"1-258-285-4707x8020\", \"880-659-7577x736\"), last_name (\"Hayes\", \"O'Reilly\", \"Hyatt\"), email_address (\"deanna.schuster@example.com\", \"deanna.schuster@example.com\", \"west.eula@example.net\"), zip_code (\"67980\", \"80775\", \"52476\"), first_name (\"Jayson\", \"Monte\", \"Winfield\"), professional_id (4, 6, 11), street (\"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \"), home_phone (\"022.529.0550x1319\", \"+43(5)1132733868\", \"971.048.3763x9404\"), role_code (\"Employee\", \"Veterenarian\") | treatments : dog_id (14, 15, 13), treatment_id (1, 14, 5), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-02-28 17:09:43\", \"2018-03-13 12:22:58\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (9, 5, 6), cost_of_treatment (428, 514, 656)",
        "ambiguous_queries": [
            "select t1.name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.name order by count(*) desc limit 1",
            "select t1.title from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.title order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"breeds\": [\"name\"]}, {\"breeds\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"breeds\".\"title\"",
        "clear_ambiguity": "{\"name\": {\"breeds\": [\"title\"]}}",
        "gold_query": "select t1.title from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.title order by count(*) desc limit 1"
    },
    {
        "index": 112,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "column",
        "db_file": "column/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : form_type_code , version_number , template_details , date_effective_from , document_type_code , date_effective_to , template_id  | documents : document_description , document_id , other_details , template_id , document_name  | paragraphs : paragraph_id , paragraph_text , document_id , other_details",
        "schema_with_content": "ref_template_types : template_type_code (\"BK\", \"CV\", \"PPT\"), template_type_description (\"Paper\", \"Presentation\", \"CV\") | templates : form_type_code (\"BK\", \"PPT\", \"PP\"), version_number (8, 2, 1), template_details (\"\"), date_effective_from (\"2003-06-05 04:03:45\", \"1997-04-17 08:29:44\", \"2002-03-02 14:39:49\"), document_type_code (\"BK\", \"PPT\", \"PP\"), date_effective_to (\"2015-09-06 01:08:44\", \"1979-11-04 08:58:39\", \"1993-03-24 14:30:23\"), template_id (25, 24, 10) | documents : document_description (\"u\", \"z\", \"h\"), document_id (3, 3540024, 0), other_details (None), template_id (14, 25, 21), document_name (\"Customer reviews\", \"Summer Show\", \"How to read a book\") | paragraphs : paragraph_id (243399026, 608931827, 608931827), paragraph_text (\"Korea\", \"Ireland\", \"Senegal\"), document_id (3830, 2394, 50123), other_details (None)",
        "ambiguous_queries": [
            "select min(version_number), form_type_code from templates",
            "select min(version_number), document_type_code from templates"
        ],
        "gold_ambiguity": {
            "match": "{\"type code\": [{\"templates\": [\"form_type_code\"]}, {\"templates\": [\"document_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type code\" refers to the schema \"templates\".\"form_type_code\"",
        "clear_ambiguity": "{\"type code\": {\"templates\": [\"form_type_code\"]}}",
        "gold_query": "select min(version_number), form_type_code from templates"
    },
    {
        "index": 113,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the first student to register?",
        "schema_without_content": "addresses : address_id , country , line_1 , line_3 , state_province_county , city , zip_postcode , other_address_details , line_2  | courses : course_description , course_id , course_name , other_details  | departments : department_id , other_details , department_name , department_description  | degree_programs : degree_summary_description , department_id , degree_summary_name , degree_program_id , other_details  | sections : other_details , course_id , section_id , section_name , section_description  | semesters : semester_name , semester_description , semester_id , other_details  | students : other_student_details , current_address_id , date_left , forename , middle_name , ssn , student_id , email_address , last_name , date_first_registered , permanent_address_id , given_name , cell_mobile_number  | student_enrolment : degree_program_id , semester_id , other_details , student_enrolment_id , student_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : transcript_id , student_course_id",
        "schema_with_content": "addresses : address_id (13, 13, 1), country (\"Cook Islands\", \"Saudi Arabia\", \"Iceland\"), line_1 (\"7081 Eda Center\", \"193 Marlin Brook\", \"979 Haag Shores Suite 656\"), line_3 (None), state_province_county (\"Virginia\", \"SouthDakota\", \"Hawaii\"), city (\"Prohaskafort\", \"South Palma\", \"New Clemensburgh\"), zip_postcode (\"400\", \"386\", \"902\"), other_address_details (None), line_2 (\"Suite 830\", \"Apt. 388\", \"Suite 703\") | courses : course_description (\"n\", \"q\", \"n\"), course_id (6, 12, 6), course_name (\"nlp\", \"nlp\", \"rs\"), other_details (None) | departments : department_id (7, 9, 8), other_details (None), department_name (\"history\", \"art\", \"history\"), department_description (\"nisi\", \"nihil\", \"natus\") | degree_programs : degree_summary_description (\"aut\", \"esse\", \"placeat\"), department_id (12, 15, 14), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (1, 1, 12), other_details (None) | sections : other_details (None), course_id (12, 5, 4), section_id (9, 1, 11), section_name (\"y\", \"o\", \"k\"), section_description (\"ex\", \"voluptatem\", \"ad\") | semesters : semester_name (\"fall 2018\", \"winter 2018\", \"spring 2016\"), semester_description (\"x\", \"t\", \"g\"), semester_id (9, 4, 12), other_details (None) | students : other_student_details (\"autem\", \"qui\", \"non\"), current_address_id (14, 14, 7), date_left (\"2014-05-30 23:32:02\", \"1990-09-01 05:03:27\", \"1982-06-11 00:25:39\"), forename (\"Delaney\", \"Stanford\", \"Hobart\"), middle_name (\"Violet\", \"Mona\", \"Alberta\"), ssn (\"402\", \"965\", \"156\"), student_id (14, 15, 8), email_address (\"erwin.zboncak@example.com\", \"baumbach.lucious@example.org\", \"nbruen@example.org\"), last_name (\"Rempel\", \"Balistreri\", \"Ankunding\"), date_first_registered (\"2018-03-13 09:56:22\", \"2009-09-25 00:14:25\", \"1982-02-14 08:46:35\"), permanent_address_id (4, 4, 9), given_name (\"Delaney\", \"Stanford\", \"Hobart\"), cell_mobile_number (\"436.613.7683\", \"07661787471\", \"1-009-710-5151\") | student_enrolment : degree_program_id (3, 2, 11), semester_id (6, 15, 15), other_details (None), student_enrolment_id (13, 11, 15), student_id (7, 14, 1) | student_enrolment_courses : student_enrolment_id (14, 14, 13), course_id (12, 11, 11), student_course_id (83814225, 1, 438800) | transcripts : transcript_date (\"1986-07-12 07:27:29\", \"1975-05-20 18:31:21\", \"2013-06-30 13:01:40\"), transcript_id (13, 7, 5), other_details (None) | transcript_contents : transcript_id (6, 12, 2), student_course_id (2, 76, 8)",
        "ambiguous_queries": [
            "select forename, middle_name, last_name from students order by date_first_registered asc limit 1",
            "select given_name, middle_name, last_name from students order by date_first_registered asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first\": [{\"students\": [\"forename\"]}, {\"students\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first\" refers to the schema \"students\".\"given_name\"",
        "clear_ambiguity": "{\"first\": {\"students\": [\"given_name\"]}}",
        "gold_query": "select given_name, middle_name, last_name from students order by date_first_registered asc limit 1"
    },
    {
        "index": 114,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "Which airline has most number of flights?",
        "schema_without_content": "airlines : company , country , abbreviation , uid , carrier  | airports : city , airportname , airportcode , countryabbrev , country  | flights : flightno , airline , destairport , sourceairport",
        "schema_with_content": "airlines : company (\"United Airlines\", \"American Airlines\", \"Southwest Airlines\"), country (\"USA\"), abbreviation (\"UAL\", \"Continental\", \"Southwest\"), uid (10, 9, 12), carrier (\"United Airlines\", \"American Airlines\", \"Southwest Airlines\") | airports : city (\"Arcata \", \"Abilene \", \"Abilene \"), airportname (\"Colorado Plains Regional Airport \", \"Alitak SPB \", \"Ft Mcclellan Bus Trml \"), airportcode (\"ASE\", \"AIA\", \"APG\"), countryabbrev (\"US \", \"US\"), country (\"United States \") | flights : flightno (113, 855, 925), airline (11, 4, 10), destairport (\" AND\", \" VJI\", \" AIK\"), sourceairport (\" AID\", \" AEX\", \" ANA\")",
        "ambiguous_queries": [
            "select t1.carrier from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.carrier order by count(*) desc limit 1",
            "select t1.company from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.company order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"airline\": [{\"airlines\": [\"carrier\"]}, {\"airlines\": [\"company\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airline\" refers to the schema \"airlines\".\"company\"",
        "clear_ambiguity": "{\"airline\": {\"airlines\": [\"company\"]}}",
        "gold_query": "select t1.company from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.company order by count(*) desc limit 1"
    },
    {
        "index": 115,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : zip_code , first_name , owner_id , home_phone , last_name , email_address , city , street , cell_number 4323592985\", \"633.455.3045x85484\", state  | dogs : owner_id , name , age , date_adopted , gender , breed_code , date_arrived , abandoned_yn , date_of_birth , dog_id , size_code , weight , date_departed  | professionals : email_address , state , job_code , street , cell_number , zip_code , professional_id , last_name , home_phone , position_code , city , first_name  | treatments : date_of_treatment , cost_of_treatment , treatment_type_code , professional_id , treatment_id , dog_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : zip_code (\"11990\", \"35747\", \"02647\"), first_name (\"Johann\", \"Orlando\", \"Gay\"), owner_id (2, 1, 3), home_phone (\"130-796-4589x05454\", \"1-682-845-0116x63235\", \"916.976.9480x13851\"), last_name (\"Schmitt\", \"Mertz\", \"Stoltenberg\"), email_address (\"fschoen@example.net\", \"marks.gail@example.org\", \"wpfeffer@example.net\"), city (\"Lake Jennyferfort\", \"Lake Valentin\", \"South Daisyfurt\"), street (\"68118 Daniel Row\", \"15828 Spencer Extensions\", \"692 Jaskolski Forges\"), cell_number (\"633.455.3045x85484\", \"+00(2)4323592985\", \"633.455.3045x85484\"), state (\"NewYork\", \"Florida\", \"SouthDakota\") | dogs : owner_id (11, 3, 10), name (\"Betty\", \"George\", \"Hipolito\"), age (\"2\", \"9\", \"6\"), date_adopted (\"2018-03-21 10:41:18\", \"2018-02-27 11:54:35\", \"2018-03-13 12:47:15\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-04-20 00:58:55\", \"2017-10-24 04:45:13\", \"2017-07-25 15:19:07\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2012-05-03 21:42:25\", \"2018-03-17 04:05:12\", \"2013-02-13 05:15:21\"), dog_id (2, 6, 13), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"1.72\", \"7.57\", \"9.48\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 05:07:47\", \"2018-03-25 02:47:40\") | professionals : email_address (\"schneider.kathryne@example.org\", \"jerrod.bahringer@example.org\", \"lourdes.lowe@example.net\"), state (\"Mississippi\", \"Utah\", \"Wyoming\"), job_code (\"Employee\", \"Veterenarian\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), cell_number (\"1-185-137-1945x409\", \"962-983-8109x3509\", \"461-801-2600\"), zip_code (\"67980\", \"06646\", \"41215\"), professional_id (5, 5, 3), last_name (\"Frami\", \"Pouros\", \"O'Reilly\"), home_phone (\"320-508-6023\", \"1-609-566-2752x25197\", \"325-155-0801x7005\"), position_code (\"Employee\", \"Veterenarian\"), city (\"New Maryjane\", \"Juddton\", \"New Laurytown\"), first_name (\"Vernice\", \"Sigurd\", \"Winfield\") | treatments : date_of_treatment (\"2018-03-01 04:14:46\", \"2018-03-23 13:52:10\", \"2018-03-23 13:52:10\"), cost_of_treatment (407, 656, 139), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (9, 5, 6), treatment_id (7, 3, 8), dog_id (2, 14, 2)",
        "ambiguous_queries": [
            "select position_code, street, city, state from professionals where city like '%West%'",
            "select job_code, street, city, state from professionals where city like '%West%'"
        ],
        "gold_ambiguity": {
            "match": "{\"role\": [{\"professionals\": [\"position_code\"]}, {\"professionals\": [\"job_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"role\" refers to the schema \"professionals\".\"position_code\"",
        "clear_ambiguity": "{\"role\": {\"professionals\": [\"position_code\"]}}",
        "gold_query": "select position_code, street, city, state from professionals where city like '%West%'"
    },
    {
        "index": 116,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "schema_without_content": "airlines : carrier , uid , company , abbreviation , country  | airports : country , airportcode , airportname , city , countryabbrev  | flights : flightno , airline , sourceairport , destairport",
        "schema_with_content": "airlines : carrier (\"Continental Airlines\", \"United Airlines\", \"United Airlines\"), uid (5, 11, 10), company (\"Continental Airlines\", \"United Airlines\", \"United Airlines\"), abbreviation (\"JetBlue\", \"USAir\", \"USAir\"), country (\"USA\") | airports : country (\"United States \"), airportcode (\"RLI\", \"ANB\", \"AFO\"), airportname (\"Aleneva \", \"Rick Husband Amarillo International \", \"Albany International \"), city (\"Alyeska \", \"Arcata \", \"Alexandria \"), countryabbrev (\"US \", \"US\") | flights : flightno (888, 727, 1255), airline (8, 1, 9), sourceairport (\" MRI\", \" ANV\", \" ANW\"), destairport (\" TDW\", \" TDW\", \" AOS\")",
        "ambiguous_queries": [
            "select carrier, abbreviation from airlines where country = 'USA'",
            "select company, abbreviation from airlines where country = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"airlines\": [\"carrier\"]}, {\"airlines\": [\"company\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"airlines\".\"carrier\"",
        "clear_ambiguity": "{\"names\": {\"airlines\": [\"carrier\"]}}",
        "gold_query": "select carrier, abbreviation from airlines where country = 'USA'"
    },
    {
        "index": 117,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "schema_without_content": "employee : city , employee_id , age , name  | shop : location , shop_id , region , name , manager_name , territory , number_products  | hiring : employee_id , shop_id , is_full_time , start_from  | evaluation : year_awarded , bonus , employee_id",
        "schema_with_content": "employee : city (\"Sale\", \"Leicester\", \"Bristol\"), employee_id (10, 1, 6), age (32, 36, 30), name (\"Matt Stevens\", \"George Chuter\", \"Tim Payne\") | shop : location (\"Kuopio\", \"Mariehamn\", \"Kotka\"), shop_id (4, 1, 5), region (\"Magnum Areena\", \"Veritas Stadion\", \"Magnum Areena\"), name (\"FC Lahti\", \"FF Jaro\", \"FC Inter\"), manager_name (\"Tommi Kautonen\", \"Pekka Lyyski\", \"Mika Lehkosuo\"), territory (\"Magnum Areena\", \"Veritas Stadion\", \"Magnum Areena\"), number_products (6000, 1600, 1600) | hiring : employee_id (2, 2, 3), shop_id (5, 5, 8), is_full_time (\"T\", \"F\"), start_from (\"2010\", \"2011\", \"2003\") | evaluation : year_awarded (\"2017\", \"2017\", \"2016\"), bonus (4000.0, 2900.0, 3200.0), employee_id (\"2\", \"1\", \"10\")",
        "ambiguous_queries": [
            "select manager_name, region from shop order by number_products desc limit 1",
            "select manager_name, territory from shop order by number_products desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"shop\": [\"region\"]}, {\"shop\": [\"territory\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"shop\".\"territory\"",
        "clear_ambiguity": "{\"district\": {\"shop\": [\"territory\"]}}",
        "gold_query": "select manager_name, territory from shop order by number_products desc limit 1"
    },
    {
        "index": 118,
        "db_id": "course_teach",
        "ambig_type": "column",
        "db_file": "column/course_teach/course_teach.sqlite",
        "question": "What is the age and hometown of every teacher?",
        "schema_without_content": "course : course_id , staring_date , course  | teacher : age , birthplace , teacher_id , origin , name  | course_arrange : grade , teacher_id , course_id",
        "schema_with_content": "course : course_id (2, 2, 4), staring_date (\"6 May\", \"10 May\", \"13 May\"), course (\"History\", \"Health\", \"Science\") | teacher : age (\"33\", \"33\", \"29\"), birthplace (\"Bolton County Borough\", \"Bolton County Borough\", \"Little Lever Urban District\"), teacher_id (5, 5, 3), origin (\"Bolton County Borough\", \"Bolton County Borough\", \"Little Lever Urban District\"), name (\"Joseph Huts\", \"Joseph Huts\", \"Gustaaf Deloor\") | course_arrange : grade (4, 5, 3), teacher_id (7, 2, 2), course_id (5, 3, 3)",
        "ambiguous_queries": [
            "select age, birthplace from teacher",
            "select age, origin from teacher"
        ],
        "gold_ambiguity": {
            "match": "{\"hometown\": [{\"teacher\": [\"birthplace\"]}, {\"teacher\": [\"origin\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"hometown\" refers to the schema \"teacher\".\"origin\"",
        "clear_ambiguity": "{\"hometown\": {\"teacher\": [\"origin\"]}}",
        "gold_query": "select age, origin from teacher"
    },
    {
        "index": 119,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "schema_without_content": "conductor : nationality , full_name , age , year_of_work , title , conductor_id  | orchestra : record_company , major_record_format , orchestra_id , conductor_id , orchestra , year_of_founded  | performance : orchestra_id , share , official_ratings_ , weekly_rank , date , performance_id , type  | show : show_id , result , if_first_show , attendance , performance_id",
        "schema_with_content": "conductor : nationality (\"USA\", \"UK\", \"France\"), full_name (\"Robert Craft\", \"Valeri Gergiev\", \"Antal Brown\"), age (43, 43, 50), year_of_work (16, 10, 6), title (\"Robert Craft\", \"Valeri Gergiev\", \"Antal Brown\"), conductor_id (2, 3, 3) | orchestra : record_company (\"Delos Records\", \"Columbia Masterworks\", \"Decca Records\"), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra_id (5, 11, 2), conductor_id (10, 1, 12), orchestra (\"Orchestre de Paris\", \"Montreal Symphony Orchestra\", \"Royal Concertgebouw Orchestra\"), year_of_founded (2009.0, 2008.0, 2009.0) | performance : orchestra_id (5, 4, 7), share (\"40.9%\", \"43.7%\", \"28.0%\"), official_ratings_(millions) (6.73, 9.29, 5.2), weekly_rank (\"TBC\", \"2\", \"8\"), date (\"10 June\", \"14 June\", \"9 June\"), performance_id (8, 6, 2), type (\"Auditions 3\", \"Auditions 2\", \"Live final results\") | show : show_id (5, 5, 2), result (\"T\", \"F\"), if_first_show (\"St. Mirren Park\", \"Hampden Park\", \"St. Mirren Park\"), attendance (555.0, 1925.0, 1026.0), performance_id (1, 4, 3)",
        "ambiguous_queries": [
            "select t1.full_name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
            "select t1.title from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"conductor\": [\"full_name\"]}, {\"conductor\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"conductor\".\"full_name\"",
        "clear_ambiguity": "{\"name\": {\"conductor\": [\"full_name\"]}}",
        "gold_query": "select t1.full_name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1"
    },
    {
        "index": 120,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "What is the maximum and minimum share for the TV series?",
        "schema_without_content": "tv_channel : hight_definition_tv , language , pay_per_view_ppv , series_name , country , content , package_option , pixel_aspect_ratio_par , id  | tv_series : percentage_share , channel , episode , rating , id , dividend , air_date , 18_49_rating_share , viewers_m , weekly_rank  | cartoon : production_code , original_air_date , directed_by , title , channel , written_by , id",
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), language (\"Italian\", \"English\"), pay_per_view_ppv (\"no\"), series_name (\"Hip Hop TV\", \"Hip Hop TV\", \"MTV Live HD\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"714\", \"728\", \"705\") | tv_series : percentage_share (9.0, 5.0, 5.0), channel (\"728\", \"701\", \"728\"), episode (\"The Hanged Man\", \"Keepers\", \"Winterland\"), rating (\"4.4\", \"4.4\", \"5.8\"), id (11.0, 1.0, 7.0), dividend (9.0, 5.0, 5.0), air_date (\"November 12, 2007\", \"October 15, 2007\", \"December 10, 2007\"), 18_49_rating_share (\"3.5/9\", \"1.5/4\", \"3.2/8\"), viewers_m (\"6.75\", \"6.75\", \"5.28\"), weekly_rank (65.0, 61.0, 80.0) | cartoon : production_code (103.0, 101.0, 102.0), original_air_date (\"November14,2008\", \"January9,2009\", \"December12,2008\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), title (\"Terror on Dinosaur Island!\", \"Terror on Dinosaur Island!\", \"The Eyes of Despero!\"), channel (\"705\", \"707\", \"708\"), written_by (\"Steven Melching\", \"J. M. DeMatteis\", \"J. M. DeMatteis\"), id (1.0, 6.0, 11.0)",
        "ambiguous_queries": [
            "select max(percentage_share), min(percentage_share) from tv_series",
            "select max(dividend), min(dividend) from tv_series"
        ],
        "gold_ambiguity": {
            "match": "{\"share\": [{\"tv_series\": [\"percentage_share\"]}, {\"tv_series\": [\"dividend\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"share\" refers to the schema \"tv_series\".\"percentage_share\"",
        "clear_ambiguity": "{\"share\": {\"tv_series\": [\"percentage_share\"]}}",
        "gold_query": "select max(percentage_share), min(percentage_share) from tv_series"
    },
    {
        "index": 121,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "schema_without_content": "city : countrycode , district , id , name , population  | sqlite_sequence : name , seq  | country : gnpold , lifeexpectancy , population , governmentform , gross_national_product , continent , name , national_income , headofstate , region , localname , capital , surfacearea , indepyear , code2 , code  | countrylanguage : language , countrycode , isofficial , percentage",
        "schema_with_content": "city : countrycode (\"GRD\", \"BEN\", \"MYS\"), district (\"Saratov\", \"Kursk\", \"East Azerbaidzan\"), id (4060, 2642, 1495), name (\"Tirupati\", \"Anchorage\", \"Irbil\"), population (211391, 92224, 98818) | sqlite_sequence : name (\"city\"), seq (4079) | country : gnpold (6887.0, 227757.0, 383.0), lifeexpectancy (55.0, 76.2, 76.8), population (79832000, 50456000, 46844000), governmentform (\"Federal Republic\", \"Overseas Department of France\", \"Nonmetropolitan Territory of The Netherlands\"), gross_national_product (903.0, 650.0, 20831.0), continent (\"North America\", \"Antarctica\", \"Africa\"), name (\"Belgium\", \"Kyrgyzstan\", \"Botswana\"), national_income (903.0, 650.0, 20831.0), headofstate (\"Muammar al-Qadhafi\", \"kenraali Than Shwe\", \"Ricardo Lagos Escobar\"), region (\"Nordic Countries\", \"Micronesia/Caribbean\", \"Southern and Central Asia\"), localname (\"Mali\", \"RÃ©publique DÃ©mocratique du Congo\", \"British Indian Ocean Territory\"), capital (144, 3161, 2690), surfacearea (694.0, 1240192.0, 357022.0), indepyear (1918, 1976, 1822), code2 (\"LV\", \"AI\", \"SL\"), code (\"SMR\", \"MEX\", \"COD\") | countrylanguage : language (\"Bajad\", \"Warrau\", \"Singali\"), countrycode (\"CAN\", \"EST\", \"ANT\"), isofficial (\"T\", \"F\"), percentage (46.4, 10.9, 11.8)",
        "ambiguous_queries": [
            "select avg(gross_national_product), sum(population) from country where governmentform = 'US Territory'",
            "select avg(national_income), sum(population) from country where governmentform = 'US Territory'"
        ],
        "gold_ambiguity": {
            "match": "{\"GNP\": [{\"country\": [\"gross_national_product\"]}, {\"country\": [\"national_income\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"GNP\" refers to the schema \"country\".\"national_income\"",
        "clear_ambiguity": "{\"GNP\": {\"country\": [\"national_income\"]}}",
        "gold_query": "select avg(national_income), sum(population) from country where governmentform = 'US Territory'"
    },
    {
        "index": 122,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "schema_without_content": "addresses : state_province_county , zip_postcode , country , second_line , line_3 , other_address_details , secondary_address , city , address_id , line_1  | courses : course_id , course_description , other_details , course_name  | departments : department_id , department_description , department_name , other_details  | degree_programs : degree_summary_description , degree_summary_name , degree_program_id , other_details , department_id  | sections : other_details , section_description , section_name , section_id , course_id  | semesters : semester_name , semester_id , semester_description , other_details  | students : cell_mobile_number 153-1469x1733\", \"877.549.9067x8723\", first_name , middle_name , last_name , student_id , email_address , current_address_id , other_student_details , date_first_registered , ssn , permanent_address_id , date_left  | student_enrolment : other_details , semester_id , degree_program_id , student_id , student_enrolment_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_id , other_details , transcript_date  | transcript_contents : transcript_id , student_course_id",
        "schema_with_content": "addresses : state_province_county (\"Delaware\", \"Hawaii\", \"Hawaii\"), zip_postcode (\"638\", \"541\", \"148\"), country (\"Croatia\", \"Iceland\", \"Bermuda\"), second_line (\"Apt. 468\", \"Suite 239\", \"Apt. 305\"), line_3 (None), other_address_details (None), secondary_address (\"Apt. 468\", \"Suite 239\", \"Apt. 305\"), city (\"Port Oceane\", \"Lake Laishafurt\", \"Port Oceane\"), address_id (12, 4, 9), line_1 (\"3999 Aufderhar Ways Suite 593\", \"202 Hessel Views Apt. 468\", \"202 Hessel Views Apt. 468\") | courses : course_id (1, 3, 12), course_description (\"p\", \"k\", \"d\"), other_details (None), course_name (\"math\", \"en\", \"nlp\") | departments : department_id (5, 7, 7), department_description (\"aliquam\", \"ea\", \"non\"), department_name (\"medical\", \"medical\", \"engineer\"), other_details (None) | degree_programs : degree_summary_description (\"aperiam\", \"aperiam\", \"qui\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (10, 15, 3), other_details (None), department_id (4, 14, 8) | sections : other_details (None), section_description (\"reprehenderit\", \"quis\", \"reprehenderit\"), section_name (\"o\", \"f\", \"o\"), section_id (14, 8, 14), course_id (6, 1, 12) | semesters : semester_name (\"summer 2010\", \"spring 2012\", \"winter 2018\"), semester_id (3, 4, 10), semester_description (\"y\", \"l\", \"q\"), other_details (None) | students : cell_mobile_number (\"03174364122\", \"(982)153-1469x1733\", \"877.549.9067x8723\"), first_name (\"Jordy\", \"Reva\", \"Helga\"), middle_name (\"Aaliyah\", \"Brooklyn\", \"Vaughn\"), last_name (\"Carroll\", \"Carroll\", \"Mohr\"), student_id (15, 5, 4), email_address (\"nya.lesch@example.net\", \"swift.kolby@example.com\", \"jhuel@example.com\"), current_address_id (7, 15, 10), other_student_details (\"rerum\", \"omnis\", \"atque\"), date_first_registered (\"1971-02-05 07:28:23\", \"2005-12-15 08:42:10\", \"1976-10-26 02:33:06\"), ssn (\"43\", \"39\", \"43\"), permanent_address_id (8, 11, 5), date_left (\"2007-03-31 09:53:19\", \"2007-08-02 04:12:58\", \"1982-06-11 00:25:39\") | student_enrolment : other_details (None), semester_id (2, 4, 12), degree_program_id (10, 2, 9), student_id (7, 9, 6), student_enrolment_id (12, 1, 7) | student_enrolment_courses : course_id (4, 4, 2), student_enrolment_id (9, 10, 14), student_course_id (7, 96, 2) | transcripts : transcript_id (2, 12, 15), other_details (None), transcript_date (\"1975-05-20 18:31:21\", \"2013-06-30 13:01:40\", \"2002-09-24 06:11:49\") | transcript_contents : transcript_id (2, 4, 15), student_course_id (28982908, 7, 28982908)",
        "ambiguous_queries": [
            "select t1.address_id, t1.line_1, t1.second_line from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
            "select t1.address_id, t1.line_1, t1.secondary_address from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"lines\": [{\"addresses\": [\"second_line\"]}, {\"addresses\": [\"secondary_address\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"lines\" refers to the schema \"addresses\".\"secondary_address\"",
        "clear_ambiguity": "{\"lines\": {\"addresses\": [\"secondary_address\"]}}",
        "gold_query": "select t1.address_id, t1.line_1, t1.secondary_address from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1"
    },
    {
        "index": 123,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "schema_without_content": "players : hand , last_name , player_id , first_name , country_code , birth_date  | matches : loser_age , loser_name , score  2-6 6-3\", \"6-3 7-5\", surface , loser_rank , winner_age , winner_id , winner_seed , tourney_id , year , winner_ioc , victorious_player_ranking , loser_hand , loser_ioc , loser_seed , tourney_date , winner_ht , loser_id , winner_rank_points , loser_rank_points , tourney_level , round , winner_hand , winning_player_ranking , loser_ht , match_num , loser_entry , draw_size , tourney_name , minutes , winner_name , winner_entry , best_of  | rankings : player_id , ranking_points , ranking_date , tours , ranking",
        "schema_with_content": "players : hand (\"U\", \"U\", \"U\"), last_name (\"Bove\", \"Montini\", \"Lukasiak\"), player_id (204084, 208640, 211778), first_name (\"Gozal\", \"Gill\", \"Risako\"), country_code (\"CMR\", \"SVK\", \"NZL\"), birth_date (19990707, 19540923, 19860411) | matches : loser_age (26.078028747399998, 31.6906228611, 27.7754962355), loser_name (\"Victoria Azarenka\", \"Lesia Tsurenko\", \"Camila Giorgi\"), score (\"7-5 6-0\", \"7-6(5) 2-6 6-3\", \"6-3 7-5\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_rank (15, 29, 36), winner_age (28.517453798800002, 28.643394935, 22.8528405202), winner_id (201347, 201455, 201585), winner_seed (6, 1, 11), tourney_id (\"2016-1048\", \"2017-M009\", \"2016-0808\"), year (2013, 2016, 2017), winner_ioc (\"JPN\", \"DEN\", \"AUS\"), victorious_player_ranking (5, 3, 27), loser_hand (\"R\", \"L\"), loser_ioc (\"NED\", \"SRB\", \"POL\"), loser_seed (24, 16, 15), tourney_date (20160926, 20170424, 20161024), winner_ht (181, 181, 174), loser_id (201311, 201366, 201593), winner_rank_points (1343, 4236, 4236), loser_rank_points (2226, 1590, 3985), tourney_level (\"G\", \"W\", \"W\"), round (\"BR\", \"R16\", \"R32\"), winner_hand (\"R\", \"L\"), winning_player_ranking (5, 3, 27), loser_ht (182, 165, 185), match_num (223, 281, 209), loser_entry (\"\"), draw_size (64, 64, 4), tourney_name (\"Hong Kong\", \"Miami\", \"Gstaad\"), minutes (56, 130, 137), winner_name (\"Misaki Doi\", \"Victoria Azarenka\", \"Camila Giorgi\"), winner_entry (\"\"), best_of (3) | rankings : player_id (203465, 214733, 215435), ranking_points (1092, 1618, 2665), ranking_date (19980511, 20010129, 20110926), tours (28, 5, 2), ranking (371, 152, 1460)",
        "ambiguous_queries": [
            "select distinct winner_name, winning_player_ranking from matches order by winner_age limit 3",
            "select distinct winner_name, victorious_player_ranking from matches order by winner_age limit 3"
        ],
        "gold_ambiguity": {
            "match": "{\"rank\": [{\"matches\": [\"winning_player_ranking\"]}, {\"matches\": [\"victorious_player_ranking\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"rank\" refers to the schema \"matches\".\"victorious_player_ranking\"",
        "clear_ambiguity": "{\"rank\": {\"matches\": [\"victorious_player_ranking\"]}}",
        "gold_query": "select distinct winner_name, victorious_player_ranking from matches order by winner_age limit 3"
    },
    {
        "index": 124,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "column",
        "db_file": "column/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the template type code for template type description \"Book\".",
        "schema_without_content": "ref_template_types : type_id , template_type_description , code_name  | templates : template_details , template_type_code , version_number , template_id , date_effective_to , date_effective_from  | documents : document_id , document_name , document_description , other_details , template_id  | paragraphs : other_details , paragraph_text , document_id , paragraph_id",
        "schema_with_content": "ref_template_types : type_id (\"CV\", \"CV\", \"AD\"), template_type_description (\"Advertisement\", \"Paper\", \"Advertisement\"), code_name (\"CV\", \"CV\", \"AD\") | templates : template_details (\"\"), template_type_code (\"BK\", \"PPT\", \"BK\"), version_number (4, 2, 1), template_id (9, 1, 1), date_effective_to (\"1979-11-04 08:58:39\", \"2006-02-06 23:52:04\", \"1994-12-07 13:26:23\"), date_effective_from (\"1993-10-07 02:33:04\", \"2008-08-01 13:57:26\", \"1996-02-04 11:27:24\") | documents : document_id (3540024, 82, 385906526), document_name (\"Data base\", \"Summer Show\", \"Robbin CV\"), document_description (\"z\", \"w\", \"y\"), other_details (None), template_id (11, 4, 14) | paragraphs : other_details (None), paragraph_text (\"UK\", \"Ukraine\", \"Korea\"), document_id (80, 3830, 33930), paragraph_id (16615, 9946, 241)",
        "ambiguous_queries": [
            "select type_id from ref_template_types where template_type_description = 'Book'",
            "select code_name from ref_template_types where template_type_description = 'Book'"
        ],
        "gold_ambiguity": {
            "match": "{\"type code\": [{\"ref_template_types\": [\"type_id\"]}, {\"ref_template_types\": [\"code_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type code\" refers to the schema \"ref_template_types\".\"type_id\"",
        "clear_ambiguity": "{\"type code\": {\"ref_template_types\": [\"type_id\"]}}",
        "gold_query": "select type_id from ref_template_types where template_type_description = 'Book'"
    },
    {
        "index": 125,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Which language is the most popular in Aruba?",
        "schema_without_content": "city : countrycode , population , district , name , id  | sqlite_sequence : name , seq  | country : gnpold , region , code , localname , headofstate , gnp , continent , lifeexpectancy , code2 , indepyear , governmentform , population , capital , name , surfacearea  | countrylanguage : tongue , dialect , isofficial , countrycode , percentage",
        "schema_with_content": "city : countrycode (\"COK\", \"MLT\", \"GUM\"), population (376662, 471051, 1500000), district (\"Aquitaine\", \"Almaty\", \"Mecklenburg-Vorpomme\"), name (\"Pinhais\", \"Lugansk\", \"Zinder\"), id (517, 2416, 424) | sqlite_sequence : name (\"city\"), seq (4079) | country : gnpold (170.0, 1102.0, 34843.0), region (\"Southern Africa\", \"Caribbean\", \"Central Africa\"), code (\"BFA\", \"ZMB\", \"MNP\"), localname (\"Uganda\", \"Christmas Island\", \"Puerto Rico\"), headofstate (\"Nursultan Nazarbajev\", \"France-Albert RenÃ©\", \"Mohammad Omar\"), gnp (6232.0, 1043.0, 105954.0), continent (\"Europe\", \"North America\", \"Africa\"), lifeexpectancy (68.7, 56.6, 68.9), code2 (\"EC\", \"GE\", \"CV\"), indepyear (1941, 1847, 1912), governmentform (\"Administrated by the UN\", \"Nonmetropolitan Territory of New Zealand\", \"Dependent Territory of Norway\"), population (119000, 286000, 754700), capital (2729, 583, 1791), name (\"Nicaragua\", \"Saint Kitts and Nevis\", \"Turkey\"), surfacearea (59.0, 163610.0, 2510.0) | countrylanguage : tongue (\"Mboshi\", \"Susu\", \"Kissi\"), dialect (\"Mboshi\", \"Susu\", \"Kissi\"), isofficial (\"T\", \"F\"), countrycode (\"KEN\", \"CHE\", \"MNP\"), percentage (28.3, 69.9, 82.2)",
        "ambiguous_queries": [
            "select t2.tongue from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Aruba' order by percentage desc limit 1",
            "select t2.dialect from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Aruba' order by percentage desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"language\": [{\"countrylanguage\": [\"tongue\"]}, {\"countrylanguage\": [\"dialect\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"language\" refers to the schema \"countrylanguage\".\"dialect\"",
        "clear_ambiguity": "{\"language\": {\"countrylanguage\": [\"dialect\"]}}",
        "gold_query": "select t2.dialect from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Aruba' order by percentage desc limit 1"
    },
    {
        "index": 126,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "List each charge type and its amount.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : fee , charge_type , amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , owner_id , cell_number , state , last_name , city , first_name , home_phone 034-1670\", \"085.557.0379x84348\", street , zip_code  | dogs : date_of_birth , owner_id , gender , size_code , abandoned_yn , name , date_adopted , weight , date_arrived , breed_code , age , dog_id , date_departed  | professionals : state , cell_number , last_name , zip_code , email_address , city , home_phone , role_code , professional_id , first_name , street  | treatments : treatment_id , professional_id , cost_of_treatment , date_of_treatment , dog_id , treatment_type_code",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : fee (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"pearlie18@example.com\", \"hudson.favian@example.com\", \"ykris@example.com\"), owner_id (14, 7, 3), cell_number (\"341.667.8085\", \"121.381.3316x6535\", \"341.667.8085\"), state (\"Indiana\", \"Florida\", \"Virginia\"), last_name (\"Rippin\", \"Haley\", \"Nicolas\"), city (\"South Daisyfurt\", \"West Leonard\", \"East Hillardberg\"), first_name (\"Tre\", \"Johann\", \"Melisa\"), home_phone (\"085.557.0379x84348\", \"(544)034-1670\", \"085.557.0379x84348\"), street (\"692 Jaskolski Forges\", \"1204 Mae Highway Apt. 107\", \"15828 Spencer Extensions\"), zip_code (\"36871\", \"25609\", \"86010\") | dogs : date_of_birth (\"2012-01-27 05:11:53\", \"2010-11-11 07:11:53\", \"2018-03-17 04:05:12\"), owner_id (3, 12, 2), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), name (\"Houston\", \"Merritt\", \"Jeffrey\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-21 10:41:18\", \"2018-03-10 15:06:43\"), weight (\"9.8\", \"4.36\", \"6.92\"), date_arrived (\"2017-10-16 20:06:21\", \"2017-10-25 00:55:34\", \"2017-12-29 06:08:26\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"5\", \"3\", \"3\"), dog_id (11, 10, 3), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 15:05:16\", \"2018-03-25 10:25:46\") | professionals : state (\"California\", \"Montana\", \"Alabama\"), cell_number (\"1-181-670-9466\", \"962-983-8109x3509\", \"011.193.9081x3186\"), last_name (\"Frami\", \"Kshlerin\", \"Murazik\"), zip_code (\"33020\", \"77129\", \"41215\"), email_address (\"west.eula@example.net\", \"lourdes.lowe@example.net\", \"jacynthe.mclaughlin@example.net\"), city (\"Domenickton\", \"Domenickton\", \"East Ila\"), home_phone (\"320-508-6023\", \"971.048.3763x9404\", \"320-508-6023\"), role_code (\"Employee\", \"Veterenarian\"), professional_id (6, 3, 11), first_name (\"Olaf\", \"Taryn\", \"Brady\"), street (\"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\") | treatments : treatment_id (9, 5, 5), professional_id (7, 10, 4), cost_of_treatment (681, 656, 313), date_of_treatment (\"2018-03-16 10:27:36\", \"2018-03-11 04:23:15\", \"2018-03-16 10:27:36\"), dog_id (1, 4, 4), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "ambiguous_queries": [
            "select charge_type, amount from charges",
            "select charge_type, fee from charges"
        ],
        "gold_ambiguity": {
            "match": "{\"amount\": [{\"charges\": [\"amount\"]}, {\"charges\": [\"fee\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"amount\" refers to the schema \"charges\".\"fee\"",
        "clear_ambiguity": "{\"amount\": {\"charges\": [\"fee\"]}}",
        "gold_query": "select charge_type, fee from charges"
    },
    {
        "index": 127,
        "db_id": "singer",
        "ambig_type": "column",
        "db_file": "column/singer/singer.sqlite",
        "question": "What are the birth year and citizenship of singers?",
        "schema_without_content": "singer : date_of_birth , year_of_birth , singer_id , net_worth_millions , citizenship , name  | song : singer_id , song_id , sales , highest_position , title",
        "schema_with_content": "singer : date_of_birth (1940.0, 1942.0, 1962.0), year_of_birth (1940.0, 1942.0, 1962.0), singer_id (1, 4, 7), net_worth_millions (17.0, 17.4, 17.4), citizenship (\"Germany\", \"Australia\", \"Chile\"), name (\"Iris Fontbona\", \"Liliane Bettencourt\", \"Jacqueline Mars\") | song : singer_id (2, 6, 7), song_id (4, 6, 3), sales (275000.0, 292000.0, 275000.0), highest_position (1.0, 3.0), title (\"Yeah\", \"Cha Cha Slide\", \"Mysterious Girl\")",
        "ambiguous_queries": [
            "select date_of_birth, citizenship from singer",
            "select year_of_birth, citizenship from singer"
        ],
        "gold_ambiguity": {
            "match": "{\"birth year\": [{\"singer\": [\"date_of_birth\"]}, {\"singer\": [\"year_of_birth\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth year\" refers to the schema \"singer\".\"date_of_birth\"",
        "clear_ambiguity": "{\"birth year\": {\"singer\": [\"date_of_birth\"]}}",
        "gold_query": "select date_of_birth, citizenship from singer"
    },
    {
        "index": 128,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "schema_without_content": "continents : contid , continent  | countries : id , nationid , continent , countryname  | car_makers : maker , fullname , id , country  | model_list : modelid , maker , model  | car_names : make , model , makeid  | cars_data : horsepower , mpg , accelerate , year , id , weight , cylinders , edispl",
        "schema_with_content": "continents : contid (2, 3, 3), continent (\"australia\", \"australia\", \"australia\") | countries : id (7, 1, 8), nationid (7, 1, 8), continent (3, 5, 1), countryname (\"france\", \"germany\", \"new zealand\") | car_makers : maker (\"renault\", \"chrysler\", \"renault\"), fullname (\"Renault\", \"American Motor Company\", \"Daimler Benz\"), id (11, 19, 1), country (\"2\", \"5\", \"3\") | model_list : modelid (31, 25, 11), maker (11, 23, 6), model (\"triumph\", \"ford\", \"mercedes\") | car_names : make (\"mercury capri 2000\", \"dodge aspen\", \"volvo 264gl\"), model (\"triumph\", \"nissan\", \"renault\"), makeid (114, 299, 155) | cars_data : horsepower (\"193\", \"84\", \"95\"), mpg (\"30.5\", \"16.9\", \"29.8\"), accelerate (13.5, 15.8, 23.5), year (1980, 1976, 1974), id (162, 17, 303), weight (2545, 3230, 2905), cylinders (6, 5, 4), edispl (91.0, 429.0, 183.0)",
        "ambiguous_queries": [
            "select t1.id, t1.countryname from countries as t1 join car_makers as t2 on t1.id = t2.country group by t1.id having count(*) > 3 union select t1.id, t1.countryname from countries as t1 join car_makers as t2 on t1.id = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'",
            "select t1.nationid, t1.countryname from countries as t1 join car_makers as t2 on t1.nationid = t2.country group by t1.nationid having count(*) > 3 union select t1.nationid, t1.countryname from countries as t1 join car_makers as t2 on t1.nationid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'"
        ],
        "gold_ambiguity": {
            "match": "{\"id\": [{\"countries\": [\"id\"]}, {\"countries\": [\"nationid\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"id\" refers to the schema \"countries\".\"id\"",
        "clear_ambiguity": "{\"id\": {\"countries\": [\"id\"]}}",
        "gold_query": "select t1.id, t1.countryname from countries as t1 join car_makers as t2 on t1.id = t2.country group by t1.id having count(*) > 3 union select t1.id, t1.countryname from countries as t1 join car_makers as t2 on t1.id = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'"
    },
    {
        "index": 129,
        "db_id": "real_estate_properties",
        "ambig_type": "column",
        "db_file": "column/real_estate_properties/real_estate_properties.sqlite",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "schema_without_content": "ref_feature_types : feature_type_code , feature_type_name  | ref_property_types : property_type_code , property_type_description  | other_available_features : feature_type_code , feature_name , feature_id , feature_description  | properties : room_count , oth_feature_3 , property_id , vendor_requested_price , fld_feature_2 , shp_feature_3 , agreed_selling_price , hse_feature_2 , oth_feature_2 , buyer_offered_price , apt_feature_2 , date_sold , title , apt_feature_1 , hse_feature_3 , fld_feature_3 , oth_feature_1 , name , shp_feature_1 , other_property_details , property_address , property_type_code , date_on_market , hse_feature_1 , fld_feature_1 , apt_feature_3 , shp_feature_2  | other_property_features : feature_id , property_id , property_feature_description",
        "schema_with_content": "ref_feature_types : feature_type_code (\"Amenity\", \"Security\"), feature_type_name (\"Amenity, eg Pool.\", \"Securiyt, eg Burglar Alarm.\") | ref_property_types : property_type_code (\"House\", \"Apartment\", \"Shop\"), property_type_description (\"Shop, Retail Outlet.\", \"Field, Meadow.\", \"Apartment, Flat, Condo, etc.\") | other_available_features : feature_type_code (\"Amenity\", \"Security\"), feature_name (\"AirCon\", \"Pool\", \"BurglarAlarm\"), feature_id (2, 3, 4), feature_description (\"Air Conditioning.\", \"Swimming Pool.\", \"Burglar Alarm\") | properties : room_count (6, 3, 6), oth_feature_3 (None), property_id (2, 3, 13), vendor_requested_price (983.8596, 2198735.095, 6713620.9), fld_feature_2 (None), shp_feature_3 (None), agreed_selling_price (4201.8, 244353758.1824, 3344706.5755), hse_feature_2 (None), oth_feature_2 (None), buyer_offered_price (3520911.5258, 13991131.434, 2), apt_feature_2 (\"odio\", \"autem\", \"autem\"), date_sold (\"1997-11-07 20:22:05\", \"1979-05-13 16:58:06\", \"1979-05-13 16:58:06\"), title (\"wall street\", \"renoir\", \"renoir\"), apt_feature_1 (\"fuga\", \"et\", \"fuga\"), hse_feature_3 (None), fld_feature_3 (None), oth_feature_1 (None), name (\"wall street\", \"renoir\", \"renoir\"), shp_feature_1 (None), other_property_details (None), property_address (\"2088 Bashirian Fork Suite 337\nFaustinoport, MT 16771-9320\", \"743 Ephraim Greens\nAnniemouth, HI 47084-3853\", \"092 Paucek Highway Apt. 772\nEast Erika, IA 61358\"), property_type_code (\"Shop\", \"Other\", \"Apartment\"), date_on_market (\"1986-12-31 10:05:32\", \"1994-02-14 02:27:13\", \"1981-08-23 05:40:38\"), hse_feature_1 (None), fld_feature_1 (None), apt_feature_3 (None), shp_feature_2 (None) | other_property_features : feature_id (3, 4, 2), property_id (4, 7, 12), property_feature_description (\"odio\", \"ad\", \"et\")",
        "ambiguous_queries": [
            "select name from properties where property_type_code = 'House' union select name from properties where property_type_code = 'Apartment' and room_count > 1",
            "select title from properties where property_type_code = 'House' union select title from properties where property_type_code = 'Apartment' and room_count > 1"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"properties\": [\"name\"]}, {\"properties\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"properties\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"properties\": [\"name\"]}}",
        "gold_query": "select name from properties where property_type_code = 'House' union select name from properties where property_type_code = 'Apartment' and room_count > 1"
    },
    {
        "index": 130,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "schema_without_content": "conductor : title , conductor_id , full_name , age , year_of_work , nationality  | orchestra : orchestra , year_of_founded , conductor_id , record_company , major_record_format , orchestra_id  | performance : performance_id , share , weekly_rank , official_ratings_ , orchestra_id , type , date  | show : result , if_first_show , show_id , performance_id , attendance",
        "schema_with_content": "conductor : title (\"Charles Dutoit\", \"Robert Craft\", \"Robert Craft\"), conductor_id (11, 3, 2), full_name (\"Charles Dutoit\", \"Robert Craft\", \"Robert Craft\"), age (42, 50, 42), year_of_work (11, 20, 20), nationality (\"USA\", \"UK\", \"France\") | orchestra : orchestra (\"San Francisco Symphony Orchestra\", \"Kirov Orchestra\", \"Royal Concertgebouw Orchestra\"), year_of_founded (2002.0, 2002.0, 2008.0), conductor_id (5, 7, 8), record_company (\"Koch Records / Naxos Records\", \"Koch Records / Naxos Records\", \"Delos Records\"), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra_id (12, 8, 10) | performance : performance_id (4, 8, 9), share (\"43.7%\", \"29.4%\", \"34%\"), weekly_rank (\"2\", \"13\", \"2\"), official_ratings_(millions) (8.36, 7.28, 9.28), orchestra_id (5, 10, 9), type (\"Auditions 3\", \"Live final\", \"Live final results\"), date (\"11 June\", \"2007\", \"12 June\") | show : result (\"T\", \"F\"), if_first_show (\"Fir Park\", \"Fir Park\", \"Hampden Park\"), show_id (1, 3, 5), performance_id (1, 2, 1), attendance (1026.0, 1026.0, 2431.0)",
        "ambiguous_queries": [
            "select t1.full_name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
            "select t1.title from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"conductor\": [\"full_name\"]}, {\"conductor\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"conductor\".\"full_name\"",
        "clear_ambiguity": "{\"name\": {\"conductor\": [\"full_name\"]}}",
        "gold_query": "select t1.full_name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1"
    },
    {
        "index": 131,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "How many matches were played in each year?",
        "schema_without_content": "players : player_id , first_name , last_name , birth_date , hand , country_code  | matches : winner_rank , tourney_date , draw_size , match_year , tourney_level , tourney_id , loser_seed , winner_rank_points , tourney_name , round , loser_rank , loser_age , loser_entry , winner_entry , winner_age , winner_name , loser_ioc , winner_ioc , score  6-3\", \"6-3 6-7 7-6\", \"6-4 7-6\", winner_hand , loser_ht , winner_ht , loser_hand , winner_id , event_year , best_of , minutes , loser_id , loser_rank_points , loser_name , surface , winner_seed , match_num  | rankings : ranking_date , tours , player_id , ranking , ranking_points",
        "schema_with_content": "players : player_id (216451, 204271, 216775), first_name (\"Marina Raluca\", \"Giada\", \"Kyung Hwa\"), last_name (\"Parrilla\", \"Espindola Mancera\", \"Gideskog\"), birth_date (19761106, 20000310, 19801018), hand (\"\", \"R\", \"U\"), country_code (\"SEN\", \"CYP\", \"LUX\") | matches : winner_rank (34, 50, 15), tourney_date (20170306, 20170508, 20170828), draw_size (12, 12, 64), match_year (2013, 2016, 2017), tourney_level (\"P\", \"G\", \"G\"), tourney_id (\"2016-M004\", \"2017-M009\", \"2016-1051\"), loser_seed (26, 6, 21), winner_rank_points (3710, 1900, 6860), tourney_name (\"Budapest\", \"Washington\", \"Bucharest\"), round (\"QF\", \"RR\", \"RR\"), loser_rank (12, 4, 81), loser_age (32.0164271047, 27.3867214237, 26.6830937714), loser_entry (\"\"), winner_entry (\"\"), winner_age (27.1238877481, 28.0355920602, 25.7577002053), winner_name (\"Svetlana Kuznetsova\", \"Svetlana Kuznetsova\", \"Irina Camelia Begu\"), loser_ioc (\"POL\", \"ESP\", \"USA\"), winner_ioc (\"USA\", \"HUN\", \"FRA\"), score (\"4-6 7-6(2) 6-3\", \"6-3 6-7(2) 7-6(5)\", \"6-4 7-6(6)\"), winner_hand (\"R\", \"L\"), loser_ht (164, 173, 180), winner_ht (164, 178, 179), loser_hand (\"R\", \"L\"), winner_id (201540, 202428, 201518), event_year (2013, 2016, 2017), best_of (3), minutes (134, 119, 90), loser_id (201535, 201596, 201455), loser_rank_points (3090, 3698, 1177), loser_name (\"Julia Goerges\", \"Karolina Pliskova\", \"Samantha Stosur\"), surface (\"Hard\", \"Clay\", \"Grass\"), winner_seed (28, 30, 5), match_num (293, 216, 296) | rankings : ranking_date (20060904, 19890522, 20010219), tours (36, 11, 36), player_id (204413, 206107, 211896), ranking (654, 133, 209), ranking_points (4776, 5685, 5370)",
        "ambiguous_queries": [
            "select count(*), match_year from matches group by match_year",
            "select count(*), event_year from matches group by event_year"
        ],
        "gold_ambiguity": {
            "match": "{\"year\": [{\"matches\": [\"match_year\"]}, {\"matches\": [\"event_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year\" refers to the schema \"matches\".\"match_year\"",
        "clear_ambiguity": "{\"year\": {\"matches\": [\"match_year\"]}}",
        "gold_query": "select count(*), match_year from matches group by match_year"
    },
    {
        "index": 132,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What are the different models for the cards produced after 1980?",
        "schema_without_content": "continents : continent , contid  | countries : countryname , continent , countryid  | car_makers : country , id , maker , fullname  | model_list : model_name , vehicle_name , maker , modelid  | car_names : make , makeid , model  | cars_data : horsepower , cylinders , year , edispl , weight , mpg , id , accelerate",
        "schema_with_content": "continents : continent (\"asia\", \"america\", \"america\"), contid (4, 3, 3) | countries : countryname (\"russia\", \"egypt\", \"france\"), continent (5, 1, 5), countryid (14, 8, 8) | car_makers : country (\"8\", \"2\", \"4\"), id (8, 4, 16), maker (\"mazda\", \"mazda\", \"fiat\"), fullname (\"General Motors\", \"Toyota\", \"Citroen\") | model_list : model_name (\"capri\", \"plymouth\", \"saab\"), vehicle_name (\"capri\", \"plymouth\", \"saab\"), maker (1, 17, 14), modelid (13, 23, 33) | car_names : make (\"chevrolet monte carlo s\", \"buick century special\", \"cadillac seville\"), makeid (31, 39, 168), model (\"volvo\", \" volkswagen\", \"pontiac\") | cars_data : horsepower (\"129\", \"93\", \"95\"), cylinders (8, 6, 6), year (1976, 1975, 1979), edispl (144.0, 429.0, 307.0), weight (2545, 2789, 2451), mpg (\"17\", \"20.3\", \"19.1\"), id (373, 21, 205), accelerate (9.0, 20.0, 20.5)",
        "ambiguous_queries": [
            "select distinct t1.model_name from model_list as t1 join car_names as t2 on t1.model_name = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980",
            "select distinct t1.vehicle_name from model_list as t1 join car_names as t2 on t1.vehicle_name = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980"
        ],
        "gold_ambiguity": {
            "match": "{\"models\": [{\"model_list\": [\"model_name\"]}, {\"model_list\": [\"vehicle_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"models\" refers to the schema \"model_list\".\"model_name\"",
        "clear_ambiguity": "{\"models\": {\"model_list\": [\"model_name\"]}}",
        "gold_query": "select distinct t1.model_name from model_list as t1 join car_names as t2 on t1.model_name = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980"
    },
    {
        "index": 133,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , cell_number 399-3116\", email_address , last_name , street , zip_code , city , first_name , state , home_phone 997-7627\", \"563-0260x454\" | dogs : dog_id , owner_id , age , abandoned_yn , date_departed , date_arrived , gender , size_code , weight , breed_code , date_adopted , name , date_of_birth  | professionals : home_phone 304-4499x59146\", \"1-609-566-2752x25197\", role_code , state , zip_code , email_address , last_name , mobile_number , first_name , professional_id , city , street , phone_number  | treatments : treatment_type_code , professional_id , treatment_id , cost_of_treatment , dog_id , date_of_treatment",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (9, 5, 2), cell_number (\"633.455.3045x85484\", \"1-739-421-2225x38148\", \"(257)399-3116\"), email_address (\"zboncak.madonna@example.net\", \"margaretta.runte@example.net\", \"fschoen@example.net\"), last_name (\"Mertz\", \"Feil\", \"Hauck\"), street (\"1204 Mae Highway Apt. 107\", \"60352 Kayleigh Crossing Suite 700\", \"692 Jaskolski Forges\"), zip_code (\"86010\", \"93165\", \"25609\"), city (\"New Margaretteborough\", \"New Margaretteborough\", \"East Maribelbury\"), first_name (\"Heather\", \"Cindy\", \"Lorenz\"), state (\"NorthDakota\", \"Mississippi\", \"Maryland\"), home_phone (\"318-052-6573\", \"(058)997-7627\", \"(799)563-0260x454\") | dogs : dog_id (9, 11, 13), owner_id (6, 11, 11), age (\"4\", \"5\", \"6\"), abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 06:58:44\", \"2018-03-25 04:50:22\"), date_arrived (\"2018-01-17 11:44:16\", \"2018-01-02 03:15:29\", \"2017-06-18 19:45:38\"), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"8.96\", \"4.36\", \"1.39\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-03-06 16:32:11\", \"2018-03-08 15:03:00\"), name (\"Lyric\", \"Houston\", \"George\"), date_of_birth (\"2018-03-17 04:05:12\", \"2012-05-03 21:42:25\", \"2012-10-14 14:44:37\") | professionals : home_phone (\"320-508-6023\", \"(920)304-4499x59146\", \"1-609-566-2752x25197\"), role_code (\"Employee\", \"Veterenarian\"), state (\"NorthCarolina\", \"Wisconsin\", \"NorthCarolina\"), zip_code (\"02281\", \"80775\", \"07412\"), email_address (\"mekhi.little@example.org\", \"mekhi.little@example.org\", \"uboehm@example.org\"), last_name (\"Hayes\", \"Murazik\", \"Ullrich\"), mobile_number (\"00230569697\", \"889-940-2676\", \"328.842.3792\"), first_name (\"Monte\", \"Ruben\", \"Velva\"), professional_id (7, 11, 8), city (\"Domenickton\", \"New Laurytown\", \"New Laurytown\"), street (\"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \"), phone_number (\"00230569697\", \"889-940-2676\", \"328.842.3792\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (10, 8, 4), treatment_id (1, 3, 7), cost_of_treatment (349, 945, 349), dog_id (1, 13, 7), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-15 19:10:02\", \"2018-03-24 22:25:58\")",
        "ambiguous_queries": [
            "select t1.professional_id, t1.mobile_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
            "select t1.professional_id, t1.phone_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"
        ],
        "gold_ambiguity": {
            "match": "{\"cell phone\": [{\"professionals\": [\"mobile_number\"]}, {\"professionals\": [\"phone_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cell phone\" refers to the schema \"professionals\".\"mobile_number\"",
        "clear_ambiguity": "{\"cell phone\": {\"professionals\": [\"mobile_number\"]}}",
        "gold_query": "select t1.professional_id, t1.mobile_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"
    },
    {
        "index": 134,
        "db_id": "battle_death",
        "ambig_type": "column",
        "db_file": "column/battle_death/battle_death.sqlite",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "schema_without_content": "battle : result , bulgarian_commander , designation , title , latin_commander , date , id  | ship : location , lost_in_battle , tonnage , ship_type , disposition_of_ship , id , name  | death : caused_by_ship_id , killed , id , note , injured",
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), bulgarian_commander (\"Unknown\", \"Boril\", \"Kaloyan\"), designation (\"Battle of Rusion\", \"Battle of Philippopolis\", \"Battle of Rodosto\"), title (\"Battle of Rusion\", \"Battle of Philippopolis\", \"Battle of Rodosto\"), latin_commander (\"Boniface of Montferrat\", \"Unknown\", \"Thierry de Termond\"), date (\"14 April 1205\", \"4 September 1207\", \"4 September 1207\"), id (6, 3, 2) | ship : location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), lost_in_battle (5, 5, 5), tonnage (\"t\", \"391\", \"225\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), disposition_of_ship (\"Wrecked\", \"Scuttled\", \"Scuttled\"), id (7, 6, 5), name (\"Bacchus\", \"HMS Atalanta\", \"Three Brothers\") | death : caused_by_ship_id (4, 3, 1), killed (2, 3, 2), id (10, 5, 8), note (\"WestMidnapore, West Bengal\", \"Sundargarh, Odisha\", \"East Champaran, Bihar\"), injured (0, 9, 5)",
        "ambiguous_queries": [
            "select title, result from battle where bulgarian_commander != 'Boril'",
            "select designation, result from battle where bulgarian_commander != 'Boril'"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"battle\": [\"title\"]}, {\"battle\": [\"designation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"battle\".\"designation\"",
        "clear_ambiguity": "{\"name\": {\"battle\": [\"designation\"]}}",
        "gold_query": "select designation, result from battle where bulgarian_commander != 'Boril'"
    },
    {
        "index": 135,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "schema_without_content": "employee : given_name , employee_id , age , city , full_name  | shop : name , manager_name , district , location , number_products , shop_id  | hiring : employee_id , is_full_time , shop_id , start_from  | evaluation : bonus , year_awarded , employee_id",
        "schema_with_content": "employee : given_name (\"Mark Regan\", \"Jason Hobson\", \"Jason Hobson\"), employee_id (6, 3, 6), age (28, 36, 23), city (\"Bristol\", \"Bristol\", \"Bath\"), full_name (\"Mark Regan\", \"Jason Hobson\", \"Jason Hobson\") | shop : name (\"KuPS\", \"HJK\", \"FC Lahti\"), manager_name (\"Kai NyyssÃ¶nen\", \"Ilkka MÃ¤kelÃ¤\", \"Kai NyyssÃ¶nen\"), district (\"Tapiolan Urheilupuisto\", \"Tapiolan Urheilupuisto\", \"WiklÃ¶f Holding Arena\"), location (\"Kotka\", \"Mariehamn\", \"Helsinki\"), number_products (4780, 10770, 6000), shop_id (8, 3, 9) | hiring : employee_id (2, 5, 1), is_full_time (\"T\", \"F\"), shop_id (2, 1, 2), start_from (\"2011\", \"2011\", \"2009\") | evaluation : bonus (2900.0, 3000.0, 3000.0), year_awarded (\"2016\", \"2017\", \"2018\"), employee_id (\"10\", \"7\", \"7\")",
        "ambiguous_queries": [
            "select t1.full_name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
            "select t1.given_name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"employee\": [\"full_name\"]}, {\"employee\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"employee\".\"full_name\"",
        "clear_ambiguity": "{\"name\": {\"employee\": [\"full_name\"]}}",
        "gold_query": "select t1.full_name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1"
    },
    {
        "index": 136,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the names of all the countries that became independent after 1950?",
        "schema_without_content": "city : id , name , population , district , countrycode  | sqlite_sequence : seq , name  | country : capital , population , headofstate , lifeexpectancy , localname , indepyear , code , code2 , gnp , surfacearea , title , region , gnpold , continent , governmentform , nation  | countrylanguage : percentage , countrycode , isofficial , language",
        "schema_with_content": "city : id (127, 1451, 1223), name (\"Wendeng\", \"Guadalupe\", \"Pitesti\"), population (96734, 371601, 424194), district (\"Diourbel\", \"Bryssel\", \"Malopolskie\"), countrycode (\"USA\", \"ZAF\", \"JAM\") | sqlite_sequence : seq (4079), name (\"city\") | country : capital (3068, 2928, 34), population (181000, 17000, 68470000), headofstate (\"Mireya Elisa Moscoso RodrÃ­guez\", \"Henri\", \"Jacques Chirac\"), lifeexpectancy (56.5, 73.2, 40.4), localname (\"Virgin Islands of the United States\", \"Le Gabon\", \"Yisraâel/Israâil\"), indepyear (1983, 1957, 1816), code (\"CPV\", \"KOR\", \"AFG\"), code2 (\"LY\", \"BS\", \"CY\"), gnp (65707.0, 37966.0, 3459.0), surfacearea (603700.0, 29800.0, 160.0), title (\"Saint Pierre and Miquelon\", \"Cayman Islands\", \"Togo\"), region (\"Melanesia\", \"Antarctica\", \"Southern and Central Asia\"), gnpold (18898.0, 58623.0, 160151.0), continent (\"Oceania\", \"Asia\", \"South America\"), governmentform (\"Independent Church State\", \"US Territory\", \"Special Administrative Region of China\"), nation (\"Saint Pierre and Miquelon\", \"Cayman Islands\", \"Togo\") | countrylanguage : percentage (12.4, 8.0, 26.9), countrycode (\"DMA\", \"TUR\", \"TWN\"), isofficial (\"T\", \"F\"), language (\"Pitcairnese\", \"Maori\", \"Russian\")",
        "ambiguous_queries": [
            "select nation from country where indepyear > 1950",
            "select title from country where indepyear > 1950"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"country\": [\"nation\"]}, {\"country\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"country\".\"nation\"",
        "clear_ambiguity": "{\"names\": {\"country\": [\"nation\"]}}",
        "gold_query": "select nation from country where indepyear > 1950"
    },
    {
        "index": 137,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "schema_without_content": "stadium : appellation , lowest , capacity , highest , title , stadium_id , location , average  | singer : song_release_year , country , song_name , age , name , singer_id , is_male  | concert : theme , year , concert_name , stadium_id , concert_id  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "stadium : appellation (\"Gayfield Park\", \"Stark's Park\", \"Stark's Park\"), lowest (533, 466, 1057), capacity (4125, 4000, 52500), highest (1125, 4812, 780), title (\"Gayfield Park\", \"Stark's Park\", \"Stark's Park\"), stadium_id (3, 5, 1), location (\"Ayr United\", \"Arbroath\", \"Peterhead\"), average (2106, 1477, 1477) | singer : song_release_year (\"2014\", \"2008\", \"1992\"), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Hey Oh\", \"Sun\", \"Hey Oh\"), age (43, 25, 25), name (\"Timbaland\", \"John Nizinik\", \"John Nizinik\"), singer_id (2, 1, 1), is_male (\"F\", \"T\") | concert : theme (\"Free choice\", \"Bleeding Love\", \"Bleeding Love\"), year (\"2014\", \"2015\"), concert_name (\"Week 2\", \"Auditions\", \"Super bootcamp\"), stadium_id (\"9\", \"7\", \"10\"), concert_id (5, 3, 1) | singer_in_concert : concert_id (3, 3, 3), singer_id (\"4\", \"3\", \"5\")",
        "ambiguous_queries": [
            "select t2.title, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.title, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
            "select t2.appellation, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.appellation, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"stadium\": [\"title\"]}, {\"stadium\": [\"appellation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"stadium\".\"appellation\"",
        "clear_ambiguity": "{\"name\": {\"stadium\": [\"appellation\"]}}",
        "gold_query": "select t2.appellation, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.appellation, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015"
    },
    {
        "index": 138,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , email_address , last_name , cell_number , zip_code , street , home_phone 997-7627\", \"893-862-5295x61709\", city , first_name , state  | dogs : abandoned_yn , size_code , date_arrived , name , weight , date_of_birth , dog_id , owner_id , date_departed , date_adopted , gender , breed_code , age  | professionals : state , home_phone 304-4499x59146\", \"320-508-6023\", \"312.216.3352\", zip_code , first_name , position_code , job_code , email_address , street , professional_id , last_name , cell_number , city  | treatments : treatment_type_code , cost_of_treatment , date_of_treatment , treatment_id , professional_id , dog_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (9, 7, 10), email_address (\"lynn81@example.org\", \"fschoen@example.net\", \"zboncak.madonna@example.net\"), last_name (\"Ondricka\", \"Rippin\", \"DuBuque\"), cell_number (\"633.455.3045x85484\", \"559.874.3011x989\", \"633.455.3045x85484\"), zip_code (\"36871\", \"00589\", \"22731\"), street (\"1858 Jan Park\", \"89011 Kertzmann Spring Suite 642\", \"6950 Katherine Forges Apt. 630\"), home_phone (\"916.976.9480x13851\", \"(058)997-7627\", \"893-862-5295x61709\"), city (\"South Afton\", \"East Hillardberg\", \"Lake Carleyborough\"), first_name (\"Tre\", \"Heather\", \"Rachelle\"), state (\"NorthDakota\", \"Mississippi\", \"Wisconsin\") | dogs : abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-12-29 06:08:26\", \"2017-12-29 23:24:13\", \"2017-10-25 00:55:34\"), name (\"Betty\", \"Jeffrey\", \"Merritt\"), weight (\"9.8\", \"6.92\", \"8.04\"), date_of_birth (\"2008-10-09 22:38:53\", \"2008-10-09 22:38:53\", \"2010-11-11 07:11:53\"), dog_id (2, 7, 4), owner_id (2, 14, 5), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 02:47:40\", \"2018-03-25 15:05:16\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-18 15:12:50\", \"2018-03-08 15:03:00\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"6\", \"6\", \"8\") | professionals : state (\"Montana\", \"NorthCarolina\", \"Hawaii\"), home_phone (\"(920)304-4499x59146\", \"320-508-6023\", \"312.216.3352\"), zip_code (\"67980\", \"06646\", \"34041\"), first_name (\"Olaf\", \"Brady\", \"Lesly\"), position_code (\"Employee\", \"Veterenarian\"), job_code (\"Employee\", \"Veterenarian\"), email_address (\"jacynthe.mclaughlin@example.net\", \"mekhi.little@example.org\", \"schneider.kathryne@example.org\"), street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), professional_id (9, 9, 15), last_name (\"Hyatt\", \"Watsica\", \"Watsica\"), cell_number (\"00230569697\", \"328.842.3792\", \"1-258-285-4707x8020\"), city (\"Raynorfort\", \"West Heidi\", \"New Laurytown\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (852, 313, 945), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-23 13:52:10\", \"2018-03-16 10:27:36\"), treatment_id (11, 7, 7), professional_id (4, 4, 14), dog_id (14, 2, 1)",
        "ambiguous_queries": [
            "select t1.professional_id, t1.position_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
            "select t1.professional_id, t1.job_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"
        ],
        "gold_ambiguity": {
            "match": "{\"role\": [{\"professionals\": [\"position_code\"]}, {\"professionals\": [\"job_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"role\" refers to the schema \"professionals\".\"job_code\"",
        "clear_ambiguity": "{\"role\": {\"professionals\": [\"job_code\"]}}",
        "gold_query": "select t1.professional_id, t1.job_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"
    },
    {
        "index": 139,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : city , cell_number , last_name , owner_id , home_phone 747-5094x8134\", \"916.976.9480x13851\", first_name , state , street , email_address , zip_code  | dogs : breed_code , gender , date_adopted , date_of_birth , date_arrived , moniker , date_departed , abandoned_yn , age , weight , size_code , dog_id , appellation , owner_id  | professionals : street , first_name , role_code , cell_number 908-7311x065\", \"609-405-2990\", email_address , home_phone 2898266914\", \"338-3342x585\", \"246-951-0080x76716\", professional_id , state , last_name , city , zip_code  | treatments : cost_of_treatment , date_of_treatment , dog_id , professional_id , treatment_id , treatment_type_code",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : city (\"Port Zackery\", \"Lake Carleyborough\", \"Lake Carleyborough\"), cell_number (\"481-483-9083x37986\", \"739-136-7202\", \"478.978.0729\"), last_name (\"Ondricka\", \"Hauck\", \"Price\"), owner_id (9, 1, 8), home_phone (\"363.948.1090\", \"(094)747-5094x8134\", \"916.976.9480x13851\"), first_name (\"Orlando\", \"Adelle\", \"Emelie\"), state (\"Arkansas\", \"NewYork\", \"Pennsylvania\"), street (\"1858 Jan Park\", \"0647 Hintz Village Apt. 024\", \"60352 Kayleigh Crossing Suite 700\"), email_address (\"angeline99@example.com\", \"hudson.favian@example.com\", \"zboncak.madonna@example.net\"), zip_code (\"61019\", \"11990\", \"86010\") | dogs : breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), date_adopted (\"2018-02-27 11:54:35\", \"2018-03-07 21:45:43\", \"2018-03-18 15:12:50\"), date_of_birth (\"2012-10-14 14:44:37\", \"2012-10-14 14:44:37\", \"2012-07-11 17:15:10\"), date_arrived (\"2017-10-16 20:06:21\", \"2017-10-16 20:06:21\", \"2018-01-02 03:15:29\"), moniker (\"Narciso\", \"Houston\", \"George\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 13:07:04\", \"2018-03-25 06:29:10\"), abandoned_yn (\"1\", \"0\"), age (\"3\", \"4\", \"2\"), weight (\"4.36\", \"2.18\", \"2.18\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (9, 9, 12), appellation (\"Narciso\", \"Houston\", \"George\"), owner_id (14, 14, 1) | professionals : street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\"), first_name (\"Sigurd\", \"Jayson\", \"Vernice\"), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"1-258-285-4707x8020\", \"(369)908-7311x065\", \"609-405-2990\"), email_address (\"west.eula@example.net\", \"delphine29@example.com\", \"marquardt.furman@example.org\"), home_phone (\"+71(6)2898266914\", \"(230)338-3342x585\", \"246-951-0080x76716\"), professional_id (10, 15, 15), state (\"Hawaii\", \"Montana\", \"California\"), last_name (\"Braun\", \"Christiansen\", \"Hayes\"), city (\"Domenickton\", \"Raynorfort\", \"East Ila\"), zip_code (\"41215\", \"02281\", \"80775\") | treatments : cost_of_treatment (429, 668, 656), date_of_treatment (\"2018-03-11 04:23:15\", \"2018-03-04 20:33:43\", \"2018-03-01 04:14:46\"), dog_id (13, 13, 12), professional_id (5, 10, 5), treatment_id (14, 13, 7), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "ambiguous_queries": [
            "select t1.appellation, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = (select breed_code from dogs group by breed_code order by count(*) asc limit 1)",
            "select t1.moniker, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = (select breed_code from dogs group by breed_code order by count(*) asc limit 1)"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"dogs\": [\"appellation\"]}, {\"dogs\": [\"moniker\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"dogs\".\"moniker\"",
        "clear_ambiguity": "{\"names\": {\"dogs\": [\"moniker\"]}}",
        "gold_query": "select t1.moniker, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = (select breed_code from dogs group by breed_code order by count(*) asc limit 1)"
    },
    {
        "index": 140,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "column",
        "db_file": "column/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_to , template_id , template_type_code , version_number , template_details , date_effective_from  | documents : template_id , document_id , document_name , document_description , other_details  | paragraphs : segment_text , other_details , paragraph_id , document_id , para_content",
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"CV\", \"Advertisement\"), template_type_code (\"BK\", \"PPT\", \"BK\") | templates : date_effective_to (\"1989-11-24 19:06:06\", \"2000-10-22 11:57:12\", \"2001-04-18 09:29:52\"), template_id (14, 24, 15), template_type_code (\"PPT\", \"BK\", \"PPT\"), version_number (5, 1, 7), template_details (\"\"), date_effective_from (\"2005-02-20 00:31:34\", \"1984-08-07 13:36:26\", \"2003-06-05 04:03:45\") | documents : template_id (6, 1, 14), document_id (0, 76, 16514113), document_name (\"A history of Arts\", \"How to write a CV\", \"Customer reviews\"), document_description (\"n\", \"b\", \"k\"), other_details (None) | paragraphs : segment_text (\"Senegal\", \"Korea\", \"Jersey\"), other_details (None), paragraph_id (1104059, 510442723, 571212310), document_id (651512, 16514113, 3540024), para_content (\"Senegal\", \"Korea\", \"Jersey\")",
        "ambiguous_queries": [
            "select t1.paragraph_id, t1.para_content from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
            "select t1.paragraph_id, t1.segment_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'"
        ],
        "gold_ambiguity": {
            "match": "{\"texts\": [{\"paragraphs\": [\"para_content\"]}, {\"paragraphs\": [\"segment_text\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"texts\" refers to the schema \"paragraphs\".\"para_content\"",
        "clear_ambiguity": "{\"texts\": {\"paragraphs\": [\"para_content\"]}}",
        "gold_query": "select t1.paragraph_id, t1.para_content from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'"
    },
    {
        "index": 141,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "Find the first name and country code of the oldest player.",
        "schema_without_content": "players : last_name , player_id , first_name , hand , country_id , birth_date , nationality_code  | matches : winner_rank_points , tourney_id , match_num , score  6-2\", winner_entry , loser_ht , tourney_level , tourney_date , loser_age , winner_ioc , round , loser_hand , loser_rank , winner_seed , tourney_name , draw_size , loser_entry , loser_name , winner_age , year , minutes , loser_ioc , winner_rank , loser_seed , loser_id , winner_ht , winner_name , loser_rank_points , winner_id , winner_hand , surface , best_of  | rankings : ranking , tours , ranking_date , player_id , ranking_points",
        "schema_with_content": "players : last_name (\"Biryukova\", \"Stigliano\", \"Perez Somarriba\"), player_id (209439, 202006, 206825), first_name (\"Tapiwa\", \"Maria Andreina\", \"Misleydis\"), hand (\"\", \"L\", \"L\"), country_id (\"ANT\", \"AZE\", \"BOT\"), birth_date (19870311, 19760729, 19780208), nationality_code (\"ANT\", \"AZE\", \"BOT\") | matches : winner_rank_points (1015, 3540, 1015), tourney_id (\"2016-0806\", \"2017-0406\", \"2016-0528\"), match_num (148, 274, 208), score (\"7-5 6-0\", \"6-1 6-0\", \"7-6(4) 6-2\"), winner_entry (\"\"), loser_ht (184, 168, 174), tourney_level (\"W\", \"W\", \"W\"), tourney_date (20170424, 20160404, 20161024), loser_age (31.9370294319, 27.0937713895, 26.135523614), winner_ioc (\"FRA\", \"CHN\", \"AUS\"), round (\"R16\", \"BR\", \"R16\"), loser_hand (\"R\", \"L\"), loser_rank (15, 40, 12), winner_seed (24, 7, 14), tourney_name (\"Gstaad\", \"Stanford\", \"Limoges\"), draw_size (32, 12, 128), loser_entry (\"\"), loser_name (\"Lesia Tsurenko\", \"Johanna Larsson\", \"Ana Ivanovic\"), winner_age (21.5222450376, 27.3921971253, 23.8494182067), year (2013, 2016, 2017), minutes (74, 77, 137), loser_ioc (\"TPE\", \"USA\", \"NED\"), winner_rank (11, 34, 20), loser_seed (27, 21, 3), loser_id (201504, 200748, 201465), winner_ht (182, 177, 177), winner_name (\"Angelique Kerber\", \"Sloane Stephens\", \"Timea Babos\"), loser_rank_points (1242, 2070, 3285), winner_id (201495, 201474, 200748), winner_hand (\"R\", \"L\"), surface (\"Hard\", \"Clay\", \"Grass\"), best_of (3) | rankings : ranking (1104, 108, 1140), tours (31, 22, 1), ranking_date (20040719, 20040329, 19961111), player_id (203441, 201588, 201086), ranking_points (2895, 410, 2154)",
        "ambiguous_queries": [
            "select first_name, nationality_code from players order by birth_date limit 1",
            "select first_name, country_id from players order by birth_date limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"country code\": [{\"players\": [\"nationality_code\"]}, {\"players\": [\"country_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country code\" refers to the schema \"players\".\"country_id\"",
        "clear_ambiguity": "{\"country code\": {\"players\": [\"country_id\"]}}",
        "gold_query": "select first_name, country_id from players order by birth_date limit 1"
    },
    {
        "index": 142,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "schema_without_content": "addresses : country , postal_code , postcode , line_3 , other_address_details , city , address_id , line_2 , line_1 , state_province_county  | courses : other_details , course_name , course_description , course_id  | departments : department_name , department_id , department_description , other_details  | degree_programs : other_details , degree_summary_description , degree_summary_name , degree_program_id , department_id  | sections : course_id , other_details , section_name , section_description , section_id  | semesters : other_details , semester_id , semester_name , semester_description  | students : student_id , last_name , date_first_registered , permanent_address_id , email_address , ssn , date_left , other_student_details , cell_mobile_number 246-7921\", \"07661787471\", \"07661787471\", current_address_id , first_name , middle_name  | student_enrolment : semester_id , student_enrolment_id , other_details , degree_program_id , student_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : transcript_id , student_course_id",
        "schema_with_content": "addresses : country (\"Iceland\", \"Haiti\", \"Angola\"), postal_code (\"638\", \"847\", \"895\"), postcode (\"638\", \"847\", \"895\"), line_3 (None), other_address_details (None), city (\"New Clemensburgh\", \"Port Evanston\", \"Rutherfordtown\"), address_id (11, 1, 2), line_2 (\"Apt. 388\", \"Suite 830\", \"Apt. 468\"), line_1 (\"193 Marlin Brook\", \"0643 Muller Vista\", \"74046 Metz Walk Apt. 113\"), state_province_county (\"Hawaii\", \"SouthDakota\", \"Delaware\") | courses : other_details (None), course_name (\"ml\", \"ds\", \"la\"), course_description (\"v\", \"d\", \"c\"), course_id (7, 13, 14) | departments : department_name (\"statistics\", \"drama\", \"medical\"), department_id (14, 6, 7), department_description (\"dolorem\", \"nostrum\", \"aliquam\"), other_details (None) | degree_programs : other_details (None), degree_summary_description (\"architecto\", \"assumenda\", \"et\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (6, 5, 9), department_id (7, 3, 13) | sections : course_id (7, 5, 12), other_details (None), section_name (\"u\", \"p\", \"k\"), section_description (\"doloremque\", \"non\", \"quis\"), section_id (6, 1, 13) | semesters : other_details (None), semester_id (14, 14, 13), semester_name (\"spring 2014\", \"spring 2014\", \"spring 2017\"), semester_description (\"m\", \"y\", \"c\") | students : student_id (2, 11, 11), last_name (\"Gleichner\", \"Weimann\", \"Osinski\"), date_first_registered (\"2007-08-29 23:25:41\", \"1982-06-19 13:15:18\", \"1976-10-26 02:33:06\"), permanent_address_id (15, 11, 4), email_address (\"jillian26@example.net\", \"nbruen@example.org\", \"nbruen@example.org\"), ssn (\"3\", \"494\", \"965\"), date_left (\"1982-06-11 00:25:39\", \"2014-05-30 23:32:02\", \"2007-08-02 04:12:58\"), other_student_details (\"nesciunt\", \"autem\", \"atque\"), cell_mobile_number (\"(462)246-7921\", \"07661787471\", \"07661787471\"), current_address_id (6, 9, 10), first_name (\"Warren\", \"Timmothy\", \"Delaney\"), middle_name (\"Brooklyn\", \"Violet\", \"Neal\") | student_enrolment : semester_id (6, 1, 15), student_enrolment_id (6, 8, 12), other_details (None), degree_program_id (12, 4, 3), student_id (4, 12, 6) | student_enrolment_courses : student_enrolment_id (8, 9, 8), course_id (3, 8, 10), student_course_id (9860, 83814225, 2) | transcripts : transcript_date (\"1990-03-05 11:59:41\", \"1984-01-18 23:07:07\", \"1985-08-21 09:32:39\"), other_details (None), transcript_id (4, 13, 2) | transcript_contents : transcript_id (5, 9, 13), student_course_id (0, 8, 70882679)",
        "ambiguous_queries": [
            "select postal_code from addresses where city = 'Port Chelsea'",
            "select postcode from addresses where city = 'Port Chelsea'"
        ],
        "gold_ambiguity": {
            "match": "{\"zip code\": [{\"addresses\": [\"postal_code\"]}, {\"addresses\": [\"postcode\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"zip code\" refers to the schema \"addresses\".\"postcode\"",
        "clear_ambiguity": "{\"zip code\": {\"addresses\": [\"postcode\"]}}",
        "gold_query": "select postcode from addresses where city = 'Port Chelsea'"
    },
    {
        "index": 143,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "schema_without_content": "airlines : airline , short_name , code , uid , country  | airports : airportcode , countryabbrev , airportname , country , city  | flights : airline , destairport , flightno , sourceairport",
        "schema_with_content": "airlines : airline (\"Allegiant Air\", \"Virgin America\", \"JetBlue Airways\"), short_name (\"Frontier\", \"Southwest\", \"Virgin\"), code (\"Frontier\", \"Southwest\", \"Virgin\"), uid (11, 10, 10), country (\"USA\") | airports : airportcode (\"AXX\", \"AHH\", \"AOS\"), countryabbrev (\"US \", \"US\"), airportname (\"Municipal \", \"Albuquerque International \", \"Elmendorf Afb \"), country (\"United States \"), city (\"Ada \", \"Angel Fire \", \"Ambler \") | flights : airline (10, 9, 12), destairport (\" AEL\", \" AXX\", \" AHD\"), flightno (950, 659, 513), sourceairport (\" ALN\", \" DYS\", \" CAK\")",
        "ambiguous_queries": [
            "select t1.short_name, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
            "select t1.code, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"abbreviation\": [{\"airlines\": [\"short_name\"]}, {\"airlines\": [\"code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"abbreviation\" refers to the schema \"airlines\".\"short_name\"",
        "clear_ambiguity": "{\"abbreviation\": {\"airlines\": [\"short_name\"]}}",
        "gold_query": "select t1.short_name, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1"
    },
    {
        "index": 144,
        "db_id": "pets_1",
        "ambig_type": "column",
        "db_file": "column/pets_1/pets_1.sqlite",
        "question": "What is the average weight for each type of pet?",
        "schema_without_content": "student : advisor , fname , city_code , sex , lname , stuid , age , major  | has_pet : stuid , petid  | pets : weight , kind , type , pet_age , petid",
        "schema_with_content": "student : advisor (8741, 5718, 8741), fname (\"Susan\", \"Ian\", \"Stacy\"), city_code (\"NAR\", \"LON\", \"HKG\"), sex (\"F\", \"M\"), lname (\"Kumar\", \"Davis\", \"Han\"), stuid (1023, 1003, 1031), age (21, 19, 21), major (600, 520, 600) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), kind (\"cat\", \"dog\"), type (\"cat\", \"dog\"), pet_age (3, 2, 1), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select avg(weight), type from pets group by type",
            "select avg(weight), kind from pets group by kind"
        ],
        "gold_ambiguity": {
            "match": "{\"type\": [{\"pets\": [\"type\"]}, {\"pets\": [\"kind\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type\" refers to the schema \"pets\".\"kind\"",
        "clear_ambiguity": "{\"type\": {\"pets\": [\"kind\"]}}",
        "gold_query": "select avg(weight), kind from pets group by kind"
    },
    {
        "index": 145,
        "db_id": "pets_1",
        "ambig_type": "column",
        "db_file": "column/pets_1/pets_1.sqlite",
        "question": "Find the type and weight of the youngest pet.",
        "schema_without_content": "student : sex , fname , stuid , age , city_code , major , advisor , lname  | has_pet : stuid , petid  | pets : body_weight , pet_age , petid , mass , pettype",
        "schema_with_content": "student : sex (\"F\", \"M\"), fname (\"Tracy\", \"Bruce\", \"Michael\"), stuid (1018, 1022, 1003), age (17, 16, 27), city_code (\"NYC\", \"WAS\", \"NYC\"), major (600, 520, 540), advisor (8423, 8772, 7723), lname (\"Woods\", \"Woods\", \"Shieber\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : body_weight (12.0, 13.4, 9.3), pet_age (3, 2, 1), petid (2001, 2002, 2003), mass (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\")",
        "ambiguous_queries": [
            "select pettype, mass from pets order by pet_age limit 1",
            "select pettype, body_weight from pets order by pet_age limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"pets\": [\"mass\"]}, {\"pets\": [\"body_weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"pets\".\"mass\"",
        "clear_ambiguity": "{\"weight\": {\"pets\": [\"mass\"]}}",
        "gold_query": "select pettype, mass from pets order by pet_age limit 1"
    },
    {
        "index": 146,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "schema_without_content": "city : name , countrycode , district , population , id  | sqlite_sequence : name , seq  | country : headofstate , lifeexpectancy , governmentform , indepyear , surfacearea , capital , region , gnpold , name , code , headcount , citizen_count , localname , gnp , continent , code2  | countrylanguage : countrycode , isofficial , percentage , language",
        "schema_with_content": "city : name (\"Tunis\", \"TorreÃ³n\", \"Iwakuni\"), countrycode (\"GRD\", \"FJI\", \"CYP\"), district (\"Midlands\", \"Karotegin\", \"Roraima\"), population (189000, 101000, 348100), id (3790, 2491, 2275) | sqlite_sequence : name (\"city\"), seq (4079) | country : headofstate (\"Kumba IalÃ¡\", \"Ãmile Lahoud\", \"Ãlafur Ragnar GrÃ­msson\"), lifeexpectancy (42.5, 62.9, 69.2), governmentform (\"Nonmetropolitan Territory of France\", \"Republic\", \"Independent Church State\"), indepyear (1981, 1776, -660), surfacearea (430.0, 923768.0, 266000.0), capital (55, 35, 904), region (\"Central Africa\", \"Central America\", \"Eastern Africa\"), gnpold (3384.0, 64926.0, 7967.0), name (\"Azerbaijan\", \"Senegal\", \"Burkina Faso\"), code (\"CHE\", \"COM\", \"TKM\"), headcount (98881000, 699000, 61399000), citizen_count (98881000, 699000, 61399000), localname (\"BelgiÃ«/Belgique\", \"Ertra\", \"Danmark\"), gnp (7137.0, 6398.0, 6964.0), continent (\"Asia\", \"Antarctica\", \"Europe\"), code2 (\"SE\", \"TT\", \"MX\") | countrylanguage : countrycode (\"JPN\", \"MLI\", \"AFG\"), isofficial (\"T\", \"F\"), percentage (5.3, 52.4, 19.2), language (\"Marathi\", \"Oromo\", \"Southern Slavic Languages\")",
        "ambiguous_queries": [
            "select name, headcount, headofstate from country order by surfacearea desc limit 1",
            "select name, citizen_count, headofstate from country order by surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"headcount\"]}, {\"country\": [\"citizen_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"headcount\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"headcount\"]}}",
        "gold_query": "select name, headcount, headofstate from country order by surfacearea desc limit 1"
    },
    {
        "index": 147,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "schema_without_content": "continents : continent , contid  | countries : name , countryid , nationname , continent  | car_makers : id , fullname , maker , country  | model_list : maker , modelid , model  | car_names : makeid , model , make  | cars_data : year , id , accelerate , weight , mpg , horsepower , edispl , cylinders",
        "schema_with_content": "continents : continent (\"africa\", \"america\", \"australia\"), contid (2, 2, 1) | countries : name (\"australia\", \"usa\", \"nigeria\"), countryid (15, 3, 10), nationname (\"australia\", \"usa\", \"nigeria\"), continent (3, 1, 3) | car_makers : id (13, 1, 16), fullname (\"Triumph\", \"Daimler Benz\", \"Honda\"), maker (\"mazda\", \"kia\", \"kia\"), country (\"2\", \"3\", \"1\") | model_list : maker (6, 3, 16), modelid (26, 29, 27), model (\"nissan\", \"kia\", \"cadillac\") | car_names : makeid (117, 36, 144), model (\"amc\", \"fiat\", \"hi\"), make (\"dodge dart custom\", \"hi 1200d\", \"subaru dl\") | cars_data : year (1974, 1981, 1977), id (168, 282, 246), accelerate (18.8, 12.8, 14.1), weight (2226, 4633, 2930), mpg (\"15.5\", \"37.2\", \"30\"), horsepower (\"91\", \"158\", \"83\"), edispl (144.0, 163.0, 140.0), cylinders (6, 4, 4)",
        "ambiguous_queries": [
            "select t1.name, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1",
            "select t1.nationname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"countries\": [\"name\"]}, {\"countries\": [\"nationname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"countries\".\"nationname\"",
        "clear_ambiguity": "{\"names\": {\"countries\": [\"nationname\"]}}",
        "gold_query": "select t1.nationname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1"
    },
    {
        "index": 148,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , language , hight_definition_tv , country , id , series_name , pay_per_view_ppv , package_option \", \"Option\", content  | tv_series : rating , episode , air_date , 18_49_rating_share , viewers_m , channel , id , weekly_rank , share  | cartoon : filmmaker , id , channel , title , production_code , original_air_date , written_by , director_name",
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"728\", \"701\", \"703\"), series_name (\"MTV Rocks\", \"MTV Rocks\", \"Hip Hop TV\"), pay_per_view_ppv (\"no\"), package_option (\"Sky Famiglia\", \"no ( FTV )\", \"Option\"), content (\"music\") | tv_series : rating (\"4.4\", \"3.8\", \"3.8\"), episode (\"Keepers\", \"Winterland\", \"Blowback\"), air_date (\"December 17, 2007\", \"October 15, 2007\", \"October 29, 2007\"), 18_49_rating_share (\"2.9/7\", \"2.9/7\", \"2.1/5\"), viewers_m (\"6.09\", \"8.23\", \"6.75\"), channel (\"701\", \"707\", \"717\"), id (1.0, 1.0, 1.0), weekly_rank (71.0, 66.0, 66.0), share (6.0, 5.0, 7.0) | cartoon : filmmaker (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (5.0, 10.0, 1.0), channel (\"706\", \"708\", \"700\"), title (\"The Eyes of Despero!\", \"The Rise of the Blue Beetle!\", \"Day of the Dark Knight!\"), production_code (103.0, 104.0, 105.0), original_air_date (\"February27,2009\", \"January9,2009\", \"November14,2008\"), written_by (\"Steven Melching\", \"Steven Melching\", \"James Krieg\"), director_name (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "ambiguous_queries": [
            "select count(*), director_name from cartoon group by director_name",
            "select count(*), filmmaker from cartoon group by filmmaker"
        ],
        "gold_ambiguity": {
            "match": "{\"directors\": [{\"cartoon\": [\"director_name\"]}, {\"cartoon\": [\"filmmaker\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"directors\" refers to the schema \"cartoon\".\"filmmaker\"",
        "clear_ambiguity": "{\"directors\": {\"cartoon\": [\"filmmaker\"]}}",
        "gold_query": "select count(*), filmmaker from cartoon group by filmmaker"
    },
    {
        "index": 149,
        "db_id": "singer",
        "ambig_type": "column",
        "db_file": "column/singer/singer.sqlite",
        "question": "Show the names of singers and the total sales of their songs.",
        "schema_without_content": "singer : citizenship , stage_name , net_worth_millions , artist_name , birth_year , singer_id  | song : song_id , title , singer_id , highest_position , sales",
        "schema_with_content": "singer : citizenship (\"Chile\", \"France\", \"Chile\"), stage_name (\"Gina Rinehart\", \"Liliane Bettencourt\", \"Alice Walton\"), net_worth_millions (17.0, 17.8, 26.3), artist_name (\"Gina Rinehart\", \"Liliane Bettencourt\", \"Alice Walton\"), birth_year (1953.0, 1944.0, 1948.0), singer_id (1, 8, 8) | song : song_id (1, 8, 6), title (\"All This Time\", \"All This Time\", \"Call on Me\"), singer_id (6, 6, 6), highest_position (1.0, 3.0), sales (261000.0, 275000.0, 552407.0)",
        "ambiguous_queries": [
            "select t1.stage_name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.stage_name",
            "select t1.artist_name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.artist_name"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"singer\": [\"stage_name\"]}, {\"singer\": [\"artist_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"singer\".\"artist_name\"",
        "clear_ambiguity": "{\"names\": {\"singer\": [\"artist_name\"]}}",
        "gold_query": "select t1.artist_name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.artist_name"
    },
    {
        "index": 150,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "What are the names of people who are not from Russia?",
        "schema_without_content": "poker_player : people_id , money_rank , earnings , final_table_made , poker_player_id , best_finish  | people : people_id , full_name , birth_date , complete_name , nationality , height",
        "schema_with_content": "poker_player : people_id (5, 5, 7), money_rank (68.0, 166.0, 154.0), earnings (596462.0, 142800.0, 189233.0), final_table_made (42.0, 10.0, 19.0), poker_player_id (5, 4, 1), best_finish (1.0, 2.0, 3.0) | people : people_id (3, 7, 1), full_name (\"Teodor Salparov\", \"Aleksey Ostapenko\", \"Teodor Salparov\"), birth_date (\"January 22, 1987\", \"May 26, 1986\", \"August 16, 1982\"), complete_name (\"Teodor Salparov\", \"Aleksey Ostapenko\", \"Teodor Salparov\"), nationality (\"Russia\", \"Bulgaria\"), height (196.0, 205.0, 187.0)",
        "ambiguous_queries": [
            "select full_name from people where nationality != 'Russia'",
            "select complete_name from people where nationality != 'Russia'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"people\": [\"full_name\"]}, {\"people\": [\"complete_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"people\".\"complete_name\"",
        "clear_ambiguity": "{\"names\": {\"people\": [\"complete_name\"]}}",
        "gold_query": "select complete_name from people where nationality != 'Russia'"
    },
    {
        "index": 151,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "schema_without_content": "stadium : lowest , capacity , average , stadium_id , name , location , highest  | singer : song_release_year , name , singer_id , is_male , age , song_name , country  | concert : topic , stadium_id , subject , year , concert_id , concert_name  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "stadium : lowest (411, 404, 315), capacity (3960, 2000, 3808), average (730, 552, 615), stadium_id (10, 9, 9), name (\"Stark's Park\", \"Gayfield Park\", \"Glebe Park\"), location (\"Peterhead\", \"East Fife\", \"East Fife\"), highest (1057, 1980, 2363) | singer : song_release_year (\"2016\", \"1992\", \"2014\"), name (\"Rose White\", \"Timbaland\", \"Timbaland\"), singer_id (1, 6, 2), is_male (\"F\", \"T\"), age (29, 41, 52), song_name (\"Dangerous\", \"Hey Oh\", \"Hey Oh\"), country (\"Netherlands\", \"United States\", \"France\") | concert : topic (\"Free choice 2\", \"Free choice\", \"Free choice 2\"), stadium_id (\"7\", \"9\", \"7\"), subject (\"Free choice 2\", \"Free choice\", \"Free choice 2\"), year (\"2014\", \"2015\"), concert_id (6, 4, 1), concert_name (\"Auditions\", \"Home Visits\", \"Week 1\") | singer_in_concert : concert_id (5, 6, 6), singer_id (\"4\", \"4\", \"2\")",
        "ambiguous_queries": [
            "select t2.concert_name, t2.subject, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
            "select t2.concert_name, t2.topic, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id"
        ],
        "gold_ambiguity": {
            "match": "{\"theme\": [{\"concert\": [\"subject\"]}, {\"concert\": [\"topic\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"theme\" refers to the schema \"concert\".\"topic\"",
        "clear_ambiguity": "{\"theme\": {\"concert\": [\"topic\"]}}",
        "gold_query": "select t2.concert_name, t2.topic, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id"
    },
    {
        "index": 152,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "schema_without_content": "tv_channel : country , transmission , hight_definition_tv , id , language , package_option , broadcast , pixel_aspect_ratio_par , series_name , pay_per_view_ppv  | tv_series : viewers_m , 18_49_rating_share , episode , rating , share , id , channel , air_date , weekly_rank  | cartoon : written_by , directed_by , production_code , title , id , channel , original_air_date",
        "schema_with_content": "tv_channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), transmission (\"music\"), hight_definition_tv (\"no\", \"yes\"), id (\"707\", \"715\", \"705\"), language (\"Italian\", \"English\"), package_option (\"Option\", \"Sky Famiglia\", \"Option\"), broadcast (\"music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"MTV Classic\", \"Rock TV\", \"MTV Rocks\"), pay_per_view_ppv (\"no\") | tv_series : viewers_m (\"6.94\", \"6.94\", \"6.75\"), 18_49_rating_share (\"2.2/6\", \"2.1/5\", \"2.2/6\"), episode (\"Game Three\", \"A Love of a Lifetime\", \"Game Three\"), rating (\"4.3\", \"3.5\", \"4.3\"), share (7.0, 5.0, 7.0), id (12.0, 6.0, 12.0), channel (\"701\", \"714\", \"708\"), air_date (\"October 1, 2007\", \"October 1, 2007\", \"November 26, 2007\"), weekly_rank (43.0, 72.0, 80.0) | cartoon : written_by (\"J. M. DeMatteis\", \"Michael Jelenic\", \"Joseph Kuhr\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (106.0, 107.0, 110.0), title (\"Deep Cover for Batman!\", \"Day of the Dark Knight!\", \"Fall of the Blue Beetle!\"), id (10.0, 2.0, 3.0), channel (\"700\", \"700\", \"707\"), original_air_date (\"February20,2009\", \"January23,2009\", \"February6,2009\")",
        "ambiguous_queries": [
            "select broadcast from tv_channel where series_name = 'Sky Radio'",
            "select transmission from tv_channel where series_name = 'Sky Radio'"
        ],
        "gold_ambiguity": {
            "match": "{\"content\": [{\"tv_channel\": [\"broadcast\"]}, {\"tv_channel\": [\"transmission\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"content\" refers to the schema \"tv_channel\".\"broadcast\"",
        "clear_ambiguity": "{\"content\": {\"tv_channel\": [\"broadcast\"]}}",
        "gold_query": "select broadcast from tv_channel where series_name = 'Sky Radio'"
    },
    {
        "index": 153,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "schema_without_content": "continents : contid , continent  | countries : continent , countryname , countryid  | car_makers : maker , id , fullname , country  | model_list : maker , model , modelid  | car_names : makeid , manufacturer , brand , model  | cars_data : cylinders , year , horsepower , id , edispl , weight , accelerate , mpg",
        "schema_with_content": "continents : contid (5, 2, 1), continent (\"europe\", \"africa\", \"australia\") | countries : continent (1, 5, 1), countryname (\"brazil\", \"sweden\", \"egypt\"), countryid (7, 5, 8) | car_makers : maker (\"kia\", \"ford\", \"toyota\"), id (9, 19, 15), fullname (\"BMW\", \"American Motor Company\", \"Saab\"), country (\"5\", \"4\", \"7\") | model_list : maker (23, 3, 13), model (\"volkswagen\", \"datsun\", \"opel\"), modelid (32, 14, 9) | car_names : makeid (307, 275, 383), manufacturer (\"ford escort 4w\", \"capri ii\", \"ford mustang ii\"), brand (\"ford escort 4w\", \"capri ii\", \"ford mustang ii\"), model (\"datsun\", \"nissan\", \"subaru\") | cars_data : cylinders (3, 4, 3), year (1976, 1975, 1976), horsepower (\"112\", \"108\", \"91\"), id (71, 391, 246), edispl (200.0, 156.0, 440.0), weight (2635, 3449, 4278), accelerate (16.1, 15.7, 16.1), mpg (\"21\", \"17.7\", \"30.5\")",
        "ambiguous_queries": [
            "select t2.manufacturer, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)",
            "select t2.brand, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)"
        ],
        "gold_ambiguity": {
            "match": "{\"maker\": [{\"car_names\": [\"manufacturer\"]}, {\"car_names\": [\"brand\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maker\" refers to the schema \"car_names\".\"brand\"",
        "clear_ambiguity": "{\"maker\": {\"car_names\": [\"brand\"]}}",
        "gold_query": "select t2.brand, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)"
    },
    {
        "index": 154,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "Show the names of all high schoolers in grade 10.",
        "schema_without_content": "highschooler : id , grade , full_name , given_name  | friend : student_id , friend_id  | likes : liked_id , student_id",
        "schema_with_content": "highschooler : id (1025, 1468, 1468), grade (9, 10, 11), full_name (\"Jessica\", \"John\", \"Jessica\"), given_name (\"Jessica\", \"John\", \"Jessica\") | friend : student_id (1934, 1934, 1316), friend_id (1101, 1381, 1934) | likes : liked_id (1709, 1934, 1247), student_id (1501, 1501, 1501)",
        "ambiguous_queries": [
            "select full_name from highschooler where grade = 10",
            "select given_name from highschooler where grade = 10"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"highschooler\": [\"full_name\"]}, {\"highschooler\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"highschooler\".\"given_name\"",
        "clear_ambiguity": "{\"names\": {\"highschooler\": [\"given_name\"]}}",
        "gold_query": "select given_name from highschooler where grade = 10"
    },
    {
        "index": 155,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "schema_without_content": "city : name , countrycode , id , population , district  | sqlite_sequence : name , seq  | country : code , code2 , capital , gnp , localname , continent , surfacearea , population , gnpold , headofstate , title , nation , region , indepyear , lifeexpectancy , governmentform  | countrylanguage : language , isofficial , percentage , countrycode",
        "schema_with_content": "city : name (\"San Carlos\", \"Rustenburg\", \"Satu Mare\"), countrycode (\"RWA\", \"IRL\", \"LIE\"), id (1920, 3578, 1704), population (270353, 186939, 127441), district (\"Wielkopolskie\", \"Chungchongbuk\", \"East Kasai\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"PYF\", \"HMD\", \"IOT\"), code2 (\"CU\", \"CN\", \"LS\"), capital (3536, 150, 3066), gnp (2352.0, 256254.0, 65107.0), localname (\"Fiji Islands\", \"The Gambia\", \"Namibia\"), continent (\"Antarctica\", \"North America\", \"North America\"), surfacearea (11000.0, 91982.0, 912050.0), population (59623400, 25662000, 1008000), gnpold (1161.0, 8920.0, 7388.0), headofstate (\"Sam Nujoma\", \"Kumba IalÃ¡\", \"Carlo Azeglio Ciampi\"), title (\"Guinea\", \"China\", \"Italy\"), nation (\"Guinea\", \"China\", \"Italy\"), region (\"North America\", \"Nordic Countries\", \"Baltic Countries\"), indepyear (1821, 1955, 1983), lifeexpectancy (51.1, 73.8, 44.0), governmentform (\"Islamic Republic\", \"Dependent Territory of Norway\", \"Emirate Federation\") | countrylanguage : language (\"Creole French\", \"Swahili\", \"Tongan\"), isofficial (\"T\", \"F\"), percentage (96.9, 74.4, 63.6), countrycode (\"FRO\", \"MSR\", \"ROM\")",
        "ambiguous_queries": [
            "select nation, surfacearea from country order by surfacearea desc limit 5",
            "select title, surfacearea from country order by surfacearea desc limit 5"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"country\": [\"nation\"]}, {\"country\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"country\".\"nation\"",
        "clear_ambiguity": "{\"names\": {\"country\": [\"nation\"]}}",
        "gold_query": "select nation, surfacearea from country order by surfacearea desc limit 5"
    },
    {
        "index": 156,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "What is the name and capacity of the stadium  with the most concerts after 2013?",
        "schema_without_content": "stadium : lowest , highest , location , seating_capacity , stadium_id , name , maximum_capacity , average  | singer : country , name , is_male , age , song_release_year , song_name , singer_id  | concert : year , concert_name , concert_id , theme , stadium_id  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "stadium : lowest (411, 411, 1294), highest (4812, 780, 921), location (\"Raith Rovers\", \"Raith Rovers\", \"Stirling Albion\"), seating_capacity (2000, 11998, 11998), stadium_id (3, 4, 2), name (\"Stark's Park\", \"Hampden Park\", \"Bayview Stadium\"), maximum_capacity (2000, 11998, 11998), average (1477, 2106, 2106) | singer : country (\"Netherlands\", \"United States\", \"France\"), name (\"Tribal King\", \"Justin Brown\", \"Rose White\"), is_male (\"F\", \"T\"), age (52, 32, 29), song_release_year (\"1992\", \"2014\", \"1992\"), song_name (\"You\", \"Gentleman\", \"Dangerous\"), singer_id (2, 4, 4) | concert : year (\"2014\", \"2015\"), concert_name (\"Home Visits\", \"Super bootcamp\", \"Week 2\"), concert_id (2, 1, 1), theme (\"Party All Night\", \"Party All Night\", \"Free choice 2\"), stadium_id (\"1\", \"9\", \"2\") | singer_in_concert : concert_id (4, 2, 1), singer_id (\"6\", \"2\", \"4\")",
        "ambiguous_queries": [
            "select t2.name, t2.seating_capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1",
            "select t2.name, t2.maximum_capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"capacity\": [{\"stadium\": [\"seating_capacity\"]}, {\"stadium\": [\"maximum_capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"capacity\" refers to the schema \"stadium\".\"maximum_capacity\"",
        "clear_ambiguity": "{\"capacity\": {\"stadium\": [\"maximum_capacity\"]}}",
        "gold_query": "select t2.name, t2.maximum_capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1"
    },
    {
        "index": 157,
        "db_id": "dog_kennels",
        "ambig_type": "column",
        "db_file": "column/dog_kennels/dog_kennels.sqlite",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , zip_code , email_address , forename , state , home_phone 747-5094x8134\", city , cell_number 399-3116\", \"478.978.0729\", \"559.874.3011x989\", street , given_name , last_name  | dogs : date_departed , date_adopted , size_code , age , gender , breed_code , abandoned_yn , date_arrived , name , date_of_birth , dog_id , owner_id , weight  | professionals : home_phone , state , street , email_address , professional_id , cell_number , last_name , role_code , first_name , zip_code , city  | treatments : treatment_id , treatment_type_code , professional_id , dog_id , date_of_treatment , cost_of_treatment",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (15, 11, 13), zip_code (\"11990\", \"22731\", \"36871\"), email_address (\"ykris@example.com\", \"kturner@example.net\", \"christy49@example.org\"), forename (\"Rolando\", \"Gay\", \"Lorenz\"), state (\"NorthDakota\", \"NewYork\", \"Arkansas\"), home_phone (\"1-346-655-5842x768\", \"130-796-4589x05454\", \"(094)747-5094x8134\"), city (\"Lake Carleyborough\", \"East Hillardberg\", \"Lake Jennyferfort\"), cell_number (\"(257)399-3116\", \"478.978.0729\", \"559.874.3011x989\"), street (\"60352 Kayleigh Crossing Suite 700\", \"9212 Rosenbaum Lights\", \"89011 Kertzmann Spring Suite 642\"), given_name (\"Rolando\", \"Gay\", \"Lorenz\"), last_name (\"Schmitt\", \"Ondricka\", \"Schmitt\") | dogs : date_departed (\"2018-03-25 15:05:16\", \"2018-03-24 19:12:22\", \"2018-03-24 23:48:59\"), date_adopted (\"2018-02-27 00:27:57\", \"2018-03-21 10:41:18\", \"2018-03-08 15:03:00\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"3\", \"2\", \"9\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-04-20 00:58:55\", \"2017-06-25 10:14:05\"), name (\"Bessie\", \"Troy\", \"Mavis\"), date_of_birth (\"2013-02-13 05:15:21\", \"2008-05-19 15:54:49\", \"2017-09-19 05:39:09\"), dog_id (15, 11, 15), owner_id (13, 1, 6), weight (\"8.96\", \"8.95\", \"1.72\") | professionals : home_phone (\"022.529.0550x1319\", \"320-508-6023\", \"022.529.0550x1319\"), state (\"Mississippi\", \"Indiana\", \"Wisconsin\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), email_address (\"schneider.kathryne@example.org\", \"marquardt.furman@example.org\", \"marquardt.furman@example.org\"), professional_id (8, 13, 5), cell_number (\"139-321-7313\", \"609-405-2990\", \"499-434-0215x1628\"), last_name (\"Considine\", \"Hyatt\", \"Tillman\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Taryn\", \"Karley\", \"Ruben\"), zip_code (\"84515\", \"41215\", \"17902\"), city (\"McLaughlinfort\", \"New Maryjane\", \"Baileymouth\") | treatments : treatment_id (2, 5, 4), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (4, 10, 7), dog_id (2, 14, 4), date_of_treatment (\"2018-03-01 04:14:46\", \"2018-03-13 12:22:58\", \"2018-03-24 22:25:58\"), cost_of_treatment (852, 429, 668)",
        "ambiguous_queries": [
            "select t1.owner_id, t2.given_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
            "select t1.owner_id, t2.forename, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"owners\": [\"given_name\"]}, {\"owners\": [\"forename\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"owners\".\"given_name\"",
        "clear_ambiguity": "{\"first name\": {\"owners\": [\"given_name\"]}}",
        "gold_query": "select t1.owner_id, t2.given_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1"
    },
    {
        "index": 158,
        "db_id": "course_teach",
        "ambig_type": "column",
        "db_file": "column/course_teach/course_teach.sqlite",
        "question": "What is the name of each teacher and what course they teach?",
        "schema_without_content": "course : course , staring_date , course_id  | teacher : age , teacher_id , title , full_name , hometown  | course_arrange : teacher_id , course_id , grade",
        "schema_with_content": "course : course (\"Bible\", \"History\", \"Science\"), staring_date (\"15 May\", \"5 May\", \"9 May\"), course_id (8, 9, 7) | teacher : age (\"45\", \"45\", \"33\"), teacher_id (5, 7, 4), title (\"Vicente Carretero\", \"John Deloor\", \"Vicente Carretero\"), full_name (\"Vicente Carretero\", \"John Deloor\", \"Vicente Carretero\"), hometown (\"Blackrod Urban District\", \"Horwich Urban District\", \"Little Lever Urban District\") | course_arrange : teacher_id (3, 3, 3), course_id (10, 3, 3), grade (1, 4, 5)",
        "ambiguous_queries": [
            "select t3.full_name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id",
            "select t3.title, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"teacher\": [\"full_name\"]}, {\"teacher\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"teacher\".\"full_name\"",
        "clear_ambiguity": "{\"name\": {\"teacher\": [\"full_name\"]}}",
        "gold_query": "select t3.full_name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id"
    },
    {
        "index": 159,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "schema_without_content": "conductor : year_of_work , full_name , nationality , conductor_id , title , age  | orchestra : major_record_format , record_company , orchestra_id , year_of_founded , conductor_id , orchestra  | performance : weekly_rank , type , performance_id , orchestra_id , share , date , official_ratings_  | show : attendance , show_id , if_first_show , result , performance_id",
        "schema_with_content": "conductor : year_of_work (10, 11, 6), full_name (\"Valeri Gergiev\", \"Paul Jorgensen\", \"Paul Jorgensen\"), nationality (\"USA\", \"UK\", \"France\"), conductor_id (5, 11, 4), title (\"Valeri Gergiev\", \"Paul Jorgensen\", \"Paul Jorgensen\"), age (50, 63, 49) | orchestra : major_record_format (\"CD\", \"CD / LP\", \"DVD\"), record_company (\"Delos Records\", \"Mercury Records\", \"Koch Records / Naxos Records\"), orchestra_id (6, 1, 10), year_of_founded (2009.0, 2009.0, 2006.0), conductor_id (11, 9, 2), orchestra (\"Seattle Symphony Orchestra\", \"Columbia Symphony Orchestra\", \"Philharmonia Orchestra\") | performance : weekly_rank (\"13\", \"7\", \"8\"), type (\"Semi-final 3\", \"Live final\", \"Auditions 4\"), performance_id (9, 2, 1), orchestra_id (1, 11, 7), share (\"43.7%\", \"29.2%\", \"29.2%\"), date (\"13 June\", \"9 June\", \"14 June\"), official_ratings_(millions) (7.28, 7.51, 7.39) | show : attendance (1925.0, 2431.0, 695.0), show_id (3, 1, 1), if_first_show (\"St. Mirren Park\", \"St. Mirren Park\", \"Glebe Park\"), result (\"T\", \"F\"), performance_id (1, 4, 3)",
        "ambiguous_queries": [
            "select full_name from conductor where nationality != 'USA'",
            "select title from conductor where nationality != 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"conductor\": [\"full_name\"]}, {\"conductor\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"conductor\".\"title\"",
        "clear_ambiguity": "{\"names\": {\"conductor\": [\"title\"]}}",
        "gold_query": "select title from conductor where nationality != 'USA'"
    },
    {
        "index": 160,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "schema_without_content": "conductor : year_of_work , age , conductor_id , name , nationality  | orchestra : orchestra_id , record_company , dominant_record_type , year_of_founded , orchestra , conductor_id , primary_format  | performance : type , weekly_rank , orchestra_id , performance_id , date , official_ratings_ , share  | show : result , if_first_show , performance_id , attendance , show_id",
        "schema_with_content": "conductor : year_of_work (11, 20, 16), age (50, 42, 63), conductor_id (9, 8, 8), name (\"Antal Brown\", \"Paul Jorgensen\", \"Seiji Ozawa\"), nationality (\"USA\", \"UK\", \"France\") | orchestra : orchestra_id (10, 9, 10), record_company (\"Deutsche Grammophon\", \"Philips\", \"Deutsche Grammophon\"), dominant_record_type (\"CD\", \"CD / LP\", \"DVD\"), year_of_founded (2004.0, 2004.0, 2009.0), orchestra (\"Royal Concertgebouw Orchestra\", \"Montreal Symphony Orchestra\", \"Chicago Symphony Orchestra\"), conductor_id (2, 5, 9), primary_format (\"CD\", \"CD / LP\", \"DVD\") | performance : type (\"Live final results\", \"Auditions 4\", \"Auditions 5\"), weekly_rank (\"15\", \"TBC\", \"15\"), orchestra_id (1, 6, 11), performance_id (11, 5, 7), date (\"2007\", \"10 June\", \"10 June\"), official_ratings_(millions) (6.73, 7.39, 7.39), share (\"38.1%\", \"34.0%\", \"40.9%\") | show : result (\"T\", \"F\"), if_first_show (\"Hampden Park\", \"Hampden Park\", \"Hampden Park\"), performance_id (2, 3, 3), attendance (1925.0, 695.0, 555.0), show_id (3, 2, 2)",
        "ambiguous_queries": [
            "select dominant_record_type from orchestra group by dominant_record_type order by count(*) asc",
            "select primary_format from orchestra group by primary_format order by count(*) asc"
        ],
        "gold_ambiguity": {
            "match": "{\"record\": [{\"orchestra\": [\"dominant_record_type\"]}, {\"orchestra\": [\"primary_format\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"record\" refers to the schema \"orchestra\".\"dominant_record_type\"",
        "clear_ambiguity": "{\"record\": {\"orchestra\": [\"dominant_record_type\"]}}",
        "gold_query": "select dominant_record_type from orchestra group by dominant_record_type order by count(*) asc"
    },
    {
        "index": 161,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "schema_without_content": "addresses : city , line_2 , country , state_province_county , line_1 , other_address_details , address_id , zip_postcode , line_3  | courses : course_description , other_details , course_name , course_id  | departments : department_name , department_description , other_details , department_id  | degree_programs : department_id , degree_program_id , program_name , degree_name , other_details , degree_summary_description  | sections : course_id , section_id , other_details , section_description , section_name  | semesters : semester_id , other_details , semester_name , semester_description  | students : permanent_address_id , other_student_details , middle_name , date_left , last_name , student_id , first_name , date_first_registered , current_address_id , email_address , ssn , cell_mobile_number  | student_enrolment : student_enrolment_id , semester_id , other_details , degree_program_id , student_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : transcript_id , other_details , transcript_date  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : city (\"Herzoghaven\", \"Goodwinhaven\", \"Port Elvisfurt\"), line_2 (\"Apt. 468\", \"Suite 383\", \"Apt. 370\"), country (\"Burundi\", \"Gibraltar\", \"Croatia\"), state_province_county (\"Florida\", \"Arkansas\", \"Wyoming\"), line_1 (\"7081 Eda Center\", \"193 Marlin Brook\", \"3999 Aufderhar Ways Suite 593\"), other_address_details (None), address_id (5, 14, 12), zip_postcode (\"590\", \"669\", \"446\"), line_3 (None) | courses : course_description (\"p\", \"d\", \"p\"), other_details (None), course_name (\"nlp\", \"db\", \"rs\"), course_id (12, 3, 3) | departments : department_name (\"medical\", \"statistics\", \"math\"), department_description (\"non\", \"error\", \"nihil\"), other_details (None), department_id (15, 3, 7) | degree_programs : department_id (2, 12, 8), degree_program_id (6, 11, 10), program_name (\"Master\", \"Bachelor\", \"PHD\"), degree_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_summary_description (\"quam\", \"officiis\", \"aperiam\") | sections : course_id (14, 9, 4), section_id (14, 3, 3), other_details (None), section_description (\"non\", \"voluptatem\", \"doloremque\"), section_name (\"g\", \"l\", \"u\") | semesters : semester_id (12, 14, 14), other_details (None), semester_name (\"spring 2016\", \"spring 2012\", \"spring 2019\"), semester_description (\"t\", \"c\", \"c\") | students : permanent_address_id (8, 3, 5), other_student_details (\"dolorum\", \"autem\", \"rerum\"), middle_name (\"Lorenz\", \"Vaughn\", \"Aisha\"), date_left (\"2006-08-04 17:26:49\", \"2017-07-09 21:38:43\", \"2006-08-04 17:26:49\"), last_name (\"Carroll\", \"Mohr\", \"Huel\"), student_id (6, 4, 5), first_name (\"Warren\", \"Gregg\", \"Orrin\"), date_first_registered (\"1971-02-05 07:28:23\", \"1982-02-14 08:46:35\", \"2017-01-04 08:10:25\"), current_address_id (12, 6, 14), email_address (\"erwin.zboncak@example.com\", \"skassulke@example.net\", \"mya88@example.org\"), ssn (\"43\", \"43\", \"668\"), cell_mobile_number (\"09700166582\", \"436.613.7683\", \"1-879-796-8987x164\") | student_enrolment : student_enrolment_id (5, 8, 9), semester_id (5, 6, 1), other_details (None), degree_program_id (10, 3, 11), student_id (6, 6, 4) | student_enrolment_courses : student_enrolment_id (5, 14, 5), student_course_id (96, 2, 2), course_id (12, 3, 12) | transcripts : transcript_id (10, 11, 15), other_details (None), transcript_date (\"2013-06-30 13:01:40\", \"2013-06-30 13:01:40\", \"1988-04-30 01:19:47\") | transcript_contents : student_course_id (0, 7, 2), transcript_id (11, 6, 4)",
        "ambiguous_queries": [
            "select t1.degree_program_id, t1.program_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
            "select t1.degree_program_id, t1.degree_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"summary\": [{\"degree_programs\": [\"program_name\"]}, {\"degree_programs\": [\"degree_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"summary\" refers to the schema \"degree_programs\".\"degree_name\"",
        "clear_ambiguity": "{\"summary\": {\"degree_programs\": [\"degree_name\"]}}",
        "gold_query": "select t1.degree_program_id, t1.degree_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1"
    },
    {
        "index": 162,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , country , language , package_option , series_name , content , pay_per_view_ppv , hight_definition_tv , id  | tv_series : weekly_rank , chapter , rating , 18_49_rating_share , share , part , channel , viewers_m , id , air_date  | cartoon : directed_by , production_code , original_air_date , written_by , channel , id , title",
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia + Sky HD\", \"Option\", \"Option\"), series_name (\"Hip Hop TV\", \"MTV Hits\", \"Match Music\"), content (\"music\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), id (\"728\", \"707\", \"707\") | tv_series : weekly_rank (68.0, 65.0, 66.0), chapter (\"The Legend of Dylan McCleen\", \"Winterland\", \"The Legend of Dylan McCleen\"), rating (\"5.3\", \"4.0\", \"4.4\"), 18_49_rating_share (\"2.4/6\", \"3.5/9\", \"2.4/6\"), share (7.0, 6.0, 7.0), part (\"The Legend of Dylan McCleen\", \"Winterland\", \"The Legend of Dylan McCleen\"), channel (\"700\", \"707\", \"728\"), viewers_m (\"9.16\", \"5.75\", \"9.16\"), id (11.0, 1.0, 9.0), air_date (\"December 17, 2007\", \"October 8, 2007\", \"October 29, 2007\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (106.0, 109.0, 107.0), original_air_date (\"February20,2009\", \"December5,2008\", \"November14,2008\"), written_by (\"Matt Wayne\", \"Steven Melching\", \"Steven Melching\"), channel (\"706\", \"703\", \"728\"), id (11.0, 11.0, 11.0), title (\"Evil Under the Sea!\", \"Deep Cover for Batman!\", \"Fall of the Blue Beetle!\")",
        "ambiguous_queries": [
            "select part, rating from tv_series order by rating desc limit 3",
            "select chapter, rating from tv_series order by rating desc limit 3"
        ],
        "gold_ambiguity": {
            "match": "{\"episodes\": [{\"tv_series\": [\"part\"]}, {\"tv_series\": [\"chapter\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"episodes\" refers to the schema \"tv_series\".\"part\"",
        "clear_ambiguity": "{\"episodes\": {\"tv_series\": [\"part\"]}}",
        "gold_query": "select part, rating from tv_series order by rating desc limit 3"
    },
    {
        "index": 163,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "schema_without_content": "airlines : short_name , uid , airline , country , code  | airports : airportname , city , countryabbrev , airportcode , country  | flights : sourceairport , airline , flightno , destairport",
        "schema_with_content": "airlines : short_name (\"Frontier\", \"USAir\", \"USAir\"), uid (2, 9, 3), airline (\"Continental Airlines\", \"Virgin America\", \"Northwest Airlines\"), country (\"USA\"), code (\"Frontier\", \"USAir\", \"USAir\") | airports : airportname (\"Ashland \", \"George Downer \", \"Astoria \"), city (\"Artesia \", \"Anchorage \", \"Alameda \"), countryabbrev (\"US \", \"US\"), airportcode (\"ANW\", \"AED\", \"QAW\"), country (\"United States \") | flights : sourceairport (\" AUK\", \" AND\", \" ARX\"), airline (9, 10, 11), flightno (384, 924, 535), destairport (\" AMW\", \" ASE\", \" ARX\")",
        "ambiguous_queries": [
            "select short_name from airlines where airline = 'JetBlue Airways'",
            "select code from airlines where airline = 'JetBlue Airways'"
        ],
        "gold_ambiguity": {
            "match": "{\"abbreviation\": [{\"airlines\": [\"short_name\"]}, {\"airlines\": [\"code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"abbreviation\" refers to the schema \"airlines\".\"short_name\"",
        "clear_ambiguity": "{\"abbreviation\": {\"airlines\": [\"short_name\"]}}",
        "gold_query": "select short_name from airlines where airline = 'JetBlue Airways'"
    },
    {
        "index": 164,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "schema_without_content": "addresses : line_3 , state_province_county , address_id , city , country , zip_postcode , line_2 , other_address_details , line_1  | courses : other_details , course_id , course_description , course_name  | departments : department_name , department_description , other_details , department_id  | degree_programs : department_id , degree_summary_description , degree_program_id , other_details , degree_summary_name  | sections : section_id , part_name , other_details , section_description , course_id , segment_name  | semesters : semester_name , semester_description , semester_id , other_details  | students : email_address , date_left , date_first_registered , last_name , ssn , student_id , other_student_details , cell_mobile_number , middle_name , current_address_id , permanent_address_id , first_name  | student_enrolment : other_details , student_enrolment_id , degree_program_id , semester_id , student_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : transcript_id , student_course_id",
        "schema_with_content": "addresses : line_3 (None), state_province_county (\"Kansas\", \"Delaware\", \"NorthCarolina\"), address_id (6, 1, 3), city (\"Lake Laishafurt\", \"Port Chelsea\", \"Port Chelsea\"), country (\"Croatia\", \"Gibraltar\", \"New Caledonia\"), zip_postcode (\"068\", \"400\", \"669\"), line_2 (\"Suite 703\", \"Suite 703\", \"Apt. 335\"), other_address_details (None), line_1 (\"202 Hessel Views Apt. 468\", \"492 Wilkinson Route\", \"858 Peggie Bypass Suite 212\") | courses : other_details (None), course_id (6, 3, 12), course_description (\"k\", \"c\", \"k\"), course_name (\"oop\", \"math\", \"dl\") | departments : department_name (\"art\", \"law\", \"dance\"), department_description (\"nostrum\", \"aliquam\", \"autem\"), other_details (None), department_id (7, 11, 1) | degree_programs : department_id (7, 11, 2), degree_summary_description (\"placeat\", \"aperiam\", \"officiis\"), degree_program_id (14, 10, 12), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_id (15, 4, 11), part_name (\"c\", \"p\", \"p\"), other_details (None), section_description (\"facilis\", \"doloremque\", \"quis\"), course_id (6, 14, 4), segment_name (\"c\", \"p\", \"p\") | semesters : semester_name (\"spring 2010\", \"winter 2010\", \"spring 2010\"), semester_description (\"t\", \"m\", \"y\"), semester_id (3, 10, 14), other_details (None) | students : email_address (\"qo'kon@example.com\", \"gracie29@example.com\", \"jhuel@example.com\"), date_left (\"2007-03-31 09:53:19\", \"1982-06-11 00:25:39\", \"1997-11-16 08:54:33\"), date_first_registered (\"2014-03-28 05:48:23\", \"1986-02-24 21:12:23\", \"1989-05-24 23:31:29\"), last_name (\"Ward\", \"Carroll\", \"Balistreri\"), ssn (\"34458427\", \"\", \"68095\"), student_id (11, 7, 9), other_student_details (\"autem\", \"laborum\", \"autem\"), cell_mobile_number (\"1-879-796-8987x164\", \"677.401.9382\", \"677.401.9382\"), middle_name (\"Brooklyn\", \"Vaughn\", \"Cleve\"), current_address_id (7, 6, 12), permanent_address_id (15, 5, 3), first_name (\"Frida\", \"Frida\", \"Jett\") | student_enrolment : other_details (None), student_enrolment_id (14, 8, 7), degree_program_id (3, 12, 2), semester_id (12, 1, 2), student_id (14, 1, 12) | student_enrolment_courses : student_enrolment_id (2, 13, 14), course_id (11, 2, 10), student_course_id (2, 7, 45105806) | transcripts : transcript_date (\"1975-05-06 12:04:47\", \"1975-10-28 15:16:51\", \"1999-01-06 20:06:46\"), other_details (None), transcript_id (10, 10, 3) | transcript_contents : transcript_id (8, 12, 12), student_course_id (0, 7, 2)",
        "ambiguous_queries": [
            "select part_name from sections order by part_name desc",
            "select segment_name from sections order by segment_name desc"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"sections\": [\"part_name\"]}, {\"sections\": [\"segment_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"sections\".\"part_name\"",
        "clear_ambiguity": "{\"names\": {\"sections\": [\"part_name\"]}}",
        "gold_query": "select part_name from sections order by part_name desc"
    },
    {
        "index": 165,
        "db_id": "course_teach",
        "ambig_type": "column",
        "db_file": "column/course_teach/course_teach.sqlite",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "schema_without_content": "course : staring_date , course_id , course  | teacher : hometown , title , age , full_name , teacher_id  | course_arrange : teacher_id , course_id , grade",
        "schema_with_content": "course : staring_date (\"11 May\", \"14 May\", \"17 May\"), course_id (7, 3, 2), course (\"History\", \"Language Arts\", \"French\") | teacher : hometown (\"Little Lever Urban District\", \"Bolton County Borough\", \"Little Lever Urban District\"), title (\"Lucy Wong\", \"Vicente Carretero\", \"Gustaaf Deloor\"), age (\"29\", \"32\", \"41\"), full_name (\"Lucy Wong\", \"Vicente Carretero\", \"Gustaaf Deloor\"), teacher_id (7, 1, 4) | course_arrange : teacher_id (7, 5, 6), course_id (5, 4, 5), grade (4, 1, 4)",
        "ambiguous_queries": [
            "select t3.full_name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id",
            "select t3.title, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"teacher\": [\"full_name\"]}, {\"teacher\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"teacher\".\"full_name\"",
        "clear_ambiguity": "{\"names\": {\"teacher\": [\"full_name\"]}}",
        "gold_query": "select t3.full_name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id"
    },
    {
        "index": 166,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "How many continents speak Chinese?",
        "schema_without_content": "city : name , population , district , countrycode , id  | sqlite_sequence : seq , name  | country : headofstate , gnp , localname , population , code , capital , indepyear , surfacearea , region , continent_name , code2 , governmentform , gnpold , lifeexpectancy , name , mainland  | countrylanguage : language , isofficial , percentage , countrycode",
        "schema_with_content": "city : name (\"Yueyang\", \"Gombe\", \"Tulancingo de Bravo\"), population (121030, 107937, 99296), district (\"Kyoto\", \"Greater Accra\", \"Haryana\"), countrycode (\"PLW\", \"GNB\", \"MCO\"), id (793, 3575, 1751) | sqlite_sequence : seq (4079), name (\"city\") | country : headofstate (\"John Bani\", \"Haji Hassan al-Bolkiah\", \"TrÃ¢n Duc Luong\"), gnp (63.2, 1424285.0, 1536.0), localname (\"Hajastan\", \"Niger\", \"Martinique\"), population (3972000, 156483000, 1439200), code (\"BEN\", \"HUN\", \"FJI\"), capital (69, 3424, 2446), indepyear (1903, 1953, 1841), surfacearea (11000.0, 9970610.0, 549.0), region (\"Melanesia\", \"Nordic Countries\", \"Nordic Countries\"), continent_name (\"South America\", \"Oceania\", \"Africa\"), code2 (\"NL\", \"ID\", \"PF\"), governmentform (\"Part of Denmark\", \"Dependent Territory of the US\", \"Republic\"), gnpold (360478.0, 11203.0, 2383.0), lifeexpectancy (51.0, 74.9, 71.8), name (\"Cayman Islands\", \"United States\", \"Guadeloupe\"), mainland (\"South America\", \"Oceania\", \"Africa\") | countrylanguage : language (\"Dariganga\", \"Bicol\", \"Rakhine\"), isofficial (\"T\", \"F\"), percentage (92.7, 1.7, 5.3), countrycode (\"MMR\", \"GUF\", \"STP\")",
        "ambiguous_queries": [
            "select count(distinct mainland) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'Chinese'",
            "select count(distinct continent_name) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'Chinese'"
        ],
        "gold_ambiguity": {
            "match": "{\"continents\": [{\"country\": [\"mainland\"]}, {\"country\": [\"continent_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"continents\" refers to the schema \"country\".\"mainland\"",
        "clear_ambiguity": "{\"continents\": {\"country\": [\"mainland\"]}}",
        "gold_query": "select count(distinct mainland) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'Chinese'"
    },
    {
        "index": 167,
        "db_id": "course_teach",
        "ambig_type": "column",
        "db_file": "column/course_teach/course_teach.sqlite",
        "question": "What are the names of the teachers ordered by ascending age?",
        "schema_without_content": "course : staring_date , course , course_id  | teacher : age , full_name , title , teacher_id , hometown  | course_arrange : course_id , grade , teacher_id",
        "schema_with_content": "course : staring_date (\"6 May\", \"10 May\", \"11 May\"), course (\"Sports\", \"Music\", \"Geography\"), course_id (1, 6, 6) | teacher : age (\"26\", \"33\", \"29\"), full_name (\"Gustaaf Deloor\", \"Vicente Carretero\", \"Joseph Huts\"), title (\"Gustaaf Deloor\", \"Vicente Carretero\", \"Joseph Huts\"), teacher_id (3, 6, 6), hometown (\"Little Lever Urban District\", \"Little Lever Urban District\", \"Little Lever Urban District\") | course_arrange : course_id (3, 5, 4), grade (1, 1, 7), teacher_id (3, 6, 2)",
        "ambiguous_queries": [
            "select full_name from teacher order by age asc",
            "select title from teacher order by age asc"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"teacher\": [\"full_name\"]}, {\"teacher\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"teacher\".\"full_name\"",
        "clear_ambiguity": "{\"names\": {\"teacher\": [\"full_name\"]}}",
        "gold_query": "select full_name from teacher order by age asc"
    },
    {
        "index": 168,
        "db_id": "singer",
        "ambig_type": "column",
        "db_file": "column/singer/singer.sqlite",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "schema_without_content": "singer : name , nationality , net_worth_millions , country_of_origin , singer_id , birth_year  | song : singer_id , title , highest_position , song_id , sales",
        "schema_with_content": "singer : name (\"Gina Rinehart\", \"Jacqueline Mars\", \"Christy Walton\"), nationality (\"Germany\", \"United States\", \"Germany\"), net_worth_millions (28.8, 28.8, 17.8), country_of_origin (\"Germany\", \"United States\", \"Germany\"), singer_id (3, 4, 3), birth_year (1940.0, 1948.0, 1961.0) | song : singer_id (2, 1, 7), title (\"Mysterious Girl\", \"Cha Cha Slide\", \"Call on Me\"), highest_position (1.0, 3.0), song_id (2, 7, 3), sales (335000.0, 261000.0, 1094000.0)",
        "ambiguous_queries": [
            "select nationality, max(net_worth_millions) from singer group by nationality",
            "select country_of_origin, max(net_worth_millions) from singer group by country_of_origin"
        ],
        "gold_ambiguity": {
            "match": "{\"citizenships\": [{\"singer\": [\"nationality\"]}, {\"singer\": [\"country_of_origin\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"citizenships\" refers to the schema \"singer\".\"nationality\"",
        "clear_ambiguity": "{\"citizenships\": {\"singer\": [\"nationality\"]}}",
        "gold_query": "select nationality, max(net_worth_millions) from singer group by nationality"
    },
    {
        "index": 169,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "schema_without_content": "poker_player : people_id , poker_player_id , best_finish , money_rank , earnings , final_table_made  | people : name , height , date_of_birth , birthday , nationality , people_id",
        "schema_with_content": "poker_player : people_id (2, 5, 7), poker_player_id (3, 4, 5), best_finish (1.0, 2.0, 3.0), money_rank (68.0, 68.0, 141.0), earnings (596462.0, 596462.0, 596462.0), final_table_made (21.0, 21.0, 10.0) | people : name (\"Aleksey Ostapenko\", \"Maksim Botin\", \"Sergey Grankin\"), height (194.0, 194.0, 182.0), date_of_birth (\"January 22, 1987\", \"February 8, 1981\", \"February 8, 1981\"), birthday (\"January 22, 1987\", \"February 8, 1981\", \"February 8, 1981\"), nationality (\"Russia\", \"Bulgaria\"), people_id (1, 5, 7)",
        "ambiguous_queries": [
            "select name, date_of_birth from people order by name asc",
            "select name, birthday from people order by name asc"
        ],
        "gold_ambiguity": {
            "match": "{\"birth dates\": [{\"people\": [\"date_of_birth\"]}, {\"people\": [\"birthday\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth dates\" refers to the schema \"people\".\"date_of_birth\"",
        "clear_ambiguity": "{\"birth dates\": {\"people\": [\"date_of_birth\"]}}",
        "gold_query": "select name, date_of_birth from people order by name asc"
    },
    {
        "index": 170,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "schema_without_content": "players : player_id , first_name , date_of_birth , dob , country_code , hand , last_name  | matches : winner_ht , loser_rank_points , minutes , loser_age , winner_seed , loser_id , winner_hand , tourney_date , tourney_name , draw_size , surface , match_num , best_of , loser_ioc , winner_name , loser_rank , winner_entry , loser_seed , round , winner_rank_points , winner_ioc , loser_hand , year , score  6-2\", \"7-5 6-3\", \"7-5 1-6 7-5\", tourney_level , winner_rank , winner_age , tourney_id , loser_entry , loser_name , loser_ht , winner_id  | rankings : ranking_date , ranking , ranking_points , tours , player_id",
        "schema_with_content": "players : player_id (215633, 206424, 201130), first_name (\"Lisanna\", \"Mateya\", \"Assem\"), date_of_birth (19940704, 19780213, 19860812), dob (19940704, 19780213, 19860812), country_code (\"ARM\", \"MLT\", \"BRU\"), hand (\"U\", \"L\", \"L\"), last_name (\"Abello\", \"Purushotham\", \"Christensen\") | matches : winner_ht (174, 161, 172), loser_rank_points (2070, 4550, 4100), minutes (170, 40, 66), loser_age (24.0958247775, 28.741957563299998, 29.2073921971), winner_seed (4, 10, 30), loser_id (202429, 201585, 202469), winner_hand (\"R\", \"L\"), tourney_date (20170814, 20170821, 20170410), tourney_name (\"Katowice\", \"New Haven\", \"Cincinnati\"), draw_size (32, 8, 12), surface (\"Hard\", \"Clay\", \"Grass\"), match_num (264, 202, 226), best_of (3), loser_ioc (\"ROU\", \"BLR\", \"RUS\"), winner_name (\"Garbine Muguruza\", \"Elina Svitolina\", \"Sara Errani\"), loser_rank (45, 61, 9), winner_entry (\"\"), loser_seed (29, 12, 5), round (\"RR\", \"R16\", \"F\"), winner_rank_points (9945, 3780, 1620), winner_ioc (\"ROU\", \"HUN\", \"USA\"), loser_hand (\"R\", \"L\"), year (2013, 2016, 2017), score (\"3-6 7-6(4) 6-2\", \"7-5 6-3\", \"7-5 1-6 7-5\"), tourney_level (\"G\", \"I\", \"W\"), winner_rank (5, 20, 9), winner_age (21.626283367600003, 28.5804243669, 26.573579739899998), tourney_id (\"2016-1049\", \"2016-M004\", \"2017-M007\"), loser_entry (\"\"), loser_name (\"Lucie Safarova\", \"Alize Cornet\", \"Lesia Tsurenko\"), loser_ht (176, 183, 178), winner_id (201458, 200033, 201504) | rankings : ranking_date (20000103, 19910729, 20090928), ranking (276, 1489, 455), ranking_points (189, 3415, 6695), tours (24, 38, 29), player_id (205913, 211485, 203481)",
        "ambiguous_queries": [
            "select t1.first_name, t1.country_code, t1.dob from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
            "select t1.first_name, t1.country_code, t1.date_of_birth from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"birth date\": [{\"players\": [\"dob\"]}, {\"players\": [\"date_of_birth\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth date\" refers to the schema \"players\".\"date_of_birth\"",
        "clear_ambiguity": "{\"birth date\": {\"players\": [\"date_of_birth\"]}}",
        "gold_query": "select t1.first_name, t1.country_code, t1.date_of_birth from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1"
    },
    {
        "index": 171,
        "db_id": "museum_visit",
        "ambig_type": "column",
        "db_file": "column/museum_visit/museum_visit.sqlite",
        "question": "Find the id and name of the museum that has the most staff members?",
        "schema_without_content": "museum : gallery_id , open_year , num_of_staff , name , museum_number  | visitor : id , age , name , level_of_membership  | visit : num_of_ticket , visitor_id , museum_id , total_spent",
        "schema_with_content": "museum : gallery_id (7, 1, 7), open_year (\"2000\", \"2012\", \"2008\"), num_of_staff (25, 17, 16), name (\"Central City District Residential Museum\", \"RiverPark Museum\", \"Central City District Residential Museum\"), museum_number (7, 1, 7) | visitor : id (3, 6, 6), age (27, 25, 36), name (\"Fernando Gago\", \"Rafael van der Vaart\", \"Guti Midfielder\"), level_of_membership (8, 1, 5) | visit : num_of_ticket (24, 20, 10), visitor_id (\"5\", \"3\", \"6\"), museum_id (2, 8, 1), total_spent (209.98, 89.98, 320.44)",
        "ambiguous_queries": [
            "select museum_number, name from museum order by num_of_staff desc limit 1",
            "select gallery_id, name from museum order by num_of_staff desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"id\": [{\"museum\": [\"museum_number\"]}, {\"museum\": [\"gallery_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"id\" refers to the schema \"museum\".\"gallery_id\"",
        "clear_ambiguity": "{\"id\": {\"museum\": [\"gallery_id\"]}}",
        "gold_query": "select gallery_id, name from museum order by num_of_staff desc limit 1"
    },
    {
        "index": 172,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "schema_without_content": "city : province , id , name , state , countrycode , population  | sqlite_sequence : seq , name  | country : headofstate , capital , localname , code2 , lifeexpectancy , code , surfacearea , gnpold , gnp , population , indepyear , name , region , governmentform , continent  | countrylanguage : percentage , language , isofficial , countrycode",
        "schema_with_content": "city : province (\"Nyanza\", \"Overijssel\", \"Plateau & Nassarawa\"), id (281, 689, 4042), name (\"Daxian\", \"Marawi\", \"Le-Cap-HaÃ¯tien\"), state (\"Nyanza\", \"Overijssel\", \"Plateau & Nassarawa\"), countrycode (\"COL\", \"OMN\", \"BTN\"), population (247452, 170232, 143409) | sqlite_sequence : seq (4079), name (\"city\") | country : headofstate (\"Malietoa Tanumafili II\", \"Mswati III\", \"Frederick Chiluba\"), capital (926, 3207, 3336), localname (\"TÃ¼rkmenostan\", \"Portugal\", \"RÃ©publique DÃ©mocratique du Congo\"), code2 (\"CC\", \"ET\", \"JO\"), lifeexpectancy (66.2, 75.1, 53.1), code (\"SOM\", \"TGO\", \"HKG\"), surfacearea (3903.0, 751.0, 28748.0), gnpold (2023.0, None, 272.0), gnp (4768.0, 612.0, 226492.0), population (22256000, 11385000, 18886000), indepyear (1804, 1981, 1993), name (\"Ireland\", \"Latvia\", \"Romania\"), region (\"Eastern Asia\", \"Eastern Asia\", \"Polynesia\"), governmentform (\"Islamic Republic\", \"Independent Church State\", \"Islamic Emirate\"), continent (\"Oceania\", \"Asia\", \"Oceania\") | countrylanguage : percentage (31.6, 19.5, 10.5), language (\"Swazi\", \"Thai\", \"Mandjia\"), isofficial (\"T\", \"F\"), countrycode (\"PRY\", \"KOR\", \"IRN\")",
        "ambiguous_queries": [
            "select count(*), state from city where population > (select avg(population) from city) group by state",
            "select count(*), province from city where population > (select avg(population) from city) group by province"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"city\": [\"state\"]}, {\"city\": [\"province\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"city\".\"state\"",
        "clear_ambiguity": "{\"district\": {\"city\": [\"state\"]}}",
        "gold_query": "select count(*), state from city where population > (select avg(population) from city) group by state"
    },
    {
        "index": 173,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "schema_without_content": "city : district , id , countrycode , name , population  | sqlite_sequence : seq , name  | country : region , capital , code2 , headofstate , governmentform \", localname , lifeexpectancy , indepyear , surfacearea , continent , name , gnp , citizen_count , headcount , gnpold , code  | countrylanguage : countrycode , percentage , isofficial , language",
        "schema_with_content": "city : district (\"Estuaire\", \"Semnan\", \"al-Bahr al-Ahmar\"), id (297, 2418, 1125), countrycode (\"CHN\", \"OMN\", \"TWN\"), name (\"Johannesburg\", \"Sudbury\", \"Pachuca de Soto\"), population (219017, 100118, 225970) | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Eastern Europe\", \"British Islands\", \"Melanesia\"), capital (3214, 3483, 2912), code2 (\"KM\", \"JO\", \"VU\"), headofstate (\"Kocheril Raman Narayanan\", \"Blaise CompaorÃ©\", \"Yahya Jammeh\"), governmentform (\"Federal Republic\", \"Territory of Australia\", \"Monarchy (Sultanate)\"), localname (\"Madagasikara/Madagascar\", \"Soomaaliya\", \"Falkland Islands\"), lifeexpectancy (78.4, 70.7, 60.0), indepyear (1932, 1278, 1958), surfacearea (6257.0, 7741220.0, 143998.0), continent (\"Europe\", \"South America\", \"South America\"), name (\"Lebanon\", \"Central African Republic\", \"CÃ´te dâIvoire\"), gnp (372.0, 65984.0, 8444.0), citizen_count (14786000, 4629000, 3869000), headcount (14786000, 4629000, 3869000), gnpold (442544.0, 10169.0, 4361.0), code (\"TUN\", \"SHN\", \"ATA\") | countrylanguage : countrycode (\"KAZ\", \"NIC\", \"MDA\"), percentage (6.9, 32.5, 9.6), isofficial (\"T\", \"F\"), language (\"Saame\", \"Silesiana\", \"Ouaddai\")",
        "ambiguous_queries": [
            "select avg(gnp), sum(headcount) from country where governmentform = 'US Territory'",
            "select avg(gnp), sum(citizen_count) from country where governmentform = 'US Territory'"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"headcount\"]}, {\"country\": [\"citizen_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"headcount\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"headcount\"]}}",
        "gold_query": "select avg(gnp), sum(headcount) from country where governmentform = 'US Territory'"
    },
    {
        "index": 174,
        "db_id": "poker_player",
        "ambig_type": "column",
        "db_file": "column/poker_player/poker_player.sqlite",
        "question": "How many distinct nationalities are there?",
        "schema_without_content": "poker_player : people_id , final_table_made , money_rank , earnings , best_finish , poker_player_id  | people : country , height , people_id , birth_date , name , citizenship",
        "schema_with_content": "poker_player : people_id (2, 1, 7), final_table_made (42.0, 42.0, 10.0), money_rank (166.0, 166.0, 58.0), earnings (104871.0, 189233.0, 104871.0), best_finish (1.0, 2.0, 3.0), poker_player_id (2, 3, 4) | people : country (\"Russia\", \"Bulgaria\"), height (207.0, 207.0, 187.0), people_id (1, 5, 2), birth_date (\"January 22, 1987\", \"August 16, 1982\", \"April 17, 1987\"), name (\"Maksim Botin\", \"Maksim Botin\", \"Maksim Botin\"), citizenship (\"Russia\", \"Bulgaria\")",
        "ambiguous_queries": [
            "select count(distinct country) from people",
            "select count(distinct citizenship) from people"
        ],
        "gold_ambiguity": {
            "match": "{\"nationalities\": [{\"people\": [\"country\"]}, {\"people\": [\"citizenship\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"nationalities\" refers to the schema \"people\".\"citizenship\"",
        "clear_ambiguity": "{\"nationalities\": {\"people\": [\"citizenship\"]}}",
        "gold_query": "select count(distinct citizenship) from people"
    },
    {
        "index": 175,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "schema_without_content": "addresses : zip_postcode , postal_address_id , city , state_province_county , line_3 , address_code , line_1 , line_2 , other_address_details , country  | courses : course_name , course_id , other_details , course_description  | departments : department_description , department_name , department_id , other_details  | degree_programs : degree_program_id , department_id , other_details , degree_summary_description , degree_summary_name  | sections : section_description , other_details , course_id , section_id , section_name  | semesters : semester_name , other_details , semester_id , semester_description  | students : ssn , date_first_registered , cell_mobile_number 365-8405\", \"436.613.7683\", student_id , last_name , date_left , email_address , current_address_id , other_student_details , middle_name , first_name , permanent_address_id  | student_enrolment : student_id , semester_id , degree_program_id , student_enrolment_id , other_details  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : zip_postcode (\"148\", \"847\", \"541\"), postal_address_id (2, 11, 13), city (\"Port Elvisfurt\", \"Herzoghaven\", \"Lake Careyberg\"), state_province_county (\"WestVirginia\", \"Delaware\", \"Kansas\"), line_3 (None), address_code (2, 11, 13), line_1 (\"0144 Lamar Plaza Apt. 346\", \"3999 Aufderhar Ways Suite 593\", \"202 Hessel Views Apt. 468\"), line_2 (\"Apt. 689\", \"Apt. 406\", \"Suite 865\"), other_address_details (None), country (\"Croatia\", \"Angola\", \"Bermuda\") | courses : course_name (\"en\", \"cal\", \"en\"), course_id (4, 4, 2), other_details (None), course_description (\"w\", \"k\", \"k\") | departments : department_description (\"consequatur\", \"autem\", \"ea\"), department_name (\"medical\", \"engineer\", \"dance\"), department_id (10, 6, 3), other_details (None) | degree_programs : degree_program_id (6, 6, 3), department_id (4, 14, 4), other_details (None), degree_summary_description (\"placeat\", \"voluptas\", \"architecto\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_description (\"reprehenderit\", \"ex\", \"reprehenderit\"), other_details (None), course_id (4, 1, 14), section_id (9, 3, 11), section_name (\"u\", \"k\", \"c\") | semesters : semester_name (\"winter 2010\", \"winter 2010\", \"spring 2016\"), other_details (None), semester_id (6, 15, 11), semester_description (\"f\", \"o\", \"q\") | students : ssn (\"248\", \"248\", \"43\"), date_first_registered (\"1989-05-24 23:31:29\", \"2018-03-13 09:56:22\", \"1973-05-19 19:12:46\"), cell_mobile_number (\"436.613.7683\", \"(507)365-8405\", \"436.613.7683\"), student_id (2, 1, 10), last_name (\"Mohr\", \"Carroll\", \"Kemmer\"), date_left (\"2007-03-31 09:53:19\", \"1982-06-11 00:25:39\", \"2004-12-08 05:29:11\"), email_address (\"nbruen@example.org\", \"dell43@example.net\", \"nya.lesch@example.net\"), current_address_id (14, 2, 9), other_student_details (\"qui\", \"qui\", \"omnis\"), middle_name (\"Aisha\", \"Mona\", \"Judd\"), first_name (\"Delaney\", \"Orrin\", \"Milton\"), permanent_address_id (8, 14, 14) | student_enrolment : student_id (6, 12, 1), semester_id (9, 2, 6), degree_program_id (2, 4, 9), student_enrolment_id (14, 6, 3), other_details (None) | student_enrolment_courses : student_enrolment_id (13, 10, 13), course_id (2, 8, 2), student_course_id (8, 8, 681404) | transcripts : other_details (None), transcript_id (1, 14, 11), transcript_date (\"2002-09-24 06:11:49\", \"2002-09-24 06:11:49\", \"2010-12-13 10:55:15\") | transcript_contents : student_course_id (45105806, 76, 0), transcript_id (8, 4, 5)",
        "ambiguous_queries": [
            "select t1.address_code, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_code = t2.current_address_id group by t1.address_code order by count(*) desc limit 1",
            "select t1.postal_address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.postal_address_id = t2.current_address_id group by t1.postal_address_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"id\": [{\"addresses\": [\"address_code\"]}, {\"addresses\": [\"postal_address_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"id\" refers to the schema \"addresses\".\"postal_address_id\"",
        "clear_ambiguity": "{\"id\": {\"addresses\": [\"postal_address_id\"]}}",
        "gold_query": "select t1.postal_address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.postal_address_id = t2.current_address_id group by t1.postal_address_id order by count(*) desc limit 1"
    },
    {
        "index": 176,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "schema_without_content": "highschooler : id , given_name , grade , full_name  | friend : friend_id , student_id  | likes : student_id , liked_id",
        "schema_with_content": "highschooler : id (1025, 1316, 1510), given_name (\"Kris\", \"Jordan\", \"Brittany\"), grade (9, 11, 12), full_name (\"Kris\", \"Jordan\", \"Brittany\") | friend : friend_id (1934, 1709, 1641), student_id (1501, 1689, 1709) | likes : student_id (1934, 1501, 1689), liked_id (1468, 1501, 1101)",
        "ambiguous_queries": [
            "select t2.full_name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
            "select t2.given_name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"highschooler\": [\"full_name\"]}, {\"highschooler\": [\"given_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"highschooler\".\"full_name\"",
        "clear_ambiguity": "{\"names\": {\"highschooler\": [\"full_name\"]}}",
        "gold_query": "select t2.full_name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id"
    },
    {
        "index": 177,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the average weight of cars each year?",
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : fullname , country , maker , id  | model_list : maker , model , modelid  | car_names : makeid , make \", model  | cars_data : cylinders , load , accelerate , year , mpg , edispl , horsepower , mass , id",
        "schema_with_content": "continents : contid (3, 1, 1), continent (\"america\", \"australia\", \"asia\") | countries : countryid (11, 15, 11), continent (4, 1, 5), countryname (\"usa\", \"sweden\", \"france\") | car_makers : fullname (\"Subaru\", \"American Motor Company\", \"Hyundai\"), country (\"1\", \"5\", \"8\"), maker (\"opel\", \"toyota\", \"kia\"), id (2, 16, 4) | model_list : maker (22, 10, 7), model (\"bmw\", \"ford\", \"citroen\"), modelid (7, 17, 2) | car_names : makeid (86, 269, 73), make (\"chevrolet impala\", \"ford fairmont futura\", \"dodge aries wagon (sw)\"), model (\"peugeot\", \"buick\", \"amc\") | cars_data : cylinders (8, 3, 5), load (3609, 4294, 4354), accelerate (8.5, 17.2, 15.2), year (1974, 1977, 1977), mpg (\"37.2\", \"25.1\", \"32.9\"), edispl (130.0, 163.0, 250.0), horsepower (\"63\", \"103\", \"52\"), mass (3609, 4294, 4354), id (342, 125, 34)",
        "ambiguous_queries": [
            "select avg(mass), year from cars_data group by year",
            "select avg(load), year from cars_data group by year"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"cars_data\": [\"mass\"]}, {\"cars_data\": [\"load\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"cars_data\".\"mass\"",
        "clear_ambiguity": "{\"weight\": {\"cars_data\": [\"mass\"]}}",
        "gold_query": "select avg(mass), year from cars_data group by year"
    },
    {
        "index": 178,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "column",
        "db_file": "column/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "schema_without_content": "addresses : zip_postcode , state_province_county , line_2 , address_id , other_address_details , city , line_1 , line_3 , country  | courses : other_details , course_description , course_id , course_name  | departments : department_name , department_description , other_details , department_id  | degree_programs : degree_summary_name , degree_summary_description , department_id , degree_program_id , other_details  | sections : other_details , section_description , section_id , course_id , section_name  | semesters : other_details , semester_description , semester_name , semester_id  | students : email_address , middle_name , current_address_id , first_name , surname , family_name , student_id , date_first_registered , other_student_details , ssn , cell_mobile_number , date_left , permanent_address_id  | student_enrolment : degree_program_id , other_details , student_id , student_enrolment_id , semester_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id",
        "schema_with_content": "addresses : zip_postcode (\"590\", \"895\", \"902\"), state_province_county (\"Hawaii\", \"Hawaii\", \"Wyoming\"), line_2 (\"Suite 383\", \"Apt. 335\", \"Suite 703\"), address_id (15, 3, 7), other_address_details (None), city (\"Port Chelsea\", \"Rutherfordtown\", \"Mariliehaven\"), line_1 (\"186 Evan Motorway Apt. 409\", \"0643 Muller Vista\", \"0643 Muller Vista\"), line_3 (None), country (\"Croatia\", \"Bermuda\", \"Gibraltar\") | courses : other_details (None), course_description (\"l\", \"k\", \"v\"), course_id (5, 13, 2), course_name (\"db\", \"ai\", \"cal\") | departments : department_name (\"linguistic\", \"engineer\", \"history\"), department_description (\"consequatur\", \"aliquam\", \"nostrum\"), other_details (None), department_id (2, 1, 13) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"qui\", \"quam\", \"et\"), department_id (2, 7, 14), degree_program_id (5, 3, 12), other_details (None) | sections : other_details (None), section_description (\"nesciunt\", \"nesciunt\", \"facilis\"), section_id (3, 14, 3), course_id (2, 2, 2), section_name (\"e\", \"a\", \"p\") | semesters : other_details (None), semester_description (\"c\", \"c\", \"q\"), semester_name (\"fall 2010\", \"spring 2015\", \"fall 2010\"), semester_id (14, 15, 9) | students : email_address (\"dell43@example.net\", \"dell43@example.net\", \"johns.unique@example.net\"), middle_name (\"Violet\", \"Judd\", \"Golda\"), current_address_id (7, 14, 7), first_name (\"Jarvis\", \"Hobart\", \"Deon\"), surname (\"Christiansen\", \"Ankunding\", \"Rempel\"), family_name (\"Christiansen\", \"Ankunding\", \"Rempel\"), student_id (12, 1, 8), date_first_registered (\"1976-10-26 02:33:06\", \"1973-05-19 19:12:46\", \"1973-05-19 19:12:46\"), other_student_details (\"non\", \"qui\", \"dolorum\"), ssn (\"402\", \"34458427\", \"141072406\"), cell_mobile_number (\"1-009-710-5151\", \"677.401.9382\", \"07661787471\"), date_left (\"1971-05-17 19:28:49\", \"2006-08-04 17:26:49\", \"2004-12-08 05:29:11\"), permanent_address_id (5, 11, 9) | student_enrolment : degree_program_id (3, 9, 9), other_details (None), student_id (4, 6, 9), student_enrolment_id (13, 13, 13), semester_id (9, 6, 13) | student_enrolment_courses : course_id (10, 2, 13), student_enrolment_id (14, 9, 9), student_course_id (45105806, 76, 604750) | transcripts : other_details (None), transcript_id (15, 9, 10), transcript_date (\"1984-12-19 00:37:21\", \"1975-10-28 15:16:51\", \"1984-12-19 00:37:21\") | transcript_contents : student_course_id (28982908, 8, 8), transcript_id (15, 13, 5)",
        "ambiguous_queries": [
            "select t1.student_id, t1.first_name, t1.middle_name, t1.surname, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
            "select t1.student_id, t1.first_name, t1.middle_name, t1.family_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"students\": [\"surname\"]}, {\"students\": [\"family_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"students\".\"family_name\"",
        "clear_ambiguity": "{\"last name\": {\"students\": [\"family_name\"]}}",
        "gold_query": "select t1.student_id, t1.first_name, t1.middle_name, t1.family_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1"
    },
    {
        "index": 179,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the average weight of cars each year?",
        "schema_without_content": "continents : contid , continent  | countries : countryname , continent , countryid  | car_makers : id , fullname , country , maker  | model_list : maker , modelid , model  | car_names : make , model , makeid  | cars_data : horsepower , production_year , edispl , weight , cylinders , mpg , accelerate , manufacturing_year , id",
        "schema_with_content": "continents : contid (5, 4, 1), continent (\"america\", \"america\", \"africa\") | countries : countryname (\"france\", \"uk\", \"russia\"), continent (1, 4, 5), countryid (15, 1, 6) | car_makers : id (22, 4, 19), fullname (\"Toyota\", \"Peugeaut\", \"General Motors\"), country (\"7\", \"5\", \"4\"), maker (\"chrysler\", \"volvo\", \"amc\") | model_list : maker (5, 10, 23), modelid (21, 22, 24), model (\"chrysler\", \"amc\", \"mercedes-benz\") | car_names : make (\"dodge rampage\", \"datsun b-210\", \"toyota corolla\"), model (\"nissan\", \"mercedes\", \"fiat\"), makeid (86, 153, 70) | cars_data : horsepower (\"112\", \"113\", \"91\"), production_year (1980, 1980, 1977), edispl (171.0, 131.0, 145.0), weight (2254, 3282, 3563), cylinders (6, 6, 5), mpg (\"27.9\", \"23\", \"23.5\"), accelerate (16.5, 17.4, 20.0), manufacturing_year (1980, 1980, 1977), id (81, 114, 226)",
        "ambiguous_queries": [
            "select avg(weight), manufacturing_year from cars_data group by manufacturing_year",
            "select avg(weight), production_year from cars_data group by production_year"
        ],
        "gold_ambiguity": {
            "match": "{\"year\": [{\"cars_data\": [\"manufacturing_year\"]}, {\"cars_data\": [\"production_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year\" refers to the schema \"cars_data\".\"production_year\"",
        "clear_ambiguity": "{\"year\": {\"cars_data\": [\"production_year\"]}}",
        "gold_query": "select avg(weight), production_year from cars_data group by production_year"
    },
    {
        "index": 180,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "Find all airlines that have fewer than 200 flights.",
        "schema_without_content": "airlines : abbreviation , uid , carrier , company , country  | airports : city , countryabbrev , country , airportname , airportcode  | flights : destairport , sourceairport , airline , flightno",
        "schema_with_content": "airlines : abbreviation (\"Allegiant\", \"American\", \"American\"), uid (9, 6, 11), carrier (\"US Airways\", \"Southwest Airlines\", \"US Airways\"), company (\"US Airways\", \"Southwest Airlines\", \"US Airways\"), country (\"USA\") | airports : city (\"Aberdeen \", \" Amarillo   \", \"Abilene \"), countryabbrev (\"US \", \"US\"), country (\"United States \"), airportname (\"Colorado Plains Regional Airport \", \"Alton \", \"Alpena County Regional \"), airportcode (\"NAB\", \"ADT\", \"ANW\") | flights : destairport (\" AXB\", \" AID\", \" ARB\"), sourceairport (\" ANP\", \" AHH\", \" ALZ\"), airline (5, 3, 9), flightno (1300, 206, 336)",
        "ambiguous_queries": [
            "select t1.carrier from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.carrier having count(*) < 200",
            "select t1.company from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.company having count(*) < 200"
        ],
        "gold_ambiguity": {
            "match": "{\"airlines\": [{\"airlines\": [\"carrier\"]}, {\"airlines\": [\"company\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airlines\" refers to the schema \"airlines\".\"carrier\"",
        "clear_ambiguity": "{\"airlines\": {\"airlines\": [\"carrier\"]}}",
        "gold_query": "select t1.carrier from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.carrier having count(*) < 200"
    },
    {
        "index": 181,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "column",
        "db_file": "column/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "schema_without_content": "employee : employee_id , name , city , age  | shop : number_products , region , shop_id , manager_name , location , name , territory  | hiring : start_from , shop_id , is_full_time , employee_id  | evaluation : year_awarded , bonus , employee_id",
        "schema_with_content": "employee : employee_id (8, 4, 6), name (\"Steve Borthwick\", \"Louis Deacon\", \"Tim Payne\"), city (\"Leicester\", \"Bristol\", \"Bristol\"), age (30, 32, 36) | shop : number_products (4780, 10000, 5000), region (\"Finnair Stadium\", \"Magnum Areena\", \"Lahden Stadion\"), shop_id (5, 8, 8), manager_name (\"Mika Laurikainen\", \"Pekka Lyyski\", \"Ilkka MÃ¤kelÃ¤\"), location (\"Jakobstad\", \"Kuopio\", \"Lahti\"), name (\"HJK\", \"KuPS\", \"HJK\"), territory (\"Finnair Stadium\", \"Magnum Areena\", \"Lahden Stadion\") | hiring : start_from (\"2011\", \"2008\", \"2012\"), shop_id (8, 6, 5), is_full_time (\"T\", \"F\"), employee_id (5, 1, 1) | evaluation : year_awarded (\"2011\", \"2015\", \"2011\"), bonus (3000.0, 2900.0, 4000.0), employee_id (\"2\", \"4\", \"7\")",
        "ambiguous_queries": [
            "select name, location, region from shop order by number_products desc",
            "select name, location, territory from shop order by number_products desc"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"shop\": [\"region\"]}, {\"shop\": [\"territory\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"shop\".\"territory\"",
        "clear_ambiguity": "{\"district\": {\"shop\": [\"territory\"]}}",
        "gold_query": "select name, location, territory from shop order by number_products desc"
    },
    {
        "index": 182,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "column",
        "db_file": "column/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : version_number , date_effective_from , form_type_code , date_effective_to , template_id , template_details , document_type_code  | documents : template_id , other_details , document_id , document_name , document_description  | paragraphs : paragraph_id , other_details , paragraph_text , document_id",
        "schema_with_content": "ref_template_types : template_type_code (\"CV\", \"PPT\", \"PP\"), template_type_description (\"CV\", \"Paper\", \"CV\") | templates : version_number (8, 1, 4), date_effective_from (\"1986-12-09 14:51:36\", \"2010-09-24 01:15:11\", \"1975-10-20 02:28:58\"), form_type_code (\"PP\", \"PP\", \"PPT\"), date_effective_to (\"1989-11-24 19:06:06\", \"2001-04-18 09:29:52\", \"1989-11-24 19:06:06\"), template_id (1, 0, 21), template_details (\"\"), document_type_code (\"PP\", \"PP\", \"PPT\") | documents : template_id (14, 4, 11), other_details (None), document_id (385906526, 16514113, 33930), document_name (\"Summer Show\", \"How to write a CV\", \"How to write a CV\"), document_description (\"u\", \"r\", \"b\") | paragraphs : paragraph_id (9946, 243399026, 9), other_details (None), paragraph_text (\"Somalia\", \"Jersey\", \"Senegal\"), document_id (16514113, 3830, 3540024)",
        "ambiguous_queries": [
            "select version_number, form_type_code from templates where version_number > 5",
            "select version_number, document_type_code from templates where version_number > 5"
        ],
        "gold_ambiguity": {
            "match": "{\"type code\": [{\"templates\": [\"form_type_code\"]}, {\"templates\": [\"document_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type code\" refers to the schema \"templates\".\"document_type_code\"",
        "clear_ambiguity": "{\"type code\": {\"templates\": [\"document_type_code\"]}}",
        "gold_query": "select version_number, document_type_code from templates where version_number > 5"
    },
    {
        "index": 183,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "column",
        "db_file": "column/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_details , template_type_code , date_effective_from , version_number , date_effective_to , template_id  | documents : record_name , document_id , file_name , other_details , template_id , document_description  | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
        "schema_with_content": "ref_template_types : template_type_code (\"PP\", \"CV\", \"PP\"), template_type_description (\"Book\", \"Presentation\", \"Paper\") | templates : template_details (\"\"), template_type_code (\"BK\", \"CV\", \"BK\"), date_effective_from (\"1999-06-21 11:10:30\", \"1979-10-20 21:23:20\", \"1979-10-20 21:23:20\"), version_number (5, 1, 8), date_effective_to (\"2015-09-06 01:08:44\", \"1980-05-07 12:15:47\", \"1995-09-19 22:27:48\"), template_id (21, 22, 1) | documents : record_name (\"Palm reading\", \"A history of Arts\", \"How to read a book\"), document_id (76, 651512, 50123), file_name (\"Palm reading\", \"A history of Arts\", \"How to read a book\"), other_details (None), template_id (1, 1, 6), document_description (\"h\", \"f\", \"b\") | paragraphs : paragraph_id (280120913, 608931827, 9), document_id (3, 16514113, 50123), paragraph_text (\"Korea\", \"Jersey\", \"Korea\"), other_details (None)",
        "ambiguous_queries": [
            "select file_name, template_id from documents where document_description like '%w%'",
            "select record_name, template_id from documents where document_description like '%w%'"
        ],
        "gold_ambiguity": {
            "match": "{\"document name\": [{\"documents\": [\"file_name\"]}, {\"documents\": [\"record_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"document name\" refers to the schema \"documents\".\"record_name\"",
        "clear_ambiguity": "{\"document name\": {\"documents\": [\"record_name\"]}}",
        "gold_query": "select record_name, template_id from documents where document_description like '%w%'"
    },
    {
        "index": 184,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "Return the names of the 3 countries with the fewest people.",
        "schema_without_content": "city : id , population , countrycode , district , name  | sqlite_sequence : name , seq  | country : gnp , region , nation , population , title , surfacearea , governmentform , localname , continent , code , gnpold , headofstate , capital , lifeexpectancy , indepyear , code2  | countrylanguage : percentage , countrycode , isofficial , language",
        "schema_with_content": "city : id (1071, 1374, 1465), population (129683, 106150, 149222), countrycode (\"CHN\", \"MYS\", \"BEN\"), district (\"Bishkek shaary\", \"Bryssel\", \"Rheinland-Pfalz\"), name (\"Bamenda\", \"Trier\", \"Sarajevo\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnp (293.0, 166448.0, 1449.0), region (\"Northern Africa\", \"Southern Africa\", \"Eastern Europe\"), nation (\"Burkina Faso\", \"Comoros\", \"Bolivia\"), population (214000, 286000, 67702000), title (\"Burkina Faso\", \"Comoros\", \"Bolivia\"), surfacearea (185180.0, 964.0, 270534.0), governmentform (\"Parlementary Monarchy\", \"Special Administrative Region of China\", \"Republic\"), localname (\"Â´Uman\", \"Amerika Samoa\", \"Suriname\"), continent (\"Oceania\", \"North America\", \"Asia\"), code (\"BIH\", \"NER\", \"ECU\"), gnpold (105116.0, 1312.0, 2527.0), headofstate (\"Petar Stojanov\", \"Salahuddin Abdul Aziz Shah Alhaj\", \"Luis Ãngel GonzÃ¡lez Macchi\"), capital (1365, 3320, 2884), lifeexpectancy (45.9, 70.7, 52.3), indepyear (1804, 1961, 1143), code2 (\"DM\", \"TN\", \"GB\") | countrylanguage : percentage (12.2, 66.7, 0.7), countrycode (\"SEN\", \"LVA\", \"TUV\"), isofficial (\"T\", \"F\"), language (\"Mbum\", \"Lotuko\", \"Tuvalu\")",
        "ambiguous_queries": [
            "select nation from country order by population asc limit 3",
            "select title from country order by population asc limit 3"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"country\": [\"nation\"]}, {\"country\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"country\".\"nation\"",
        "clear_ambiguity": "{\"names\": {\"country\": [\"nation\"]}}",
        "gold_query": "select nation from country order by population asc limit 3"
    },
    {
        "index": 185,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "Show all countries and the number of singers in each country.",
        "schema_without_content": "stadium : lowest , location , highest , capacity , average , stadium_id , name  | singer : singer_id , is_male , age , song_name , name , citizenship , nationality , song_release_year  | concert : concert_name , stadium_id , year , concert_id , theme  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "stadium : lowest (331, 411, 315), location (\"Ayr United\", \"Stirling Albion\", \"East Fife\"), highest (1980, 837, 921), capacity (10104, 4000, 11998), average (2106, 552, 2106), stadium_id (7, 7, 6), name (\"Forthbank Stadium\", \"Bayview Stadium\", \"Bayview Stadium\") | singer : singer_id (2, 3, 4), is_male (\"F\", \"T\"), age (43, 41, 25), song_name (\"Dangerous\", \"Sun\", \"Love\"), name (\"John Nizinik\", \"Justin Brown\", \"Timbaland\"), citizenship (\"Netherlands\", \"United States\", \"France\"), nationality (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2016\", \"2008\", \"2003\") | concert : concert_name (\"Week 2\", \"Week 2\", \"Super bootcamp\"), stadium_id (\"10\", \"9\", \"10\"), year (\"2014\", \"2015\"), concert_id (3, 5, 1), theme (\"Party All Night\", \"Party All Night\", \"Wide Awake\") | singer_in_concert : concert_id (2, 5, 3), singer_id (\"6\", \"6\", \"2\")",
        "ambiguous_queries": [
            "select nationality, count(*) from singer group by nationality",
            "select citizenship, count(*) from singer group by citizenship"
        ],
        "gold_ambiguity": {
            "match": "{\"countries\": [{\"singer\": [\"nationality\"]}, {\"singer\": [\"citizenship\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"countries\" refers to the schema \"singer\".\"citizenship\"",
        "clear_ambiguity": "{\"countries\": {\"singer\": [\"citizenship\"]}}",
        "gold_query": "select citizenship, count(*) from singer group by citizenship"
    },
    {
        "index": 186,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "schema_without_content": "city : district , name , id , countrycode , population  | sqlite_sequence : name , seq  | country : region , localname , nation , capital , governmentform , continent , code2 , gnpold , lifeexpectancy , population , headofstate , code , indepyear , surfacearea , title , gnp  | countrylanguage : language , isofficial , countrycode , percentage",
        "schema_with_content": "city : district (\"Nordrhein-Westfalen\", \"Hordaland\", \"Selangor\"), name (\"Ansan\", \"Jacobabad\", \"Koje\"), id (3413, 112, 3742), countrycode (\"ROM\", \"MRT\", \"SJM\"), population (117196, 639000, 636104) | sqlite_sequence : name (\"city\"), seq (4079) | country : region (\"Eastern Europe\", \"Western Africa\", \"Micronesia/Caribbean\"), localname (\"Druk-Yul\", \"Santa Sede/CittÃ  del Vaticano\", \"Zhongquo\"), nation (\"Andorra\", \"Ecuador\", \"Congo\"), capital (3225, 3493, 586), governmentform (\"Territory of Australia\", \"Nonmetropolitan Territory of France\", \"Territory of Australia\"), continent (\"Oceania\", \"Europe\", \"Europe\"), code2 (\"TC\", \"GM\", \"KZ\"), gnpold (157.0, 119833.0, 1915.0), lifeexpectancy (66.4, 63.2, 37.8), population (38653600, 3200, 168000), headofstate (\"Kim Jong-il\", \"Bashar al-Assad\", \"Shahabuddin Ahmad\"), code (\"MDV\", \"PAN\", \"ETH\"), indepyear (1980, 1932, 1968), surfacearea (1.5, 200.0, 464.0), title (\"Andorra\", \"Ecuador\", \"Congo\"), gnp (1536.0, 60.0, 4768.0) | countrylanguage : language (\"Watyi\", \"Slovak\", \"Turkish\"), isofficial (\"T\", \"F\"), countrycode (\"LBN\", \"BTN\", \"SMR\"), percentage (6.6, 12.9, 88.9)",
        "ambiguous_queries": [
            "select nation, surfacearea, indepyear from country order by population limit 1",
            "select title, surfacearea, indepyear from country order by population limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"country\": [\"nation\"]}, {\"country\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"country\".\"title\"",
        "clear_ambiguity": "{\"name\": {\"country\": [\"title\"]}}",
        "gold_query": "select title, surfacearea, indepyear from country order by population limit 1"
    },
    {
        "index": 187,
        "db_id": "car_1",
        "ambig_type": "column",
        "db_file": "column/car_1/car_1.sqlite",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "schema_without_content": "continents : continentname , area , contid  | countries : countryid , continent , countryname  | car_makers : maker , fullname , id , country  | model_list : maker , modelid , model  | car_names : model , make , makeid  | cars_data : mpg , accelerate , id , year , cylinders , weight , edispl , horsepower",
        "schema_with_content": "continents : continentname (\"africa\", \"australia\", \"america\"), area (\"africa\", \"australia\", \"america\"), contid (4, 5, 2) | countries : countryid (13, 2, 5), continent (3, 2, 5), countryname (\"usa\", \"italy\", \"new zealand\") | car_makers : maker (\"saab\", \"subaru\", \"citroen\"), fullname (\"Fiat\", \"Opel\", \"Volvo\"), id (19, 7, 12), country (\"5\", \"1\", \"1\") | model_list : maker (23, 14, 21), modelid (9, 9, 11), model (\"honda\", \"amc\", \"pontiac\") | car_names : model (\"opel\", \"buick\", \"mercedes\"), make (\"datsun pl510\", \"pontiac catalina\", \"plymouth grand fury\"), makeid (317, 111, 212) | cars_data : mpg (\"18\", \"37.7\", \"33.5\"), accelerate (17.5, 21.5, 16.1), id (34, 202, 347), year (1974, 1971, 1979), cylinders (3, 6, 6), weight (3755, 1835, 4295), edispl (173.0, 225.0, 232.0), horsepower (\"225\", \"63\", \"77\")",
        "ambiguous_queries": [
            "select t1.continentname, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continentname",
            "select t1.area, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.area"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"continents\": [\"continentname\"]}, {\"continents\": [\"area\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"continents\".\"continentname\"",
        "clear_ambiguity": "{\"name\": {\"continents\": [\"continentname\"]}}",
        "gold_query": "select t1.continentname, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continentname"
    },
    {
        "index": 188,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "schema_without_content": "players : first_name , birth_date , surname , family_name , player_id , country_code , hand  | matches : minutes , loser_rank_points , tourney_name , draw_size , loser_entry , winner_entry , winner_hand , winner_rank_points , winner_rank , winner_age , winner_seed , loser_id , surface , winner_id , best_of , tourney_id , tourney_level , loser_ht , winner_ioc , winner_name , loser_seed , score  6-3\", \"6-3 7-6\", \"6-7 6-4 6-3\", loser_ioc , round , winner_ht , tourney_date , match_num , loser_rank , loser_name , loser_age , year , loser_hand  | rankings : ranking_points , player_id , ranking , tours , ranking_date",
        "schema_with_content": "players : first_name (\"Anamaria\", \"Maryori\", \"Leanne\"), birth_date (19700422, 19860612, 19890301), surname (\"Plunkett\", \"Kadur\", \"Muramatsu\"), family_name (\"Plunkett\", \"Kadur\", \"Muramatsu\"), player_id (218251, 216990, 219450), country_code (\"MRI\", \"CRO\", \"UKR\"), hand (\"\", \"\", \"U\") | matches : minutes (88, 118, 80), loser_rank_points (3897, 4585, 1652), tourney_name (\"Hobart\", \"French Open\", \"Prague\"), draw_size (64, 64, 8), loser_entry (\"\"), winner_entry (\"\"), winner_hand (\"R\", \"L\"), winner_rank_points (3637, 912, 5700), winner_rank (61, 23, 27), winner_age (32.0164271047, 23.041752224499998, 27.463381245700003), winner_seed (15, 15, 14), loser_id (201505, 201506, 202469), surface (\"Hard\", \"Clay\", \"Grass\"), winner_id (201419, 201505, 201505), best_of (3), tourney_id (\"2017-M035\", \"2016-M035\", \"2017-M024\"), tourney_level (\"I\", \"G\", \"I\"), loser_ht (159, 162, 169), winner_ioc (\"AUS\", \"HUN\", \"CHN\"), winner_name (\"Misaki Doi\", \"Julia Goerges\", \"Julia Goerges\"), loser_seed (8, 2, 21), score (\"4-6 7-6(2) 6-3\", \"6-3 7-6(5)\", \"6-7(5) 6-4 6-3\"), loser_ioc (\"USA\", \"TPE\", \"USA\"), round (\"R32\", \"QF\", \"RR\"), winner_ht (183, 180, 159), tourney_date (20170515, 20170410, 20170403), match_num (271, 291, 254), loser_rank (19, 12, 6), loser_name (\"Roberta Vinci\", \"Annika Beck\", \"Petra Kvitova\"), loser_age (24.249144421599997, 33.5277207392, 27.813826146500002), year (2013, 2016, 2017), loser_hand (\"R\", \"L\") | rankings : ranking_points (7900, 2227, 956), player_id (213755, 211411, 201371), ranking (1152, 855, 723), tours (38, 28, 22), ranking_date (19991025, 19930301, 20150427)",
        "ambiguous_queries": [
            "select first_name, family_name from players where hand = 'L' order by birth_date",
            "select first_name, surname from players where hand = 'L' order by birth_date"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"players\": [\"family_name\"]}, {\"players\": [\"surname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"players\".\"surname\"",
        "clear_ambiguity": "{\"last name\": {\"players\": [\"surname\"]}}",
        "gold_query": "select first_name, surname from players where hand = 'L' order by birth_date"
    },
    {
        "index": 189,
        "db_id": "wta_1",
        "ambig_type": "column",
        "db_file": "column/wta_1/wta_1.sqlite",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "schema_without_content": "players : last_name , birth_date , hand , country_code , forename , given_name , player_id  | matches : winner_name , winner_rank , score  6-1\", \"6-4 3-6 6-2\", winner_ioc , tourney_date , winner_rank_points , loser_age , loser_name , tourney_id , best_of , loser_id , winner_seed , loser_entry , winner_age , loser_ht , winner_hand , winner_ht , surface , minutes , year , winner_id , match_num , draw_size , winner_entry , loser_seed , loser_hand , loser_rank_points , round , loser_ioc , tourney_name , loser_rank , tourney_level  | rankings : ranking_points , ranking , tours , player_id , ranking_date",
        "schema_with_content": "players : last_name (\"Fraga Perez\", \"Grossi\", \"Dumitrescu\"), birth_date (19950206, 19930113, 19810622), hand (\"L\", \"L\", \"R\"), country_code (\"BER\", \"NCA\", \"AUS\"), forename (\"Mitsumi\", \"Anete\", \"Virag\"), given_name (\"Mitsumi\", \"Anete\", \"Virag\"), player_id (201848, 212374, 210106) | matches : winner_name (\"Elena Vesnina\", \"Sloane Stephens\", \"Elena Vesnina\"), winner_rank (50, 50, 14), score (\"6-4 6-4\", \"7-6(6) 6-1\", \"6-4 3-6 6-2\"), winner_ioc (\"BEL\", \"UKR\", \"ROU\"), tourney_date (20160627, 20160321, 20160926), winner_rank_points (4745, 2320, 2080), loser_age (22.4887063655, 31.0006844627, 22.4503764545), loser_name (\"Christina Mchale\", \"Camila Giorgi\", \"Yanina Wickmayer\"), tourney_id (\"2017-1052\", \"2016-M035\", \"2016-0804\"), best_of (3), loser_id (201465, 201347, 201517), winner_seed (8, 21, 21), loser_entry (\"\"), winner_age (33.0485968515, 22.135523614, 28.741957563299998), loser_ht (178, 168, 180), winner_hand (\"R\", \"L\"), winner_ht (184, 177, 185), surface (\"Hard\", \"Clay\", \"Grass\"), minutes (142, 51, 179), year (2013, 2016, 2017), winner_id (201521, 201320, 201504), match_num (254, 222, 254), draw_size (32, 12, 64), winner_entry (\"\"), loser_seed (27, 1, 20), loser_hand (\"R\", \"L\"), loser_rank_points (3285, 1936, 2585), round (\"SF\", \"F\", \"QF\"), loser_ioc (\"CHN\", \"TPE\", \"ESP\"), tourney_name (\"Rabat\", \"Bucharest\", \"Moscow\"), loser_rank (23, 17, 52), tourney_level (\"I\", \"P\", \"P\") | rankings : ranking_points (3885, 320, 3481), ranking (1322, 636, 450), tours (29, 18, 40), player_id (206375, 205840, 215999), ranking_date (19950911, 19920217, 19991227)",
        "ambiguous_queries": [
            "select t1.country_code, t1.given_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.given_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
            "select t1.country_code, t1.forename from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.forename from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'"
        ],
        "gold_ambiguity": {
            "match": "{\"first names\": [{\"players\": [\"given_name\"]}, {\"players\": [\"forename\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first names\" refers to the schema \"players\".\"given_name\"",
        "clear_ambiguity": "{\"first names\": {\"players\": [\"given_name\"]}}",
        "gold_query": "select t1.country_code, t1.given_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.given_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'"
    },
    {
        "index": 190,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "Which grade has the most high schoolers?",
        "schema_without_content": "highschooler : id , level , class_grade , name  | friend : student_id , friend_id  | likes : liked_id , student_id",
        "schema_with_content": "highschooler : id (1501, 1510, 1709), level (9, 9, 9), class_grade (9, 9, 9), name (\"Kyle\", \"Gabriel\", \"Kyle\") | friend : student_id (1661, 1381, 1782), friend_id (1304, 1661, 1304) | likes : liked_id (1304, 1501, 1709), student_id (1247, 1689, 1782)",
        "ambiguous_queries": [
            "select level from highschooler group by level order by count(*) desc limit 1",
            "select class_grade from highschooler group by class_grade order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"grade\": [{\"highschooler\": [\"level\"]}, {\"highschooler\": [\"class_grade\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"grade\" refers to the schema \"highschooler\".\"level\"",
        "clear_ambiguity": "{\"grade\": {\"highschooler\": [\"level\"]}}",
        "gold_query": "select level from highschooler group by level order by count(*) desc limit 1"
    },
    {
        "index": 191,
        "db_id": "world_1",
        "ambig_type": "column",
        "db_file": "column/world_1/world_1.sqlite",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "schema_without_content": "city : city_name , district , countrycode , population , title , id  | sqlite_sequence : seq , name  | country : code , capital , gnp , population , lifeexpectancy , continent , surfacearea , gnpold , region , localname , name , headofstate , indepyear , code2 , governmentform  | countrylanguage : countrycode , language , percentage , isofficial",
        "schema_with_content": "city : city_name (\"Middlesbrough\", \"North York\", \"Andimeshk\"), district (\"Tver\", \"North Ossetia-Alania\", \"Norte de Santander\"), countrycode (\"ASM\", \"MTQ\", \"RUS\"), population (356993, 142251, 276111), title (\"Middlesbrough\", \"North York\", \"Andimeshk\"), id (1866, 3311, 2735) | sqlite_sequence : seq (4079), name (\"city\") | country : code (\"RWA\", \"CZE\", \"ERI\"), capital (2460, 902, 2434), gnp (372.0, 116416.0, 5976.0), population (5433000, 599000, 214000), lifeexpectancy (77.8, 70.3, 75.4), continent (\"Asia\", \"South America\", \"Europe\"), surfacearea (118484.0, 53.0, 468.0), gnpold (584.0, 33514.0, 442544.0), region (\"Central Africa\", \"Micronesia/Caribbean\", \"Western Africa\"), localname (\"Liechtenstein\", \"The Cook Islands\", \"Nouvelle-CalÃ©donie\"), name (\"Lithuania\", \"Jamaica\", \"Belgium\"), headofstate (\"Sellapan Rama Nathan\", \"Qabus ibn SaÂ´id\", \"Leo A. Falcam\"), indepyear (1948, 1912, 1806), code2 (\"NZ\", \"AQ\", \"GF\"), governmentform (\"Parlementary Monarchy\", \"US Territory\", \"Monarchy\") | countrylanguage : countrycode (\"MHL\", \"KGZ\", \"ECU\"), language (\"Luxembourgish\", \"Czech\", \"Ngbaka\"), percentage (85.6, 63.1, 11.6), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select distinct t2.city_name from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')",
            "select distinct t2.title from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"city\": [\"city_name\"]}, {\"city\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"city\".\"title\"",
        "clear_ambiguity": "{\"names\": {\"city\": [\"title\"]}}",
        "gold_query": "select distinct t2.title from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')"
    },
    {
        "index": 192,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "What are the names, themes, and number of singers for each and every concert?",
        "schema_without_content": "stadium : highest , location , stadium_id , capacity , name , average , lowest  | singer : song_release_year , age , song_name , singer_id , country , is_male , name  | concert : concert_name , subject , stadium_id , concert_id , topic , year  | singer_in_concert : singer_id , concert_id",
        "schema_with_content": "stadium : highest (921, 837, 1763), location (\"Arbroath\", \"Peterhead\", \"Raith Rovers\"), stadium_id (6, 3, 7), capacity (4000, 10104, 3100), name (\"Hampden Park\", \"Recreation Park\", \"Bayview Stadium\"), average (730, 638, 2106), lowest (400, 331, 533) | singer : song_release_year (\"2014\", \"2014\", \"1992\"), age (25, 32, 25), song_name (\"Hey Oh\", \"You\", \"Love\"), singer_id (4, 6, 3), country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), name (\"Rose White\", \"Justin Brown\", \"John Nizinik\") | concert : concert_name (\"Week 2\", \"Week 2\", \"Super bootcamp\"), subject (\"Happy Tonight\", \"Bleeding Love\", \"Free choice 2\"), stadium_id (\"7\", \"9\", \"1\"), concert_id (3, 2, 6), topic (\"Happy Tonight\", \"Bleeding Love\", \"Free choice 2\"), year (\"2014\", \"2015\") | singer_in_concert : singer_id (\"4\", \"3\", \"3\"), concert_id (1, 5, 2)",
        "ambiguous_queries": [
            "select t2.concert_name, t2.subject, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
            "select t2.concert_name, t2.topic, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id"
        ],
        "gold_ambiguity": {
            "match": "{\"themes\": [{\"concert\": [\"subject\"]}, {\"concert\": [\"topic\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"themes\" refers to the schema \"concert\".\"topic\"",
        "clear_ambiguity": "{\"themes\": {\"concert\": [\"topic\"]}}",
        "gold_query": "select t2.concert_name, t2.topic, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id"
    },
    {
        "index": 193,
        "db_id": "concert_singer",
        "ambig_type": "column",
        "db_file": "column/concert_singer/concert_singer.sqlite",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "schema_without_content": "stadium : average , stadium_id , highest , location , capacity , name , lowest  | singer : name , is_male , song_name , singer_id , age , song_release_year , country  | concert : performance_name , show_name , concert_id , year , theme , stadium_id  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "stadium : average (615, 730, 2106), stadium_id (6, 4, 3), highest (1057, 1057, 1980), location (\"Alloa Athletic\", \"Ayr United\", \"Stirling Albion\"), capacity (3960, 3808, 11998), name (\"Gayfield Park\", \"Somerset Park\", \"Gayfield Park\"), lowest (1294, 1294, 1057) | singer : name (\"John Nizinik\", \"John Nizinik\", \"John Nizinik\"), is_male (\"F\", \"T\"), song_name (\"Gentleman\", \"Dangerous\", \"Hey Oh\"), singer_id (3, 4, 2), age (32, 29, 43), song_release_year (\"2016\", \"2014\", \"2016\"), country (\"Netherlands\", \"United States\", \"France\") | concert : performance_name (\"Week 2\", \"Week 2\", \"Auditions\"), show_name (\"Week 2\", \"Week 2\", \"Auditions\"), concert_id (4, 5, 3), year (\"2014\", \"2015\"), theme (\"Happy Tonight\", \"Happy Tonight\", \"Happy Tonight\"), stadium_id (\"10\", \"10\", \"10\") | singer_in_concert : concert_id (1, 5, 2), singer_id (\"4\", \"5\", \"6\")",
        "ambiguous_queries": [
            "select t2.performance_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
            "select t2.show_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"concert\": [\"performance_name\"]}, {\"concert\": [\"show_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"concert\".\"performance_name\"",
        "clear_ambiguity": "{\"name\": {\"concert\": [\"performance_name\"]}}",
        "gold_query": "select t2.performance_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id"
    },
    {
        "index": 194,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "schema_without_content": "conductor : conductor_id , title , full_name , age , nationality , year_of_work  | orchestra : record_company , conductor_id , orchestra , major_record_format , year_of_founded , orchestra_id  | performance : share , official_ratings_ , date , type , performance_id , weekly_rank , orchestra_id  | show : performance_id , attendance , result , if_first_show , show_id",
        "schema_with_content": "conductor : conductor_id (10, 7, 9), title (\"Igor Stravinsky\", \"Paul Jorgensen\", \"Charles Dutoit\"), full_name (\"Igor Stravinsky\", \"Paul Jorgensen\", \"Charles Dutoit\"), age (47, 40, 41), nationality (\"USA\", \"UK\", \"France\"), year_of_work (11, 21, 6) | orchestra : record_company (\"Philips Classics Records\", \"Decca Records\", \"Deutsche Grammophon\"), conductor_id (7, 9, 9), orchestra (\"Montreal Symphony Orchestra\", \"London Symphony Orchestra\", \"Royal Concertgebouw Orchestra\"), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), year_of_founded (2004.0, 2008.0, 2003.0), orchestra_id (7, 10, 10) | performance : share (\"22.7%\", \"28.0%\", \"28.0%\"), official_ratings_(millions) (8.38, 11.45, 7.39), date (\"9 June\", \"14 June\", \"2007\"), type (\"Auditions 2\", \"Semi-final 2\", \"Semi-final 2\"), performance_id (5, 9, 8), weekly_rank (\"7\", \"2\", \"7\"), orchestra_id (7, 11, 7) | show : performance_id (2, 1, 2), attendance (2431.0, 1925.0, 1026.0), result (\"T\", \"F\"), if_first_show (\"Hampden Park\", \"Glebe Park\", \"Hampden Park\"), show_id (4, 3, 4)",
        "ambiguous_queries": [
            "select t1.full_name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
            "select t1.title from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"conductor\": [\"full_name\"]}, {\"conductor\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"conductor\".\"title\"",
        "clear_ambiguity": "{\"name\": {\"conductor\": [\"title\"]}}",
        "gold_query": "select t1.title from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008"
    },
    {
        "index": 195,
        "db_id": "network_1",
        "ambig_type": "column",
        "db_file": "column/network_1/network_1.sqlite",
        "question": "Show me all grades that have at least 4 students.",
        "schema_without_content": "highschooler : name , id , class_grade , level  | friend : friend_id , student_id  | likes : student_id , liked_id",
        "schema_with_content": "highschooler : name (\"Tiffany\", \"Alexis\", \"John\"), id (1468, 1316, 1661), class_grade (11, 12, 11), level (11, 12, 11) | friend : friend_id (1709, 1468, 1661), student_id (1247, 1101, 1381) | likes : student_id (1709, 1911, 1247), liked_id (1468, 1101, 1247)",
        "ambiguous_queries": [
            "select level from highschooler group by level having count(*) >= 4",
            "select class_grade from highschooler group by class_grade having count(*) >= 4"
        ],
        "gold_ambiguity": {
            "match": "{\"grades\": [{\"highschooler\": [\"level\"]}, {\"highschooler\": [\"class_grade\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"grades\" refers to the schema \"highschooler\".\"level\"",
        "clear_ambiguity": "{\"grades\": {\"highschooler\": [\"level\"]}}",
        "gold_query": "select level from highschooler group by level having count(*) >= 4"
    },
    {
        "index": 196,
        "db_id": "orchestra",
        "ambig_type": "column",
        "db_file": "column/orchestra/orchestra.sqlite",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "schema_without_content": "conductor : age , name , year_of_work , conductor_id , nationality  | orchestra : orchestra , conductor_id , major_record_format , year_of_founded , orchestra_id , audio_company , recording_label  | performance : orchestra_id , official_ratings_ , weekly_rank , type , date , performance_id , share  | show : show_id , attendance , if_first_show , performance_id , result",
        "schema_with_content": "conductor : age (40, 40, 40), name (\"Valeri Gergiev\", \"Paul Jorgensen\", \"Michael Tilson Thomas\"), year_of_work (11, 12, 20), conductor_id (1, 11, 9), nationality (\"USA\", \"UK\", \"France\") | orchestra : orchestra (\"Detroit Symphony Orchestra\", \"San Francisco Symphony Orchestra\", \"Montreal Symphony Orchestra\"), conductor_id (11, 2, 5), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), year_of_founded (2009.0, 2008.0, 2002.0), orchestra_id (5, 6, 1), audio_company (\"Kultur\", \"Decca Records\", \"Deutsche Grammophon\"), recording_label (\"Kultur\", \"Decca Records\", \"Deutsche Grammophon\") | performance : orchestra_id (10, 11, 4), official_ratings_(millions) (7.28, 5.2, 6.73), weekly_rank (\"8\", \"2\", \"2\"), type (\"Live final results\", \"Auditions 3\", \"Auditions 5\"), date (\"13 June\", \"15 June\", \"14 June\"), performance_id (9, 8, 11), share (\"29.3%\", \"38.1%\", \"43.7%\") | show : show_id (3, 4, 5), attendance (695.0, 1026.0, 1925.0), if_first_show (\"Glebe Park\", \"St. Mirren Park\", \"Glebe Park\"), performance_id (5, 1, 5), result (\"T\", \"F\")",
        "ambiguous_queries": [
            "select recording_label from orchestra where year_of_founded < 2003 intersect select recording_label from orchestra where year_of_founded > 2003",
            "select audio_company from orchestra where year_of_founded < 2003 intersect select audio_company from orchestra where year_of_founded > 2003"
        ],
        "gold_ambiguity": {
            "match": "{\"record\": [{\"orchestra\": [\"recording_label\"]}, {\"orchestra\": [\"audio_company\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"record\" refers to the schema \"orchestra\".\"recording_label\"",
        "clear_ambiguity": "{\"record\": {\"orchestra\": [\"recording_label\"]}}",
        "gold_query": "select recording_label from orchestra where year_of_founded < 2003 intersect select recording_label from orchestra where year_of_founded > 2003"
    },
    {
        "index": 197,
        "db_id": "singer",
        "ambig_type": "column",
        "db_file": "column/singer/singer.sqlite",
        "question": "For each singer name, what is the total sales for their songs?",
        "schema_without_content": "singer : stage_name , birth_year , citizenship , artist_name , net_worth_millions , singer_id  | song : song_id , singer_id , sales , highest_position , title \"",
        "schema_with_content": "singer : stage_name (\"Abigail Johnson\", \"Iris Fontbona\", \"Jacqueline Mars\"), birth_year (1942.0, 1942.0, 1949.0), citizenship (\"Australia\", \"France\", \"Australia\"), artist_name (\"Abigail Johnson\", \"Iris Fontbona\", \"Jacqueline Mars\"), net_worth_millions (14.3, 28.8, 17.0), singer_id (1, 6, 4) | song : song_id (8, 3, 4), singer_id (7, 2, 5), sales (300000.0, 335000.0, 292000.0), highest_position (1.0, 3.0), title (\"Yeah\", \"Mysterious Girl\", \"F**k It (I Don't Want You Back)\")",
        "ambiguous_queries": [
            "select t1.stage_name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.stage_name",
            "select t1.artist_name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.artist_name"
        ],
        "gold_ambiguity": {
            "match": "{\"singer name\": [{\"singer\": [\"stage_name\"]}, {\"singer\": [\"artist_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"singer name\" refers to the schema \"singer\".\"artist_name\"",
        "clear_ambiguity": "{\"singer name\": {\"singer\": [\"artist_name\"]}}",
        "gold_query": "select t1.artist_name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.artist_name"
    },
    {
        "index": 198,
        "db_id": "flight_2",
        "ambig_type": "column",
        "db_file": "column/flight_2/flight_2.sqlite",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "schema_without_content": "airlines : country , uid , abbreviation , airline  | airports : countryabbrev , airportcode , country , airportname , city  | flights : route_number , flight_number , airline , sourceairport , destairport",
        "schema_with_content": "airlines : country (\"USA\"), uid (1, 8, 11), abbreviation (\"Delta\", \"USAir\", \"Delta\"), airline (\"United Airlines\", \"Northwest Airlines\", \"American Airlines\") | airports : countryabbrev (\"US \", \"US\"), airportcode (\"AMA\", \"AOS\", \"ACV\"), country (\"United States \"), airportname (\"George Downer \", \"Anaktuvuk \", \"Municipal \"), city (\"Aniak \", \"Adrian \", \" Alexandria LA  \") | flights : route_number (521, 1347, 253), flight_number (521, 1347, 253), airline (1, 2, 9), sourceairport (\" ARX\", \" AMN\", \" ARX\"), destairport (\" ADK\", \" ESF\", \" ABL\")",
        "ambiguous_queries": [
            "select t1.flight_number from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'",
            "select t1.route_number from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'"
        ],
        "gold_ambiguity": {
            "match": "{\"flight numbers\": [{\"flights\": [\"flight_number\"]}, {\"flights\": [\"route_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"flight numbers\" refers to the schema \"flights\".\"flight_number\"",
        "clear_ambiguity": "{\"flight numbers\": {\"flights\": [\"flight_number\"]}}",
        "gold_query": "select t1.flight_number from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'"
    },
    {
        "index": 199,
        "db_id": "tvshow",
        "ambig_type": "column",
        "db_file": "column/tvshow/tvshow.sqlite",
        "question": "What are all of the episodes ordered by ratings?",
        "schema_without_content": "tv_channel : pay_per_view_ppv , pixel_aspect_ratio_par , series_name , hight_definition_tv , language , package_option \", \"Sky Famiglia + Sky HD\", country , content , id  | tv_series : channel , viewers_m , share , air_date , part , weekly_rank , chapter , 18_49_rating_share , id , rating  | cartoon : channel , original_air_date , written_by , production_code , directed_by , id , title",
        "schema_with_content": "tv_channel : pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"MTV Music\", \"Match Music\", \"MTV Music\"), hight_definition_tv (\"no\", \"yes\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia + Sky HD\", \"no ( FTV )\", \"Sky Famiglia + Sky HD\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), id (\"700\", \"707\", \"728\") | tv_series : channel (\"719\", \"708\", \"719\"), viewers_m (\"6.75\", \"5.75\", \"4.24\"), share (9.0, 9.0, 7.0), air_date (\"November 12, 2007\", \"October 1, 2007\", \"October 29, 2007\"), part (\"The Year of the Rabbit\", \"The Hanged Man\", \"Game Three\"), weekly_rank (50.0, 66.0, 61.0), chapter (\"The Year of the Rabbit\", \"The Hanged Man\", \"Game Three\"), 18_49_rating_share (\"2.1/5\", \"3.5/9\", \"2.1/5\"), id (6.0, 2.0, 7.0), rating (\"3.8\", \"5.3\", \"3.4\") | cartoon : channel (\"707\", \"705\", \"705\"), original_air_date (\"February6,2009\", \"January16,2009\", \"February27,2009\"), written_by (\"Adam Beechen\", \"J. M. DeMatteis\", \"James Krieg\"), production_code (106.0, 110.0, 102.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (6.0, 8.0, 4.0), title (\"Day of the Dark Knight!\", \"The Eyes of Despero!\", \"Deep Cover for Batman!\")",
        "ambiguous_queries": [
            "select part from tv_series order by rating",
            "select chapter from tv_series order by rating"
        ],
        "gold_ambiguity": {
            "match": "{\"episodes\": [{\"tv_series\": [\"part\"]}, {\"tv_series\": [\"chapter\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"episodes\" refers to the schema \"tv_series\".\"chapter\"",
        "clear_ambiguity": "{\"episodes\": {\"tv_series\": [\"chapter\"]}}",
        "gold_query": "select chapter from tv_series order by rating"
    },
    {
        "index": 200,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What is the total number of languages used in Aruba?",
        "schema_without_content": "sqlite_sequence : seq , name  | city : name , district , id , population , countrycode  | spoken_language : countrycode , percentage , language , isofficial  | official_language : countrycode , percentage , language , isofficial  | country : gnpold , continent , code , localname , population , lifeexpectancy , surfacearea , gnp , indepyear , governmentform , code2 , name , capital , headofstate , region",
        "schema_with_content": "sqlite_sequence : seq (4079), name (\"city\") | city : name (\"Longueuil\", \"Birgunj\", \"Mobile\"), district (\"Kujawsko-Pomorskie\", \"TÅ¡etÅ¡enia\", \"Antalya\"), id (3035, 4073, 3911), population (172357, 147000, 435964), countrycode (\"IND\", \"NER\", \"CHN\") | spoken_language : countrycode (\"PAK\", \"USA\", \"TON\"), percentage (86.3, 4.0, 9.8), language (\"French\", \"Russian\", \"Gorane\"), isofficial (\"T\", \"F\") | official_language : countrycode (\"PAK\", \"USA\", \"TON\"), percentage (86.3, 4.0, 9.8), language (\"French\", \"Russian\", \"Gorane\"), isofficial (\"T\", \"F\") | country : gnpold (7967.0, 58623.0, 7984.0), continent (\"North America\", \"Europe\", \"South America\"), code (\"BEN\", \"SGP\", \"OMN\"), localname (\"Niue\", \"Norge\", \"Canada\"), population (395000, 83000, 12000), lifeexpectancy (66.5, 37.8, 50.1), surfacearea (13120000.0, 7780.0, 274000.0), gnp (1694.0, 42168.0, 9131.0), indepyear (1844, 1961, 1923), governmentform (\"Territory of Australia\", \"Parliamentary Coprincipality\", \"Dependent Territory of Norway\"), code2 (\"ST\", \"MO\", \"DE\"), name (\"Saint Vincent and the Grenadines\", \"Comoros\", \"Canada\"), capital (1864, 2413, 2256), headofstate (\"Jean-Bertrand Aristide\", \"Leonid KutÅ¡ma\", \"Vladimir Putin\"), region (\"Southern Europe\", \"Western Africa\", \"Micronesia\")",
        "ambiguous_queries": [
            "select count(t2.language) from country as t1 join official_language as t2 on t1.code = t2.countrycode where t1.name = 'Aruba'",
            "select count(t2.language) from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where t1.name = 'Aruba'"
        ],
        "gold_ambiguity": {
            "match": "{\"languages\": [{\"official_language\": [\"language\"]}, {\"spoken_language\": [\"language\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"languages\" refers to the schema \"spoken_language\".\"language\"",
        "clear_ambiguity": "{\"languages\": {\"spoken_language\": [\"language\"]}}",
        "gold_query": "select count(t2.language) from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where t1.name = 'Aruba'"
    },
    {
        "index": 201,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "schema_without_content": "model_list : model , maker , modelid  | car_names : make , model , makeid  | state : countryid , continent , countryname  | car_makers : id , maker , fullname , country  | nation : countryid , continent , countryname  | cars_data : horsepower , id , accelerate , cylinders , weight , mpg , edispl , year  | continents : continent , contid",
        "schema_with_content": "model_list : model (\"cadillac\", \"scion\", \"ford\"), maker (22, 8, 18), modelid (4, 32, 22) | car_names : make (\"chrysler cordoba\", \"plymouth reliant\", \"mazda glc custom\"), model (\"bmw\", \"renault\", \"mercedes\"), makeid (198, 282, 207) | state : countryid (12, 4, 3), continent (4, 4, 1), countryname (\"sweden\", \"brazil\", \"australia\") | car_makers : id (9, 18, 4), maker (\"triumph\", \"toyota\", \"nissan\"), fullname (\"Citroen\", \"Triumph\", \"Daimler Benz\"), country (\"5\", \"5\", \"2\") | nation : countryid (12, 4, 3), continent (4, 4, 1), countryname (\"sweden\", \"brazil\", \"australia\") | cars_data : horsepower (\"108\", \"145\", \"170\"), id (13, 213, 250), accelerate (16.9, 19.0, 14.4), cylinders (6, 5, 3), weight (3693, 2164, 3250), mpg (\"41.5\", \"28.4\", \"23.8\"), edispl (130.0, 130.0, 122.0), year (1979, 1980, 1982) | continents : continent (\"asia\", \"africa\", \"africa\"), contid (4, 2, 2)",
        "ambiguous_queries": [
            "select t1.countryid, t1.countryname from nation as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from nation as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'",
            "select t1.countryid, t1.countryname from state as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from state as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'"
        ],
        "gold_ambiguity": {
            "match": "{\"id\": [{\"nation\": [\"countryid\"]}, {\"state\": [\"countryid\"]}], \"names\": [{\"nation\": [\"names\"]}, {\"state\": [\"names\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"id\" refers to the schema \"nation\".\"countryid\", \"names\" refers to the schema \"nation\".\"names\"",
        "clear_ambiguity": "{\"id\": {\"nation\": [\"countryid\"]}, \"names\": {\"nation\": [\"names\"]}}",
        "gold_query": "select t1.countryid, t1.countryname from nation as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from nation as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'"
    },
    {
        "index": 202,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "Which year had the most matches?",
        "schema_without_content": "rankings : ranking_points , tours , ranking , ranking_date , player_id  | players : last_name , country_code , hand , first_name , player_id , birth_date  | contests : match_num , year , tourney_level , loser_age , score  6-2\", \"7-5 4-6 6-3\", surface , winner_hand , tourney_date , loser_hand , winner_entry , tourney_id , draw_size , minutes , winner_ht , winner_name , winner_ioc , loser_rank , winner_seed , tourney_name , winner_id , loser_rank_points , loser_ioc , loser_entry , loser_id , loser_ht , round , winner_rank_points , best_of , winner_rank , winner_age , loser_seed , loser_name  | games : match_num , year , tourney_level , loser_age , score  6-2\", \"7-5 4-6 6-3\", surface , winner_hand , tourney_date , loser_hand , winner_entry , tourney_id , draw_size , minutes , winner_ht , winner_name , winner_ioc , loser_rank , winner_seed , tourney_name , winner_id , loser_rank_points , loser_ioc , loser_entry , loser_id , loser_ht , round , winner_rank_points , best_of , winner_rank , winner_age , loser_seed , loser_name",
        "schema_with_content": "rankings : ranking_points (150, 229, 2268), tours (1, 39, 17), ranking (777, 1359, 332), ranking_date (19870427, 19890626, 19980427), player_id (202441, 206320, 206200) | players : last_name (\"Gibanel Velasco\", \"Casteleyn\", \"Forman\"), country_code (\"CAN\", \"GER\", \"NCA\"), hand (\"L\", \"\", \"\"), first_name (\"Cassia\", \"Maileen\", \"Qianxin\"), player_id (200024, 207301, 217010), birth_date (19980414, 19830823, 19640130) | contests : match_num (199, 286, 300), year (2013, 2016, 2017), tourney_level (\"P\", \"G\", \"I\"), loser_age (30.0944558522, 24.5585215606, 24.4435318275), score (\"6-2 5-7 7-5\", \"7-5 6-7(5) 6-2\", \"7-5 4-6 6-3\"), surface (\"Hard\", \"Clay\", \"Grass\"), winner_hand (\"R\", \"L\"), tourney_date (20160307, 20160627, 20160425), loser_hand (\"R\", \"L\"), winner_entry (\"\"), tourney_id (\"2017-1079\", \"2016-1082\", \"2016-0602\"), draw_size (12, 32, 128), minutes (92, 120, 75), winner_ht (170, 183, 159), winner_name (\"Kiki Bertens\", \"Dominika Cibulkova\", \"Elena Vesnina\"), winner_ioc (\"NED\", \"FRA\", \"CHN\"), loser_rank (28, 11, 46), winner_seed (9, 27, 20), tourney_name (\"Zhuhai\", \"Linz\", \"Rome\"), winner_id (202429, 201504, 201325), loser_rank_points (3795, 947, 4310), loser_ioc (\"DEN\", \"POL\", \"DEN\"), loser_entry (\"\"), loser_id (201520, 201505, 202429), loser_ht (174, 162, 177), round (\"R16\", \"R32\", \"SF\"), winner_rank_points (2915, 3540, 1768), best_of (3), winner_rank (50, 44, 12), winner_age (33.0485968515, 21.0896646133, 27.718001368899998), loser_seed (16, 20, 23), loser_name (\"Sorana Cirstea\", \"Misaki Doi\", \"Camila Giorgi\") | games : match_num (199, 286, 300), year (2013, 2016, 2017), tourney_level (\"P\", \"G\", \"I\"), loser_age (30.0944558522, 24.5585215606, 24.4435318275), score (\"6-2 5-7 7-5\", \"7-5 6-7(5) 6-2\", \"7-5 4-6 6-3\"), surface (\"Hard\", \"Clay\", \"Grass\"), winner_hand (\"R\", \"L\"), tourney_date (20160307, 20160627, 20160425), loser_hand (\"R\", \"L\"), winner_entry (\"\"), tourney_id (\"2017-1079\", \"2016-1082\", \"2016-0602\"), draw_size (12, 32, 128), minutes (92, 120, 75), winner_ht (170, 183, 159), winner_name (\"Kiki Bertens\", \"Dominika Cibulkova\", \"Elena Vesnina\"), winner_ioc (\"NED\", \"FRA\", \"CHN\"), loser_rank (28, 11, 46), winner_seed (9, 27, 20), tourney_name (\"Zhuhai\", \"Linz\", \"Rome\"), winner_id (202429, 201504, 201325), loser_rank_points (3795, 947, 4310), loser_ioc (\"DEN\", \"POL\", \"DEN\"), loser_entry (\"\"), loser_id (201520, 201505, 202429), loser_ht (174, 162, 177), round (\"R16\", \"R32\", \"SF\"), winner_rank_points (2915, 3540, 1768), best_of (3), winner_rank (50, 44, 12), winner_age (33.0485968515, 21.0896646133, 27.718001368899998), loser_seed (16, 20, 23), loser_name (\"Sorana Cirstea\", \"Misaki Doi\", \"Camila Giorgi\")",
        "ambiguous_queries": [
            "select year from games group by year order by count(*) desc limit 1",
            "select year from contests group by year order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"year\": [{\"contests\": [\"year\"]}, {\"games\": [\"year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year\" refers to the schema \"games\".\"year\"",
        "clear_ambiguity": "{\"year\": {\"games\": [\"year\"]}}",
        "gold_query": "select year from games group by year order by count(*) desc limit 1"
    },
    {
        "index": 203,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "table",
        "db_file": "table/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Show all template type codes and number of templates for each.",
        "schema_without_content": "Drafts : date_effective_to , template_id , template_type_code , date_effective_from , template_details , version_number  | Forms : date_effective_to , template_id , template_type_code , date_effective_from , template_details , version_number  | ref_template_types : template_type_description , template_type_code  | documents : template_id , document_id , document_name , document_description , other_details  | paragraphs : paragraph_text , document_id , other_details , paragraph_id",
        "schema_with_content": "Drafts : date_effective_to (\"1975-07-16 04:52:10\", \"2001-04-18 09:29:52\", \"2001-04-18 09:29:52\"), template_id (23, 23, 4), template_type_code (\"PP\", \"BK\", \"CV\"), date_effective_from (\"2010-09-24 01:15:11\", \"2008-08-01 13:57:26\", \"2008-08-01 13:57:26\"), template_details (\"\"), version_number (5, 4, 9) | Forms : date_effective_to (\"1975-07-16 04:52:10\", \"2001-04-18 09:29:52\", \"2001-04-18 09:29:52\"), template_id (23, 23, 4), template_type_code (\"PP\", \"BK\", \"CV\"), date_effective_from (\"2010-09-24 01:15:11\", \"2008-08-01 13:57:26\", \"2008-08-01 13:57:26\"), template_details (\"\"), version_number (5, 4, 9) | ref_template_types : template_type_description (\"Advertisement\", \"CV\", \"Paper\"), template_type_code (\"BK\", \"BK\", \"AD\") | documents : template_id (8, 7, 6), document_id (82, 3, 80), document_name (\"Learning French\", \"Welcome to NY\", \"Introduction of OS\"), document_description (\"u\", \"r\", \"z\"), other_details (None) | paragraphs : paragraph_text (\"Japan\", \"Korea\", \"Jersey\"), document_id (385906526, 3540024, 3540024), other_details (None), paragraph_id (280120913, 7, 9)",
        "ambiguous_queries": [
            "select template_type_code, count(*) from forms group by template_type_code",
            "select template_type_code, count(*) from drafts group by template_type_code"
        ],
        "gold_ambiguity": {
            "match": "{\"template type codes\": [{\"Drafts\": [\"template_type_code\"]}, {\"Forms\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template type codes\" refers to the schema \"forms\".\"template_type_code\"",
        "clear_ambiguity": "{\"template type codes\": {\"Forms\": [\"template_type_code\"]}}",
        "gold_query": "select template_type_code, count(*) from forms group by template_type_code"
    },
    {
        "index": 204,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What is the model for the car with a weight smaller than the average?",
        "schema_without_content": "car_names : make , model , makeid  | car_makers : maker , country , fullname , id  | auto_data : edispl , year , id , cylinders , weight , mpg , horsepower , accelerate  | vehicle_data : edispl , year , id , cylinders , weight , mpg , horsepower , accelerate  | continents : continent , contid  | countries : countryid , countryname , continent  | model_list : model , maker , modelid",
        "schema_with_content": "car_names : make (\"volkswagen super beetle 117\", \"oldsmobile omega brougham\", \"amc ambassador dpl\"), model (\"chevrolet\", \"mercury\", \"citroen\"), makeid (225, 35, 260) | car_makers : maker (\"renault\", \"volvo\", \"ford\"), country (\"3\", \"6\", \"1\"), fullname (\"Fiat\", \"Citroen\", \"Opel\"), id (15, 13, 21) | auto_data : edispl (390.0, 120.0, 111.0), year (1974, 1981, 1978), id (163, 173, 309), cylinders (6, 3, 8), weight (3432, 3270, 4638), mpg (\"23\", \"38\", \"29.5\"), horsepower (\"67\", \"49\", \"175\"), accelerate (17.0, 21.0, 17.9) | vehicle_data : edispl (390.0, 120.0, 111.0), year (1974, 1981, 1978), id (163, 173, 309), cylinders (6, 3, 8), weight (3432, 3270, 4638), mpg (\"23\", \"38\", \"29.5\"), horsepower (\"67\", \"49\", \"175\"), accelerate (17.0, 21.0, 17.9) | continents : continent (\"europe\", \"asia\", \"europe\"), contid (5, 3, 3) | countries : countryid (10, 4, 13), countryname (\"italy\", \"new zealand\", \"japan\"), continent (1, 4, 5) | model_list : model (\"subaru\", \"fiat\", \"bmw\"), maker (13, 3, 12), modelid (28, 14, 23)",
        "ambiguous_queries": [
            "select t1.model from car_names as t1 join vehicle_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from vehicle_data)",
            "select t1.model from car_names as t1 join auto_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from auto_data)"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"auto_data\": [\"weight\"]}, {\"vehicle_data\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"vehicle_data\".\"weight\"",
        "clear_ambiguity": "{\"weight\": {\"vehicle_data\": [\"weight\"]}}",
        "gold_query": "select t1.model from car_names as t1 join vehicle_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from vehicle_data)"
    },
    {
        "index": 205,
        "db_id": "poker_player",
        "ambig_type": "table",
        "db_file": "table/poker_player/poker_player.sqlite",
        "question": "Give average earnings of poker players who are taller than 200.",
        "schema_without_content": "gambler : earnings , best_finish , people_id , final_table_made , poker_player_id , money_rank  | player : earnings , best_finish , people_id , final_table_made , poker_player_id , money_rank  | people : nationality , name , people_id , height , birth_date",
        "schema_with_content": "gambler : earnings (476090.0, 142800.0, 189233.0), best_finish (1.0, 2.0, 3.0), people_id (1, 1, 2), final_table_made (26.0, 19.0, 21.0), poker_player_id (4, 2, 3), money_rank (154.0, 58.0, 166.0) | player : earnings (476090.0, 142800.0, 189233.0), best_finish (1.0, 2.0, 3.0), people_id (1, 1, 2), final_table_made (26.0, 19.0, 21.0), poker_player_id (4, 2, 3), money_rank (154.0, 58.0, 166.0) | people : nationality (\"Russia\", \"Bulgaria\"), name (\"Aleksey Ostapenko\", \"Aleksey Ostapenko\", \"Semen Poltavskiy\"), people_id (2, 2, 7), height (207.0, 196.0, 194.0), birth_date (\"February 8, 1981\", \"May 26, 1986\", \"August 8, 1986\")",
        "ambiguous_queries": [
            "select avg(t2.earnings) from people as t1 join player as t2 on t1.people_id = t2.people_id where t1.height > 200",
            "select avg(t2.earnings) from people as t1 join gambler as t2 on t1.people_id = t2.people_id where t1.height > 200"
        ],
        "gold_ambiguity": {
            "match": "{\"earnings\": [{\"gambler\": [\"earnings\"]}, {\"player\": [\"earnings\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"earnings\" refers to the schema \"gambler\".\"earnings\"",
        "clear_ambiguity": "{\"earnings\": {\"gambler\": [\"earnings\"]}}",
        "gold_query": "select avg(t2.earnings) from people as t1 join gambler as t2 on t1.people_id = t2.people_id where t1.height > 200"
    },
    {
        "index": 206,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "Find the name and rank points of the winner who won the most times.",
        "schema_without_content": "rankings : ranking_date , ranking_points , tours , ranking , player_id  | contests : minutes , loser_hand , loser_rank , loser_seed , tourney_date , winner_rank_points , winner_ht , draw_size , tourney_id , surface , loser_ht , winner_entry , tourney_name , winner_id , year , winner_rank , winner_name , winner_age , loser_id , winner_seed , score \", \"6-2 7-6\", \"6-1 2-6 6-4\", match_num , tourney_level , loser_ioc , loser_age , round , winner_hand , best_of , winner_ioc , loser_name , loser_entry , loser_rank_points  | players : country_code , hand , last_name , first_name , birth_date , player_id  | games : minutes , loser_hand , loser_rank , loser_seed , tourney_date , winner_rank_points , winner_ht , draw_size , tourney_id , surface , loser_ht , winner_entry , tourney_name , winner_id , year , winner_rank , winner_name , winner_age , loser_id , winner_seed , score \", \"6-2 7-6\", \"6-1 2-6 6-4\", match_num , tourney_level , loser_ioc , loser_age , round , winner_hand , best_of , winner_ioc , loser_name , loser_entry , loser_rank_points",
        "schema_with_content": "rankings : ranking_date (20070416, 19981109, 19910805), ranking_points (1439, 554, 9005), tours (13, 15, 21), ranking (969, 425, 897), player_id (215948, 214020, 202588) | contests : minutes (70, 71, 118), loser_hand (\"R\", \"L\"), loser_rank (81, 1, 47), loser_seed (5, 8, 9), tourney_date (20170306, 20170508, 20160613), winner_rank_points (4745, 5151, 1936), winner_ht (164, 163, 177), draw_size (12, 64, 4), tourney_id (\"2016-M006\", \"2016-0300\", \"2017-560\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ht (173, 169, 162), winner_entry (\"\"), tourney_name (\"Biel\", \"Biel\", \"Doha\"), winner_id (201596, 201419, 201504), year (2013, 2016, 2017), winner_rank (13, 37, 10), winner_name (\"Coco Vandeweghe\", \"Johanna Larsson\", \"Dominika Cibulkova\"), winner_age (24.2628336756, 26.6392881588, 26.4777549624), loser_id (201518, 201325, 201425), winner_seed (28, 19, 6), score (\"6-4 7-6(3)\", \"6-2 7-6(5)\", \"6-1 2-6 6-4\"), match_num (272, 219, 285), tourney_level (\"W\", \"G\", \"I\"), loser_ioc (\"UKR\", \"TPE\", \"RUS\"), loser_age (25.4373716632, 24.9965776865, 23.8275154004), round (\"QF\", \"SF\", \"R16\"), winner_hand (\"R\", \"L\"), best_of (3), winner_ioc (\"BEL\", \"BLR\", \"UKR\"), loser_name (\"Angelique Kerber\", \"Venus Williams\", \"Barbora Zahlavova Strycova\"), loser_entry (\"\"), loser_rank_points (785, 6100, 8300) | players : country_code (\"SYR\", \"FIN\", \"IND\"), hand (\"\", \"R\", \"L\"), last_name (\"Medojevic\", \"Bellahouel\", \"Neamtu\"), first_name (\"Miina\", \"Rennae\", \"Fumiko\"), birth_date (19771031, 19990504, 19620121), player_id (204887, 200764, 214251) | games : minutes (70, 71, 118), loser_hand (\"R\", \"L\"), loser_rank (81, 1, 47), loser_seed (5, 8, 9), tourney_date (20170306, 20170508, 20160613), winner_rank_points (4745, 5151, 1936), winner_ht (164, 163, 177), draw_size (12, 64, 4), tourney_id (\"2016-M006\", \"2016-0300\", \"2017-560\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ht (173, 169, 162), winner_entry (\"\"), tourney_name (\"Biel\", \"Biel\", \"Doha\"), winner_id (201596, 201419, 201504), year (2013, 2016, 2017), winner_rank (13, 37, 10), winner_name (\"Coco Vandeweghe\", \"Johanna Larsson\", \"Dominika Cibulkova\"), winner_age (24.2628336756, 26.6392881588, 26.4777549624), loser_id (201518, 201325, 201425), winner_seed (28, 19, 6), score (\"6-4 7-6(3)\", \"6-2 7-6(5)\", \"6-1 2-6 6-4\"), match_num (272, 219, 285), tourney_level (\"W\", \"G\", \"I\"), loser_ioc (\"UKR\", \"TPE\", \"RUS\"), loser_age (25.4373716632, 24.9965776865, 23.8275154004), round (\"QF\", \"SF\", \"R16\"), winner_hand (\"R\", \"L\"), best_of (3), winner_ioc (\"BEL\", \"BLR\", \"UKR\"), loser_name (\"Angelique Kerber\", \"Venus Williams\", \"Barbora Zahlavova Strycova\"), loser_entry (\"\"), loser_rank_points (785, 6100, 8300)",
        "ambiguous_queries": [
            "select winner_name, winner_rank_points from games group by winner_name order by count(*) desc limit 1",
            "select winner_name, winner_rank_points from contests group by winner_name order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"rank\": [{\"contests\": [\"winner_rank_points\"]}, {\"games\": [\"winner_rank_points\"]}], \"name\": [{\"contests\": [\"winner_name\"]}, {\"games\": [\"winner_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"rank\" refers to the schema \"contests\".\"winner_rank_points\", \"name\" refers to the schema \"contests\".\"winner_name\"",
        "clear_ambiguity": "{\"rank\": {\"contests\": [\"winner_rank_points\"]}, \"name\": {\"contests\": [\"winner_name\"]}}",
        "gold_query": "select winner_name, winner_rank_points from contests group by winner_name order by count(*) desc limit 1"
    },
    {
        "index": 207,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Give the names of nations that speak both English and French.",
        "schema_without_content": "official_language : countrycode , isofficial , language , percentage  | city : name , population , id , countrycode , district  | sqlite_sequence : seq , name  | spoken_language : countrycode , isofficial , language , percentage  | country : code , code2 , name , gnp , population , region , headofstate , governmentform , capital , lifeexpectancy , surfacearea , indepyear , gnpold , localname , continent",
        "schema_with_content": "official_language : countrycode (\"PRY\", \"SAU\", \"TUV\"), isofficial (\"T\", \"F\"), language (\"Icelandic\", \"Avarian\", \"Mende\"), percentage (22.4, 2.4, 5.0) | city : name (\"Wuzhou\", \"NÃ®mes\", \"Machida\"), population (149080, 97855, 1398800), id (3430, 344, 2856), countrycode (\"IRL\", \"GRL\", \"TKM\"), district (\"Edo & Delta\", \"Alagoas\", \"Alsace\") | sqlite_sequence : seq (4079), name (\"city\") | spoken_language : countrycode (\"PRY\", \"SAU\", \"TUV\"), isofficial (\"T\", \"F\"), language (\"Icelandic\", \"Avarian\", \"Mende\"), percentage (22.4, 2.4, 5.0) | country : code (\"GUY\", \"NCL\", \"MRT\"), code2 (\"CD\", \"CI\", \"IT\"), name (\"Martinique\", \"Philippines\", \"Turks and Caicos Islands\"), gnp (12178.0, 24375.0, 264478.0), population (27000, 12878000, 77000), region (\"Micronesia/Caribbean\", \"Nordic Countries\", \"Eastern Asia\"), headofstate (\"Mohammed Abdel Aziz\", \"Hugo BÃ¡nzer SuÃ¡rez\", \"Alpha Oumar KonarÃ©\"), governmentform (\"People'sRepublic\", \"Occupied by Marocco\", \"Constitutional Monarchy, Federation\"), capital (766, 3306, 2912), lifeexpectancy (53.6, 42.5, 71.4), surfacearea (207600.0, 2586.0, 3287263.0), indepyear (1581, 1929, 1816), gnpold (2141.0, None, 129092.0), localname (\"Montserrat\", \"BÃ©nin\", \"Ertra\"), continent (\"North America\", \"Asia\", \"Europe\")",
        "ambiguous_queries": [
            "select t1.name from country as t1 join official_language as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from country as t1 join official_language as t2 on t1.code = t2.countrycode where t2.language = 'French'",
            "select t1.name from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where t2.language = 'French'"
        ],
        "gold_ambiguity": {
            "match": "{\"speak\": [{\"official_language\": [\"language\"]}, {\"spoken_language\": [\"language\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"speak\" refers to the schema \"official_language\".\"language\"",
        "clear_ambiguity": "{\"speak\": {\"official_language\": [\"language\"]}}",
        "gold_query": "select t1.name from country as t1 join official_language as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from country as t1 join official_language as t2 on t1.code = t2.countrycode where t2.language = 'French'"
    },
    {
        "index": 208,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "schema_without_content": "model_list : model , modelid , maker  | cars_data : weight , cylinders , mpg , horsepower , accelerate , id , year , edispl  | countries : continent , countryname , countryid  | continents : continent , contid  | auto_brands : maker , fullname , id , country  | manufacturers : maker , fullname , id , country  | car_names : make , makeid , model",
        "schema_with_content": "model_list : model (\"oldsmobile\", \"volvo\", \"opel\"), modelid (3, 10, 14), maker (18, 12, 14) | cars_data : weight (2050, 2074, 4166), cylinders (4, 4, 8), mpg (\"44\", \"41.5\", \"34.3\"), horsepower (\"91\", \"95\", \"115\"), accelerate (15.0, 10.5, 19.0), id (40, 359, 298), year (1975, 1974, 1978), edispl (302.0, 155.0, 173.0) | countries : continent (4, 2, 3), countryname (\"korea\", \"nigeria\", \"italy\"), countryid (11, 13, 15) | continents : continent (\"australia\", \"africa\", \"africa\"), contid (3, 2, 2) | auto_brands : maker (\"toyota\", \"triumph\", \"nissan\"), fullname (\"Honda\", \"Nissan Motors\", \"Mazda\"), id (8, 12, 9), country (\"2\", \"2\", \"2\") | manufacturers : maker (\"toyota\", \"triumph\", \"nissan\"), fullname (\"Honda\", \"Nissan Motors\", \"Mazda\"), id (8, 12, 9), country (\"2\", \"2\", \"2\") | car_names : make (\"toyota corolla liftback\", \"plymouth horizon tc3\", \"ford fairmont 4\"), makeid (229, 12, 15), model (\"subaru\", \" volkswagen\", \"hi\")",
        "ambiguous_queries": [
            "select t1.fullname, t1.id, count(*) from manufacturers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id",
            "select t1.fullname, t1.id, count(*) from auto_brands as t1 join model_list as t2 on t1.id = t2.maker group by t1.id"
        ],
        "gold_ambiguity": {
            "match": "{\"full name\": [{\"auto_brands\": [\"fullname\"]}, {\"manufacturers\": [\"fullname\"]}], \"id\": [{\"auto_brands\": [\"id\"]}, {\"manufacturers\": [\"id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"full name\" refers to the schema \"auto_brands\".\"fullname\", \"id\" refers to the schema \"auto_brands\".\"id\"",
        "clear_ambiguity": "{\"full name\": {\"auto_brands\": [\"fullname\"]}, \"id\": {\"auto_brands\": [\"id\"]}}",
        "gold_query": "select t1.fullname, t1.id, count(*) from auto_brands as t1 join model_list as t2 on t1.id = t2.maker group by t1.id"
    },
    {
        "index": 209,
        "db_id": "concert_singer",
        "ambig_type": "table",
        "db_file": "table/concert_singer/concert_singer.sqlite",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "schema_without_content": "performer : name , country , singer_id , is_male , song_release_year , song_name , age  | stadium : location , stadium_id , lowest , highest , capacity , average , name  | concert : theme , concert_name , year , stadium_id , concert_id  | artist : name , country , singer_id , is_male , song_release_year , song_name , age  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "performer : name (\"Timbaland\", \"Joe Sharp\", \"John Nizinik\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (3, 3, 1), is_male (\"F\", \"T\"), song_release_year (\"2013\", \"2014\", \"1992\"), song_name (\"Gentleman\", \"Dangerous\", \"Love\"), age (29, 43, 25) | stadium : location (\"Stirling Albion\", \"Arbroath\", \"Stirling Albion\"), stadium_id (9, 6, 6), lowest (331, 533, 404), highest (1125, 1057, 1057), capacity (2000, 2000, 3808), average (552, 638, 615), name (\"Bayview Stadium\", \"Balmoor\", \"Somerset Park\") | concert : theme (\"Free choice\", \"Happy Tonight\", \"Happy Tonight\"), concert_name (\"Auditions\", \"Home Visits\", \"Home Visits\"), year (\"2014\", \"2015\"), stadium_id (\"1\", \"10\", \"1\"), concert_id (4, 4, 2) | artist : name (\"Timbaland\", \"Joe Sharp\", \"John Nizinik\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (3, 3, 1), is_male (\"F\", \"T\"), song_release_year (\"2013\", \"2014\", \"1992\"), song_name (\"Gentleman\", \"Dangerous\", \"Love\"), age (29, 43, 25) | singer_in_concert : concert_id (4, 3, 6), singer_id (\"5\", \"4\", \"6\")",
        "ambiguous_queries": [
            "select distinct country from artist where age > 20",
            "select distinct country from performer where age > 20"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"artist\": [\"age\"]}, {\"performer\": [\"age\"]}], \"countries\": [{\"artist\": [\"country\"]}, {\"performer\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"artist\".\"age\", \"countries\" refers to the schema \"artist\".\"country\"",
        "clear_ambiguity": "{\"age\": {\"artist\": [\"age\"]}, \"countries\": {\"artist\": [\"country\"]}}",
        "gold_query": "select distinct country from artist where age > 20"
    },
    {
        "index": 210,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "schema_without_content": "tv_series : rating , episode , channel , weekly_rank , 18_49_rating_share , share , id , viewers_m , air_date  | Broadcasting_Channel : id , package_option \", \"Option\", pay_per_view_ppv , content , language , pixel_aspect_ratio_par , series_name , hight_definition_tv , country  | Television_Channel : id , package_option \", \"Option\", pay_per_view_ppv , content , language , pixel_aspect_ratio_par , series_name , hight_definition_tv , country  | cartoon : title , original_air_date , id , channel , written_by , production_code , directed_by",
        "schema_with_content": "tv_series : rating (\"5.3\", \"3.7\", \"3.4\"), episode (\"Game Three\", \"Game Three\", \"The Year of the Rabbit\"), channel (\"701\", \"700\", \"714\"), weekly_rank (62.0, 72.0, 71.0), 18_49_rating_share (\"2.4/6\", \"1.5/4\", \"2.9/7\"), share (5.0, 6.0, 6.0), id (7.0, 5.0, 3.0), viewers_m (\"5.75\", \"8.23\", \"9.16\"), air_date (\"October 15, 2007\", \"October 1, 2007\", \"December 17, 2007\") | Broadcasting_Channel : id (\"728\", \"728\", \"709\"), package_option (\"Sky Famiglia\", \"no ( FTV )\", \"Option\"), pay_per_view_ppv (\"no\"), content (\"music\"), language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"MTV Hits\", \"myDeejay\", \"MTV Dance\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | Television_Channel : id (\"728\", \"728\", \"709\"), package_option (\"Sky Famiglia\", \"no ( FTV )\", \"Option\"), pay_per_view_ppv (\"no\"), content (\"music\"), language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"MTV Hits\", \"myDeejay\", \"MTV Dance\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | cartoon : title (\"Return of the Fearsome Fangs!\", \"Terror on Dinosaur Island!\", \"Deep Cover for Batman!\"), original_air_date (\"November14,2008\", \"January9,2009\", \"November21,2008\"), id (5.0, 6.0, 3.0), channel (\"728\", \"700\", \"703\"), written_by (\"Todd Casey\", \"Matt Wayne\", \"James Krieg\"), production_code (112.0, 105.0, 109.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "ambiguous_queries": [
            "select t1.series_name from broadcasting_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = 'A Love of a Lifetime'",
            "select t1.series_name from television_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = 'A Love of a Lifetime'"
        ],
        "gold_ambiguity": {
            "match": "{\"series\": [{\"Broadcasting_Channel\": [\"series_name\"]}, {\"Television_Channel\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"series\" refers to the schema \"broadcasting_channel\".\"series_name\"",
        "clear_ambiguity": "{\"series\": {\"Broadcasting_Channel\": [\"series_name\"]}}",
        "gold_query": "select t1.series_name from broadcasting_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = 'A Love of a Lifetime'"
    },
    {
        "index": 211,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "schema_without_content": "sections : other_details , course_id , section_description , section_name , section_id  | student_enrolment : student_id , student_enrolment_id , semester_id , degree_program_id , other_details  | transcript_contents : transcript_id , student_course_id  | Academic_Programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details  | courses : course_description , other_details , course_id , course_name  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | Majors : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details  | semesters : semester_name , semester_id , other_details , semester_description  | addresses : line_2 , line_3 , zip_postcode , other_address_details , city , address_id , line_1 , country , state_province_county  | students : student_id , middle_name , permanent_address_id , last_name , email_address , ssn , date_left , other_student_details , cell_mobile_number 365-8405\", \"436.613.7683\", \"07661787471\", date_first_registered , current_address_id , first_name  | transcripts : transcript_id , other_details , transcript_date  | departments : department_description , department_id , department_name , other_details",
        "schema_with_content": "sections : other_details (None), course_id (4, 9, 10), section_description (\"reprehenderit\", \"reprehenderit\", \"quis\"), section_name (\"o\", \"g\", \"a\"), section_id (11, 8, 2) | student_enrolment : student_id (7, 6, 5), student_enrolment_id (11, 1, 4), semester_id (13, 1, 1), degree_program_id (12, 3, 4), other_details (None) | transcript_contents : transcript_id (5, 15, 12), student_course_id (2, 28982908, 8) | Academic_Programs : degree_program_id (10, 1, 14), department_id (13, 12, 8), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"assumenda\", \"qui\", \"cumque\"), other_details (None) | courses : course_description (\"c\", \"n\", \"p\"), other_details (None), course_id (3, 10, 6), course_name (\"fr\", \"oop\", \"ds\") | student_enrolment_courses : course_id (14, 10, 2), student_enrolment_id (2, 2, 14), student_course_id (7, 2, 45105806) | Majors : degree_program_id (10, 1, 14), department_id (13, 12, 8), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"assumenda\", \"qui\", \"cumque\"), other_details (None) | semesters : semester_name (\"spring 2013\", \"fall 2018\", \"spring 2016\"), semester_id (10, 11, 5), other_details (None), semester_description (\"q\", \"g\", \"f\") | addresses : line_2 (\"Suite 383\", \"Apt. 583\", \"Suite 239\"), line_3 (None), zip_postcode (\"839\", \"847\", \"839\"), other_address_details (None), city (\"Michelleburgh\", \"Lake Laishafurt\", \"Lake Careyberg\"), address_id (15, 7, 3), line_1 (\"186 Evan Motorway Apt. 409\", \"16998 Mraz Lodge\", \"0144 Lamar Plaza Apt. 346\"), country (\"Gabon\", \"Samoa\", \"Croatia\"), state_province_county (\"Delaware\", \"WestVirginia\", \"Florida\") | students : student_id (9, 13, 1), middle_name (\"Aaliyah\", \"Brooklyn\", \"Brooklyn\"), permanent_address_id (8, 14, 5), last_name (\"Osinski\", \"Mohr\", \"Rogahn\"), email_address (\"swift.kolby@example.com\", \"jhuel@example.com\", \"gracie29@example.com\"), ssn (\"\", \"\", \"402\"), date_left (\"1971-05-17 19:28:49\", \"2006-08-04 17:26:49\", \"2016-04-09 12:27:04\"), other_student_details (\"autem\", \"facilis\", \"autem\"), cell_mobile_number (\"(507)365-8405\", \"436.613.7683\", \"07661787471\"), date_first_registered (\"2004-12-24 12:36:46\", \"1971-02-05 07:28:23\", \"1982-06-19 13:15:18\"), current_address_id (14, 15, 1), first_name (\"Orrin\", \"Jordy\", \"Milton\") | transcripts : transcript_id (8, 9, 11), other_details (None), transcript_date (\"2010-12-13 10:55:15\", \"1998-11-22 12:18:29\", \"1975-10-28 15:16:51\") | departments : department_description (\"nihil\", \"ea\", \"non\"), department_id (10, 11, 4), department_name (\"computer science\", \"statistics\", \"economics\"), other_details (None)",
        "ambiguous_queries": [
            "select t1.degree_program_id, t1.degree_summary_name from majors as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
            "select t1.degree_program_id, t1.degree_summary_name from academic_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"id\": [{\"Academic_Programs\": [\"degree_program_id\"]}, {\"Majors\": [\"degree_program_id\"]}], \"summary\": [{\"Academic_Programs\": [\"degree_summary_name\"]}, {\"Majors\": [\"degree_summary_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"id\" refers to the schema \"academic_programs\".\"degree_program_id\", \"summary\" refers to the schema \"academic_programs\".\"degree_summary_name\"",
        "clear_ambiguity": "{\"id\": {\"Academic_Programs\": [\"degree_program_id\"]}, \"summary\": {\"Academic_Programs\": [\"degree_summary_name\"]}}",
        "gold_query": "select t1.degree_program_id, t1.degree_summary_name from academic_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1"
    },
    {
        "index": 212,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "schema_without_content": "contests : winner_rank_points , winner_rank , round , winner_name , loser_ioc , loser_rank_points , winner_ioc , winner_id , loser_name , tourney_name , tourney_id , loser_entry , winner_hand , loser_seed , winner_seed , best_of , tourney_date , loser_hand , winner_ht , match_num , surface , winner_entry , loser_age , year , score \", \"6-4 6-4\", winner_age , minutes , loser_rank , draw_size , loser_ht , tourney_level , loser_id  | rankings : player_id , ranking_date , ranking , ranking_points , tours  | players : hand , birth_date , first_name , last_name , player_id , country_code  | games : winner_rank_points , winner_rank , round , winner_name , loser_ioc , loser_rank_points , winner_ioc , winner_id , loser_name , tourney_name , tourney_id , loser_entry , winner_hand , loser_seed , winner_seed , best_of , tourney_date , loser_hand , winner_ht , match_num , surface , winner_entry , loser_age , year , score \", \"6-4 6-4\", winner_age , minutes , loser_rank , draw_size , loser_ht , tourney_level , loser_id",
        "schema_with_content": "contests : winner_rank_points (1025, 3780, 5270), winner_rank (22, 21, 42), round (\"BR\", \"BR\", \"F\"), winner_name (\"Barbora Zahlavova Strycova\", \"Angelique Kerber\", \"Samantha Stosur\"), loser_ioc (\"SRB\", \"JPN\", \"ESP\"), loser_rank_points (2238, 1870, 4310), winner_ioc (\"SWE\", \"GER\", \"CHN\"), winner_id (201585, 201540, 201425), loser_name (\"Jelena Jankovic\", \"Angelique Kerber\", \"Serena Williams\"), tourney_name (\"Wuhan\", \"Linz\", \"Gstaad\"), tourney_id (\"2016-1048\", \"2017-520\", \"2017-M024\"), loser_entry (\"\"), winner_hand (\"R\", \"L\"), loser_seed (21, 6, 4), winner_seed (15, 20, 13), best_of (3), tourney_date (20160627, 20160822, 20170522), loser_hand (\"R\", \"L\"), winner_ht (185, 175, 176), match_num (148, 260, 287), surface (\"Hard\", \"Clay\", \"Grass\"), winner_entry (\"\"), loser_age (25.3990417522, 27.4442162902, 29.297741273099998), year (2013, 2016, 2017), score (\"7-5 7-5\", \"6-4 7-6(2)\", \"6-4 6-4\"), winner_age (28.9336071184, 23.8494182067, 27.1238877481), minutes (105, 58, 154), loser_rank (60, 8, 34), draw_size (8, 64, 8), loser_ht (182, 162, 172), tourney_level (\"W\", \"P\", \"G\"), loser_id (202469, 201615, 201539) | rankings : player_id (214304, 202627, 201693), ranking_date (20040112, 20050613, 20060619), ranking (410, 1400, 1458), ranking_points (1500, 1492, 1328), tours (25, 14, 25) | players : hand (\"R\", \"L\", \"U\"), birth_date (19830426, 19670715, 19840708), first_name (\"Aleida\", \"Breanna Alexa Bachini\", \"Ji Hee\"), last_name (\"Butkovska\", \"Della Vedova\", \"La Fratta\"), player_id (203786, 215971, 208324), country_code (\"SWE\", \"GUD\", \"CRO\") | games : winner_rank_points (1025, 3780, 5270), winner_rank (22, 21, 42), round (\"BR\", \"BR\", \"F\"), winner_name (\"Barbora Zahlavova Strycova\", \"Angelique Kerber\", \"Samantha Stosur\"), loser_ioc (\"SRB\", \"JPN\", \"ESP\"), loser_rank_points (2238, 1870, 4310), winner_ioc (\"SWE\", \"GER\", \"CHN\"), winner_id (201585, 201540, 201425), loser_name (\"Jelena Jankovic\", \"Angelique Kerber\", \"Serena Williams\"), tourney_name (\"Wuhan\", \"Linz\", \"Gstaad\"), tourney_id (\"2016-1048\", \"2017-520\", \"2017-M024\"), loser_entry (\"\"), winner_hand (\"R\", \"L\"), loser_seed (21, 6, 4), winner_seed (15, 20, 13), best_of (3), tourney_date (20160627, 20160822, 20170522), loser_hand (\"R\", \"L\"), winner_ht (185, 175, 176), match_num (148, 260, 287), surface (\"Hard\", \"Clay\", \"Grass\"), winner_entry (\"\"), loser_age (25.3990417522, 27.4442162902, 29.297741273099998), year (2013, 2016, 2017), score (\"7-5 7-5\", \"6-4 7-6(2)\", \"6-4 6-4\"), winner_age (28.9336071184, 23.8494182067, 27.1238877481), minutes (105, 58, 154), loser_rank (60, 8, 34), draw_size (8, 64, 8), loser_ht (182, 162, 172), tourney_level (\"W\", \"P\", \"G\"), loser_id (202469, 201615, 201539)",
        "ambiguous_queries": [
            "select winner_name, loser_name from games order by minutes desc limit 1",
            "select winner_name, loser_name from contests order by minutes desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"loser\": [{\"contests\": [\"loser_name\"]}, {\"games\": [\"loser_name\"]}], \"longest\": [{\"contests\": [\"minutes\"]}, {\"games\": [\"minutes\"]}], \"winner\": [{\"contests\": [\"winner_name\"]}, {\"games\": [\"winner_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"loser\" refers to the schema \"games\".\"loser_name\", \"longest\" refers to the schema \"games\".\"minutes\", \"winner\" refers to the schema \"games\".\"winner_name\"",
        "clear_ambiguity": "{\"loser\": {\"games\": [\"loser_name\"]}, \"longest\": {\"games\": [\"minutes\"]}, \"winner\": {\"games\": [\"winner_name\"]}}",
        "gold_query": "select winner_name, loser_name from games order by minutes desc limit 1"
    },
    {
        "index": 213,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "schema_without_content": "car_names : makeid , make , model  | countries : countryname , continent , countryid  | car_makers : fullname , country , id , maker  | model_list : model , maker , modelid  | continents : contid , continent  | auto_data : cylinders , horsepower , weight , year , edispl , id , mpg , accelerate  | vehicle_data : cylinders , horsepower , weight , year , edispl , id , mpg , accelerate",
        "schema_with_content": "car_names : makeid (182, 110, 314), make (\"hi 1200d\", \"mazda rx-7 gs\", \"pontiac grand prix\"), model (\"capri\", \"honda\", \"saab\") | countries : countryname (\"new zealand\", \"egypt\", \"korea\"), continent (4, 3, 4), countryid (12, 6, 4) | car_makers : fullname (\"Chrysler\", \"Volkswagen\", \"Subaru\"), country (\"6\", \"2\", \"8\"), id (6, 5, 6), maker (\"gm\", \"gm\", \"daimler benz\") | model_list : model (\"amc\", \"mercedes\", \"amc\"), maker (9, 12, 23), modelid (36, 10, 16) | continents : contid (3, 2, 4), continent (\"europe\", \"asia\", \"asia\") | auto_data : cylinders (5, 8, 8), horsepower (\"135\", \"208\", \"105\"), weight (2910, 4363, 3535), year (1973, 1978, 1980), edispl (71.0, 383.0, 105.0), id (148, 249, 308), mpg (\"33.8\", \"15.5\", \"37.3\"), accelerate (18.8, 16.7, 20.1) | vehicle_data : cylinders (5, 8, 8), horsepower (\"135\", \"208\", \"105\"), weight (2910, 4363, 3535), year (1973, 1978, 1980), edispl (71.0, 383.0, 105.0), id (148, 249, 308), mpg (\"33.8\", \"15.5\", \"37.3\"), accelerate (18.8, 16.7, 20.1)",
        "ambiguous_queries": [
            "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join vehicle_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford Motor Company'",
            "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join auto_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford Motor Company'"
        ],
        "gold_ambiguity": {
            "match": "{\"lighter\": [{\"auto_data\": [\"weight\"]}, {\"vehicle_data\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"lighter\" refers to the schema \"vehicle_data\".\"weight\"",
        "clear_ambiguity": "{\"lighter\": {\"vehicle_data\": [\"weight\"]}}",
        "gold_query": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join vehicle_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford Motor Company'"
    },
    {
        "index": 214,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "schema_without_content": "learner : age , lname , sex , fname , city_code , stuid , advisor , major  | has_pet : petid , stuid  | enrollee : age , lname , sex , fname , city_code , stuid , advisor , major  | pets : petid , pettype , weight , pet_age",
        "schema_with_content": "learner : age (26, 22, 21), lname (\"Kim\", \"Andreou\", \"Pang\"), sex (\"F\", \"M\"), fname (\"Bruce\", \"Arthur\", \"Tracy\"), city_code (\"PIT\", \"NYC\", \"HOU\"), stuid (1032, 1017, 1029), advisor (8918, 8918, 1121), major (100, 540, 100) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | enrollee : age (26, 22, 21), lname (\"Kim\", \"Andreou\", \"Pang\"), sex (\"F\", \"M\"), fname (\"Bruce\", \"Arthur\", \"Tracy\"), city_code (\"PIT\", \"NYC\", \"HOU\"), stuid (1032, 1017, 1029), advisor (8918, 8918, 1121), major (100, 540, 100) | pets : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1)",
        "ambiguous_queries": [
            "select count(*), t1.stuid from enrollee as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
            "select count(*), t1.stuid from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid"
        ],
        "gold_ambiguity": {
            "match": "{\"student id\": [{\"enrollee\": [\"stuid\"]}, {\"learner\": [\"stuid\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"student id\" refers to the schema \"learner\".\"stuid\"",
        "clear_ambiguity": "{\"student id\": {\"learner\": [\"stuid\"]}}",
        "gold_query": "select count(*), t1.stuid from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid"
    },
    {
        "index": 215,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "Find the major and age of students who do not have a cat pet.",
        "schema_without_content": "Animals : weight , pettype , petid , pet_age  | has_pet : stuid , petid  | Companions : weight , pettype , petid , pet_age  | student : fname , sex , stuid , advisor , city_code , major , lname , age",
        "schema_with_content": "Animals : weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), pet_age (3, 2, 1) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | Companions : weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), pet_age (3, 2, 1) | student : fname (\"Lisa\", \"Dinesh\", \"David\"), sex (\"F\", \"M\"), stuid (1023, 1028, 1035), advisor (8723, 8721, 8772), city_code (\"WAS\", \"PIT\", \"HKG\"), major (50, 600, 540), lname (\"Apap\", \"Jones\", \"Nelson\"), age (17, 22, 22)",
        "ambiguous_queries": [
            "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join animals as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
            "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join companions as t3 on t3.petid = t2.petid where t3.pettype = 'cat')"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"Animals\": [\"age\"]}, {\"Companions\": [\"age\"]}], \"major\": [{\"Animals\": [\"major\"]}, {\"Companions\": [\"major\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"companions\".\"age\", \"major\" refers to the schema \"companions\".\"major\"",
        "clear_ambiguity": "{\"age\": {\"Companions\": [\"age\"]}, \"major\": {\"Companions\": [\"major\"]}}",
        "gold_query": "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join companions as t3 on t3.petid = t2.petid where t3.pettype = 'cat')"
    },
    {
        "index": 216,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "schema_without_content": "conductor : year_of_work , nationality , age , name , conductor_id  | concert : orchestra_id , performance_id , date , weekly_rank , official_ratings_ , type , share  | orchestra : record_company , conductor_id , major_record_format , orchestra_id , orchestra , year_of_founded  | recital : orchestra_id , performance_id , date , weekly_rank , official_ratings_ , type , share  | show : result , show_id , performance_id , attendance , if_first_show",
        "schema_with_content": "conductor : year_of_work (11, 11, 16), nationality (\"USA\", \"UK\", \"France\"), age (50, 41, 40), name (\"Robert Craft\", \"Antal DorÃ¡ti\", \"Colin Davis\"), conductor_id (10, 1, 10) | concert : orchestra_id (11, 10, 11), performance_id (10, 2, 5), date (\"17 June\", \"15 June\", \"10 June\"), weekly_rank (\"11\", \"8\", \"TBC\"), official_ratings_(millions) (5.2, 7.51, 9.29), type (\"Auditions 4\", \"Auditions 4\", \"Auditions 2\"), share (\"34.0%\", \"29.2%\", \"22.7%\") | orchestra : record_company (\"Philips\", \"RCA\", \"Columbia Masterworks\"), conductor_id (2, 9, 4), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra_id (6, 1, 4), orchestra (\"Philharmonia Orchestra\", \"San Francisco Symphony Orchestra\", \"Orchestre de Paris\"), year_of_founded (2009.0, 2007.0, 2009.0) | recital : orchestra_id (11, 10, 11), performance_id (10, 2, 5), date (\"17 June\", \"15 June\", \"10 June\"), weekly_rank (\"11\", \"8\", \"TBC\"), official_ratings_(millions) (5.2, 7.51, 9.29), type (\"Auditions 4\", \"Auditions 4\", \"Auditions 2\"), share (\"34.0%\", \"29.2%\", \"22.7%\") | show : result (\"T\", \"F\"), show_id (5, 2, 3), performance_id (4, 5, 1), attendance (695.0, 695.0, 1925.0), if_first_show (\"Glebe Park\", \"Glebe Park\", \"Glebe Park\")",
        "ambiguous_queries": [
            "select max(share), min(share) from recital where type != 'Live final'",
            "select max(share), min(share) from concert where type != 'Live final'"
        ],
        "gold_ambiguity": {
            "match": "{\"shares\": [{\"recital\": [\"share\"]}, {\"concert\": [\"share\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"shares\" refers to the schema \"concert\".\"share\"",
        "clear_ambiguity": "{\"shares\": {\"concert\": [\"share\"]}}",
        "gold_query": "select max(share), min(share) from concert where type != 'Live final'"
    },
    {
        "index": 217,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "schema_without_content": "flights : airline , destairport , sourceairport , flightno  | carriers : country , abbreviation , uid , airline  | airports : airportcode , city , countryabbrev , country , airportname  | aviation_companies : country , abbreviation , uid , airline",
        "schema_with_content": "flights : airline (1, 12, 4), destairport (\" ADR\", \" ALX\", \" ANW\"), sourceairport (\" EDF\", \" ASX\", \" ANP\"), flightno (1205, 890, 854) | carriers : country (\"USA\"), abbreviation (\"Frontier\", \"Continental\", \"Delta\"), uid (1, 3, 10), airline (\"Allegiant Air\", \"JetBlue Airways\", \"AirTran Airways\") | airports : airportcode (\"ABY\", \"ADM\", \"AHH\"), city (\"Arapahoe \", \"Alamosa \", \"Akiak \"), countryabbrev (\"US \", \"US\"), country (\"United States \"), airportname (\"Albany International \", \"Phillips AAF \", \"Ambler \") | aviation_companies : country (\"USA\"), abbreviation (\"Frontier\", \"Continental\", \"Delta\"), uid (1, 3, 10), airline (\"Allegiant Air\", \"JetBlue Airways\", \"AirTran Airways\")",
        "ambiguous_queries": [
            "select country from carriers where airline = 'JetBlue Airways'",
            "select country from aviation_companies where airline = 'JetBlue Airways'"
        ],
        "gold_ambiguity": {
            "match": "{\"Airline\": [{\"aviation_companies\": [\"airline\"]}, {\"carriers\": [\"airline\"]}], \"country\": [{\"aviation_companies\": [\"country\"]}, {\"carriers\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Airline\" refers to the schema \"carriers\".\"airline\", \"country\" refers to the schema \"carriers\".\"country\"",
        "clear_ambiguity": "{\"Airline\": {\"carriers\": [\"airline\"]}, \"country\": {\"carriers\": [\"country\"]}}",
        "gold_query": "select country from carriers where airline = 'JetBlue Airways'"
    },
    {
        "index": 218,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "schema_without_content": "symphony : conductor_id , orchestra_id , year_of_founded , record_company , major_record_format , orchestra  | ensemble : conductor_id , orchestra_id , year_of_founded , record_company , major_record_format , orchestra  | show : performance_id , if_first_show , result , show_id , attendance  | performance : weekly_rank , official_ratings_ , performance_id , orchestra_id , date , type , share  | conductor : age , name , conductor_id , year_of_work , nationality",
        "schema_with_content": "symphony : conductor_id (7, 12, 9), orchestra_id (3, 1, 1), year_of_founded (2004.0, 2004.0, 2003.0), record_company (\"Kultur\", \"RCA\", \"Delos Records\"), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra (\"Chicago Symphony Orchestra\", \"Columbia Symphony Orchestra\", \"San Francisco Symphony Orchestra\") | ensemble : conductor_id (7, 12, 9), orchestra_id (3, 1, 1), year_of_founded (2004.0, 2004.0, 2003.0), record_company (\"Kultur\", \"RCA\", \"Delos Records\"), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra (\"Chicago Symphony Orchestra\", \"Columbia Symphony Orchestra\", \"San Francisco Symphony Orchestra\") | show : performance_id (2, 1, 1), if_first_show (\"St. Mirren Park\", \"Glebe Park\", \"Hampden Park\"), result (\"T\", \"F\"), show_id (5, 5, 2), attendance (695.0, 1925.0, 1925.0) | performance : weekly_rank (\"13\", \"7\", \"9\"), official_ratings_(millions) (9.28, 6.73, 5.2), performance_id (8, 3, 5), orchestra_id (8, 3, 9), date (\"2007\", \"10 June\", \"2007\"), type (\"Semi-final 1\", \"Series average\", \"Auditions 1\"), share (\"29.4%\", \"28.0%\", \"43.7%\") | conductor : age (40, 49, 63), name (\"Igor Stravinsky\", \"Antal Brown\", \"Paul Jorgensen\"), conductor_id (5, 9, 3), year_of_work (20, 6, 12), nationality (\"USA\", \"UK\", \"France\")",
        "ambiguous_queries": [
            "select major_record_format from ensemble group by major_record_format order by count(*) asc",
            "select major_record_format from symphony group by major_record_format order by count(*) asc"
        ],
        "gold_ambiguity": {
            "match": "{\"major record format\": [{\"ensemble\": [\"major_record_format\"]}, {\"symphony\": [\"major_record_format\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"major record format\" refers to the schema \"symphony\".\"major_record_format\"",
        "clear_ambiguity": "{\"major record format\": {\"symphony\": [\"major_record_format\"]}}",
        "gold_query": "select major_record_format from symphony group by major_record_format order by count(*) asc"
    },
    {
        "index": 219,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Which city has the most frequent destination airport?",
        "schema_without_content": "routes : destairport , sourceairport , flightno , airline  | journeys : destairport , sourceairport , flightno , airline  | airlines : airline , abbreviation , uid , country  | airports : countryabbrev , airportname , city , country , airportcode",
        "schema_with_content": "routes : destairport (\" APV\", \" APN\", \" ADT\"), sourceairport (\" AKO\", \" AIK\", \" AXG\"), flightno (194, 341, 581), airline (5, 11, 5) | journeys : destairport (\" APV\", \" APN\", \" ADT\"), sourceairport (\" AKO\", \" AIK\", \" AXG\"), flightno (194, 341, 581), airline (5, 11, 5) | airlines : airline (\"AirTran Airways\", \"Delta Airlines\", \"JetBlue Airways\"), abbreviation (\"Allegiant\", \"Northwest\", \"American\"), uid (1, 6, 6), country (\"USA\") | airports : countryabbrev (\"US \", \"US\"), airportname (\"Orange County Steel Salvage Heliport \", \"Alexandria International \", \"Dougherty County \"), city (\"Arctic Village \", \" Anniston AL  \", \"Aberdeen \"), country (\"United States \"), airportcode (\"LTS\", \"APN\", \"ANN\")",
        "ambiguous_queries": [
            "select t1.city from airports as t1 join journeys as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
            "select t1.city from airports as t1 join routes as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"destination\": [{\"journeys\": [\"destairport\"]}, {\"routes\": [\"destairport\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"destination\" refers to the schema \"journeys\".\"destairport\"",
        "clear_ambiguity": "{\"destination\": {\"journeys\": [\"destairport\"]}}",
        "gold_query": "select t1.city from airports as t1 join journeys as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1"
    },
    {
        "index": 220,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the date and id of the transcript with the least number of results?",
        "schema_without_content": "student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | students : cell_mobile_number 919-3594x3661\", current_address_id , other_student_details , permanent_address_id , first_name , email_address , middle_name , last_name , date_first_registered , ssn , date_left , student_id  | student_enrolment : other_details , degree_program_id , semester_id , student_enrolment_id , student_id  | Grade_Report : other_details , transcript_id , transcript_date  | courses : other_details , course_id , course_description , course_name  | semesters : semester_name , semester_description , other_details , semester_id  | transcript_contents : transcript_id , student_course_id  | degree_programs : other_details , degree_program_id , department_id , degree_summary_description , degree_summary_name  | sections : other_details , section_name , section_description , course_id , section_id  | addresses : line_1 , line_3 , line_2 , country , other_address_details , zip_postcode , state_province_county , address_id , city  | Academic_History : other_details , transcript_id , transcript_date  | departments : department_id , department_name , other_details , department_description",
        "schema_with_content": "student_enrolment_courses : student_course_id (83814225, 604750, 28982908), student_enrolment_id (2, 9, 8), course_id (14, 6, 6) | students : cell_mobile_number (\"1-009-710-5151\", \"677.401.9382\", \"(605)919-3594x3661\"), current_address_id (9, 15, 1), other_student_details (\"dolorum\", \"autem\", \"non\"), permanent_address_id (5, 8, 14), first_name (\"Hobart\", \"Jett\", \"Delaney\"), email_address (\"gracie29@example.com\", \"johns.unique@example.net\", \"erwin.zboncak@example.com\"), middle_name (\"Neal\", \"Mossie\", \"Anna\"), last_name (\"Rempel\", \"Kemmer\", \"Balistreri\"), date_first_registered (\"2018-03-13 09:56:22\", \"2005-12-15 08:42:10\", \"1986-02-24 21:12:23\"), ssn (\"668\", \"6274274\", \"494\"), date_left (\"1971-05-17 19:28:49\", \"1999-08-24 00:07:10\", \"1999-08-24 00:07:10\"), student_id (1, 2, 5) | student_enrolment : other_details (None), degree_program_id (10, 4, 4), semester_id (15, 9, 5), student_enrolment_id (12, 10, 11), student_id (6, 5, 6) | Grade_Report : other_details (None), transcript_id (11, 11, 13), transcript_date (\"1975-10-28 15:16:51\", \"2010-12-13 10:55:15\", \"2010-12-13 10:55:15\") | courses : other_details (None), course_id (6, 13, 1), course_description (\"c\", \"p\", \"q\"), course_name (\"pl\", \"en\", \"rs\") | semesters : semester_name (\"spring 2013\", \"spring 2016\", \"spring 2018\"), semester_description (\"l\", \"c\", \"x\"), other_details (None), semester_id (6, 14, 1) | transcript_contents : transcript_id (8, 8, 11), student_course_id (0, 8, 0) | degree_programs : other_details (None), degree_program_id (14, 6, 5), department_id (8, 8, 8), degree_summary_description (\"aut\", \"unde\", \"quam\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : other_details (None), section_name (\"o\", \"a\", \"e\"), section_description (\"reprehenderit\", \"reprehenderit\", \"nesciunt\"), course_id (6, 14, 9), section_id (7, 3, 7) | addresses : line_1 (\"0643 Muller Vista\", \"9283 Schulist Falls Apt. 037\", \"74046 Metz Walk Apt. 113\"), line_3 (None), line_2 (\"Suite 674\", \"Apt. 305\", \"Suite 079\"), country (\"Iceland\", \"Angola\", \"Croatia\"), other_address_details (None), zip_postcode (\"541\", \"590\", \"541\"), state_province_county (\"Hawaii\", \"Idaho\", \"Florida\"), address_id (1, 4, 8), city (\"Goodwinhaven\", \"Prohaskafort\", \"New Clemensburgh\") | Academic_History : other_details (None), transcript_id (11, 11, 13), transcript_date (\"1975-10-28 15:16:51\", \"2010-12-13 10:55:15\", \"2010-12-13 10:55:15\") | departments : department_id (9, 7, 13), department_name (\"dance\", \"biology\", \"drama\"), other_details (None), department_description (\"nostrum\", \"natus\", \"ea\")",
        "ambiguous_queries": [
            "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join academic_history as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
            "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join grade_report as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"date\": [{\"Academic_History\": [\"transcript_date\"]}, {\"Grade_Report\": [\"transcript_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"date\" refers to the schema \"grade_report\".\"transcript_date\"",
        "clear_ambiguity": "{\"date\": {\"Grade_Report\": [\"transcript_date\"]}}",
        "gold_query": "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join grade_report as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1"
    },
    {
        "index": 221,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "How many countries have a republic as their form of government?",
        "schema_without_content": "city : name , district , countrycode , population , id  | state : lifeexpectancy , name , code , gnp , continent , localname , population , indepyear , region , headofstate , code2 , surfacearea , gnpold , governmentform \", \"Parlementary Monarchy\", \"Constitutional Monarchy\", capital  | countrylanguage : language , countrycode , isofficial , percentage  | nation : lifeexpectancy , name , code , gnp , continent , localname , population , indepyear , region , headofstate , code2 , surfacearea , gnpold , governmentform \", \"Parlementary Monarchy\", \"Constitutional Monarchy\", capital  | sqlite_sequence : seq , name",
        "schema_with_content": "city : name (\"Chinhae\", \"Taitung\", \"Road Town\"), district (\"Vojvodina\", \"Terengganu\", \"San Marino\"), countrycode (\"PRK\", \"DJI\", \"ERI\"), population (105200, 419776, 195629), id (1750, 91, 3863) | state : lifeexpectancy (75.6, 70.7, 45.2), name (\"Switzerland\", \"Niue\", \"East Timor\"), code (\"JAM\", \"AFG\", \"TCA\"), gnp (1536.0, 212.0, 211860.0), continent (\"Africa\", \"South America\", \"Antarctica\"), localname (\"Svalbard og Jan Mayen\", \"BouvetÃ¸ya\", \"Montserrat\"), population (78000, 23930000, 67702000), indepyear (1825, 1918, 1955), region (\"Micronesia/Caribbean\", \"Western Africa\", \"Nordic Countries\"), headofstate (\"Rudolf Schuster\", \"Francisco Guillermo Flores PÃ©rez\", \"Leo A. Falcam\"), code2 (\"FM\", \"JM\", \"LA\"), surfacearea (459.0, 14874.0, 83859.0), gnpold (4837.0, 706.0, 8920.0), governmentform (\"Monarchy (Emirate)\", \"Parlementary Monarchy\", \"Constitutional Monarchy\"), capital (3539, 3243, 938) | countrylanguage : language (\"Dinka\", \"Romansh\", \"Slovene\"), countrycode (\"SPM\", \"ISR\", \"COG\"), isofficial (\"T\", \"F\"), percentage (7.8, 9.1, 16.9) | nation : lifeexpectancy (75.6, 70.7, 45.2), name (\"Switzerland\", \"Niue\", \"East Timor\"), code (\"JAM\", \"AFG\", \"TCA\"), gnp (1536.0, 212.0, 211860.0), continent (\"Africa\", \"South America\", \"Antarctica\"), localname (\"Svalbard og Jan Mayen\", \"BouvetÃ¸ya\", \"Montserrat\"), population (78000, 23930000, 67702000), indepyear (1825, 1918, 1955), region (\"Micronesia/Caribbean\", \"Western Africa\", \"Nordic Countries\"), headofstate (\"Rudolf Schuster\", \"Francisco Guillermo Flores PÃ©rez\", \"Leo A. Falcam\"), code2 (\"FM\", \"JM\", \"LA\"), surfacearea (459.0, 14874.0, 83859.0), gnpold (4837.0, 706.0, 8920.0), governmentform (\"Monarchy (Emirate)\", \"Parlementary Monarchy\", \"Constitutional Monarchy\"), capital (3539, 3243, 938) | sqlite_sequence : seq (4079), name (\"city\")",
        "ambiguous_queries": [
            "select count(*) from nation where governmentform = 'Republic'",
            "select count(*) from state where governmentform = 'Republic'"
        ],
        "gold_ambiguity": {
            "match": "{\"form\": [{\"nation\": [\"governmentform\"]}, {\"state\": [\"governmentform\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"form\" refers to the schema \"nation\".\"governmentform\"",
        "clear_ambiguity": "{\"form\": {\"nation\": [\"governmentform\"]}}",
        "gold_query": "select count(*) from nation where governmentform = 'Republic'"
    },
    {
        "index": 222,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "schema_without_content": "animated_series : channel , directed_by , production_code , original_air_date , id , title , written_by  | tv_channel : hight_definition_tv , country , content , package_option \", language , series_name , pay_per_view_ppv , pixel_aspect_ratio_par , id  | toons : channel , directed_by , production_code , original_air_date , id , title , written_by  | tv_series : episode , channel , weekly_rank , 18_49_rating_share , share , air_date , rating , id , viewers_m",
        "schema_with_content": "animated_series : channel (\"705\", \"707\", \"728\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (104.0, 109.0, 103.0), original_air_date (\"January16,2009\", \"November21,2008\", \"January30,2009\"), id (10.0, 9.0, 7.0), title (\"Day of the Dark Knight!\", \"Fall of the Blue Beetle!\", \"Enter the Outsiders!\"), written_by (\"Matt Wayne\", \"J. M. DeMatteis\", \"James Krieg\") | tv_channel : hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia\", \"no ( FTV )\"), language (\"Italian\", \"English\"), series_name (\"MTV Music\", \"Match Music\", \"Radio Capital TiVÃ¹\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"719\", \"706\", \"709\") | toons : channel (\"705\", \"707\", \"728\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (104.0, 109.0, 103.0), original_air_date (\"January16,2009\", \"November21,2008\", \"January30,2009\"), id (10.0, 9.0, 7.0), title (\"Day of the Dark Knight!\", \"Fall of the Blue Beetle!\", \"Enter the Outsiders!\"), written_by (\"Matt Wayne\", \"J. M. DeMatteis\", \"James Krieg\") | tv_series : episode (\"Emily\", \"Game Three\", \"A Love of a Lifetime\"), channel (\"700\", \"708\", \"708\"), weekly_rank (66.0, 68.0, 66.0), 18_49_rating_share (\"1.7/5\", \"2.4/6\", \"1.5/4\"), share (6.0, 5.0, 6.0), air_date (\"November 19, 2007\", \"October 29, 2007\", \"October 1, 2007\"), rating (\"4.3\", \"4.0\", \"4.4\"), id (9.0, 1.0, 3.0), viewers_m (\"6.94\", \"6.75\", \"9.16\")",
        "ambiguous_queries": [
            "select t1.country from tv_channel as t1 join animated_series as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
            "select t1.country from tv_channel as t1 join toons as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'"
        ],
        "gold_ambiguity": {
            "match": "{\"channels\": [{\"animated_series\": [\"channel\"]}, {\"toons\": [\"channel\"]}], \"written by\": [{\"animated_series\": [\"written_by\"]}, {\"toons\": [\"written_by\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"channels\" refers to the schema \"animated_series\".\"channel\", \"written by\" refers to the schema \"animated_series\".\"written_by\"",
        "clear_ambiguity": "{\"channels\": {\"animated_series\": [\"channel\"]}, \"written by\": {\"animated_series\": [\"written_by\"]}}",
        "gold_query": "select t1.country from tv_channel as t1 join animated_series as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'"
    },
    {
        "index": 223,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "schema_without_content": "charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | therapies : dog_id , professional_id , date_of_treatment , treatment_type_code , cost_of_treatment , treatment_id  | breeds : breed_name , breed_code  | treatment_types : treatment_type_code , treatment_type_description  | procedures : dog_id , professional_id , date_of_treatment , treatment_type_code , cost_of_treatment , treatment_id  | professionals : cell_number , last_name , professional_id , home_phone 304-4499x59146\", \"+712898266914\", \"346.594.3739\", email_address , first_name , street , state , zip_code , city , role_code  | dogs : breed_code , gender , abandoned_yn , date_arrived , owner_id , name , date_adopted , weight , date_departed , date_of_birth , size_code , age , dog_id  | owners : email_address , home_phone 034-1670\", \"916.976.9480x13851\", \"1-682-845-0116x63235\", owner_id , state , last_name , cell_number 9217952551\", \"481-483-9083x37986\", \"121.381.3316x6535\", zip_code , city , first_name , street",
        "schema_with_content": "charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | therapies : dog_id (13, 12, 2), professional_id (7, 5, 6), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-15 20:25:34\", \"2018-03-13 12:22:58\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (514, 514, 139), treatment_id (1, 3, 14) | breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | procedures : dog_id (13, 12, 2), professional_id (7, 5, 6), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-15 20:25:34\", \"2018-03-13 12:22:58\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (514, 514, 139), treatment_id (1, 3, 14) | professionals : cell_number (\"328.842.3792\", \"00230569697\", \"00230569697\"), last_name (\"Ullrich\", \"Kshlerin\", \"Considine\"), professional_id (13, 12, 8), home_phone (\"(920)304-4499x59146\", \"+71(6)2898266914\", \"346.594.3739\"), email_address (\"lourdes.lowe@example.net\", \"marquardt.furman@example.org\", \"delphine29@example.com\"), first_name (\"Taryn\", \"Monte\", \"Brady\"), street (\"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), state (\"Hawaii\", \"Wisconsin\", \"Indiana\"), zip_code (\"54312\", \"98844\", \"54312\"), city (\"Juddton\", \"West Heidi\", \"Domenickton\"), role_code (\"Employee\", \"Veterenarian\") | dogs : breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2018-01-17 11:44:16\", \"2018-01-17 11:44:16\", \"2017-12-29 23:24:13\"), owner_id (7, 11, 10), name (\"Evangeline\", \"Troy\", \"George\"), date_adopted (\"2018-02-27 11:54:35\", \"2018-03-05 06:05:23\", \"2018-03-23 16:02:04\"), weight (\"1.39\", \"6.92\", \"4.01\"), date_departed (\"2018-03-25 06:46:07\", \"2018-03-25 06:46:07\", \"2018-03-25 06:29:10\"), date_of_birth (\"2015-02-26 21:31:22\", \"2012-07-11 17:15:10\", \"2012-05-03 21:42:25\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"4\", \"9\", \"8\"), dog_id (5, 8, 10) | owners : email_address (\"ykris@example.com\", \"angeline99@example.com\", \"ymaggio@example.com\"), home_phone (\"(544)034-1670\", \"916.976.9480x13851\", \"1-682-845-0116x63235\"), owner_id (7, 5, 14), state (\"Virginia\", \"Washington\", \"Indiana\"), last_name (\"Schmitt\", \"Price\", \"Mertz\"), cell_number (\"+70(4)9217952551\", \"481-483-9083x37986\", \"121.381.3316x6535\"), zip_code (\"22693\", \"45244\", \"22693\"), city (\"East Maribelbury\", \"East Hillardberg\", \"Lake Valentin\"), first_name (\"Gay\", \"Gay\", \"Melisa\"), street (\"51934 Treutel Harbor\", \"68118 Daniel Row\", \"89011 Kertzmann Spring Suite 642\")",
        "ambiguous_queries": [
            "select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join procedures as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
            "select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join therapies as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code"
        ],
        "gold_ambiguity": {
            "match": "{\"treatment\": [{\"procedures\": [\"treatment_type_code\"]}, {\"therapies\": [\"treatment_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"treatment\" refers to the schema \"therapies\".\"treatment_type_code\"",
        "clear_ambiguity": "{\"treatment\": {\"therapies\": [\"treatment_type_code\"]}}",
        "gold_query": "select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join therapies as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code"
    },
    {
        "index": 224,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "table",
        "db_file": "table/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What are the codes of template types that are not used for any document?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | documents : document_id , other_details , template_id , document_name , document_description  | paragraphs : paragraph_id , document_id , other_details , paragraph_text  | Forms : date_effective_from , template_details , template_type_code , date_effective_to , version_number , template_id  | Drafts : date_effective_from , template_details , template_type_code , date_effective_to , version_number , template_id",
        "schema_with_content": "ref_template_types : template_type_code (\"PP\", \"PPT\", \"AD\"), template_type_description (\"Presentation\", \"Book\", \"CV\") | documents : document_id (50123, 16514113, 3830), other_details (None), template_id (11, 11, 21), document_name (\"Learning French\", \"Learning French\", \"Data base\"), document_description (\"w\", \"z\", \"r\") | paragraphs : paragraph_id (1104059, 280120913, 571212310), document_id (50123, 80, 80), other_details (None), paragraph_text (\"Senegal\", \"Micronesia\", \"Brazil\") | Forms : date_effective_from (\"1986-12-09 14:51:36\", \"1975-10-20 02:28:58\", \"1975-05-20 22:51:19\"), template_details (\"\"), template_type_code (\"CV\", \"PP\", \"PPT\"), date_effective_to (\"1993-03-24 14:30:23\", \"1999-07-08 03:31:04\", \"1980-05-07 12:15:47\"), version_number (6, 2, 5), template_id (14, 8, 19) | Drafts : date_effective_from (\"1986-12-09 14:51:36\", \"1975-10-20 02:28:58\", \"1975-05-20 22:51:19\"), template_details (\"\"), template_type_code (\"CV\", \"PP\", \"PPT\"), date_effective_to (\"1993-03-24 14:30:23\", \"1999-07-08 03:31:04\", \"1980-05-07 12:15:47\"), version_number (6, 2, 5), template_id (14, 8, 19)",
        "ambiguous_queries": [
            "select template_type_code from forms except select template_type_code from forms as t1 join documents as t2 on t1.template_id = t2.template_id",
            "select template_type_code from drafts except select template_type_code from drafts as t1 join documents as t2 on t1.template_id = t2.template_id"
        ],
        "gold_ambiguity": {
            "match": "{\"codes\": [{\"Forms\": [\"template_type_code\"]}, {\"Drafts\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"codes\" refers to the schema \"drafts\".\"template_type_code\"",
        "clear_ambiguity": "{\"codes\": {\"Drafts\": [\"template_type_code\"]}}",
        "gold_query": "select template_type_code from drafts except select template_type_code from drafts as t1 join documents as t2 on t1.template_id = t2.template_id"
    },
    {
        "index": 225,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "table",
        "db_file": "table/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "schema_without_content": "hiring : start_from , shop_id , employee_id , is_full_time  | store : shop_id , name , district , location , number_products , manager_name  | evaluation : employee_id , bonus , year_awarded  | boutique : shop_id , name , district , location , number_products , manager_name  | employee : employee_id , city , age , name",
        "schema_with_content": "hiring : start_from (\"2008\", \"2009\", \"2003\"), shop_id (8, 6, 1), employee_id (3, 2, 3), is_full_time (\"T\", \"F\") | store : shop_id (7, 7, 9), name (\"KuPS\", \"HJK\", \"IFK Mariehamn\"), district (\"Tehtaan kenttÃ¤\", \"Tehtaan kenttÃ¤\", \"Magnum Areena\"), location (\"Lahti\", \"Helsinki\", \"Jakobstad\"), number_products (3500, 6000, 5000), manager_name (\"Mika Lehkosuo\", \"Mika Laurikainen\", \"Job Dragtsma\") | evaluation : employee_id (\"10\", \"10\", \"10\"), bonus (3000.0, 2900.0, 4000.0), year_awarded (\"2017\", \"2011\", \"2018\") | boutique : shop_id (7, 7, 9), name (\"KuPS\", \"HJK\", \"IFK Mariehamn\"), district (\"Tehtaan kenttÃ¤\", \"Tehtaan kenttÃ¤\", \"Magnum Areena\"), location (\"Lahti\", \"Helsinki\", \"Jakobstad\"), number_products (3500, 6000, 5000), manager_name (\"Mika Lehkosuo\", \"Mika Laurikainen\", \"Job Dragtsma\") | employee : employee_id (9, 5, 5), city (\"Leicester\", \"Wasps\", \"Wasps\"), age (36, 43, 28), name (\"George Chuter\", \"Louis Deacon\", \"Mark Regan\")",
        "ambiguous_queries": [
            "select manager_name, district from store order by number_products desc limit 1",
            "select manager_name, district from boutique order by number_products desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"boutique\": [\"district\"]}, {\"store\": [\"district\"]}], \"manager name\": [{\"boutique\": [\"manager_name\"]}, {\"store\": [\"manager_name\"]}], \"number\": [{\"boutique\": [\"number_products\"]}, {\"store\": [\"number_products\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"store\".\"district\", \"manager name\" refers to the schema \"store\".\"manager_name\", \"number\" refers to the schema \"store\".\"number_products\"",
        "clear_ambiguity": "{\"district\": {\"store\": [\"district\"]}, \"manager name\": {\"store\": [\"manager_name\"]}, \"number\": {\"store\": [\"number_products\"]}}",
        "gold_query": "select manager_name, district from store order by number_products desc limit 1"
    },
    {
        "index": 226,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "schema_without_content": "country : population , code2 , lifeexpectancy , indepyear , continent , gnpold , localname , surfacearea , name , capital , headofstate , code , region , gnp , governmentform  | sqlite_sequence : name , seq  | countrylanguage : language , countrycode , isofficial , percentage  | town : district , name , population , countrycode , id  | metropolis : district , name , population , countrycode , id",
        "schema_with_content": "country : population (3615000, 3520000, 5496000), code2 (\"NO\", \"HU\", \"PW\"), lifeexpectancy (79.0, 68.7, 78.9), indepyear (1977, 1946, 1769), continent (\"Antarctica\", \"South America\", \"Asia\"), gnpold (189122.0, 1915.0, 373.0), localname (\"Nigeria\", \"Papua New Guinea/Papua Niugini\", \"Ukrajina\"), surfacearea (65610.0, 90000.0, 2149690.0), name (\"Cook Islands\", \"Cameroon\", \"Netherlands\"), capital (3169, 4067, 35), headofstate (\"Thomas Klestil\", \"Bakili Muluzi\", \"Pierre Buyoya\"), code (\"BOL\", \"TZA\", \"MCO\"), region (\"Middle East\", \"Micronesia\", \"Eastern Europe\"), gnp (11345.0, 5121.0, 903.0), governmentform (\"Co-administrated\", \"Co-administrated\", \"Territory of Australia\") | sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : language (\"Belorussian\", \"Kirgiz\", \"Czech\"), countrycode (\"CXR\", \"PNG\", \"MCO\"), isofficial (\"T\", \"F\"), percentage (41.6, 79.8, 3.6) | town : district (\"Heilongjiang\", \"Nagasaki\", \"Battambang\"), name (\"Ife\", \"Lerdo\", \"Beawar\"), population (379310, 768082, 304000), countrycode (\"LBY\", \"BWA\", \"LUX\"), id (2348, 1927, 454) | metropolis : district (\"Heilongjiang\", \"Nagasaki\", \"Battambang\"), name (\"Ife\", \"Lerdo\", \"Beawar\"), population (379310, 768082, 304000), countrycode (\"LBY\", \"BWA\", \"LUX\"), id (2348, 1927, 454)",
        "ambiguous_queries": [
            "select distinct t2.name from country as t1 join town as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')",
            "select distinct t2.name from country as t1 join metropolis as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"metropolis\": [\"name\"]}, {\"town\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"metropolis\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"metropolis\": [\"name\"]}}",
        "gold_query": "select distinct t2.name from country as t1 join metropolis as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')"
    },
    {
        "index": 227,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "schema_without_content": "airlines : country , airline , uid , abbreviation  | journeys : airline , sourceairport , flightno , destairport  | routes : airline , sourceairport , flightno , destairport  | airports : airportcode , country , countryabbrev , city , airportname",
        "schema_with_content": "airlines : country (\"USA\"), airline (\"Frontier Airlines\", \"AirTran Airways\", \"AirTran Airways\"), uid (10, 7, 2), abbreviation (\"Southwest\", \"AirTran\", \"Northwest\") | journeys : airline (6, 6, 5), sourceairport (\" AIA\", \" ARX\", \" ABY\"), flightno (812, 951, 995), destairport (\" AIV\", \" APV\", \" ANN\") | routes : airline (6, 6, 5), sourceairport (\" AIA\", \" ARX\", \" ABY\"), flightno (812, 951, 995), destairport (\" AIV\", \" APV\", \" ANN\") | airports : airportcode (\"AIK\", \"AHT\", \"AHN\"), country (\"United States \"), countryabbrev (\"US \", \"US\"), city (\"Aspen \", \"Anchorage \", \"Alpine \"), airportname (\"Aspen \", \"Ashley \", \"Albuquerque International \")",
        "ambiguous_queries": [
            "select t1.abbreviation, t1.country from airlines as t1 join journeys as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
            "select t1.abbreviation, t1.country from airlines as t1 join routes as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"airline\": [{\"journeys\": [\"airline\"]}, {\"routes\": [\"airline\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airline\" refers to the schema \"journeys\".\"airline\"",
        "clear_ambiguity": "{\"airline\": {\"journeys\": [\"airline\"]}}",
        "gold_query": "select t1.abbreviation, t1.country from airlines as t1 join journeys as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1"
    },
    {
        "index": 228,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "How many official languages are spoken in Afghanistan?",
        "schema_without_content": "city : population , district , countrycode , id , name  | countrylanguage : percentage , language , countrycode , isofficial  | state : headofstate , population , indepyear , name , gnpold , governmentform \", \"Overseas Department of France\", lifeexpectancy , code , localname  Islands\", \"Hrvatska\", continent , gnp , code2 , surfacearea , region , capital  | nation : headofstate , population , indepyear , name , gnpold , governmentform \", \"Overseas Department of France\", lifeexpectancy , code , localname  Islands\", \"Hrvatska\", continent , gnp , code2 , surfacearea , region , capital  | sqlite_sequence : seq , name",
        "schema_with_content": "city : population (107329, 107800, 145133), district (\"Botosani\", \"Virginia\", \"Samsun\"), countrycode (\"MDA\", \"TMP\", \"LIE\"), id (2635, 2704, 136), name (\"Ujjain\", \"Santa Marta\", \"Nagano\") | countrylanguage : percentage (16.9, 74.4, 14.0), language (\"Hindko\", \"Mano\", \"Bura\"), countrycode (\"CHN\", \"SLV\", \"NLD\"), isofficial (\"T\", \"F\") | state : headofstate (\"Azali Assoumani\", \"Beatrix\", \"JosÃ© Alexandre GusmÃ£o\"), population (2000, 2424200, 22256000), indepyear (1066, 1991, 1947), name (\"Costa Rica\", \"Singapore\", \"Cyprus\"), gnpold (4192638.0, 6097.0, 2287.0), governmentform (\"Special Administrative Region of China\", \"Monarchy (Sultanate)\", \"Overseas Department of France\"), lifeexpectancy (72.7, 64.5, 60.8), code (\"MDG\", \"TJK\", \"SEN\"), localname (\"BelgiÃ«/Belgique\", \"Cocos (Keeling) Islands\", \"Hrvatska\"), continent (\"Europe\", \"Africa\", \"South America\"), gnp (13714.0, 141.0, 536.0), code2 (\"LV\", \"FM\", \"SJ\"), surfacearea (20256.0, 56785.0, 883749.0), region (\"British Islands\", \"Eastern Europe\", \"Caribbean\"), capital (3250, 1864, 2401) | nation : headofstate (\"Azali Assoumani\", \"Beatrix\", \"JosÃ© Alexandre GusmÃ£o\"), population (2000, 2424200, 22256000), indepyear (1066, 1991, 1947), name (\"Costa Rica\", \"Singapore\", \"Cyprus\"), gnpold (4192638.0, 6097.0, 2287.0), governmentform (\"Special Administrative Region of China\", \"Monarchy (Sultanate)\", \"Overseas Department of France\"), lifeexpectancy (72.7, 64.5, 60.8), code (\"MDG\", \"TJK\", \"SEN\"), localname (\"BelgiÃ«/Belgique\", \"Cocos (Keeling) Islands\", \"Hrvatska\"), continent (\"Europe\", \"Africa\", \"South America\"), gnp (13714.0, 141.0, 536.0), code2 (\"LV\", \"FM\", \"SJ\"), surfacearea (20256.0, 56785.0, 883749.0), region (\"British Islands\", \"Eastern Europe\", \"Caribbean\"), capital (3250, 1864, 2401) | sqlite_sequence : seq (4079), name (\"city\")",
        "ambiguous_queries": [
            "select count(*) from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Afghanistan' and isofficial = 'T'",
            "select count(*) from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Afghanistan' and isofficial = 'T'"
        ],
        "gold_ambiguity": {
            "match": "{\"Afghanistan\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Afghanistan\" refers to the schema \"state\".\"name\"",
        "clear_ambiguity": "{\"Afghanistan\": {\"state\": [\"name\"]}}",
        "gold_query": "select count(*) from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Afghanistan' and isofficial = 'T'"
    },
    {
        "index": 229,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "table",
        "db_file": "table/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "schema_without_content": "documents : document_name , document_id , template_id , other_details , document_description  | ref_template_types : template_type_description , template_type_code  | Forms : template_id , date_effective_from , template_details , template_type_code , version_number , date_effective_to  | Drafts : template_id , date_effective_from , template_details , template_type_code , version_number , date_effective_to  | paragraphs : paragraph_id , paragraph_text , other_details , document_id",
        "schema_with_content": "documents : document_name (\"Data base\", \"How to read a book\", \"How to read a book\"), document_id (385906526, 50123, 80), template_id (8, 10, 4), other_details (None), document_description (\"w\", \"z\", \"b\") | ref_template_types : template_type_description (\"CV\", \"Presentation\", \"Paper\"), template_type_code (\"BK\", \"PP\", \"AD\") | Forms : template_id (11, 14, 21), date_effective_from (\"1999-06-21 11:10:30\", \"1975-05-20 22:51:19\", \"1983-07-16 21:16:16\"), template_details (\"\"), template_type_code (\"BK\", \"AD\", \"CV\"), version_number (4, 0, 4), date_effective_to (\"1998-05-12 12:51:29\", \"2007-06-06 06:18:53\", \"1973-01-12 14:13:34\") | Drafts : template_id (11, 14, 21), date_effective_from (\"1999-06-21 11:10:30\", \"1975-05-20 22:51:19\", \"1983-07-16 21:16:16\"), template_details (\"\"), template_type_code (\"BK\", \"AD\", \"CV\"), version_number (4, 0, 4), date_effective_to (\"1998-05-12 12:51:29\", \"2007-06-06 06:18:53\", \"1973-01-12 14:13:34\") | paragraphs : paragraph_id (241, 65, 510442723), paragraph_text (\"Fiji\", \"Korea\", \"Jersey\"), other_details (None), document_id (3540024, 651512, 651512)",
        "ambiguous_queries": [
            "select t2.template_id from ref_template_types as t1 join forms as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = 'Presentation'",
            "select t2.template_id from ref_template_types as t1 join drafts as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = 'Presentation'"
        ],
        "gold_ambiguity": {
            "match": "{\"ids\": [{\"Forms\": [\"template_id\"]}, {\"Drafts\": [\"template_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ids\" refers to the schema \"forms\".\"template_id\"",
        "clear_ambiguity": "{\"ids\": {\"Forms\": [\"template_id\"]}}",
        "gold_query": "select t2.template_id from ref_template_types as t1 join forms as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = 'Presentation'"
    },
    {
        "index": 230,
        "db_id": "voter_1",
        "ambig_type": "table",
        "db_file": "table/voter_1/voter_1.sqlite",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "schema_without_content": "participants : contestant_number , contestant_name  | votes : created , phone_number , contestant_number , vote_id , state  | area_code_state : state , area_code  | candidates : contestant_number , contestant_name",
        "schema_with_content": "participants : contestant_number (5, 2, 2), contestant_name (\"Edwina Burnam\", \"Ericka Dieter\", \"Jessie Alloway\") | votes : created (\"2018-03-09 19:03:40\", \"2018-03-09 19:03:21\", \"2018-03-09 19:03:21\"), phone_number (6209222712, 6209222712, 5112677315), contestant_number (2, 3, 5), vote_id (5, 2, 5), state (\"NY\", \"CA\", \"NJ\n\") | area_code_state : state (\"OH\", \"NH\", \"FL\"), area_code (857, 228, 970) | candidates : contestant_number (5, 2, 2), contestant_name (\"Edwina Burnam\", \"Ericka Dieter\", \"Jessie Alloway\")",
        "ambiguous_queries": [
            "select t2.created, t2.state, t2.phone_number from candidates as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'",
            "select t2.created, t2.state, t2.phone_number from participants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'"
        ],
        "gold_ambiguity": {
            "match": "{\"contestant named\": [{\"candidates\": [\"contestant_name\"]}, {\"participants\": [\"contestant_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"contestant named\" refers to the schema \"candidates\".\"contestant_name\"",
        "clear_ambiguity": "{\"contestant named\": {\"candidates\": [\"contestant_name\"]}}",
        "gold_query": "select t2.created, t2.state, t2.phone_number from candidates as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'"
    },
    {
        "index": 231,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "schema_without_content": "breeds : breed_code , breed_name  | treatments : date_of_treatment , cost_of_treatment , treatment_type_code , dog_id , treatment_id , professional_id  | Handlers : last_name , role_code , first_name , state , street , email_address , professional_id , city , home_phone 2898266914\", \"+020259033559\", cell_number , zip_code  | dogs : weight , size_code , abandoned_yn , date_of_birth , age , dog_id , name , date_arrived , breed_code , date_adopted , gender , date_departed , owner_id  | owners : street , city , state , last_name , email_address , home_phone 747-5094x8134\", \"130-796-4589x05454\", \"1-346-655-5842x768\", owner_id , cell_number 399-3116\", \"559.874.3011x989\", \"559.874.3011x989\", zip_code , first_name  | Caregivers : last_name , role_code , first_name , state , street , email_address , professional_id , city , home_phone 2898266914\", \"+020259033559\", cell_number , zip_code  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | charges : charge_type , charge_amount , charge_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | treatments : date_of_treatment (\"2018-03-19 04:39:54\", \"2018-03-24 22:25:58\", \"2018-03-14 19:10:40\"), cost_of_treatment (852, 407, 852), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (15, 2, 4), treatment_id (9, 2, 15), professional_id (10, 8, 9) | Handlers : last_name (\"Jacobs\", \"Hyatt\", \"Kshlerin\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Ericka\", \"Taryn\", \"Karley\"), state (\"Montana\", \"Connecticut\", \"Wyoming\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"72532 Hane Course\nLake Berylland, ND 95283\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), email_address (\"lourdes.lowe@example.net\", \"uboehm@example.org\", \"cole.margarita@example.org\"), professional_id (13, 13, 7), city (\"New Laurytown\", \"North Odellfurt\", \"Borisside\"), home_phone (\"891.475.2256\", \"+71(6)2898266914\", \"+02(1)0259033559\"), cell_number (\"889-940-2676\", \"1-185-137-1945x409\", \"880-659-7577x736\"), zip_code (\"07412\", \"02281\", \"43129\") | dogs : weight (\"1.39\", \"1.72\", \"4.36\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2010-11-11 07:11:53\", \"2013-02-13 05:15:21\", \"2015-02-26 21:31:22\"), age (\"1\", \"6\", \"5\"), dog_id (14, 1, 2), name (\"Kacey\", \"Mavis\", \"Lyric\"), date_arrived (\"2017-04-20 00:58:55\", \"2017-10-25 00:55:34\", \"2017-07-25 15:19:07\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-02-27 00:27:57\", \"2018-03-07 21:45:43\", \"2018-03-14 08:05:18\"), gender (\"1\", \"0\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-24 23:48:59\", \"2018-03-25 02:11:32\"), owner_id (7, 5, 13) | owners : street (\"2417 Keara Stravenue Apt. 146\", \"9212 Rosenbaum Lights\", \"15828 Spencer Extensions\"), city (\"Lake Carleyborough\", \"South Daisyfurt\", \"Beerton\"), state (\"Arizona\", \"Pennsylvania\", \"Washington\"), last_name (\"Price\", \"DuBuque\", \"Prohaska\"), email_address (\"ymaggio@example.com\", \"kturner@example.net\", \"hudson.favian@example.com\"), home_phone (\"(094)747-5094x8134\", \"130-796-4589x05454\", \"1-346-655-5842x768\"), owner_id (11, 2, 9), cell_number (\"(257)399-3116\", \"559.874.3011x989\", \"559.874.3011x989\"), zip_code (\"35747\", \"78297\", \"86010\"), first_name (\"Jaclyn\", \"Orlando\", \"Tre\") | Caregivers : last_name (\"Jacobs\", \"Hyatt\", \"Kshlerin\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Ericka\", \"Taryn\", \"Karley\"), state (\"Montana\", \"Connecticut\", \"Wyoming\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"72532 Hane Course\nLake Berylland, ND 95283\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), email_address (\"lourdes.lowe@example.net\", \"uboehm@example.org\", \"cole.margarita@example.org\"), professional_id (13, 13, 7), city (\"New Laurytown\", \"North Odellfurt\", \"Borisside\"), home_phone (\"891.475.2256\", \"+71(6)2898266914\", \"+02(1)0259033559\"), cell_number (\"889-940-2676\", \"1-185-137-1945x409\", \"880-659-7577x736\"), zip_code (\"07412\", \"02281\", \"43129\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3)",
        "ambiguous_queries": [
            "select distinct t1.first_name, t1.last_name from handlers as t1 join treatments as t2 where cost_of_treatment < (select avg(cost_of_treatment) from treatments)",
            "select distinct t1.first_name, t1.last_name from caregivers as t1 join treatments as t2 where cost_of_treatment < (select avg(cost_of_treatment) from treatments)"
        ],
        "gold_ambiguity": {
            "match": "{\"costs\": [{\"Caregivers\": [\"cost_of_treatment\"]}, {\"Handlers\": [\"cost_of_treatment\"]}], \"first name\": [{\"Caregivers\": [\"first_name\"]}, {\"Handlers\": [\"first_name\"]}], \"last name\": [{\"Caregivers\": [\"last_name\"]}, {\"Handlers\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"costs\" refers to the schema \"handlers\".\"cost_of_treatment\", \"first name\" refers to the schema \"handlers\".\"first_name\", \"last name\" refers to the schema \"handlers\".\"last_name\"",
        "clear_ambiguity": "{\"costs\": {\"Handlers\": [\"cost_of_treatment\"]}, \"first name\": {\"Handlers\": [\"first_name\"]}, \"last name\": {\"Handlers\": [\"last_name\"]}}",
        "gold_query": "select distinct t1.first_name, t1.last_name from handlers as t1 join treatments as t2 where cost_of_treatment < (select avg(cost_of_treatment) from treatments)"
    },
    {
        "index": 232,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?",
        "schema_without_content": "charges : charge_id , charge_amount , charge_type  | treatments : cost_of_treatment , professional_id , treatment_id , treatment_type_code , dog_id , date_of_treatment  | Pooches : date_departed , breed_code , size_code , dog_id , date_adopted , abandoned_yn , date_arrived , gender , weight , owner_id , date_of_birth , age , name  | owners : city , first_name , zip_code , state , email_address , home_phone 034-1670\", \"130-796-4589x05454\", last_name , street , cell_number 399-3116\", \"768-5439x484\", \"762.589.6117x1328\", owner_id  | treatment_types : treatment_type_code , treatment_type_description  | Canines : date_departed , breed_code , size_code , dog_id , date_adopted , abandoned_yn , date_arrived , gender , weight , owner_id , date_of_birth , age , name  | professionals : home_phone 2898266914\", \"022.529.0550x1319\", \"338-3342x585\", first_name , city , role_code , cell_number 939-2435x80863\", \"499-434-0215x1628\", state , street , email_address , professional_id , last_name , zip_code  | sizes : size_code , size_description  | breeds : breed_code , breed_name",
        "schema_with_content": "charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | treatments : cost_of_treatment (945, 514, 266), professional_id (9, 10, 5), treatment_id (8, 10, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (13, 14, 13), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-10 11:45:58\", \"2018-03-13 12:22:58\") | Pooches : date_departed (\"2018-03-25 13:07:04\", \"2018-03-24 19:36:59\", \"2018-03-25 06:46:07\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (14, 4, 5), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-23 16:02:04\", \"2018-03-23 16:02:04\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-12-29 06:08:26\", \"2017-10-25 00:55:34\", \"2017-12-29 06:08:26\"), gender (\"1\", \"0\"), weight (\"8.04\", \"2.18\", \"8.95\"), owner_id (3, 14, 7), date_of_birth (\"2012-10-14 14:44:37\", \"2012-07-11 17:15:10\", \"2012-07-11 17:15:10\"), age (\"6\", \"8\", \"6\"), name (\"Jeffrey\", \"Kacey\", \"Lyric\") | owners : city (\"Lake Valentin\", \"Port Zackery\", \"New Margaretteborough\"), first_name (\"Kade\", \"Johann\", \"Orlando\"), zip_code (\"22693\", \"87304\", \"36871\"), state (\"Arkansas\", \"NorthDakota\", \"Florida\"), email_address (\"fschoen@example.net\", \"edythe62@example.org\", \"edythe62@example.org\"), home_phone (\"1-682-845-0116x63235\", \"(544)034-1670\", \"130-796-4589x05454\"), last_name (\"Haley\", \"Haley\", \"Prohaska\"), street (\"2635 Caitlyn Plains\", \"1204 Mae Highway Apt. 107\", \"0647 Hintz Village Apt. 024\"), cell_number (\"(257)399-3116\", \"(722)768-5439x484\", \"762.589.6117x1328\"), owner_id (12, 9, 11) | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | Canines : date_departed (\"2018-03-25 13:07:04\", \"2018-03-24 19:36:59\", \"2018-03-25 06:46:07\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (14, 4, 5), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-23 16:02:04\", \"2018-03-23 16:02:04\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-12-29 06:08:26\", \"2017-10-25 00:55:34\", \"2017-12-29 06:08:26\"), gender (\"1\", \"0\"), weight (\"8.04\", \"2.18\", \"8.95\"), owner_id (3, 14, 7), date_of_birth (\"2012-10-14 14:44:37\", \"2012-07-11 17:15:10\", \"2012-07-11 17:15:10\"), age (\"6\", \"8\", \"6\"), name (\"Jeffrey\", \"Kacey\", \"Lyric\") | professionals : home_phone (\"+71(6)2898266914\", \"022.529.0550x1319\", \"(230)338-3342x585\"), first_name (\"Sigurd\", \"Lesly\", \"Sigurd\"), city (\"Juddton\", \"North Adelberttown\", \"North Odellfurt\"), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"461-801-2600\", \"(275)939-2435x80863\", \"499-434-0215x1628\"), state (\"Montana\", \"SouthCarolina\", \"Alabama\"), street (\"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"72532 Hane Course\nLake Berylland, ND 95283\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\"), email_address (\"delphine29@example.com\", \"lucile.shanahan@example.org\", \"lucile.shanahan@example.org\"), professional_id (10, 14, 2), last_name (\"Murazik\", \"Braun\", \"Pouros\"), zip_code (\"54312\", \"80775\", \"77129\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\")",
        "ambiguous_queries": [
            "select name from canines where dog_id not in(select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000)",
            "select name from pooches where dog_id not in(select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000)"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"Canines\": [\"name\"]}, {\"Pooches\": [\"name\"]}], \"spent\": [{\"Canines\": [\"cost_of_treatment\"]}, {\"Pooches\": [\"cost_of_treatment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"canines\".\"name\", \"spent\" refers to the schema \"canines\".\"cost_of_treatment\"",
        "clear_ambiguity": "{\"names\": {\"Canines\": [\"name\"]}, \"spent\": {\"Canines\": [\"cost_of_treatment\"]}}",
        "gold_query": "select name from canines where dog_id not in(select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000)"
    },
    {
        "index": 233,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "schema_without_content": "charges : charge_amount , charge_id , charge_type  | dogs : name , weight , dog_id , date_of_birth , age , size_code , abandoned_yn , gender , breed_code , date_arrived , date_adopted , owner_id , date_departed  | professionals : first_name , professional_id , zip_code , cell_number , last_name , state , home_phone 1132733868\", \"+020259033559\", role_code , email_address , city , street  | Care_Types : treatment_type_code , treatment_type_description  | treatments : treatment_id , dog_id , professional_id , date_of_treatment , treatment_type_code , cost_of_treatment  | sizes : size_description , size_code  | breeds : breed_name , breed_code  | owners : city , cell_number , last_name , zip_code , state , owner_id , street , email_address , home_phone 034-1670\", \"085.557.0379x84348\", \"747-5094x8134\", first_name  | Therapy_Types : treatment_type_code , treatment_type_description",
        "schema_with_content": "charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | dogs : name (\"Betty\", \"Jeffrey\", \"Kacey\"), weight (\"4.36\", \"1.39\", \"1.39\"), dog_id (11, 5, 12), date_of_birth (\"2013-02-13 05:15:21\", \"2008-10-09 22:38:53\", \"2017-09-19 05:39:09\"), age (\"1\", \"1\", \"9\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-04-15 09:25:31\", \"2018-01-02 03:15:29\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-14 08:05:18\", \"2018-02-27 11:54:35\"), owner_id (1, 14, 7), date_departed (\"2018-03-24 19:12:22\", \"2018-03-25 13:07:04\", \"2018-03-24 19:12:22\") | professionals : first_name (\"Ruben\", \"Lesly\", \"Taryn\"), professional_id (10, 15, 13), zip_code (\"54312\", \"33020\", \"77129\"), cell_number (\"1-185-137-1945x409\", \"889-940-2676\", \"609-405-2990\"), last_name (\"Hyatt\", \"Hyatt\", \"Christiansen\"), state (\"Wisconsin\", \"California\", \"California\"), home_phone (\"891.475.2256\", \"+43(5)1132733868\", \"+02(1)0259033559\"), role_code (\"Employee\", \"Veterenarian\"), email_address (\"goyette.roosevelt@example.net\", \"lucile.shanahan@example.org\", \"jerrod.bahringer@example.org\"), city (\"Raynorfort\", \"North Adelberttown\", \"West Heidi\"), street (\"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\") | Care_Types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | treatments : treatment_id (1, 3, 4), dog_id (10, 4, 7), professional_id (10, 10, 9), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-15 20:25:34\", \"2018-03-16 10:27:36\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (681, 349, 852) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | owners : city (\"Lake Valentin\", \"Lake Tia\", \"Lake Valentin\"), cell_number (\"762.589.6117x1328\", \"762.589.6117x1328\", \"633.455.3045x85484\"), last_name (\"Hamill\", \"Mertz\", \"Funk\"), zip_code (\"45244\", \"93165\", \"92406\"), state (\"NorthDakota\", \"Indiana\", \"NorthDakota\"), owner_id (13, 1, 4), street (\"15828 Spencer Extensions\", \"89011 Kertzmann Spring Suite 642\", \"51934 Treutel Harbor\"), email_address (\"pearlie18@example.com\", \"ybergstrom@example.com\", \"ybergstrom@example.com\"), home_phone (\"(544)034-1670\", \"085.557.0379x84348\", \"(094)747-5094x8134\"), first_name (\"Gay\", \"Orlando\", \"Heather\") | Therapy_Types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\")",
        "ambiguous_queries": [
            "select t1.treatment_type_description from therapy_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
            "select t1.treatment_type_description from care_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"cost\": [{\"Care_Types\": [\"cost_of_treatment\"]}, {\"Therapy_Types\": [\"cost_of_treatment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cost\" refers to the schema \"care_types\".\"cost_of_treatment\"",
        "clear_ambiguity": "{\"cost\": {\"Care_Types\": [\"cost_of_treatment\"]}}",
        "gold_query": "select t1.treatment_type_description from care_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1"
    },
    {
        "index": 234,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What is the average edispl of the cars of model volvo?",
        "schema_without_content": "car_names : model , makeid , make  | auto_data : year , accelerate , horsepower , id , cylinders , weight , edispl , mpg  | continents : contid , continent  | vehicle_data : year , accelerate , horsepower , id , cylinders , weight , edispl , mpg  | model_list : modelid , maker , model  | countries : countryname , continent , countryid  | car_makers : fullname , maker , id , country",
        "schema_with_content": "car_names : model (\"peugeot\", \"nissan\", \"toyota\"), makeid (400, 124, 240), make (\"dodge aries se\", \"volkswagen jetta\", \"plymouth cuda 340\") | auto_data : year (1979, 1977, 1979), accelerate (10.5, 17.9, 17.1), horsepower (\"108\", \"122\", \"170\"), id (223, 226, 389), cylinders (4, 6, 6), weight (2290, 2065, 1773), edispl (144.0, 112.0, 231.0), mpg (\"40.8\", \"23.7\", \"21.5\") | continents : contid (3, 3, 3), continent (\"europe\", \"europe\", \"asia\") | vehicle_data : year (1979, 1977, 1979), accelerate (10.5, 17.9, 17.1), horsepower (\"108\", \"122\", \"170\"), id (223, 226, 389), cylinders (4, 6, 6), weight (2290, 2065, 1773), edispl (144.0, 112.0, 231.0), mpg (\"40.8\", \"23.7\", \"21.5\") | model_list : modelid (35, 31, 10), maker (6, 14, 6), model (\"toyota\", \"mercedes-benz\", \"volvo\") | countries : countryname (\"japan\", \"korea\", \"usa\"), continent (2, 4, 2), countryid (8, 11, 4) | car_makers : fullname (\"Daimler Benz\", \"Toyota\", \"Fiat\"), maker (\"amc\", \"volvo\", \"citroen\"), id (1, 11, 20), country (\"5\", \"7\", \"3\")",
        "ambiguous_queries": [
            "select avg(t2.edispl) from car_names as t1 join vehicle_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'",
            "select avg(t2.edispl) from car_names as t1 join auto_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'"
        ],
        "gold_ambiguity": {
            "match": "{\"edispl\": [{\"auto_data\": [\"edispl\"]}, {\"vehicle_data\": [\"edispl\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"edispl\" refers to the schema \"auto_data\".\"edispl\"",
        "clear_ambiguity": "{\"edispl\": {\"auto_data\": [\"edispl\"]}}",
        "gold_query": "select avg(t2.edispl) from car_names as t1 join auto_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'"
    },
    {
        "index": 235,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "schema_without_content": "orchestra : record_company , year_of_founded , conductor_id , major_record_format , orchestra_id , orchestra  | director : age , year_of_work , name , conductor_id , nationality  | show : show_id , performance_id , attendance , if_first_show , result  | performance : type , orchestra_id , weekly_rank , official_ratings_ , date , performance_id , share  | maestro : age , year_of_work , name , conductor_id , nationality",
        "schema_with_content": "orchestra : record_company (\"Koch Records / Naxos Records\", \"EMI\", \"Philips\"), year_of_founded (2009.0, 2007.0, 2008.0), conductor_id (11, 10, 4), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra_id (6, 7, 12), orchestra (\"Chicago Symphony Orchestra\", \"Seattle Symphony Orchestra\", \"Philharmonia Orchestra\") | director : age (47, 63, 63), year_of_work (10, 20, 12), name (\"Paul Jorgensen\", \"Colin Davis\", \"Robert Craft\"), conductor_id (1, 1, 12), nationality (\"USA\", \"UK\", \"France\") | show : show_id (4, 1, 1), performance_id (5, 4, 1), attendance (555.0, 2431.0, 2431.0), if_first_show (\"Glebe Park\", \"Fir Park\", \"Hampden Park\"), result (\"T\", \"F\") | performance : type (\"Auditions 1\", \"Semi-final 3\", \"Auditions 5\"), orchestra_id (6, 1, 9), weekly_rank (\"15\", \"1\", \"1\"), official_ratings_(millions) (5.2, 6.73, 7.28), date (\"13 June\", \"9 June\", \"17 June\"), performance_id (6, 6, 7), share (\"44.7%\", \"44.7%\", \"43.7%\") | maestro : age (47, 63, 63), year_of_work (10, 20, 12), name (\"Paul Jorgensen\", \"Colin Davis\", \"Robert Craft\"), conductor_id (1, 1, 12), nationality (\"USA\", \"UK\", \"France\")",
        "ambiguous_queries": [
            "select name from director order by year_of_work desc",
            "select name from maestro order by year_of_work desc"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"director\": [\"name\"]}, {\"maestro\": [\"name\"]}], \"years\": [{\"director\": [\"year_of_work\"]}, {\"maestro\": [\"year_of_work\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"director\".\"name\", \"years\" refers to the schema \"director\".\"year_of_work\"",
        "clear_ambiguity": "{\"names\": {\"director\": [\"name\"]}, \"years\": {\"director\": [\"year_of_work\"]}}",
        "gold_query": "select name from director order by year_of_work desc"
    },
    {
        "index": 236,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "schema_without_content": "breeds : breed_code , breed_name  | treatment_types : treatment_type_code , treatment_type_description  | owners : home_phone 034-1670\", \"363.948.1090\", \"01802479758\", zip_code , cell_number , last_name , street , email_address , first_name , city , state , owner_id  | Caregivers : zip_code , home_phone 0259033559\", \"320-508-6023\", \"320-508-6023\", professional_id , first_name , role_code , last_name , street , email_address , state , cell_number , city  | charges : charge_amount , charge_type , charge_id  | Handlers : zip_code , home_phone 0259033559\", \"320-508-6023\", \"320-508-6023\", professional_id , first_name , role_code , last_name , street , email_address , state , cell_number , city  | treatments : date_of_treatment , professional_id , cost_of_treatment , dog_id , treatment_type_code , treatment_id  | dogs : dog_id , abandoned_yn , weight , date_arrived , age , date_departed , gender , size_code , owner_id , date_adopted , date_of_birth , name , breed_code  | sizes : size_description , size_code",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : home_phone (\"(544)034-1670\", \"363.948.1090\", \"01802479758\"), zip_code (\"86010\", \"36871\", \"93165\"), cell_number (\"478.978.0729\", \"1-626-264-7659x1697\", \"739-136-7202\"), last_name (\"Rippin\", \"Hauck\", \"Ondricka\"), street (\"59509 Mellie Mountain\", \"57382 Yost Ridges\", \"60352 Kayleigh Crossing Suite 700\"), email_address (\"pearlie18@example.com\", \"zboncak.madonna@example.net\", \"marks.gail@example.org\"), first_name (\"Kade\", \"Adelle\", \"Tre\"), city (\"West Leonard\", \"Lake Tia\", \"West Leonard\"), state (\"NorthDakota\", \"Vermont\", \"NorthDakota\"), owner_id (15, 2, 5) | Caregivers : zip_code (\"54312\", \"34041\", \"84515\"), home_phone (\"+02(1)0259033559\", \"320-508-6023\", \"320-508-6023\"), professional_id (10, 9, 15), first_name (\"Jayson\", \"Jayson\", \"Ericka\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Braun\", \"Considine\", \"Pouros\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\"), email_address (\"lourdes.lowe@example.net\", \"lourdes.lowe@example.net\", \"uboehm@example.org\"), state (\"Indiana\", \"Montana\", \"Wisconsin\"), cell_number (\"880-659-7577x736\", \"609-405-2990\", \"328.842.3792\"), city (\"Borisside\", \"West Heidi\", \"McLaughlinfort\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | Handlers : zip_code (\"54312\", \"34041\", \"84515\"), home_phone (\"+02(1)0259033559\", \"320-508-6023\", \"320-508-6023\"), professional_id (10, 9, 15), first_name (\"Jayson\", \"Jayson\", \"Ericka\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Braun\", \"Considine\", \"Pouros\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\"), email_address (\"lourdes.lowe@example.net\", \"lourdes.lowe@example.net\", \"uboehm@example.org\"), state (\"Indiana\", \"Montana\", \"Wisconsin\"), cell_number (\"880-659-7577x736\", \"609-405-2990\", \"328.842.3792\"), city (\"Borisside\", \"West Heidi\", \"McLaughlinfort\") | treatments : date_of_treatment (\"2018-03-15 19:10:02\", \"2018-02-26 09:08:53\", \"2018-03-14 19:10:40\"), professional_id (10, 14, 9), cost_of_treatment (668, 407, 852), dog_id (15, 14, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (10, 3, 5) | dogs : dog_id (1, 9, 10), abandoned_yn (\"1\", \"0\"), weight (\"8.16\", \"9.48\", \"3.52\"), date_arrived (\"2017-12-29 06:08:26\", \"2017-04-20 00:58:55\", \"2017-06-25 10:14:05\"), age (\"6\", \"1\", \"1\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 02:47:40\", \"2018-03-25 13:07:04\"), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (6, 5, 14), date_adopted (\"2018-03-21 10:41:18\", \"2018-03-13 12:47:15\", \"2018-03-05 06:05:23\"), date_of_birth (\"2008-10-09 22:38:53\", \"2012-05-31 08:01:36\", \"2012-07-11 17:15:10\"), name (\"Lyric\", \"Merritt\", \"Narciso\"), breed_code (\"ESK\", \"BUL\", \"HUS\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\")",
        "ambiguous_queries": [
            "select t1.date_of_treatment, t2.first_name from treatments as t1 join handlers as t2 on t1.professional_id = t2.professional_id",
            "select t1.date_of_treatment, t2.first_name from treatments as t1 join caregivers as t2 on t1.professional_id = t2.professional_id"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"first name\": [{\"Handlers\": [\"first_name\"]}, {\"Caregivers\": [\"first_name\"]}]}"
        },
        "clarification_context": "\"first name\" refers to the schema \"handlers\".\"first_name\"",
        "clear_ambiguity": "{\"first name\": {\"Handlers\": [\"first_name\"]}}",
        "gold_query": "select t1.date_of_treatment, t2.first_name from treatments as t1 join handlers as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "index": 237,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Return the country codes for countries that do not speak English.",
        "schema_without_content": "country : population , region , surfacearea , localname , capital , indepyear , gnp , code2 , governmentform , gnpold , name , code , continent , headofstate , lifeexpectancy  | spoken_language : language , percentage , isofficial , countrycode  | official_language : language , percentage , isofficial , countrycode  | city : name , countrycode , population , district , id  | sqlite_sequence : seq , name",
        "schema_with_content": "country : population (817000, 22256000, 10925000), region (\"North America\", \"Melanesia\", \"Eastern Europe\"), surfacearea (580367.0, 266000.0, 13120000.0), localname (\"MoÃ§ambique\", \"Timor Timur\", \"Eesti\"), capital (1532, 2253, 910), indepyear (1956, 1964, 1944), gnp (776739.0, 16904.0, 776.0), code2 (\"NE\", \"BG\", \"UA\"), governmentform (\"Nonmetropolitan Territory of France\", \"Emirate Federation\", \"Emirate Federation\"), gnpold (1915.0, 4361.0, 220.0), name (\"Rwanda\", \"Heard Island and McDonald Islands\", \"Wallis and Futuna\"), code (\"LUX\", \"VGB\", \"DNK\"), continent (\"North America\", \"Asia\", \"Asia\"), headofstate (\"Akihito\", \"Bakili Muluzi\", \"Hosni Mubarak\"), lifeexpectancy (64.0, 60.0, 69.1) | spoken_language : language (\"Arabic\", \"Kirundi\", \"Faroese\"), percentage (49.1, 7.6, 50.4), isofficial (\"T\", \"F\"), countrycode (\"TUR\", \"KWT\", \"MDV\") | official_language : language (\"Arabic\", \"Kirundi\", \"Faroese\"), percentage (49.1, 7.6, 50.4), isofficial (\"T\", \"F\"), countrycode (\"TUR\", \"KWT\", \"MDV\") | city : name (\"Hama\", \"Kwangju\", \"Boksburg\"), countrycode (\"EST\", \"SOM\", \"WSM\"), population (487222, 636104, 191356), district (\"Denizli\", \"Hualien\", \"Harkova\"), id (2125, 2805, 140) | sqlite_sequence : seq (4079), name (\"city\")",
        "ambiguous_queries": [
            "select countrycode from official_language except select countrycode from official_language where language = 'English'",
            "select countrycode from spoken_language except select countrycode from spoken_language where language = 'English'"
        ],
        "gold_ambiguity": {
            "match": "{\"country codes\": [{\"official_language\": [\"countrycode\"]}, {\"spoken_language\": [\"countrycode\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country codes\" refers to the schema \"official_language\".\"countrycode\"",
        "clear_ambiguity": "{\"country codes\": {\"official_language\": [\"countrycode\"]}}",
        "gold_query": "select countrycode from official_language except select countrycode from official_language where language = 'English'"
    },
    {
        "index": 238,
        "db_id": "museum_visit",
        "ambig_type": "table",
        "db_file": "table/museum_visit/museum_visit.sqlite",
        "question": "How many visitors below age 30 are there?",
        "schema_without_content": "museum : open_year , museum_id , name , num_of_staff  | guest : age , level_of_membership , name , id  | patron : age , level_of_membership , name , id  | visit : visitor_id , num_of_ticket , museum_id , total_spent",
        "schema_with_content": "museum : open_year (\"2010\", \"2008\", \"2009\"), museum_id (4, 7, 8), name (\"Place Tower Museum\", \"Willow Grande Museum\", \"Capital Plaza Museum\"), num_of_staff (17, 62, 25) | guest : age (35, 56, 56), level_of_membership (5, 1, 6), name (\"Arjen Robben\", \"RaÃºl Brown\", \"RaÃºl Brown\"), id (6, 2, 2) | patron : age (35, 56, 56), level_of_membership (5, 1, 6), name (\"Arjen Robben\", \"RaÃºl Brown\", \"RaÃºl Brown\"), id (6, 2, 2) | visit : visitor_id (\"5\", \"3\", \"6\"), num_of_ticket (10, 10, 2), museum_id (4, 1, 4), total_spent (89.98, 20.44, 320.44)",
        "ambiguous_queries": [
            "select count(*) from guest where age < 30",
            "select count(*) from patron where age < 30"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"guest\": [\"age\"]}, {\"patron\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"patron\".\"age\"",
        "clear_ambiguity": "{\"age\": {\"patron\": [\"age\"]}}",
        "gold_query": "select count(*) from patron where age < 30"
    },
    {
        "index": 239,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "table",
        "db_file": "table/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "schema_without_content": "templates : version_number , template_details , template_type_code , template_id , date_effective_from , date_effective_to  | documents : other_details , document_description , template_id , document_name , document_id  | ref_template_types : template_type_description , template_type_code  | Sections : paragraph_text , paragraph_id , other_details , document_id  | Passages : paragraph_text , paragraph_id , other_details , document_id",
        "schema_with_content": "templates : version_number (8, 5, 2), template_details (\"\"), template_type_code (\"PP\", \"PP\", \"PP\"), template_id (9, 8, 18), date_effective_from (\"1975-05-20 22:51:19\", \"1993-10-07 02:33:04\", \"1984-08-07 13:36:26\"), date_effective_to (\"1975-07-16 04:52:10\", \"2001-04-18 09:29:52\", \"1976-10-28 10:08:50\") | documents : other_details (None), document_description (\"r\", \"f\", \"k\"), template_id (22, 20, 7), document_name (\"Summer Show\", \"Palm reading\", \"Data base\"), document_id (1, 3, 801801) | ref_template_types : template_type_description (\"Paper\", \"CV\", \"CV\"), template_type_code (\"BK\", \"PPT\", \"BK\") | Sections : paragraph_text (\"Papua New Guinea\", \"UK\", \"Ukraine\"), paragraph_id (7, 243399026, 765713812), other_details (None), document_id (3540024, 33930, 3830) | Passages : paragraph_text (\"Papua New Guinea\", \"UK\", \"Ukraine\"), paragraph_id (7, 243399026, 765713812), other_details (None), document_id (3540024, 33930, 3830)",
        "ambiguous_queries": [
            "select document_id from sections where paragraph_text = 'Brazil' intersect select document_id from sections where paragraph_text = 'Ireland'",
            "select document_id from passages where paragraph_text = 'Brazil' intersect select document_id from passages where paragraph_text = 'Ireland'"
        ],
        "gold_ambiguity": {
            "match": "{\"paragraph text\": [{\"Passages\": [\"paragraph_text\"]}, {\"Sections\": [\"paragraph_text\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"paragraph text\" refers to the schema \"passages\".\"paragraph_text\"",
        "clear_ambiguity": "{\"paragraph text\": {\"Passages\": [\"paragraph_text\"]}}",
        "gold_query": "select document_id from passages where paragraph_text = 'Brazil' intersect select document_id from passages where paragraph_text = 'Ireland'"
    },
    {
        "index": 240,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "schema_without_content": "state : headofstate , name , governmentform \", \"Occupied by Marocco\", \"People'sRepublic\", gnp , localname , code2 , continent , code , lifeexpectancy , gnpold , indepyear , population , surfacearea , capital , region  | countrylanguage : language , countrycode , isofficial , percentage  | city : population , id , name , countrycode , district  | sqlite_sequence : name , seq  | nation : headofstate , name , governmentform \", \"Occupied by Marocco\", \"People'sRepublic\", gnp , localname , code2 , continent , code , lifeexpectancy , gnpold , indepyear , population , surfacearea , capital , region",
        "schema_with_content": "state : headofstate (\"Leo A. Falcam\", \"Thabo Mbeki\", \"Omar Hassan Ahmad al-Bashir\"), name (\"Chile\", \"Greenland\", \"Suriname\"), governmentform (\"Monarchy (Emirate)\", \"Occupied by Marocco\", \"People'sRepublic\"), gnp (571.0, 96.0, 199.0), localname (\"The Turks and Caicos Islands\", \"Polska\", \"Botswana\"), code2 (\"EE\", \"HN\", \"RW\"), continent (\"South America\", \"Africa\", \"North America\"), code (\"IRQ\", \"LKA\", \"ASM\"), lifeexpectancy (60.0, 60.2, 48.8), gnpold (706.0, 442989.0, 18862.0), indepyear (1828, 1966, 1922), population (75967000, 65000, 147000), surfacearea (455.0, 1267000.0, 86600.0), capital (2697, 927, 2438), region (\"Northern Africa\", \"Australia and New Zealand\", \"Southeast Asia\") | countrylanguage : language (\"Dong\", \"Yao\", \"Romanian\"), countrycode (\"AUS\", \"CMR\", \"SWE\"), isofficial (\"T\", \"F\"), percentage (19.2, 86.6, 82.2) | city : population (408007, 107163, 208426), id (3010, 1339, 3917), name (\"Settat\", \"Puqi\", \"Kaiserslautern\"), countrycode (\"SJM\", \"LCA\", \"BEN\"), district (\"Sergipe\", \"Monagas\", \"Primorje-Gorski Kota\") | sqlite_sequence : name (\"city\"), seq (4079) | nation : headofstate (\"Leo A. Falcam\", \"Thabo Mbeki\", \"Omar Hassan Ahmad al-Bashir\"), name (\"Chile\", \"Greenland\", \"Suriname\"), governmentform (\"Monarchy (Emirate)\", \"Occupied by Marocco\", \"People'sRepublic\"), gnp (571.0, 96.0, 199.0), localname (\"The Turks and Caicos Islands\", \"Polska\", \"Botswana\"), code2 (\"EE\", \"HN\", \"RW\"), continent (\"South America\", \"Africa\", \"North America\"), code (\"IRQ\", \"LKA\", \"ASM\"), lifeexpectancy (60.0, 60.2, 48.8), gnpold (706.0, 442989.0, 18862.0), indepyear (1828, 1966, 1922), population (75967000, 65000, 147000), surfacearea (455.0, 1267000.0, 86600.0), capital (2697, 927, 2438), region (\"Northern Africa\", \"Australia and New Zealand\", \"Southeast Asia\")",
        "ambiguous_queries": [
            "select count(t2.language), t1.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2",
            "select count(t2.language), t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2"
        ],
        "gold_ambiguity": {
            "match": "{\"country name\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country name\" refers to the schema \"nation\".\"name\"",
        "clear_ambiguity": "{\"country name\": {\"nation\": [\"name\"]}}",
        "gold_query": "select count(t2.language), t1.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2"
    },
    {
        "index": 241,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "schema_without_content": "treatments : dog_id , professional_id , treatment_id , cost_of_treatment , date_of_treatment , treatment_type_code  | owners : cell_number 9217952551\", \"1-739-421-2225x38148\", \"633.455.3045x85484\", street , first_name , owner_id , city , zip_code , email_address , state , home_phone , last_name  | sizes : size_description , size_code  | charges : charge_type , charge_amount , charge_id  | Canines : date_departed , date_of_birth , weight , gender , size_code , age , date_adopted , abandoned_yn , breed_code , owner_id , name , dog_id , date_arrived  | professionals : cell_number , last_name , first_name , home_phone 2898266914\", street , role_code , email_address , state , professional_id , city , zip_code  | treatment_types : treatment_type_description , treatment_type_code  | Pooches : date_departed , date_of_birth , weight , gender , size_code , age , date_adopted , abandoned_yn , breed_code , owner_id , name , dog_id , date_arrived  | breeds : breed_code , breed_name",
        "schema_with_content": "treatments : dog_id (2, 4, 4), professional_id (9, 10, 4), treatment_id (6, 2, 2), cost_of_treatment (313, 668, 428), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-23 13:52:10\", \"2018-03-08 05:26:23\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\") | owners : cell_number (\"+70(4)9217952551\", \"1-739-421-2225x38148\", \"633.455.3045x85484\"), street (\"15828 Spencer Extensions\", \"0647 Hintz Village Apt. 024\", \"2635 Caitlyn Plains\"), first_name (\"Cindy\", \"Orlando\", \"Tre\"), owner_id (6, 14, 3), city (\"Lake Tia\", \"Brakusfurt\", \"New Margaretteborough\"), zip_code (\"78297\", \"11990\", \"61019\"), email_address (\"zboncak.madonna@example.net\", \"marks.gail@example.org\", \"christy49@example.org\"), state (\"Maryland\", \"Washington\", \"Arizona\"), home_phone (\"130-796-4589x05454\", \"893-862-5295x61709\", \"363.948.1090\"), last_name (\"Haley\", \"Feil\", \"Hauck\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | Canines : date_departed (\"2018-03-25 04:50:22\", \"2018-03-24 19:36:59\", \"2018-03-25 05:07:47\"), date_of_birth (\"2013-02-13 05:15:21\", \"2008-05-30 12:51:34\", \"2015-02-26 21:31:22\"), weight (\"3.52\", \"9.8\", \"5.16\"), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"6\", \"6\", \"1\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-07 21:45:43\", \"2018-03-23 16:02:04\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (7, 3, 7), name (\"Jesus\", \"Hipolito\", \"Kacey\"), dog_id (12, 1, 15), date_arrived (\"2017-07-25 15:19:07\", \"2017-10-16 20:06:21\", \"2017-12-29 23:24:13\") | professionals : cell_number (\"1-185-137-1945x409\", \"1-181-670-9466\", \"461-801-2600\"), last_name (\"Tillman\", \"Walter\", \"Considine\"), first_name (\"Taryn\", \"Ruben\", \"Danny\"), home_phone (\"1-609-566-2752x25197\", \"325-155-0801x7005\", \"+71(6)2898266914\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), role_code (\"Employee\", \"Veterenarian\"), email_address (\"uboehm@example.org\", \"schneider.kathryne@example.org\", \"jerrod.bahringer@example.org\"), state (\"NewMexico\", \"Hawaii\", \"SouthCarolina\"), professional_id (9, 10, 2), city (\"East Ila\", \"South Rockyport\", \"West Heidi\"), zip_code (\"54312\", \"07412\", \"52476\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | Pooches : date_departed (\"2018-03-25 04:50:22\", \"2018-03-24 19:36:59\", \"2018-03-25 05:07:47\"), date_of_birth (\"2013-02-13 05:15:21\", \"2008-05-30 12:51:34\", \"2015-02-26 21:31:22\"), weight (\"3.52\", \"9.8\", \"5.16\"), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"6\", \"6\", \"1\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-07 21:45:43\", \"2018-03-23 16:02:04\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (7, 3, 7), name (\"Jesus\", \"Hipolito\", \"Kacey\"), dog_id (12, 1, 15), date_arrived (\"2017-07-25 15:19:07\", \"2017-10-16 20:06:21\", \"2017-12-29 23:24:13\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\")",
        "ambiguous_queries": [
            "select name, age, weight from canines where abandoned_yn = 1",
            "select name, age, weight from pooches where abandoned_yn = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"abandoned\": [{\"Canines\": [\"abandoned_yn\"]}, {\"Pooches\": [\"abandoned_yn\"]}], \"age\": [{\"Canines\": [\"age\"]}, {\"Pooches\": [\"age\"]}], \"name\": [{\"Canines\": [\"name\"]}, {\"Pooches\": [\"name\"]}], \"weight\": [{\"Canines\": [\"weight\"]}, {\"Pooches\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"abandoned\" refers to the schema \"canines\".\"abandoned_yn\", \"age\" refers to the schema \"canines\".\"age\", \"name\" refers to the schema \"canines\".\"name\", \"weight\" refers to the schema \"canines\".\"weight\"",
        "clear_ambiguity": "{\"abandoned\": {\"Canines\": [\"abandoned_yn\"]}, \"age\": {\"Canines\": [\"age\"]}, \"name\": {\"Canines\": [\"name\"]}, \"weight\": {\"Canines\": [\"weight\"]}}",
        "gold_query": "select name, age, weight from canines where abandoned_yn = 1"
    },
    {
        "index": 242,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the zip code for Port Chelsea?",
        "schema_without_content": "Residences : zip_postcode , state_province_county , country , line_3 , city , line_2 , line_1 , address_id , other_address_details  | semesters : other_details , semester_name , semester_id , semester_description  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcript_contents : student_course_id , transcript_id  | transcripts : other_details , transcript_date , transcript_id  | students : date_left , date_first_registered , email_address , current_address_id , middle_name , other_student_details , ssn , student_id , permanent_address_id , cell_mobile_number 246-7921\", last_name , first_name  | departments : other_details , department_name , department_id , department_description  | student_enrolment : student_enrolment_id , other_details , student_id , semester_id , degree_program_id  | Locations : zip_postcode , state_province_county , country , line_3 , city , line_2 , line_1 , address_id , other_address_details  | sections : other_details , section_id , section_name , course_id , section_description  | courses : course_id , course_description , other_details , course_name  | degree_programs : degree_summary_name , degree_summary_description , other_details , department_id , degree_program_id",
        "schema_with_content": "Residences : zip_postcode (\"148\", \"895\", \"148\"), state_province_county (\"Wyoming\", \"WestVirginia\", \"Idaho\"), country (\"Saudi Arabia\", \"Gibraltar\", \"Iceland\"), line_3 (None), city (\"South Palma\", \"Prohaskafort\", \"Prohaskafort\"), line_2 (\"Suite 865\", \"Suite 239\", \"Suite 674\"), line_1 (\"202 Hessel Views Apt. 468\", \"74046 Metz Walk Apt. 113\", \"67942 Carlotta Ferry Apt. 686\"), address_id (8, 14, 14), other_address_details (None) | semesters : other_details (None), semester_name (\"spring 2010\", \"winter 2010\", \"fall 2018\"), semester_id (13, 11, 12), semester_description (\"f\", \"w\", \"l\") | student_enrolment_courses : course_id (2, 13, 4), student_enrolment_id (5, 13, 5), student_course_id (8, 0, 1) | transcript_contents : student_course_id (0, 45105806, 7), transcript_id (12, 6, 8) | transcripts : other_details (None), transcript_date (\"1986-07-12 07:27:29\", \"2013-06-30 13:01:40\", \"1985-04-29 01:20:20\"), transcript_id (14, 15, 2) | students : date_left (\"2006-08-04 17:26:49\", \"2013-10-05 17:41:28\", \"1971-05-17 19:28:49\"), date_first_registered (\"2009-09-25 00:14:25\", \"1989-05-24 23:31:29\", \"2014-03-28 05:48:23\"), email_address (\"jillian26@example.net\", \"nbruen@example.org\", \"dell43@example.net\"), current_address_id (15, 2, 9), middle_name (\"Aaliyah\", \"Violet\", \"Aaliyah\"), other_student_details (\"et\", \"omnis\", \"facilis\"), ssn (\"156\", \"\", \"668\"), student_id (13, 5, 13), permanent_address_id (8, 5, 9), cell_mobile_number (\"171-642-5684\", \"877.549.9067x8723\", \"(462)246-7921\"), last_name (\"Weimann\", \"Carroll\", \"Kemmer\"), first_name (\"Jarvis\", \"Delaney\", \"Stanford\") | departments : other_details (None), department_name (\"statistics\", \"math\", \"math\"), department_id (13, 12, 6), department_description (\"nostrum\", \"autem\", \"dolorem\") | student_enrolment : student_enrolment_id (13, 3, 4), other_details (None), student_id (12, 14, 5), semester_id (9, 13, 4), degree_program_id (11, 8, 5) | Locations : zip_postcode (\"148\", \"895\", \"148\"), state_province_county (\"Wyoming\", \"WestVirginia\", \"Idaho\"), country (\"Saudi Arabia\", \"Gibraltar\", \"Iceland\"), line_3 (None), city (\"South Palma\", \"Prohaskafort\", \"Prohaskafort\"), line_2 (\"Suite 865\", \"Suite 239\", \"Suite 674\"), line_1 (\"202 Hessel Views Apt. 468\", \"74046 Metz Walk Apt. 113\", \"67942 Carlotta Ferry Apt. 686\"), address_id (8, 14, 14), other_address_details (None) | sections : other_details (None), section_id (10, 4, 4), section_name (\"j\", \"g\", \"h\"), course_id (1, 9, 5), section_description (\"voluptatem\", \"qui\", \"reprehenderit\") | courses : course_id (10, 2, 5), course_description (\"k\", \"k\", \"w\"), other_details (None), course_name (\"oop\", \"rs\", \"nlp\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"qui\", \"assumenda\", \"architecto\"), other_details (None), department_id (15, 13, 2), degree_program_id (4, 10, 9)",
        "ambiguous_queries": [
            "select zip_postcode from locations where city = 'Port Chelsea'",
            "select zip_postcode from residences where city = 'Port Chelsea'"
        ],
        "gold_ambiguity": {
            "match": "{\"Port Chelsea\": [{\"Locations\": [\"city\"]}, {\"Residences\": [\"city\"]}], \"zip\": [{\"Locations\": [\"zip_postcode\"]}, {\"Residences\": [\"zip_postcode\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Port Chelsea\" refers to the schema \"locations\".\"city\", \"zip\" refers to the schema \"locations\".\"zip_postcode\"",
        "clear_ambiguity": "{\"Port Chelsea\": {\"Locations\": [\"city\"]}, \"zip\": {\"Locations\": [\"zip_postcode\"]}}",
        "gold_query": "select zip_postcode from locations where city = 'Port Chelsea'"
    },
    {
        "index": 243,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "schema_without_content": "breeds : breed_code , breed_name  | sizes : size_description , size_code  | Handlers : street , home_phone 1132733868\", \"+712898266914\", city , first_name , state , last_name , email_address , cell_number 939-2435x80863\", \"328.842.3792\", \"908-7311x065\", professional_id , role_code , zip_code  | treatment_types : treatment_type_code , treatment_type_description  | charges : charge_amount , charge_id , charge_type  | Caregivers : street , home_phone 1132733868\", \"+712898266914\", city , first_name , state , last_name , email_address , cell_number 939-2435x80863\", \"328.842.3792\", \"908-7311x065\", professional_id , role_code , zip_code  | dogs : gender , date_of_birth , abandoned_yn , age , breed_code , owner_id , dog_id , date_departed , date_adopted , name , size_code , weight , date_arrived  | owners : last_name , state , zip_code , city , cell_number , email_address , street , owner_id , first_name , home_phone 563-0260x454\", \"130-796-4589x05454\", \"1-332-849-1908\" | treatments : date_of_treatment , cost_of_treatment , professional_id , treatment_id , treatment_type_code , dog_id",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | Handlers : street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), home_phone (\"246-951-0080x76716\", \"+43(5)1132733868\", \"+71(6)2898266914\"), city (\"Juddton\", \"Borisside\", \"South Rockyport\"), first_name (\"Domenica\", \"Monte\", \"Domenica\"), state (\"Hawaii\", \"Alabama\", \"Wyoming\"), last_name (\"Pouros\", \"Pouros\", \"Frami\"), email_address (\"lourdes.lowe@example.net\", \"uboehm@example.org\", \"lucile.shanahan@example.org\"), cell_number (\"(275)939-2435x80863\", \"328.842.3792\", \"(369)908-7311x065\"), professional_id (4, 2, 6), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"02281\", \"02281\", \"07412\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | Caregivers : street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), home_phone (\"246-951-0080x76716\", \"+43(5)1132733868\", \"+71(6)2898266914\"), city (\"Juddton\", \"Borisside\", \"South Rockyport\"), first_name (\"Domenica\", \"Monte\", \"Domenica\"), state (\"Hawaii\", \"Alabama\", \"Wyoming\"), last_name (\"Pouros\", \"Pouros\", \"Frami\"), email_address (\"lourdes.lowe@example.net\", \"uboehm@example.org\", \"lucile.shanahan@example.org\"), cell_number (\"(275)939-2435x80863\", \"328.842.3792\", \"(369)908-7311x065\"), professional_id (4, 2, 6), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"02281\", \"02281\", \"07412\") | dogs : gender (\"1\", \"0\"), date_of_birth (\"2008-10-09 22:38:53\", \"2008-10-09 22:38:53\", \"2015-02-26 21:31:22\"), abandoned_yn (\"1\", \"0\"), age (\"3\", \"6\", \"6\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (6, 11, 5), dog_id (1, 5, 9), date_departed (\"2018-03-24 23:48:59\", \"2018-03-24 19:12:22\", \"2018-03-25 14:15:41\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-02-27 00:27:57\", \"2018-03-05 06:05:23\"), name (\"Hipolito\", \"Houston\", \"Holden\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"1.72\", \"3.52\", \"5.16\"), date_arrived (\"2018-01-17 11:44:16\", \"2017-12-29 23:24:13\", \"2017-10-16 20:06:21\") | owners : last_name (\"Feil\", \"Prohaska\", \"Funk\"), state (\"Indiana\", \"Vermont\", \"Maryland\"), zip_code (\"22693\", \"45244\", \"25609\"), city (\"East Hillardberg\", \"Lake Valentin\", \"West Leonard\"), cell_number (\"481-483-9083x37986\", \"1-626-264-7659x1697\", \"478.978.0729\"), email_address (\"fschoen@example.net\", \"pearlie18@example.com\", \"hudson.favian@example.com\"), street (\"89011 Kertzmann Spring Suite 642\", \"68118 Daniel Row\", \"6950 Katherine Forges Apt. 630\"), owner_id (11, 5, 5), first_name (\"Heather\", \"Lorenz\", \"Rachelle\"), home_phone (\"(799)563-0260x454\", \"130-796-4589x05454\", \"1-332-849-1908\") | treatments : date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-13 12:22:58\", \"2018-03-15 20:25:34\"), cost_of_treatment (429, 681, 313), professional_id (8, 6, 5), treatment_id (7, 13, 7), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (4, 12, 10)",
        "ambiguous_queries": [
            "select t1.professional_id, t1.role_code, t1.first_name from handlers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
            "select t1.professional_id, t1.role_code, t1.first_name from caregivers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"Caregivers\": [\"first_name\"]}, {\"Handlers\": [\"first_name\"]}], \"role\": [{\"Caregivers\": [\"role_code\"]}, {\"Handlers\": [\"role_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"caregivers\".\"first_name\", \"role\" refers to the schema \"caregivers\".\"role_code\"",
        "clear_ambiguity": "{\"first name\": {\"Caregivers\": [\"first_name\"]}, \"role\": {\"Caregivers\": [\"role_code\"]}}",
        "gold_query": "select t1.professional_id, t1.role_code, t1.first_name from caregivers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"
    },
    {
        "index": 244,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "schema_without_content": "city : countrycode , name , district , population , id  | spoken_language : language , percentage , isofficial , countrycode  | country : governmentform , population , code , localname , code2 , continent , capital , indepyear , gnp , lifeexpectancy , gnpold , headofstate , region , surfacearea , name  | official_language : language , percentage , isofficial , countrycode  | sqlite_sequence : name , seq",
        "schema_with_content": "city : countrycode (\"MDA\", \"KHM\", \"SUR\"), name (\"Fuyang\", \"Godoy Cruz\", \"Almaty\"), district (\"Texas\", \"Grad Zagreb\", \"West Flanderi\"), population (150112, 191615, 116256), id (2148, 2348, 1960) | spoken_language : language (\"Chibcha\", \"Turkmenian\", \"Oromo\"), percentage (100.0, 10.6, 22.9), isofficial (\"T\", \"F\"), countrycode (\"AND\", \"BHS\", \"ZMB\") | country : governmentform (\"Nonmetropolitan Territory of France\", \"Dependent Territory of the US\", \"Special Administrative Region of China\"), population (1987800, 395000, 235000), code (\"TON\", \"COK\", \"IDN\"), localname (\"Niger\", \"Cabo Verde\", \"Venezuela\"), code2 (\"SY\", \"NO\", \"BJ\"), continent (\"Africa\", \"Asia\", \"Antarctica\"), capital (1780, 65, 763), indepyear (1923, 1968, 1974), gnp (299.0, 6366.0, 199.0), lifeexpectancy (63.2, 81.1, 81.6), gnpold (4935.0, 153907.0, 373.0), headofstate (\"Mohammed Abdel Aziz\", \"Jorge Batlle IbÃ¡Ã±ez\", \"Mohammed VI\"), region (\"Southern and Central Asia\", \"Polynesia\", \"Australia and New Zealand\"), surfacearea (83859.0, 151.0, 9572900.0), name (\"Peru\", \"Hungary\", \"Mayotte\") | official_language : language (\"Chibcha\", \"Turkmenian\", \"Oromo\"), percentage (100.0, 10.6, 22.9), isofficial (\"T\", \"F\"), countrycode (\"AND\", \"BHS\", \"ZMB\") | sqlite_sequence : name (\"city\"), seq (4079)",
        "ambiguous_queries": [
            "select t2.language from country as t1 join official_language as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1",
            "select t2.language from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"language\": [{\"official_language\": [\"language\"]}, {\"spoken_language\": [\"language\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"language\" refers to the schema \"spoken_language\".\"language\"",
        "clear_ambiguity": "{\"language\": {\"spoken_language\": [\"language\"]}}",
        "gold_query": "select t2.language from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1"
    },
    {
        "index": 245,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Which region is the city Kabul located in?",
        "schema_without_content": "town : id , population , district , name , countrycode  | country : code , indepyear , governmentform \", gnp , lifeexpectancy , localname , name , population , code2 , capital , gnpold , surfacearea , region , headofstate , continent  | countrylanguage : percentage , countrycode , language , isofficial  | sqlite_sequence : seq , name  | metropolis : id , population , district , name , countrycode",
        "schema_with_content": "town : id (276, 2902, 954), population (320296, 232961, 127026), district (\"ZÃ¼rich\", \"Tabuk\", \"Utrecht\"), name (\"PÃ©njamo\", \"Limeira\", \"Ishinomaki\"), countrycode (\"BLZ\", \"NLD\", \"GAB\") | country : code (\"DEU\", \"TKM\", \"THA\"), indepyear (-1000, 1955, 1993), governmentform (\"Commonwealth of the US\", \"Federation\", \"Monarchy (Emirate)\"), gnp (1579.0, 2133367.0, 146.0), lifeexpectancy (75.2, 63.2, 71.6), localname (\"Heard and McDonald Islands\", \"United Kingdom\", \"ViÃªt Nam\"), name (\"Uzbekistan\", \"Portugal\", \"Colombia\"), population (617000, 12000, 3520000), code2 (\"SR\", \"US\", \"SD\"), capital (901, 3306, 179), gnpold (1056.0, 392911.0, 105116.0), surfacearea (338145.0, 8875.0, 241038.0), region (\"Southeast Asia\", \"Micronesia\", \"Eastern Europe\"), headofstate (None, \"GnassingbÃ© EyadÃ©ma\", \"Teburoro Tito\"), continent (\"Oceania\", \"North America\", \"Oceania\") | countrylanguage : percentage (19.6, 10.4, 13.3), countrycode (\"SUR\", \"CHN\", \"KIR\"), language (\"Mende\", \"Gujarati\", \"Polynesian Languages\"), isofficial (\"T\", \"F\") | sqlite_sequence : seq (4079), name (\"city\") | metropolis : id (276, 2902, 954), population (320296, 232961, 127026), district (\"ZÃ¼rich\", \"Tabuk\", \"Utrecht\"), name (\"PÃ©njamo\", \"Limeira\", \"Ishinomaki\"), countrycode (\"BLZ\", \"NLD\", \"GAB\")",
        "ambiguous_queries": [
            "select region from country as t1 join town as t2 on t1.code = t2.countrycode where t2.name = 'Kabul'",
            "select region from country as t1 join metropolis as t2 on t1.code = t2.countrycode where t2.name = 'Kabul'"
        ],
        "gold_ambiguity": {
            "match": "{\"city\": [{\"metropolis\": [\"name\"]}, {\"town\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"city\" refers to the schema \"town\".\"name\"",
        "clear_ambiguity": "{\"city\": {\"town\": [\"name\"]}}",
        "gold_query": "select region from country as t1 join town as t2 on t1.code = t2.countrycode where t2.name = 'Kabul'"
    },
    {
        "index": 246,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "schema_without_content": "conductor : year_of_work , age , nationality , conductor_id , name  | show : attendance , show_id , performance_id , result , if_first_show  | symphony : major_record_format , record_company , year_of_founded , orchestra , orchestra_id , conductor_id  | ensemble : major_record_format , record_company , year_of_founded , orchestra , orchestra_id , conductor_id  | performance : weekly_rank , official_ratings_ , share , orchestra_id , type , date , performance_id",
        "schema_with_content": "conductor : year_of_work (16, 12, 12), age (42, 49, 47), nationality (\"USA\", \"UK\", \"France\"), conductor_id (6, 4, 3), name (\"Paul Jorgensen\", \"Igor Stravinsky\", \"Igor Stravinsky\") | show : attendance (2431.0, 695.0, 2431.0), show_id (5, 3, 4), performance_id (5, 1, 4), result (\"T\", \"F\"), if_first_show (\"Hampden Park\", \"St. Mirren Park\", \"Fir Park\") | symphony : major_record_format (\"CD\", \"CD / LP\", \"DVD\"), record_company (\"Philips Classics Records\", \"Philips\", \"Mercury Records\"), year_of_founded (2004.0, 2004.0, 2009.0), orchestra (\"Royal Concertgebouw Orchestra\", \"Royal Danish Orchestra\", \"London Symphony Orchestra\"), orchestra_id (1, 1, 1), conductor_id (5, 1, 10) | ensemble : major_record_format (\"CD\", \"CD / LP\", \"DVD\"), record_company (\"Philips Classics Records\", \"Philips\", \"Mercury Records\"), year_of_founded (2004.0, 2004.0, 2009.0), orchestra (\"Royal Concertgebouw Orchestra\", \"Royal Danish Orchestra\", \"London Symphony Orchestra\"), orchestra_id (1, 1, 1), conductor_id (5, 1, 10) | performance : weekly_rank (\"8\", \"15\", \"1\"), official_ratings_(millions) (8.36, 6.73, 9.28), share (\"34%\", \"28.0%\", \"29.3%\"), orchestra_id (6, 7, 2), type (\"Live final results\", \"Auditions 2\", \"Semi-final 2\"), date (\"2007\", \"10 June\", \"9 June\"), performance_id (6, 6, 8)",
        "ambiguous_queries": [
            "select count(*) from ensemble where major_record_format = 'CD' or major_record_format = 'DVD'",
            "select count(*) from symphony where major_record_format = 'CD' or major_record_format = 'DVD'"
        ],
        "gold_ambiguity": {
            "match": "{\"record format\": [{\"ensemble\": [\"major_record_format\"]}, {\"symphony\": [\"major_record_format\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"record format\" refers to the schema \"ensemble\".\"major_record_format\"",
        "clear_ambiguity": "{\"record format\": {\"ensemble\": [\"major_record_format\"]}}",
        "gold_query": "select count(*) from ensemble where major_record_format = 'CD' or major_record_format = 'DVD'"
    },
    {
        "index": 247,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "How many orchestras does each record company manage?",
        "schema_without_content": "symphony : year_of_founded , conductor_id , major_record_format , orchestra , record_company , orchestra_id  | conductor : year_of_work , age , name , nationality , conductor_id  | ensemble : year_of_founded , conductor_id , major_record_format , orchestra , record_company , orchestra_id  | performance : date , type , share , weekly_rank , orchestra_id , official_ratings_ , performance_id  | show : show_id , performance_id , result , if_first_show , attendance",
        "schema_with_content": "symphony : year_of_founded (2003.0, 2003.0, 2008.0), conductor_id (3, 3, 2), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra (\"Montreal Symphony Orchestra\", \"Chicago Symphony Orchestra\", \"Royal Danish Orchestra\"), record_company (\"Kultur\", \"Columbia Masterworks\", \"Philips Classics Records\"), orchestra_id (8, 5, 4) | conductor : year_of_work (6, 6, 10), age (41, 40, 49), name (\"Gerard Schwarz\", \"Seiji Ozawa\", \"Michael Tilson Thomas\"), nationality (\"USA\", \"UK\", \"France\"), conductor_id (8, 7, 5) | ensemble : year_of_founded (2003.0, 2003.0, 2008.0), conductor_id (3, 3, 2), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra (\"Montreal Symphony Orchestra\", \"Chicago Symphony Orchestra\", \"Royal Danish Orchestra\"), record_company (\"Kultur\", \"Columbia Masterworks\", \"Philips Classics Records\"), orchestra_id (8, 5, 4) | performance : date (\"17 June\", \"13 June\", \"17 June\"), type (\"Auditions 4\", \"Live final results\", \"Live final results\"), share (\"22.7%\", \"22.7%\", \"38.1%\"), weekly_rank (\"1\", \"12\", \"11\"), orchestra_id (9, 10, 10), official_ratings_(millions) (8.38, 9.28, 8.38), performance_id (6, 3, 7) | show : show_id (1, 4, 4), performance_id (5, 5, 4), result (\"T\", \"F\"), if_first_show (\"Glebe Park\", \"Glebe Park\", \"Hampden Park\"), attendance (555.0, 695.0, 1925.0)",
        "ambiguous_queries": [
            "select record_company, count(*) from ensemble group by record_company",
            "select record_company, count(*) from symphony group by record_company"
        ],
        "gold_ambiguity": {
            "match": "{\"record company\": [{\"ensemble\": [\"record_company\"]}, {\"symphony\": [\"record_company\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"record company\" refers to the schema \"ensemble\".\"record_company\"",
        "clear_ambiguity": "{\"record company\": {\"ensemble\": [\"record_company\"]}}",
        "gold_query": "select record_company, count(*) from ensemble group by record_company"
    },
    {
        "index": 248,
        "db_id": "network_1",
        "ambig_type": "table",
        "db_file": "table/network_1/network_1.sqlite",
        "question": "What are the names of all high schoolers in grade 10?",
        "schema_without_content": "Student : name , id , grade  | Teenager : name , id , grade  | friend : student_id , friend_id  | likes : student_id , liked_id",
        "schema_with_content": "Student : name (\"Jessica\", \"John\", \"Tiffany\"), id (1661, 1247, 1316), grade (11, 9, 9) | Teenager : name (\"Jessica\", \"John\", \"Tiffany\"), id (1661, 1247, 1316), grade (11, 9, 9) | friend : student_id (1510, 1782, 1911), friend_id (1661, 1247, 1316) | likes : student_id (1689, 1911, 1782), liked_id (1101, 1247, 1709)",
        "ambiguous_queries": [
            "select name from student where grade = 10",
            "select name from teenager where grade = 10"
        ],
        "gold_ambiguity": {
            "match": "{\"grade\": [{\"Student\": [\"grade\"]}, {\"Teenager\": [\"grade\"]}], \"names\": [{\"Student\": [\"name\"]}, {\"Teenager\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"grade\" refers to the schema \"student\".\"grade\", \"names\" refers to the schema \"student\".\"name\"",
        "clear_ambiguity": "{\"grade\": {\"Student\": [\"grade\"]}, \"names\": {\"Student\": [\"name\"]}}",
        "gold_query": "select name from student where grade = 10"
    },
    {
        "index": 249,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "schema_without_content": "tv_series : 18_49_rating_share , rating , share , air_date , id , weekly_rank , episode , viewers_m , channel  | Television_Channel : country , language , package_option , series_name , content , hight_definition_tv , pay_per_view_ppv , id , pixel_aspect_ratio_par  | Broadcasting_Channel : country , language , package_option , series_name , content , hight_definition_tv , pay_per_view_ppv , id , pixel_aspect_ratio_par  | cartoon : directed_by , id , production_code , written_by , title , original_air_date , channel",
        "schema_with_content": "tv_series : 18_49_rating_share (\"2.9/7\", \"1.7/5\", \"1.7/5\"), rating (\"4.0\", \"3.8\", \"5.3\"), share (7.0, 7.0, 9.0), air_date (\"October 29, 2007\", \"October 29, 2007\", \"November 19, 2007\"), id (2.0, 10.0, 2.0), weekly_rank (62.0, 65.0, 67.0), episode (\"Emily\", \"The Hanged Man\", \"Game Three\"), viewers_m (\"8.23\", \"9.16\", \"5.61\"), channel (\"701\", \"719\", \"713\") | Television_Channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\"), package_option (\"Option\", \"Option\", \"Sky Famiglia\"), series_name (\"Hip Hop TV\", \"Classica\", \"MTV Live HD\"), content (\"music\"), hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\"), id (\"706\", \"709\", \"717\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | Broadcasting_Channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\"), package_option (\"Option\", \"Option\", \"Sky Famiglia\"), series_name (\"Hip Hop TV\", \"Classica\", \"MTV Live HD\"), content (\"music\"), hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\"), id (\"706\", \"709\", \"717\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (2.0, 3.0, 9.0), production_code (112.0, 109.0, 102.0), written_by (\"J. M. DeMatteis\", \"Matt Wayne\", \"Steven Melching\"), title (\"Return of the Fearsome Fangs!\", \"Terror on Dinosaur Island!\", \"Dawn of the Dead Man!\"), original_air_date (\"February20,2009\", \"January30,2009\", \"January30,2009\"), channel (\"708\", \"705\", \"728\")",
        "ambiguous_queries": [
            "select country, count(*) from broadcasting_channel group by country order by count(*) desc limit 1",
            "select country, count(*) from television_channel group by country order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{\"Broadcasting_Channel\": [\"country\"]}, {\"Television_Channel\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"television_channel\".\"country\"",
        "clear_ambiguity": "{\"country\": {\"Television_Channel\": [\"country\"]}}",
        "gold_query": "select country, count(*) from television_channel group by country order by count(*) desc limit 1"
    },
    {
        "index": 250,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "schema_without_content": "car_names : model , make , makeid  | auto_brands : id , fullname , country , maker  | cars_data : cylinders , weight , horsepower , year , accelerate , mpg , edispl , id  | continents : continent , contid  | countries : countryname , continent , countryid  | manufacturers : id , fullname , country , maker  | model_list : model , maker , modelid",
        "schema_with_content": "car_names : model (\"nissan\", \"nissan\", \"buick\"), make (\"plymouth custom suburb\", \"volkswagen scirocco\", \"oldsmobile delta 88 royale\"), makeid (323, 81, 194) | auto_brands : id (2, 2, 9), fullname (\"Kia Motors\", \"Triumph\", \"Mazda\"), country (\"4\", \"6\", \"2\"), maker (\"saab\", \"fiat\", \"hyundai\") | cars_data : cylinders (8, 3, 3), weight (2265, 2965, 2865), horsepower (\"153\", \"120\", \"105\"), year (1982, 1980, 1974), accelerate (13.8, 24.8, 15.9), mpg (\"37.2\", \"40.8\", \"16.5\"), edispl (302.0, 171.0, 383.0), id (305, 135, 397) | continents : continent (\"asia\", \"america\", \"africa\"), contid (4, 2, 2) | countries : countryname (\"brazil\", \"brazil\", \"brazil\"), continent (5, 2, 3), countryid (14, 1, 12) | manufacturers : id (2, 2, 9), fullname (\"Kia Motors\", \"Triumph\", \"Mazda\"), country (\"4\", \"6\", \"2\"), maker (\"saab\", \"fiat\", \"hyundai\") | model_list : model (\"cadillac\", \"amc\", \"jeep\"), maker (19, 22, 12), modelid (19, 4, 15)",
        "ambiguous_queries": [
            "select t1.countryname, t1.countryid from countries as t1 join manufacturers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1",
            "select t1.countryname, t1.countryid from countries as t1 join auto_brands as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1"
        ],
        "gold_ambiguity": {
            "match": "{\"countries\": [{\"auto_brands\": [\"country\"]}, {\"manufacturers\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"countries\" refers to the schema \"manufacturers\".\"country\"",
        "clear_ambiguity": "{\"countries\": {\"manufacturers\": [\"country\"]}}",
        "gold_query": "select t1.countryname, t1.countryid from countries as t1 join manufacturers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1"
    },
    {
        "index": 251,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "schema_without_content": "Pupils : permanent_address_id , first_name , last_name , cell_mobile_number 246-7921\", \"677.401.9382\", \"1-879-796-8987x164\", other_student_details , ssn , date_first_registered , current_address_id , email_address , student_id , date_left , middle_name  | sections : section_description , other_details , section_name , section_id , course_id  | transcript_contents : transcript_id , student_course_id  | semesters : semester_description , semester_id , other_details , semester_name  | transcripts : transcript_id , other_details , transcript_date  | degree_programs : degree_summary_description , degree_summary_name , department_id , degree_program_id , other_details  | courses : course_name , course_description , course_id , other_details  | addresses : state_province_county , line_3 , address_id , line_2 , city , country , line_1 , zip_postcode , other_address_details  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | departments : department_description , department_id , department_name , other_details  | student_enrolment : student_id , degree_program_id , student_enrolment_id , semester_id , other_details  | Learners : permanent_address_id , first_name , last_name , cell_mobile_number 246-7921\", \"677.401.9382\", \"1-879-796-8987x164\", other_student_details , ssn , date_first_registered , current_address_id , email_address , student_id , date_left , middle_name",
        "schema_with_content": "Pupils : permanent_address_id (5, 5, 14), first_name (\"Delaney\", \"Frida\", \"Frida\"), last_name (\"Ward\", \"Osinski\", \"Balistreri\"), cell_mobile_number (\"(462)246-7921\", \"677.401.9382\", \"1-879-796-8987x164\"), other_student_details (\"dolorum\", \"rerum\", \"voluptatem\"), ssn (\"156\", \"6274274\", \"39\"), date_first_registered (\"1982-06-19 13:15:18\", \"2005-12-15 08:42:10\", \"2004-12-24 12:36:46\"), current_address_id (9, 6, 6), email_address (\"skassulke@example.net\", \"jhuel@example.com\", \"jillian26@example.net\"), student_id (2, 6, 9), date_left (\"2016-04-09 12:27:04\", \"1971-05-17 19:28:49\", \"2007-03-31 09:53:19\"), middle_name (\"Judd\", \"Mona\", \"Neal\") | sections : section_description (\"voluptatem\", \"et\", \"nesciunt\"), other_details (None), section_name (\"o\", \"j\", \"p\"), section_id (8, 15, 1), course_id (14, 12, 5) | transcript_contents : transcript_id (8, 12, 5), student_course_id (76, 96, 28982908) | semesters : semester_description (\"q\", \"f\", \"f\"), semester_id (8, 5, 1), other_details (None), semester_name (\"spring 2014\", \"winter 2010\", \"spring 2010\") | transcripts : transcript_id (12, 6, 3), other_details (None), transcript_date (\"1985-08-21 09:32:39\", \"1999-01-06 20:06:46\", \"2010-12-13 10:55:15\") | degree_programs : degree_summary_description (\"voluptas\", \"quam\", \"architecto\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (8, 13, 3), degree_program_id (7, 10, 11), other_details (None) | courses : course_name (\"ds\", \"dl\", \"en\"), course_description (\"n\", \"b\", \"n\"), course_id (12, 11, 13), other_details (None) | addresses : state_province_county (\"Arkansas\", \"Hawaii\", \"Wyoming\"), line_3 (None), address_id (1, 6, 9), line_2 (\"Suite 703\", \"Apt. 468\", \"Suite 674\"), city (\"Port Elvisfurt\", \"Lake Careyberg\", \"South Palma\"), country (\"Iceland\", \"Angola\", \"Cook Islands\"), line_1 (\"858 Peggie Bypass Suite 212\", \"979 Haag Shores Suite 656\", \"0144 Lamar Plaza Apt. 346\"), zip_postcode (\"446\", \"847\", \"541\"), other_address_details (None) | student_enrolment_courses : course_id (3, 13, 2), student_course_id (0, 0, 96), student_enrolment_id (14, 9, 6) | departments : department_description (\"ea\", \"dolorem\", \"dolorem\"), department_id (11, 3, 15), department_name (\"math\", \"economics\", \"engineer\"), other_details (None) | student_enrolment : student_id (5, 5, 7), degree_program_id (8, 9, 10), student_enrolment_id (4, 11, 8), semester_id (13, 15, 2), other_details (None) | Learners : permanent_address_id (5, 5, 14), first_name (\"Delaney\", \"Frida\", \"Frida\"), last_name (\"Ward\", \"Osinski\", \"Balistreri\"), cell_mobile_number (\"(462)246-7921\", \"677.401.9382\", \"1-879-796-8987x164\"), other_student_details (\"dolorum\", \"rerum\", \"voluptatem\"), ssn (\"156\", \"6274274\", \"39\"), date_first_registered (\"1982-06-19 13:15:18\", \"2005-12-15 08:42:10\", \"2004-12-24 12:36:46\"), current_address_id (9, 6, 6), email_address (\"skassulke@example.net\", \"jhuel@example.com\", \"jillian26@example.net\"), student_id (2, 6, 9), date_left (\"2016-04-09 12:27:04\", \"1971-05-17 19:28:49\", \"2007-03-31 09:53:19\"), middle_name (\"Judd\", \"Mona\", \"Neal\")",
        "ambiguous_queries": [
            "select distinct t1.first_name, t1.middle_name, t1.last_name from learners as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'",
            "select distinct t1.first_name, t1.middle_name, t1.last_name from pupils as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"first name\": [{\"Learners\": [\"first_name\"]}, {\"Pupils\": [\"first_name\"]}], \"last name\": [{\"Learners\": [\"last_name\"]}, {\"Pupils\": [\"last_name\"]}], \"middle name\": [{\"Learners\": [\"middle_name\"]}, {\"Pupils\": [\"middle_name\"]}]}"
        },
        "clarification_context": "\"first name\" refers to the schema \"learners\".\"first_name\", \"last name\" refers to the schema \"learners\".\"last_name\", \"middle name\" refers to the schema \"learners\".\"middle_name\"",
        "clear_ambiguity": "{\"first name\": {\"Learners\": [\"first_name\"]}, \"last name\": {\"Learners\": [\"last_name\"]}, \"middle name\": {\"Learners\": [\"middle_name\"]}}",
        "gold_query": "select distinct t1.first_name, t1.middle_name, t1.last_name from learners as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'"
    },
    {
        "index": 252,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "schema_without_content": "airports : countryabbrev , airportcode , country , city , airportname  | airlines : abbreviation , country , airline , uid  | journeys : destairport , flightno , airline , sourceairport  | routes : destairport , flightno , airline , sourceairport",
        "schema_with_content": "airports : countryabbrev (\"US \", \"US\"), airportcode (\"AHN\", \"OTS\", \"AMA\"), country (\"United States \"), city (\" Amarillo   \", \"Alameda \", \"Alexandria Bay \"), airportname (\"Albert Lea \", \"Lenawee County \", \"Anacortes \") | airlines : abbreviation (\"Northwest\", \"Virgin\", \"USAir\"), country (\"USA\"), airline (\"Allegiant Air\", \"Allegiant Air\", \"Southwest Airlines\"), uid (4, 2, 6) | journeys : destairport (\" AEX\", \" ESF\", \" AIB\"), flightno (855, 90, 1309), airline (6, 7, 5), sourceairport (\" ANY\", \" LTS\", \" AHT\") | routes : destairport (\" AEX\", \" ESF\", \" AIB\"), flightno (855, 90, 1309), airline (6, 7, 5), sourceairport (\" ANY\", \" LTS\", \" AHT\")",
        "ambiguous_queries": [
            "select t1.flightno from journeys as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen'",
            "select t1.flightno from routes as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen'"
        ],
        "gold_ambiguity": {
            "match": "{\"flight numbers\": [{\"journeys\": [\"flightno\"]}, {\"routes\": [\"flightno\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"flight numbers\" refers to the schema \"routes\".\"flightno\"",
        "clear_ambiguity": "{\"flight numbers\": {\"routes\": [\"flightno\"]}}",
        "gold_query": "select t1.flightno from routes as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen'"
    },
    {
        "index": 253,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "schema_without_content": "owners : zip_code , street , home_phone 034-1670\", \"893-862-5295x61709\", \"034-1670\", cell_number , state , owner_id , last_name , email_address , first_name , city  | sizes : size_code , size_description  | procedures : dog_id , professional_id , treatment_type_code , treatment_id , date_of_treatment , cost_of_treatment  | breeds : breed_code , breed_name  | treatment_types : treatment_type_code , treatment_type_description  | therapies : dog_id , professional_id , treatment_type_code , treatment_id , date_of_treatment , cost_of_treatment  | charges : charge_amount , charge_id , charge_type  | dogs : gender , age , weight , date_arrived , owner_id , breed_code , dog_id , date_adopted , date_of_birth , abandoned_yn , size_code , name , date_departed  | professionals : role_code , last_name , home_phone 0259033559\", \"022.529.0550x1319\", professional_id , first_name , zip_code , street , cell_number , state , city , email_address",
        "schema_with_content": "owners : zip_code (\"00589\", \"35747\", \"25609\"), street (\"6950 Katherine Forges Apt. 630\", \"89011 Kertzmann Spring Suite 642\", \"2635 Caitlyn Plains\"), home_phone (\"(544)034-1670\", \"893-862-5295x61709\", \"(544)034-1670\"), cell_number (\"1-739-421-2225x38148\", \"1-739-421-2225x38148\", \"478.978.0729\"), state (\"SouthDakota\", \"Virginia\", \"Pennsylvania\"), owner_id (12, 14, 4), last_name (\"Funk\", \"Price\", \"Nicolas\"), email_address (\"fschoen@example.net\", \"hudson.favian@example.com\", \"margaretta.runte@example.net\"), first_name (\"Heather\", \"Lorenz\", \"Gay\"), city (\"Lake Tia\", \"Barrettburgh\", \"Port Reannamouth\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | procedures : dog_id (4, 13, 1), professional_id (6, 7, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (7, 13, 2), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-01 04:14:46\", \"2018-03-13 12:22:58\"), cost_of_treatment (147, 567, 514) | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | therapies : dog_id (4, 13, 1), professional_id (6, 7, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (7, 13, 2), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-01 04:14:46\", \"2018-03-13 12:22:58\"), cost_of_treatment (147, 567, 514) | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | dogs : gender (\"1\", \"0\"), age (\"2\", \"1\", \"4\"), weight (\"9.48\", \"2.18\", \"8.95\"), date_arrived (\"2017-10-25 00:55:34\", \"2017-09-08 20:10:13\", \"2018-01-02 03:15:29\"), owner_id (2, 12, 12), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (15, 11, 15), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-07 21:45:43\", \"2018-03-14 08:05:18\"), date_of_birth (\"2009-04-12 06:02:48\", \"2012-05-03 21:42:25\", \"2012-05-31 08:01:36\"), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), name (\"Mavis\", \"Houston\", \"Evangeline\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 13:07:04\", \"2018-03-25 10:25:46\") | professionals : role_code (\"Employee\", \"Veterenarian\"), last_name (\"Murazik\", \"Christiansen\", \"Pouros\"), home_phone (\"320-508-6023\", \"+02(1)0259033559\", \"022.529.0550x1319\"), professional_id (15, 14, 6), first_name (\"Olaf\", \"Brady\", \"Winfield\"), zip_code (\"06646\", \"07412\", \"07412\"), street (\"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), cell_number (\"609-405-2990\", \"499-434-0215x1628\", \"499-434-0215x1628\"), state (\"NorthCarolina\", \"Wyoming\", \"SouthCarolina\"), city (\"New Laurytown\", \"Juddton\", \"Raynorfort\"), email_address (\"lourdes.lowe@example.net\", \"jeichmann@example.com\", \"jacynthe.mclaughlin@example.net\")",
        "ambiguous_queries": [
            "select t1.date_of_treatment, t2.first_name from procedures as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
            "select t1.date_of_treatment, t2.first_name from therapies as t1 join professionals as t2 on t1.professional_id = t2.professional_id"
        ],
        "gold_ambiguity": {
            "match": "{\"date\": [{\"procedures\": [\"date_of_treatment\"]}, {\"therapies\": [\"date_of_treatment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"date\" refers to the schema \"procedures\".\"date_of_treatment\"",
        "clear_ambiguity": "{\"date\": {\"procedures\": [\"date_of_treatment\"]}}",
        "gold_query": "select t1.date_of_treatment, t2.first_name from procedures as t1 join professionals as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "index": 254,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "schema_without_content": "tv_channel : country , content , series_name , pixel_aspect_ratio_par , pay_per_view_ppv , language , package_option \", \"Sky Famiglia\", hight_definition_tv , id  | cartoon : original_air_date , channel , id , title , directed_by , production_code , written_by  | TV_show : id , share , channel , viewers_m , episode , rating , weekly_rank , air_date , 18_49_rating_share  | TV_program : id , share , channel , viewers_m , episode , rating , weekly_rank , air_date , 18_49_rating_share",
        "schema_with_content": "tv_channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), series_name (\"Match Music\", \"Rock TV\", \"Sky Music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia + Sky HD\", \"no ( FTV )\", \"Sky Famiglia\"), hight_definition_tv (\"no\", \"yes\"), id (\"708\", \"717\", \"714\") | cartoon : original_air_date (\"January9,2009\", \"January30,2009\", \"January16,2009\"), channel (\"708\", \"705\", \"703\"), id (5.0, 11.0, 1.0), title (\"Journey to the Center of the Bat!\", \"Dawn of the Dead Man!\", \"Deep Cover for Batman!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (104.0, 103.0, 105.0), written_by (\"Matt Wayne\", \"James Krieg\", \"Adam Beechen\") | TV_show : id (3.0, 10.0, 3.0), share (6.0, 9.0, 7.0), channel (\"700\", \"717\", \"719\"), viewers_m (\"5.75\", \"5.75\", \"6.09\"), episode (\"The Hanged Man\", \"Winterland\", \"Winterland\"), rating (\"3.0\", \"5.8\", \"4.3\"), weekly_rank (70.0, 43.0, 62.0), air_date (\"October 1, 2007\", \"November 12, 2007\", \"October 22, 2007\"), 18_49_rating_share (\"2.2/6\", \"3.2/8\", \"3.2/8\") | TV_program : id (3.0, 10.0, 3.0), share (6.0, 9.0, 7.0), channel (\"700\", \"717\", \"719\"), viewers_m (\"5.75\", \"5.75\", \"6.09\"), episode (\"The Hanged Man\", \"Winterland\", \"Winterland\"), rating (\"3.0\", \"5.8\", \"4.3\"), weekly_rank (70.0, 43.0, 62.0), air_date (\"October 1, 2007\", \"November 12, 2007\", \"October 22, 2007\"), 18_49_rating_share (\"2.2/6\", \"3.2/8\", \"3.2/8\")",
        "ambiguous_queries": [
            "select episode, rating from tv_show order by rating desc limit 3",
            "select episode, rating from tv_program order by rating desc limit 3"
        ],
        "gold_ambiguity": {
            "match": "{\"episodes\": [{\"TV_program\": [\"episode\"]}, {\"TV_show\": [\"episode\"]}], \"ratings\": [{\"TV_program\": [\"rating\"]}, {\"TV_show\": [\"rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"episodes\" refers to the schema \"tv_show\".\"episode\", \"ratings\" refers to the schema \"tv_show\".\"rating\"",
        "clear_ambiguity": "{\"episodes\": {\"TV_show\": [\"episode\"]}, \"ratings\": {\"TV_show\": [\"rating\"]}}",
        "gold_query": "select episode, rating from tv_show order by rating desc limit 3"
    },
    {
        "index": 255,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "schema_without_content": "airports : country , airportname , airportcode , countryabbrev , city  | journeys : airline , flightno , sourceairport , destairport  | airlines : airline , abbreviation , country , uid  | routes : airline , flightno , sourceairport , destairport",
        "schema_with_content": "airports : country (\"United States \"), airportname (\"Alakanuk \", \"Andrews \", \"Phillips AAF \"), airportcode (\"AID\", \"ARX\", \"AXS\"), countryabbrev (\"US \", \"US\"), city (\" Alexander City AL  \", \"Ainsworth \", \"Apalachicola \") | journeys : airline (10, 4, 8), flightno (747, 990, 828), sourceairport (\" AHD\", \" AUK\", \" WKK\"), destairport (\" VJI\", \" ALX\", \" ARC\") | airlines : airline (\"Virgin America\", \"Southwest Airlines\", \"American Airlines\"), abbreviation (\"UAL\", \"UAL\", \"UAL\"), country (\"USA\"), uid (1, 9, 11) | routes : airline (10, 4, 8), flightno (747, 990, 828), sourceairport (\" AHD\", \" AUK\", \" WKK\"), destairport (\" VJI\", \" ALX\", \" ARC\")",
        "ambiguous_queries": [
            "select count(*) from journeys as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen' or t2.city = 'Abilene'",
            "select count(*) from routes as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen' or t2.city = 'Abilene'"
        ],
        "gold_ambiguity": {
            "match": "{\"flights\": [{\"journeys\": [\"destairport\"]}, {\"routes\": [\"destairport\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"flights\" refers to the schema \"routes\".\"destairport\"",
        "clear_ambiguity": "{\"flights\": {\"routes\": [\"destairport\"]}}",
        "gold_query": "select count(*) from routes as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen' or t2.city = 'Abilene'"
    },
    {
        "index": 256,
        "db_id": "network_1",
        "ambig_type": "table",
        "db_file": "table/network_1/network_1.sqlite",
        "question": "How many likes does Kyle have?",
        "schema_without_content": "friend : student_id , friend_id  | Teenager : id , grade , name  | Student : id , grade , name  | likes : student_id , liked_id",
        "schema_with_content": "friend : student_id (1782, 1510, 1911), friend_id (1661, 1316, 1661) | Teenager : id (1934, 1641, 1689), grade (11, 10, 10), name (\"Haley\", \"Austin\", \"Cassandra\") | Student : id (1934, 1641, 1689), grade (11, 10, 10), name (\"Haley\", \"Austin\", \"Cassandra\") | likes : student_id (1934, 1782, 1025), liked_id (1934, 1501, 1468)",
        "ambiguous_queries": [
            "select count(*) from likes as t1 join student as t2 on t1.student_id = t2.id where t2.name = 'Kyle'",
            "select count(*) from likes as t1 join teenager as t2 on t1.student_id = t2.id where t2.name = 'Kyle'"
        ],
        "gold_ambiguity": {
            "match": "{\"Kyle\": [{\"Student\": [\"name\"]}, {\"Teenager\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Kyle\" refers to the schema \"student\".\"name\"",
        "clear_ambiguity": "{\"Kyle\": {\"Student\": [\"name\"]}}",
        "gold_query": "select count(*) from likes as t1 join student as t2 on t1.student_id = t2.id where t2.name = 'Kyle'"
    },
    {
        "index": 257,
        "db_id": "poker_player",
        "ambig_type": "table",
        "db_file": "table/poker_player/poker_player.sqlite",
        "question": "What are the names of poker players?",
        "schema_without_content": "poker_player : people_id , money_rank , best_finish , final_table_made , poker_player_id , earnings  | person : people_id , name , birth_date , height , nationality  | individuals : people_id , name , birth_date , height , nationality",
        "schema_with_content": "poker_player : people_id (5, 6, 6), money_rank (166.0, 141.0, 68.0), best_finish (1.0, 2.0, 3.0), final_table_made (42.0, 21.0, 42.0), poker_player_id (3, 5, 1), earnings (476090.0, 104871.0, 189233.0) | person : people_id (3, 5, 7), name (\"Yevgeni Sivozhelez\", \"Aleksey Ostapenko\", \"Maksim Botin\"), birth_date (\"July 14, 1983\", \"April 17, 1987\", \"February 8, 1981\"), height (196.0, 205.0, 194.0), nationality (\"Russia\", \"Bulgaria\") | individuals : people_id (3, 5, 7), name (\"Yevgeni Sivozhelez\", \"Aleksey Ostapenko\", \"Maksim Botin\"), birth_date (\"July 14, 1983\", \"April 17, 1987\", \"February 8, 1981\"), height (196.0, 205.0, 194.0), nationality (\"Russia\", \"Bulgaria\")",
        "ambiguous_queries": [
            "select t1.name from person as t1 join poker_player as t2 on t1.people_id = t2.people_id",
            "select t1.name from individuals as t1 join poker_player as t2 on t1.people_id = t2.people_id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"person\": [\"name\"]}, {\"individuals\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"individuals\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"individuals\": [\"name\"]}}",
        "gold_query": "select t1.name from individuals as t1 join poker_player as t2 on t1.people_id = t2.people_id"
    },
    {
        "index": 258,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "schema_without_content": "Caretakers : zip_code , email_address , last_name , state , home_phone 563-0260x454\", street , city , first_name , owner_id , cell_number  | treatments : professional_id , date_of_treatment , treatment_id , cost_of_treatment , treatment_type_code , dog_id  | treatment_types : treatment_type_description , treatment_type_code  | sizes : size_description , size_code  | Guardians : zip_code , email_address , last_name , state , home_phone 563-0260x454\", street , city , first_name , owner_id , cell_number  | professionals : email_address , professional_id , home_phone 2898266914\", \"971.048.3763x9404\", \"246-951-0080x76716\", cell_number 908-7311x065\", \"139-321-7313\", last_name , city , first_name , street , zip_code , state , role_code  | breeds : breed_code , breed_name  | dogs : weight , gender , date_arrived , breed_code , name , age , owner_id , dog_id , abandoned_yn , size_code , date_of_birth , date_departed , date_adopted  | charges : charge_type , charge_id , charge_amount",
        "schema_with_content": "Caretakers : zip_code (\"61019\", \"93165\", \"35747\"), email_address (\"wpfeffer@example.net\", \"hudson.favian@example.com\", \"zboncak.madonna@example.net\"), last_name (\"Price\", \"Price\", \"Hamill\"), state (\"Mississippi\", \"Maryland\", \"Arkansas\"), home_phone (\"01802479758\", \"1-682-845-0116x63235\", \"(799)563-0260x454\"), street (\"57382 Yost Ridges\", \"692 Jaskolski Forges\", \"6950 Katherine Forges Apt. 630\"), city (\"South Afton\", \"East Hillardberg\", \"South Afton\"), first_name (\"Melisa\", \"Gay\", \"Rolando\"), owner_id (9, 8, 10), cell_number (\"633.455.3045x85484\", \"1-739-421-2225x38148\", \"1-739-421-2225x38148\") | treatments : professional_id (14, 4, 4), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\"), treatment_id (13, 8, 12), cost_of_treatment (313, 668, 429), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (14, 13, 12) | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | Guardians : zip_code (\"61019\", \"93165\", \"35747\"), email_address (\"wpfeffer@example.net\", \"hudson.favian@example.com\", \"zboncak.madonna@example.net\"), last_name (\"Price\", \"Price\", \"Hamill\"), state (\"Mississippi\", \"Maryland\", \"Arkansas\"), home_phone (\"01802479758\", \"1-682-845-0116x63235\", \"(799)563-0260x454\"), street (\"57382 Yost Ridges\", \"692 Jaskolski Forges\", \"6950 Katherine Forges Apt. 630\"), city (\"South Afton\", \"East Hillardberg\", \"South Afton\"), first_name (\"Melisa\", \"Gay\", \"Rolando\"), owner_id (9, 8, 10), cell_number (\"633.455.3045x85484\", \"1-739-421-2225x38148\", \"1-739-421-2225x38148\") | professionals : email_address (\"delphine29@example.com\", \"west.eula@example.net\", \"delphine29@example.com\"), professional_id (10, 1, 11), home_phone (\"+71(6)2898266914\", \"971.048.3763x9404\", \"246-951-0080x76716\"), cell_number (\"1-258-285-4707x8020\", \"(369)908-7311x065\", \"139-321-7313\"), last_name (\"Braun\", \"Braun\", \"Tillman\"), city (\"Juddton\", \"New Maryjane\", \"East Ila\"), first_name (\"Ruben\", \"Danny\", \"Brady\"), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), zip_code (\"52476\", \"80775\", \"06646\"), state (\"Alabama\", \"Hawaii\", \"Montana\"), role_code (\"Employee\", \"Veterenarian\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | dogs : weight (\"9.8\", \"5.16\", \"1.39\"), gender (\"1\", \"0\"), date_arrived (\"2017-12-22 05:02:02\", \"2017-10-16 20:06:21\", \"2017-09-08 20:10:13\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"George\", \"Troy\", \"Kacey\"), age (\"3\", \"9\", \"2\"), owner_id (5, 5, 5), dog_id (4, 3, 5), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2017-09-19 05:39:09\", \"2008-05-19 15:54:49\", \"2017-09-19 05:39:09\"), date_departed (\"2018-03-25 04:50:22\", \"2018-03-25 06:46:07\", \"2018-03-25 02:47:40\"), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-18 15:12:50\", \"2018-03-08 15:03:00\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640)",
        "ambiguous_queries": [
            "select t1.first_name, t2.name from guardians as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
            "select t1.first_name, t2.name from caretakers as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"Virginia\": [{\"Guardians\": [\"state\"]}, {\"Caretakers\": [\"state\"]}], \"first name\": [{\"Guardians\": [\"first_name\"]}, {\"Caretakers\": [\"first_name\"]}]}"
        },
        "clarification_context": "\"Virginia\" refers to the schema \"guardians\".\"state\", \"first name\" refers to the schema \"guardians\".\"first_name\"",
        "clear_ambiguity": "{\"Virginia\": {\"Guardians\": [\"state\"]}, \"first name\": {\"Guardians\": [\"first_name\"]}}",
        "gold_query": "select t1.first_name, t2.name from guardians as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'"
    },
    {
        "index": 259,
        "db_id": "battle_death",
        "ambig_type": "table",
        "db_file": "table/battle_death/battle_death.sqlite",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "schema_without_content": "ship : lost_in_battle , location , ship_type , tonnage , id , name , disposition_of_ship  | battle : date , name , result , latin_commander , id , bulgarian_commander  | fatality : caused_by_ship_id , injured , killed , id , note  | mortality : caused_by_ship_id , injured , killed , id , note",
        "schema_with_content": "ship : lost_in_battle (4, 7, 5), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), tonnage (\"t\", \"391\", \"225\"), id (7, 7, 6), name (\"HMS Atalanta\", \"Bon Accord\", \"HMS Atalanta\"), disposition_of_ship (\"Captured\", \"Captured\", \"Wrecked\") | battle : date (\"14 April 1205\", \"1235\", \"31 January 1206\"), name (\"Battle of Rusion\", \"Battle of Serres\", \"Battle of Philippopolis\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), latin_commander (\"John of Brienne\", \"Boniface of Montferrat\", \"John of Brienne\"), id (5, 8, 5), bulgarian_commander (\"Ivan Asen II\", \"Ivan Asen II\", \"Ivan Asen II\") | fatality : caused_by_ship_id (2, 3, 2), injured (0, 9, 5), killed (2, 8, 0), id (2, 13, 10), note (\"Gajapati, Odisha\", \"Bastar, Chattisgarh\", \"Bokaro, Jharkhand\") | mortality : caused_by_ship_id (2, 3, 2), injured (0, 9, 5), killed (2, 8, 0), id (2, 13, 10), note (\"Gajapati, Odisha\", \"Bastar, Chattisgarh\", \"Bokaro, Jharkhand\")",
        "ambiguous_queries": [
            "select t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle join fatality as t3 on t2.id = t3.caused_by_ship_id group by t1.id having sum(t3.killed) > 10",
            "select t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle join mortality as t3 on t2.id = t3.caused_by_ship_id group by t1.id having sum(t3.killed) > 10"
        ],
        "gold_ambiguity": {
            "match": "{\"killed\": [{\"fatality\": [\"killed\"]}, {\"mortality\": [\"killed\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"killed\" refers to the schema \"mortality\".\"killed\"",
        "clear_ambiguity": "{\"killed\": {\"mortality\": [\"killed\"]}}",
        "gold_query": "select t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle join mortality as t3 on t2.id = t3.caused_by_ship_id group by t1.id having sum(t3.killed) > 10"
    },
    {
        "index": 260,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "Which model of the car has the minimum horsepower?",
        "schema_without_content": "continents : contid , continent  | model_list : model , modelid , maker  | car_makers : id , country , maker , fullname  | vehicle_names : make \", makeid , model  | cars_data : cylinders , accelerate , id , weight , year , mpg , edispl , horsepower  | countries : continent , countryid , countryname  | car_models : make \", makeid , model",
        "schema_with_content": "continents : contid (5, 1, 3), continent (\"africa\", \"asia\", \"africa\") | model_list : model (\"plymouth\", \"hyundai\", \"citroen\"), modelid (15, 6, 13), maker (16, 19, 20) | car_makers : id (12, 8, 21), country (\"3\", \"7\", \"8\"), maker (\"opel\", \"volvo\", \"volkswagen\"), fullname (\"Chrysler\", \"Kia Motors\", \"Kia Motors\") | vehicle_names : make (\"citroen ds-21 pallas\", \"toyota corona mark ii\", \"chevrolet vega (sw)\"), makeid (90, 314, 372), model (\"mazda\", \"cadillac\", \"cadillac\") | cars_data : cylinders (8, 8, 5), accelerate (15.9, 19.6, 16.1), id (1, 118, 251), weight (3465, 2789, 3193), year (1976, 1975, 1978), mpg (\"40.9\", \"25.8\", \"16.2\"), edispl (80.0, 383.0, 114.0), horsepower (\"61\", \"62\", \"158\") | countries : continent (2, 5, 3), countryid (4, 2, 9), countryname (\"uk\", \"russia\", \"japan\") | car_models : make (\"citroen ds-21 pallas\", \"toyota corona mark ii\", \"chevrolet vega (sw)\"), makeid (90, 314, 372), model (\"mazda\", \"cadillac\", \"cadillac\")",
        "ambiguous_queries": [
            "select t1.model from car_models as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1",
            "select t1.model from vehicle_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"model\": [{\"car_models\": [\"model\"]}, {\"vehicle_names\": [\"model\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"model\" refers to the schema \"vehicle_names\".\"model\"",
        "clear_ambiguity": "{\"model\": {\"vehicle_names\": [\"model\"]}}",
        "gold_query": "select t1.model from vehicle_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1"
    },
    {
        "index": 261,
        "db_id": "course_teach",
        "ambig_type": "table",
        "db_file": "table/course_teach/course_teach.sqlite",
        "question": "What is the name of each teacher and what course they teach?",
        "schema_without_content": "professor : teacher_id , age , name , hometown  | course : course , staring_date , course_id  | instructor : teacher_id , age , name , hometown  | course_arrange : teacher_id , course_id , grade",
        "schema_with_content": "professor : teacher_id (7, 7, 1), age (\"29\", \"32\", \"29\"), name (\"Lucy Wong\", \"Gustaaf Deloor\", \"Kearsley Brown\"), hometown (\"Horwich Urban District\", \"Turton Urban District\", \"Kearsley Urban District\") | course : course (\"Health\", \"Science\", \"Language Arts\"), staring_date (\"15 May\", \"10 May\", \"15 May\"), course_id (3, 9, 5) | instructor : teacher_id (7, 7, 1), age (\"29\", \"32\", \"29\"), name (\"Lucy Wong\", \"Gustaaf Deloor\", \"Kearsley Brown\"), hometown (\"Horwich Urban District\", \"Turton Urban District\", \"Kearsley Urban District\") | course_arrange : teacher_id (5, 6, 5), course_id (3, 10, 4), grade (5, 3, 4)",
        "ambiguous_queries": [
            "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join instructor as t3 on t1.teacher_id = t3.teacher_id",
            "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join professor as t3 on t1.teacher_id = t3.teacher_id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"instructor\": [\"name\"]}, {\"professor\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"professor\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"professor\": [\"name\"]}}",
        "gold_query": "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join professor as t3 on t1.teacher_id = t3.teacher_id"
    },
    {
        "index": 262,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Which continent is Anguilla in?",
        "schema_without_content": "sqlite_sequence : seq , name  | countrylanguage : language , isofficial , percentage , countrycode  | city : countrycode , district , name , population , id  | state : surfacearea , lifeexpectancy , code2 , population , governmentform \", \"Federation\", \"Part of Denmark\", name , capital , indepyear , continent , region , localname \", gnp , gnpold , headofstate , code  | nation : surfacearea , lifeexpectancy , code2 , population , governmentform \", \"Federation\", \"Part of Denmark\", name , capital , indepyear , continent , region , localname \", gnp , gnpold , headofstate , code",
        "schema_with_content": "sqlite_sequence : seq (4079), name (\"city\") | countrylanguage : language (\"Mpongwe\", \"Malenasian Languages\", \"Dagara\"), isofficial (\"T\", \"F\"), percentage (99.6, 11.2, 16.8), countrycode (\"ISL\", \"ESP\", \"BTN\") | city : countrycode (\"LAO\", \"MSR\", \"PCN\"), district (\"Tripoli\", \"al-Zarqa\", \"Central Macedonia\"), name (\"Toledo\", \"Jakarta\", \"Cagliari\"), population (146086, 116200, 96322), id (727, 3064, 3289) | state : surfacearea (464.0, 70273.0, 2780400.0), lifeexpectancy (63.2, 45.2, 80.1), code2 (\"NG\", \"BG\", \"LU\"), population (77000, 444000, 3567000), governmentform (\"Monarchy (Emirate)\", \"Federation\", \"Part of Denmark\"), name (\"Qatar\", \"Zimbabwe\", \"Palau\"), capital (191, 549, 3538), indepyear (1492, 1499, 1990), continent (\"Antarctica\", \"North America\", \"Antarctica\"), region (\"Southern Europe\", \"British Islands\", \"Eastern Asia\"), localname (\"RÃ©publique DÃ©mocratique du Congo\", \"Zambia\", \"Choson Minjujuui InÂ´min Konghwaguk (Bukhan)\"), gnp (4401.0, 1694.0, 903.0), gnpold (119833.0, 22834.0, 430572.0), headofstate (\"Letsie III\", \"Boris Trajkovski\", \"Juan Carlos I\"), code (\"NCL\", \"UZB\", \"ZMB\") | nation : surfacearea (464.0, 70273.0, 2780400.0), lifeexpectancy (63.2, 45.2, 80.1), code2 (\"NG\", \"BG\", \"LU\"), population (77000, 444000, 3567000), governmentform (\"Monarchy (Emirate)\", \"Federation\", \"Part of Denmark\"), name (\"Qatar\", \"Zimbabwe\", \"Palau\"), capital (191, 549, 3538), indepyear (1492, 1499, 1990), continent (\"Antarctica\", \"North America\", \"Antarctica\"), region (\"Southern Europe\", \"British Islands\", \"Eastern Asia\"), localname (\"RÃ©publique DÃ©mocratique du Congo\", \"Zambia\", \"Choson Minjujuui InÂ´min Konghwaguk (Bukhan)\"), gnp (4401.0, 1694.0, 903.0), gnpold (119833.0, 22834.0, 430572.0), headofstate (\"Letsie III\", \"Boris Trajkovski\", \"Juan Carlos I\"), code (\"NCL\", \"UZB\", \"ZMB\")",
        "ambiguous_queries": [
            "select continent from nation where name = 'Anguilla'",
            "select continent from state where name = 'Anguilla'"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"continent\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}"
        },
        "clarification_context": "\"continent\" refers to the schema \"state\".\"name\"",
        "clear_ambiguity": "{\"continent\": {\"state\": [\"name\"]}}",
        "gold_query": "select continent from state where name = 'Anguilla'"
    },
    {
        "index": 263,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "table",
        "db_file": "table/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "schema_without_content": "appraisal : bonus , employee_id , year_awarded  | shop : district , location , manager_name , number_products , name , shop_id  | employee : age , city , employee_id , name  | assessment : bonus , employee_id , year_awarded  | hiring : is_full_time , employee_id , shop_id , start_from",
        "schema_with_content": "appraisal : bonus (2900.0, 2900.0, 3200.0), employee_id (\"2\", \"4\", \"1\"), year_awarded (\"2016\", \"2018\", \"2016\") | shop : district (\"Tehtaan kenttÃ¤\", \"Tehtaan kenttÃ¤\", \"Finnair Stadium\"), location (\"Jakobstad\", \"Lahti\", \"Helsinki\"), manager_name (\"Olli Huttunen\", \"Pekka Lyyski\", \"Antti Muurinen\"), number_products (10770, 5000, 3500), name (\"FC KooTeePee\", \"FC KooTeePee\", \"FC Honka\"), shop_id (8, 4, 3) | employee : age (23, 30, 28), city (\"Leicester\", \"Wasps\", \"Wasps\"), employee_id (6, 8, 4), name (\"Louis Deacon\", \"Louis Deacon\", \"Louis Deacon\") | assessment : bonus (2900.0, 2900.0, 3200.0), employee_id (\"2\", \"4\", \"1\"), year_awarded (\"2016\", \"2018\", \"2016\") | hiring : is_full_time (\"T\", \"F\"), employee_id (4, 4, 7), shop_id (5, 1, 6), start_from (\"2003\", \"2003\", \"2003\")",
        "ambiguous_queries": [
            "select name from employee where employee_id not in (select employee_id from appraisal)",
            "select name from employee where employee_id not in (select employee_id from assessment)"
        ],
        "gold_ambiguity": {
            "match": "{\"employees\": [{\"appraisal\": [\"employee_id\"]}, {\"assessment\": [\"employee_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"employees\" refers to the schema \"appraisal\".\"employee_id\"",
        "clear_ambiguity": "{\"employees\": {\"appraisal\": [\"employee_id\"]}}",
        "gold_query": "select name from employee where employee_id not in (select employee_id from appraisal)"
    },
    {
        "index": 264,
        "db_id": "poker_player",
        "ambig_type": "table",
        "db_file": "table/poker_player/poker_player.sqlite",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "schema_without_content": "person : people_id , nationality , height , name , birth_date  | poker_player : people_id , final_table_made , money_rank , best_finish , earnings , poker_player_id  | individuals : people_id , nationality , height , name , birth_date",
        "schema_with_content": "person : people_id (2, 6, 7), nationality (\"Russia\", \"Bulgaria\"), height (207.0, 193.0, 187.0), name (\"Roman Bragin\", \"Roman Bragin\", \"Roman Bragin\"), birth_date (\"August 16, 1982\", \"August 8, 1986\", \"May 26, 1986\") | poker_player : people_id (1, 7, 7), final_table_made (42.0, 26.0, 42.0), money_rank (58.0, 141.0, 154.0), best_finish (1.0, 2.0, 3.0), earnings (189233.0, 189233.0, 189233.0), poker_player_id (1, 1, 2) | individuals : people_id (2, 6, 7), nationality (\"Russia\", \"Bulgaria\"), height (207.0, 193.0, 187.0), name (\"Roman Bragin\", \"Roman Bragin\", \"Roman Bragin\"), birth_date (\"August 16, 1982\", \"August 8, 1986\", \"May 26, 1986\")",
        "ambiguous_queries": [
            "select t1.name from person as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
            "select t1.name from individuals as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"person\": [\"name\"]}, {\"individuals\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"person\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"person\": [\"name\"]}}",
        "gold_query": "select t1.name from person as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc"
    },
    {
        "index": 265,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "What are the first names of all players, and their average rankings?",
        "schema_without_content": "matches : year , tourney_date , tourney_id , round , match_num , loser_ioc , best_of , winner_ioc , tourney_level , loser_hand , loser_entry , loser_rank_points , minutes , score  2-6 6-3\", \"6-3 7-6\", \"6-0 7-5 \", loser_rank , surface , winner_rank_points , winner_name , winner_id , winner_rank , loser_age , draw_size , loser_id , winner_entry , winner_hand , loser_seed , winner_age , winner_ht , winner_seed , loser_name , loser_ht , tourney_name  | athletes : last_name , player_id , first_name , birth_date , country_code , hand  | competitors : last_name , player_id , first_name , birth_date , country_code , hand  | rankings : ranking , ranking_points , player_id , tours , ranking_date",
        "schema_with_content": "matches : year (2013, 2016, 2017), tourney_date (20160606, 20170807, 20160222), tourney_id (\"2017-M020\", \"2016-M035\", \"2017-580\"), round (\"RR\", \"SF\", \"QF\"), match_num (260, 221, 299), loser_ioc (\"JPN\", \"CZE\", \"AUS\"), best_of (3), winner_ioc (\"NED\", \"AUS\", \"NED\"), tourney_level (\"P\", \"W\", \"P\"), loser_hand (\"R\", \"L\"), loser_entry (\"\"), loser_rank_points (1245, 2865, 3116), minutes (173, 63, 57), score (\"7-6(5) 2-6 6-3\", \"6-3 7-6(3)\", \"6-0 7-5 \"), loser_rank (25, 12, 14), surface (\"Hard\", \"Clay\", \"Grass\"), winner_rank_points (5450, 1900, 2320), winner_name (\"Victoria Azarenka\", \"Carla Suarez Navarro\", \"Barbora Zahlavova Strycova\"), winner_id (201311, 201585, 201619), winner_rank (31, 20, 43), loser_age (25.3798767967, 27.0472279261, 28.689938398400002), draw_size (12, 12, 8), loser_id (202470, 201458, 201421), winner_entry (\"\"), winner_hand (\"R\", \"L\"), loser_seed (8, 31, 20), winner_age (21.6837782341, 26.8911704312, 36.755646817199995), winner_ht (177, 176, 177), winner_seed (24, 30, 27), loser_name (\"Samantha Stosur\", \"Julia Goerges\", \"Johanna Larsson\"), loser_ht (173, 178, 177), tourney_name (\"Toronto\", \"Miami\", \"Auckland\") | athletes : last_name (\"Yamanaka\", \"Haslinghuis\", \"Probst\"), player_id (216058, 213880, 209438), first_name (\"Yamini\", \"Jindra\", \"Ekaterina\"), birth_date (19871225, 19760410, 19820214), country_code (\"MAS\", \"PER\", \"GUA\"), hand (\"\", \"L\", \"U\") | competitors : last_name (\"Yamanaka\", \"Haslinghuis\", \"Probst\"), player_id (216058, 213880, 209438), first_name (\"Yamini\", \"Jindra\", \"Ekaterina\"), birth_date (19871225, 19760410, 19820214), country_code (\"MAS\", \"PER\", \"GUA\"), hand (\"\", \"L\", \"U\") | rankings : ranking (460, 1051, 123), ranking_points (5805, 5055, 4960), player_id (210338, 202882, 206250), tours (22, 31, 19), ranking_date (20080512, 19890717, 20060731)",
        "ambiguous_queries": [
            "select avg(ranking), t1.first_name from athletes as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
            "select avg(ranking), t1.first_name from competitors as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"athletes\": [\"first_name\"]}, {\"competitors\": [\"first_name\"]}], \"rankings\": [{\"athletes\": [\"ranking\"]}, {\"competitors\": [\"ranking\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"competitors\".\"first_name\", \"rankings\" refers to the schema \"competitors\".\"ranking\"",
        "clear_ambiguity": "{\"first name\": {\"competitors\": [\"first_name\"]}, \"rankings\": {\"competitors\": [\"ranking\"]}}",
        "gold_query": "select avg(ranking), t1.first_name from competitors as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name"
    },
    {
        "index": 266,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "How many car models are produced by each maker? List the count and the maker full name.",
        "schema_without_content": "car_names : make \", \"subaru\", \"ford country\", makeid , model  | auto_brands : maker , fullname , country , id  | cars_data : id , cylinders , year , mpg , horsepower , weight , edispl , accelerate  | manufacturers : maker , fullname , country , id  | countries : countryname , countryid , continent  | model_list : maker , model , modelid  | continents : continent , contid",
        "schema_with_content": "car_names : make (\"amc rebel sst (sw)\", \"subaru\", \"ford country\"), makeid (268, 154, 223), model (\"mercedes-benz\", \"ford\", \"amc\") | auto_brands : maker (\"chrysler\", \"saab\", \"honda\"), fullname (\"General Motors\", \"Citroen\", \"Daimler Benz\"), country (\"6\", \"8\", \"3\"), id (7, 13, 6) | cars_data : id (125, 330, 232), cylinders (6, 8, 8), year (1974, 1972, 1970), mpg (\"23.8\", \"19.8\", \"19.9\"), horsepower (\"67\", \"63\", \"116\"), weight (1995, 1945, 2123), edispl (429.0, 113.0, 121.0), accelerate (17.6, 18.6, 21.7) | manufacturers : maker (\"chrysler\", \"saab\", \"honda\"), fullname (\"General Motors\", \"Citroen\", \"Daimler Benz\"), country (\"6\", \"8\", \"3\"), id (7, 13, 6) | countries : countryname (\"germany\", \"new zealand\", \"egypt\"), countryid (15, 2, 1), continent (3, 2, 2) | model_list : maker (13, 15, 1), model (\"pontiac\", \"nissan\", \"volkswagen\"), modelid (9, 10, 22) | continents : continent (\"asia\", \"australia\", \"australia\"), contid (3, 1, 5)",
        "ambiguous_queries": [
            "select count(*), t2.fullname, t2.id from model_list as t1 join manufacturers as t2 on t1.maker = t2.id group by t2.id",
            "select count(*), t2.fullname, t2.id from model_list as t1 join auto_brands as t2 on t1.maker = t2.id group by t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"auto_brands\": [\"fullname\"]}, {\"manufacturers\": [\"fullname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"manufacturers\".\"fullname\"",
        "clear_ambiguity": "{\"name\": {\"manufacturers\": [\"fullname\"]}}",
        "gold_query": "select count(*), t2.fullname, t2.id from model_list as t1 join manufacturers as t2 on t1.maker = t2.id group by t2.id"
    },
    {
        "index": 267,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "schema_without_content": "show : if_first_show , show_id , result , performance_id , attendance  | maestro : conductor_id , nationality , name , year_of_work , age  | director : conductor_id , nationality , name , year_of_work , age  | performance : type , performance_id , official_ratings_ , date , share , weekly_rank , orchestra_id  | orchestra : record_company , year_of_founded , conductor_id , major_record_format , orchestra , orchestra_id",
        "schema_with_content": "show : if_first_show (\"Glebe Park\", \"St. Mirren Park\", \"Hampden Park\"), show_id (5, 5, 5), result (\"T\", \"F\"), performance_id (2, 2, 3), attendance (1026.0, 1925.0, 2431.0) | maestro : conductor_id (6, 8, 7), nationality (\"USA\", \"UK\", \"France\"), name (\"Valeri Gergiev\", \"Colin Davis\", \"Paul Jorgensen\"), year_of_work (16, 10, 20), age (42, 41, 47) | director : conductor_id (6, 8, 7), nationality (\"USA\", \"UK\", \"France\"), name (\"Valeri Gergiev\", \"Colin Davis\", \"Paul Jorgensen\"), year_of_work (16, 10, 20), age (42, 41, 47) | performance : type (\"Semi-final 1\", \"Live final\", \"Auditions 1\"), performance_id (6, 3, 3), official_ratings_(millions) (9.29, 5.2, 9.28), date (\"11 June\", \"12 June\", \"16 June\"), share (\"40.9%\", \"34%\", \"28.0%\"), weekly_rank (\"13\", \"11\", \"11\"), orchestra_id (6, 7, 1) | orchestra : record_company (\"Columbia Masterworks\", \"Mercury Records\", \"Delos Records\"), year_of_founded (2003.0, 2003.0, 2002.0), conductor_id (11, 2, 4), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra (\"Columbia Symphony Orchestra\", \"Philharmonia Orchestra\", \"Montreal Symphony Orchestra\"), orchestra_id (10, 9, 7)",
        "ambiguous_queries": [
            "select t1.name from director as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
            "select t1.name from maestro as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008"
        ],
        "gold_ambiguity": {
            "match": "{\"founded\": [{\"director\": [\"year_of_founded\"]}, {\"maestro\": [\"year_of_founded\"]}], \"name\": [{\"director\": [\"name\"]}, {\"maestro\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"founded\" refers to the schema \"maestro\".\"year_of_founded\", \"name\" refers to the schema \"maestro\".\"name\"",
        "clear_ambiguity": "{\"founded\": {\"maestro\": [\"year_of_founded\"]}, \"name\": {\"maestro\": [\"name\"]}}",
        "gold_query": "select t1.name from maestro as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008"
    },
    {
        "index": 268,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "schema_without_content": "owners : email_address , state , first_name , street , zip_code , home_phone 997-7627\", \"01802479758\", \"747-5094x8134\", cell_number 9217952551\", city , owner_id , last_name  | Pooches : owner_id , weight , gender , date_departed , breed_code , name , size_code , date_adopted , age , date_of_birth , dog_id , date_arrived , abandoned_yn  | treatments : treatment_type_code , cost_of_treatment , treatment_id , date_of_treatment , professional_id , dog_id  | Canines : owner_id , weight , gender , date_departed , breed_code , name , size_code , date_adopted , age , date_of_birth , dog_id , date_arrived , abandoned_yn  | charges : charge_type , charge_amount , charge_id  | professionals : professional_id , zip_code , city , last_name , cell_number , home_phone , state , street , email_address , role_code , first_name  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | breeds : breed_name , breed_code",
        "schema_with_content": "owners : email_address (\"edythe62@example.org\", \"fschoen@example.net\", \"edythe62@example.org\"), state (\"Maryland\", \"SouthDakota\", \"Virginia\"), first_name (\"Orlando\", \"Adelle\", \"Rolando\"), street (\"1858 Jan Park\", \"89011 Kertzmann Spring Suite 642\", \"57382 Yost Ridges\"), zip_code (\"61019\", \"45244\", \"86010\"), home_phone (\"(058)997-7627\", \"01802479758\", \"(094)747-5094x8134\"), cell_number (\"559.874.3011x989\", \"762.589.6117x1328\", \"+70(4)9217952551\"), city (\"East Maribelbury\", \"South Daisyfurt\", \"Port Zackery\"), owner_id (14, 1, 5), last_name (\"Fisher\", \"Mertz\", \"Schmitt\") | Pooches : owner_id (3, 6, 2), weight (\"8.16\", \"4.01\", \"9.8\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 02:47:40\", \"2018-03-25 04:42:14\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Merritt\", \"Houston\", \"Troy\"), size_code (\"LGE\", \"MED\", \"SML\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-18 15:12:50\", \"2018-03-18 15:12:50\"), age (\"8\", \"2\", \"2\"), date_of_birth (\"2010-11-11 07:11:53\", \"2009-04-12 06:02:48\", \"2015-02-26 21:31:22\"), dog_id (9, 15, 1), date_arrived (\"2017-05-06 08:03:52\", \"2017-04-20 00:58:55\", \"2017-04-15 09:25:31\"), abandoned_yn (\"1\", \"0\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (313, 407, 514), treatment_id (9, 11, 11), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-13 12:22:58\", \"2018-03-10 11:45:58\"), professional_id (6, 9, 5), dog_id (12, 10, 4) | Canines : owner_id (3, 6, 2), weight (\"8.16\", \"4.01\", \"9.8\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 02:47:40\", \"2018-03-25 04:42:14\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Merritt\", \"Houston\", \"Troy\"), size_code (\"LGE\", \"MED\", \"SML\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-18 15:12:50\", \"2018-03-18 15:12:50\"), age (\"8\", \"2\", \"2\"), date_of_birth (\"2010-11-11 07:11:53\", \"2009-04-12 06:02:48\", \"2015-02-26 21:31:22\"), dog_id (9, 15, 1), date_arrived (\"2017-05-06 08:03:52\", \"2017-04-20 00:58:55\", \"2017-04-15 09:25:31\"), abandoned_yn (\"1\", \"0\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | professionals : professional_id (13, 13, 10), zip_code (\"02281\", \"43129\", \"34041\"), city (\"North Adelberttown\", \"McLaughlinfort\", \"Borisside\"), last_name (\"Frami\", \"O'Reilly\", \"Frami\"), cell_number (\"011.193.9081x3186\", \"139-321-7313\", \"139-321-7313\"), home_phone (\"022.529.0550x1319\", \"320-508-6023\", \"891.475.2256\"), state (\"Montana\", \"SouthCarolina\", \"Wyoming\"), street (\"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), email_address (\"jacynthe.mclaughlin@example.net\", \"uboehm@example.org\", \"uboehm@example.org\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Monte\", \"Olaf\", \"Domenica\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\")",
        "ambiguous_queries": [
            "select distinct t1.date_arrived, t1.date_departed from canines as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
            "select distinct t1.date_arrived, t1.date_departed from pooches as t1 join treatments as t2 on t1.dog_id = t2.dog_id"
        ],
        "gold_ambiguity": {
            "match": "{\"arriving date\": [{\"Canines\": [\"date_arrived\"]}, {\"Pooches\": [\"date_arrived\"]}], \"departing date\": [{\"Canines\": [\"date_departed\"]}, {\"Pooches\": [\"date_departed\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"arriving date\" refers to the schema \"pooches\".\"date_arrived\", \"departing date\" refers to the schema \"pooches\".\"date_departed\"",
        "clear_ambiguity": "{\"arriving date\": {\"Pooches\": [\"date_arrived\"]}, \"departing date\": {\"Pooches\": [\"date_departed\"]}}",
        "gold_query": "select distinct t1.date_arrived, t1.date_departed from pooches as t1 join treatments as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "index": 269,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What is the continent name which Anguilla belongs to?",
        "schema_without_content": "city : population , countrycode , id , district , name  | state : gnp , governmentform \", \"Dependent Territory of the US\", \"Monarchy \", lifeexpectancy , name , region , surfacearea , code2 , indepyear , localname , headofstate , capital , code , gnpold , population , continent  | sqlite_sequence : name , seq  | nation : gnp , governmentform \", \"Dependent Territory of the US\", \"Monarchy \", lifeexpectancy , name , region , surfacearea , code2 , indepyear , localname , headofstate , capital , code , gnpold , population , continent  | countrylanguage : isofficial , countrycode , percentage , language",
        "schema_with_content": "city : population (22000, 409100, 470866), countrycode (\"BHS\", \"ANT\", \"PAN\"), id (1727, 2412, 541), district (\"Plymouth\", \"Atlantique\", \"Tabora\"), name (\"Jalna\", \"Yamato\", \"Zenica\") | state : gnp (1197.0, 9174.0, 20831.0), governmentform (\"Monarchy (Sultanate)\", \"Dependent Territory of the US\", \"Monarchy (Sultanate)\"), lifeexpectancy (81.1, 68.0, 59.8), name (\"Cyprus\", \"Gambia\", \"Maldives\"), region (\"Western Europe\", \"Melanesia\", \"Northern Africa\"), surfacearea (130000.0, 36.0, 112088.0), code2 (\"CL\", \"KE\", \"NR\"), indepyear (1990, 1825, 1976), localname (\"Honduras\", \"Sierra Leone\", \"Nouvelle-CalÃ©donie\"), headofstate (\"Arthur N. R. Robinson\", \"Ali Abdallah Salih\", \"Jorge Batlle IbÃ¡Ã±ez\"), capital (766, 187, 910), code (\"NIU\", \"LUX\", \"GIN\"), gnpold (102133.0, 33514.0, 18898.0), population (38653600, 2024000, 51654000), continent (\"Oceania\", \"Asia\", \"Europe\") | sqlite_sequence : name (\"city\"), seq (4079) | nation : gnp (1197.0, 9174.0, 20831.0), governmentform (\"Monarchy (Sultanate)\", \"Dependent Territory of the US\", \"Monarchy (Sultanate)\"), lifeexpectancy (81.1, 68.0, 59.8), name (\"Cyprus\", \"Gambia\", \"Maldives\"), region (\"Western Europe\", \"Melanesia\", \"Northern Africa\"), surfacearea (130000.0, 36.0, 112088.0), code2 (\"CL\", \"KE\", \"NR\"), indepyear (1990, 1825, 1976), localname (\"Honduras\", \"Sierra Leone\", \"Nouvelle-CalÃ©donie\"), headofstate (\"Arthur N. R. Robinson\", \"Ali Abdallah Salih\", \"Jorge Batlle IbÃ¡Ã±ez\"), capital (766, 187, 910), code (\"NIU\", \"LUX\", \"GIN\"), gnpold (102133.0, 33514.0, 18898.0), population (38653600, 2024000, 51654000), continent (\"Oceania\", \"Asia\", \"Europe\") | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"GNQ\", \"BRA\", \"KEN\"), percentage (7.6, 2.6, 59.2), language (\"Man\", \"Man\", \"Bali\")",
        "ambiguous_queries": [
            "select continent from nation where name = 'Anguilla'",
            "select continent from state where name = 'Anguilla'"
        ],
        "gold_ambiguity": {
            "match": "{\"continent name\": [{\"nation\": [\"continent\"]}, {\"state\": [\"continent\"]}], \"Anguilla\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"continent name\" refers to the schema \"nation\".\"continent\", \"Anguilla\" refers to the schema \"nation\".\"name\"",
        "clear_ambiguity": "{\"continent name\": {\"nation\": [\"continent\"]}, \"Anguilla\": {\"nation\": [\"name\"]}}",
        "gold_query": "select continent from nation where name = 'Anguilla'"
    },
    {
        "index": 270,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "schema_without_content": "Pupils : other_student_details , first_name , student_id , cell_mobile_number , middle_name , permanent_address_id , date_first_registered , date_left , ssn , current_address_id , last_name , email_address  | student_enrolment : other_details , degree_program_id , student_id , student_enrolment_id , semester_id  | transcript_contents : transcript_id , student_course_id  | courses : course_name , course_description , other_details , course_id  | sections : section_name , section_description , other_details , section_id , course_id  | student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | degree_programs : degree_summary_description , other_details , degree_program_id , degree_summary_name , department_id  | departments : department_name , department_id , department_description , other_details  | semesters : semester_description , other_details , semester_name , semester_id  | addresses : line_3 , city , state_province_county , line_2 , address_id , line_1 , other_address_details , country , zip_postcode  | transcripts : transcript_id , transcript_date , other_details  | Learners : other_student_details , first_name , student_id , cell_mobile_number , middle_name , permanent_address_id , date_first_registered , date_left , ssn , current_address_id , last_name , email_address",
        "schema_with_content": "Pupils : other_student_details (\"autem\", \"facilis\", \"rerum\"), first_name (\"Warren\", \"Timmothy\", \"Deon\"), student_id (4, 15, 9), cell_mobile_number (\"877.549.9067x8723\", \"09700166582\", \"07661787471\"), middle_name (\"Mona\", \"Brooklyn\", \"Cleve\"), permanent_address_id (5, 5, 14), date_first_registered (\"1982-02-14 08:46:35\", \"2007-08-29 23:25:41\", \"1989-05-24 23:31:29\"), date_left (\"1999-08-24 00:07:10\", \"2013-10-05 17:41:28\", \"1990-09-01 05:03:27\"), ssn (\"39\", \"141072406\", \"39\"), current_address_id (9, 12, 10), last_name (\"Gleichner\", \"Ward\", \"Weimann\"), email_address (\"dell43@example.net\", \"jillian26@example.net\", \"johns.unique@example.net\") | student_enrolment : other_details (None), degree_program_id (9, 10, 2), student_id (14, 6, 14), student_enrolment_id (14, 13, 10), semester_id (4, 6, 9) | transcript_contents : transcript_id (9, 13, 6), student_course_id (45105806, 8, 96) | courses : course_name (\"math\", \"ai\", \"ds\"), course_description (\"v\", \"c\", \"v\"), other_details (None), course_id (4, 9, 5) | sections : section_name (\"u\", \"g\", \"p\"), section_description (\"doloremque\", \"voluptas\", \"nesciunt\"), other_details (None), section_id (5, 12, 6), course_id (2, 12, 9) | student_enrolment_courses : student_course_id (83814225, 438800, 1), student_enrolment_id (13, 6, 14), course_id (10, 4, 8) | degree_programs : degree_summary_description (\"voluptas\", \"unde\", \"esse\"), other_details (None), degree_program_id (4, 10, 12), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (7, 4, 15) | departments : department_name (\"geography\", \"law\", \"geography\"), department_id (8, 9, 15), department_description (\"non\", \"error\", \"in\"), other_details (None) | semesters : semester_description (\"w\", \"f\", \"q\"), other_details (None), semester_name (\"spring 2018\", \"spring 2012\", \"spring 2015\"), semester_id (15, 1, 1) | addresses : line_3 (None), city (\"Michelleburgh\", \"Michelleburgh\", \"Lake Laishafurt\"), state_province_county (\"Wyoming\", \"Kentucky\", \"SouthDakota\"), line_2 (\"Suite 383\", \"Apt. 406\", \"Suite 830\"), address_id (1, 8, 8), line_1 (\"186 Evan Motorway Apt. 409\", \"202 Hessel Views Apt. 468\", \"492 Wilkinson Route\"), other_address_details (None), country (\"Norfolk Island\", \"Saudi Arabia\", \"Kyrgyz Republic\"), zip_postcode (\"839\", \"386\", \"590\") | transcripts : transcript_id (15, 12, 6), transcript_date (\"2002-09-24 06:11:49\", \"2002-09-24 06:11:49\", \"1988-04-30 01:19:47\"), other_details (None) | Learners : other_student_details (\"autem\", \"facilis\", \"rerum\"), first_name (\"Warren\", \"Timmothy\", \"Deon\"), student_id (4, 15, 9), cell_mobile_number (\"877.549.9067x8723\", \"09700166582\", \"07661787471\"), middle_name (\"Mona\", \"Brooklyn\", \"Cleve\"), permanent_address_id (5, 5, 14), date_first_registered (\"1982-02-14 08:46:35\", \"2007-08-29 23:25:41\", \"1989-05-24 23:31:29\"), date_left (\"1999-08-24 00:07:10\", \"2013-10-05 17:41:28\", \"1990-09-01 05:03:27\"), ssn (\"39\", \"141072406\", \"39\"), current_address_id (9, 12, 10), last_name (\"Gleichner\", \"Ward\", \"Weimann\"), email_address (\"dell43@example.net\", \"jillian26@example.net\", \"johns.unique@example.net\")",
        "ambiguous_queries": [
            "select t1.student_id, t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from learners as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
            "select t1.student_id, t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from pupils as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"Learners\": [\"first_name\"]}, {\"Pupils\": [\"first_name\"]}], \"last name\": [{\"Learners\": [\"last_name\"]}, {\"Pupils\": [\"last_name\"]}], \"middle name\": [{\"Learners\": [\"middle_name\"]}, {\"Pupils\": [\"middle_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"pupils\".\"first_name\", \"last name\" refers to the schema \"pupils\".\"last_name\", \"middle name\" refers to the schema \"pupils\".\"middle_name\"",
        "clear_ambiguity": "{\"first name\": {\"Pupils\": [\"first_name\"]}, \"last name\": {\"Pupils\": [\"last_name\"]}, \"middle name\": {\"Pupils\": [\"middle_name\"]}}",
        "gold_query": "select t1.student_id, t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from pupils as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1"
    },
    {
        "index": 271,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "schema_without_content": "vehicle_data : edispl , mpg , weight , cylinders , id , horsepower , accelerate , year  | auto_data : edispl , mpg , weight , cylinders , id , horsepower , accelerate , year  | car_names : makeid , model , make  | continents : contid , continent  | model_list : modelid , maker , model  | countries : continent , countryname , countryid  | car_makers : id , fullname , maker , country",
        "schema_with_content": "vehicle_data : edispl (112.0, 104.0, 78.0), mpg (\"28.4\", \"31.8\", \"33.8\"), weight (2070, 3781, 3570), cylinders (5, 4, 3), id (394, 64, 406), horsepower (\"100\", \"48\", \"120\"), accelerate (20.4, 11.1, 11.6), year (1975, 1981, 1972) | auto_data : edispl (112.0, 104.0, 78.0), mpg (\"28.4\", \"31.8\", \"33.8\"), weight (2070, 3781, 3570), cylinders (5, 4, 3), id (394, 64, 406), horsepower (\"100\", \"48\", \"120\"), accelerate (20.4, 11.1, 11.6), year (1975, 1981, 1972) | car_names : makeid (255, 316, 170), model (\"datsun\", \"mazda\", \"hi\"), make (\"fiat 124 tc\", \"subaru\", \"chevy s-10\") | continents : contid (2, 4, 5), continent (\"australia\", \"europe\", \"africa\") | model_list : modelid (9, 28, 19), maker (2, 17, 9), model (\"mercedes\", \"oldsmobile\", \"honda\") | countries : continent (5, 4, 1), countryname (\"korea\", \"new zealand\", \"italy\"), countryid (9, 9, 1) | car_makers : id (15, 2, 13), fullname (\"Citroen\", \"Volkswagen\", \"Triumph\"), maker (\"daimler benz\", \"subaru\", \"fiat\"), country (\"4\", \"7\", \"6\")",
        "ambiguous_queries": [
            "select t2.horsepower, t1.make from car_names as t1 join vehicle_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1",
            "select t2.horsepower, t1.make from car_names as t1 join auto_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"cylinders\": [{\"auto_data\": [\"cylinders\"]}, {\"vehicle_data\": [\"cylinders\"]}], \"horsepower\": [{\"auto_data\": [\"horsepower\"]}, {\"vehicle_data\": [\"horsepower\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cylinders\" refers to the schema \"vehicle_data\".\"cylinders\", \"horsepower\" refers to the schema \"vehicle_data\".\"horsepower\"",
        "clear_ambiguity": "{\"cylinders\": {\"vehicle_data\": [\"cylinders\"]}, \"horsepower\": {\"vehicle_data\": [\"horsepower\"]}}",
        "gold_query": "select t2.horsepower, t1.make from car_names as t1 join vehicle_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1"
    },
    {
        "index": 272,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "schema_without_content": "sizes : size_description , size_code  | Caretakers : state , last_name , home_phone 747-5094x8134\", \"916.976.9480x13851\", \"563-0260x454\", city , email_address , owner_id , street , first_name , zip_code , cell_number 4323592985\", \"478.978.0729\" | treatment_types : treatment_type_code , treatment_type_description  | Guardians : state , last_name , home_phone 747-5094x8134\", \"916.976.9480x13851\", \"563-0260x454\", city , email_address , owner_id , street , first_name , zip_code , cell_number 4323592985\", \"478.978.0729\" | charges : charge_id , charge_type , charge_amount  | professionals : role_code , street , zip_code , email_address , state , last_name , home_phone 304-4499x59146\", \"971.048.3763x9404\", cell_number , first_name , professional_id , city  | breeds : breed_name , breed_code  | treatments : professional_id , treatment_id , date_of_treatment , treatment_type_code , dog_id , cost_of_treatment  | dogs : date_departed , date_adopted , dog_id , age , owner_id , breed_code , size_code , abandoned_yn , name , weight , date_arrived , date_of_birth , gender",
        "schema_with_content": "sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | Caretakers : state (\"Florida\", \"Mississippi\", \"Virginia\"), last_name (\"Fisher\", \"Hamill\", \"Nicolas\"), home_phone (\"(094)747-5094x8134\", \"916.976.9480x13851\", \"(799)563-0260x454\"), city (\"New Margaretteborough\", \"South Afton\", \"East Hillardberg\"), email_address (\"fschoen@example.net\", \"ymaggio@example.com\", \"kturner@example.net\"), owner_id (14, 10, 14), street (\"1858 Jan Park\", \"0647 Hintz Village Apt. 024\", \"0647 Hintz Village Apt. 024\"), first_name (\"Orlando\", \"Heather\", \"Melisa\"), zip_code (\"22693\", \"25609\", \"22731\"), cell_number (\"1-626-264-7659x1697\", \"+00(2)4323592985\", \"478.978.0729\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | Guardians : state (\"Florida\", \"Mississippi\", \"Virginia\"), last_name (\"Fisher\", \"Hamill\", \"Nicolas\"), home_phone (\"(094)747-5094x8134\", \"916.976.9480x13851\", \"(799)563-0260x454\"), city (\"New Margaretteborough\", \"South Afton\", \"East Hillardberg\"), email_address (\"fschoen@example.net\", \"ymaggio@example.com\", \"kturner@example.net\"), owner_id (14, 10, 14), street (\"1858 Jan Park\", \"0647 Hintz Village Apt. 024\", \"0647 Hintz Village Apt. 024\"), first_name (\"Orlando\", \"Heather\", \"Melisa\"), zip_code (\"22693\", \"25609\", \"22731\"), cell_number (\"1-626-264-7659x1697\", \"+00(2)4323592985\", \"478.978.0729\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | professionals : role_code (\"Employee\", \"Veterenarian\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), zip_code (\"06646\", \"34041\", \"34041\"), email_address (\"uboehm@example.org\", \"uboehm@example.org\", \"delphine29@example.com\"), state (\"Indiana\", \"Indiana\", \"SouthCarolina\"), last_name (\"Tillman\", \"Kshlerin\", \"Jacobs\"), home_phone (\"325-155-0801x7005\", \"(920)304-4499x59146\", \"971.048.3763x9404\"), cell_number (\"139-321-7313\", \"889-940-2676\", \"328.842.3792\"), first_name (\"Jayson\", \"Vernice\", \"Monte\"), professional_id (15, 14, 13), city (\"Jaceton\", \"Kirastad\", \"New Maryjane\") | breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | treatments : professional_id (7, 4, 6), treatment_id (9, 6, 14), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-04 20:33:43\", \"2018-03-08 05:26:23\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (12, 1, 15), cost_of_treatment (313, 514, 668) | dogs : date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 13:07:04\", \"2018-03-25 04:42:14\"), date_adopted (\"2018-02-27 11:54:35\", \"2018-03-08 15:03:00\", \"2018-03-08 15:03:00\"), dog_id (13, 12, 11), age (\"6\", \"2\", \"2\"), owner_id (8, 13, 7), breed_code (\"ESK\", \"BUL\", \"HUS\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), name (\"Houston\", \"Bessie\", \"George\"), weight (\"3.52\", \"1.72\", \"8.16\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-05-06 08:03:52\", \"2017-10-16 20:06:21\"), date_of_birth (\"2008-05-19 15:54:49\", \"2012-05-03 21:42:25\", \"2015-02-26 21:31:22\"), gender (\"1\", \"0\")",
        "ambiguous_queries": [
            "select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join guardians as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
            "select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join caretakers as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"Caretakers\": [\"first_name\"]}, {\"Guardians\": [\"first_name\"]}], \"last name\": [{\"Caretakers\": [\"last_name\"]}, {\"Guardians\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"caretakers\".\"first_name\", \"last name\" refers to the schema \"caretakers\".\"last_name\"",
        "clear_ambiguity": "{\"first name\": {\"Caretakers\": [\"first_name\"]}, \"last name\": {\"Caretakers\": [\"last_name\"]}}",
        "gold_query": "select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join caretakers as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1"
    },
    {
        "index": 273,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "schema_without_content": "treatments : treatment_id , treatment_type_code , cost_of_treatment , professional_id , date_of_treatment , dog_id  | professionals : professional_id , zip_code , cell_number , home_phone , street , last_name , email_address , role_code , city , first_name , state  | treatment_types : treatment_type_description , treatment_type_code  | owners : zip_code , state , home_phone 563-0260x454\", \"085.557.0379x84348\", \"066.264.7885\", cell_number , last_name , owner_id , street , email_address , first_name , city  | Canines : date_of_birth , breed_code , age , date_arrived , owner_id , name , date_adopted , gender , dog_id , date_departed , weight , abandoned_yn , size_code  | breeds : breed_name , breed_code  | Pooches : date_of_birth , breed_code , age , date_arrived , owner_id , name , date_adopted , gender , dog_id , date_departed , weight , abandoned_yn , size_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_code , size_description",
        "schema_with_content": "treatments : treatment_id (9, 5, 9), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (668, 147, 139), professional_id (4, 7, 14), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-02-28 17:09:43\", \"2018-03-04 20:33:43\"), dog_id (15, 12, 15) | professionals : professional_id (5, 15, 1), zip_code (\"41215\", \"02281\", \"98844\"), cell_number (\"499-434-0215x1628\", \"011.193.9081x3186\", \"328.842.3792\"), home_phone (\"1-609-566-2752x25197\", \"1-609-566-2752x25197\", \"1-609-566-2752x25197\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), last_name (\"Frami\", \"O'Reilly\", \"O'Reilly\"), email_address (\"schneider.kathryne@example.org\", \"uboehm@example.org\", \"cole.margarita@example.org\"), role_code (\"Employee\", \"Veterenarian\"), city (\"East Ila\", \"Kirastad\", \"Juddton\"), first_name (\"Taryn\", \"Ericka\", \"Velva\"), state (\"Wyoming\", \"NorthCarolina\", \"Wyoming\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : zip_code (\"93165\", \"93165\", \"36871\"), state (\"Virginia\", \"Wisconsin\", \"Washington\"), home_phone (\"(799)563-0260x454\", \"085.557.0379x84348\", \"066.264.7885\"), cell_number (\"1-626-264-7659x1697\", \"559.874.3011x989\", \"559.874.3011x989\"), last_name (\"Nicolas\", \"DuBuque\", \"DuBuque\"), owner_id (14, 1, 13), street (\"2635 Caitlyn Plains\", \"68118 Daniel Row\", \"89011 Kertzmann Spring Suite 642\"), email_address (\"margaretta.runte@example.net\", \"pearlie18@example.com\", \"fschoen@example.net\"), first_name (\"Lorenz\", \"Emelie\", \"Lorenz\"), city (\"Port Reannamouth\", \"Beerton\", \"Port Zackery\") | Canines : date_of_birth (\"2012-01-27 05:11:53\", \"2009-04-12 06:02:48\", \"2009-04-12 06:02:48\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"2\", \"1\", \"5\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-12-29 06:08:26\", \"2017-12-22 05:02:02\"), owner_id (8, 2, 2), name (\"Troy\", \"Hipolito\", \"Jeffrey\"), date_adopted (\"2018-02-27 00:27:57\", \"2018-03-21 10:41:18\", \"2018-03-13 12:47:15\"), gender (\"1\", \"0\"), dog_id (6, 10, 1), date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 02:11:32\", \"2018-03-25 05:07:47\"), weight (\"5.16\", \"2.18\", \"3.52\"), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\") | breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | Pooches : date_of_birth (\"2012-01-27 05:11:53\", \"2009-04-12 06:02:48\", \"2009-04-12 06:02:48\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"2\", \"1\", \"5\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-12-29 06:08:26\", \"2017-12-22 05:02:02\"), owner_id (8, 2, 2), name (\"Troy\", \"Hipolito\", \"Jeffrey\"), date_adopted (\"2018-02-27 00:27:57\", \"2018-03-21 10:41:18\", \"2018-03-13 12:47:15\"), gender (\"1\", \"0\"), dog_id (6, 10, 1), date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 02:11:32\", \"2018-03-25 05:07:47\"), weight (\"5.16\", \"2.18\", \"3.52\"), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\")",
        "ambiguous_queries": [
            "select avg(age) from canines where dog_id in (select dog_id from treatments)",
            "select avg(age) from pooches where dog_id in (select dog_id from treatments)"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"Canines\": [\"age\"]}, {\"Pooches\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"pooches\".\"age\"",
        "clear_ambiguity": "{\"age\": {\"Pooches\": [\"age\"]}}",
        "gold_query": "select avg(age) from pooches where dog_id in (select dog_id from treatments)"
    },
    {
        "index": 274,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "schema_without_content": "Companions : petid , pettype , weight , pet_age  | has_pet : petid , stuid  | student : city_code , sex , stuid , fname , advisor , age , lname , major  | Animals : petid , pettype , weight , pet_age",
        "schema_with_content": "Companions : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | student : city_code (\"LOS\", \"HOU\", \"WAS\"), sex (\"F\", \"M\"), stuid (1009, 1017, 1019), fname (\"Derek\", \"Michael\", \"Arthur\"), advisor (2192, 7271, 9172), age (21, 20, 16), lname (\"Andreou\", \"Shieber\", \"Brown\"), major (600, 100, 550) | Animals : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1)",
        "ambiguous_queries": [
            "select count(*) from animals where weight > 10",
            "select count(*) from companions where weight > 10"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"Animals\": [\"weight\"]}, {\"Companions\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"companions\".\"weight\"",
        "clear_ambiguity": "{\"weight\": {\"Companions\": [\"weight\"]}}",
        "gold_query": "select count(*) from companions where weight > 10"
    },
    {
        "index": 275,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "table",
        "db_file": "table/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "schema_without_content": "templates : template_type_code , date_effective_from , template_id , template_details , date_effective_to , version_number  | paragraphs : other_details , paragraph_text , document_id , paragraph_id  | Records : other_details , template_id , document_description , document_id , document_name  | Files : other_details , template_id , document_description , document_id , document_name  | ref_template_types : template_type_description , template_type_code",
        "schema_with_content": "templates : template_type_code (\"PP\", \"PP\", \"BK\"), date_effective_from (\"2008-08-01 13:57:26\", \"1979-12-24 10:28:16\", \"2005-02-20 00:31:34\"), template_id (15, 14, 25), template_details (\"\"), date_effective_to (\"1974-09-14 06:34:39\", \"1989-11-24 19:06:06\", \"1973-01-12 14:13:34\"), version_number (0, 3, 1) | paragraphs : other_details (None), paragraph_text (\"Fiji\", \"Japan\", \"Palestinian Territory\"), document_id (16514113, 385906526, 651512), paragraph_id (9946, 510442723, 765713812) | Records : other_details (None), template_id (6, 7, 7), document_description (\"h\", \"b\", \"b\"), document_id (3830, 50123, 82), document_name (\"Summer Show\", \"Data base\", \"About Korea\") | Files : other_details (None), template_id (6, 7, 7), document_description (\"h\", \"b\", \"b\"), document_id (3830, 50123, 82), document_name (\"Summer Show\", \"Data base\", \"About Korea\") | ref_template_types : template_type_description (\"CV\", \"Presentation\", \"CV\"), template_type_code (\"BK\", \"PP\", \"PP\")",
        "ambiguous_queries": [
            "select document_id, template_id, document_description from files where document_name = 'Robbin CV'",
            "select document_id, template_id, document_description from records where document_name = 'Robbin CV'"
        ],
        "gold_ambiguity": {
            "match": "{\"description\": [{\"Files\": [\"document_description\"]}, {\"Records\": [\"document_description\"]}], \"document id\": [{\"Files\": [\"document_id\"]}, {\"Records\": [\"document_id\"]}], \"template id\": [{\"Files\": [\"template_id\"]}, {\"Records\": [\"template_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"description\" refers to the schema \"files\".\"document_description\", \"document id\" refers to the schema \"files\".\"document_id\", \"template id\" refers to the schema \"files\".\"template_id\"",
        "clear_ambiguity": "{\"description\": {\"Files\": [\"document_description\"]}, \"document id\": {\"Files\": [\"document_id\"]}, \"template id\": {\"Files\": [\"template_id\"]}}",
        "gold_query": "select document_id, template_id, document_description from files where document_name = 'Robbin CV'"
    },
    {
        "index": 276,
        "db_id": "singer",
        "ambig_type": "table",
        "db_file": "table/singer/singer.sqlite",
        "question": "What are the names of the singers who are not French citizens?",
        "schema_without_content": "musician : citizenship , birth_year , name , singer_id , net_worth_millions  | vocalist : citizenship , birth_year , name , singer_id , net_worth_millions  | song : highest_position , sales , song_id , singer_id , title \", \"Left Outside Alone\", \"Yeah\"",
        "schema_with_content": "musician : citizenship (\"Chile\", \"United States\", \"Australia\"), birth_year (1962.0, 1948.0, 1953.0), name (\"Gina Rinehart\", \"Iris Fontbona\", \"Jacqueline Mars\"), singer_id (2, 4, 2), net_worth_millions (17.4, 14.3, 30.0) | vocalist : citizenship (\"Chile\", \"United States\", \"Australia\"), birth_year (1962.0, 1948.0, 1953.0), name (\"Gina Rinehart\", \"Iris Fontbona\", \"Jacqueline Mars\"), singer_id (2, 4, 2), net_worth_millions (17.4, 14.3, 30.0) | song : highest_position (1.0, 3.0), sales (292000.0, 335000.0, 261000.0), song_id (3, 8, 7), singer_id (1, 7, 4), title (\"F**k It (I Don't Want You Back)\", \"Left Outside Alone\", \"Yeah\")",
        "ambiguous_queries": [
            "select name from vocalist where citizenship != 'France'",
            "select name from musician where citizenship != 'France'"
        ],
        "gold_ambiguity": {
            "match": "{\"citizens\": [{\"musician\": [\"citizenship\"]}, {\"vocalist\": [\"citizenship\"]}], \"names\": [{\"musician\": [\"name\"]}, {\"vocalist\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"citizens\" refers to the schema \"musician\".\"citizenship\", \"names\" refers to the schema \"musician\".\"name\"",
        "clear_ambiguity": "{\"citizens\": {\"musician\": [\"citizenship\"]}, \"names\": {\"musician\": [\"name\"]}}",
        "gold_query": "select name from musician where citizenship != 'France'"
    },
    {
        "index": 277,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "Which distinct car models are the produced after 1980?",
        "schema_without_content": "continents : continent , contid  | model_list : maker , model , modelid  | auto_data : horsepower , edispl , mpg , year , id , accelerate , weight , cylinders  | car_makers : maker , id , country , fullname  | car_names : model , makeid , make  | vehicle_data : horsepower , edispl , mpg , year , id , accelerate , weight , cylinders  | countries : countryname , countryid , continent",
        "schema_with_content": "continents : continent (\"europe\", \"asia\", \"america\"), contid (1, 5, 2) | model_list : maker (2, 11, 17), model (\"subaru\", \"peugeot\", \"oldsmobile\"), modelid (22, 25, 7) | auto_data : horsepower (\"208\", \"122\", \"148\"), edispl (135.0, 122.0, 111.0), mpg (\"34.5\", \"9\", \"31.3\"), year (1980, 1976, 1981), id (75, 310, 383), accelerate (18.6, 17.4, 21.5), weight (2300, 1915, 2678), cylinders (8, 3, 8) | car_makers : maker (\"triumph\", \"gm\", \"volkswagen\"), id (17, 9, 7), country (\"4\", \"3\", \"5\"), fullname (\"Saab\", \"Opel\", \"Renault\") | car_names : model (\"oldsmobile\", \"ford\", \"volvo\"), makeid (32, 46, 351), make (\"buick century\", \"chevy s-10\", \"plymouth duster\") | vehicle_data : horsepower (\"208\", \"122\", \"148\"), edispl (135.0, 122.0, 111.0), mpg (\"34.5\", \"9\", \"31.3\"), year (1980, 1976, 1981), id (75, 310, 383), accelerate (18.6, 17.4, 21.5), weight (2300, 1915, 2678), cylinders (8, 3, 8) | countries : countryname (\"new zealand\", \"korea\", \"korea\"), countryid (9, 1, 4), continent (4, 3, 1)",
        "ambiguous_queries": [
            "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join vehicle_data as t3 on t2.makeid = t3.id where t3.year > 1980",
            "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join auto_data as t3 on t2.makeid = t3.id where t3.year > 1980"
        ],
        "gold_ambiguity": {
            "match": "{\"1980\": [{\"auto_data\": [\"year\"]}, {\"vehicle_data\": [\"year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"1980\" refers to the schema \"vehicle_data\".\"year\"",
        "clear_ambiguity": "{\"1980\": {\"vehicle_data\": [\"year\"]}}",
        "gold_query": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join vehicle_data as t3 on t2.makeid = t3.id where t3.year > 1980"
    },
    {
        "index": 278,
        "db_id": "singer",
        "ambig_type": "table",
        "db_file": "table/singer/singer.sqlite",
        "question": "List the name of singers that do not have any song.",
        "schema_without_content": "track : title \", \"F**k It \", highest_position , song_id , sales , singer_id  | composition : title \", \"F**k It \", highest_position , song_id , sales , singer_id  | singer : name , citizenship , singer_id , birth_year , net_worth_millions",
        "schema_with_content": "track : title (\"Cha Cha Slide\", \"F**k It (I Don't Want You Back)\", \"F**k It (I Don't Want You Back)\"), highest_position (1.0, 3.0), song_id (7, 4, 6), sales (335000.0, 351421.0, 351421.0), singer_id (4, 5, 4) | composition : title (\"Cha Cha Slide\", \"F**k It (I Don't Want You Back)\", \"F**k It (I Don't Want You Back)\"), highest_position (1.0, 3.0), song_id (7, 4, 6), sales (335000.0, 351421.0, 351421.0), singer_id (4, 5, 4) | singer : name (\"Liliane Bettencourt\", \"Jacqueline Mars\", \"Alice Walton\"), citizenship (\"Australia\", \"Chile\", \"Chile\"), singer_id (6, 3, 8), birth_year (1948.0, 1949.0, 1942.0), net_worth_millions (26.3, 12.7, 17.0)",
        "ambiguous_queries": [
            "select name from singer where singer_id not in (select singer_id from track)",
            "select name from singer where singer_id not in (select singer_id from composition)"
        ],
        "gold_ambiguity": {
            "match": "{\"song\": [{\"composition\": [\"name\"]}, {\"track\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"song\" refers to the schema \"track\".\"name\"",
        "clear_ambiguity": "{\"song\": {\"track\": [\"name\"]}}",
        "gold_query": "select name from singer where singer_id not in (select singer_id from track)"
    },
    {
        "index": 279,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "schema_without_content": "vehicle_names : model , make , makeid  | continents : contid , continent  | cars_data : horsepower , weight , edispl , year , mpg , accelerate , cylinders , id  | car_makers : maker , fullname , country , id  | model_list : model , maker , modelid  | countries : countryname , countryid , continent  | car_models : model , make , makeid",
        "schema_with_content": "vehicle_names : model (\"citroen\", \"mazda\", \"capri\"), make (\"datsun 210 mpg\", \"dodge coronet brougham\", \"datsun 310\"), makeid (405, 154, 215) | continents : contid (4, 2, 1), continent (\"asia\", \"europe\", \"europe\") | cars_data : horsepower (\"139\", \"74\", \"142\"), weight (2226, 3445, 3353), edispl (107.0, 305.0, 258.0), year (1980, 1976, 1976), mpg (\"34.4\", \"41.5\", \"34.5\"), accelerate (11.2, 20.5, 18.2), cylinders (5, 5, 3), id (15, 305, 312) | car_makers : maker (\"ford\", \"peugeaut\", \"gm\"), fullname (\"Ford Motor Company\", \"General Motors\", \"Triumph\"), country (\"4\", \"5\", \"1\"), id (13, 13, 7) | model_list : model (\"saab\", \"volvo\", \"cadillac\"), maker (16, 10, 15), modelid (2, 4, 32) | countries : countryname (\"france\", \"mexico\", \"france\"), countryid (5, 2, 12), continent (5, 4, 2) | car_models : model (\"citroen\", \"mazda\", \"capri\"), make (\"datsun 210 mpg\", \"dodge coronet brougham\", \"datsun 310\"), makeid (405, 154, 215)",
        "ambiguous_queries": [
            "select t2.make, t1.year from cars_data as t1 join car_models as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)",
            "select t2.make, t1.year from cars_data as t1 join vehicle_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)"
        ],
        "gold_ambiguity": {
            "match": "{\"maker\": [{\"car_models\": [\"make\"]}, {\"vehicle_names\": [\"make\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maker\" refers to the schema \"car_models\".\"make\"",
        "clear_ambiguity": "{\"maker\": {\"car_models\": [\"make\"]}}",
        "gold_query": "select t2.make, t1.year from cars_data as t1 join car_models as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data)"
    },
    {
        "index": 280,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "Which model has the most version(make) of cars?",
        "schema_without_content": "continents : continent , contid  | vehicle_names : makeid , model , make \", \"datsun 1200\" | car_models : makeid , model , make \", \"datsun 1200\" | countries : countryname , countryid , continent  | cars_data : horsepower , cylinders , edispl , year , weight , id , accelerate , mpg  | model_list : maker , modelid , model  | car_makers : id , fullname , maker , country",
        "schema_with_content": "continents : continent (\"australia\", \"australia\", \"australia\"), contid (3, 2, 5) | vehicle_names : makeid (379, 71, 343), model (\"buick\", \"chrysler\", \" volkswagen\"), make (\"volkswagen scirocco\", \"dodge colt (sw)\", \"datsun 1200\") | car_models : makeid (379, 71, 343), model (\"buick\", \"chrysler\", \" volkswagen\"), make (\"volkswagen scirocco\", \"dodge colt (sw)\", \"datsun 1200\") | countries : countryname (\"nigeria\", \"egypt\", \"japan\"), countryid (7, 13, 1), continent (5, 4, 1) | cars_data : horsepower (\"120\", \"76\", \"67\"), cylinders (6, 4, 6), edispl (307.0, 101.0, 171.0), year (1975, 1971, 1978), weight (4997, 2255, 3140), id (277, 366, 403), accelerate (19.9, 14.2, 14.0), mpg (\"10\", \"29.9\", \"34.1\") | model_list : maker (5, 23, 18), modelid (23, 32, 11), model (\"citroen\", \"mercedes-benz\", \"scion\") | car_makers : id (6, 9, 9), fullname (\"Saab\", \"Hyundai\", \"Fiat\"), maker (\"mazda\", \"opel\", \"renault\"), country (\"4\", \"6\", \"1\")",
        "ambiguous_queries": [
            "select model from car_models group by model order by count(*) desc limit 1",
            "select model from vehicle_names group by model order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"model\": [{\"car_models\": [\"model\"]}, {\"vehicle_names\": [\"model\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"model\" refers to the schema \"vehicle_names\".\"model\"",
        "clear_ambiguity": "{\"model\": {\"vehicle_names\": [\"model\"]}}",
        "gold_query": "select model from vehicle_names group by model order by count(*) desc limit 1"
    },
    {
        "index": 281,
        "db_id": "concert_singer",
        "ambig_type": "table",
        "db_file": "table/concert_singer/concert_singer.sqlite",
        "question": "For each stadium, how many concerts play there?",
        "schema_without_content": "singer_in_concert : singer_id , concert_id  | concert : concert_name , year , stadium_id , concert_id , theme  | venue : lowest , stadium_id , average , location , name , highest , capacity  | arena : lowest , stadium_id , average , location , name , highest , capacity  | singer : singer_id , is_male , age , song_release_year , country , name , song_name",
        "schema_with_content": "singer_in_concert : singer_id (\"5\", \"5\", \"4\"), concert_id (3, 4, 1) | concert : concert_name (\"Week 1\", \"Auditions\", \"Home Visits\"), year (\"2014\", \"2015\"), stadium_id (\"2\", \"9\", \"10\"), concert_id (1, 2, 2), theme (\"Bleeding Love\", \"Free choice 2\", \"Party All Night\") | venue : lowest (315, 404, 1294), stadium_id (6, 4, 5), average (1477, 637, 2106), location (\"Stirling Albion\", \"Queen's Park\", \"Brechin City\"), name (\"Recreation Park\", \"Gayfield Park\", \"Gayfield Park\"), highest (1125, 921, 837), capacity (10104, 52500, 4000) | arena : lowest (315, 404, 1294), stadium_id (6, 4, 5), average (1477, 637, 2106), location (\"Stirling Albion\", \"Queen's Park\", \"Brechin City\"), name (\"Recreation Park\", \"Gayfield Park\", \"Gayfield Park\"), highest (1125, 921, 837), capacity (10104, 52500, 4000) | singer : singer_id (4, 2, 4), is_male (\"F\", \"T\"), age (32, 32, 29), song_release_year (\"2013\", \"2016\", \"2008\"), country (\"Netherlands\", \"United States\", \"France\"), name (\"Justin Brown\", \"Joe Sharp\", \"Joe Sharp\"), song_name (\"Gentleman\", \"You\", \"Dangerous\")",
        "ambiguous_queries": [
            "select t2.name, count(*) from concert as t1 join arena as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
            "select t2.name, count(*) from concert as t1 join venue as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id"
        ],
        "gold_ambiguity": {
            "match": "{\"stadium\": [{\"arena\": [\"name\"]}, {\"venue\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"stadium\" refers to the schema \"venue\".\"name\"",
        "clear_ambiguity": "{\"stadium\": {\"venue\": [\"name\"]}}",
        "gold_query": "select t2.name, count(*) from concert as t1 join venue as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id"
    },
    {
        "index": 282,
        "db_id": "singer",
        "ambig_type": "table",
        "db_file": "table/singer/singer.sqlite",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "schema_without_content": "singer : singer_id , net_worth_millions , name , birth_year , citizenship  | track : title \", \"F**k It \", \"All This Time\", sales , song_id , singer_id , highest_position  | composition : title \", \"F**k It \", \"All This Time\", sales , song_id , singer_id , highest_position",
        "schema_with_content": "singer : singer_id (7, 5, 1), net_worth_millions (17.0, 26.3, 17.8), name (\"Jacqueline Mars\", \"Gina Rinehart\", \"Alice Walton\"), birth_year (1949.0, 1944.0, 1940.0), citizenship (\"United States\", \"Germany\", \"Chile\") | track : title (\"F**k It (I Don't Want You Back)\", \"F**k It (I Don't Want You Back)\", \"All This Time\"), sales (292000.0, 1094000.0, 552407.0), song_id (7, 8, 3), singer_id (1, 1, 4), highest_position (1.0, 3.0) | composition : title (\"F**k It (I Don't Want You Back)\", \"F**k It (I Don't Want You Back)\", \"All This Time\"), sales (292000.0, 1094000.0, 552407.0), song_id (7, 8, 3), singer_id (1, 1, 4), highest_position (1.0, 3.0)",
        "ambiguous_queries": [
            "select distinct t1.name from singer as t1 join track as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
            "select distinct t1.name from singer as t1 join composition as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000"
        ],
        "gold_ambiguity": {
            "match": "{\"sales\": [{\"composition\": [\"sales\"]}, {\"track\": [\"sales\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"sales\" refers to the schema \"track\".\"sales\"",
        "clear_ambiguity": "{\"sales\": {\"track\": [\"sales\"]}}",
        "gold_query": "select distinct t1.name from singer as t1 join track as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000"
    },
    {
        "index": 283,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "table",
        "db_file": "table/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Sort employee names by their age in ascending order.",
        "schema_without_content": "worker : age , city , employee_id , name  | staff : age , city , employee_id , name  | hiring : employee_id , is_full_time , shop_id , start_from  | shop : district , location , manager_name , number_products , name , shop_id  | evaluation : bonus , year_awarded , employee_id",
        "schema_with_content": "worker : age (40, 30, 32), city (\"Leicester\", \"Sale\", \"Bath\"), employee_id (2, 8, 3), name (\"Louis Deacon\", \"Jason Hobson\", \"Mark Regan\") | staff : age (40, 30, 32), city (\"Leicester\", \"Sale\", \"Bath\"), employee_id (2, 8, 3), name (\"Louis Deacon\", \"Jason Hobson\", \"Mark Regan\") | hiring : employee_id (5, 5, 4), is_full_time (\"T\", \"F\"), shop_id (5, 1, 2), start_from (\"2003\", \"2013\", \"2012\") | shop : district (\"Tapiolan Urheilupuisto\", \"Tapiolan Urheilupuisto\", \"Tehtaan kenttÃ¤\"), location (\"Turku\", \"Espoo\", \"Jakobstad\"), manager_name (\"Olli Huttunen\", \"Antti Muurinen\", \"Ilkka MÃ¤kelÃ¤\"), number_products (6000, 10000, 3516), name (\"FC Lahti\", \"IFK Mariehamn\", \"IFK Mariehamn\"), shop_id (8, 9, 2) | evaluation : bonus (3200.0, 2900.0, 4000.0), year_awarded (\"2018\", \"2017\", \"2016\"), employee_id (\"10\", \"1\", \"2\")",
        "ambiguous_queries": [
            "select name from staff order by age",
            "select name from worker order by age"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"age\": [{\"staff\": [\"age\"]}, {\"worker\": [\"age\"]}], \"names\": [{\"staff\": [\"name\"]}, {\"worker\": [\"name\"]}]}"
        },
        "clarification_context": "\"age\" refers to the schema \"worker\".\"age\", \"names\" refers to the schema \"worker\".\"name\"",
        "clear_ambiguity": "{\"age\": {\"worker\": [\"age\"]}, \"names\": {\"worker\": [\"name\"]}}",
        "gold_query": "select name from worker order by age"
    },
    {
        "index": 284,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "What are the ids of the students who do not own cats as pets?",
        "schema_without_content": "has_pet : stuid , petid  | enrollee : advisor , major , lname , city_code , fname , stuid , sex , age  | learner : advisor , major , lname , city_code , fname , stuid , sex , age  | pets : petid , weight , pettype , pet_age",
        "schema_with_content": "has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | enrollee : advisor (8722, 1121, 2192), major (520, 50, 550), lname (\"Leighton\", \"Kim\", \"Lee\"), city_code (\"DAL\", \"HKG\", \"YYZ\"), fname (\"George\", \"Jun\", \"Andy\"), stuid (1031, 1010, 1024), sex (\"F\", \"M\"), age (22, 21, 17) | learner : advisor (8722, 1121, 2192), major (520, 50, 550), lname (\"Leighton\", \"Kim\", \"Lee\"), city_code (\"DAL\", \"HKG\", \"YYZ\"), fname (\"George\", \"Jun\", \"Andy\"), stuid (1031, 1010, 1024), sex (\"F\", \"M\"), age (22, 21, 17) | pets : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1)",
        "ambiguous_queries": [
            "select stuid from enrollee except select t1.stuid from enrollee as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'",
            "select stuid from learner except select t1.stuid from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'"
        ],
        "gold_ambiguity": {
            "match": "{\"ids\": [{\"enrollee\": [\"stuid\"]}, {\"learner\": [\"stuid\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ids\" refers to the schema \"learner\".\"stuid\"",
        "clear_ambiguity": "{\"ids\": {\"learner\": [\"stuid\"]}}",
        "gold_query": "select stuid from learner except select t1.stuid from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'"
    },
    {
        "index": 285,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "How many airlines are from USA?",
        "schema_without_content": "flights : airline , destairport , flightno , sourceairport  | airports : airportcode , countryabbrev , city , airportname , country  | carriers : country , airline , uid , abbreviation  | aviation_companies : country , airline , uid , abbreviation",
        "schema_with_content": "flights : airline (1, 8, 7), destairport (\" APG\", \" AHF\", \" ANI\"), flightno (403, 1010, 88), sourceairport (\" AKK\", \" ABR\", \" TDW\") | airports : airportcode (\"APN\", \"RLI\", \"AOS\"), countryabbrev (\"US \", \"US\"), city (\"Alton \", \"Amityville \", \"Albuquerque \"), airportname (\"Alitak SPB \", \"Anniston Metropolitan \", \"Anita Bay \"), country (\"United States \") | carriers : country (\"USA\"), airline (\"Frontier Airlines\", \"Continental Airlines\", \"Southwest Airlines\"), uid (5, 12, 9), abbreviation (\"Allegiant\", \"UAL\", \"AirTran\") | aviation_companies : country (\"USA\"), airline (\"Frontier Airlines\", \"Continental Airlines\", \"Southwest Airlines\"), uid (5, 12, 9), abbreviation (\"Allegiant\", \"UAL\", \"AirTran\")",
        "ambiguous_queries": [
            "select count(*) from carriers where country = 'USA'",
            "select count(*) from aviation_companies where country = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"USA\": [{\"aviation_companies\": [\"country\"]}, {\"carriers\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"USA\" refers to the schema \"carriers\".\"country\"",
        "clear_ambiguity": "{\"USA\": {\"carriers\": [\"country\"]}}",
        "gold_query": "select count(*) from carriers where country = 'USA'"
    },
    {
        "index": 286,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "List the maximum weight and type for each type of pet.",
        "schema_without_content": "Animals : pet_age , pettype , weight , petid  | has_pet : stuid , petid  | student : fname , age , lname , advisor , stuid , major , city_code , sex  | Companions : pet_age , pettype , weight , petid",
        "schema_with_content": "Animals : pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | student : fname (\"Jun\", \"William\", \"Steven\"), age (17, 16, 18), lname (\"Woods\", \"Tai\", \"Han\"), advisor (7712, 7792, 8723), stuid (1008, 1008, 1024), major (550, 100, 600), city_code (\"SFO\", \"PIT\", \"BAL\"), sex (\"F\", \"M\") | Companions : pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select max(weight), pettype from animals group by pettype",
            "select max(weight), pettype from companions group by pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"type\": [{\"Animals\": [\"pettype\"]}, {\"Companions\": [\"pettype\"]}], \"weight\": [{\"Animals\": [\"weight\"]}, {\"Companions\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type\" refers to the schema \"animals\".\"pettype\", \"weight\" refers to the schema \"animals\".\"weight\"",
        "clear_ambiguity": "{\"type\": {\"Animals\": [\"pettype\"]}, \"weight\": {\"Animals\": [\"weight\"]}}",
        "gold_query": "select max(weight), pettype from animals group by pettype"
    },
    {
        "index": 287,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "schema_without_content": "countries : countryid , continent , countryname  | auto_data : accelerate , edispl , cylinders , mpg , horsepower , id , weight , year  | car_names : model , make , makeid  | model_list : model , maker , modelid  | continents : contid , continent  | car_makers : id , maker , country , fullname  | vehicle_data : accelerate , edispl , cylinders , mpg , horsepower , id , weight , year",
        "schema_with_content": "countries : countryid (12, 15, 1), continent (2, 4, 4), countryname (\"japan\", \"france\", \"italy\") | auto_data : accelerate (15.6, 15.1, 18.7), edispl (307.0, 455.0, 231.0), cylinders (4, 6, 8), mpg (\"27.2\", \"28.4\", \"38.1\"), horsepower (\"90\", \"132\", \"113\"), id (261, 230, 180), weight (1985, 3205, 3439), year (1977, 1972, 1981) | car_names : model (\"triumph\", \"honda\", \"audi\"), make (\"chevrolet bel air\", \"chevrolet caprice classic\", \"cadillac seville\"), makeid (289, 302, 262) | model_list : model (\"capri\", \"subaru\", \"triumph\"), maker (3, 6, 18), modelid (16, 3, 21) | continents : contid (4, 1, 4), continent (\"europe\", \"australia\", \"asia\") | car_makers : id (6, 1, 13), maker (\"honda\", \"hyundai\", \"bmw\"), country (\"2\", \"1\", \"2\"), fullname (\"American Motor Company\", \"Fiat\", \"Honda\") | vehicle_data : accelerate (15.6, 15.1, 18.7), edispl (307.0, 455.0, 231.0), cylinders (4, 6, 8), mpg (\"27.2\", \"28.4\", \"38.1\"), horsepower (\"90\", \"132\", \"113\"), id (261, 230, 180), weight (1985, 3205, 3439), year (1977, 1972, 1981)",
        "ambiguous_queries": [
            "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join vehicle_data as t4 on t3.makeid = t4.id where t4.year = '1970'",
            "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join auto_data as t4 on t3.makeid = t4.id where t4.year = '1970'"
        ],
        "gold_ambiguity": {
            "match": "{\"year\": [{\"auto_data\": [\"year\"]}, {\"vehicle_data\": [\"year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year\" refers to the schema \"auto_data\".\"year\"",
        "clear_ambiguity": "{\"year\": {\"auto_data\": [\"year\"]}}",
        "gold_query": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join auto_data as t4 on t3.makeid = t4.id where t4.year = '1970'"
    },
    {
        "index": 288,
        "db_id": "network_1",
        "ambig_type": "table",
        "db_file": "table/network_1/network_1.sqlite",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "schema_without_content": "Acquaintance : student_id , friend_id  | highschooler : id , name , grade  | Connection : student_id , friend_id  | likes : liked_id , student_id",
        "schema_with_content": "Acquaintance : student_id (1468, 1709, 1934), friend_id (1101, 1661, 1468) | highschooler : id (1641, 1304, 1247), name (\"Gabriel\", \"Jordan\", \"Logan\"), grade (10, 11, 12) | Connection : student_id (1468, 1709, 1934), friend_id (1101, 1661, 1468) | likes : liked_id (1304, 1101, 1689), student_id (1782, 1641, 1316)",
        "ambiguous_queries": [
            "select t2.name from connection as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id",
            "select t2.name from acquaintance as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"Connection\": [\"name\"]}, {\"Acquaintance\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"acquaintance\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"Acquaintance\": [\"name\"]}}",
        "gold_query": "select t2.name from acquaintance as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id"
    },
    {
        "index": 289,
        "db_id": "concert_singer",
        "ambig_type": "table",
        "db_file": "table/concert_singer/concert_singer.sqlite",
        "question": "How many concerts occurred in 2014 or 2015?",
        "schema_without_content": "singer : name , is_male , song_name , country , age , singer_id , song_release_year  | singer_in_concert : concert_id , singer_id  | performance : concert_name , year , theme , concert_id , stadium_id  | gig : concert_name , year , theme , concert_id , stadium_id  | stadium : capacity , highest , stadium_id , lowest , location , average , name",
        "schema_with_content": "singer : name (\"Rose White\", \"John Nizinik\", \"Rose White\"), is_male (\"F\", \"T\"), song_name (\"Hey Oh\", \"Gentleman\", \"Love\"), country (\"Netherlands\", \"United States\", \"France\"), age (43, 25, 43), singer_id (3, 2, 6), song_release_year (\"2013\", \"2014\", \"2014\") | singer_in_concert : concert_id (2, 6, 4), singer_id (\"4\", \"2\", \"2\") | performance : concert_name (\"Super bootcamp\", \"Home Visits\", \"Week 1\"), year (\"2014\", \"2015\"), theme (\"Wide Awake\", \"Bleeding Love\", \"Free choice\"), concert_id (6, 1, 2), stadium_id (\"2\", \"1\", \"1\") | gig : concert_name (\"Super bootcamp\", \"Home Visits\", \"Week 1\"), year (\"2014\", \"2015\"), theme (\"Wide Awake\", \"Bleeding Love\", \"Free choice\"), concert_id (6, 1, 2), stadium_id (\"2\", \"1\", \"1\") | stadium : capacity (3960, 4125, 11998), highest (837, 1763, 921), stadium_id (5, 6, 7), lowest (1294, 1057, 411), location (\"Alloa Athletic\", \"Ayr United\", \"Queen's Park\"), average (552, 637, 730), name (\"Balmoor\", \"Bayview Stadium\", \"Glebe Park\")",
        "ambiguous_queries": [
            "select count(*) from gig where year = 2014 or year = 2015",
            "select count(*) from performance where year = 2014 or year = 2015"
        ],
        "gold_ambiguity": {
            "match": "{\"2014 or 2015\": [{\"gig\": [\"year\"]}, {\"performance\": [\"year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"2014 or 2015\" refers to the schema \"gig\".\"year\"",
        "clear_ambiguity": "{\"2014 or 2015\": {\"gig\": [\"year\"]}}",
        "gold_query": "select count(*) from gig where year = 2014 or year = 2015"
    },
    {
        "index": 290,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "schema_without_content": "airports : airportname , airportcode , countryabbrev , country , city  | aviation_companies : country , uid , abbreviation , airline  | flights : airline , flightno , destairport , sourceairport  | carriers : country , uid , abbreviation , airline",
        "schema_with_content": "airports : airportname (\"Amchitka \", \"Albuquerque International \", \"Andrews \"), airportcode (\"ABL\", \"ASX\", \"ADR\"), countryabbrev (\"US \", \"US\"), country (\"United States \"), city (\"Abilene \", \"Amchitka \", \"Ainsworth \") | aviation_companies : country (\"USA\"), uid (4, 1, 8), abbreviation (\"AirTran\", \"JetBlue\", \"Continental\"), airline (\"Delta Airlines\", \"United Airlines\", \"Allegiant Air\") | flights : airline (7, 7, 8), flightno (126, 1357, 1037), destairport (\" ALZ\", \" ALM\", \" MMI\"), sourceairport (\" TDW\", \" AID\", \" AEX\") | carriers : country (\"USA\"), uid (4, 1, 8), abbreviation (\"AirTran\", \"JetBlue\", \"Continental\"), airline (\"Delta Airlines\", \"United Airlines\", \"Allegiant Air\")",
        "ambiguous_queries": [
            "select t1.airline from carriers as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG' intersect select t1.airline from carriers as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO'",
            "select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG' intersect select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO'"
        ],
        "gold_ambiguity": {
            "match": "{\"airlines\": [{\"carriers\": [\"airline\"]}, {\"aviation_companies\": [\"airline\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airlines\" refers to the schema \"aviation_companies\".\"airline\"",
        "clear_ambiguity": "{\"airlines\": {\"aviation_companies\": [\"airline\"]}}",
        "gold_query": "select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG' intersect select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO'"
    },
    {
        "index": 291,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "How many pets have a greater weight than 10?",
        "schema_without_content": "Companions : pettype , pet_age , petid , weight  | Animals : pettype , pet_age , petid , weight  | student : age , city_code , stuid , lname , advisor , sex , fname , major  | has_pet : stuid , petid",
        "schema_with_content": "Companions : pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3) | Animals : pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3) | student : age (27, 22, 17), city_code (\"ROC\", \"BAL\", \"PIT\"), stuid (1020, 1009, 1026), lname (\"Kim\", \"Andreou\", \"Pang\"), advisor (8721, 8721, 2311), sex (\"F\", \"M\"), fname (\"Jandy\", \"George\", \"William\"), major (600, 100, 100) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select count(*) from animals where weight > 10",
            "select count(*) from companions where weight > 10"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"Animals\": [\"weight\"]}, {\"Companions\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"animals\".\"weight\"",
        "clear_ambiguity": "{\"weight\": {\"Animals\": [\"weight\"]}}",
        "gold_query": "select count(*) from animals where weight > 10"
    },
    {
        "index": 292,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "schema_without_content": "Pupils : middle_name , student_id , other_student_details , date_left , ssn , email_address , date_first_registered , first_name , cell_mobile_number 153-1469x1733\", \"171-642-5684\", current_address_id , last_name , permanent_address_id  | addresses : country , line_1 , zip_postcode , city , address_id , state_province_county , line_2 , other_address_details , line_3  | Learners : middle_name , student_id , other_student_details , date_left , ssn , email_address , date_first_registered , first_name , cell_mobile_number 153-1469x1733\", \"171-642-5684\", current_address_id , last_name , permanent_address_id  | transcript_contents : student_course_id , transcript_id  | courses : course_id , other_details , course_name , course_description  | degree_programs : degree_summary_name , degree_program_id , other_details , department_id , degree_summary_description  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_date , transcript_id  | student_enrolment : semester_id , degree_program_id , student_id , student_enrolment_id , other_details  | semesters : semester_name , other_details , semester_description , semester_id  | sections : course_id , section_id , other_details , section_name , section_description  | departments : other_details , department_description , department_name , department_id",
        "schema_with_content": "Pupils : middle_name (\"Violet\", \"Aisha\", \"Mossie\"), student_id (15, 13, 2), other_student_details (\"voluptatem\", \"nesciunt\", \"quia\"), date_left (\"2013-10-05 17:41:28\", \"2007-08-02 04:12:58\", \"2013-10-05 17:41:28\"), ssn (\"668\", \"34458427\", \"6274274\"), email_address (\"jhuel@example.com\", \"dell43@example.net\", \"jillian26@example.net\"), date_first_registered (\"2018-03-13 09:56:22\", \"1971-02-05 07:28:23\", \"1971-02-05 07:28:23\"), first_name (\"Gregg\", \"Helga\", \"Delaney\"), cell_mobile_number (\"877.549.9067x8723\", \"(982)153-1469x1733\", \"171-642-5684\"), current_address_id (15, 7, 1), last_name (\"Ward\", \"Weimann\", \"Huel\"), permanent_address_id (15, 4, 9) | addresses : country (\"Samoa\", \"Angola\", \"Norfolk Island\"), line_1 (\"9283 Schulist Falls Apt. 037\", \"0643 Muller Vista\", \"0643 Muller Vista\"), zip_postcode (\"839\", \"400\", \"638\"), city (\"Michelleburgh\", \"South Palma\", \"Mariliehaven\"), address_id (2, 1, 13), state_province_county (\"Arkansas\", \"Kentucky\", \"Idaho\"), line_2 (\"Suite 865\", \"Suite 865\", \"Suite 865\"), other_address_details (None), line_3 (None) | Learners : middle_name (\"Violet\", \"Aisha\", \"Mossie\"), student_id (15, 13, 2), other_student_details (\"voluptatem\", \"nesciunt\", \"quia\"), date_left (\"2013-10-05 17:41:28\", \"2007-08-02 04:12:58\", \"2013-10-05 17:41:28\"), ssn (\"668\", \"34458427\", \"6274274\"), email_address (\"jhuel@example.com\", \"dell43@example.net\", \"jillian26@example.net\"), date_first_registered (\"2018-03-13 09:56:22\", \"1971-02-05 07:28:23\", \"1971-02-05 07:28:23\"), first_name (\"Gregg\", \"Helga\", \"Delaney\"), cell_mobile_number (\"877.549.9067x8723\", \"(982)153-1469x1733\", \"171-642-5684\"), current_address_id (15, 7, 1), last_name (\"Ward\", \"Weimann\", \"Huel\"), permanent_address_id (15, 4, 9) | transcript_contents : student_course_id (7, 45105806, 2), transcript_id (12, 15, 6) | courses : course_id (11, 9, 6), other_details (None), course_name (\"la\", \"fr\", \"oop\"), course_description (\"q\", \"v\", \"v\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (14, 8, 13), other_details (None), department_id (13, 7, 8), degree_summary_description (\"placeat\", \"aut\", \"assumenda\") | student_enrolment_courses : course_id (4, 8, 13), student_course_id (438800, 83814225, 7), student_enrolment_id (8, 5, 6) | transcripts : other_details (None), transcript_date (\"1985-04-29 01:20:20\", \"1984-12-19 00:37:21\", \"1999-01-06 20:06:46\"), transcript_id (15, 10, 11) | student_enrolment : semester_id (1, 6, 12), degree_program_id (10, 4, 4), student_id (14, 1, 14), student_enrolment_id (7, 3, 7), other_details (None) | semesters : semester_name (\"summer 2010\", \"spring 2019\", \"winter 2010\"), other_details (None), semester_description (\"l\", \"y\", \"f\"), semester_id (9, 1, 15) | sections : course_id (5, 4, 8), section_id (4, 2, 4), other_details (None), section_name (\"b\", \"y\", \"l\"), section_description (\"provident\", \"et\", \"doloremque\") | departments : other_details (None), department_description (\"nisi\", \"nisi\", \"ea\"), department_name (\"linguistic\", \"computer science\", \"biology\"), department_id (6, 13, 8)",
        "ambiguous_queries": [
            "select t1.student_id, t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from learners as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
            "select t1.student_id, t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from pupils as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first\": [{\"Learners\": [\"first_name\"]}, {\"Pupils\": [\"first_name\"]}], \"id\": [{\"Learners\": [\"student_id\"]}, {\"Pupils\": [\"student_id\"]}], \"last name\": [{\"Learners\": [\"last_name\"]}, {\"Pupils\": [\"last_name\"]}], \"middle\": [{\"Learners\": [\"middle_name\"]}, {\"Pupils\": [\"middle_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first\" refers to the schema \"pupils\".\"first_name\", \"id\" refers to the schema \"pupils\".\"student_id\", \"last name\" refers to the schema \"pupils\".\"last_name\", \"middle\" refers to the schema \"pupils\".\"middle_name\"",
        "clear_ambiguity": "{\"first\": {\"Pupils\": [\"first_name\"]}, \"id\": {\"Pupils\": [\"student_id\"]}, \"last name\": {\"Pupils\": [\"last_name\"]}, \"middle\": {\"Pupils\": [\"middle_name\"]}}",
        "gold_query": "select t1.student_id, t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from pupils as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1"
    },
    {
        "index": 293,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "schema_without_content": "flights : airline , flightno , sourceairport , destairport  | arrival_points : airportname , airportcode , country , city , countryabbrev  | departure_points : airportname , airportcode , country , city , countryabbrev  | airlines : country , abbreviation , airline , uid",
        "schema_with_content": "flights : airline (1, 4, 6), flightno (18, 15, 1285), sourceairport (\" VJI\", \" ADG\", \" AKK\"), destairport (\" QAW\", \" NGZ\", \" AHH\") | arrival_points : airportname (\"Aniak \", \"Alexandria International \", \"Arctic Village \"), airportcode (\"AGN\", \"NDV\", \"AUK\"), country (\"United States \"), city (\"Albuquerque \", \"Ames \", \"Artesia \"), countryabbrev (\"US \", \"US\") | departure_points : airportname (\"Aniak \", \"Alexandria International \", \"Arctic Village \"), airportcode (\"AGN\", \"NDV\", \"AUK\"), country (\"United States \"), city (\"Albuquerque \", \"Ames \", \"Artesia \"), countryabbrev (\"US \", \"US\") | airlines : country (\"USA\"), abbreviation (\"Northwest\", \"UAL\", \"Northwest\"), airline (\"JetBlue Airways\", \"JetBlue Airways\", \"Allegiant Air\"), uid (5, 7, 3)",
        "ambiguous_queries": [
            "select t1.flightno from flights as t1 join departure_points as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'",
            "select t1.flightno from flights as t1 join arrival_points as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'"
        ],
        "gold_ambiguity": {
            "match": "{\"Aberdeen\": [{\"arrival_points\": [\"city\"]}, {\"departure_points\": [\"city\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Aberdeen\" refers to the schema \"departure_points\".\"city\"",
        "clear_ambiguity": "{\"Aberdeen\": {\"departure_points\": [\"city\"]}}",
        "gold_query": "select t1.flightno from flights as t1 join departure_points as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'"
    },
    {
        "index": 294,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "schema_without_content": "Television_Channel : content , country , pay_per_view_ppv , id , hight_definition_tv , series_name , language , pixel_aspect_ratio_par , package_option \", \"Sky Famiglia\", \"Sky Famiglia\" | tv_series : id , weekly_rank , share , air_date , episode , 18_49_rating_share , rating , channel , viewers_m  | cartoon : directed_by , written_by , title , production_code , id , channel , original_air_date  | Broadcasting_Channel : content , country , pay_per_view_ppv , id , hight_definition_tv , series_name , language , pixel_aspect_ratio_par , package_option \", \"Sky Famiglia\", \"Sky Famiglia\"",
        "schema_with_content": "Television_Channel : content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), id (\"703\", \"706\", \"714\"), hight_definition_tv (\"no\", \"yes\"), series_name (\"MTV Rocks\", \"Rock TV\", \"Hip Hop TV\"), language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Sky Famiglia\") | tv_series : id (3.0, 12.0, 1.0), weekly_rank (66.0, 80.0, 70.0), share (7.0, 9.0, 9.0), air_date (\"November 19, 2007\", \"November 12, 2007\", \"November 26, 2007\"), episode (\"Winterland\", \"The Year of the Rabbit\", \"Game Three\"), 18_49_rating_share (\"2.7/7\", \"1.7/5\", \"2.7/7\"), rating (\"3.4\", \"5.3\", \"4.4\"), channel (\"719\", \"700\", \"701\"), viewers_m (\"6.75\", \"6.06\", \"6.75\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Joseph Kuhr\", \"James Krieg\", \"Matt Wayne\"), title (\"Deep Cover for Batman!\", \"The Eyes of Despero!\", \"Invasion of the Secret Santas!\"), production_code (108.0, 111.0, 107.0), id (6.0, 11.0, 1.0), channel (\"707\", \"706\", \"704\"), original_air_date (\"February27,2009\", \"February20,2009\", \"January2,2009\") | Broadcasting_Channel : content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), id (\"703\", \"706\", \"714\"), hight_definition_tv (\"no\", \"yes\"), series_name (\"MTV Rocks\", \"Rock TV\", \"Hip Hop TV\"), language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Sky Famiglia\")",
        "ambiguous_queries": [
            "select t2.episode from broadcasting_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = 'Sky Radio'",
            "select t2.episode from television_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = 'Sky Radio'"
        ],
        "gold_ambiguity": {
            "match": "{\"series name\": [{\"Broadcasting_Channel\": [\"series_name\"]}, {\"Television_Channel\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"series name\" refers to the schema \"television_channel\".\"series_name\"",
        "clear_ambiguity": "{\"series name\": {\"Television_Channel\": [\"series_name\"]}}",
        "gold_query": "select t2.episode from television_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = 'Sky Radio'"
    },
    {
        "index": 295,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "schema_without_content": "breeds : breed_name , breed_code  | treatment_types : treatment_type_code , treatment_type_description  | Handlers : home_phone 0259033559\", role_code , street , zip_code , city , last_name , state , first_name , cell_number , professional_id , email_address  | owners : last_name , zip_code , city , street , cell_number 768-5439x484\", \"341.667.8085\", state , email_address , home_phone , owner_id , first_name  | dogs : dog_id , gender , owner_id , name , age , date_arrived , date_departed , breed_code , abandoned_yn , size_code , date_adopted , date_of_birth , weight  | sizes : size_code , size_description  | treatments : cost_of_treatment , professional_id , treatment_type_code , dog_id , date_of_treatment , treatment_id  | charges : charge_type , charge_id , charge_amount  | Caregivers : home_phone 0259033559\", role_code , street , zip_code , city , last_name , state , first_name , cell_number , professional_id , email_address",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | Handlers : home_phone (\"246-951-0080x76716\", \"891.475.2256\", \"+02(1)0259033559\"), role_code (\"Employee\", \"Veterenarian\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\"), zip_code (\"43129\", \"52476\", \"02281\"), city (\"North Adelberttown\", \"Baileymouth\", \"Kirastad\"), last_name (\"Watsica\", \"Hayes\", \"Ullrich\"), state (\"Utah\", \"Connecticut\", \"NewMexico\"), first_name (\"Danny\", \"Karley\", \"Domenica\"), cell_number (\"889-940-2676\", \"1-258-285-4707x8020\", \"889-940-2676\"), professional_id (1, 4, 7), email_address (\"goyette.roosevelt@example.net\", \"lucile.shanahan@example.org\", \"west.eula@example.net\") | owners : last_name (\"Funk\", \"DuBuque\", \"Fisher\"), zip_code (\"02647\", \"25609\", \"11990\"), city (\"Port Zackery\", \"East Maribelbury\", \"Lake Carleyborough\"), street (\"59509 Mellie Mountain\", \"9212 Rosenbaum Lights\", \"60352 Kayleigh Crossing Suite 700\"), cell_number (\"121.381.3316x6535\", \"(722)768-5439x484\", \"341.667.8085\"), state (\"NorthDakota\", \"SouthDakota\", \"Indiana\"), email_address (\"kturner@example.net\", \"ymaggio@example.com\", \"christy49@example.org\"), home_phone (\"130-796-4589x05454\", \"363.948.1090\", \"1-346-655-5842x768\"), owner_id (10, 13, 11), first_name (\"Tre\", \"Nora\", \"Jaclyn\") | dogs : dog_id (5, 13, 11), gender (\"1\", \"0\"), owner_id (2, 13, 6), name (\"Jeffrey\", \"Hipolito\", \"Betty\"), age (\"3\", \"3\", \"3\"), date_arrived (\"2017-04-15 09:25:31\", \"2017-05-06 08:03:52\", \"2018-01-17 11:44:16\"), date_departed (\"2018-03-25 04:50:22\", \"2018-03-25 13:07:04\", \"2018-03-25 04:42:14\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-08 15:03:00\", \"2018-02-27 11:54:35\"), date_of_birth (\"2012-05-31 08:01:36\", \"2009-04-12 06:02:48\", \"2015-02-26 21:31:22\"), weight (\"6.92\", \"6.92\", \"4.01\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatments : cost_of_treatment (945, 514, 514), professional_id (6, 8, 7), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (15, 13, 2), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-10 11:45:58\", \"2018-03-11 04:23:15\"), treatment_id (3, 7, 9) | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | Caregivers : home_phone (\"246-951-0080x76716\", \"891.475.2256\", \"+02(1)0259033559\"), role_code (\"Employee\", \"Veterenarian\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\"), zip_code (\"43129\", \"52476\", \"02281\"), city (\"North Adelberttown\", \"Baileymouth\", \"Kirastad\"), last_name (\"Watsica\", \"Hayes\", \"Ullrich\"), state (\"Utah\", \"Connecticut\", \"NewMexico\"), first_name (\"Danny\", \"Karley\", \"Domenica\"), cell_number (\"889-940-2676\", \"1-258-285-4707x8020\", \"889-940-2676\"), professional_id (1, 4, 7), email_address (\"goyette.roosevelt@example.net\", \"lucile.shanahan@example.org\", \"west.eula@example.net\")",
        "ambiguous_queries": [
            "select professional_id, last_name, cell_number from handlers where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from handlers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
            "select professional_id, last_name, cell_number from caregivers where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from caregivers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"Caregivers\": [\"last_name\"]}, {\"Handlers\": [\"last_name\"]}], \"cell phone\": [{\"Caregivers\": [\"cell_number\"]}, {\"Handlers\": [\"cell_number\"]}], \"state\": [{\"Caregivers\": [\"state\"]}, {\"Handlers\": [\"state\"]}], \"id\": [{\"Caregivers\": [\"professional_id\"]}, {\"Handlers\": [\"professional_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"handlers\".\"last_name\", \"cell phone\" refers to the schema \"handlers\".\"cell_number\", \"state\" refers to the schema \"handlers\".\"state\", \"id\" refers to the schema \"handlers\".\"professional_id\"",
        "clear_ambiguity": "{\"last name\": {\"Handlers\": [\"last_name\"]}, \"cell phone\": {\"Handlers\": [\"cell_number\"]}, \"state\": {\"Handlers\": [\"state\"]}, \"id\": {\"Handlers\": [\"professional_id\"]}}",
        "gold_query": "select professional_id, last_name, cell_number from handlers where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from handlers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2"
    },
    {
        "index": 296,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What is the average horsepower for all cards produced before 1980?",
        "schema_without_content": "countries : countryname , countryid , continent  | vehicle_data : accelerate , horsepower , mpg , edispl , cylinders , year , id , weight  | car_names : makeid , make , model  | continents : continent , contid  | auto_data : accelerate , horsepower , mpg , edispl , cylinders , year , id , weight  | model_list : modelid , model , maker  | car_makers : fullname , country , maker , id",
        "schema_with_content": "countries : countryname (\"russia\", \"sweden\", \"russia\"), countryid (5, 7, 4), continent (4, 3, 2) | vehicle_data : accelerate (23.5, 18.3, 17.7), horsepower (\"215\", \"61\", \"68\"), mpg (\"18\", \"25.1\", \"36.4\"), edispl (97.0, 135.0, 232.0), cylinders (8, 6, 8), year (1975, 1970, 1976), id (295, 197, 231), weight (3651, 1940, 2905) | car_names : makeid (397, 138, 404), make (\"dodge rampage\", \"chevy s-10\", \"ford torino\"), model (\"peugeot\", \"mercury\", \"bmw\") | continents : continent (\"europe\", \"asia\", \"europe\"), contid (2, 3, 2) | auto_data : accelerate (23.5, 18.3, 17.7), horsepower (\"215\", \"61\", \"68\"), mpg (\"18\", \"25.1\", \"36.4\"), edispl (97.0, 135.0, 232.0), cylinders (8, 6, 8), year (1975, 1970, 1976), id (295, 197, 231), weight (3651, 1940, 2905) | model_list : modelid (2, 2, 20), model (\"chevrolet\", \"capri\", \"toyota\"), maker (23, 22, 21) | car_makers : fullname (\"Honda\", \"Renault\", \"BMW\"), country (\"3\", \"2\", \"3\"), maker (\"saab\", \"bmw\", \"volvo\"), id (15, 17, 13)",
        "ambiguous_queries": [
            "select avg(horsepower) from vehicle_data where year < 1980",
            "select avg(horsepower) from auto_data where year < 1980"
        ],
        "gold_ambiguity": {
            "match": "{\"1980\": [{\"auto_data\": [\"year\"]}, {\"vehicle_data\": [\"year\"]}], \"horsepower\": [{\"auto_data\": [\"horsepower\"]}, {\"vehicle_data\": [\"horsepower\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"1980\" refers to the schema \"vehicle_data\".\"year\", \"horsepower\" refers to the schema \"auto_data\".\"horsepower\"",
        "clear_ambiguity": "{\"1980\": {\"vehicle_data\": [\"year\"]}, \"horsepower\": {\"auto_data\": [\"horsepower\"]}}",
        "gold_query": "select avg(horsepower) from vehicle_data where year < 1980"
    },
    {
        "index": 297,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "Find the average weight for each pet type.",
        "schema_without_content": "student : major , city_code , advisor , stuid , lname , age , fname , sex  | Companions : petid , pettype , weight , pet_age  | has_pet : stuid , petid  | Animals : petid , pettype , weight , pet_age",
        "schema_with_content": "student : major (50, 540, 540), city_code (\"HKG\", \"BAL\", \"PEK\"), advisor (7723, 7712, 2192), stuid (1024, 1008, 1015), lname (\"Davis\", \"Jones\", \"Cheng\"), age (16, 19, 22), fname (\"Ian\", \"Paul\", \"Mark\"), sex (\"F\", \"M\") | Companions : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | Animals : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1)",
        "ambiguous_queries": [
            "select avg(weight), pettype from animals group by pettype",
            "select avg(weight), pettype from companions group by pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"pet type\": [{\"Animals\": [\"pettype\"]}, {\"Companions\": [\"pettype\"]}], \"weight\": [{\"Animals\": [\"weight\"]}, {\"Companions\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"pet type\" refers to the schema \"animals\".\"pettype\", \"weight\" refers to the schema \"animals\".\"weight\"",
        "clear_ambiguity": "{\"pet type\": {\"Animals\": [\"pettype\"]}, \"weight\": {\"Animals\": [\"weight\"]}}",
        "gold_query": "select avg(weight), pettype from animals group by pettype"
    },
    {
        "index": 298,
        "db_id": "museum_visit",
        "ambig_type": "table",
        "db_file": "table/museum_visit/museum_visit.sqlite",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "schema_without_content": "gallery : name , num_of_staff , museum_id , open_year  | visit : visitor_id , num_of_ticket , total_spent , museum_id  | visitor : level_of_membership , id , age , name  | exhibition : name , num_of_staff , museum_id , open_year",
        "schema_with_content": "gallery : name (\"Central City District Residential Museum\", \"Place Tower Museum\", \"ZirMed Gateway Museum\"), num_of_staff (15, 16, 18), museum_id (2, 3, 6), open_year (\"2010\", \"2012\", \"2011\") | visit : visitor_id (\"5\", \"3\", \"6\"), num_of_ticket (2, 2, 24), total_spent (320.14, 320.44, 209.98), museum_id (8, 1, 8) | visitor : level_of_membership (8, 6, 5), id (5, 2, 3), age (35, 36, 28), name (\"Gonzalo HiguaÃ­n \", \"Guti Midfielder\", \"Arjen Robben\") | exhibition : name (\"Central City District Residential Museum\", \"Place Tower Museum\", \"ZirMed Gateway Museum\"), num_of_staff (15, 16, 18), museum_id (2, 3, 6), open_year (\"2010\", \"2012\", \"2011\")",
        "ambiguous_queries": [
            "select avg(num_of_staff) from gallery where open_year < 2009",
            "select avg(num_of_staff) from exhibition where open_year < 2009"
        ],
        "gold_ambiguity": {
            "match": "{\"open\": [{\"exhibition\": [\"open_year\"]}, {\"gallery\": [\"open_year\"]}], \"number of staff\": [{\"exhibition\": [\"num_of_staff\"]}, {\"gallery\": [\"num_of_staff\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"open\" refers to the schema \"gallery\".\"open_year\", \"number of staff\" refers to the schema \"gallery\".\"num_of_staff\"",
        "clear_ambiguity": "{\"open\": {\"gallery\": [\"open_year\"]}, \"number of staff\": {\"gallery\": [\"num_of_staff\"]}}",
        "gold_query": "select avg(num_of_staff) from gallery where open_year < 2009"
    },
    {
        "index": 299,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "table",
        "db_file": "table/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "schema_without_content": "Drafts : template_id , template_type_code , date_effective_from , date_effective_to , version_number , template_details  | paragraphs : paragraph_id , document_id , other_details , paragraph_text  | ref_template_types : template_type_description , template_type_code  | Forms : template_id , template_type_code , date_effective_from , date_effective_to , version_number , template_details  | documents : document_id , other_details , template_id , document_description , document_name",
        "schema_with_content": "Drafts : template_id (19, 22, 7), template_type_code (\"CV\", \"BK\", \"AD\"), date_effective_from (\"1996-02-04 11:27:24\", \"1984-08-07 13:36:26\", \"1983-07-16 21:16:16\"), date_effective_to (\"1994-12-07 13:26:23\", \"2000-10-22 11:57:12\", \"1974-09-14 06:34:39\"), version_number (5, 9, 6), template_details (\"\") | paragraphs : paragraph_id (510442723, 65, 241), document_id (3, 3540024, 3), other_details (None), paragraph_text (\"Somalia\", \"Ukraine\", \"Senegal\") | ref_template_types : template_type_description (\"Paper\", \"Presentation\", \"Advertisement\"), template_type_code (\"BK\", \"CV\", \"BK\") | Forms : template_id (19, 22, 7), template_type_code (\"CV\", \"BK\", \"AD\"), date_effective_from (\"1996-02-04 11:27:24\", \"1984-08-07 13:36:26\", \"1983-07-16 21:16:16\"), date_effective_to (\"1994-12-07 13:26:23\", \"2000-10-22 11:57:12\", \"1974-09-14 06:34:39\"), version_number (5, 9, 6), template_details (\"\") | documents : document_id (3540024, 82, 3540024), other_details (None), template_id (7, 21, 20), document_description (\"h\", \"k\", \"r\"), document_name (\"Palm reading\", \"Data base\", \"Learning French\")",
        "ambiguous_queries": [
            "select t1.template_type_code from forms as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
            "select t1.template_type_code from drafts as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"code\": [{\"Forms\": [\"template_type_code\"]}, {\"Drafts\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"code\" refers to the schema \"forms\".\"template_type_code\"",
        "clear_ambiguity": "{\"code\": {\"Forms\": [\"template_type_code\"]}}",
        "gold_query": "select t1.template_type_code from forms as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1"
    },
    {
        "index": 300,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "schema_without_content": "Caregivers : home_phone 2898266914\", \"325-155-0801x7005\", \"246-951-0080x76716\", zip_code , city , state , cell_number , last_name , street , professional_id , role_code , first_name , email_address  | owners : email_address , home_phone 563-0260x454\", \"1-332-849-1908\", \"893-862-5295x61709\", owner_id , last_name , first_name , street , state , city , zip_code , cell_number  | Handlers : home_phone 2898266914\", \"325-155-0801x7005\", \"246-951-0080x76716\", zip_code , city , state , cell_number , last_name , street , professional_id , role_code , first_name , email_address  | treatment_types : treatment_type_description , treatment_type_code  | treatments : treatment_id , date_of_treatment , cost_of_treatment , dog_id , professional_id , treatment_type_code  | sizes : size_description , size_code  | dogs : age , date_arrived , gender , name , breed_code , dog_id , weight , date_of_birth , owner_id , date_departed , size_code , date_adopted , abandoned_yn  | charges : charge_amount , charge_id , charge_type  | breeds : breed_code , breed_name",
        "schema_with_content": "Caregivers : home_phone (\"+71(6)2898266914\", \"325-155-0801x7005\", \"246-951-0080x76716\"), zip_code (\"33020\", \"17902\", \"67980\"), city (\"South Rockyport\", \"Jaceton\", \"West Heidi\"), state (\"Connecticut\", \"Montana\", \"NewMexico\"), cell_number (\"00230569697\", \"609-405-2990\", \"1-185-137-1945x409\"), last_name (\"Frami\", \"Jacobs\", \"Watsica\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), professional_id (9, 10, 15), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Velva\", \"Monte\", \"Taryn\"), email_address (\"cole.margarita@example.org\", \"jacynthe.mclaughlin@example.net\", \"goyette.roosevelt@example.net\") | owners : email_address (\"kturner@example.net\", \"angeline99@example.com\", \"wpfeffer@example.net\"), home_phone (\"(799)563-0260x454\", \"1-332-849-1908\", \"893-862-5295x61709\"), owner_id (12, 1, 15), last_name (\"Mertz\", \"Ondricka\", \"Hamill\"), first_name (\"Gay\", \"Heather\", \"Emelie\"), street (\"60352 Kayleigh Crossing Suite 700\", \"2417 Keara Stravenue Apt. 146\", \"1858 Jan Park\"), state (\"Arizona\", \"Vermont\", \"SouthDakota\"), city (\"Barrettburgh\", \"East Maribelbury\", \"Brakusfurt\"), zip_code (\"78297\", \"22731\", \"78297\"), cell_number (\"559.874.3011x989\", \"121.381.3316x6535\", \"633.455.3045x85484\") | Handlers : home_phone (\"+71(6)2898266914\", \"325-155-0801x7005\", \"246-951-0080x76716\"), zip_code (\"33020\", \"17902\", \"67980\"), city (\"South Rockyport\", \"Jaceton\", \"West Heidi\"), state (\"Connecticut\", \"Montana\", \"NewMexico\"), cell_number (\"00230569697\", \"609-405-2990\", \"1-185-137-1945x409\"), last_name (\"Frami\", \"Jacobs\", \"Watsica\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), professional_id (9, 10, 15), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Velva\", \"Monte\", \"Taryn\"), email_address (\"cole.margarita@example.org\", \"jacynthe.mclaughlin@example.net\", \"goyette.roosevelt@example.net\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | treatments : treatment_id (10, 12, 10), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-14 19:10:40\", \"2018-03-01 04:14:46\"), cost_of_treatment (668, 656, 852), dog_id (15, 15, 2), professional_id (4, 4, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | dogs : age (\"1\", \"5\", \"8\"), date_arrived (\"2018-01-02 03:15:29\", \"2017-12-22 05:02:02\", \"2018-01-02 03:15:29\"), gender (\"1\", \"0\"), name (\"Jesus\", \"Mavis\", \"Kacey\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (8, 7, 5), weight (\"8.95\", \"9.8\", \"5.16\"), date_of_birth (\"2013-02-20 14:50:56\", \"2013-02-13 05:15:21\", \"2018-03-17 04:05:12\"), owner_id (2, 14, 14), date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 14:15:41\", \"2018-03-25 06:58:44\"), size_code (\"LGE\", \"MED\", \"SML\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-02-25 23:45:30\", \"2018-03-14 08:05:18\"), abandoned_yn (\"1\", \"0\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\")",
        "ambiguous_queries": [
            "select t1.professional_id, t1.cell_number from handlers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
            "select t1.professional_id, t1.cell_number from caregivers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"
        ],
        "gold_ambiguity": {
            "match": "{\"cell phone\": [{\"Caregivers\": [\"cell_number\"]}, {\"Handlers\": [\"cell_number\"]}], \"id\": [{\"Caregivers\": [\"professional_id\"]}, {\"Handlers\": [\"professional_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cell phone\" refers to the schema \"caregivers\".\"cell_number\", \"id\" refers to the schema \"caregivers\".\"professional_id\"",
        "clear_ambiguity": "{\"cell phone\": {\"Caregivers\": [\"cell_number\"]}, \"id\": {\"Caregivers\": [\"professional_id\"]}}",
        "gold_query": "select t1.professional_id, t1.cell_number from caregivers as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"
    },
    {
        "index": 301,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "Find the total number of tours for each ranking date.",
        "schema_without_content": "standings : ranking_date , ranking_points , ranking , tours , player_id  | matches : loser_rank , winner_age , winner_hand , winner_rank_points , loser_id , loser_ht , winner_id , round , score  6-0\", \"6-4 7-6\", winner_ht , winner_ioc , loser_hand , year , loser_rank_points , tourney_date , surface , loser_age , loser_name , loser_entry , draw_size , winner_seed , minutes , winner_rank , tourney_id , loser_ioc , winner_name , tourney_name , loser_seed , winner_entry , match_num , tourney_level , best_of  | leaderboard : ranking_date , ranking_points , ranking , tours , player_id  | players : player_id , birth_date , last_name , hand , first_name , country_code",
        "schema_with_content": "standings : ranking_date (19930329, 20120130, 20170213), ranking_points (930, 1397, 115), ranking (1394, 474, 904), tours (7, 18, 8), player_id (203556, 209580, 213753) | matches : loser_rank (37, 2, 1), winner_age (26.8117727584, 26.8117727584, 26.8117727584), winner_hand (\"R\", \"L\"), winner_rank_points (2660, 3050, 2915), loser_id (201514, 201499, 201619), loser_ht (180, 170, 169), winner_id (201347, 202469, 200748), round (\"R32\", \"BR\", \"SF\"), score (\"6-0 7-5 \", \"3-6 7-6(6) 6-0\", \"6-4 7-6(5)\"), winner_ht (172, 183, 180), winner_ioc (\"SWE\", \"ROU\", \"ITA\"), loser_hand (\"R\", \"L\"), year (2013, 2016, 2017), loser_rank_points (2025, 4190, 5860), tourney_date (20170612, 20160418, 20160425), surface (\"Hard\", \"Clay\", \"Grass\"), loser_age (36.5831622177, 22.0479123888, 28.402464065700002), loser_name (\"Christina Mchale\", \"Karolina Pliskova\", \"Kristina Mladenovic\"), loser_entry (\"\"), draw_size (8, 128, 8), winner_seed (27, 14, 1), minutes (77, 179, 162), winner_rank (19, 1, 53), tourney_id (\"2017-1086\", \"2017-0718\", \"2017-580\"), loser_ioc (\"AUS\", \"HUN\", \"CHN\"), winner_name (\"Victoria Azarenka\", \"Venus Williams\", \"Camila Giorgi\"), tourney_name (\"Rome\", \"Katowice\", \"Stuttgart\"), loser_seed (28, 12, 13), winner_entry (\"\"), match_num (254, 155, 211), tourney_level (\"I\", \"P\", \"I\"), best_of (3) | leaderboard : ranking_date (19930329, 20120130, 20170213), ranking_points (930, 1397, 115), ranking (1394, 474, 904), tours (7, 18, 8), player_id (203556, 209580, 213753) | players : player_id (206504, 217287, 208821), birth_date (19810118, 19830308, 19740930), last_name (\"Siegrist\", \"Ericksen\", \"Rosas Garcia\"), hand (\"U\", \"\", \"L\"), first_name (\"Sun Jung\", \"Kenia\", \"Julia\"), country_code (\"GUD\", \"FIJ\", \"HON\")",
        "ambiguous_queries": [
            "select sum(tours), ranking_date from standings group by ranking_date",
            "select sum(tours), ranking_date from leaderboard group by ranking_date"
        ],
        "gold_ambiguity": {
            "match": "{\"ranking date\": [{\"leaderboard\": [\"ranking_date\"]}, {\"standings\": [\"ranking_date\"]}], \"tours\": [{\"leaderboard\": [\"tours\"]}, {\"standings\": [\"tours\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ranking date\" refers to the schema \"standings\".\"ranking_date\", \"tours\" refers to the schema \"standings\".\"tours\"",
        "clear_ambiguity": "{\"ranking date\": {\"standings\": [\"ranking_date\"]}, \"tours\": {\"standings\": [\"tours\"]}}",
        "gold_query": "select sum(tours), ranking_date from standings group by ranking_date"
    },
    {
        "index": 302,
        "db_id": "voter_1",
        "ambig_type": "table",
        "db_file": "table/voter_1/voter_1.sqlite",
        "question": "What is the area code in which the most voters voted?",
        "schema_without_content": "zipcode_state : area_code , state  | votes : phone_number , state , contestant_number , created , vote_id  | contestants : contestant_name , contestant_number  | region_state : area_code , state",
        "schema_with_content": "zipcode_state : area_code (615, 928, 212), state (\"VA\", \"AZ\", \"MN\") | votes : phone_number (7148407040, 7182887233, 7182887233), state (\"NY\", \"CA\", \"NJ\n\"), contestant_number (2, 3, 5), created (\"2018-03-09 19:03:40\", \"2018-03-09 19:03:39\", \"2018-03-09 19:03:40\"), vote_id (3, 2, 5) | contestants : contestant_name (\"Jessie Eichman\", \"Ericka Dieter\", \"Loraine NygrenTania Mattioli\"), contestant_number (5, 7, 11) | region_state : area_code (615, 928, 212), state (\"VA\", \"AZ\", \"MN\")",
        "ambiguous_queries": [
            "select t1.area_code from zipcode_state as t1 join votes as t2 on t1.state = t2.state group by t1.area_code order by count(*) desc limit 1",
            "select t1.area_code from region_state as t1 join votes as t2 on t1.state = t2.state group by t1.area_code order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"area code\": [{\"region_state\": [\"area_code\"]}, {\"zipcode_state\": [\"area_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"area code\" refers to the schema \"region_state\".\"area_code\"",
        "clear_ambiguity": "{\"area code\": {\"region_state\": [\"area_code\"]}}",
        "gold_query": "select t1.area_code from region_state as t1 join votes as t2 on t1.state = t2.state group by t1.area_code order by count(*) desc limit 1"
    },
    {
        "index": 303,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "table",
        "db_file": "table/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What are the template ids with template type description \"Presentation\".",
        "schema_without_content": "Drafts : template_type_code , template_details , version_number , template_id , date_effective_to , date_effective_from  | paragraphs : document_id , other_details , paragraph_text , paragraph_id  | ref_template_types : template_type_code , template_type_description  | Forms : template_type_code , template_details , version_number , template_id , date_effective_to , date_effective_from  | documents : document_id , other_details , template_id , document_description , document_name",
        "schema_with_content": "Drafts : template_type_code (\"AD\", \"BK\", \"AD\"), template_details (\"\"), version_number (5, 6, 0), template_id (16, 20, 14), date_effective_to (\"1979-11-04 08:58:39\", \"1999-07-08 03:31:04\", \"2008-08-08 18:36:43\"), date_effective_from (\"2005-11-12 07:09:48\", \"1986-12-09 14:51:36\", \"1975-05-20 22:51:19\") | paragraphs : document_id (651512, 2394, 651512), other_details (None), paragraph_text (\"Ukraine\", \"Senegal\", \"Micronesia\"), paragraph_id (571212310, 243399026, 241) | ref_template_types : template_type_code (\"CV\", \"PP\", \"PPT\"), template_type_description (\"Book\", \"CV\", \"Presentation\") | Forms : template_type_code (\"AD\", \"BK\", \"AD\"), template_details (\"\"), version_number (5, 6, 0), template_id (16, 20, 14), date_effective_to (\"1979-11-04 08:58:39\", \"1999-07-08 03:31:04\", \"2008-08-08 18:36:43\"), date_effective_from (\"2005-11-12 07:09:48\", \"1986-12-09 14:51:36\", \"1975-05-20 22:51:19\") | documents : document_id (2394, 0, 16514113), other_details (None), template_id (8, 1, 22), document_description (\"b\", \"r\", \"u\"), document_name (\"Palm reading\", \"Understanding DB\", \"How to write a CV\")",
        "ambiguous_queries": [
            "select t2.template_id from ref_template_types as t1 join forms as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = 'Presentation'",
            "select t2.template_id from ref_template_types as t1 join drafts as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = 'Presentation'"
        ],
        "gold_ambiguity": {
            "match": "{\"template ids\": [{\"Drafts\": [\"template_id\"]}, {\"Forms\": [\"template_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template ids\" refers to the schema \"drafts\".\"template_id\"",
        "clear_ambiguity": "{\"template ids\": {\"Drafts\": [\"template_id\"]}}",
        "gold_query": "select t2.template_id from ref_template_types as t1 join drafts as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = 'Presentation'"
    },
    {
        "index": 304,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "schema_without_content": "sqlite_sequence : name , seq  | countrylanguage : language , percentage , countrycode , isofficial  | nation : continent , region , surfacearea , indepyear , gnpold , population , gnp , code2 , governmentform \", \"Nonmetropolitan Territory of France\", headofstate , lifeexpectancy , name , capital , localname , code  | city : countrycode , population , name , district , id  | state : continent , region , surfacearea , indepyear , gnpold , population , gnp , code2 , governmentform \", \"Nonmetropolitan Territory of France\", headofstate , lifeexpectancy , name , capital , localname , code",
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : language (\"Punu\", \"Nkole\", \"Malay\"), percentage (82.2, 0.1, 12.6), countrycode (\"CHE\", \"ABW\", \"TON\"), isofficial (\"T\", \"F\") | nation : continent (\"South America\", \"South America\", \"Oceania\"), region (\"Central Africa\", \"Nordic Countries\", \"Middle East\"), surfacearea (912050.0, 83600.0, 112622.0), indepyear (1977, 1990, 1941), gnpold (8920.0, 65186.0, 34843.0), population (18827000, 6097000, 15000), gnp (8005.0, 1119.0, 256254.0), code2 (\"SE\", \"KW\", \"BD\"), governmentform (\"Part of Denmark\", \"Monarchy (Emirate)\", \"Nonmetropolitan Territory of France\"), headofstate (\"Hugo BÃ¡nzer SuÃ¡rez\", \"Bharrat Jagdeo\", \"Kostis Stefanopoulos\"), lifeexpectancy (56.6, 70.0, 49.8), name (\"Laos\", \"Latvia\", \"Honduras\"), capital (2696, 3426, 3063), localname (\"PolynÃ©sie franÃ§aise\", \"Naoero/Nauru\", \"Saint Helena\"), code (\"GUF\", \"SOM\", \"FRA\") | city : countrycode (\"NAM\", \"SYC\", \"SGP\"), population (142251, 99738, 131000), name (\"Lower Hutt\", \"Taizz\", \"Port-Vila\"), district (\"Guanajuato\", \"West Irian\", \"Kanagawa\"), id (526, 308, 2173) | state : continent (\"South America\", \"South America\", \"Oceania\"), region (\"Central Africa\", \"Nordic Countries\", \"Middle East\"), surfacearea (912050.0, 83600.0, 112622.0), indepyear (1977, 1990, 1941), gnpold (8920.0, 65186.0, 34843.0), population (18827000, 6097000, 15000), gnp (8005.0, 1119.0, 256254.0), code2 (\"SE\", \"KW\", \"BD\"), governmentform (\"Part of Denmark\", \"Monarchy (Emirate)\", \"Nonmetropolitan Territory of France\"), headofstate (\"Hugo BÃ¡nzer SuÃ¡rez\", \"Bharrat Jagdeo\", \"Kostis Stefanopoulos\"), lifeexpectancy (56.6, 70.0, 49.8), name (\"Laos\", \"Latvia\", \"Honduras\"), capital (2696, 3426, 3063), localname (\"PolynÃ©sie franÃ§aise\", \"Naoero/Nauru\", \"Saint Helena\"), code (\"GUF\", \"SOM\", \"FRA\")",
        "ambiguous_queries": [
            "select sum(population), avg(surfacearea) from nation where continent = 'North America' and surfacearea > 3000",
            "select sum(population), avg(surfacearea) from state where continent = 'North America' and surfacearea > 3000"
        ],
        "gold_ambiguity": {
            "match": "{\"countries\": [{\"nation\": [\"continent\"]}, {\"state\": [\"continent\"]}], \"population\": [{\"nation\": [\"population\"]}, {\"state\": [\"population\"]}], \"surface\": [{\"nation\": [\"surfacearea\"]}, {\"state\": [\"surfacearea\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"countries\" refers to the schema \"nation\".\"continent\", \"population\" refers to the schema \"nation\".\"population\", \"surface\" refers to the schema \"nation\".\"surfacearea\"",
        "clear_ambiguity": "{\"countries\": {\"nation\": [\"continent\"]}, \"population\": {\"nation\": [\"population\"]}, \"surface\": {\"nation\": [\"surfacearea\"]}}",
        "gold_query": "select sum(population), avg(surfacearea) from nation where continent = 'North America' and surfacearea > 3000"
    },
    {
        "index": 305,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "schema_without_content": "sqlite_sequence : seq , name  | country : localname , headofstate , population , continent , governmentform \", code , gnpold , surfacearea , capital , indepyear , code2 , lifeexpectancy , region , gnp , name  | town : district , name , population , id , countrycode  | metropolis : district , name , population , id , countrycode  | countrylanguage : countrycode , isofficial , language , percentage",
        "schema_with_content": "sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"Norfolk Island\", \"Belarus\", \"Slovensko\"), headofstate (\"Milan Kucan\", \"Å tipe Mesic\", \"Jorge Batlle IbÃ¡Ã±ez\"), population (217000, 16223000, 270000), continent (\"Europe\", \"Asia\", \"Africa\"), governmentform (\"Islamic Republic\", \"Nonmetropolitan Territory of The Netherlands\", \"Monarchy (Sultanate)\"), code (\"REU\", \"BFA\", \"ISR\"), gnpold (8700.0, 206025.0, 933.0), surfacearea (2040.0, 1075.0, 17364.0), capital (608, 1532, 2453), indepyear (1993, 1922, 843), code2 (\"TJ\", \"IL\", \"SY\"), lifeexpectancy (45.2, 60.9, 77.4), region (\"Central America\", \"North America\", \"Micronesia\"), gnp (1043.0, 2012.0, 1043.0), name (\"Kenya\", \"Guam\", \"Netherlands Antilles\") | town : district (\"VÃ¢lcea\", \"PÃ¤ijÃ¤t-HÃ¤me\", \"Dunedin\"), name (\"Nakhon Pathom\", \"Legnica\", \"Shubra al-Khayma\"), population (138000, 205504, 265450), id (1382, 1334, 1486), countrycode (\"NER\", \"VGB\", \"BTN\") | metropolis : district (\"VÃ¢lcea\", \"PÃ¤ijÃ¤t-HÃ¤me\", \"Dunedin\"), name (\"Nakhon Pathom\", \"Legnica\", \"Shubra al-Khayma\"), population (138000, 205504, 265450), id (1382, 1334, 1486), countrycode (\"NER\", \"VGB\", \"BTN\") | countrylanguage : countrycode (\"BLZ\", \"REU\", \"AIA\"), isofficial (\"T\", \"F\"), language (\"Albaniana\", \"Luimbe-nganguela\", \"Sardinian\"), percentage (86.0, 40.8, 7.1)",
        "ambiguous_queries": [
            "select count(*), district from town where population > (select avg(population) from town) group by district",
            "select count(*), district from metropolis where population > (select avg(population) from metropolis) group by district"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"population\": [{\"town\": [\"population\"]}, {\"metropolis\": [\"population\"]}], \"district\": [{\"town\": [\"district\"]}, {\"metropolis\": [\"district\"]}]}"
        },
        "clarification_context": "\"population\" refers to the schema \"metropolis\".\"population\", \"district\" refers to the schema \"metropolis\".\"district\"",
        "clear_ambiguity": "{\"population\": {\"metropolis\": [\"population\"]}, \"district\": {\"metropolis\": [\"district\"]}}",
        "gold_query": "select count(*), district from metropolis where population > (select avg(population) from metropolis) group by district"
    },
    {
        "index": 306,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "schema_without_content": "car_names : makeid , make \", \"buick century 350\", model  | model_list : maker , model , modelid  | cars_data : mpg , id , year , weight , edispl , cylinders , accelerate , horsepower  | continents_list : contid , continent  | countries : continent , countryname , countryid  | car_makers : country , id , fullname , maker  | planet_regions : contid , continent",
        "schema_with_content": "car_names : makeid (68, 204, 264), make (\"ford maverick\", \"buick century luxus (sw)\", \"buick century 350\"), model (\"peugeot\", \"bmw\", \"toyota\") | model_list : maker (8, 21, 19), model (\"datsun\", \"buick\", \"toyota\"), modelid (33, 12, 5) | cars_data : mpg (\"23\", \"12\", \"29.9\"), id (164, 309, 156), year (1978, 1973, 1977), weight (4440, 3160, 2126), edispl (258.0, 141.0, 121.0), cylinders (3, 4, 8), accelerate (14.9, 14.3, 20.1), horsepower (\"115\", \"53\", \"98\") | continents_list : contid (5, 5, 2), continent (\"asia\", \"america\", \"africa\") | countries : continent (2, 1, 5), countryname (\"germany\", \"russia\", \"italy\"), countryid (5, 3, 6) | car_makers : country (\"6\", \"1\", \"7\"), id (16, 23, 1), fullname (\"Citroen\", \"Triumph\", \"Chrysler\"), maker (\"opel\", \"ford\", \"toyota\") | planet_regions : contid (5, 5, 2), continent (\"asia\", \"america\", \"africa\")",
        "ambiguous_queries": [
            "select t1.countryname from countries as t1 join continents_list as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3",
            "select t1.countryname from countries as t1 join planet_regions as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3"
        ],
        "gold_ambiguity": {
            "match": "{\"europe\": [{\"continents_list\": [\"continent\"]}, {\"planet_regions\": [\"continent\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"europe\" refers to the schema \"continents_list\".\"continent\"",
        "clear_ambiguity": "{\"europe\": {\"continents_list\": [\"continent\"]}}",
        "gold_query": "select t1.countryname from countries as t1 join continents_list as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3"
    },
    {
        "index": 307,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "table",
        "db_file": "table/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "schema_without_content": "boutique : name , district , number_products , manager_name , location , shop_id  | store : name , district , number_products , manager_name , location , shop_id  | evaluation : bonus , employee_id , year_awarded  | employee : employee_id , name , city , age  | hiring : is_full_time , employee_id , shop_id , start_from",
        "schema_with_content": "boutique : name (\"FC Honka\", \"FC Lahti\", \"FC Honka\"), district (\"WiklÃ¶f Holding Arena\", \"Finnair Stadium\", \"Magnum Areena\"), number_products (15000, 15000, 10000), manager_name (\"Antti Muurinen\", \"Kai NyyssÃ¶nen\", \"Antti Muurinen\"), location (\"Lahti\", \"Turku\", \"Turku\"), shop_id (3, 8, 9) | store : name (\"FC Honka\", \"FC Lahti\", \"FC Honka\"), district (\"WiklÃ¶f Holding Arena\", \"Finnair Stadium\", \"Magnum Areena\"), number_products (15000, 15000, 10000), manager_name (\"Antti Muurinen\", \"Kai NyyssÃ¶nen\", \"Antti Muurinen\"), location (\"Lahti\", \"Turku\", \"Turku\"), shop_id (3, 8, 9) | evaluation : bonus (4000.0, 3000.0, 4000.0), employee_id (\"10\", \"1\", \"10\"), year_awarded (\"2017\", \"2015\", \"2015\") | employee : employee_id (8, 5, 3), name (\"Phil Vickery\", \"Jason Hobson\", \"Jason Hobson\"), city (\"Bristol\", \"Bath\", \"Bath\"), age (28, 28, 40) | hiring : is_full_time (\"T\", \"F\"), employee_id (3, 3, 7), shop_id (4, 6, 5), start_from (\"2003\", \"2009\", \"2010\")",
        "ambiguous_queries": [
            "select name, location, district from store order by number_products desc",
            "select name, location, district from boutique order by number_products desc"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"boutique\": [\"district\"]}, {\"store\": [\"district\"]}], \"location\": [{\"boutique\": [\"location\"]}, {\"store\": [\"location\"]}], \"name\": [{\"boutique\": [\"name\"]}, {\"store\": [\"name\"]}], \"number products\": [{\"boutique\": [\"number_products\"]}, {\"store\": [\"number_products\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"store\".\"district\", \"location\" refers to the schema \"store\".\"location\", \"name\" refers to the schema \"store\".\"name\", \"number products\" refers to the schema \"store\".\"number_products\"",
        "clear_ambiguity": "{\"district\": {\"store\": [\"district\"]}, \"location\": {\"store\": [\"location\"]}, \"name\": {\"store\": [\"name\"]}, \"number products\": {\"store\": [\"number_products\"]}}",
        "gold_query": "select name, location, district from store order by number_products desc"
    },
    {
        "index": 308,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "schema_without_content": "vehicle_names : makeid , make \", \"datsun f-10 hatchback\", model  | cars_data : horsepower , id , edispl , cylinders , weight , year , mpg , accelerate  | continents : contid , continent  | car_makers : fullname , id , country , maker  | car_models : makeid , make \", \"datsun f-10 hatchback\", model  | countries : countryid , continent , countryname  | model_list : maker , model , modelid",
        "schema_with_content": "vehicle_names : makeid (87, 379, 181), make (\"plymouth champ\", \"datsun 510 (sw)\", \"datsun f-10 hatchback\"), model (\"plymouth\", \"honda\", \"honda\") | cars_data : horsepower (\"90\", \"52\", \"61\"), id (43, 81, 273), edispl (168.0, 351.0, 70.0), cylinders (5, 3, 4), weight (1925, 3821, 2125), year (1976, 1976, 1971), mpg (\"25.1\", \"37.7\", \"25.5\"), accelerate (12.1, 14.5, 24.6) | continents : contid (2, 5, 3), continent (\"africa\", \"europe\", \"europe\") | car_makers : fullname (\"Fiat\", \"Ford Motor Company\", \"Saab\"), id (19, 2, 19), country (\"2\", \"1\", \"1\"), maker (\"citroen\", \"volkswagen\", \"nissan\") | car_models : makeid (87, 379, 181), make (\"plymouth champ\", \"datsun 510 (sw)\", \"datsun f-10 hatchback\"), model (\"plymouth\", \"honda\", \"honda\") | countries : countryid (12, 7, 14), continent (1, 1, 3), countryname (\"france\", \"japan\", \"usa\") | model_list : maker (5, 20, 11), model (\"scion\", \"cadillac\", \"amc\"), modelid (22, 30, 9)",
        "ambiguous_queries": [
            "select t1.accelerate from cars_data as t1 join car_models as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)'",
            "select t1.accelerate from cars_data as t1 join vehicle_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)'"
        ],
        "gold_ambiguity": {
            "match": "{\"makes\": [{\"car_models\": [\"make\"]}, {\"vehicle_names\": [\"make\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"makes\" refers to the schema \"car_models\".\"make\"",
        "clear_ambiguity": "{\"makes\": {\"car_models\": [\"make\"]}}",
        "gold_query": "select t1.accelerate from cars_data as t1 join car_models as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)'"
    },
    {
        "index": 309,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "schema_without_content": "transcript_contents : student_course_id , transcript_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | Grade_Report : other_details , transcript_date , transcript_id  | addresses : line_3 , line_2 , zip_postcode , state_province_county , address_id , line_1 , other_address_details , country , city  | semesters : other_details , semester_id , semester_name , semester_description  | Academic_History : other_details , transcript_date , transcript_id  | courses : course_id , course_name , course_description , other_details  | sections : other_details , section_name , section_description , course_id , section_id  | students : last_name , other_student_details , first_name , current_address_id , middle_name , ssn , email_address , date_left , permanent_address_id , student_id , date_first_registered , cell_mobile_number 889-8954x524\" | departments : department_description , department_id , other_details , department_name  | degree_programs : degree_summary_name , degree_program_id , other_details , degree_summary_description , department_id  | student_enrolment : semester_id , student_enrolment_id , student_id , degree_program_id , other_details",
        "schema_with_content": "transcript_contents : student_course_id (45105806, 7, 8), transcript_id (8, 15, 12) | student_enrolment_courses : student_enrolment_id (5, 6, 10), student_course_id (83814225, 438800, 604750), course_id (4, 6, 11) | Grade_Report : other_details (None), transcript_date (\"1998-11-22 12:18:29\", \"1975-10-28 15:16:51\", \"1985-08-21 09:32:39\"), transcript_id (6, 13, 11) | addresses : line_3 (None), line_2 (\"Apt. 388\", \"Apt. 406\", \"Apt. 305\"), zip_postcode (\"446\", \"638\", \"943\"), state_province_county (\"Wyoming\", \"NorthCarolina\", \"Florida\"), address_id (4, 13, 4), line_1 (\"0643 Muller Vista\", \"3999 Aufderhar Ways Suite 593\", \"0144 Lamar Plaza Apt. 346\"), other_address_details (None), country (\"Lesotho\", \"Angola\", \"Cook Islands\"), city (\"Port Oceane\", \"Lake Laishafurt\", \"Port Elvisfurt\") | semesters : other_details (None), semester_id (10, 7, 3), semester_name (\"summer 2010\", \"fall 2018\", \"fall 2010\"), semester_description (\"g\", \"w\", \"q\") | Academic_History : other_details (None), transcript_date (\"1998-11-22 12:18:29\", \"1975-10-28 15:16:51\", \"1985-08-21 09:32:39\"), transcript_id (6, 13, 11) | courses : course_id (6, 12, 5), course_name (\"ai\", \"la\", \"dl\"), course_description (\"b\", \"l\", \"p\"), other_details (None) | sections : other_details (None), section_name (\"k\", \"g\", \"j\"), section_description (\"ad\", \"facilis\", \"ad\"), course_id (6, 5, 12), section_id (3, 10, 11) | students : last_name (\"Jaskolski\", \"Carroll\", \"Mohr\"), other_student_details (\"et\", \"rerum\", \"non\"), first_name (\"Helga\", \"Gregg\", \"Helga\"), current_address_id (10, 6, 1), middle_name (\"Anna\", \"Alberta\", \"Mona\"), ssn (\"668\", \"6274274\", \"68095\"), email_address (\"baumbach.lucious@example.org\", \"lhartmann@example.org\", \"dell43@example.net\"), date_left (\"1975-10-09 00:49:27\", \"2016-04-09 12:27:04\", \"1975-10-09 00:49:27\"), permanent_address_id (3, 11, 11), student_id (13, 10, 14), date_first_registered (\"1982-06-19 13:15:18\", \"2014-03-28 05:48:23\", \"2018-03-13 09:56:22\"), cell_mobile_number (\"1-879-796-8987x164\", \"171-642-5684\", \"(096)889-8954x524\") | departments : department_description (\"doloribus\", \"autem\", \"aliquam\"), department_id (9, 8, 2), other_details (None), department_name (\"art\", \"engineer\", \"medical\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (10, 7, 14), other_details (None), degree_summary_description (\"qui\", \"esse\", \"et\"), department_id (2, 12, 8) | student_enrolment : semester_id (2, 13, 15), student_enrolment_id (4, 15, 1), student_id (1, 12, 12), degree_program_id (12, 11, 5), other_details (None)",
        "ambiguous_queries": [
            "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join academic_history as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
            "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join grade_report as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2"
        ],
        "gold_ambiguity": {
            "match": "{\"date\": [{\"Academic_History\": [\"transcript_date\"]}, {\"Grade_Report\": [\"transcript_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"date\" refers to the schema \"grade_report\".\"transcript_date\"",
        "clear_ambiguity": "{\"date\": {\"Grade_Report\": [\"transcript_date\"]}}",
        "gold_query": "select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join grade_report as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2"
    },
    {
        "index": 310,
        "db_id": "network_1",
        "ambig_type": "table",
        "db_file": "table/network_1/network_1.sqlite",
        "question": "Give the name of the student with the most likes.",
        "schema_without_content": "likes : liked_id , student_id  | Student : grade , name , id  | friend : student_id , friend_id  | Teenager : grade , name , id",
        "schema_with_content": "likes : liked_id (1247, 1101, 1247), student_id (1316, 1501, 1911) | Student : grade (10, 12, 10), name (\"Jordan\", \"Logan\", \"Andrew\"), id (1381, 1709, 1501) | friend : student_id (1468, 1316, 1247), friend_id (1025, 1304, 1316) | Teenager : grade (10, 12, 10), name (\"Jordan\", \"Logan\", \"Andrew\"), id (1381, 1709, 1501)",
        "ambiguous_queries": [
            "select t2.name from likes as t1 join student as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
            "select t2.name from likes as t1 join teenager as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"Student\": [\"name\"]}, {\"Teenager\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"student\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"Student\": [\"name\"]}}",
        "gold_query": "select t2.name from likes as t1 join student as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1"
    },
    {
        "index": 311,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Which airports do not have departing or arriving flights?",
        "schema_without_content": "airlines : country , airline , abbreviation , uid  | flights : sourceairport , flightno , airline , destairport  | departure_points : city , countryabbrev , airportname , airportcode , country  | arrival_points : city , countryabbrev , airportname , airportcode , country",
        "schema_with_content": "airlines : country (\"USA\"), airline (\"JetBlue Airways\", \"JetBlue Airways\", \"AirTran Airways\"), abbreviation (\"AirTran\", \"USAir\", \"JetBlue\"), uid (1, 5, 9) | flights : sourceairport (\" AET\", \" RFK\", \" ALI\"), flightno (1163, 1139, 1051), airline (11, 12, 8), destairport (\" QAW\", \" ANQ\", \" MRI\") | departure_points : city (\"Alexandria \", \"Alyeska \", \"Aleneva \"), countryabbrev (\"US \", \"US\"), airportname (\"Annette Island \", \"Alpena County Regional \", \"Aleneva \"), airportcode (\"AID\", \"AAF\", \"APV\"), country (\"United States \") | arrival_points : city (\"Alexandria \", \"Alyeska \", \"Aleneva \"), countryabbrev (\"US \", \"US\"), airportname (\"Annette Island \", \"Alpena County Regional \", \"Aleneva \"), airportcode (\"AID\", \"AAF\", \"APV\"), country (\"United States \")",
        "ambiguous_queries": [
            "select airportname from departure_points where airportcode not in (select sourceairport from flights union select destairport from flights)",
            "select airportname from arrival_points where airportcode not in (select sourceairport from flights union select destairport from flights)"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"airports\": [{\"departure_points\": [\"airportname\"]}, {\"arrival_points\": [\"airportname\"]}]}"
        },
        "clarification_context": "\"airports\" refers to the schema \"departure_points\".\"airportname\"",
        "clear_ambiguity": "{\"airports\": {\"departure_points\": [\"airportname\"]}}",
        "gold_query": "select airportname from departure_points where airportcode not in (select sourceairport from flights union select destairport from flights)"
    },
    {
        "index": 312,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What region does Angola belong to and what is its population?",
        "schema_without_content": "nation : continent , code2 , name , headofstate , lifeexpectancy , code , gnpold , surfacearea , governmentform \", \"People'sRepublic\", \"Occupied by Marocco\", population , gnp , indepyear , capital , localname , region  | sqlite_sequence : seq , name  | city : population , id , district , name , countrycode  | countrylanguage : percentage , isofficial , countrycode , language  | state : continent , code2 , name , headofstate , lifeexpectancy , code , gnpold , surfacearea , governmentform \", \"People'sRepublic\", \"Occupied by Marocco\", population , gnp , indepyear , capital , localname , region",
        "schema_with_content": "nation : continent (\"Antarctica\", \"Africa\", \"Africa\"), code2 (\"VN\", \"MQ\", \"DK\"), name (\"Qatar\", \"Trinidad and Tobago\", \"Honduras\"), headofstate (\"Letsie III\", \"Jiang Zemin\", \"Robert G. Mugabe\"), lifeexpectancy (46.0, 72.3, 76.5), code (\"BRB\", \"NAM\", \"SYR\"), gnpold (5639.0, 40562.0, 6722.0), surfacearea (267668.0, 7780.0, 513115.0), governmentform (\"Monarchy (Sultanate)\", \"People'sRepublic\", \"Occupied by Marocco\"), population (754700, 68000, 600), gnp (10692.0, 3512.0, 182.0), indepyear (1970, 1821, 1975), capital (919, 1365, 3813), localname (\"Al-Â´Iraq\", \"Belarus\", \"Lao\"), region (\"Polynesia\", \"Northern Africa\", \"Northern Africa\") | sqlite_sequence : seq (4079), name (\"city\") | city : population (91471, 129765, 173500), id (885, 2292, 2204), district (\"al-Asima\", \"Balkh\", \"Borgou\"), name (\"Yamagata\", \"Sorocaba\", \"Andria\"), countrycode (\"ATG\", \"CMR\", \"COG\") | countrylanguage : percentage (2.3, 98.3, 86.8), isofficial (\"T\", \"F\"), countrycode (\"VUT\", \"CHN\", \"NOR\"), language (\"Hassaniya\", \"Mon-khmer\", \"Mandjia\") | state : continent (\"Antarctica\", \"Africa\", \"Africa\"), code2 (\"VN\", \"MQ\", \"DK\"), name (\"Qatar\", \"Trinidad and Tobago\", \"Honduras\"), headofstate (\"Letsie III\", \"Jiang Zemin\", \"Robert G. Mugabe\"), lifeexpectancy (46.0, 72.3, 76.5), code (\"BRB\", \"NAM\", \"SYR\"), gnpold (5639.0, 40562.0, 6722.0), surfacearea (267668.0, 7780.0, 513115.0), governmentform (\"Monarchy (Sultanate)\", \"People'sRepublic\", \"Occupied by Marocco\"), population (754700, 68000, 600), gnp (10692.0, 3512.0, 182.0), indepyear (1970, 1821, 1975), capital (919, 1365, 3813), localname (\"Al-Â´Iraq\", \"Belarus\", \"Lao\"), region (\"Polynesia\", \"Northern Africa\", \"Northern Africa\")",
        "ambiguous_queries": [
            "select population, region from nation where name = 'Angola'",
            "select population, region from state where name = 'Angola'"
        ],
        "gold_ambiguity": {
            "match": "{\"Angola\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}], \"population\": [{\"nation\": [\"population\"]}, {\"state\": [\"population\"]}], \"region\": [{\"nation\": [\"region\"]}, {\"state\": [\"region\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Angola\" refers to the schema \"state\".\"name\", \"population\" refers to the schema \"state\".\"population\", \"region\" refers to the schema \"state\".\"region\"",
        "clear_ambiguity": "{\"Angola\": {\"state\": [\"name\"]}, \"population\": {\"state\": [\"population\"]}, \"region\": {\"state\": [\"region\"]}}",
        "gold_query": "select population, region from state where name = 'Angola'"
    },
    {
        "index": 313,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "schema_without_content": "city : id , population , district , name , countrycode  | sqlite_sequence : name , seq  | state : capital , name , code2 , lifeexpectancy , population , continent , governmentform , gnp , gnpold , localname , region , code , indepyear , headofstate , surfacearea  | nation : capital , name , code2 , lifeexpectancy , population , continent , governmentform , gnp , gnpold , localname , region , code , indepyear , headofstate , surfacearea  | countrylanguage : isofficial , language , percentage , countrycode",
        "schema_with_content": "city : id (1443, 2869, 424), population (370190, 816321, 6789479), district (\"Ãrhus\", \"Khomas\", \"Anhalt Sachsen\"), name (\"Weno\", \"Angra dos Reis\", \"Kelang\"), countrycode (\"YEM\", \"FIN\", \"CPV\") | sqlite_sequence : name (\"city\"), seq (4079) | state : capital (34, 185, 3065), name (\"Estonia\", \"Turks and Caicos Islands\", \"Taiwan\"), code2 (\"GU\", \"BY\", \"MT\"), lifeexpectancy (59.8, 70.8, 46.0), population (15942000, 5171300, 293000), continent (\"Oceania\", \"South America\", \"Antarctica\"), governmentform (\"Nonmetropolitan Territory of France\", \"Territory of Australia\", \"Territorial Collectivity of France\"), gnp (97.0, 116416.0, 650.0), gnpold (4935.0, 9555.0, 4935.0), localname (\"Guinea Ecuatorial\", \"HaÃ¯ti/Dayti\", \"kaNgwane\"), region (\"Antarctica\", \"Western Europe\", \"Micronesia\"), code (\"HRV\", \"BOL\", \"DEU\"), indepyear (1867, 1951, 1976), headofstate (\"Ãlafur Ragnar GrÃ­msson\", \"Qabus ibn SaÂ´id\", \"George W. Bush\"), surfacearea (331689.0, 3287263.0, 18575.0) | nation : capital (34, 185, 3065), name (\"Estonia\", \"Turks and Caicos Islands\", \"Taiwan\"), code2 (\"GU\", \"BY\", \"MT\"), lifeexpectancy (59.8, 70.8, 46.0), population (15942000, 5171300, 293000), continent (\"Oceania\", \"South America\", \"Antarctica\"), governmentform (\"Nonmetropolitan Territory of France\", \"Territory of Australia\", \"Territorial Collectivity of France\"), gnp (97.0, 116416.0, 650.0), gnpold (4935.0, 9555.0, 4935.0), localname (\"Guinea Ecuatorial\", \"HaÃ¯ti/Dayti\", \"kaNgwane\"), region (\"Antarctica\", \"Western Europe\", \"Micronesia\"), code (\"HRV\", \"BOL\", \"DEU\"), indepyear (1867, 1951, 1976), headofstate (\"Ãlafur Ragnar GrÃ­msson\", \"Qabus ibn SaÂ´id\", \"George W. Bush\"), surfacearea (331689.0, 3287263.0, 18575.0) | countrylanguage : isofficial (\"T\", \"F\"), language (\"Sinaberberi\", \"Mano\", \"Mari\"), percentage (11.5, 51.3, 8.6), countrycode (\"HUN\", \"TUV\", \"LKA\")",
        "ambiguous_queries": [
            "select name from nation where continent = 'Africa' and population < (select min(population) from nation where continent = 'Asia')",
            "select name from state where continent = 'Africa' and population < (select min(population) from state where continent = 'Asia')"
        ],
        "gold_ambiguity": {
            "match": "{\"Asia\": [{\"nation\": [\"continent\"]}, {\"state\": [\"continent\"]}], \"countries\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}], \"population\": [{\"nation\": [\"population\"]}, {\"state\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Asia\" refers to the schema \"state\".\"continent\", \"countries\" refers to the schema \"state\".\"name\", \"population\" refers to the schema \"state\".\"population\"",
        "clear_ambiguity": "{\"Asia\": {\"state\": [\"continent\"]}, \"countries\": {\"state\": [\"name\"]}, \"population\": {\"state\": [\"population\"]}}",
        "gold_query": "select name from state where continent = 'Africa' and population < (select min(population) from state where continent = 'Asia')"
    },
    {
        "index": 314,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "schema_without_content": "breeds : breed_name , breed_code  | treatments : treatment_id , professional_id , dog_id , treatment_type_code , date_of_treatment , cost_of_treatment  | owners : cell_number 399-3116\", \"121.381.3316x6535\", \"+709217952551\", last_name , zip_code , first_name , home_phone , city , email_address , owner_id , state , street  | Caregivers : home_phone 2898266914\", street , first_name , state , email_address , zip_code , role_code , city , cell_number 908-7311x065\", professional_id , last_name  | dogs : date_departed , weight , owner_id , name , size_code , age , breed_code , date_adopted , abandoned_yn , date_of_birth , dog_id , date_arrived , gender  | charges : charge_amount , charge_type , charge_id  | treatment_types : treatment_type_description , treatment_type_code  | sizes : size_description , size_code  | Handlers : home_phone 2898266914\", street , first_name , state , email_address , zip_code , role_code , city , cell_number 908-7311x065\", professional_id , last_name",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | treatments : treatment_id (8, 4, 1), professional_id (14, 4, 6), dog_id (7, 14, 7), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-23 13:52:10\", \"2018-03-14 19:10:40\"), cost_of_treatment (147, 681, 313) | owners : cell_number (\"(257)399-3116\", \"121.381.3316x6535\", \"+70(4)9217952551\"), last_name (\"Fisher\", \"Rippin\", \"Hauck\"), zip_code (\"92406\", \"25609\", \"22693\"), first_name (\"Tre\", \"Lorenz\", \"Nora\"), home_phone (\"066.264.7885\", \"1-682-845-0116x63235\", \"066.264.7885\"), city (\"Port Reannamouth\", \"Lake Tia\", \"New Margaretteborough\"), email_address (\"lynn81@example.org\", \"angeline99@example.com\", \"ymaggio@example.com\"), owner_id (10, 2, 11), state (\"Vermont\", \"Indiana\", \"Arkansas\"), street (\"59509 Mellie Mountain\", \"59509 Mellie Mountain\", \"1204 Mae Highway Apt. 107\") | Caregivers : home_phone (\"022.529.0550x1319\", \"346.594.3739\", \"+71(6)2898266914\"), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\"), first_name (\"Domenica\", \"Jayson\", \"Danny\"), state (\"NewMexico\", \"Hawaii\", \"Alabama\"), email_address (\"marquardt.furman@example.org\", \"deanna.schuster@example.com\", \"deanna.schuster@example.com\"), zip_code (\"84515\", \"07412\", \"54312\"), role_code (\"Employee\", \"Veterenarian\"), city (\"East Ila\", \"Domenickton\", \"Borisside\"), cell_number (\"880-659-7577x736\", \"880-659-7577x736\", \"(369)908-7311x065\"), professional_id (3, 12, 1), last_name (\"Pouros\", \"Braun\", \"Kshlerin\") | dogs : date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 06:29:10\", \"2018-03-25 04:42:14\"), weight (\"6.92\", \"6.92\", \"1.72\"), owner_id (10, 6, 2), name (\"Kacey\", \"Lyric\", \"Hipolito\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"6\", \"9\", \"4\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-23 16:02:04\", \"2018-03-10 15:06:43\", \"2018-03-14 08:05:18\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2009-04-12 06:02:48\", \"2017-09-19 05:39:09\", \"2017-09-19 05:39:09\"), dog_id (9, 9, 9), date_arrived (\"2017-06-25 10:14:05\", \"2017-06-18 19:45:38\", \"2017-04-20 00:58:55\"), gender (\"1\", \"0\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | Handlers : home_phone (\"022.529.0550x1319\", \"346.594.3739\", \"+71(6)2898266914\"), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\"), first_name (\"Domenica\", \"Jayson\", \"Danny\"), state (\"NewMexico\", \"Hawaii\", \"Alabama\"), email_address (\"marquardt.furman@example.org\", \"deanna.schuster@example.com\", \"deanna.schuster@example.com\"), zip_code (\"84515\", \"07412\", \"54312\"), role_code (\"Employee\", \"Veterenarian\"), city (\"East Ila\", \"Domenickton\", \"Borisside\"), cell_number (\"880-659-7577x736\", \"880-659-7577x736\", \"(369)908-7311x065\"), professional_id (3, 12, 1), last_name (\"Pouros\", \"Braun\", \"Kshlerin\")",
        "ambiguous_queries": [
            "select professional_id, role_code, email_address from handlers except select t1.professional_id, t1.role_code, t1.email_address from handlers as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
            "select professional_id, role_code, email_address from caregivers except select t1.professional_id, t1.role_code, t1.email_address from caregivers as t1 join treatments as t2 on t1.professional_id = t2.professional_id"
        ],
        "gold_ambiguity": {
            "match": "{\"email\": [{\"Caregivers\": [\"email_address\"]}, {\"Handlers\": [\"email_address\"]}], \"role\": [{\"Caregivers\": [\"role_code\"]}, {\"Handlers\": [\"role_code\"]}], \"id\": [{\"Caregivers\": [\"professional_id\"]}, {\"Handlers\": [\"professional_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"email\" refers to the schema \"handlers\".\"email_address\", \"role\" refers to the schema \"handlers\".\"role_code\", \"id\" refers to the schema \"handlers\".\"professional_id\"",
        "clear_ambiguity": "{\"email\": {\"Handlers\": [\"email_address\"]}, \"role\": {\"Handlers\": [\"role_code\"]}, \"id\": {\"Handlers\": [\"professional_id\"]}}",
        "gold_query": "select professional_id, role_code, email_address from handlers except select t1.professional_id, t1.role_code, t1.email_address from handlers as t1 join treatments as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "index": 315,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "What are the first names of all players, and their total ranking points?",
        "schema_without_content": "leaderboard : ranking_points , tours , ranking_date , ranking , player_id  | matches : winner_entry , loser_id , round , winner_hand , tourney_date , loser_hand , tourney_level , tourney_id , year , winner_seed , winner_name , winner_ioc , loser_rank_points , score , surface , loser_seed , loser_age , match_num , minutes , winner_rank_points , tourney_name , loser_ioc , winner_rank , winner_age , winner_ht , loser_name , best_of , draw_size , loser_ht , loser_entry , winner_id , loser_rank  | players : birth_date , country_code , hand , last_name , first_name , player_id  | standings : ranking_points , tours , ranking_date , ranking , player_id",
        "schema_with_content": "leaderboard : ranking_points (642, 1547, 201), tours (17, 30, 25), ranking_date (20161205, 19890710, 20130422), ranking (665, 1024, 75), player_id (203536, 214956, 204320) | matches : winner_entry (\"\"), loser_id (201521, 201539, 201540), round (\"R32\", \"R32\", \"BR\"), winner_hand (\"R\", \"L\"), tourney_date (20170626, 20160725, 20160404), loser_hand (\"R\", \"L\"), tourney_level (\"I\", \"I\", \"G\"), tourney_id (\"2016-0806\", \"2017-M021\", \"2017-M024\"), year (2013, 2016, 2017), winner_seed (14, 4, 4), winner_name (\"Karolina Pliskova\", \"Caroline Wozniacki\", \"Anastasia Pavlyuchenkova\"), winner_ioc (\"ROU\", \"USA\", \"BLR\"), loser_rank_points (5700, 5860, 5070), score (\"6-4 6-3 \", \"6-1 3-6 6-0\", \"6-3 4-6 6-4\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_seed (27, 15, 4), loser_age (25.2210814511, 34.483230663899995, 30.2313483915), match_num (254, 286, 212), minutes (121, 64, 137), winner_rank_points (3116, 2416, 3736), tourney_name (\"Washington\", \"Cincinnati\", \"Rabat\"), loser_ioc (\"POL\", \"ITA\", \"HUN\"), winner_rank (31, 17, 21), winner_age (27.1238877481, 28.2929500342, 25.601642710500002), winner_ht (161, 164, 180), loser_name (\"Ekaterina Makarova\", \"Ekaterina Makarova\", \"Elena Vesnina\"), best_of (3), draw_size (64, 8, 64), loser_ht (180, 174, 170), loser_entry (\"\"), winner_id (201594, 201311, 201535), loser_rank (56, 56, 1) | players : birth_date (19720417, 20011231, 20000728), country_code (\"EST\", \"POR\", \"TKM\"), hand (\"R\", \"L\", \"L\"), last_name (\"Kiyohara\", \"Takuma\", \"Runglerdkriangkrai\"), first_name (\"Plamena\", \"Sarahi\", \"Gal\"), player_id (209974, 208215, 207672) | standings : ranking_points (642, 1547, 201), tours (17, 30, 25), ranking_date (20161205, 19890710, 20130422), ranking (665, 1024, 75), player_id (203536, 214956, 204320)",
        "ambiguous_queries": [
            "select sum(ranking_points), t1.first_name from players as t1 join standings as t2 on t1.player_id = t2.player_id group by t1.first_name",
            "select sum(ranking_points), t1.first_name from players as t1 join leaderboard as t2 on t1.player_id = t2.player_id group by t1.first_name"
        ],
        "gold_ambiguity": {
            "match": "{\"ranking points\": [{\"leaderboard\": [\"ranking_points\"]}, {\"standings\": [\"ranking_points\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ranking points\" refers to the schema \"standings\".\"ranking_points\"",
        "clear_ambiguity": "{\"ranking points\": {\"standings\": [\"ranking_points\"]}}",
        "gold_query": "select sum(ranking_points), t1.first_name from players as t1 join standings as t2 on t1.player_id = t2.player_id group by t1.first_name"
    },
    {
        "index": 316,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "schema_without_content": "director : name , conductor_id , age , nationality , year_of_work  | maestro : name , conductor_id , age , nationality , year_of_work  | show : result , attendance , if_first_show , performance_id , show_id  | performance : date , type , performance_id , orchestra_id , share , official_ratings_ , weekly_rank  | orchestra : major_record_format , record_company , orchestra_id , conductor_id , orchestra , year_of_founded",
        "schema_with_content": "director : name (\"Robert Craft\", \"Charles Dutoit\", \"Antal DorÃ¡ti\"), conductor_id (3, 8, 7), age (42, 49, 49), nationality (\"USA\", \"UK\", \"France\"), year_of_work (20, 6, 21) | maestro : name (\"Robert Craft\", \"Charles Dutoit\", \"Antal DorÃ¡ti\"), conductor_id (3, 8, 7), age (42, 49, 49), nationality (\"USA\", \"UK\", \"France\"), year_of_work (20, 6, 21) | show : result (\"T\", \"F\"), attendance (1925.0, 1026.0, 2431.0), if_first_show (\"St. Mirren Park\", \"Glebe Park\", \"St. Mirren Park\"), performance_id (5, 4, 4), show_id (2, 3, 5) | performance : date (\"10 June\", \"9 June\", \"10 June\"), type (\"Auditions 1\", \"Auditions 1\", \"Live final\"), performance_id (5, 9, 6), orchestra_id (1, 2, 3), share (\"44.7%\", \"34%\", \"34.0%\"), official_ratings_(millions) (8.38, 8.36, 11.58), weekly_rank (\"TBC\", \"11\", \"7\") | orchestra : major_record_format (\"CD\", \"CD / LP\", \"DVD\"), record_company (\"RCA\", \"Columbia Masterworks\", \"Koch Records / Naxos Records\"), orchestra_id (10, 7, 10), conductor_id (7, 12, 3), orchestra (\"Detroit Symphony Orchestra\", \"Chicago Symphony Orchestra\", \"Kirov Orchestra\"), year_of_founded (2006.0, 2009.0, 2008.0)",
        "ambiguous_queries": [
            "select t1.name from director as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
            "select t1.name from maestro as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008"
        ],
        "gold_ambiguity": {
            "match": "{\"founded\": [{\"director\": [\"year_of_founded\"]}, {\"maestro\": [\"year_of_founded\"]}], \"names\": [{\"director\": [\"name\"]}, {\"maestro\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"founded\" refers to the schema \"maestro\".\"year_of_founded\", \"names\" refers to the schema \"maestro\".\"name\"",
        "clear_ambiguity": "{\"founded\": {\"maestro\": [\"year_of_founded\"]}, \"names\": {\"maestro\": [\"name\"]}}",
        "gold_query": "select t1.name from maestro as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008"
    },
    {
        "index": 317,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "table",
        "db_file": "table/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the template type code for template type description \"Book\".",
        "schema_without_content": "Type_Templates : template_type_description , template_type_code  | documents : template_id , document_id , other_details , document_name , document_description  | Template_Types_Reference : template_type_description , template_type_code  | paragraphs : paragraph_id , other_details , paragraph_text , document_id  | templates : template_type_code , date_effective_to , template_details , version_number , template_id , date_effective_from",
        "schema_with_content": "Type_Templates : template_type_description (\"Paper\", \"Book\", \"Paper\"), template_type_code (\"AD\", \"AD\", \"PP\") | documents : template_id (14, 22, 14), document_id (801801, 82, 76), other_details (None), document_name (\"Summer Show\", \"Customer reviews\", \"Customer reviews\"), document_description (\"k\", \"z\", \"n\") | Template_Types_Reference : template_type_description (\"Paper\", \"Book\", \"Paper\"), template_type_code (\"AD\", \"AD\", \"PP\") | paragraphs : paragraph_id (65, 280120913, 946335436), other_details (None), paragraph_text (\"Jersey\", \"Ukraine\", \"Ireland\"), document_id (651512, 80, 385906526) | templates : template_type_code (\"PP\", \"PP\", \"PP\"), date_effective_to (\"1974-09-14 06:34:39\", \"1979-11-04 08:58:39\", \"1992-05-02 20:06:11\"), template_details (\"\"), version_number (1, 4, 1), template_id (24, 21, 9), date_effective_from (\"2008-08-01 13:57:26\", \"1979-12-24 10:28:16\", \"1984-08-07 13:36:26\")",
        "ambiguous_queries": [
            "select template_type_code from template_types_reference where template_type_description = 'Book'",
            "select template_type_code from type_templates where template_type_description = 'Book'"
        ],
        "gold_ambiguity": {
            "match": "{\"template type code\": [{\"Template_Types_Reference\": [\"template_type_code\"]}, {\"Type_Templates\": [\"template_type_code\"]}], \"template type description\": [{\"Template_Types_Reference\": [\"template_type_description\"]}, {\"Type_Templates\": [\"template_type_description\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template type code\" refers to the schema \"template_types_reference\".\"template_type_code\", \"template type description\" refers to the schema \"template_types_reference\".\"template_type_description\"",
        "clear_ambiguity": "{\"template type code\": {\"Template_Types_Reference\": [\"template_type_code\"]}, \"template type description\": {\"Template_Types_Reference\": [\"template_type_description\"]}}",
        "gold_query": "select template_type_code from template_types_reference where template_type_description = 'Book'"
    },
    {
        "index": 318,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Find all airlines that have fewer than 200 flights.",
        "schema_without_content": "flights : airline , flightno , sourceairport , destairport  | airports : city , airportcode , airportname , countryabbrev , country  | aviation_companies : airline , country , uid , abbreviation  | carriers : airline , country , uid , abbreviation",
        "schema_with_content": "flights : airline (6, 2, 3), flightno (889, 276, 1534), sourceairport (\" AID\", \" ACV\", \" RLI\"), destairport (\" ABL\", \" KQA\", \" APV\") | airports : city (\"Albert Lea \", \"Amery \", \"Anderson \"), airportcode (\"AIK\", \"AXG\", \"AEX\"), airportname (\"Merrill Field \", \"Spb \", \"Orange County Steel Salvage Heliport \"), countryabbrev (\"US \", \"US\"), country (\"United States \") | aviation_companies : airline (\"Virgin America\", \"JetBlue Airways\", \"US Airways\"), country (\"USA\"), uid (5, 11, 5), abbreviation (\"USAir\", \"Continental\", \"Frontier\") | carriers : airline (\"Virgin America\", \"JetBlue Airways\", \"US Airways\"), country (\"USA\"), uid (5, 11, 5), abbreviation (\"USAir\", \"Continental\", \"Frontier\")",
        "ambiguous_queries": [
            "select t1.airline from carriers as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
            "select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200"
        ],
        "gold_ambiguity": {
            "match": "{\"airlines\": [{\"carriers\": [\"airline\"]}, {\"aviation_companies\": [\"airline\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airlines\" refers to the schema \"aviation_companies\".\"airline\"",
        "clear_ambiguity": "{\"airlines\": {\"aviation_companies\": [\"airline\"]}}",
        "gold_query": "select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200"
    },
    {
        "index": 319,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "schema_without_content": "transcript_contents : student_course_id , transcript_id  | student_enrolment : degree_program_id , semester_id , other_details , student_enrolment_id , student_id  | addresses : line_3 , city , country , zip_postcode , line_1 , other_address_details , line_2 , state_province_county , address_id  | departments : department_name , department_id , department_description , other_details  | transcripts : other_details , transcript_date , transcript_id  | courses : other_details , course_name , course_id , course_description  | sections : other_details , section_id , section_description , section_name , course_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | Pupils : student_id , cell_mobile_number 889-8954x524\", \"445-0399x85208\", \"171-642-5684\", email_address , date_left , ssn , last_name , date_first_registered , middle_name , other_student_details , permanent_address_id , first_name , current_address_id  | Learners : student_id , cell_mobile_number 889-8954x524\", \"445-0399x85208\", \"171-642-5684\", email_address , date_left , ssn , last_name , date_first_registered , middle_name , other_student_details , permanent_address_id , first_name , current_address_id  | semesters : other_details , semester_id , semester_name , semester_description  | degree_programs : degree_program_id , other_details , department_id , degree_summary_description , degree_summary_name",
        "schema_with_content": "transcript_contents : student_course_id (70882679, 7, 7), transcript_id (12, 6, 5) | student_enrolment : degree_program_id (12, 5, 3), semester_id (2, 4, 15), other_details (None), student_enrolment_id (13, 14, 4), student_id (7, 7, 9) | addresses : line_3 (None), city (\"Port Evanston\", \"Prohaskafort\", \"Michelleburgh\"), country (\"Haiti\", \"Iceland\", \"Croatia\"), zip_postcode (\"400\", \"590\", \"541\"), line_1 (\"3999 Aufderhar Ways Suite 593\", \"186 Evan Motorway Apt. 409\", \"0643 Muller Vista\"), other_address_details (None), line_2 (\"Apt. 388\", \"Apt. 583\", \"Suite 239\"), state_province_county (\"Florida\", \"SouthDakota\", \"Florida\"), address_id (3, 11, 3) | departments : department_name (\"math\", \"drama\", \"linguistic\"), department_id (8, 6, 15), department_description (\"nostrum\", \"natus\", \"aliquam\"), other_details (None) | transcripts : other_details (None), transcript_date (\"1984-01-18 23:07:07\", \"1990-03-05 11:59:41\", \"1975-10-28 15:16:51\"), transcript_id (15, 13, 8) | courses : other_details (None), course_name (\"os\", \"oop\", \"oop\"), course_id (7, 5, 11), course_description (\"w\", \"p\", \"b\") | sections : other_details (None), section_id (7, 5, 8), section_description (\"quis\", \"et\", \"ad\"), section_name (\"f\", \"p\", \"h\"), course_id (6, 8, 5) | student_enrolment_courses : student_enrolment_id (9, 2, 5), student_course_id (70882679, 8, 2), course_id (6, 13, 11) | Pupils : student_id (12, 5, 5), cell_mobile_number (\"(096)889-8954x524\", \"(213)445-0399x85208\", \"171-642-5684\"), email_address (\"mya88@example.org\", \"mya88@example.org\", \"gracie29@example.com\"), date_left (\"1990-09-01 05:03:27\", \"1975-10-09 00:49:27\", \"2007-08-02 04:12:58\"), ssn (\"\", \"141072406\", \"34458427\"), last_name (\"Gleichner\", \"Mohr\", \"Christiansen\"), date_first_registered (\"1976-10-26 02:33:06\", \"1971-02-05 07:28:23\", \"2018-03-13 09:56:22\"), middle_name (\"Cleve\", \"Cleve\", \"Vaughn\"), other_student_details (\"facilis\", \"rerum\", \"voluptatem\"), permanent_address_id (11, 11, 14), first_name (\"Warren\", \"Reva\", \"Jordy\"), current_address_id (12, 1, 2) | Learners : student_id (12, 5, 5), cell_mobile_number (\"(096)889-8954x524\", \"(213)445-0399x85208\", \"171-642-5684\"), email_address (\"mya88@example.org\", \"mya88@example.org\", \"gracie29@example.com\"), date_left (\"1990-09-01 05:03:27\", \"1975-10-09 00:49:27\", \"2007-08-02 04:12:58\"), ssn (\"\", \"141072406\", \"34458427\"), last_name (\"Gleichner\", \"Mohr\", \"Christiansen\"), date_first_registered (\"1976-10-26 02:33:06\", \"1971-02-05 07:28:23\", \"2018-03-13 09:56:22\"), middle_name (\"Cleve\", \"Cleve\", \"Vaughn\"), other_student_details (\"facilis\", \"rerum\", \"voluptatem\"), permanent_address_id (11, 11, 14), first_name (\"Warren\", \"Reva\", \"Jordy\"), current_address_id (12, 1, 2) | semesters : other_details (None), semester_id (9, 7, 7), semester_name (\"spring 2012\", \"fall 2018\", \"winter 2018\"), semester_description (\"c\", \"f\", \"t\") | degree_programs : degree_program_id (9, 4, 13), other_details (None), department_id (13, 4, 2), degree_summary_description (\"architecto\", \"aut\", \"assumenda\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\")",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from learners order by date_left asc limit 1",
            "select first_name, middle_name, last_name from pupils order by date_left asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"graduate\": [{\"Learners\": [\"date_left\"]}, {\"Pupils\": [\"date_left\"]}], \"last name\": [{\"Learners\": [\"last_name\"]}, {\"Pupils\": [\"last_name\"]}], \"first\": [{\"Learners\": [\"first_name\"]}, {\"Pupils\": [\"first_name\"]}], \"middle\": [{\"Learners\": [\"middle_name\"]}, {\"Pupils\": [\"middle_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"graduate\" refers to the schema \"learners\".\"date_left\", \"last name\" refers to the schema \"learners\".\"last_name\", \"first\" refers to the schema \"learners\".\"first_name\", \"middle\" refers to the schema \"learners\".\"middle_name\"",
        "clear_ambiguity": "{\"graduate\": {\"Learners\": [\"date_left\"]}, \"last name\": {\"Learners\": [\"last_name\"]}, \"first\": {\"Learners\": [\"first_name\"]}, \"middle\": {\"Learners\": [\"middle_name\"]}}",
        "gold_query": "select first_name, middle_name, last_name from learners order by date_left asc limit 1"
    },
    {
        "index": 320,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "schema_without_content": "TV_program : 18_49_rating_share , viewers_m , share , id , weekly_rank , air_date , rating , episode , channel  | cartoon : written_by , production_code , id , channel , title , original_air_date , directed_by  | TV_show : 18_49_rating_share , viewers_m , share , id , weekly_rank , air_date , rating , episode , channel  | tv_channel : hight_definition_tv , pixel_aspect_ratio_par , pay_per_view_ppv , series_name , country , content , id , package_option \", \"Sky Famiglia\", language",
        "schema_with_content": "TV_program : 18_49_rating_share (\"3.2/8\", \"2.4/6\", \"2.1/5\"), viewers_m (\"6.09\", \"6.94\", \"9.16\"), share (6.0, 7.0, 9.0), id (1.0, 9.0, 7.0), weekly_rank (43.0, 65.0, 67.0), air_date (\"November 19, 2007\", \"December 17, 2007\", \"October 15, 2007\"), rating (\"3.7\", \"4.0\", \"4.0\"), episode (\"Winterland\", \"Friendly Skies\", \"Winterland\"), channel (\"708\", \"728\", \"708\") | cartoon : written_by (\"J. M. DeMatteis\", \"Adam Beechen\", \"Todd Casey\"), production_code (112.0, 111.0, 107.0), id (11.0, 4.0, 5.0), channel (\"703\", \"705\", \"728\"), title (\"Terror on Dinosaur Island!\", \"Terror on Dinosaur Island!\", \"The Rise of the Blue Beetle!\"), original_air_date (\"December12,2008\", \"December5,2008\", \"November14,2008\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\") | TV_show : 18_49_rating_share (\"3.2/8\", \"2.4/6\", \"2.1/5\"), viewers_m (\"6.09\", \"6.94\", \"9.16\"), share (6.0, 7.0, 9.0), id (1.0, 9.0, 7.0), weekly_rank (43.0, 65.0, 67.0), air_date (\"November 19, 2007\", \"December 17, 2007\", \"October 15, 2007\"), rating (\"3.7\", \"4.0\", \"4.0\"), episode (\"Winterland\", \"Friendly Skies\", \"Winterland\"), channel (\"708\", \"728\", \"708\") | tv_channel : hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), pay_per_view_ppv (\"no\"), series_name (\"MTV Live HD\", \"Sky Music\", \"Radio Capital TiVÃ¹\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), id (\"715\", \"709\", \"717\"), package_option (\"Option\", \"no ( FTV )\", \"Sky Famiglia\"), language (\"Italian\", \"English\")",
        "ambiguous_queries": [
            "select air_date from tv_show where episode = 'A Love of a Lifetime'",
            "select air_date from tv_program where episode = 'A Love of a Lifetime'"
        ],
        "gold_ambiguity": {
            "match": "{\"When\": [{\"TV_program\": [\"air_date\"]}, {\"TV_show\": [\"air_date\"]}], \"episode\": [{\"TV_program\": [\"episode\"]}, {\"TV_show\": [\"episode\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"When\" refers to the schema \"tv_show\".\"air_date\", \"episode\" refers to the schema \"tv_show\".\"episode\"",
        "clear_ambiguity": "{\"When\": {\"TV_show\": [\"air_date\"]}, \"episode\": {\"TV_show\": [\"episode\"]}}",
        "gold_query": "select air_date from tv_show where episode = 'A Love of a Lifetime'"
    },
    {
        "index": 321,
        "db_id": "concert_singer",
        "ambig_type": "table",
        "db_file": "table/concert_singer/concert_singer.sqlite",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "schema_without_content": "gig : theme , concert_name , concert_id , stadium_id , year  | singer : country , singer_id , song_release_year , song_name , age , is_male , name  | performance : theme , concert_name , concert_id , stadium_id , year  | singer_in_concert : concert_id , singer_id  | stadium : capacity , highest , stadium_id , lowest , average , name , location",
        "schema_with_content": "gig : theme (\"Bleeding Love\", \"Free choice\", \"Free choice 2\"), concert_name (\"Home Visits\", \"Week 1\", \"Week 1\"), concert_id (4, 5, 5), stadium_id (\"2\", \"7\", \"7\"), year (\"2014\", \"2015\") | singer : country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 1, 2), song_release_year (\"2008\", \"1992\", \"2014\"), song_name (\"Love\", \"Gentleman\", \"Love\"), age (32, 52, 41), is_male (\"F\", \"T\"), name (\"Timbaland\", \"Rose White\", \"Rose White\") | performance : theme (\"Bleeding Love\", \"Free choice\", \"Free choice 2\"), concert_name (\"Home Visits\", \"Week 1\", \"Week 1\"), concert_id (4, 5, 5), stadium_id (\"2\", \"7\", \"7\"), year (\"2014\", \"2015\") | singer_in_concert : concert_id (6, 5, 2), singer_id (\"5\", \"3\", \"4\") | stadium : capacity (3100, 3100, 52500), highest (2363, 837, 921), stadium_id (3, 1, 6), lowest (466, 1294, 315), average (864, 638, 638), name (\"Recreation Park\", \"Recreation Park\", \"Recreation Park\"), location (\"Raith Rovers\", \"East Fife\", \"Raith Rovers\")",
        "ambiguous_queries": [
            "select t2.name, t2.location from gig as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from gig as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
            "select t2.name, t2.location from performance as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from performance as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015"
        ],
        "gold_ambiguity": {
            "match": "{\"years\": [{\"gig\": [\"year\"]}, {\"performance\": [\"year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"years\" refers to the schema \"performance\".\"year\"",
        "clear_ambiguity": "{\"years\": {\"performance\": [\"year\"]}}",
        "gold_query": "select t2.name, t2.location from performance as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from performance as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015"
    },
    {
        "index": 322,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "schema_without_content": "Broadcasting_Channel : pay_per_view_ppv , id , pixel_aspect_ratio_par , country , series_name , package_option \", \"no \", \"Sky Famiglia\", hight_definition_tv , content , language  | cartoon : directed_by , original_air_date , id , production_code , written_by , title , channel  | Television_Channel : pay_per_view_ppv , id , pixel_aspect_ratio_par , country , series_name , package_option \", \"no \", \"Sky Famiglia\", hight_definition_tv , content , language  | tv_series : weekly_rank , id , viewers_m , rating , episode , channel , share , air_date , 18_49_rating_share",
        "schema_with_content": "Broadcasting_Channel : pay_per_view_ppv (\"no\"), id (\"709\", \"700\", \"706\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"myDeejay\", \"Sky Music\", \"Match Music\"), package_option (\"no ( FTV )\", \"no ( FTV )\", \"Sky Famiglia\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), language (\"Italian\", \"English\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"February27,2009\", \"January2,2009\", \"February6,2009\"), id (11.0, 3.0, 6.0), production_code (105.0, 101.0, 112.0), written_by (\"Joseph Kuhr\", \"Todd Casey\", \"Steven Melching\"), title (\"Invasion of the Secret Santas!\", \"The Eyes of Despero!\", \"Journey to the Center of the Bat!\"), channel (\"705\", \"703\", \"704\") | Television_Channel : pay_per_view_ppv (\"no\"), id (\"709\", \"700\", \"706\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"myDeejay\", \"Sky Music\", \"Match Music\"), package_option (\"no ( FTV )\", \"no ( FTV )\", \"Sky Famiglia\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), language (\"Italian\", \"English\") | tv_series : weekly_rank (68.0, 65.0, 61.0), id (4.0, 2.0, 10.0), viewers_m (\"6.05\", \"6.05\", \"6.94\"), rating (\"3.0\", \"5.3\", \"5.3\"), episode (\"The Legend of Dylan McCleen\", \"The Hanged Man\", \"The Year of the Rabbit\"), channel (\"700\", \"700\", \"713\"), share (9.0, 5.0, 9.0), air_date (\"October 29, 2007\", \"October 29, 2007\", \"November 5, 2007\"), 18_49_rating_share (\"2.9/7\", \"3.2/8\", \"2.1/5\")",
        "ambiguous_queries": [
            "select t1.series_name from broadcasting_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = 'The Rise of the Blue Beetle!'",
            "select t1.series_name from television_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = 'The Rise of the Blue Beetle!'"
        ],
        "gold_ambiguity": {
            "match": "{\"series name\": [{\"Broadcasting_Channel\": [\"series_name\"]}, {\"Television_Channel\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"series name\" refers to the schema \"television_channel\".\"series_name\"",
        "clear_ambiguity": "{\"series name\": {\"Television_Channel\": [\"series_name\"]}}",
        "gold_query": "select t1.series_name from television_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = 'The Rise of the Blue Beetle!'"
    },
    {
        "index": 323,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Give the names of nations that speak both English and French.",
        "schema_without_content": "countrylanguage : countrycode , isofficial , language , percentage  | sqlite_sequence : name , seq  | city : id , countrycode , name , district , population  | nation : continent , localname , code , surfacearea , gnp , name , indepyear , headofstate , region , population , code2 , lifeexpectancy , gnpold , governmentform , capital  | state : continent , localname , code , surfacearea , gnp , name , indepyear , headofstate , region , population , code2 , lifeexpectancy , gnpold , governmentform , capital",
        "schema_with_content": "countrylanguage : countrycode (\"AZE\", \"BRB\", \"AZE\"), isofficial (\"T\", \"F\"), language (\"Gurma\", \"Nung\", \"Belorussian\"), percentage (7.1, 30.0, 4.6) | sqlite_sequence : name (\"city\"), seq (4079) | city : id (1673, 2439, 4058), countrycode (\"SUR\", \"VNM\", \"GUF\"), name (\"Stuttgart\", \"Abottabad\", \"Etawah\"), district (\"West Kasai\", \"Attika\", \"St. Catherine\"), population (235073, 100447, 281352) | nation : continent (\"North America\", \"Europe\", \"North America\"), localname (\"As-Sahrawiya\", \"Al-Urdunn\", \"TÃ¼rkmenostan\"), code (\"VNM\", \"HUN\", \"KIR\"), surfacearea (185180.0, 923768.0, 26338.0), gnp (8255.0, 97.0, 3527.0), name (\"Mongolia\", \"Czech Republic\", \"Poland\"), indepyear (1841, 1945, 1066), headofstate (\"Vicente Fox Quesada\", \"Hamad ibn Isa al-Khalifa\", \"Bernard Dowiyogo\"), region (\"Australia and New Zealand\", \"Micronesia/Caribbean\", \"Australia and New Zealand\"), population (4807000, 3869000, 4699000), code2 (\"TK\", \"GQ\", \"PK\"), lifeexpectancy (77.0, 63.4, 71.4), gnpold (2287.0, 1084.0, 858.0), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"People'sRepublic\", \"Islamic Emirate\"), capital (553, 2726, 3172) | state : continent (\"North America\", \"Europe\", \"North America\"), localname (\"As-Sahrawiya\", \"Al-Urdunn\", \"TÃ¼rkmenostan\"), code (\"VNM\", \"HUN\", \"KIR\"), surfacearea (185180.0, 923768.0, 26338.0), gnp (8255.0, 97.0, 3527.0), name (\"Mongolia\", \"Czech Republic\", \"Poland\"), indepyear (1841, 1945, 1066), headofstate (\"Vicente Fox Quesada\", \"Hamad ibn Isa al-Khalifa\", \"Bernard Dowiyogo\"), region (\"Australia and New Zealand\", \"Micronesia/Caribbean\", \"Australia and New Zealand\"), population (4807000, 3869000, 4699000), code2 (\"TK\", \"GQ\", \"PK\"), lifeexpectancy (77.0, 63.4, 71.4), gnpold (2287.0, 1084.0, 858.0), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"People'sRepublic\", \"Islamic Emirate\"), capital (553, 2726, 3172)",
        "ambiguous_queries": [
            "select t1.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'",
            "select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"state\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"state\": [\"name\"]}}",
        "gold_query": "select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'"
    },
    {
        "index": 324,
        "db_id": "course_teach",
        "ambig_type": "table",
        "db_file": "table/course_teach/course_teach.sqlite",
        "question": "Show names of teachers and the number of courses they teach.",
        "schema_without_content": "course_arrange : course_id , teacher_id , grade  | instructor : name , teacher_id , hometown , age  | professor : name , teacher_id , hometown , age  | course : course_id , staring_date , course",
        "schema_with_content": "course_arrange : course_id (4, 4, 10), teacher_id (5, 7, 7), grade (3, 1, 1) | instructor : name (\"Gustaaf Deloor\", \"John Deloor\", \"Anne Walker\"), teacher_id (5, 2, 1), hometown (\"Kearsley Urban District\", \"Horwich Urban District\", \"Little Lever Urban District\"), age (\"33\", \"45\", \"45\") | professor : name (\"Gustaaf Deloor\", \"John Deloor\", \"Anne Walker\"), teacher_id (5, 2, 1), hometown (\"Kearsley Urban District\", \"Horwich Urban District\", \"Little Lever Urban District\"), age (\"33\", \"45\", \"45\") | course : course_id (8, 10, 9), staring_date (\"17 May\", \"5 May\", \"15 May\"), course (\"Bible\", \"Geography\", \"Music\")",
        "ambiguous_queries": [
            "select t2.name, count(*) from course_arrange as t1 join instructor as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
            "select t2.name, count(*) from course_arrange as t1 join professor as t2 on t1.teacher_id = t2.teacher_id group by t2.name"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"instructor\": [\"name\"]}, {\"professor\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"instructor\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"instructor\": [\"name\"]}}",
        "gold_query": "select t2.name, count(*) from course_arrange as t1 join instructor as t2 on t1.teacher_id = t2.teacher_id group by t2.name"
    },
    {
        "index": 325,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What is the count of the car models produced in the United States?",
        "schema_without_content": "car_names : make , model , makeid  | continents : continent , contid  | car_makers : id , maker , country , fullname  | state : countryname , countryid , continent  | cars_data : edispl , year , mpg , weight , horsepower , cylinders , id , accelerate  | nation : countryname , countryid , continent  | model_list : maker , modelid , model",
        "schema_with_content": "car_names : make (\"pontiac grand prix lj\", \"ford pinto runabout\", \"mercury marquis brougham\"), model (\"triumph\", \"cadillac\", \"hi\"), makeid (383, 87, 351) | continents : continent (\"europe\", \"europe\", \"europe\"), contid (1, 2, 2) | car_makers : id (15, 4, 19), maker (\"honda\", \"daimler benz\", \"toyota\"), country (\"6\", \"7\", \"7\"), fullname (\"Triumph\", \"Kia Motors\", \"Triumph\") | state : countryname (\"usa\", \"brazil\", \"korea\"), countryid (9, 4, 5), continent (2, 4, 3) | cars_data : edispl (101.0, 198.0, 146.0), year (1970, 1975, 1977), mpg (\"20.3\", \"40.8\", \"15.5\"), weight (2585, 2046, 2290), horsepower (\"210\", \"149\", \"230\"), cylinders (3, 6, 5), id (250, 310, 245), accelerate (17.0, 13.5, 9.0) | nation : countryname (\"usa\", \"brazil\", \"korea\"), countryid (9, 4, 5), continent (2, 4, 3) | model_list : maker (3, 10, 15), modelid (28, 20, 14), model (\"nissan\", \"bmw\", \"fiat\")",
        "ambiguous_queries": [
            "select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join nation as t3 on t2.country = t3.countryid where t3.countryname = 'usa'",
            "select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join state as t3 on t2.country = t3.countryid where t3.countryname = 'usa'"
        ],
        "gold_ambiguity": {
            "match": "{\"United States\": [{\"nation\": [\"countryname\"]}, {\"state\": [\"countryname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"United States\" refers to the schema \"nation\".\"countryname\"",
        "clear_ambiguity": "{\"United States\": {\"nation\": [\"countryname\"]}}",
        "gold_query": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join nation as t3 on t2.country = t3.countryid where t3.countryname = 'usa'"
    },
    {
        "index": 326,
        "db_id": "concert_singer",
        "ambig_type": "table",
        "db_file": "table/concert_singer/concert_singer.sqlite",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "schema_without_content": "concert : theme , concert_name , concert_id , stadium_id , year  | venue : name , average , capacity , location , stadium_id , highest , lowest  | arena : name , average , capacity , location , stadium_id , highest , lowest  | singer : singer_id , country , age , song_name , name , is_male , song_release_year  | singer_in_concert : concert_id , singer_id",
        "schema_with_content": "concert : theme (\"Wide Awake\", \"Free choice 2\", \"Party All Night\"), concert_name (\"Week 2\", \"Auditions\", \"Week 2\"), concert_id (5, 6, 5), stadium_id (\"10\", \"1\", \"10\"), year (\"2014\", \"2015\") | venue : name (\"Stark's Park\", \"Gayfield Park\", \"Hampden Park\"), average (642, 638, 2106), capacity (10104, 3100, 4125), location (\"Alloa Athletic\", \"Brechin City\", \"Stirling Albion\"), stadium_id (2, 1, 3), highest (921, 1125, 780), lowest (533, 404, 1057) | arena : name (\"Stark's Park\", \"Gayfield Park\", \"Hampden Park\"), average (642, 638, 2106), capacity (10104, 3100, 4125), location (\"Alloa Athletic\", \"Brechin City\", \"Stirling Albion\"), stadium_id (2, 1, 3), highest (921, 1125, 780), lowest (533, 404, 1057) | singer : singer_id (2, 2, 2), country (\"Netherlands\", \"United States\", \"France\"), age (52, 29, 29), song_name (\"Gentleman\", \"Love\", \"Gentleman\"), name (\"Timbaland\", \"Tribal King\", \"Rose White\"), is_male (\"F\", \"T\"), song_release_year (\"2013\", \"1992\", \"2003\") | singer_in_concert : concert_id (1, 3, 4), singer_id (\"4\", \"6\", \"2\")",
        "ambiguous_queries": [
            "select location, name from arena where capacity between 5000 and 10000",
            "select location, name from venue where capacity between 5000 and 10000"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"capacity\": [{\"arena\": [\"capacity\"]}, {\"venue\": [\"capacity\"]}], \"locations\": [{\"arena\": [\"location\"]}, {\"venue\": [\"location\"]}], \"names\": [{\"arena\": [\"name\"]}, {\"venue\": [\"name\"]}]}"
        },
        "clarification_context": "\"capacity\" refers to the schema \"venue\".\"capacity\", \"locations\" refers to the schema \"venue\".\"location\", \"names\" refers to the schema \"venue\".\"name\"",
        "clear_ambiguity": "{\"capacity\": {\"venue\": [\"capacity\"]}, \"locations\": {\"venue\": [\"location\"]}, \"names\": {\"venue\": [\"name\"]}}",
        "gold_query": "select location, name from venue where capacity between 5000 and 10000"
    },
    {
        "index": 327,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Which city is the most frequent source airport?",
        "schema_without_content": "airlines : country , airline , abbreviation , uid  | departure_points : country , airportcode , countryabbrev , airportname , city  | arrival_points : country , airportcode , countryabbrev , airportname , city  | flights : airline , destairport , sourceairport , flightno",
        "schema_with_content": "airlines : country (\"USA\"), airline (\"Frontier Airlines\", \"Northwest Airlines\", \"JetBlue Airways\"), abbreviation (\"Northwest\", \"Delta\", \"American\"), uid (12, 6, 1) | departure_points : country (\"United States \"), airportcode (\"ANC\", \"ABY\", \"ALI\"), countryabbrev (\"US \", \"US\"), airportname (\"Arctic Village \", \"Albany \", \"Ainsworth \"), city (\"Ainsworth \", \"Adak Island \", \"Apple Valley \") | arrival_points : country (\"United States \"), airportcode (\"ANC\", \"ABY\", \"ALI\"), countryabbrev (\"US \", \"US\"), airportname (\"Arctic Village \", \"Albany \", \"Ainsworth \"), city (\"Ainsworth \", \"Adak Island \", \"Apple Valley \") | flights : airline (4, 10, 7), destairport (\" AKC\", \" ANA\", \" ABR\"), sourceairport (\" ATO\", \" ATW\", \" AND\"), flightno (193, 821, 199)",
        "ambiguous_queries": [
            "select t1.city from departure_points as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
            "select t1.city from arrival_points as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"city\": [{\"arrival_points\": [\"city\"]}, {\"departure_points\": [\"city\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"city\" refers to the schema \"arrival_points\".\"city\"",
        "clear_ambiguity": "{\"city\": {\"arrival_points\": [\"city\"]}}",
        "gold_query": "select t1.city from arrival_points as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1"
    },
    {
        "index": 328,
        "db_id": "course_teach",
        "ambig_type": "table",
        "db_file": "table/course_teach/course_teach.sqlite",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "schema_without_content": "timetable : course_id , teacher_id , grade  | class_schedule : course_id , teacher_id , grade  | teacher : teacher_id , age , hometown , name  | course : staring_date , course_id , course",
        "schema_with_content": "timetable : course_id (10, 5, 5), teacher_id (7, 5, 7), grade (3, 5, 4) | class_schedule : course_id (10, 5, 5), teacher_id (7, 5, 7), grade (3, 5, 4) | teacher : teacher_id (7, 2, 4), age (\"45\", \"29\", \"33\"), hometown (\"Kearsley Urban District\", \"Bolton County Borough\", \"Farnworth Municipal Borough\"), name (\"Kearsley Brown\", \"John Deloor\", \"Joseph Huts\") | course : staring_date (\"17 May\", \"7 May\", \"14 May\"), course_id (6, 6, 2), course (\"Math\", \"Music\", \"Health\")",
        "ambiguous_queries": [
            "select name from teacher where teacher_id not in (select teacher_id from class_schedule)",
            "select name from teacher where teacher_id not in (select teacher_id from timetable)"
        ],
        "gold_ambiguity": {
            "match": "{\"teachers\": [{\"class_schedule\": [\"teacher_id\"]}, {\"timetable\": [\"teacher_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"teachers\" refers to the schema \"timetable\".\"teacher_id\"",
        "clear_ambiguity": "{\"teachers\": {\"timetable\": [\"teacher_id\"]}}",
        "gold_query": "select name from teacher where teacher_id not in (select teacher_id from timetable)"
    },
    {
        "index": 329,
        "db_id": "network_1",
        "ambig_type": "table",
        "db_file": "table/network_1/network_1.sqlite",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "schema_without_content": "highschooler : grade , name , id  | Acquaintance : friend_id , student_id  | likes : liked_id , student_id  | Connection : friend_id , student_id",
        "schema_with_content": "highschooler : grade (11, 9, 10), name (\"Kyle\", \"Jessica\", \"Alexis\"), id (1641, 1304, 1101) | Acquaintance : friend_id (1782, 1101, 1025), student_id (1247, 1247, 1709) | likes : liked_id (1101, 1689, 1304), student_id (1934, 1247, 1316) | Connection : friend_id (1782, 1101, 1025), student_id (1247, 1247, 1709)",
        "ambiguous_queries": [
            "select t2.name from connection as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id",
            "select t2.name from acquaintance as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"Connection\": [\"name\"]}, {\"Acquaintance\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"connection\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"Connection\": [\"name\"]}}",
        "gold_query": "select t2.name from connection as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id"
    },
    {
        "index": 330,
        "db_id": "singer",
        "ambig_type": "table",
        "db_file": "table/singer/singer.sqlite",
        "question": "Please show the most common citizenship of singers.",
        "schema_without_content": "song : sales , highest_position , singer_id , title , song_id  | vocalist : singer_id , citizenship , net_worth_millions , birth_year , name  | musician : singer_id , citizenship , net_worth_millions , birth_year , name",
        "schema_with_content": "song : sales (335000.0, 261000.0, 552407.0), highest_position (1.0, 3.0), singer_id (1, 7, 7), title (\"Left Outside Alone\", \"Left Outside Alone\", \"Call on Me\"), song_id (7, 7, 8) | vocalist : singer_id (5, 3, 2), citizenship (\"Australia\", \"United States\", \"Germany\"), net_worth_millions (17.8, 14.3, 17.4), birth_year (1944.0, 1953.0, 1962.0), name (\"Liliane Bettencourt\", \"Alice Walton\", \"Gina Rinehart\") | musician : singer_id (5, 3, 2), citizenship (\"Australia\", \"United States\", \"Germany\"), net_worth_millions (17.8, 14.3, 17.4), birth_year (1944.0, 1953.0, 1962.0), name (\"Liliane Bettencourt\", \"Alice Walton\", \"Gina Rinehart\")",
        "ambiguous_queries": [
            "select citizenship from vocalist group by citizenship order by count(*) desc limit 1",
            "select citizenship from musician group by citizenship order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"citizenship\": [{\"musician\": [\"citizenship\"]}, {\"vocalist\": [\"citizenship\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"citizenship\" refers to the schema \"musician\".\"citizenship\"",
        "clear_ambiguity": "{\"citizenship\": {\"musician\": [\"citizenship\"]}}",
        "gold_query": "select citizenship from musician group by citizenship order by count(*) desc limit 1"
    },
    {
        "index": 331,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "schema_without_content": "car_makers : fullname , id , country , maker  | auto_data : id , cylinders , mpg , edispl , horsepower , accelerate , year , weight  | countries : countryname , countryid , continent  | model_list : modelid , maker , model  | vehicle_data : id , cylinders , mpg , edispl , horsepower , accelerate , year , weight  | continents : continent , contid  | car_names : makeid , make \", \"ford pinto\", \"opel 1900\", model",
        "schema_with_content": "car_makers : fullname (\"Ford Motor Company\", \"Hyundai\", \"Mazda\"), id (22, 17, 7), country (\"3\", \"1\", \"3\"), maker (\"saab\", \"opel\", \"peugeaut\") | auto_data : id (63, 397, 399), cylinders (5, 5, 5), mpg (\"32.3\", \"37.7\", \"44\"), edispl (440.0, 262.0, 97.5), horsepower (\"48\", \"107\", \"130\"), accelerate (18.6, 8.5, 13.2), year (1977, 1972, 1978), weight (3425, 2385, 2640) | countries : countryname (\"egypt\", \"russia\", \"sweden\"), countryid (7, 2, 12), continent (5, 3, 5) | model_list : modelid (33, 8, 11), maker (5, 5, 4), model (\"chevrolet\", \"kia\", \"triumph\") | vehicle_data : id (63, 397, 399), cylinders (5, 5, 5), mpg (\"32.3\", \"37.7\", \"44\"), edispl (440.0, 262.0, 97.5), horsepower (\"48\", \"107\", \"130\"), accelerate (18.6, 8.5, 13.2), year (1977, 1972, 1978), weight (3425, 2385, 2640) | continents : continent (\"asia\", \"africa\", \"africa\"), contid (4, 1, 2) | car_names : makeid (132, 159, 281), make (\"ford pinto (sw)\", \"ford pinto\", \"opel 1900\"), model (\"subaru\", \"bmw\", \"mercury\")",
        "ambiguous_queries": [
            "select t1.cylinders from vehicle_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1",
            "select t1.cylinders from auto_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"accelerate\": [{\"auto_data\": [\"accelerate\"]}, {\"vehicle_data\": [\"accelerate\"]}], \"cylinders\": [{\"auto_data\": [\"cylinders\"]}, {\"vehicle_data\": [\"cylinders\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"accelerate\" refers to the schema \"auto_data\".\"accelerate\", \"cylinders\" refers to the schema \"auto_data\".\"cylinders\"",
        "clear_ambiguity": "{\"accelerate\": {\"auto_data\": [\"accelerate\"]}, \"cylinders\": {\"auto_data\": [\"cylinders\"]}}",
        "gold_query": "select t1.cylinders from auto_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1"
    },
    {
        "index": 332,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "What are the orchestras that do not have any performances?",
        "schema_without_content": "conductor : name , conductor_id , nationality , age , year_of_work  | show : performance_id , if_first_show , attendance , show_id , result  | orchestra : orchestra_id , major_record_format , record_company , conductor_id , year_of_founded , orchestra  | recital : weekly_rank , date , share , performance_id , type , orchestra_id , official_ratings_  | concert : weekly_rank , date , share , performance_id , type , orchestra_id , official_ratings_",
        "schema_with_content": "conductor : name (\"Igor Stravinsky\", \"Valeri Gergiev\", \"Paul Jorgensen\"), conductor_id (4, 6, 3), nationality (\"USA\", \"UK\", \"France\"), age (50, 42, 41), year_of_work (16, 11, 20) | show : performance_id (5, 2, 3), if_first_show (\"Fir Park\", \"Glebe Park\", \"Glebe Park\"), attendance (695.0, 695.0, 1026.0), show_id (4, 4, 4), result (\"T\", \"F\") | orchestra : orchestra_id (10, 1, 7), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), record_company (\"Philips\", \"EMI\", \"Koch Records / Naxos Records\"), conductor_id (3, 5, 7), year_of_founded (2004.0, 2008.0, 2007.0), orchestra (\"Montreal Symphony Orchestra\", \"Montreal Symphony Orchestra\", \"San Francisco Symphony Orchestra\") | recital : weekly_rank (\"13\", \"1\", \"13\"), date (\"11 June\", \"13 June\", \"12 June\"), share (\"28.0%\", \"44.7%\", \"38.1%\"), performance_id (7, 6, 3), type (\"Semi-final 2\", \"Auditions 2\", \"Semi-final 2\"), orchestra_id (2, 4, 6), official_ratings_(millions) (7.28, 7.39, 11.58) | concert : weekly_rank (\"13\", \"1\", \"13\"), date (\"11 June\", \"13 June\", \"12 June\"), share (\"28.0%\", \"44.7%\", \"38.1%\"), performance_id (7, 6, 3), type (\"Semi-final 2\", \"Auditions 2\", \"Semi-final 2\"), orchestra_id (2, 4, 6), official_ratings_(millions) (7.28, 7.39, 11.58)",
        "ambiguous_queries": [
            "select orchestra from orchestra where orchestra_id not in (select orchestra_id from recital)",
            "select orchestra from orchestra where orchestra_id not in (select orchestra_id from concert)"
        ],
        "gold_ambiguity": {
            "match": "{\"orchestras\": [{\"concert\": [\"orchestra\"]}, {\"recital\": [\"orchestra\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"orchestras\" refers to the schema \"recital\".\"orchestra\"",
        "clear_ambiguity": "{\"orchestras\": {\"recital\": [\"orchestra\"]}}",
        "gold_query": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from recital)"
    },
    {
        "index": 333,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "schema_without_content": "therapies : cost_of_treatment , treatment_id , professional_id , dog_id , date_of_treatment , treatment_type_code  | procedures : cost_of_treatment , treatment_id , professional_id , dog_id , date_of_treatment , treatment_type_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : cell_number , first_name , state , email_address , home_phone 997-7627\", city , street , owner_id , last_name , zip_code  | charges : charge_type , charge_amount , charge_id  | professionals : professional_id , first_name , last_name , state , role_code , cell_number 939-2435x80863\", \"1-185-137-1945x409\", zip_code , city , home_phone , street , email_address  | dogs : weight , breed_code , date_of_birth , age , owner_id , date_adopted , dog_id , date_departed , gender , size_code , name , date_arrived , abandoned_yn  | breeds : breed_code , breed_name  | sizes : size_description , size_code",
        "schema_with_content": "therapies : cost_of_treatment (139, 428, 656), treatment_id (14, 8, 7), professional_id (4, 4, 14), dog_id (12, 2, 2), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-02-26 09:08:53\", \"2018-03-04 20:33:43\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\") | procedures : cost_of_treatment (139, 428, 656), treatment_id (14, 8, 7), professional_id (4, 4, 14), dog_id (12, 2, 2), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-02-26 09:08:53\", \"2018-03-04 20:33:43\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : cell_number (\"559.874.3011x989\", \"633.455.3045x85484\", \"478.978.0729\"), first_name (\"Kade\", \"Jaclyn\", \"Adelle\"), state (\"Pennsylvania\", \"Mississippi\", \"Arkansas\"), email_address (\"marks.gail@example.org\", \"ymaggio@example.com\", \"margaretta.runte@example.net\"), home_phone (\"318-052-6573\", \"916.976.9480x13851\", \"(058)997-7627\"), city (\"Beerton\", \"East Hillardberg\", \"Port Reannamouth\"), street (\"60352 Kayleigh Crossing Suite 700\", \"57382 Yost Ridges\", \"2635 Caitlyn Plains\"), owner_id (9, 3, 1), last_name (\"Haley\", \"Haley\", \"Schmitt\"), zip_code (\"36871\", \"35747\", \"00589\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | professionals : professional_id (15, 9, 1), first_name (\"Vernice\", \"Olaf\", \"Ericka\"), last_name (\"Watsica\", \"Ullrich\", \"Hayes\"), state (\"Mississippi\", \"Montana\", \"Indiana\"), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"962-983-8109x3509\", \"(275)939-2435x80863\", \"1-185-137-1945x409\"), zip_code (\"80775\", \"02281\", \"52476\"), city (\"New Laurytown\", \"Kirastad\", \"McLaughlinfort\"), home_phone (\"1-138-287-3775\", \"320-508-6023\", \"320-508-6023\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), email_address (\"deanna.schuster@example.com\", \"lucile.shanahan@example.org\", \"lourdes.lowe@example.net\") | dogs : weight (\"8.96\", \"8.16\", \"9.48\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2008-05-30 12:51:34\", \"2012-05-03 21:42:25\", \"2012-07-11 17:15:10\"), age (\"5\", \"5\", \"4\"), owner_id (11, 8, 6), date_adopted (\"2018-03-18 15:12:50\", \"2018-02-27 11:54:35\", \"2018-03-25 08:12:51\"), dog_id (2, 4, 3), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 15:05:16\", \"2018-03-25 06:29:10\"), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), name (\"Mavis\", \"Jesus\", \"Lyric\"), date_arrived (\"2018-01-02 03:15:29\", \"2017-06-25 10:14:05\", \"2017-10-25 00:55:34\"), abandoned_yn (\"1\", \"0\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\")",
        "ambiguous_queries": [
            "select t1.name, t2.date_of_treatment from dogs as t1 join procedures as t2 on t1.dog_id = t2.dog_id where t1.breed_code = (select breed_code from dogs group by breed_code order by count(*) asc limit 1)",
            "select t1.name, t2.date_of_treatment from dogs as t1 join therapies as t2 on t1.dog_id = t2.dog_id where t1.breed_code = (select breed_code from dogs group by breed_code order by count(*) asc limit 1)"
        ],
        "gold_ambiguity": {
            "match": "{\"treatment dates\": [{\"procedures\": [\"date_of_treatment\"]}, {\"therapies\": [\"date_of_treatment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"treatment dates\" refers to the schema \"therapies\".\"date_of_treatment\"",
        "clear_ambiguity": "{\"treatment dates\": {\"therapies\": [\"date_of_treatment\"]}}",
        "gold_query": "select t1.name, t2.date_of_treatment from dogs as t1 join therapies as t2 on t1.dog_id = t2.dog_id where t1.breed_code = (select breed_code from dogs group by breed_code order by count(*) asc limit 1)"
    },
    {
        "index": 334,
        "db_id": "network_1",
        "ambig_type": "table",
        "db_file": "table/network_1/network_1.sqlite",
        "question": "Find the average grade of all students who have some friends.",
        "schema_without_content": "likes : liked_id , student_id  | Student : id , name , grade  | Teenager : id , name , grade  | friend : friend_id , student_id",
        "schema_with_content": "likes : liked_id (1247, 1304, 1501), student_id (1025, 1501, 1911) | Student : id (1782, 1316, 1934), name (\"Andrew\", \"Andrew\", \"Alexis\"), grade (9, 12, 10) | Teenager : id (1782, 1316, 1934), name (\"Andrew\", \"Andrew\", \"Alexis\"), grade (9, 12, 10) | friend : friend_id (1641, 1247, 1381), student_id (1911, 1689, 1304)",
        "ambiguous_queries": [
            "select avg(grade) from student where id in (select t1.student_id from friend as t1 join student as t2 on t1.student_id = t2.id)",
            "select avg(grade) from teenager where id in (select t1.student_id from friend as t1 join teenager as t2 on t1.student_id = t2.id)"
        ],
        "gold_ambiguity": {
            "match": "{\"grade\": [{\"Student\": [\"grade\"]}, {\"Teenager\": [\"grade\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"grade\" refers to the schema \"student\".\"grade\"",
        "clear_ambiguity": "{\"grade\": {\"Student\": [\"grade\"]}}",
        "gold_query": "select avg(grade) from student where id in (select t1.student_id from friend as t1 join student as t2 on t1.student_id = t2.id)"
    },
    {
        "index": 335,
        "db_id": "singer",
        "ambig_type": "table",
        "db_file": "table/singer/singer.sqlite",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "schema_without_content": "vocalist : net_worth_millions , singer_id , name , birth_year , citizenship  | song : highest_position , sales , singer_id , song_id , title  | musician : net_worth_millions , singer_id , name , birth_year , citizenship",
        "schema_with_content": "vocalist : net_worth_millions (17.8, 30.0, 28.8), singer_id (3, 4, 6), name (\"Jacqueline Mars\", \"Jacqueline Mars\", \"Liliane Bettencourt\"), birth_year (1948.0, 1962.0, 1953.0), citizenship (\"Australia\", \"Germany\", \"France\") | song : highest_position (1.0, 3.0), sales (261000.0, 300000.0, 292000.0), singer_id (4, 6, 6), song_id (6, 3, 6), title (\"Left Outside Alone\", \"Call on Me\", \"Mysterious Girl\") | musician : net_worth_millions (17.8, 30.0, 28.8), singer_id (3, 4, 6), name (\"Jacqueline Mars\", \"Jacqueline Mars\", \"Liliane Bettencourt\"), birth_year (1948.0, 1962.0, 1953.0), citizenship (\"Australia\", \"Germany\", \"France\")",
        "ambiguous_queries": [
            "select name from vocalist where birth_year = 1948 or birth_year = 1949",
            "select name from musician where birth_year = 1948 or birth_year = 1949"
        ],
        "gold_ambiguity": {
            "match": "{\"birth year\": [{\"musician\": [\"birth_year\"]}, {\"vocalist\": [\"birth_year\"]}], \"name\": [{\"musician\": [\"name\"]}, {\"vocalist\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth year\" refers to the schema \"musician\".\"birth_year\", \"name\" refers to the schema \"musician\".\"name\"",
        "clear_ambiguity": "{\"birth year\": {\"musician\": [\"birth_year\"]}, \"name\": {\"musician\": [\"name\"]}}",
        "gold_query": "select name from musician where birth_year = 1948 or birth_year = 1949"
    },
    {
        "index": 336,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "What airline serves the most flights?",
        "schema_without_content": "airports : countryabbrev , airportname , airportcode , country , city  | flights : flightno , sourceairport , airline , destairport  | carriers : country , uid , abbreviation , airline  | aviation_companies : country , uid , abbreviation , airline",
        "schema_with_content": "airports : countryabbrev (\"US \", \"US\"), airportname (\"Zahns \", \"Holloman AFB \", \"Alyeska \"), airportcode (\"ASY\", \"ADK\", \"AXN\"), country (\"United States \"), city (\"Adak Island \", \"Alpena \", \" Alexandria LA  \") | flights : flightno (1155, 737, 680), sourceairport (\" KKI\", \" ALN\", \" AKK\"), airline (5, 9, 2), destairport (\" AIB\", \" AFO\", \" EDF\") | carriers : country (\"USA\"), uid (7, 11, 10), abbreviation (\"UAL\", \"Virgin\", \"UAL\"), airline (\"Continental Airlines\", \"American Airlines\", \"Southwest Airlines\") | aviation_companies : country (\"USA\"), uid (7, 11, 10), abbreviation (\"UAL\", \"Virgin\", \"UAL\"), airline (\"Continental Airlines\", \"American Airlines\", \"Southwest Airlines\")",
        "ambiguous_queries": [
            "select t1.airline from carriers as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
            "select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"airline\": [{\"carriers\": [\"airline\"]}, {\"aviation_companies\": [\"airline\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airline\" refers to the schema \"aviation_companies\".\"airline\"",
        "clear_ambiguity": "{\"airline\": {\"aviation_companies\": [\"airline\"]}}",
        "gold_query": "select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1"
    },
    {
        "index": 337,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "schema_without_content": "spoken_language : language , countrycode , isofficial , percentage  | sqlite_sequence : seq , name  | official_language : language , countrycode , isofficial , percentage  | country : indepyear , name , continent , code2 , governmentform , surfacearea , region , population , localname , capital , lifeexpectancy , headofstate , gnpold , code , gnp  | city : id , district , countrycode , name \", \"Zama\", \"Frankfurt am Main\", population",
        "schema_with_content": "spoken_language : language (\"Sranantonga\", \"Zulu\", \"Beja\"), countrycode (\"UZB\", \"BOL\", \"LTU\"), isofficial (\"T\", \"F\"), percentage (92.1, 13.3, 97.2) | sqlite_sequence : seq (4079), name (\"city\") | official_language : language (\"Sranantonga\", \"Zulu\", \"Beja\"), countrycode (\"UZB\", \"BOL\", \"LTU\"), isofficial (\"T\", \"F\"), percentage (92.1, 13.3, 97.2) | country : indepyear (1971, 1980, 1776), name (\"Guinea\", \"Hong Kong\", \"RÃ©union\"), continent (\"Antarctica\", \"North America\", \"South America\"), code2 (\"BA\", \"HM\", \"MY\"), governmentform (\"Monarchy\", \"Federation\", \"Territorial Collectivity of France\"), surfacearea (41526.0, 23200.0, 120538.0), region (\"Central Africa\", \"Southern Africa\", \"Nordic Countries\"), population (11201000, 3200, 578000), localname (\"RÃ©publique DÃ©mocratique du Congo\", \"Iran\", \"Australia\"), capital (594, 583, 3212), lifeexpectancy (68.7, 71.8, 79.6), headofstate (\"Miguel Ãngel RodrÃ­guez EcheverrÃ­a\", \"Bharrat Jagdeo\", \"Ricardo Lagos Escobar\"), gnpold (263451.0, 1400.0, 1312.0), code (\"SOM\", \"DJI\", \"PRY\"), gnp (210721.0, 870.0, 3563.0) | city : id (1771, 3289, 1288), district (\"North Carolina\", \"ParaÃ­ba\", \"TÅ¡uvassia\"), countrycode (\"MYS\", \"DEU\", \"HTI\"), name (\"Henzada (Hinthada)\", \"Zama\", \"Frankfurt am Main\"), population (173746, 286848, 384000)",
        "ambiguous_queries": [
            "select count(distinct t2.language) from country as t1 join official_language as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = 'T'",
            "select count(distinct t2.language) from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = 'T'"
        ],
        "gold_ambiguity": {
            "match": "{\"languages\": [{\"official_language\": [\"language\"]}, {\"spoken_language\": [\"language\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"languages\" refers to the schema \"spoken_language\".\"language\"",
        "clear_ambiguity": "{\"languages\": {\"spoken_language\": [\"language\"]}}",
        "gold_query": "select count(distinct t2.language) from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = 'T'"
    },
    {
        "index": 338,
        "db_id": "dog_kennels",
        "ambig_type": "table",
        "db_file": "table/dog_kennels/dog_kennels.sqlite",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "schema_without_content": "treatment_types : treatment_type_description , treatment_type_code  | charges : charge_type , charge_id , charge_amount  | treatments : treatment_type_code , dog_id , professional_id , date_of_treatment , treatment_id , cost_of_treatment  | professionals : last_name , cell_number , zip_code , email_address , professional_id , home_phone 2898266914\", \"1-138-287-3775\", role_code , street , state , first_name , city  | owners : cell_number 271-6744x4507\", \"+004323592985\", \"399-3116\", city , last_name , email_address , street , first_name , zip_code , home_phone 997-7627\", \"130-796-4589x05454\", \"130-796-4589x05454\", state , owner_id  | Pooches : date_arrived , weight , name , abandoned_yn , owner_id , date_departed , breed_code , date_of_birth , date_adopted , dog_id , gender , size_code , age  | breeds : breed_name , breed_code  | sizes : size_description , size_code  | Canines : date_arrived , weight , name , abandoned_yn , owner_id , date_departed , breed_code , date_of_birth , date_adopted , dog_id , gender , size_code , age",
        "schema_with_content": "treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (4, 7, 15), professional_id (9, 9, 5), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\", \"2018-03-15 19:10:02\"), treatment_id (10, 10, 1), cost_of_treatment (656, 428, 349) | professionals : last_name (\"O'Reilly\", \"Watsica\", \"Braun\"), cell_number (\"1-258-285-4707x8020\", \"889-940-2676\", \"1-258-285-4707x8020\"), zip_code (\"34041\", \"33020\", \"02281\"), email_address (\"goyette.roosevelt@example.net\", \"cole.margarita@example.org\", \"jerrod.bahringer@example.org\"), professional_id (14, 12, 10), home_phone (\"1-609-566-2752x25197\", \"+71(6)2898266914\", \"1-138-287-3775\"), role_code (\"Employee\", \"Veterenarian\"), street (\"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), state (\"NorthCarolina\", \"SouthCarolina\", \"Utah\"), first_name (\"Jayson\", \"Olaf\", \"Sigurd\"), city (\"West Heidi\", \"Baileymouth\", \"North Adelberttown\") | owners : cell_number (\"(783)271-6744x4507\", \"+00(2)4323592985\", \"(257)399-3116\"), city (\"Lake Valentin\", \"Lake Carleyborough\", \"Lake Tia\"), last_name (\"Rippin\", \"Rippin\", \"Stoltenberg\"), email_address (\"edythe62@example.org\", \"marks.gail@example.org\", \"ybergstrom@example.com\"), street (\"59509 Mellie Mountain\", \"692 Jaskolski Forges\", \"59509 Mellie Mountain\"), first_name (\"Johann\", \"Heather\", \"Kade\"), zip_code (\"86010\", \"00589\", \"35747\"), home_phone (\"(058)997-7627\", \"130-796-4589x05454\", \"130-796-4589x05454\"), state (\"SouthDakota\", \"Vermont\", \"Vermont\"), owner_id (7, 2, 14) | Pooches : date_arrived (\"2017-05-06 08:03:52\", \"2017-10-24 04:45:13\", \"2017-12-22 05:02:02\"), weight (\"4.01\", \"3.52\", \"4.36\"), name (\"Jeffrey\", \"George\", \"Troy\"), abandoned_yn (\"1\", \"0\"), owner_id (2, 12, 13), date_departed (\"2018-03-25 15:05:16\", \"2018-03-25 15:05:16\", \"2018-03-25 05:07:47\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2010-11-11 07:11:53\", \"2010-11-11 07:11:53\", \"2009-04-12 06:02:48\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-23 16:02:04\", \"2018-03-05 06:05:23\"), dog_id (7, 13, 14), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"3\", \"5\", \"9\") | breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | Canines : date_arrived (\"2017-05-06 08:03:52\", \"2017-10-24 04:45:13\", \"2017-12-22 05:02:02\"), weight (\"4.01\", \"3.52\", \"4.36\"), name (\"Jeffrey\", \"George\", \"Troy\"), abandoned_yn (\"1\", \"0\"), owner_id (2, 12, 13), date_departed (\"2018-03-25 15:05:16\", \"2018-03-25 15:05:16\", \"2018-03-25 05:07:47\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2010-11-11 07:11:53\", \"2010-11-11 07:11:53\", \"2009-04-12 06:02:48\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-23 16:02:04\", \"2018-03-05 06:05:23\"), dog_id (7, 13, 14), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"3\", \"5\", \"9\")",
        "ambiguous_queries": [
            "select t1.first_name, t2.name from owners as t1 join canines as t2 on t1.owner_id = t2.owner_id",
            "select t1.first_name, t2.name from owners as t1 join pooches as t2 on t1.owner_id = t2.owner_id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"Canines\": [\"name\"]}, {\"Pooches\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"canines\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"Canines\": [\"name\"]}}",
        "gold_query": "select t1.first_name, t2.name from owners as t1 join canines as t2 on t1.owner_id = t2.owner_id"
    },
    {
        "index": 339,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "schema_without_content": "addresses : zip_postcode , line_2 , line_3 , line_1 , other_address_details , city , country , address_id , state_province_county  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | schools : other_details , department_name , department_description , department_id  | faculties : other_details , department_name , department_description , department_id  | students : middle_name , current_address_id , cell_mobile_number 889-8954x524\", \"365-8405\", other_student_details , permanent_address_id , ssn , last_name , email_address , date_left , first_name , student_id , date_first_registered  | transcripts : transcript_date , transcript_id , other_details  | student_enrolment : student_enrolment_id , student_id , other_details , degree_program_id , semester_id  | courses : course_id , other_details , course_description , course_name  | transcript_contents : student_course_id , transcript_id  | sections : course_id , section_id , other_details , section_description , section_name  | semesters : other_details , semester_name , semester_id , semester_description  | degree_programs : degree_summary_name , department_id , degree_summary_description , degree_program_id , other_details",
        "schema_with_content": "addresses : zip_postcode (\"148\", \"638\", \"068\"), line_2 (\"Apt. 370\", \"Apt. 305\", \"Apt. 583\"), line_3 (None), line_1 (\"7081 Eda Center\", \"979 Haag Shores Suite 656\", \"7081 Eda Center\"), other_address_details (None), city (\"Lake Careyberg\", \"Port Oceane\", \"Prohaskafort\"), country (\"Iceland\", \"Gabon\", \"Saudi Arabia\"), address_id (11, 8, 1), state_province_county (\"Virginia\", \"Delaware\", \"Wyoming\") | student_enrolment_courses : course_id (4, 8, 8), student_course_id (438800, 8, 9860), student_enrolment_id (5, 8, 9) | schools : other_details (None), department_name (\"art\", \"math\", \"dance\"), department_description (\"in\", \"aliquam\", \"ea\"), department_id (9, 9, 8) | faculties : other_details (None), department_name (\"art\", \"math\", \"dance\"), department_description (\"in\", \"aliquam\", \"ea\"), department_id (9, 9, 8) | students : middle_name (\"Mossie\", \"Brooklyn\", \"Alberta\"), current_address_id (7, 2, 1), cell_mobile_number (\"877.549.9067x8723\", \"(096)889-8954x524\", \"(507)365-8405\"), other_student_details (\"laborum\", \"assumenda\", \"assumenda\"), permanent_address_id (3, 15, 14), ssn (\"248\", \"248\", \"304246\"), last_name (\"Rogahn\", \"Huel\", \"Jaskolski\"), email_address (\"qo'kon@example.com\", \"erwin.zboncak@example.com\", \"lhartmann@example.org\"), date_left (\"1982-06-11 00:25:39\", \"2004-12-08 05:29:11\", \"2007-08-02 04:12:58\"), first_name (\"Hobart\", \"Stanford\", \"Jarvis\"), student_id (1, 5, 8), date_first_registered (\"1971-02-05 07:28:23\", \"1989-05-24 23:31:29\", \"2017-01-04 08:10:25\") | transcripts : transcript_date (\"1975-05-06 12:04:47\", \"1975-05-20 18:31:21\", \"1984-12-19 00:37:21\"), transcript_id (3, 2, 7), other_details (None) | student_enrolment : student_enrolment_id (6, 12, 8), student_id (9, 5, 14), other_details (None), degree_program_id (9, 4, 9), semester_id (12, 9, 5) | courses : course_id (3, 7, 9), other_details (None), course_description (\"c\", \"p\", \"l\"), course_name (\"ai\", \"nlp\", \"pl\") | transcript_contents : student_course_id (70882679, 70882679, 7), transcript_id (8, 6, 11) | sections : course_id (7, 10, 2), section_id (1, 9, 13), other_details (None), section_description (\"ad\", \"provident\", \"voluptas\"), section_name (\"u\", \"u\", \"f\") | semesters : other_details (None), semester_name (\"spring 2014\", \"fall 2010\", \"spring 2016\"), semester_id (7, 1, 15), semester_description (\"m\", \"q\", \"g\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (7, 8, 13), degree_summary_description (\"esse\", \"qui\", \"architecto\"), degree_program_id (11, 2, 8), other_details (None)",
        "ambiguous_queries": [
            "select t2.department_name, t1.department_id from degree_programs as t1 join faculties as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
            "select t2.department_name, t1.department_id from degree_programs as t1 join schools as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"department name\": [{\"faculties\": [\"department_name\"]}, {\"schools\": [\"department_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"department name\" refers to the schema \"faculties\".\"department_name\"",
        "clear_ambiguity": "{\"department name\": {\"faculties\": [\"department_name\"]}}",
        "gold_query": "select t2.department_name, t1.department_id from degree_programs as t1 join faculties as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1"
    },
    {
        "index": 340,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "schema_without_content": "continents : contid , continent  | manufacturers : country , fullname , id , maker  | auto_brands : country , fullname , id , maker  | car_names : makeid , model , make  | countries : countryname , continent , countryid  | model_list : modelid , maker , model  | cars_data : edispl , accelerate , cylinders , year , weight , id , horsepower , mpg",
        "schema_with_content": "continents : contid (3, 5, 2), continent (\"america\", \"africa\", \"asia\") | manufacturers : country (\"3\", \"5\", \"7\"), fullname (\"Volvo\", \"BMW\", \"Daimler Benz\"), id (5, 9, 14), maker (\"volvo\", \"ford\", \"chrysler\") | auto_brands : country (\"3\", \"5\", \"7\"), fullname (\"Volvo\", \"BMW\", \"Daimler Benz\"), id (5, 9, 14), maker (\"volvo\", \"ford\", \"chrysler\") | car_names : makeid (305, 155, 192), model (\"amc\", \"renault\", \"datsun\"), make (\"chevrolet chevelle malibu classic\", \"renault 18i\", \"plymouth fury iii\") | countries : countryname (\"uk\", \"japan\", \"france\"), continent (2, 1, 2), countryid (9, 10, 1) | model_list : modelid (20, 16, 9), maker (3, 16, 21), model (\"subaru\", \"pontiac\", \"mercury\") | cars_data : edispl (80.0, 98.0, 318.0), accelerate (12.2, 15.3, 17.1), cylinders (8, 3, 6), year (1978, 1974, 1976), weight (2671, 3785, 4657), id (158, 134, 230), horsepower (\"148\", \"98\", \"133\"), mpg (\"19.2\", \"19.1\", \"32.1\")",
        "ambiguous_queries": [
            "select t1.countryid, t1.countryname from countries as t1 join manufacturers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join manufacturers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'",
            "select t1.countryid, t1.countryname from countries as t1 join auto_brands as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join auto_brands as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"auto_brands\": [\"country\"]}, {\"manufacturers\": [\"country\"]}], \"id\": [{\"auto_brands\": [\"countryid\"]}, {\"manufacturers\": [\"countryid\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"auto_brands\".\"country\", \"id\" refers to the schema \"manufacturers\".\"countryid\"",
        "clear_ambiguity": "{\"names\": {\"auto_brands\": [\"country\"]}, \"id\": {\"manufacturers\": [\"countryid\"]}}",
        "gold_query": "select t1.countryid, t1.countryname from countries as t1 join auto_brands as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join auto_brands as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'"
    },
    {
        "index": 341,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "What country is Jetblue Airways affiliated with?",
        "schema_without_content": "aviation_companies : country , uid , airline , abbreviation  | carriers : country , uid , airline , abbreviation  | flights : sourceairport , destairport , airline , flightno  | airports : countryabbrev , airportcode , city , country , airportname",
        "schema_with_content": "aviation_companies : country (\"USA\"), uid (11, 2, 5), airline (\"Frontier Airlines\", \"Northwest Airlines\", \"Allegiant Air\"), abbreviation (\"JetBlue\", \"Northwest\", \"Virgin\") | carriers : country (\"USA\"), uid (11, 2, 5), airline (\"Frontier Airlines\", \"Northwest Airlines\", \"Allegiant Air\"), abbreviation (\"JetBlue\", \"Northwest\", \"Virgin\") | flights : sourceairport (\" ALM\", \" OTS\", \" ABL\"), destairport (\" ANC\", \" ARX\", \" ALM\"), airline (1, 1, 9), flightno (782, 426, 562) | airports : countryabbrev (\"US \", \"US\"), airportcode (\"AIA\", \"AIA\", \"ARB\"), city (\"Arcata \", \"Akiak \", \"Ashland \"), country (\"United States \"), airportname (\"Aspen \", \"Aleneva \", \"Albany International \")",
        "ambiguous_queries": [
            "select country from carriers where airline = 'JetBlue Airways'",
            "select country from aviation_companies where airline = 'JetBlue Airways'"
        ],
        "gold_ambiguity": {
            "match": "{\"Jetblue Airways\": [{\"aviation_companies\": [\"airline\"]}, {\"carriers\": [\"airline\"]}], \"country\": [{\"aviation_companies\": [\"country\"]}, {\"carriers\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Jetblue Airways\" refers to the schema \"carriers\".\"airline\", \"country\" refers to the schema \"carriers\".\"country\"",
        "clear_ambiguity": "{\"Jetblue Airways\": {\"carriers\": [\"airline\"]}, \"country\": {\"carriers\": [\"country\"]}}",
        "gold_query": "select country from carriers where airline = 'JetBlue Airways'"
    },
    {
        "index": 342,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "Find the name of students who have both cat and dog pets.",
        "schema_without_content": "pets : weight , pet_age , pettype , petid  | learner : fname , city_code , advisor , age , stuid , major , sex , lname  | enrollee : fname , city_code , advisor , age , stuid , major , sex , lname  | has_pet : stuid , petid",
        "schema_with_content": "pets : weight (12.0, 13.4, 9.3), pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003) | learner : fname (\"Paul\", \"Sarah\", \"Ian\"), city_code (\"HOU\", \"LOS\", \"PIT\"), advisor (8772, 2192, 7723), age (16, 22, 26), stuid (1001, 1006, 1014), major (520, 520, 550), sex (\"F\", \"M\"), lname (\"Kim\", \"Schwartz\", \"Brown\") | enrollee : fname (\"Paul\", \"Sarah\", \"Ian\"), city_code (\"HOU\", \"LOS\", \"PIT\"), advisor (8772, 2192, 7723), age (16, 22, 26), stuid (1001, 1006, 1014), major (520, 520, 550), sex (\"F\", \"M\"), lname (\"Kim\", \"Schwartz\", \"Brown\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select t1.fname from enrollee as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from enrollee as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
            "select t1.fname from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"enrollee\": [\"fname\"]}, {\"learner\": [\"fname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"learner\".\"fname\"",
        "clear_ambiguity": "{\"name\": {\"learner\": [\"fname\"]}}",
        "gold_query": "select t1.fname from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'"
    },
    {
        "index": 343,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "schema_without_content": "games : winner_ht , winner_hand , winner_seed , winner_id , loser_rank , loser_age , best_of , loser_rank_points , winner_ioc , loser_hand , tourney_date , winner_age , match_num , minutes , winner_rank_points , loser_ioc , score  6-2\", tourney_name , winner_entry , surface , loser_ht , draw_size , round , loser_seed , winner_name , loser_entry , year , tourney_id , winner_rank , loser_id , loser_name , tourney_level  | rankings : tours , ranking , ranking_points , player_id , ranking_date  | players : country_code , hand , first_name , birth_date , last_name , player_id  | contests : winner_ht , winner_hand , winner_seed , winner_id , loser_rank , loser_age , best_of , loser_rank_points , winner_ioc , loser_hand , tourney_date , winner_age , match_num , minutes , winner_rank_points , loser_ioc , score  6-2\", tourney_name , winner_entry , surface , loser_ht , draw_size , round , loser_seed , winner_name , loser_entry , year , tourney_id , winner_rank , loser_id , loser_name , tourney_level",
        "schema_with_content": "games : winner_ht (177, 173, 159), winner_hand (\"R\", \"L\"), winner_seed (12, 8, 8), winner_id (201521, 201518, 201521), loser_rank (56, 47, 10), loser_age (22.3463381246, 32.3586584531, 24.6406570842), best_of (3), loser_rank_points (2101, 1242, 1995), winner_ioc (\"USA\", \"UKR\", \"DEN\"), loser_hand (\"R\", \"L\"), tourney_date (20160801, 20160801, 20170410), winner_age (24.2245037645, 25.0622861054, 28.5557837098), match_num (286, 280, 260), minutes (75, 100, 62), winner_rank_points (2730, 6860, 9030), loser_ioc (\"ROU\", \"BEL\", \"TPE\"), score (\"3-6 6-2 6-3\", \"6-4 6-2\", \"7-6(4) 6-2\"), tourney_name (\"Wuhan\", \"Rabat\", \"Acapulco\"), winner_entry (\"\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ht (174, 174, 179), draw_size (12, 8, 32), round (\"F\", \"F\", \"RR\"), loser_seed (1, 28, 29), winner_name (\"Elena Vesnina\", \"Alize Cornet\", \"Lucie Safarova\"), loser_entry (\"\"), year (2013, 2016, 2017), tourney_id (\"2016-1064\", \"2016-1087\", \"2017-1039\"), winner_rank (13, 31, 19), loser_id (200748, 200033, 201506), loser_name (\"Caroline Wozniacki\", \"Camila Giorgi\", \"Ekaterina Makarova\"), tourney_level (\"P\", \"P\", \"W\") | rankings : tours (12, 38, 8), ranking (874, 212, 1312), ranking_points (437, 9575, 1968), player_id (206033, 214770, 203533), ranking_date (20050307, 20071126, 20081103) | players : country_code (\"ISR\", \"UNK\", \"KOR\"), hand (\"U\", \"U\", \"\"), first_name (\"Houda\", \"Varvara\", \"Kamonwan\"), birth_date (19961125, 19980324, 20010730), last_name (\"Niepel\", \"Lujan\", \"Andres Rodriguez\"), player_id (208453, 213927, 205564) | contests : winner_ht (177, 173, 159), winner_hand (\"R\", \"L\"), winner_seed (12, 8, 8), winner_id (201521, 201518, 201521), loser_rank (56, 47, 10), loser_age (22.3463381246, 32.3586584531, 24.6406570842), best_of (3), loser_rank_points (2101, 1242, 1995), winner_ioc (\"USA\", \"UKR\", \"DEN\"), loser_hand (\"R\", \"L\"), tourney_date (20160801, 20160801, 20170410), winner_age (24.2245037645, 25.0622861054, 28.5557837098), match_num (286, 280, 260), minutes (75, 100, 62), winner_rank_points (2730, 6860, 9030), loser_ioc (\"ROU\", \"BEL\", \"TPE\"), score (\"3-6 6-2 6-3\", \"6-4 6-2\", \"7-6(4) 6-2\"), tourney_name (\"Wuhan\", \"Rabat\", \"Acapulco\"), winner_entry (\"\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ht (174, 174, 179), draw_size (12, 8, 32), round (\"F\", \"F\", \"RR\"), loser_seed (1, 28, 29), winner_name (\"Elena Vesnina\", \"Alize Cornet\", \"Lucie Safarova\"), loser_entry (\"\"), year (2013, 2016, 2017), tourney_id (\"2016-1064\", \"2016-1087\", \"2017-1039\"), winner_rank (13, 31, 19), loser_id (200748, 200033, 201506), loser_name (\"Caroline Wozniacki\", \"Camila Giorgi\", \"Ekaterina Makarova\"), tourney_level (\"P\", \"P\", \"W\")",
        "ambiguous_queries": [
            "select t1.country_code, t1.first_name from players as t1 join games as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join games as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
            "select t1.country_code, t1.first_name from players as t1 join contests as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join contests as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'"
        ],
        "gold_ambiguity": {
            "match": "{\"WTA Championships\": [{\"contests\": [\"tourney_name\"]}, {\"games\": [\"tourney_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"WTA Championships\" refers to the schema \"games\".\"tourney_name\"",
        "clear_ambiguity": "{\"WTA Championships\": {\"games\": [\"tourney_name\"]}}",
        "gold_query": "select t1.country_code, t1.first_name from players as t1 join games as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join games as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'"
    },
    {
        "index": 344,
        "db_id": "concert_singer",
        "ambig_type": "table",
        "db_file": "table/concert_singer/concert_singer.sqlite",
        "question": "List singer names and number of concerts for each singer.",
        "schema_without_content": "singer_in_concert : singer_id , concert_id  | artist : age , is_male , singer_id , song_release_year , country , name , song_name  | performer : age , is_male , singer_id , song_release_year , country , name , song_name  | stadium : lowest , stadium_id , average , name , highest , location , capacity  | concert : stadium_id , year , theme , concert_id , concert_name",
        "schema_with_content": "singer_in_concert : singer_id (\"2\", \"5\", \"6\"), concert_id (5, 2, 4) | artist : age (52, 25, 25), is_male (\"F\", \"T\"), singer_id (4, 2, 5), song_release_year (\"2014\", \"2014\", \"2014\"), country (\"Netherlands\", \"United States\", \"France\"), name (\"Joe Sharp\", \"Rose White\", \"Justin Brown\"), song_name (\"Love\", \"Love\", \"Sun\") | performer : age (52, 25, 25), is_male (\"F\", \"T\"), singer_id (4, 2, 5), song_release_year (\"2014\", \"2014\", \"2014\"), country (\"Netherlands\", \"United States\", \"France\"), name (\"Joe Sharp\", \"Rose White\", \"Justin Brown\"), song_name (\"Love\", \"Love\", \"Sun\") | stadium : lowest (1294, 315, 315), stadium_id (9, 2, 7), average (2106, 552, 642), name (\"Glebe Park\", \"Gayfield Park\", \"Balmoor\"), highest (2363, 1125, 1057), location (\"East Fife\", \"Stirling Albion\", \"Alloa Athletic\"), capacity (10104, 4125, 10104) | concert : stadium_id (\"7\", \"1\", \"2\"), year (\"2014\", \"2015\"), theme (\"Free choice\", \"Bleeding Love\", \"Party All Night\"), concert_id (5, 4, 2), concert_name (\"Home Visits\", \"Auditions\", \"Week 2\")",
        "ambiguous_queries": [
            "select t2.name, count(*) from singer_in_concert as t1 join artist as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
            "select t2.name, count(*) from singer_in_concert as t1 join performer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id"
        ],
        "gold_ambiguity": {
            "match": "{\"singer names\": [{\"artist\": [\"name\"]}, {\"performer\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"singer names\" refers to the schema \"artist\".\"name\"",
        "clear_ambiguity": "{\"singer names\": {\"artist\": [\"name\"]}}",
        "gold_query": "select t2.name, count(*) from singer_in_concert as t1 join artist as t2 on t1.singer_id = t2.singer_id group by t2.singer_id"
    },
    {
        "index": 345,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "How many languages are spoken in Aruba?",
        "schema_without_content": "city : countrycode , district , id , name , population  | nation : localname , code2 , name , headofstate , gnpold , indepyear , code , region , gnp , capital , population , continent , surfacearea , lifeexpectancy , governmentform  | countrylanguage : language , isofficial , percentage , countrycode  | state : localname , code2 , name , headofstate , gnpold , indepyear , code , region , gnp , capital , population , continent , surfacearea , lifeexpectancy , governmentform  | sqlite_sequence : seq , name",
        "schema_with_content": "city : countrycode (\"CZE\", \"ISL\", \"PRY\"), district (\"Kyongsangbuk\", \"Addis Abeba\", \"Astana\"), id (1442, 1619, 998), name (\"Tucheng\", \"Praia\", \"Wardha\"), population (406370, 222700, 142900) | nation : localname (\"As-Sudan\", \"PolynÃ©sie franÃ§aise\", \"Ukrajina\"), code2 (\"US\", \"VN\", \"TV\"), name (\"Antarctica\", \"Sao Tome and Principe\", \"Nicaragua\"), headofstate (\"John Kufuor\", \"Hugo ChÃ¡vez FrÃ­as\", \"Ferenc MÃ¡dl\"), gnpold (227757.0, 8920.0, 8920.0), indepyear (1973, 836, 1918), code (\"MDG\", \"IND\", \"MSR\"), region (\"Western Africa\", \"Northern Africa\", \"Southern and Central Asia\"), gnp (7137.0, 1579.0, 6064.0), capital (2884, 2690, 33), population (6188000, 94000, 43000), continent (\"South America\", \"Asia\", \"Antarctica\"), surfacearea (264.0, 4000.0, 270534.0), lifeexpectancy (60.2, 42.5, 52.4), governmentform (\"Territorial Collectivity of France\", \"Islamic Emirate\", \"People'sRepublic\") | countrylanguage : language (\"Kotokoli\", \"QuichÃ©\", \"Tadzhik\"), isofficial (\"T\", \"F\"), percentage (50.2, 12.3, 19.5), countrycode (\"CYM\", \"PAN\", \"MRT\") | state : localname (\"As-Sudan\", \"PolynÃ©sie franÃ§aise\", \"Ukrajina\"), code2 (\"US\", \"VN\", \"TV\"), name (\"Antarctica\", \"Sao Tome and Principe\", \"Nicaragua\"), headofstate (\"John Kufuor\", \"Hugo ChÃ¡vez FrÃ­as\", \"Ferenc MÃ¡dl\"), gnpold (227757.0, 8920.0, 8920.0), indepyear (1973, 836, 1918), code (\"MDG\", \"IND\", \"MSR\"), region (\"Western Africa\", \"Northern Africa\", \"Southern and Central Asia\"), gnp (7137.0, 1579.0, 6064.0), capital (2884, 2690, 33), population (6188000, 94000, 43000), continent (\"South America\", \"Asia\", \"Antarctica\"), surfacearea (264.0, 4000.0, 270534.0), lifeexpectancy (60.2, 42.5, 52.4), governmentform (\"Territorial Collectivity of France\", \"Islamic Emirate\", \"People'sRepublic\") | sqlite_sequence : seq (4079), name (\"city\")",
        "ambiguous_queries": [
            "select count(t2.language) from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Aruba'",
            "select count(t2.language) from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Aruba'"
        ],
        "gold_ambiguity": {
            "match": "{\"Aruba\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Aruba\" refers to the schema \"nation\".\"name\"",
        "clear_ambiguity": "{\"Aruba\": {\"nation\": [\"name\"]}}",
        "gold_query": "select count(t2.language) from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Aruba'"
    },
    {
        "index": 346,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "schema_without_content": "tv_series : id , 18_49_rating_share , share , channel , weekly_rank , air_date , rating , viewers_m , episode  | tv_channel : id , pixel_aspect_ratio_par , hight_definition_tv , country , package_option \", \"Sky Famiglia\", \"Option\", content , pay_per_view_ppv , series_name , language  | toons : title , written_by , production_code , original_air_date , id , channel , directed_by  | animated_series : title , written_by , production_code , original_air_date , id , channel , directed_by",
        "schema_with_content": "tv_series : id (3.0, 7.0, 6.0), 18_49_rating_share (\"2.4/6\", \"2.4/6\", \"1.5/4\"), share (9.0, 7.0, 9.0), channel (\"713\", \"714\", \"717\"), weekly_rank (67.0, 62.0, 70.0), air_date (\"December 10, 2007\", \"October 1, 2007\", \"November 26, 2007\"), rating (\"3.0\", \"5.8\", \"5.3\"), viewers_m (\"6.06\", \"9.16\", \"6.94\"), episode (\"The Hanged Man\", \"The Year of the Rabbit\", \"Keepers\") | tv_channel : id (\"703\", \"715\", \"719\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Option\"), content (\"music\"), pay_per_view_ppv (\"no\"), series_name (\"Music Box Italia\", \"MTV Music\", \"MTV Hits\"), language (\"Italian\", \"English\") | toons : title (\"The Eyes of Despero!\", \"Day of the Dark Knight!\", \"The Eyes of Despero!\"), written_by (\"Joseph Kuhr\", \"Joseph Kuhr\", \"Matt Wayne\"), production_code (108.0, 108.0, 111.0), original_air_date (\"January9,2009\", \"January16,2009\", \"January2,2009\"), id (2.0, 3.0, 7.0), channel (\"705\", \"703\", \"700\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\") | animated_series : title (\"The Eyes of Despero!\", \"Day of the Dark Knight!\", \"The Eyes of Despero!\"), written_by (\"Joseph Kuhr\", \"Joseph Kuhr\", \"Matt Wayne\"), production_code (108.0, 108.0, 111.0), original_air_date (\"January9,2009\", \"January16,2009\", \"January2,2009\"), id (2.0, 3.0, 7.0), channel (\"705\", \"703\", \"700\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "ambiguous_queries": [
            "select t1.series_name, t1.country from tv_channel as t1 join animated_series as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from tv_channel as t1 join animated_series as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'",
            "select t1.series_name, t1.country from tv_channel as t1 join toons as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from tv_channel as t1 join toons as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'"
        ],
        "gold_ambiguity": {
            "match": "{\"directed by\": [{\"animated_series\": [\"directed_by\"]}, {\"toons\": [\"directed_by\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"directed by\" refers to the schema \"toons\".\"directed_by\"",
        "clear_ambiguity": "{\"directed by\": {\"toons\": [\"directed_by\"]}}",
        "gold_query": "select t1.series_name, t1.country from tv_channel as t1 join toons as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from tv_channel as t1 join toons as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'"
    },
    {
        "index": 347,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "schema_without_content": "leaderboard : ranking , tours , player_id , ranking_date , ranking_points  | matches : loser_entry , best_of , minutes , loser_rank , match_num , surface , winner_entry , winner_id , winner_age , tourney_id , loser_name , tourney_date , winner_name , loser_rank_points , winner_rank , tourney_level , round , winner_rank_points , winner_seed , loser_hand , draw_size , winner_ioc , loser_age , loser_id , loser_seed , loser_ht , loser_ioc , winner_hand , winner_ht , year , tourney_name , score  | players : first_name , hand , birth_date , last_name , country_code , player_id  | standings : ranking , tours , player_id , ranking_date , ranking_points",
        "schema_with_content": "leaderboard : ranking (958, 1213, 280), tours (37, 37, 39), player_id (203558, 202640, 215871), ranking_date (20160307, 19900115, 19891211), ranking_points (2386, 7930, 4475) | matches : loser_entry (\"\"), best_of (3), minutes (104, 145, 88), loser_rank (15, 66, 15), match_num (212, 283, 156), surface (\"Hard\", \"Clay\", \"Grass\"), winner_entry (\"\"), winner_id (201505, 201615, 201521), winner_age (25.6755646817, 22.527036276500002, 23.8494182067), tourney_id (\"2016-M004\", \"2017-1039\", \"2016-1087\"), loser_name (\"Su Wei Hsieh\", \"Venus Williams\", \"Carla Suarez Navarro\"), tourney_date (20160222, 20170130, 20160222), winner_name (\"Barbora Zahlavova Strycova\", \"Johanna Larsson\", \"Petra Kvitova\"), loser_rank_points (2295, 3060, 4310), winner_rank (4, 18, 15), tourney_level (\"W\", \"G\", \"W\"), round (\"BR\", \"R16\", \"F\"), winner_rank_points (8235, 1037, 4742), winner_seed (28, 3, 19), loser_hand (\"R\", \"L\"), draw_size (12, 64, 12), winner_ioc (\"BEL\", \"NED\", \"SRB\"), loser_age (27.4442162902, 23.1786447639, 26.078028747399998), loser_id (201444, 201493, 201427), loser_seed (4, 14, 15), loser_ht (161, 161, 164), loser_ioc (\"USA\", \"HUN\", \"BEL\"), winner_hand (\"R\", \"L\"), winner_ht (174, 179, 182), year (2013, 2016, 2017), tourney_name (\"Hong Kong\", \"Wimbledon\", \"Dubai\"), score (\"7-5 2-6 6-2\", \"6-1 2-6 6-4\", \"W/O\") | players : first_name (\"Florea De Maria\", \"Jessie Felisia\", \"Esra\"), hand (\"R\", \"L\", \"\"), birth_date (19940115, 19801119, 19891003), last_name (\"Obando\", \"Namwong\", \"De Bont\"), country_code (\"AUT\", \"GUA\", \"IND\"), player_id (204057, 203218, 218630) | standings : ranking (958, 1213, 280), tours (37, 37, 39), player_id (203558, 202640, 215871), ranking_date (20160307, 19900115, 19891211), ranking_points (2386, 7930, 4475)",
        "ambiguous_queries": [
            "select t1.country_code, t1.first_name from players as t1 join standings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
            "select t1.country_code, t1.first_name from players as t1 join leaderboard as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"tours\": [{\"leaderboard\": [\"tours\"]}, {\"standings\": [\"tours\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"tours\" refers to the schema \"standings\".\"tours\"",
        "clear_ambiguity": "{\"tours\": {\"standings\": [\"tours\"]}}",
        "gold_query": "select t1.country_code, t1.first_name from players as t1 join standings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1"
    },
    {
        "index": 348,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "schema_without_content": "addresses : address_id , other_address_details , line_2 , line_3 , country , state_province_county , city , zip_postcode , line_1  | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details  | departments : department_description , department_name , other_details , department_id  | degree_programs : degree_summary_description , degree_summary_name , other_details , degree_program_id , department_id  | Learners : middle_name , last_name , date_left , student_id , permanent_address_id , email_address , other_student_details , cell_mobile_number 246-7921\", current_address_id , ssn , first_name , date_first_registered  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcript_contents : student_course_id , transcript_id  | Pupils : middle_name , last_name , date_left , student_id , permanent_address_id , email_address , other_student_details , cell_mobile_number 246-7921\", current_address_id , ssn , first_name , date_first_registered  | transcripts : other_details , transcript_id , transcript_date  | semesters : semester_id , other_details , semester_description , semester_name  | courses : course_description , course_name , course_id , other_details  | sections : section_description , section_id , course_id , section_name , other_details",
        "schema_with_content": "addresses : address_id (4, 5, 5), other_address_details (None), line_2 (\"Apt. 388\", \"Apt. 583\", \"Suite 383\"), line_3 (None), country (\"Lesotho\", \"New Caledonia\", \"Gabon\"), state_province_county (\"Idaho\", \"Florida\", \"WestVirginia\"), city (\"Lake Laishafurt\", \"Port Evanston\", \"Prohaskafort\"), zip_postcode (\"895\", \"148\", \"777\"), line_1 (\"858 Peggie Bypass Suite 212\", \"2294 Grant Square Apt. 235\", \"9283 Schulist Falls Apt. 037\") | student_enrolment : student_enrolment_id (1, 4, 6), degree_program_id (11, 9, 4), semester_id (12, 1, 4), student_id (14, 4, 7), other_details (None) | departments : department_description (\"ea\", \"ea\", \"nostrum\"), department_name (\"math\", \"computer science\", \"art\"), other_details (None), department_id (8, 11, 3) | degree_programs : degree_summary_description (\"voluptas\", \"aut\", \"earum\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_program_id (10, 4, 14), department_id (14, 8, 8) | Learners : middle_name (\"Neal\", \"Aaliyah\", \"Brooklyn\"), last_name (\"Jaskolski\", \"Carroll\", \"Carroll\"), date_left (\"1971-05-17 19:28:49\", \"2016-04-09 12:27:04\", \"1975-10-09 00:49:27\"), student_id (2, 9, 12), permanent_address_id (4, 3, 14), email_address (\"swift.kolby@example.com\", \"baumbach.lucious@example.org\", \"nya.lesch@example.net\"), other_student_details (\"nesciunt\", \"facilis\", \"dolorum\"), cell_mobile_number (\"03174364122\", \"1-879-796-8987x164\", \"(462)246-7921\"), current_address_id (2, 14, 2), ssn (\"965\", \"\", \"68095\"), first_name (\"Stanford\", \"Deon\", \"Deon\"), date_first_registered (\"1976-10-26 02:33:06\", \"1973-05-19 19:12:46\", \"2004-12-24 12:36:46\") | student_enrolment_courses : course_id (2, 2, 6), student_enrolment_id (5, 8, 13), student_course_id (1, 96, 8) | transcript_contents : student_course_id (96, 0, 28982908), transcript_id (4, 8, 2) | Pupils : middle_name (\"Neal\", \"Aaliyah\", \"Brooklyn\"), last_name (\"Jaskolski\", \"Carroll\", \"Carroll\"), date_left (\"1971-05-17 19:28:49\", \"2016-04-09 12:27:04\", \"1975-10-09 00:49:27\"), student_id (2, 9, 12), permanent_address_id (4, 3, 14), email_address (\"swift.kolby@example.com\", \"baumbach.lucious@example.org\", \"nya.lesch@example.net\"), other_student_details (\"nesciunt\", \"facilis\", \"dolorum\"), cell_mobile_number (\"03174364122\", \"1-879-796-8987x164\", \"(462)246-7921\"), current_address_id (2, 14, 2), ssn (\"965\", \"\", \"68095\"), first_name (\"Stanford\", \"Deon\", \"Deon\"), date_first_registered (\"1976-10-26 02:33:06\", \"1973-05-19 19:12:46\", \"2004-12-24 12:36:46\") | transcripts : other_details (None), transcript_id (10, 2, 6), transcript_date (\"1986-07-12 07:27:29\", \"1986-07-12 07:27:29\", \"1985-04-29 01:20:20\") | semesters : semester_id (11, 6, 14), other_details (None), semester_description (\"o\", \"w\", \"m\"), semester_name (\"winter 2010\", \"summer 2010\", \"spring 2010\") | courses : course_description (\"b\", \"v\", \"d\"), course_name (\"dl\", \"dl\", \"os\"), course_id (9, 12, 1), other_details (None) | sections : section_description (\"non\", \"doloremque\", \"quis\"), section_id (9, 13, 3), course_id (12, 9, 6), section_name (\"b\", \"p\", \"k\"), other_details (None)",
        "ambiguous_queries": [
            "select cell_mobile_number from learners where first_name = 'Timmothy' and last_name = 'Ward'",
            "select cell_mobile_number from pupils where first_name = 'Timmothy' and last_name = 'Ward'"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"Learners\": [\"first_name\"]}, {\"Pupils\": [\"first_name\"]}], \"last name\": [{\"Learners\": [\"last_name\"]}, {\"Pupils\": [\"last_name\"]}], \"phone number\": [{\"Learners\": [\"cell_mobile_number\"]}, {\"Pupils\": [\"cell_mobile_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"pupils\".\"first_name\", \"last name\" refers to the schema \"pupils\".\"last_name\", \"phone number\" refers to the schema \"pupils\".\"cell_mobile_number\"",
        "clear_ambiguity": "{\"first name\": {\"Pupils\": [\"first_name\"]}, \"last name\": {\"Pupils\": [\"last_name\"]}, \"phone number\": {\"Pupils\": [\"cell_mobile_number\"]}}",
        "gold_query": "select cell_mobile_number from pupils where first_name = 'Timmothy' and last_name = 'Ward'"
    },
    {
        "index": 349,
        "db_id": "poker_player",
        "ambig_type": "table",
        "db_file": "table/poker_player/poker_player.sqlite",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "schema_without_content": "person : name , people_id , height , nationality , birth_date  | poker_player : final_table_made , people_id , earnings , best_finish , poker_player_id , money_rank  | individuals : name , people_id , height , nationality , birth_date",
        "schema_with_content": "person : name (\"Yevgeni Sivozhelez\", \"Aleksey Ostapenko\", \"Semen Poltavskiy\"), people_id (6, 3, 6), height (182.0, 207.0, 196.0), nationality (\"Russia\", \"Bulgaria\"), birth_date (\"February 8, 1981\", \"February 8, 1981\", \"May 26, 1986\") | poker_player : final_table_made (10.0, 26.0, 19.0), people_id (2, 2, 1), earnings (142800.0, 596462.0, 476090.0), best_finish (1.0, 2.0, 3.0), poker_player_id (3, 1, 2), money_rank (141.0, 58.0, 154.0) | individuals : name (\"Yevgeni Sivozhelez\", \"Aleksey Ostapenko\", \"Semen Poltavskiy\"), people_id (6, 3, 6), height (182.0, 207.0, 196.0), nationality (\"Russia\", \"Bulgaria\"), birth_date (\"February 8, 1981\", \"February 8, 1981\", \"May 26, 1986\")",
        "ambiguous_queries": [
            "select name from person where nationality != 'Russia'",
            "select name from individuals where nationality != 'Russia'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"individuals\": [\"name\"]}, {\"person\": [\"name\"]}], \"nationality\": [{\"individuals\": [\"nationality\"]}, {\"person\": [\"nationality\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"person\".\"name\", \"nationality\" refers to the schema \"person\".\"nationality\"",
        "clear_ambiguity": "{\"names\": {\"person\": [\"name\"]}, \"nationality\": {\"person\": [\"nationality\"]}}",
        "gold_query": "select name from person where nationality != 'Russia'"
    },
    {
        "index": 350,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Give me Brazil's population and life expectancies.",
        "schema_without_content": "state : name , code2 , code , lifeexpectancy , headofstate , region , continent , capital , surfacearea , localname , gnpold , population , governmentform \", \"Federation\", \"Monarchy\", gnp , indepyear  | city : countrycode , district , population , name , id  | sqlite_sequence : seq , name  | nation : name , code2 , code , lifeexpectancy , headofstate , region , continent , capital , surfacearea , localname , gnpold , population , governmentform \", \"Federation\", \"Monarchy\", gnp , indepyear  | countrylanguage : percentage , countrycode , isofficial , language",
        "schema_with_content": "state : name (\"Gibraltar\", \"Heard Island and McDonald Islands\", \"Malaysia\"), code2 (\"CA\", \"VE\", \"DM\"), code (\"CRI\", \"ESP\", \"CYP\"), lifeexpectancy (71.3, 50.1, 42.9), headofstate (\"Kim Dae-jung\", \"Teburoro Tito\", \"Cassam Uteem\"), region (\"Polynesia\", \"Polynesia\", \"British Islands\"), continent (\"Antarctica\", \"Oceania\", \"North America\"), capital (2441, 763, 3248), surfacearea (36188.0, 61.0, 260.0), localname (\"Micronesia\", \"Niger\", \"Dhivehi Raajje/Maldives\"), gnpold (1392448.0, 2201.0, 11203.0), population (20212000, 11201000, 861000), governmentform (\"Monarchy (Sultanate)\", \"Federation\", \"Monarchy\"), gnp (7137.0, 598862.0, 166448.0), indepyear (1825, 1965, 1901) | city : countrycode (\"ZWE\", \"GTM\", \"EST\"), district (\"Ucayali\", \"Nampula\", \"Carolina\"), population (352125, 150869, 206998), name (\"Hodeida\", \"Fatehpur\", \"Zlatoust\"), id (338, 1948, 2906) | sqlite_sequence : seq (4079), name (\"city\") | nation : name (\"Gibraltar\", \"Heard Island and McDonald Islands\", \"Malaysia\"), code2 (\"CA\", \"VE\", \"DM\"), code (\"CRI\", \"ESP\", \"CYP\"), lifeexpectancy (71.3, 50.1, 42.9), headofstate (\"Kim Dae-jung\", \"Teburoro Tito\", \"Cassam Uteem\"), region (\"Polynesia\", \"Polynesia\", \"British Islands\"), continent (\"Antarctica\", \"Oceania\", \"North America\"), capital (2441, 763, 3248), surfacearea (36188.0, 61.0, 260.0), localname (\"Micronesia\", \"Niger\", \"Dhivehi Raajje/Maldives\"), gnpold (1392448.0, 2201.0, 11203.0), population (20212000, 11201000, 861000), governmentform (\"Monarchy (Sultanate)\", \"Federation\", \"Monarchy\"), gnp (7137.0, 598862.0, 166448.0), indepyear (1825, 1965, 1901) | countrylanguage : percentage (99.1, 34.8, 50.2), countrycode (\"FRO\", \"GUM\", \"DNK\"), isofficial (\"T\", \"F\"), language (\"Arabic-French\", \"Gilaki\", \"Niue\")",
        "ambiguous_queries": [
            "select population, lifeexpectancy from nation where name = 'Brazil'",
            "select population, lifeexpectancy from state where name = 'Brazil'"
        ],
        "gold_ambiguity": {
            "match": "{\"Brazil\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}], \"life expectancies\": [{\"nation\": [\"lifeexpectancy\"]}, {\"state\": [\"lifeexpectancy\"]}], \"population\": [{\"nation\": [\"population\"]}, {\"state\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Brazil\" refers to the schema \"state\".\"name\", \"life expectancies\" refers to the schema \"state\".\"lifeexpectancy\", \"population\" refers to the schema \"state\".\"population\"",
        "clear_ambiguity": "{\"Brazil\": {\"state\": [\"name\"]}, \"life expectancies\": {\"state\": [\"lifeexpectancy\"]}, \"population\": {\"state\": [\"population\"]}}",
        "gold_query": "select population, lifeexpectancy from state where name = 'Brazil'"
    },
    {
        "index": 351,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "table",
        "db_file": "table/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "schema_without_content": "hiring : shop_id , is_full_time , start_from , employee_id  | appraisal : employee_id , bonus , year_awarded  | assessment : employee_id , bonus , year_awarded  | shop : shop_id , name , location , manager_name , district , number_products  | employee : employee_id , city , age , name",
        "schema_with_content": "hiring : shop_id (8, 5, 1), is_full_time (\"T\", \"F\"), start_from (\"2008\", \"2008\", \"2012\"), employee_id (4, 7, 7) | appraisal : employee_id (\"7\", \"7\", \"4\"), bonus (4000.0, 4000.0, 3200.0), year_awarded (\"2018\", \"2015\", \"2017\") | assessment : employee_id (\"7\", \"7\", \"4\"), bonus (4000.0, 4000.0, 3200.0), year_awarded (\"2018\", \"2015\", \"2017\") | shop : shop_id (8, 9, 5), name (\"FF Jaro\", \"FC Inter\", \"HJK\"), location (\"Turku\", \"Valkeakoski\", \"Jakobstad\"), manager_name (\"Job Dragtsma\", \"Mika Laurikainen\", \"Pekka Lyyski\"), district (\"WiklÃ¶f Holding Arena\", \"Veritas Stadion\", \"Tehtaan kenttÃ¤\"), number_products (5000, 3516, 1600) | employee : employee_id (4, 4, 2), city (\"Wasps\", \"Bath\", \"Wasps\"), age (40, 30, 36), name (\"Tim Payne\", \"Phil Vickery\", \"Mark Regan\")",
        "ambiguous_queries": [
            "select t1.name from employee as t1 join appraisal as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
            "select t1.name from employee as t1 join assessment as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"bonus\": [{\"appraisal\": [\"bonus\"]}, {\"assessment\": [\"bonus\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"bonus\" refers to the schema \"appraisal\".\"bonus\"",
        "clear_ambiguity": "{\"bonus\": {\"appraisal\": [\"bonus\"]}}",
        "gold_query": "select t1.name from employee as t1 join appraisal as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1"
    },
    {
        "index": 352,
        "db_id": "concert_singer",
        "ambig_type": "table",
        "db_file": "table/concert_singer/concert_singer.sqlite",
        "question": "How many concerts are there in year 2014 or 2015?",
        "schema_without_content": "singer_in_concert : concert_id , singer_id  | singer : is_male , song_name , singer_id , song_release_year , country , name , age  | stadium : highest , name , location , lowest , stadium_id , average , capacity  | gig : year , stadium_id , concert_id , theme , concert_name  | performance : year , stadium_id , concert_id , theme , concert_name",
        "schema_with_content": "singer_in_concert : concert_id (6, 6, 3), singer_id (\"2\", \"3\", \"3\") | singer : is_male (\"F\", \"T\"), song_name (\"Sun\", \"Dangerous\", \"Gentleman\"), singer_id (4, 5, 4), song_release_year (\"2014\", \"2013\", \"2016\"), country (\"Netherlands\", \"United States\", \"France\"), name (\"Timbaland\", \"Joe Sharp\", \"Justin Brown\"), age (25, 52, 29) | stadium : highest (4812, 780, 1980), name (\"Stark's Park\", \"Balmoor\", \"Bayview Stadium\"), location (\"Ayr United\", \"East Fife\", \"Queen's Park\"), lowest (400, 1294, 315), stadium_id (1, 3, 4), average (864, 2106, 2106), capacity (3960, 2000, 3808) | gig : year (\"2014\", \"2015\"), stadium_id (\"1\", \"7\", \"9\"), concert_id (4, 6, 1), theme (\"Party All Night\", \"Bleeding Love\", \"Free choice 2\"), concert_name (\"Week 2\", \"Week 2\", \"Home Visits\") | performance : year (\"2014\", \"2015\"), stadium_id (\"1\", \"7\", \"9\"), concert_id (4, 6, 1), theme (\"Party All Night\", \"Bleeding Love\", \"Free choice 2\"), concert_name (\"Week 2\", \"Week 2\", \"Home Visits\")",
        "ambiguous_queries": [
            "select count(*) from gig where year = 2014 or year = 2015",
            "select count(*) from performance where year = 2014 or year = 2015"
        ],
        "gold_ambiguity": {
            "match": "{\"year\": [{\"gig\": [\"year\"]}, {\"performance\": [\"year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year\" refers to the schema \"performance\".\"year\"",
        "clear_ambiguity": "{\"year\": {\"performance\": [\"year\"]}}",
        "gold_query": "select count(*) from performance where year = 2014 or year = 2015"
    },
    {
        "index": 353,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What is the content of the series Sky Radio?",
        "schema_without_content": "cartoon : channel , production_code , id , written_by , original_air_date , title , directed_by  | Television_Channel : hight_definition_tv , id , package_option \", \"no \", \"Sky Famiglia\", content , series_name , language , country , pay_per_view_ppv , pixel_aspect_ratio_par  | Broadcasting_Channel : hight_definition_tv , id , package_option \", \"no \", \"Sky Famiglia\", content , series_name , language , country , pay_per_view_ppv , pixel_aspect_ratio_par  | tv_series : share , episode , air_date , 18_49_rating_share , viewers_m , rating , weekly_rank , channel , id",
        "schema_with_content": "cartoon : channel (\"706\", \"704\", \"708\"), production_code (108.0, 103.0, 103.0), id (8.0, 2.0, 11.0), written_by (\"J. M. DeMatteis\", \"Matt Wayne\", \"Joseph Kuhr\"), original_air_date (\"December5,2008\", \"February20,2009\", \"January30,2009\"), title (\"Invasion of the Secret Santas!\", \"Dawn of the Dead Man!\", \"The Eyes of Despero!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\") | Television_Channel : hight_definition_tv (\"no\", \"yes\"), id (\"700\", \"719\", \"705\"), package_option (\"no ( FTV )\", \"no ( FTV )\", \"Sky Famiglia\"), content (\"music\"), series_name (\"Music Box Italia\", \"MTV Hits\", \"MTV Music\"), language (\"Italian\", \"English\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | Broadcasting_Channel : hight_definition_tv (\"no\", \"yes\"), id (\"700\", \"719\", \"705\"), package_option (\"no ( FTV )\", \"no ( FTV )\", \"Sky Famiglia\"), content (\"music\"), series_name (\"Music Box Italia\", \"MTV Hits\", \"MTV Music\"), language (\"Italian\", \"English\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | tv_series : share (9.0, 9.0, 9.0), episode (\"A Love of a Lifetime\", \"Blowback\", \"Blowback\"), air_date (\"October 15, 2007\", \"November 19, 2007\", \"September 24, 2007\"), 18_49_rating_share (\"2.9/7\", \"3.5/9\", \"3.5/9\"), viewers_m (\"6.94\", \"6.05\", \"5.61\"), rating (\"3.8\", \"3.4\", \"3.8\"), weekly_rank (65.0, 80.0, 65.0), channel (\"700\", \"728\", \"708\"), id (4.0, 12.0, 5.0)",
        "ambiguous_queries": [
            "select content from broadcasting_channel where series_name = 'Sky Radio'",
            "select content from television_channel where series_name = 'Sky Radio'"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"series\": [{\"Broadcasting_Channel\": [\"series_name\"]}, {\"Television_Channel\": [\"series_name\"]}], \"content\": [{\"Broadcasting_Channel\": [\"content\"]}, {\"Television_Channel\": [\"content\"]}]}"
        },
        "clarification_context": "\"series\" refers to the schema \"television_channel\".\"series_name\", \"content\" refers to the schema \"television_channel\".\"content\"",
        "clear_ambiguity": "{\"series\": {\"Television_Channel\": [\"series_name\"]}, \"content\": {\"Television_Channel\": [\"content\"]}}",
        "gold_query": "select content from television_channel where series_name = 'Sky Radio'"
    },
    {
        "index": 354,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "schema_without_content": "sqlite_sequence : seq , name  | city : name , countrycode , district , population , id  | official_language : countrycode , language , percentage , isofficial  | country : code , governmentform \", lifeexpectancy , capital , name , indepyear , localname , gnpold , headofstate , code2 , population , surfacearea , region , gnp , continent  | spoken_language : countrycode , language , percentage , isofficial",
        "schema_with_content": "sqlite_sequence : seq (4079), name (\"city\") | city : name (\"Bantam\", \"Taiyuan\", \"Mushin\"), countrycode (\"LIE\", \"ITA\", \"KAZ\"), district (\"Tianjin\", \"Osijek-Baranja\", \"Carabobo\"), population (153317, 114256, 127490), id (2315, 943, 1587) | official_language : countrycode (\"ESP\", \"COM\", \"CCK\"), language (\"MahorÃ©\", \"Gbaya\", \"Akan\"), percentage (11.8, 96.4, 1.2), isofficial (\"T\", \"F\") | country : code (\"SYR\", \"MAC\", \"LAO\"), governmentform (\"Special Administrative Region of China\", \"Parliamentary Coprincipality\", \"Monarchy (Sultanate)\"), lifeexpectancy (51.6, 78.3, 79.8), capital (1109, 129, 3358), name (\"Cambodia\", \"United Arab Emirates\", \"Venezuela\"), indepyear (1901, 1841, 1492), localname (\"Niue\", \"The Bahamas\", \"Nederlandse Antillen\"), gnpold (542.0, 31966.0, 8670.0), headofstate (\"Ferenc MÃ¡dl\", \"Mohammed Abdel Aziz\", \"Jiang Zemin\"), code2 (\"EC\", \"BG\", \"ET\"), population (4629000, 11385000, 9169000), surfacearea (110994.0, 2831.0, 10400.0), region (\"Middle East\", \"British Islands\", \"Baltic Countries\"), gnp (116729.0, 256254.0, 11345.0), continent (\"South America\", \"Africa\", \"Europe\") | spoken_language : countrycode (\"ESP\", \"COM\", \"CCK\"), language (\"MahorÃ©\", \"Gbaya\", \"Akan\"), percentage (11.8, 96.4, 1.2), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select count(distinct t2.language) from country as t1 join official_language as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = 'T'",
            "select count(distinct t2.language) from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = 'T'"
        ],
        "gold_ambiguity": {
            "match": "{\"languages\": [{\"official_language\": [\"language\"]}, {\"spoken_language\": [\"language\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"languages\" refers to the schema \"spoken_language\".\"language\"",
        "clear_ambiguity": "{\"languages\": {\"spoken_language\": [\"language\"]}}",
        "gold_query": "select count(distinct t2.language) from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = 'T'"
    },
    {
        "index": 355,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "How many countries speak both English and Dutch?",
        "schema_without_content": "state : localname , gnp , lifeexpectancy , continent , code2 , gnpold , code , region , surfacearea , governmentform , name , capital , population , indepyear , headofstate  | countrylanguage : language , percentage , isofficial , countrycode  | city : countrycode , name , id , district , population  | nation : localname , gnp , lifeexpectancy , continent , code2 , gnpold , code , region , surfacearea , governmentform , name , capital , population , indepyear , headofstate  | sqlite_sequence : seq , name",
        "schema_with_content": "state : localname (\"Gibraltar\", \"RÃ©union\", \"Saint Kitts and Nevis\"), gnp (510.0, 7526.0, 722.0), lifeexpectancy (80.1, 80.1, 76.7), continent (\"Oceania\", \"South America\", \"Europe\"), code2 (\"GS\", \"AO\", \"AF\"), gnpold (1627.0, 3545.0, 539.0), code (\"IOT\", \"WLF\", \"AUS\"), region (\"Southern and Central Asia\", \"British Islands\", \"Melanesia\"), surfacearea (71740.0, 1285216.0, 1267000.0), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Emirate Federation\", \"Islamic Emirate\"), name (\"Armenia\", \"Central African Republic\", \"Palestine\"), capital (608, 1530, 2295), population (6695000, 62565000, 435700), indepyear (1492, 1960, 1962), headofstate (\"Bernard Dowiyogo\", \"Jorge Batlle IbÃ¡Ã±ez\", \"Taufa'ahau Tupou IV\") | countrylanguage : language (\"Kymri\", \"Malagasy\", \"Berberi\"), percentage (4.5, 35.8, 6.9), isofficial (\"T\", \"F\"), countrycode (\"SDN\", \"TUV\", \"NCL\") | city : countrycode (\"BGD\", \"IDN\", \"JAM\"), name (\"Bissau\", \"Chonan\", \"al-Sib\"), id (1899, 1665, 2364), district (\"LiÃ¨ge\", \"Rio Grande do Norte\", \"Khon Kaen\"), population (99799, 89388, 134222) | nation : localname (\"Gibraltar\", \"RÃ©union\", \"Saint Kitts and Nevis\"), gnp (510.0, 7526.0, 722.0), lifeexpectancy (80.1, 80.1, 76.7), continent (\"Oceania\", \"South America\", \"Europe\"), code2 (\"GS\", \"AO\", \"AF\"), gnpold (1627.0, 3545.0, 539.0), code (\"IOT\", \"WLF\", \"AUS\"), region (\"Southern and Central Asia\", \"British Islands\", \"Melanesia\"), surfacearea (71740.0, 1285216.0, 1267000.0), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Emirate Federation\", \"Islamic Emirate\"), name (\"Armenia\", \"Central African Republic\", \"Palestine\"), capital (608, 1530, 2295), population (6695000, 62565000, 435700), indepyear (1492, 1960, 1962), headofstate (\"Bernard Dowiyogo\", \"Jorge Batlle IbÃ¡Ã±ez\", \"Taufa'ahau Tupou IV\") | sqlite_sequence : seq (4079), name (\"city\")",
        "ambiguous_queries": [
            "select count(*) from (select t1.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'Dutch')",
            "select count(*) from (select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'Dutch')"
        ],
        "gold_ambiguity": {
            "match": "{\"countries\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"countries\" refers to the schema \"state\".\"name\"",
        "clear_ambiguity": "{\"countries\": {\"state\": [\"name\"]}}",
        "gold_query": "select count(*) from (select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'Dutch')"
    },
    {
        "index": 356,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "Find the number of players for each hand type.",
        "schema_without_content": "rankings : ranking_date , tours , ranking_points , player_id , ranking  | matches : tourney_date , winner_ioc , score \", \"7-6 6-2\", \"2-6 6-4 6-1\", tourney_id , loser_id , winner_ht , winner_entry , minutes , loser_ht , loser_rank , winner_hand , winner_age , loser_rank_points , tourney_name , loser_hand , best_of , winner_seed , loser_age , loser_entry , loser_ioc , tourney_level , round , loser_seed , winner_rank_points , winner_id , year , winner_rank , winner_name , match_num , surface , draw_size , loser_name  | athletes : country_code , player_id , hand , birth_date , first_name , last_name  | competitors : country_code , player_id , hand , birth_date , first_name , last_name",
        "schema_with_content": "rankings : ranking_date (20000501, 19910506, 20000424), tours (14, 37, 20), ranking_points (1816, 334, 1646), player_id (204356, 202479, 214347), ranking (1062, 189, 27) | matches : tourney_date (20170515, 20170227, 20170116), winner_ioc (\"CZE\", \"SRB\", \"POL\"), score (\"4-6 6-4 7-6(3)\", \"7-6(2) 6-2\", \"2-6 6-4 6-1\"), tourney_id (\"2016-0806\", \"2016-1064\", \"2017-1097\"), loser_id (201474, 201397, 201539), winner_ht (183, 175, 159), winner_entry (\"\"), minutes (179, 66, 86), loser_ht (173, 161, 161), loser_rank (17, 56, 26), winner_hand (\"R\", \"L\"), winner_age (25.264887063699998, 26.6392881588, 22.4503764545), loser_rank_points (4975, 2865, 1770), tourney_name (\"Rome\", \"Prague\", \"Stuttgart\"), loser_hand (\"R\", \"L\"), best_of (3), winner_seed (4, 8, 9), loser_age (23.8220396988, 28.3258042437, 33.700205338800004), loser_entry (\"\"), loser_ioc (\"SUI\", \"NED\", \"ROU\"), tourney_level (\"W\", \"W\", \"I\"), round (\"SF\", \"BR\", \"F\"), loser_seed (11, 26, 4), winner_rank_points (3185, 2480, 1290), winner_id (201540, 200033, 201419), year (2013, 2016, 2017), winner_rank (2, 13, 24), winner_name (\"Samantha Stosur\", \"Madison Keys\", \"Ekaterina Makarova\"), match_num (204, 219, 212), surface (\"Hard\", \"Clay\", \"Grass\"), draw_size (12, 32, 4), loser_name (\"Su Wei Hsieh\", \"Caroline Wozniacki\", \"Coco Vandeweghe\") | athletes : country_code (\"CRO\", \"SLO\", \"ITA\"), player_id (215005, 217763, 206039), hand (\"R\", \"R\", \"U\"), birth_date (19970530, 19911121, 19800730), first_name (\"Vita\", \"Makenna\", \"Clementina Eugenia\"), last_name (\"Leiva\", \"Halle\", \"Jarlskog\") | competitors : country_code (\"CRO\", \"SLO\", \"ITA\"), player_id (215005, 217763, 206039), hand (\"R\", \"R\", \"U\"), birth_date (19970530, 19911121, 19800730), first_name (\"Vita\", \"Makenna\", \"Clementina Eugenia\"), last_name (\"Leiva\", \"Halle\", \"Jarlskog\")",
        "ambiguous_queries": [
            "select count(*), hand from athletes group by hand",
            "select count(*), hand from competitors group by hand"
        ],
        "gold_ambiguity": {
            "match": "{\"hand\": [{\"athletes\": [\"hand\"]}, {\"competitors\": [\"hand\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"hand\" refers to the schema \"athletes\".\"hand\"",
        "clear_ambiguity": "{\"hand\": {\"athletes\": [\"hand\"]}}",
        "gold_query": "select count(*), hand from athletes group by hand"
    },
    {
        "index": 357,
        "db_id": "singer",
        "ambig_type": "table",
        "db_file": "table/singer/singer.sqlite",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "schema_without_content": "vocalist : citizenship , birth_year , net_worth_millions , singer_id , name  | musician : citizenship , birth_year , net_worth_millions , singer_id , name  | song : highest_position , singer_id , title , song_id , sales",
        "schema_with_content": "vocalist : citizenship (\"Germany\", \"Chile\", \"Germany\"), birth_year (1949.0, 1949.0, 1940.0), net_worth_millions (17.8, 17.4, 17.4), singer_id (3, 5, 3), name (\"Susanne Klatten\", \"Abigail Johnson\", \"Jacqueline Mars\") | musician : citizenship (\"Germany\", \"Chile\", \"Germany\"), birth_year (1949.0, 1949.0, 1940.0), net_worth_millions (17.8, 17.4, 17.4), singer_id (3, 5, 3), name (\"Susanne Klatten\", \"Abigail Johnson\", \"Jacqueline Mars\") | song : highest_position (1.0, 3.0), singer_id (7, 7, 1), title (\"All This Time\", \"Left Outside Alone\", \"Do They Know It's Christmas\"), song_id (4, 3, 2), sales (552407.0, 552407.0, 351421.0)",
        "ambiguous_queries": [
            "select citizenship, max(net_worth_millions) from vocalist group by citizenship",
            "select citizenship, max(net_worth_millions) from musician group by citizenship"
        ],
        "gold_ambiguity": {
            "match": "{\"citizenship\": [{\"musician\": [\"citizenship\"]}, {\"vocalist\": [\"citizenship\"]}], \"net worth\": [{\"musician\": [\"net_worth_millions\"]}, {\"vocalist\": [\"net_worth_millions\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"citizenship\" refers to the schema \"vocalist\".\"citizenship\", \"net worth\" refers to the schema \"vocalist\".\"net_worth_millions\"",
        "clear_ambiguity": "{\"citizenship\": {\"vocalist\": [\"citizenship\"]}, \"net worth\": {\"vocalist\": [\"net_worth_millions\"]}}",
        "gold_query": "select citizenship, max(net_worth_millions) from vocalist group by citizenship"
    },
    {
        "index": 358,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "schema_without_content": "Broadcasting_Channel : language , content , package_option \", \"no \", hight_definition_tv , id , series_name , pixel_aspect_ratio_par , country , pay_per_view_ppv  | Television_Channel : language , content , package_option \", \"no \", hight_definition_tv , id , series_name , pixel_aspect_ratio_par , country , pay_per_view_ppv  | tv_series : air_date , channel , viewers_m , weekly_rank , share , rating , 18_49_rating_share , episode , id  | cartoon : written_by , original_air_date , channel , directed_by , id , production_code , title",
        "schema_with_content": "Broadcasting_Channel : language (\"Italian\", \"English\"), content (\"music\"), package_option (\"Sky Famiglia\", \"no ( FTV )\", \"no ( FTV )\"), hight_definition_tv (\"no\", \"yes\"), id (\"728\", \"705\", \"719\"), series_name (\"MTV Dance\", \"Hip Hop TV\", \"MTV Live HD\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\") | Television_Channel : language (\"Italian\", \"English\"), content (\"music\"), package_option (\"Sky Famiglia\", \"no ( FTV )\", \"no ( FTV )\"), hight_definition_tv (\"no\", \"yes\"), id (\"728\", \"705\", \"719\"), series_name (\"MTV Dance\", \"Hip Hop TV\", \"MTV Live HD\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\") | tv_series : air_date (\"October 1, 2007\", \"October 22, 2007\", \"November 26, 2007\"), channel (\"728\", \"701\", \"714\"), viewers_m (\"5.28\", \"6.75\", \"5.28\"), weekly_rank (61.0, 70.0, 68.0), share (7.0, 6.0, 5.0), rating (\"3.4\", \"3.5\", \"4.0\"), 18_49_rating_share (\"2.7/7\", \"2.7/7\", \"3.5/9\"), episode (\"Friendly Skies\", \"Emily\", \"A Love of a Lifetime\"), id (4.0, 11.0, 2.0) | cartoon : written_by (\"James Krieg\", \"Steven Melching\", \"James Krieg\"), original_air_date (\"January16,2009\", \"November14,2008\", \"January16,2009\"), channel (\"728\", \"706\", \"704\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (1.0, 2.0, 10.0), production_code (103.0, 101.0, 110.0), title (\"Enter the Outsiders!\", \"The Rise of the Blue Beetle!\", \"Enter the Outsiders!\")",
        "ambiguous_queries": [
            "select package_option from broadcasting_channel where series_name = 'Sky Radio'",
            "select package_option from television_channel where series_name = 'Sky Radio'"
        ],
        "gold_ambiguity": {
            "match": "{\"Package Options\": [{\"Broadcasting_Channel\": [\"package_option\"]}, {\"Television_Channel\": [\"package_option\"]}], \"series name\": [{\"Broadcasting_Channel\": [\"series_name\"]}, {\"Television_Channel\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Package Options\" refers to the schema \"television_channel\".\"package_option\", \"series name\" refers to the schema \"television_channel\".\"series_name\"",
        "clear_ambiguity": "{\"Package Options\": {\"Television_Channel\": [\"package_option\"]}, \"series name\": {\"Television_Channel\": [\"series_name\"]}}",
        "gold_query": "select package_option from television_channel where series_name = 'Sky Radio'"
    },
    {
        "index": 359,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What are the name of the countries where there is not a single car maker?",
        "schema_without_content": "car_names : makeid , make \", \"pontiac sunbird coupe\", model  | cars_data : cylinders , mpg , weight , id , edispl , horsepower , accelerate , year  | continents : contid , continent  | car_makers : fullname , country , maker , id  | nation : countryname , continent , countryid  | model_list : model , maker , modelid  | state : countryname , continent , countryid",
        "schema_with_content": "car_names : makeid (62, 14, 315), make (\"pontiac astro\", \"chevrolet vega (sw)\", \"pontiac sunbird coupe\"), model (\"audi\", \"subaru\", \"bmw\") | cars_data : cylinders (6, 3, 3), mpg (\"16.9\", \"26.6\", \"23.5\"), weight (1834, 3761, 4080), id (315, 353, 190), edispl (110.0, 232.0, 171.0), horsepower (\"225\", \"148\", \"160\"), accelerate (18.1, 12.0, 12.9), year (1981, 1976, 1982) | continents : contid (2, 5, 5), continent (\"europe\", \"europe\", \"asia\") | car_makers : fullname (\"Fiat\", \"Fiat\", \"Opel\"), country (\"6\", \"1\", \"1\"), maker (\"opel\", \"fiat\", \"renault\"), id (20, 14, 1) | nation : countryname (\"france\", \"egypt\", \"new zealand\"), continent (4, 1, 4), countryid (5, 6, 5) | model_list : model (\"volkswagen\", \"subaru\", \"plymouth\"), maker (5, 1, 17), modelid (3, 36, 35) | state : countryname (\"france\", \"egypt\", \"new zealand\"), continent (4, 1, 4), countryid (5, 6, 5)",
        "ambiguous_queries": [
            "select countryname from nation except select t1.countryname from nation as t1 join car_makers as t2 on t1.countryid = t2.country",
            "select countryname from state except select t1.countryname from state as t1 join car_makers as t2 on t1.countryid = t2.country"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"state\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"state\": [\"name\"]}}",
        "gold_query": "select countryname from state except select t1.countryname from state as t1 join car_makers as t2 on t1.countryid = t2.country"
    },
    {
        "index": 360,
        "db_id": "poker_player",
        "ambig_type": "table",
        "db_file": "table/poker_player/poker_player.sqlite",
        "question": "What are the names of people who are not from Russia?",
        "schema_without_content": "person : name , people_id , height , nationality , birth_date  | individuals : name , people_id , height , nationality , birth_date  | poker_player : money_rank , final_table_made , best_finish , poker_player_id , earnings , people_id",
        "schema_with_content": "person : name (\"Roman Bragin\", \"Sergey Grankin\", \"Aleksey Ostapenko\"), people_id (2, 2, 5), height (194.0, 187.0, 207.0), nationality (\"Russia\", \"Bulgaria\"), birth_date (\"April 17, 1987\", \"January 22, 1987\", \"August 8, 1986\") | individuals : name (\"Roman Bragin\", \"Sergey Grankin\", \"Aleksey Ostapenko\"), people_id (2, 2, 5), height (194.0, 187.0, 207.0), nationality (\"Russia\", \"Bulgaria\"), birth_date (\"April 17, 1987\", \"January 22, 1987\", \"August 8, 1986\") | poker_player : money_rank (58.0, 141.0, 141.0), final_table_made (10.0, 26.0, 10.0), best_finish (1.0, 2.0, 3.0), poker_player_id (1, 1, 3), earnings (189233.0, 142800.0, 142800.0), people_id (1, 7, 2)",
        "ambiguous_queries": [
            "select name from person where nationality != 'Russia'",
            "select name from individuals where nationality != 'Russia'"
        ],
        "gold_ambiguity": {
            "match": "{\"Russia\": [{\"individuals\": [\"nationality\"]}, {\"person\": [\"nationality\"]}], \"names\": [{\"individuals\": [\"name\"]}, {\"person\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Russia\" refers to the schema \"individuals\".\"nationality\", \"names\" refers to the schema \"individuals\".\"name\"",
        "clear_ambiguity": "{\"Russia\": {\"individuals\": [\"nationality\"]}, \"names\": {\"individuals\": [\"name\"]}}",
        "gold_query": "select name from individuals where nationality != 'Russia'"
    },
    {
        "index": 361,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "Find the first name and gender of student who have more than one pet.",
        "schema_without_content": "learner : stuid , fname , city_code , age , major , advisor , lname , sex  | pets : pettype , weight , petid , pet_age  | has_pet : petid , stuid  | enrollee : stuid , fname , city_code , age , major , advisor , lname , sex",
        "schema_with_content": "learner : stuid (1035, 1005, 1006), fname (\"Susan\", \"Bruce\", \"William\"), city_code (\"DAL\", \"DET\", \"PIT\"), age (17, 26, 21), major (50, 540, 550), advisor (5718, 7712, 8423), lname (\"Leighton\", \"Jones\", \"Pang\"), sex (\"F\", \"M\") | pets : pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pet_age (3, 2, 1) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | enrollee : stuid (1035, 1005, 1006), fname (\"Susan\", \"Bruce\", \"William\"), city_code (\"DAL\", \"DET\", \"PIT\"), age (17, 26, 21), major (50, 540, 550), advisor (5718, 7712, 8423), lname (\"Leighton\", \"Jones\", \"Pang\"), sex (\"F\", \"M\")",
        "ambiguous_queries": [
            "select t1.fname, t1.sex from enrollee as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
            "select t1.fname, t1.sex from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"enrollee\": [\"fname\"]}, {\"learner\": [\"fname\"]}], \"student\": [{\"enrollee\": [\"sex\"]}, {\"learner\": [\"sex\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"learner\".\"fname\", \"student\" refers to the schema \"learner\".\"sex\"",
        "clear_ambiguity": "{\"name\": {\"learner\": [\"fname\"]}, \"student\": {\"learner\": [\"sex\"]}}",
        "gold_query": "select t1.fname, t1.sex from learner as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1"
    },
    {
        "index": 362,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "schema_without_content": "games : loser_rank_points , winner_id , winner_rank_points , loser_id , loser_entry , loser_ioc , loser_seed , minutes , loser_hand , winner_age , tourney_name , loser_name , best_of , match_num , draw_size , score  6-3\", \"2-6 6-4 6-3\", winner_rank , round , winner_ht , loser_ht , winner_hand , winner_seed , winner_name , loser_rank , tourney_level , surface , tourney_id , tourney_date , winner_ioc , year , winner_entry , loser_age  | rankings : ranking_date , ranking_points , tours , player_id , ranking  | players : last_name , hand , first_name , country_code , player_id , birth_date  | contests : loser_rank_points , winner_id , winner_rank_points , loser_id , loser_entry , loser_ioc , loser_seed , minutes , loser_hand , winner_age , tourney_name , loser_name , best_of , match_num , draw_size , score  6-3\", \"2-6 6-4 6-3\", winner_rank , round , winner_ht , loser_ht , winner_hand , winner_seed , winner_name , loser_rank , tourney_level , surface , tourney_id , tourney_date , winner_ioc , year , winner_entry , loser_age",
        "schema_with_content": "games : loser_rank_points (3120, 3135, 2054), winner_id (201520, 201505, 201615), winner_rank_points (5270, 5270, 4670), loser_id (201474, 202429, 201505), loser_entry (\"\"), loser_ioc (\"CZE\", \"SUI\", \"TPE\"), loser_seed (2, 4, 12), minutes (85, 73, 165), loser_hand (\"R\", \"L\"), winner_age (24.2902121834, 24.501026694, 24.7802874743), tourney_name (\"Sydney\", \"Linz\", \"Eastbourne\"), loser_name (\"Barbora Zahlavova Strycova\", \"Lucie Safarova\", \"Sloane Stephens\"), best_of (3), match_num (290, 201, 298), draw_size (4, 64, 4), score (\"6-1 3-0 RET\", \"4-6 7-6(2) 6-3\", \"2-6 6-4 6-3\"), winner_rank (27, 50, 48), round (\"BR\", \"QF\", \"SF\"), winner_ht (178, 159, 173), loser_ht (185, 163, 180), winner_hand (\"R\", \"L\"), winner_seed (28, 13, 8), winner_name (\"Garbine Muguruza\", \"Serena Williams\", \"Yanina Wickmayer\"), loser_rank (27, 8, 66), tourney_level (\"I\", \"G\", \"I\"), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_id (\"2016-1051\", \"2017-0406\", \"2016-0804\"), tourney_date (20160926, 20170116, 20160307), winner_ioc (\"JPN\", \"HUN\", \"FRA\"), year (2013, 2016, 2017), winner_entry (\"\"), loser_age (28.402464065700002, 27.0937713895, 26.527036276500002) | rankings : ranking_date (19980420, 20030106, 19871005), ranking_points (8053, 6250, 990), tours (25, 39, 20), player_id (201616, 202468, 204263), ranking (1208, 1475, 717) | players : last_name (\"Castellano\", \"Kroese\", \"Franko\"), hand (\"R\", \"L\", \"U\"), first_name (\"Elysia\", \"Sofiya\", \"Heden\"), country_code (\"CAN\", \"LUX\", \"TCH\"), player_id (211741, 211208, 209536), birth_date (19890807, 19960806, 19461027) | contests : loser_rank_points (3120, 3135, 2054), winner_id (201520, 201505, 201615), winner_rank_points (5270, 5270, 4670), loser_id (201474, 202429, 201505), loser_entry (\"\"), loser_ioc (\"CZE\", \"SUI\", \"TPE\"), loser_seed (2, 4, 12), minutes (85, 73, 165), loser_hand (\"R\", \"L\"), winner_age (24.2902121834, 24.501026694, 24.7802874743), tourney_name (\"Sydney\", \"Linz\", \"Eastbourne\"), loser_name (\"Barbora Zahlavova Strycova\", \"Lucie Safarova\", \"Sloane Stephens\"), best_of (3), match_num (290, 201, 298), draw_size (4, 64, 4), score (\"6-1 3-0 RET\", \"4-6 7-6(2) 6-3\", \"2-6 6-4 6-3\"), winner_rank (27, 50, 48), round (\"BR\", \"QF\", \"SF\"), winner_ht (178, 159, 173), loser_ht (185, 163, 180), winner_hand (\"R\", \"L\"), winner_seed (28, 13, 8), winner_name (\"Garbine Muguruza\", \"Serena Williams\", \"Yanina Wickmayer\"), loser_rank (27, 8, 66), tourney_level (\"I\", \"G\", \"I\"), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_id (\"2016-1051\", \"2017-0406\", \"2016-0804\"), tourney_date (20160926, 20170116, 20160307), winner_ioc (\"JPN\", \"HUN\", \"FRA\"), year (2013, 2016, 2017), winner_entry (\"\"), loser_age (28.402464065700002, 27.0937713895, 26.527036276500002)",
        "ambiguous_queries": [
            "select count(*) from games where year = 2013 or year = 2016",
            "select count(*) from contests where year = 2013 or year = 2016"
        ],
        "gold_ambiguity": {
            "match": "{\"years\": [{\"games\": [\"years\"]}, {\"contests\": [\"years\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"years\" refers to the schema \"contests\".\"years\"",
        "clear_ambiguity": "{\"years\": {\"contests\": [\"years\"]}}",
        "gold_query": "select count(*) from contests where year = 2013 or year = 2016"
    },
    {
        "index": 363,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "How many flights arriving in Aberdeen city?",
        "schema_without_content": "arrival_points : country , airportname , airportcode , countryabbrev , city  | flights : sourceairport , destairport , flightno , airline  | departure_points : country , airportname , airportcode , countryabbrev , city  | airlines : uid , abbreviation , airline , country",
        "schema_with_content": "arrival_points : country (\"United States \"), airportname (\"Alyeska \", \"USN Heliport \", \"Municipal \"), airportcode (\"AOS\", \"WKK\", \"AKP\"), countryabbrev (\"US \", \"US\"), city (\"Altus \", \" Neptune  \", \"Anderson \") | flights : sourceairport (\" ABL\", \" ALS\", \" RLI\"), destairport (\" ANA\", \" KKI\", \" LTS\"), flightno (704, 516, 1364), airline (11, 5, 2) | departure_points : country (\"United States \"), airportname (\"Alyeska \", \"USN Heliport \", \"Municipal \"), airportcode (\"AOS\", \"WKK\", \"AKP\"), countryabbrev (\"US \", \"US\"), city (\"Altus \", \" Neptune  \", \"Anderson \") | airlines : uid (9, 7, 5), abbreviation (\"Frontier\", \"JetBlue\", \"AirTran\"), airline (\"AirTran Airways\", \"American Airlines\", \"AirTran Airways\"), country (\"USA\")",
        "ambiguous_queries": [
            "select count(*) from flights as t1 join departure_points as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen'",
            "select count(*) from flights as t1 join arrival_points as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen'"
        ],
        "gold_ambiguity": {
            "match": "{\"city\": [{\"arrival_points\": [\"city\"]}, {\"departure_points\": [\"city\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"city\" refers to the schema \"departure_points\".\"city\"",
        "clear_ambiguity": "{\"city\": {\"departure_points\": [\"city\"]}}",
        "gold_query": "select count(*) from flights as t1 join departure_points as t2 on t1.destairport = t2.airportcode where t2.city = 'Aberdeen'"
    },
    {
        "index": 364,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "schema_without_content": "Broadcasting_Channel : hight_definition_tv , pixel_aspect_ratio_par , country , id , pay_per_view_ppv , language , series_name , content , package_option \", \"no \", \"Sky Famiglia\" | cartoon : production_code , channel , original_air_date , title , id , directed_by , written_by  | Television_Channel : hight_definition_tv , pixel_aspect_ratio_par , country , id , pay_per_view_ppv , language , series_name , content , package_option \", \"no \", \"Sky Famiglia\" | tv_series : id , air_date , weekly_rank , share , viewers_m , 18_49_rating_share , episode , channel , rating",
        "schema_with_content": "Broadcasting_Channel : hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"717\", \"705\", \"719\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), series_name (\"MTV Dance\", \"MTV Rocks\", \"Sky Radio\"), content (\"music\"), package_option (\"no ( FTV )\", \"no ( FTV )\", \"Sky Famiglia\") | cartoon : production_code (101.0, 104.0, 102.0), channel (\"728\", \"706\", \"706\"), original_air_date (\"November14,2008\", \"January23,2009\", \"December12,2008\"), title (\"Journey to the Center of the Bat!\", \"Terror on Dinosaur Island!\", \"Invasion of the Secret Santas!\"), id (9.0, 12.0, 6.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Michael Jelenic\", \"Matt Wayne\", \"Todd Casey\") | Television_Channel : hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"717\", \"705\", \"719\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), series_name (\"MTV Dance\", \"MTV Rocks\", \"Sky Radio\"), content (\"music\"), package_option (\"no ( FTV )\", \"no ( FTV )\", \"Sky Famiglia\") | tv_series : id (12.0, 1.0, 2.0), air_date (\"October 1, 2007\", \"November 5, 2007\", \"November 19, 2007\"), weekly_rank (80.0, 65.0, 72.0), share (6.0, 6.0, 9.0), viewers_m (\"6.75\", \"4.24\", \"5.13\"), 18_49_rating_share (\"1.5/4\", \"2.9/7\", \"2.1/5\"), episode (\"Game Three\", \"The Year of the Rabbit\", \"Blowback\"), channel (\"714\", \"713\", \"719\"), rating (\"5.3\", \"4.3\", \"4.4\")",
        "ambiguous_queries": [
            "select t1.series_name, t1.country from broadcasting_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from broadcasting_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'",
            "select t1.series_name, t1.country from television_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from television_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{\"Broadcasting_Channel\": [\"country\"]}, {\"Television_Channel\": [\"country\"]}], \"series name\": [{\"Broadcasting_Channel\": [\"series_name\"]}, {\"Television_Channel\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"television_channel\".\"country\", \"series name\" refers to the schema \"television_channel\".\"series_name\"",
        "clear_ambiguity": "{\"country\": {\"Television_Channel\": [\"country\"]}, \"series name\": {\"Television_Channel\": [\"series_name\"]}}",
        "gold_query": "select t1.series_name, t1.country from television_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from television_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'"
    },
    {
        "index": 365,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Return the names of the 3 most populated countries.",
        "schema_without_content": "nation : population , surfacearea , localname , indepyear , governmentform , code2 , headofstate , name , code , continent , capital , lifeexpectancy , gnpold , region , gnp  | state : population , surfacearea , localname , indepyear , governmentform , code2 , headofstate , name , code , continent , capital , lifeexpectancy , gnpold , region , gnp  | city : id , countrycode , name , population , district  | countrylanguage : isofficial , language , countrycode , percentage  | sqlite_sequence : seq , name",
        "schema_with_content": "nation : population (6217000, 1000, 129155000), surfacearea (774815.0, 652090.0, 12.0), localname (\"Al-Urdunn\", \"Zhongquo\", \"Chile\"), indepyear (1984, 1867, 1907), governmentform (\"Administrated by the UN\", \"Islamic Emirate\", \"Emirate Federation\"), code2 (\"AW\", \"BB\", \"GD\"), headofstate (\"Ahmet Necdet Sezer\", \"Ferenc MÃ¡dl\", \"Jiang Zemin\"), name (\"Costa Rica\", \"India\", \"Samoa\"), code (\"LCA\", \"IND\", \"ATF\"), continent (\"Africa\", \"Europe\", \"Asia\"), capital (3212, 2295, 3813), lifeexpectancy (65.3, 57.8, 39.3), gnpold (98577.0, 146171.0, 102133.0), region (\"Central Africa\", \"Central America\", \"Antarctica\"), gnp (84982.0, 27037.0, 334.0) | state : population (6217000, 1000, 129155000), surfacearea (774815.0, 652090.0, 12.0), localname (\"Al-Urdunn\", \"Zhongquo\", \"Chile\"), indepyear (1984, 1867, 1907), governmentform (\"Administrated by the UN\", \"Islamic Emirate\", \"Emirate Federation\"), code2 (\"AW\", \"BB\", \"GD\"), headofstate (\"Ahmet Necdet Sezer\", \"Ferenc MÃ¡dl\", \"Jiang Zemin\"), name (\"Costa Rica\", \"India\", \"Samoa\"), code (\"LCA\", \"IND\", \"ATF\"), continent (\"Africa\", \"Europe\", \"Asia\"), capital (3212, 2295, 3813), lifeexpectancy (65.3, 57.8, 39.3), gnpold (98577.0, 146171.0, 102133.0), region (\"Central Africa\", \"Central America\", \"Antarctica\"), gnp (84982.0, 27037.0, 334.0) | city : id (3684, 109, 2872), countrycode (\"HUN\", \"BHS\", \"JOR\"), name (\"Kars\", \"Lafayette\", \"Ho Chi Minh City\"), population (140173, 461877, 197408), district (\"Mandalay\", \"Tyva\", \"al-Najaf\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Southsotho\", \"Pampango\", \"Silesiana\"), countrycode (\"AUS\", \"KHM\", \"EST\"), percentage (16.4, 14.8, 16.4) | sqlite_sequence : seq (4079), name (\"city\")",
        "ambiguous_queries": [
            "select name from nation order by population desc limit 3",
            "select name from state order by population desc limit 3"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}], \"populated\": [{\"nation\": [\"population\"]}, {\"state\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"state\".\"name\", \"populated\" refers to the schema \"state\".\"population\"",
        "clear_ambiguity": "{\"names\": {\"state\": [\"name\"]}, \"populated\": {\"state\": [\"population\"]}}",
        "gold_query": "select name from state order by population desc limit 3"
    },
    {
        "index": 366,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "schema_without_content": "journeys : destairport , flightno , sourceairport , airline  | routes : destairport , flightno , sourceairport , airline  | airlines : abbreviation , uid , airline , country  | airports : city , airportcode , airportname , countryabbrev , country",
        "schema_with_content": "journeys : destairport (\" AIK\", \" ANP\", \" EDF\"), flightno (1206, 1257, 1274), sourceairport (\" ATS\", \" RLI\", \" KKI\"), airline (6, 10, 1) | routes : destairport (\" AIK\", \" ANP\", \" EDF\"), flightno (1206, 1257, 1274), sourceairport (\" ATS\", \" RLI\", \" KKI\"), airline (6, 10, 1) | airlines : abbreviation (\"Delta\", \"Delta\", \"Allegiant\"), uid (3, 1, 11), airline (\"US Airways\", \"AirTran Airways\", \"Delta Airlines\"), country (\"USA\") | airports : city (\"Albany \", \"Amery \", \"Anaktuvuk \"), airportcode (\"VJI\", \"LTS\", \"AHF\"), airportname (\"Fulton International \", \"Annette Island \", \"Anaktuvuk \"), countryabbrev (\"US \", \"US\"), country (\"United States \")",
        "ambiguous_queries": [
            "select t1.airline from airlines as t1 join journeys as t2 on t1.uid = t2.airline where t2.destairport = 'AHD'",
            "select t1.airline from airlines as t1 join routes as t2 on t1.uid = t2.airline where t2.destairport = 'AHD'"
        ],
        "gold_ambiguity": {
            "match": "{\"flights\": [{\"journeys\": [\"destairport\"]}, {\"routes\": [\"destairport\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"flights\" refers to the schema \"journeys\".\"destairport\"",
        "clear_ambiguity": "{\"flights\": {\"journeys\": [\"destairport\"]}}",
        "gold_query": "select t1.airline from airlines as t1 join journeys as t2 on t1.uid = t2.airline where t2.destairport = 'AHD'"
    },
    {
        "index": 367,
        "db_id": "poker_player",
        "ambig_type": "table",
        "db_file": "table/poker_player/poker_player.sqlite",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "schema_without_content": "people : name , people_id , birth_date , nationality , height  | gambler : money_rank , poker_player_id , best_finish , earnings , people_id , final_table_made  | player : money_rank , poker_player_id , best_finish , earnings , people_id , final_table_made",
        "schema_with_content": "people : name (\"Semen Poltavskiy\", \"Sergey Grankin\", \"Sergey Grankin\"), people_id (5, 1, 2), birth_date (\"August 16, 1982\", \"February 8, 1981\", \"May 26, 1986\"), nationality (\"Russia\", \"Bulgaria\"), height (193.0, 207.0, 196.0) | gambler : money_rank (68.0, 141.0, 68.0), poker_player_id (1, 2, 5), best_finish (1.0, 2.0, 3.0), earnings (476090.0, 104871.0, 104871.0), people_id (2, 7, 7), final_table_made (19.0, 42.0, 10.0) | player : money_rank (68.0, 141.0, 68.0), poker_player_id (1, 2, 5), best_finish (1.0, 2.0, 3.0), earnings (476090.0, 104871.0, 104871.0), people_id (2, 7, 7), final_table_made (19.0, 42.0, 10.0)",
        "ambiguous_queries": [
            "select t1.birth_date from people as t1 join player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
            "select t1.birth_date from people as t1 join gambler as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"earnings\": [{\"gambler\": [\"earnings\"]}, {\"player\": [\"earnings\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"earnings\" refers to the schema \"gambler\".\"earnings\"",
        "clear_ambiguity": "{\"earnings\": {\"gambler\": [\"earnings\"]}}",
        "gold_query": "select t1.birth_date from people as t1 join gambler as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1"
    },
    {
        "index": 368,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the name of the course with the most students enrolled?",
        "schema_without_content": "departments : other_details , department_id , department_description , department_name  | transcript_contents : transcript_id , student_course_id  | student_enrolment : student_id , degree_program_id , semester_id , student_enrolment_id , other_details  | addresses : other_address_details , country , city , line_1 , zip_postcode , state_province_county , line_2 , address_id , line_3  | Subjects : other_details , course_id , course_description , course_name  | students : current_address_id , other_student_details , first_name , last_name , permanent_address_id , date_left , middle_name , ssn , student_id , email_address , date_first_registered , cell_mobile_number 889-8954x524\" | degree_programs : degree_program_id , department_id , other_details , degree_summary_name , degree_summary_description  | Modules : other_details , course_id , course_description , course_name  | semesters : semester_id , semester_description , other_details , semester_name  | sections : section_description , section_name , course_id , section_id , other_details  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_date , other_details , transcript_id",
        "schema_with_content": "departments : other_details (None), department_id (15, 12, 1), department_description (\"nostrum\", \"natus\", \"autem\"), department_name (\"computer science\", \"linguistic\", \"engineer\") | transcript_contents : transcript_id (13, 2, 13), student_course_id (8, 2, 7) | student_enrolment : student_id (1, 7, 9), degree_program_id (3, 9, 5), semester_id (13, 12, 6), student_enrolment_id (13, 3, 4), other_details (None) | addresses : other_address_details (None), country (\"Samoa\", \"Samoa\", \"Burundi\"), city (\"Michelleburgh\", \"Mariliehaven\", \"Michelleburgh\"), line_1 (\"3999 Aufderhar Ways Suite 593\", \"67942 Carlotta Ferry Apt. 686\", \"3999 Aufderhar Ways Suite 593\"), zip_postcode (\"068\", \"068\", \"148\"), state_province_county (\"Idaho\", \"Idaho\", \"NorthCarolina\"), line_2 (\"Suite 079\", \"Apt. 388\", \"Apt. 468\"), address_id (2, 1, 4), line_3 (None) | Subjects : other_details (None), course_id (1, 5, 3), course_description (\"l\", \"v\", \"c\"), course_name (\"rs\", \"la\", \"pl\") | students : current_address_id (6, 10, 6), other_student_details (\"non\", \"omnis\", \"facilis\"), first_name (\"Reva\", \"Deon\", \"Frida\"), last_name (\"Weimann\", \"Mohr\", \"Rogahn\"), permanent_address_id (14, 9, 14), date_left (\"2007-08-02 04:12:58\", \"1999-08-24 00:07:10\", \"1999-08-24 00:07:10\"), middle_name (\"Mona\", \"Golda\", \"Anna\"), ssn (\"248\", \"\", \"402\"), student_id (5, 13, 8), email_address (\"erwin.zboncak@example.com\", \"qo'kon@example.com\", \"mya88@example.org\"), date_first_registered (\"1973-05-19 19:12:46\", \"1973-05-19 19:12:46\", \"1982-06-19 13:15:18\"), cell_mobile_number (\"03174364122\", \"877.549.9067x8723\", \"(096)889-8954x524\") | degree_programs : degree_program_id (7, 4, 9), department_id (15, 3, 14), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"unde\", \"qui\", \"esse\") | Modules : other_details (None), course_id (1, 5, 3), course_description (\"l\", \"v\", \"c\"), course_name (\"rs\", \"la\", \"pl\") | semesters : semester_id (5, 9, 13), semester_description (\"w\", \"m\", \"t\"), other_details (None), semester_name (\"winter 2010\", \"fall 2018\", \"spring 2014\") | sections : section_description (\"provident\", \"voluptatem\", \"ex\"), section_name (\"j\", \"d\", \"j\"), course_id (1, 1, 2), section_id (9, 7, 3), other_details (None) | student_enrolment_courses : course_id (6, 4, 12), student_enrolment_id (14, 9, 6), student_course_id (604750, 83814225, 438800) | transcripts : transcript_date (\"2002-09-24 06:11:49\", \"1975-05-20 18:31:21\", \"1975-10-28 15:16:51\"), other_details (None), transcript_id (14, 4, 11)",
        "ambiguous_queries": [
            "select t1.course_name from subjects as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
            "select t1.course_name from modules as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"Subjects\": [\"course_name\"]}, {\"Modules\": [\"course_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"subjects\".\"course_name\"",
        "clear_ambiguity": "{\"name\": {\"Subjects\": [\"course_name\"]}}",
        "gold_query": "select t1.course_name from subjects as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1"
    },
    {
        "index": 369,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "schema_without_content": "student : age , fname , stuid , major , sex , advisor , lname , city_code  | has_pet : stuid , petid  | Animals : pet_age , petid , pettype , weight  | Companions : pet_age , petid , pettype , weight",
        "schema_with_content": "student : age (19, 19, 21), fname (\"Arthur\", \"Jandy\", \"Bruce\"), stuid (1031, 1025, 1033), major (550, 550, 100), sex (\"F\", \"M\"), advisor (8772, 8721, 9172), lname (\"Simms\", \"Smith\", \"Adams\"), city_code (\"LON\", \"PHL\", \"BOS\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | Animals : pet_age (3, 2, 1), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3) | Companions : pet_age (3, 2, 1), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3)",
        "ambiguous_queries": [
            "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join animals as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
            "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join companions as t3 on t3.petid = t2.petid where t3.pettype = 'cat')"
        ],
        "gold_ambiguity": {
            "match": "{\"major\": [{\"Animals\": [\"major\"]}, {\"Companions\": [\"major\"]}], \"old\": [{\"Animals\": [\"age\"]}, {\"Companions\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"major\" refers to the schema \"animals\".\"major\", \"old\" refers to the schema \"animals\".\"age\"",
        "clear_ambiguity": "{\"major\": {\"Animals\": [\"major\"]}, \"old\": {\"Animals\": [\"age\"]}}",
        "gold_query": "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join animals as t3 on t3.petid = t2.petid where t3.pettype = 'cat')"
    },
    {
        "index": 370,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "schema_without_content": "sqlite_sequence : seq , name  | state : name , surfacearea , region , population , lifeexpectancy , code , continent , governmentform , gnp , indepyear , capital , code2 , headofstate , localname , gnpold  | countrylanguage : isofficial , language , countrycode , percentage  | nation : name , surfacearea , region , population , lifeexpectancy , code , continent , governmentform , gnp , indepyear , capital , code2 , headofstate , localname , gnpold  | city : name , id , district , population , countrycode",
        "schema_with_content": "sqlite_sequence : seq (4079), name (\"city\") | state : name (\"Micronesia, Federated States of\", \"Samoa\", \"Zimbabwe\"), surfacearea (83600.0, 1246700.0, 264.0), region (\"Western Africa\", \"Baltic Countries\", \"Eastern Europe\"), population (15000, 24039000, 23115000), lifeexpectancy (81.6, 79.8, 51.1), code (\"PNG\", \"PHL\", \"AIA\"), continent (\"South America\", \"Africa\", \"North America\"), governmentform (\"Dependent Territory of the US\", \"Federation\", \"Nonmetropolitan Territory of France\"), gnp (2108.0, 249704.0, 8287.0), indepyear (1867, 1960, 1948), capital (2696, 716, 3499), code2 (\"ZA\", \"MO\", \"RE\"), headofstate (\"JosÃ© Eduardo dos Santos\", \"Jorge SampÃ£io\", \"Rainier III\"), localname (\"Nihon/Nippon\", \"Deutschland\", \"Christmas Island\"), gnpold (227757.0, 2500.0, 52037.0) | countrylanguage : isofficial (\"T\", \"F\"), language (\"Lezgian\", \"Saame\", \"Czech and Moravian\"), countrycode (\"LVA\", \"GMB\", \"LUX\"), percentage (3.6, 88.6, 92.1) | nation : name (\"Micronesia, Federated States of\", \"Samoa\", \"Zimbabwe\"), surfacearea (83600.0, 1246700.0, 264.0), region (\"Western Africa\", \"Baltic Countries\", \"Eastern Europe\"), population (15000, 24039000, 23115000), lifeexpectancy (81.6, 79.8, 51.1), code (\"PNG\", \"PHL\", \"AIA\"), continent (\"South America\", \"Africa\", \"North America\"), governmentform (\"Dependent Territory of the US\", \"Federation\", \"Nonmetropolitan Territory of France\"), gnp (2108.0, 249704.0, 8287.0), indepyear (1867, 1960, 1948), capital (2696, 716, 3499), code2 (\"ZA\", \"MO\", \"RE\"), headofstate (\"JosÃ© Eduardo dos Santos\", \"Jorge SampÃ£io\", \"Rainier III\"), localname (\"Nihon/Nippon\", \"Deutschland\", \"Christmas Island\"), gnpold (227757.0, 2500.0, 52037.0) | city : name (\"Sibiu\", \"Wuhai\", \"Tucheng\"), id (1819, 931, 3783), district (\"Lviv\", \"Centre\", \"Tigray\"), population (386236, 110379, 342264), countrycode (\"GNB\", \"HUN\", \"SOM\")",
        "ambiguous_queries": [
            "select distinct t3.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 'T' and t2.language = 'Chinese' and t1.continent = 'Asia'",
            "select distinct t3.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 'T' and t2.language = 'Chinese' and t1.continent = 'Asia'"
        ],
        "gold_ambiguity": {
            "match": "{\"Asia\": [{\"nation\": [\"continent\"]}, {\"state\": [\"continent\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Asia\" refers to the schema \"nation\".\"continent\"",
        "clear_ambiguity": "{\"Asia\": {\"nation\": [\"continent\"]}}",
        "gold_query": "select distinct t3.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 'T' and t2.language = 'Chinese' and t1.continent = 'Asia'"
    },
    {
        "index": 371,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "schema_without_content": "routes : destairport , airline , sourceairport , flightno  | journeys : destairport , airline , sourceairport , flightno  | airports : country , city , airportcode , countryabbrev , airportname  | airlines : airline , uid , country , abbreviation",
        "schema_with_content": "routes : destairport (\" ALI\", \" APN\", \" AKP\"), airline (6, 2, 3), sourceairport (\" ANA\", \" AEL\", \" AAF\"), flightno (524, 1132, 827) | journeys : destairport (\" ALI\", \" APN\", \" AKP\"), airline (6, 2, 3), sourceairport (\" ANA\", \" AEL\", \" AAF\"), flightno (524, 1132, 827) | airports : country (\"United States \"), city (\"Allakaket \", \"Antlers \", \"Anacostia \"), airportcode (\"AED\", \"ATE\", \"EDF\"), countryabbrev (\"US \", \"US\"), airportname (\"Andrews \", \"Ambler \", \"Alyeska \") | airlines : airline (\"AirTran Airways\", \"Frontier Airlines\", \"JetBlue Airways\"), uid (11, 7, 10), country (\"USA\"), abbreviation (\"Delta\", \"Southwest\", \"Southwest\")",
        "ambiguous_queries": [
            "select flightno from journeys where sourceairport = 'APG'",
            "select flightno from routes where sourceairport = 'APG'"
        ],
        "gold_ambiguity": {
            "match": "{\"Airport\": [{\"journeys\": [\"sourceairport\"]}, {\"routes\": [\"sourceairport\"]}], \"flight numbers\": [{\"journeys\": [\"flightno\"]}, {\"routes\": [\"flightno\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Airport\" refers to the schema \"routes\".\"sourceairport\", \"flight numbers\" refers to the schema \"routes\".\"flightno\"",
        "clear_ambiguity": "{\"Airport\": {\"routes\": [\"sourceairport\"]}, \"flight numbers\": {\"routes\": [\"flightno\"]}}",
        "gold_query": "select flightno from routes where sourceairport = 'APG'"
    },
    {
        "index": 372,
        "db_id": "battle_death",
        "ambig_type": "table",
        "db_file": "table/battle_death/battle_death.sqlite",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "schema_without_content": "battle : latin_commander , bulgarian_commander , result , name , id , date  | vessel : disposition_of_ship , location , lost_in_battle , ship_type , name , id , tonnage  | navy : disposition_of_ship , location , lost_in_battle , ship_type , name , id , tonnage  | death : injured , note , caused_by_ship_id , id , killed",
        "schema_with_content": "battle : latin_commander (\"Henry I\", \"John of Brienne\", \"Unknown\"), bulgarian_commander (\"Kaloyan\", \"Boril\", \"Boril\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), name (\"Battle of Rodosto\", \"Battle of Boruy\", \"Siege of Constantinople\"), id (1, 6, 8), date (\"June 1205\", \"June 1205\", \"4 September 1207\") | vessel : disposition_of_ship (\"Sank\", \"Captured\", \"Wrecked\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), lost_in_battle (4, 8, 4), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), name (\"Bon Accord\", \"Bon Accord\", \"Three Brothers\"), id (5, 4, 6), tonnage (\"t\", \"391\", \"225\") | navy : disposition_of_ship (\"Sank\", \"Captured\", \"Wrecked\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), lost_in_battle (4, 8, 4), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), name (\"Bon Accord\", \"Bon Accord\", \"Three Brothers\"), id (5, 4, 6), tonnage (\"t\", \"391\", \"225\") | death : injured (0, 9, 5), note (\"East Champaran, Bihar\", \"WestMidnapore, West Bengal\", \"Kanker, Chhattisgarh\"), caused_by_ship_id (6, 6, 3), id (13, 10, 1), killed (0, 0, 29)",
        "ambiguous_queries": [
            "select count(*) from battle where id not in (select lost_in_battle from vessel where tonnage = '225')",
            "select count(*) from battle where id not in (select lost_in_battle from navy where tonnage = '225')"
        ],
        "gold_ambiguity": {
            "match": "{\"lose\": [{\"navy\": [\"lost_in_battle\"]}, {\"vessel\": [\"lost_in_battle\"]}], \"tonnage\": [{\"navy\": [\"tonnage\"]}, {\"vessel\": [\"tonnage\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"lose\" refers to the schema \"navy\".\"lost_in_battle\", \"tonnage\" refers to the schema \"navy\".\"tonnage\"",
        "clear_ambiguity": "{\"lose\": {\"navy\": [\"lost_in_battle\"]}, \"tonnage\": {\"navy\": [\"tonnage\"]}}",
        "gold_query": "select count(*) from battle where id not in (select lost_in_battle from navy where tonnage = '225')"
    },
    {
        "index": 373,
        "db_id": "course_teach",
        "ambig_type": "table",
        "db_file": "table/course_teach/course_teach.sqlite",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "schema_without_content": "teacher : age , teacher_id , hometown , name  | course : course , course_id , staring_date  | timetable : teacher_id , course_id , grade  | class_schedule : teacher_id , course_id , grade",
        "schema_with_content": "teacher : age (\"29\", \"41\", \"33\"), teacher_id (4, 1, 7), hometown (\"Farnworth Municipal Borough\", \"Blackrod Urban District\", \"Farnworth Municipal Borough\"), name (\"Joseph Huts\", \"Lucy Wong\", \"Vicente Carretero\") | course : course (\"French\", \"Bible\", \"Geography\"), course_id (8, 9, 6), staring_date (\"10 May\", \"13 May\", \"6 May\") | timetable : teacher_id (5, 3, 7), course_id (10, 4, 5), grade (5, 7, 5) | class_schedule : teacher_id (5, 3, 7), course_id (10, 4, 5), grade (5, 7, 5)",
        "ambiguous_queries": [
            "select name from teacher where teacher_id not in (select teacher_id from class_schedule)",
            "select name from teacher where teacher_id not in (select teacher_id from timetable)"
        ],
        "gold_ambiguity": {
            "match": "{\"teachers\": [{\"class_schedule\": [\"teacher_id\"]}, {\"timetable\": [\"teacher_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"teachers\" refers to the schema \"timetable\".\"teacher_id\"",
        "clear_ambiguity": "{\"teachers\": {\"timetable\": [\"teacher_id\"]}}",
        "gold_query": "select name from teacher where teacher_id not in (select teacher_id from timetable)"
    },
    {
        "index": 374,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "table",
        "db_file": "table/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What are the names of all courses that have some students enrolled?",
        "schema_without_content": "Modules : course_id , course_name , other_details , course_description  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | sections : course_id , section_id , section_description , section_name , other_details  | Subjects : course_id , course_name , other_details , course_description  | student_enrolment : semester_id , student_id , other_details , student_enrolment_id , degree_program_id  | degree_programs : degree_program_id , degree_summary_description , degree_summary_name , department_id , other_details  | transcript_contents : transcript_id , student_course_id  | students : cell_mobile_number , email_address , first_name , ssn , current_address_id , other_student_details , date_first_registered , middle_name , student_id , date_left , permanent_address_id , last_name  | transcripts : other_details , transcript_id , transcript_date  | departments : other_details , department_id , department_name , department_description  | addresses : city , line_3 , line_2 , other_address_details , address_id , state_province_county , zip_postcode , line_1 , country  | semesters : semester_description , semester_id , semester_name , other_details",
        "schema_with_content": "Modules : course_id (15, 15, 2), course_name (\"ds\", \"en\", \"pl\"), other_details (None), course_description (\"d\", \"v\", \"q\") | student_enrolment_courses : course_id (12, 11, 10), student_course_id (9860, 9860, 8), student_enrolment_id (13, 14, 13) | sections : course_id (8, 7, 1), section_id (3, 11, 9), section_description (\"non\", \"ad\", \"nesciunt\"), section_name (\"o\", \"c\", \"g\"), other_details (None) | Subjects : course_id (15, 15, 2), course_name (\"ds\", \"en\", \"pl\"), other_details (None), course_description (\"d\", \"v\", \"q\") | student_enrolment : semester_id (4, 15, 4), student_id (1, 1, 12), other_details (None), student_enrolment_id (2, 4, 7), degree_program_id (12, 5, 4) | degree_programs : degree_program_id (8, 3, 11), degree_summary_description (\"quam\", \"unde\", \"qui\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (8, 12, 15), other_details (None) | transcript_contents : transcript_id (8, 9, 13), student_course_id (45105806, 0, 8) | students : cell_mobile_number (\"436.613.7683\", \"09700166582\", \"877.549.9067x8723\"), email_address (\"jillian26@example.net\", \"dell43@example.net\", \"mya88@example.org\"), first_name (\"Deon\", \"Timmothy\", \"Helga\"), ssn (\"156\", \"43\", \"248\"), current_address_id (6, 15, 1), other_student_details (\"facilis\", \"rerum\", \"nesciunt\"), date_first_registered (\"1971-02-05 07:28:23\", \"1997-03-20 16:47:25\", \"1986-02-24 21:12:23\"), middle_name (\"Judd\", \"Aaliyah\", \"Alberta\"), student_id (2, 6, 15), date_left (\"1997-11-16 08:54:33\", \"2007-03-31 09:53:19\", \"2007-08-02 04:12:58\"), permanent_address_id (15, 14, 4), last_name (\"Osinski\", \"Ward\", \"Christiansen\") | transcripts : other_details (None), transcript_id (15, 5, 5), transcript_date (\"2013-06-30 13:01:40\", \"1975-05-20 18:31:21\", \"1975-05-06 12:04:47\") | departments : other_details (None), department_id (14, 13, 15), department_name (\"economics\", \"biology\", \"drama\"), department_description (\"non\", \"non\", \"in\") | addresses : city (\"South Palma\", \"Port Evanston\", \"Port Oceane\"), line_3 (None), line_2 (\"Apt. 689\", \"Apt. 406\", \"Suite 383\"), other_address_details (None), address_id (2, 9, 12), state_province_county (\"Virginia\", \"Hawaii\", \"Washington\"), zip_postcode (\"400\", \"638\", \"669\"), line_1 (\"186 Evan Motorway Apt. 409\", \"979 Haag Shores Suite 656\", \"3999 Aufderhar Ways Suite 593\"), country (\"Norfolk Island\", \"Lesotho\", \"Samoa\") | semesters : semester_description (\"c\", \"t\", \"c\"), semester_id (2, 3, 9), semester_name (\"fall 2018\", \"spring 2012\", \"spring 2018\"), other_details (None)",
        "ambiguous_queries": [
            "select distinct t1.course_name from subjects as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
            "select distinct t1.course_name from modules as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"Subjects\": [\"course_name\"]}, {\"Modules\": [\"course_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"modules\".\"course_name\"",
        "clear_ambiguity": "{\"names\": {\"Modules\": [\"course_name\"]}}",
        "gold_query": "select distinct t1.course_name from modules as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id"
    },
    {
        "index": 375,
        "db_id": "battle_death",
        "ambig_type": "table",
        "db_file": "table/battle_death/battle_death.sqlite",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "schema_without_content": "conflict : latin_commander , name , bulgarian_commander , id , date , result  | warfare : latin_commander , name , bulgarian_commander , id , date , result  | death : killed , injured , caused_by_ship_id , note , id  | ship : name , lost_in_battle , id , tonnage , ship_type , disposition_of_ship , location",
        "schema_with_content": "conflict : latin_commander (\"John of Brienne\", \"Thierry de Termond\", \"Unknown\"), name (\"Battle of Messinopolis\", \"Battle of Adrianople\", \"Battle of Messinopolis\"), bulgarian_commander (\"Kaloyan\", \"Unknown\", \"Boril\"), id (8, 5, 2), date (\"31 January 1206\", \"June 1205\", \"1235\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\") | warfare : latin_commander (\"John of Brienne\", \"Thierry de Termond\", \"Unknown\"), name (\"Battle of Messinopolis\", \"Battle of Adrianople\", \"Battle of Messinopolis\"), bulgarian_commander (\"Kaloyan\", \"Unknown\", \"Boril\"), id (8, 5, 2), date (\"31 January 1206\", \"June 1205\", \"1235\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\") | death : killed (0, 14, 3), injured (0, 9, 5), caused_by_ship_id (2, 6, 3), note (\"Sundargarh, Odisha\", \"East Champaran, Bihar\", \"East Champaran, Bihar\"), id (6, 4, 11) | ship : name (\"HMS Atalanta\", \"Three Brothers\", \"Mary\"), lost_in_battle (4, 5, 4), id (3, 4, 1), tonnage (\"t\", \"391\", \"225\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), disposition_of_ship (\"Wrecked\", \"Wrecked\", \"Scuttled\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\")",
        "ambiguous_queries": [
            "select distinct t1.id, t1.name from warfare as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
            "select distinct t1.id, t1.name from conflict as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"conflict\": [\"name\"]}, {\"warfare\": [\"name\"]}], \"ids\": [{\"conflict\": [\"id\"]}, {\"warfare\": [\"id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"warfare\".\"name\", \"ids\" refers to the schema \"warfare\".\"id\"",
        "clear_ambiguity": "{\"names\": {\"warfare\": [\"name\"]}, \"ids\": {\"warfare\": [\"id\"]}}",
        "gold_query": "select distinct t1.id, t1.name from warfare as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'"
    },
    {
        "index": 376,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "schema_without_content": "city : district , population , countrycode , name , id  | state : indepyear , region , surfacearea , capital , gnp , gnpold , population , governmentform , localname , code , continent , headofstate , name , code2 , lifeexpectancy  | countrylanguage : isofficial , countrycode , language , percentage  | nation : indepyear , region , surfacearea , capital , gnp , gnpold , population , governmentform , localname , code , continent , headofstate , name , code2 , lifeexpectancy  | sqlite_sequence : name , seq",
        "schema_with_content": "city : district (\"Zulia\", \"Hordaland\", \"Fukuoka\"), population (99862, 93623, 161032), countrycode (\"LBN\", \"GIB\", \"BDI\"), name (\"Zeleznodoroznyi\", \"Shibin al-Kawm\", \"Lahti\"), id (2205, 3723, 2508) | state : indepyear (1828, 1921, 1867), region (\"Eastern Asia\", \"Central America\", \"Western Africa\"), surfacearea (143998.0, 62422.0, 9363520.0), capital (2318, 937, 2728), gnp (10692.0, 261.0, 11863.0), gnpold (6180.0, 532031.0, 2559.0), population (5433000, 4968000, 170115000), governmentform (\"Nonmetropolitan Territory of France\", \"Republic\", \"Dependent Territory of the UK\"), localname (\"Wallis-et-Futuna\", \"Al-Urdunn\", \"Belarus\"), code (\"GRC\", \"SVN\", \"EST\"), continent (\"Asia\", \"Africa\", \"Oceania\"), headofstate (\"John Bani\", \"John Bani\", \"Shahabuddin Ahmad\"), name (\"Greece\", \"Lebanon\", \"Guinea\"), code2 (\"LU\", \"CO\", \"SI\"), lifeexpectancy (74.5, 66.3, 37.2) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"IRN\", \"NCL\", \"GEO\"), language (\"Zhuang\", \"Gusii\", \"Mandyako\"), percentage (89.5, 10.5, 38.6) | nation : indepyear (1828, 1921, 1867), region (\"Eastern Asia\", \"Central America\", \"Western Africa\"), surfacearea (143998.0, 62422.0, 9363520.0), capital (2318, 937, 2728), gnp (10692.0, 261.0, 11863.0), gnpold (6180.0, 532031.0, 2559.0), population (5433000, 4968000, 170115000), governmentform (\"Nonmetropolitan Territory of France\", \"Republic\", \"Dependent Territory of the UK\"), localname (\"Wallis-et-Futuna\", \"Al-Urdunn\", \"Belarus\"), code (\"GRC\", \"SVN\", \"EST\"), continent (\"Asia\", \"Africa\", \"Oceania\"), headofstate (\"John Bani\", \"John Bani\", \"Shahabuddin Ahmad\"), name (\"Greece\", \"Lebanon\", \"Guinea\"), code2 (\"LU\", \"CO\", \"SI\"), lifeexpectancy (74.5, 66.3, 37.2) | sqlite_sequence : name (\"city\"), seq (4079)",
        "ambiguous_queries": [
            "select avg(gnp), sum(population) from nation where governmentform = 'US Territory'",
            "select avg(gnp), sum(population) from state where governmentform = 'US Territory'"
        ],
        "gold_ambiguity": {
            "match": "{\"GNP\": [{\"nation\": [\"gnp\"]}, {\"state\": [\"gnp\"]}], \"US territory\": [{\"nation\": [\"governmentform\"]}, {\"state\": [\"governmentform\"]}], \"population\": [{\"nation\": [\"population\"]}, {\"state\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"GNP\" refers to the schema \"state\".\"gnp\", \"US territory\" refers to the schema \"state\".\"governmentform\", \"population\" refers to the schema \"state\".\"population\"",
        "clear_ambiguity": "{\"GNP\": {\"state\": [\"gnp\"]}, \"US territory\": {\"state\": [\"governmentform\"]}, \"population\": {\"state\": [\"population\"]}}",
        "gold_query": "select avg(gnp), sum(population) from state where governmentform = 'US Territory'"
    },
    {
        "index": 377,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "schema_without_content": "auto_data : mpg , edispl , id , cylinders , accelerate , horsepower , year , weight  | countries : countryname , continent , countryid  | continents : contid , continent  | model_list : modelid , model , maker  | car_makers : country , maker , fullname , id  | vehicle_data : mpg , edispl , id , cylinders , accelerate , horsepower , year , weight  | car_names : make , makeid , model",
        "schema_with_content": "auto_data : mpg (\"22\", \"37.7\", \"44.3\"), edispl (97.5, 70.0, 454.0), id (379, 51, 294), cylinders (8, 5, 8), accelerate (13.5, 11.0, 11.2), horsepower (\"60\", \"85\", \"149\"), year (1974, 1975, 1982), weight (2556, 2075, 3988) | countries : countryname (\"usa\", \"germany\", \"korea\"), continent (5, 3, 2), countryid (14, 11, 5) | continents : contid (3, 3, 1), continent (\"asia\", \"africa\", \"america\") | model_list : modelid (16, 24, 32), model (\"subaru\", \"mercury\", \"mercury\"), maker (15, 13, 20) | car_makers : country (\"5\", \"5\", \"5\"), maker (\"honda\", \"ford\", \"honda\"), fullname (\"BMW\", \"General Motors\", \"Kia Motors\"), id (20, 21, 5) | vehicle_data : mpg (\"22\", \"37.7\", \"44.3\"), edispl (97.5, 70.0, 454.0), id (379, 51, 294), cylinders (8, 5, 8), accelerate (13.5, 11.0, 11.2), horsepower (\"60\", \"85\", \"149\"), year (1974, 1975, 1982), weight (2556, 2075, 3988) | car_names : make (\"volvo 264gl\", \"honda civic 1500 gl\", \"buick skyhawk\"), makeid (73, 64, 263), model (\"buick\", \"opel\", \"dodge\")",
        "ambiguous_queries": [
            "select t1.horsepower from vehicle_data as t1 order by t1.accelerate desc limit 1",
            "select t1.horsepower from auto_data as t1 order by t1.accelerate desc limit 1"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"horsepower\": [{\"vehicle_data\": [\"horsepower\"]}, {\"auto_data\": [\"horsepower\"]}], \"accelerate\": [{\"vehicle_data\": [\"accelerate\"]}, {\"auto_data\": [\"accelerate\"]}]}"
        },
        "clarification_context": "\"horsepower\" refers to the schema \"vehicle_data\".\"horsepower\", \"accelerate\" refers to the schema \"vehicle_data\".\"accelerate\"",
        "clear_ambiguity": "{\"horsepower\": {\"vehicle_data\": [\"horsepower\"]}, \"accelerate\": {\"vehicle_data\": [\"accelerate\"]}}",
        "gold_query": "select t1.horsepower from vehicle_data as t1 order by t1.accelerate desc limit 1"
    },
    {
        "index": 378,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What are all of the episodes ordered by ratings?",
        "schema_without_content": "tv_channel : package_option , series_name , content , language , country , pay_per_view_ppv , pixel_aspect_ratio_par , hight_definition_tv , id  | TV_program : viewers_m , episode , air_date , 18_49_rating_share , id , weekly_rank , rating , share , channel  | cartoon : production_code , written_by , channel , directed_by , title , id , original_air_date  | TV_show : viewers_m , episode , air_date , 18_49_rating_share , id , weekly_rank , rating , share , channel",
        "schema_with_content": "tv_channel : package_option (\"Option\", \"Sky Famiglia\", \"Sky Famiglia\"), series_name (\"MTV Live HD\", \"MTV Classic\", \"Rock TV\"), content (\"music\"), language (\"Italian\", \"English\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), hight_definition_tv (\"no\", \"yes\"), id (\"706\", \"714\", \"703\") | TV_program : viewers_m (\"6.75\", \"6.09\", \"4.24\"), episode (\"Emily\", \"Double Down\", \"Blowback\"), air_date (\"September 24, 2007\", \"October 8, 2007\", \"November 19, 2007\"), 18_49_rating_share (\"3.5/9\", \"1.7/5\", \"2.2/6\"), id (11.0, 5.0, 1.0), weekly_rank (61.0, 67.0, 66.0), rating (\"3.7\", \"3.7\", \"4.0\"), share (6.0, 9.0, 6.0), channel (\"717\", \"700\", \"708\") | cartoon : production_code (103.0, 104.0, 106.0), written_by (\"J. M. DeMatteis\", \"Todd Casey\", \"Joseph Kuhr\"), channel (\"700\", \"708\", \"701\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), title (\"Deep Cover for Batman!\", \"Journey to the Center of the Bat!\", \"Fall of the Blue Beetle!\"), id (3.0, 4.0, 11.0), original_air_date (\"February20,2009\", \"January9,2009\", \"December12,2008\") | TV_show : viewers_m (\"6.75\", \"6.09\", \"4.24\"), episode (\"Emily\", \"Double Down\", \"Blowback\"), air_date (\"September 24, 2007\", \"October 8, 2007\", \"November 19, 2007\"), 18_49_rating_share (\"3.5/9\", \"1.7/5\", \"2.2/6\"), id (11.0, 5.0, 1.0), weekly_rank (61.0, 67.0, 66.0), rating (\"3.7\", \"3.7\", \"4.0\"), share (6.0, 9.0, 6.0), channel (\"717\", \"700\", \"708\")",
        "ambiguous_queries": [
            "select episode from tv_show order by rating",
            "select episode from tv_program order by rating"
        ],
        "gold_ambiguity": {
            "match": "{\"episodes\": [{\"TV_program\": [\"episode\"]}, {\"TV_show\": [\"episode\"]}], \"ratings\": [{\"TV_program\": [\"rating\"]}, {\"TV_show\": [\"rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"episodes\" refers to the schema \"tv_program\".\"episode\", \"ratings\" refers to the schema \"tv_program\".\"rating\"",
        "clear_ambiguity": "{\"episodes\": {\"TV_program\": [\"episode\"]}, \"ratings\": {\"TV_program\": [\"rating\"]}}",
        "gold_query": "select episode from tv_program order by rating"
    },
    {
        "index": 379,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "schema_without_content": "state : gnpold , population , name , headofstate , region , code2 , surfacearea , governmentform , gnp , indepyear , localname , code , lifeexpectancy , capital , continent  | sqlite_sequence : seq , name  | countrylanguage : countrycode , language , percentage , isofficial  | city : id , population , district , name , countrycode  | nation : gnpold , population , name , headofstate , region , code2 , surfacearea , governmentform , gnp , indepyear , localname , code , lifeexpectancy , capital , continent",
        "schema_with_content": "state : gnpold (32100.0, 97884.0, 9555.0), population (10097000, 25662000, 33517000), name (\"Dominica\", \"Malaysia\", \"Gabon\"), headofstate (\"Arthur N. R. Robinson\", \"Mswati III\", \"Olusegun Obasanjo\"), region (\"Southern Europe\", \"South America\", \"Southern and Central Asia\"), code2 (\"ET\", \"KE\", \"AN\"), surfacearea (1958201.0, 323250.0, 71740.0), governmentform (\"Constitutional Monarchy\", \"Nonmetropolitan Territory of New Zealand\", \"Autonomous Area\"), gnp (137635.0, 2012.0, 8571.0), indepyear (1953, 1769, 1964), localname (\"RomÃ¢nia\", \"Dominica\", \"Ãsland\"), code (\"BEN\", \"HND\", \"VEN\"), lifeexpectancy (70.8, 78.7, 83.5), capital (2690, 2805, 2447), continent (\"Antarctica\", \"South America\", \"Europe\") | sqlite_sequence : seq (4079), name (\"city\") | countrylanguage : countrycode (\"SYR\", \"THA\", \"NRU\"), language (\"Balante\", \"Songhai\", \"Samoan\"), percentage (20.3, 2.8, 82.2), isofficial (\"T\", \"F\") | city : id (46, 3811, 483), population (146105, 159344, 798430), district (\"MahÃ©\", \"Maysan\", \"CoÃ­mbra\"), name (\"Neuss\", \"Mar del Plata\", \"Banda Aceh\"), countrycode (\"LTU\", \"MLI\", \"SLV\") | nation : gnpold (32100.0, 97884.0, 9555.0), population (10097000, 25662000, 33517000), name (\"Dominica\", \"Malaysia\", \"Gabon\"), headofstate (\"Arthur N. R. Robinson\", \"Mswati III\", \"Olusegun Obasanjo\"), region (\"Southern Europe\", \"South America\", \"Southern and Central Asia\"), code2 (\"ET\", \"KE\", \"AN\"), surfacearea (1958201.0, 323250.0, 71740.0), governmentform (\"Constitutional Monarchy\", \"Nonmetropolitan Territory of New Zealand\", \"Autonomous Area\"), gnp (137635.0, 2012.0, 8571.0), indepyear (1953, 1769, 1964), localname (\"RomÃ¢nia\", \"Dominica\", \"Ãsland\"), code (\"BEN\", \"HND\", \"VEN\"), lifeexpectancy (70.8, 78.7, 83.5), capital (2690, 2805, 2447), continent (\"Antarctica\", \"South America\", \"Europe\")",
        "ambiguous_queries": [
            "select t2.language from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = 'Beatrix' and t2.isofficial = 'T'",
            "select t2.language from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = 'Beatrix' and t2.isofficial = 'T'"
        ],
        "gold_ambiguity": {
            "match": "{\"head of state\": [{\"nation\": [\"headofstate\"]}, {\"state\": [\"headofstate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"head of state\" refers to the schema \"nation\".\"headofstate\"",
        "clear_ambiguity": "{\"head of state\": {\"nation\": [\"headofstate\"]}}",
        "gold_query": "select t2.language from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = 'Beatrix' and t2.isofficial = 'T'"
    },
    {
        "index": 380,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Which language is the most popular on the Asian continent?",
        "schema_without_content": "sqlite_sequence : name , seq  | countrylanguage : percentage , countrycode , language , isofficial  | state : localname , headofstate , lifeexpectancy , region , code , surfacearea , gnpold , continent , code2 , capital , indepyear , gnp , governmentform , name , population  | city : countrycode , population , name , id , district  | nation : localname , headofstate , lifeexpectancy , region , code , surfacearea , gnpold , continent , code2 , capital , indepyear , gnp , governmentform , name , population",
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : percentage (15.0, 2.6, 21.6), countrycode (\"BHR\", \"UMI\", \"GUF\"), language (\"Malay-English\", \"Galecian\", \"Balochi\"), isofficial (\"T\", \"F\") | state : localname (\"FÃ¸royar\", \"Colombia\", \"â\"), headofstate (\"Hugo ChÃ¡vez FrÃ­as\", \"Rexhep Mejdani\", \"AndrÃ©s Pastrana Arango\"), lifeexpectancy (79.0, 75.5, 73.7), region (\"Eastern Africa\", \"Southern Africa\", \"Antarctica\"), code (\"BRA\", \"BEN\", \"GAB\"), surfacearea (694.0, 241038.0, 7741220.0), gnpold (1863.0, 16153.0, 6722.0), continent (\"Asia\", \"Africa\", \"North America\"), code2 (\"FM\", \"UZ\", \"KG\"), capital (1864, 1464, 2511), indepyear (None, None, 1983), gnp (120724.0, 20208.0, 776.0), governmentform (\"Territorial Collectivity of France\", \"Constitutional Monarchy, Federation\", \"Federal Republic\"), name (\"Yemen\", \"Pakistan\", \"Eritrea\"), population (2670000, 77000, 8861400) | city : countrycode (\"GRC\", \"MSR\", \"ARE\"), population (152090, 352311, 179956), name (\"Shantou\", \"Lerma\", \"LogroÃ±o\"), id (3919, 3696, 108), district (\"Irbid\", \"Chiang Mai\", \"Yamagata\") | nation : localname (\"FÃ¸royar\", \"Colombia\", \"â\"), headofstate (\"Hugo ChÃ¡vez FrÃ­as\", \"Rexhep Mejdani\", \"AndrÃ©s Pastrana Arango\"), lifeexpectancy (79.0, 75.5, 73.7), region (\"Eastern Africa\", \"Southern Africa\", \"Antarctica\"), code (\"BRA\", \"BEN\", \"GAB\"), surfacearea (694.0, 241038.0, 7741220.0), gnpold (1863.0, 16153.0, 6722.0), continent (\"Asia\", \"Africa\", \"North America\"), code2 (\"FM\", \"UZ\", \"KG\"), capital (1864, 1464, 2511), indepyear (None, None, 1983), gnp (120724.0, 20208.0, 776.0), governmentform (\"Territorial Collectivity of France\", \"Constitutional Monarchy, Federation\", \"Federal Republic\"), name (\"Yemen\", \"Pakistan\", \"Eritrea\"), population (2670000, 77000, 8861400)",
        "ambiguous_queries": [
            "select t2.language from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1",
            "select t2.language from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"continent\": [{\"nation\": [\"continent\"]}, {\"state\": [\"continent\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"continent\" refers to the schema \"nation\".\"continent\"",
        "clear_ambiguity": "{\"continent\": {\"nation\": [\"continent\"]}}",
        "gold_query": "select t2.language from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1"
    },
    {
        "index": 381,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "schema_without_content": "city : id , district , countrycode , name , population  | sqlite_sequence : name , seq  | nation : gnpold , governmentform , code2 , code , surfacearea , region , population , localname , capital , name , indepyear , continent , lifeexpectancy , gnp , headofstate  | state : gnpold , governmentform , code2 , code , surfacearea , region , population , localname , capital , name , indepyear , continent , lifeexpectancy , gnp , headofstate  | countrylanguage : percentage , countrycode , isofficial , language",
        "schema_with_content": "city : id (1247, 1189, 1155), district (\"GyÃ¶r-Moson-Sopron\", \"Durango\", \"Qandahar\"), countrycode (\"MEX\", \"SGP\", \"BLR\"), name (\"Semey\", \"AraguaÃ­na\", \"Jiaonan\"), population (217664, 371601, 310277) | sqlite_sequence : name (\"city\"), seq (4079) | nation : gnpold (1312.0, 781.0, 4697.0), governmentform (\"Administrated by the UN\", \"Special Administrative Region of China\", \"Nonmetropolitan Territory of France\"), code2 (\"BD\", \"SN\", \"MT\"), code (\"SVK\", \"BLZ\", \"ZWE\"), surfacearea (36188.0, 16.0, 117600.0), region (\"Central America\", \"Central Africa\", \"Melanesia\"), population (3698500, 1305000, 2500), localname (\"United States Minor Outlying Islands\", \"Iran\", \"Timor Timur\"), capital (3065, 3336, 2253), name (\"Syria\", \"Bulgaria\", \"Vietnam\"), indepyear (1878, 885, 1990), continent (\"Oceania\", \"Oceania\", \"Africa\"), lifeexpectancy (70.0, 77.7, 54.8), gnp (6353.0, 1687.0, 10226.0), headofstate (\"Kim Dae-jung\", \"Bernard Dowiyogo\", \"Emomali Rahmonov\") | state : gnpold (1312.0, 781.0, 4697.0), governmentform (\"Administrated by the UN\", \"Special Administrative Region of China\", \"Nonmetropolitan Territory of France\"), code2 (\"BD\", \"SN\", \"MT\"), code (\"SVK\", \"BLZ\", \"ZWE\"), surfacearea (36188.0, 16.0, 117600.0), region (\"Central America\", \"Central Africa\", \"Melanesia\"), population (3698500, 1305000, 2500), localname (\"United States Minor Outlying Islands\", \"Iran\", \"Timor Timur\"), capital (3065, 3336, 2253), name (\"Syria\", \"Bulgaria\", \"Vietnam\"), indepyear (1878, 885, 1990), continent (\"Oceania\", \"Oceania\", \"Africa\"), lifeexpectancy (70.0, 77.7, 54.8), gnp (6353.0, 1687.0, 10226.0), headofstate (\"Kim Dae-jung\", \"Bernard Dowiyogo\", \"Emomali Rahmonov\") | countrylanguage : percentage (2.5, 7.2, 8.3), countrycode (\"AUS\", \"SDN\", \"MKD\"), isofficial (\"T\", \"F\"), language (\"Malenasian Languages\", \"Kono-vai\", \"Hadareb\")",
        "ambiguous_queries": [
            "select name from nation where continent = 'Europe' and population = '80000'",
            "select name from state where continent = 'Europe' and population = '80000'"
        ],
        "gold_ambiguity": {
            "match": "{\"Europe\": [{\"nation\": [\"continent\"]}, {\"state\": [\"continent\"]}], \"names\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}], \"population\": [{\"nation\": [\"population\"]}, {\"state\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Europe\" refers to the schema \"state\".\"continent\", \"names\" refers to the schema \"state\".\"name\", \"population\" refers to the schema \"state\".\"population\"",
        "clear_ambiguity": "{\"Europe\": {\"state\": [\"continent\"]}, \"names\": {\"state\": [\"name\"]}, \"population\": {\"state\": [\"population\"]}}",
        "gold_query": "select name from state where continent = 'Europe' and population = '80000'"
    },
    {
        "index": 382,
        "db_id": "car_1",
        "ambig_type": "table",
        "db_file": "table/car_1/car_1.sqlite",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "schema_without_content": "car_names : make , model , makeid  | vehicle_data : edispl , id , accelerate , cylinders , weight , mpg , year , horsepower  | countries : countryid , continent , countryname  | continents : contid , continent  | auto_data : edispl , id , accelerate , cylinders , weight , mpg , year , horsepower  | car_makers : country , maker , fullname , id  | model_list : modelid , maker , model",
        "schema_with_content": "car_names : make (\"vw pickup\", \"honda civic 1300\", \"dodge colt\"), model (\"pontiac\", \"hi\", \"pontiac\"), makeid (24, 43, 153) | vehicle_data : edispl (231.0, 79.0, 115.0), id (199, 31, 40), accelerate (8.0, 14.4, 13.6), cylinders (8, 3, 6), weight (2711, 2735, 4746), mpg (\"12\", \"31.8\", \"40.9\"), year (1982, 1981, 1973), horsepower (\"225\", \"91\", \"120\") | countries : countryid (13, 5, 2), continent (2, 5, 1), countryname (\"new zealand\", \"italy\", \"germany\") | continents : contid (2, 1, 3), continent (\"america\", \"america\", \"africa\") | auto_data : edispl (231.0, 79.0, 115.0), id (199, 31, 40), accelerate (8.0, 14.4, 13.6), cylinders (8, 3, 6), weight (2711, 2735, 4746), mpg (\"12\", \"31.8\", \"40.9\"), year (1982, 1981, 1973), horsepower (\"225\", \"91\", \"120\") | car_makers : country (\"3\", \"4\", \"7\"), maker (\"renault\", \"fiat\", \"fiat\"), fullname (\"Renault\", \"Ford Motor Company\", \"Saab\"), id (18, 5, 13) | model_list : modelid (25, 23, 9), maker (3, 13, 12), model (\"amc\", \"dodge\", \"fiat\")",
        "ambiguous_queries": [
            "select avg(mpg) from vehicle_data where cylinders = 4",
            "select avg(mpg) from auto_data where cylinders = 4"
        ],
        "gold_ambiguity": {
            "match": "{\"cylinders\": [{\"auto_data\": [\"cylinders\"]}, {\"vehicle_data\": [\"cylinders\"]}], \"mpg\": [{\"auto_data\": [\"mpg\"]}, {\"vehicle_data\": [\"mpg\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cylinders\" refers to the schema \"auto_data\".\"cylinders\", \"mpg\" refers to the schema \"auto_data\".\"mpg\"",
        "clear_ambiguity": "{\"cylinders\": {\"auto_data\": [\"cylinders\"]}, \"mpg\": {\"auto_data\": [\"mpg\"]}}",
        "gold_query": "select avg(mpg) from auto_data where cylinders = 4"
    },
    {
        "index": 383,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What are the population, name and leader of the country with the largest area?",
        "schema_without_content": "sqlite_sequence : seq , name  | city : population , id , name , district , countrycode  | nation : indepyear , continent , gnpold , gnp , population , code2 , region , surfacearea , governmentform , lifeexpectancy , capital , name , localname , code , headofstate  | state : indepyear , continent , gnpold , gnp , population , code2 , region , surfacearea , governmentform , lifeexpectancy , capital , name , localname , code , headofstate  | countrylanguage : percentage , language , countrycode , isofficial",
        "schema_with_content": "sqlite_sequence : seq (4079), name (\"city\") | city : population (134222, 194973, 141954), id (3157, 2472, 1967), name (\"Campo Grande\", \"Frankfurt am Main\", \"Pontianak\"), district (\"Cauca\", \"Kerman\", \"Yamoussoukro\"), countrycode (\"HRV\", \"HTI\", \"KOR\") | nation : indepyear (1979, 1983, 1966), continent (\"Africa\", \"Europe\", \"North America\"), gnpold (7474.0, 3371.0, 1296830.0), gnp (1054.0, 82710.0, 6.0), population (78000, 428000, 3200), code2 (\"PG\", \"SJ\", \"AO\"), region (\"Caribbean\", \"North America\", \"Melanesia\"), surfacearea (65301.0, 1648195.0, 1958201.0), governmentform (\"Constitutional Monarchy, Federation\", \"Parlementary Monarchy\", \"Occupied by Marocco\"), lifeexpectancy (62.5, 80.1, 50.5), capital (766, 3064, 3236), name (\"Vanuatu\", \"Chad\", \"Italy\"), localname (\"Ukrajina\", \"Botswana\", \"Ecuador\"), code (\"BOL\", \"LCA\", \"MNP\"), headofstate (\"Ange-FÃ©lix PatassÃ©\", \"AndrÃ©s Pastrana Arango\", \"Hamad ibn Isa al-Khalifa\") | state : indepyear (1979, 1983, 1966), continent (\"Africa\", \"Europe\", \"North America\"), gnpold (7474.0, 3371.0, 1296830.0), gnp (1054.0, 82710.0, 6.0), population (78000, 428000, 3200), code2 (\"PG\", \"SJ\", \"AO\"), region (\"Caribbean\", \"North America\", \"Melanesia\"), surfacearea (65301.0, 1648195.0, 1958201.0), governmentform (\"Constitutional Monarchy, Federation\", \"Parlementary Monarchy\", \"Occupied by Marocco\"), lifeexpectancy (62.5, 80.1, 50.5), capital (766, 3064, 3236), name (\"Vanuatu\", \"Chad\", \"Italy\"), localname (\"Ukrajina\", \"Botswana\", \"Ecuador\"), code (\"BOL\", \"LCA\", \"MNP\"), headofstate (\"Ange-FÃ©lix PatassÃ©\", \"AndrÃ©s Pastrana Arango\", \"Hamad ibn Isa al-Khalifa\") | countrylanguage : percentage (50.4, 65.0, 8.7), language (\"Lezgian\", \"Lezgian\", \"Ngala and Bangi\"), countrycode (\"MDA\", \"ABW\", \"LKA\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select name, population, headofstate from nation order by surfacearea desc limit 1",
            "select name, population, headofstate from state order by surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"area\": [{\"nation\": [\"surfacearea\"]}, {\"state\": [\"surfacearea\"]}], \"leader\": [{\"nation\": [\"headofstate\"]}, {\"state\": [\"headofstate\"]}], \"name\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}], \"population\": [{\"nation\": [\"population\"]}, {\"state\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"area\" refers to the schema \"state\".\"surfacearea\", \"leader\" refers to the schema \"state\".\"headofstate\", \"name\" refers to the schema \"state\".\"name\", \"population\" refers to the schema \"state\".\"population\"",
        "clear_ambiguity": "{\"area\": {\"state\": [\"surfacearea\"]}, \"leader\": {\"state\": [\"headofstate\"]}, \"name\": {\"state\": [\"name\"]}, \"population\": {\"state\": [\"population\"]}}",
        "gold_query": "select name, population, headofstate from state order by surfacearea desc limit 1"
    },
    {
        "index": 384,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "schema_without_content": "airports : airportname , airportcode , country , countryabbrev , city  | carriers : airline , country , abbreviation , uid  | flights : destairport , sourceairport , airline , flightno  | aviation_companies : airline , country , abbreviation , uid",
        "schema_with_content": "airports : airportname (\"NAS \", \"Alyeska \", \"Aleknagik \"), airportcode (\"ATO\", \"MMI\", \"ANN\"), country (\"United States \"), countryabbrev (\"US \", \"US\"), city (\"Anderson \", \"Albert Lea \", \"Arcata \") | carriers : airline (\"Northwest Airlines\", \"United Airlines\", \"Southwest Airlines\"), country (\"USA\"), abbreviation (\"American\", \"USAir\", \"Southwest\"), uid (3, 10, 9) | flights : destairport (\" AFO\", \" ALI\", \" AGN\"), sourceairport (\" ATO\", \" AIA\", \" ABY\"), airline (12, 10, 6), flightno (122, 708, 157) | aviation_companies : airline (\"Northwest Airlines\", \"United Airlines\", \"Southwest Airlines\"), country (\"USA\"), abbreviation (\"American\", \"USAir\", \"Southwest\"), uid (3, 10, 9)",
        "ambiguous_queries": [
            "select t1.airline from carriers as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO' except select t1.airline from carriers as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG'",
            "select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO' except select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG'"
        ],
        "gold_ambiguity": {
            "match": "{\"CVO\": [{\"flights\": [\"sourceairport\"]}, {\"aviation_companies\": [\"sourceairport\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"CVO\" refers to the schema \"flights\".\"sourceairport\"",
        "clear_ambiguity": "{\"CVO\": {\"flights\": [\"sourceairport\"]}}",
        "gold_query": "select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO' except select t1.airline from aviation_companies as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG'"
    },
    {
        "index": 385,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "How many flights have destination ATO?",
        "schema_without_content": "journeys : destairport , airline , sourceairport , flightno  | airlines : abbreviation , uid , airline , country  | airports : airportcode , countryabbrev , country , city , airportname  | routes : destairport , airline , sourceairport , flightno",
        "schema_with_content": "journeys : destairport (\" ANV\", \" ANW\", \" ALZ\"), airline (5, 3, 1), sourceairport (\" ANB\", \" AKI\", \" ANC\"), flightno (264, 323, 1076) | airlines : abbreviation (\"Continental\", \"UAL\", \"Continental\"), uid (10, 2, 6), airline (\"Southwest Airlines\", \"AirTran Airways\", \"Frontier Airlines\"), country (\"USA\") | airports : airportcode (\"ANB\", \"AKK\", \"AQY\"), countryabbrev (\"US \", \"US\"), country (\"United States \"), city (\"Albany \", \"Anacortes \", \"Anguilla \"), airportname (\"Ardmore Municipal Arpt \", \"Athens \", \"USN Heliport \") | routes : destairport (\" ANV\", \" ANW\", \" ALZ\"), airline (5, 3, 1), sourceairport (\" ANB\", \" AKI\", \" ANC\"), flightno (264, 323, 1076)",
        "ambiguous_queries": [
            "select count(*) from journeys where destairport = 'ATO'",
            "select count(*) from routes where destairport = 'ATO'"
        ],
        "gold_ambiguity": {
            "match": "{\"destination\": [{\"journeys\": [\"destairport\"]}, {\"routes\": [\"destairport\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"destination\" refers to the schema \"routes\".\"destairport\"",
        "clear_ambiguity": "{\"destination\": {\"routes\": [\"destairport\"]}}",
        "gold_query": "select count(*) from routes where destairport = 'ATO'"
    },
    {
        "index": 386,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "schema_without_content": "rankings : ranking , player_id , tours , ranking_date , ranking_points  | players : country_code , hand , birth_date , player_id , first_name , last_name  | contests : loser_age , loser_entry , winner_name , draw_size , tourney_name , minutes , round , tourney_id , winner_id , loser_seed , loser_id , loser_name , tourney_date , loser_hand , winner_rank , best_of , tourney_level , match_num , winner_ht , winner_age , winner_rank_points , year , winner_seed , surface , loser_rank_points , winner_entry , loser_rank , loser_ht , winner_hand , winner_ioc , loser_ioc , score  1-6 6-0\", \"7-6 7-6\" | games : loser_age , loser_entry , winner_name , draw_size , tourney_name , minutes , round , tourney_id , winner_id , loser_seed , loser_id , loser_name , tourney_date , loser_hand , winner_rank , best_of , tourney_level , match_num , winner_ht , winner_age , winner_rank_points , year , winner_seed , surface , loser_rank_points , winner_entry , loser_rank , loser_ht , winner_hand , winner_ioc , loser_ioc , score  1-6 6-0\", \"7-6 7-6\"",
        "schema_with_content": "rankings : ranking (243, 652, 737), player_id (202694, 205946, 214254), tours (15, 31, 22), ranking_date (19931018, 19901231, 20060109), ranking_points (2610, 3395, 3245) | players : country_code (\"SRI\", \"BIH\", \"BER\"), hand (\"L\", \"L\", \"\"), birth_date (19900913, 19880410, 19640913), player_id (203609, 203931, 210623), first_name (\"Catarina Castro\", \"Iulia Maria\", \"Rikeetha\"), last_name (\"Hoffpauir\", \"Cabak\", \"Mihaljevic\") | contests : loser_age (31.7289527721, 23.8220396988, 30.904859685100003), loser_entry (\"\"), winner_name (\"Coco Vandeweghe\", \"Petra Kvitova\", \"Victoria Azarenka\"), draw_size (32, 32, 4), tourney_name (\"St. Petersburg\", \"Sydney\", \"Rabat\"), minutes (120, 134, 135), round (\"RR\", \"R32\", \"RR\"), tourney_id (\"2016-1052\", \"2016-M015\", \"2016-1064\"), winner_id (201585, 201458, 200748), loser_seed (14, 24, 8), loser_id (201325, 201517, 201505), loser_name (\"Elina Svitolina\", \"Ekaterina Makarova\", \"Yanina Wickmayer\"), tourney_date (20170213, 20170717, 20160404), loser_hand (\"R\", \"L\"), winner_rank (53, 12, 24), best_of (3), tourney_level (\"P\", \"G\", \"W\"), match_num (293, 297, 197), winner_ht (179, 174, 176), winner_age (25.6317590691, 24.985626283400002, 23.0444900753), winner_rank_points (1695, 4100, 5790), year (2013, 2016, 2017), winner_seed (10, 24, 4), surface (\"Hard\", \"Clay\", \"Grass\"), loser_rank_points (1870, 1160, 6080), winner_entry (\"\"), loser_rank (20, 18, 11), loser_ht (163, 163, 168), winner_hand (\"R\", \"L\"), winner_ioc (\"CHN\", \"SWE\", \"JPN\"), loser_ioc (\"TPE\", \"SUI\", \"SUI\"), score (\"6-1 6-1\", \"7-6(5) 1-6 6-0\", \"7-6(6) 7-6(4)\") | games : loser_age (31.7289527721, 23.8220396988, 30.904859685100003), loser_entry (\"\"), winner_name (\"Coco Vandeweghe\", \"Petra Kvitova\", \"Victoria Azarenka\"), draw_size (32, 32, 4), tourney_name (\"St. Petersburg\", \"Sydney\", \"Rabat\"), minutes (120, 134, 135), round (\"RR\", \"R32\", \"RR\"), tourney_id (\"2016-1052\", \"2016-M015\", \"2016-1064\"), winner_id (201585, 201458, 200748), loser_seed (14, 24, 8), loser_id (201325, 201517, 201505), loser_name (\"Elina Svitolina\", \"Ekaterina Makarova\", \"Yanina Wickmayer\"), tourney_date (20170213, 20170717, 20160404), loser_hand (\"R\", \"L\"), winner_rank (53, 12, 24), best_of (3), tourney_level (\"P\", \"G\", \"W\"), match_num (293, 297, 197), winner_ht (179, 174, 176), winner_age (25.6317590691, 24.985626283400002, 23.0444900753), winner_rank_points (1695, 4100, 5790), year (2013, 2016, 2017), winner_seed (10, 24, 4), surface (\"Hard\", \"Clay\", \"Grass\"), loser_rank_points (1870, 1160, 6080), winner_entry (\"\"), loser_rank (20, 18, 11), loser_ht (163, 163, 168), winner_hand (\"R\", \"L\"), winner_ioc (\"CHN\", \"SWE\", \"JPN\"), loser_ioc (\"TPE\", \"SUI\", \"SUI\"), score (\"6-1 6-1\", \"7-6(5) 1-6 6-0\", \"7-6(6) 7-6(4)\")",
        "ambiguous_queries": [
            "select count(distinct winner_name) from games where tourney_name = 'WTA Championships' and winner_hand = 'L'",
            "select count(distinct winner_name) from contests where tourney_name = 'WTA Championships' and winner_hand = 'L'"
        ],
        "gold_ambiguity": {
            "match": "{\"WTA Championships\": [{\"contests\": [\"tourney_name\"]}, {\"games\": [\"tourney_name\"]}], \"handed\": [{\"contests\": [\"winner_hand\"]}, {\"games\": [\"winner_hand\"]}], \"winners\": [{\"contests\": [\"winner_name\"]}, {\"games\": [\"winner_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"WTA Championships\" refers to the schema \"contests\".\"tourney_name\", \"handed\" refers to the schema \"contests\".\"winner_hand\", \"winners\" refers to the schema \"contests\".\"winner_name\"",
        "clear_ambiguity": "{\"WTA Championships\": {\"contests\": [\"tourney_name\"]}, \"handed\": {\"contests\": [\"winner_hand\"]}, \"winners\": {\"contests\": [\"winner_name\"]}}",
        "gold_query": "select count(distinct winner_name) from contests where tourney_name = 'WTA Championships' and winner_hand = 'L'"
    },
    {
        "index": 387,
        "db_id": "flight_2",
        "ambig_type": "table",
        "db_file": "table/flight_2/flight_2.sqlite",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "schema_without_content": "flights : destairport , airline , flightno , sourceairport  | airlines : uid , abbreviation , airline , country  | departure_points : airportname , city , countryabbrev , country , airportcode  | arrival_points : airportname , city , countryabbrev , country , airportcode",
        "schema_with_content": "flights : destairport (\" ALE\", \" AED\", \" AUK\"), airline (5, 6, 8), flightno (1232, 983, 635), sourceairport (\" AHD\", \" AXS\", \" JLH\") | airlines : uid (1, 5, 10), abbreviation (\"Delta\", \"AirTran\", \"Delta\"), airline (\"American Airlines\", \"AirTran Airways\", \"Northwest Airlines\"), country (\"USA\") | departure_points : airportname (\"Arctic Village \", \"Ardmore Municipal Arpt \", \"International \"), city (\"Akron/Canton OH  \", \"Anacortes \", \"Antlers \"), countryabbrev (\"US \", \"US\"), country (\"United States \"), airportcode (\"KKI\", \"MRI\", \"JLH\") | arrival_points : airportname (\"Arctic Village \", \"Ardmore Municipal Arpt \", \"International \"), city (\"Akron/Canton OH  \", \"Anacortes \", \"Antlers \"), countryabbrev (\"US \", \"US\"), country (\"United States \"), airportcode (\"KKI\", \"MRI\", \"JLH\")",
        "ambiguous_queries": [
            "select t1.flightno from flights as t1 join departure_points as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'",
            "select t1.flightno from flights as t1 join arrival_points as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'"
        ],
        "gold_ambiguity": {
            "match": "{\"City\": [{\"arrival_points\": [\"city\"]}, {\"departure_points\": [\"city\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"City\" refers to the schema \"arrival_points\".\"city\"",
        "clear_ambiguity": "{\"City\": {\"arrival_points\": [\"city\"]}}",
        "gold_query": "select t1.flightno from flights as t1 join arrival_points as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen'"
    },
    {
        "index": 388,
        "db_id": "course_teach",
        "ambig_type": "table",
        "db_file": "table/course_teach/course_teach.sqlite",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "schema_without_content": "course : staring_date , course , course_id  | course_arrange : grade , course_id , teacher_id  | instructor : hometown , teacher_id , name , age  | professor : hometown , teacher_id , name , age",
        "schema_with_content": "course : staring_date (\"10 May\", \"5 May\", \"5 May\"), course (\"Geography\", \"History\", \"Music\"), course_id (7, 5, 8) | course_arrange : grade (3, 3, 4), course_id (3, 5, 10), teacher_id (6, 3, 2) | instructor : hometown (\"Blackrod Urban District\", \"Blackrod Urban District\", \"Farnworth Municipal Borough\"), teacher_id (6, 4, 6), name (\"Gustaaf Deloor\", \"Gustaaf Deloor\", \"Anne Walker\"), age (\"45\", \"26\", \"32\") | professor : hometown (\"Blackrod Urban District\", \"Blackrod Urban District\", \"Farnworth Municipal Borough\"), teacher_id (6, 4, 6), name (\"Gustaaf Deloor\", \"Gustaaf Deloor\", \"Anne Walker\"), age (\"45\", \"26\", \"32\")",
        "ambiguous_queries": [
            "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join instructor as t3 on t1.teacher_id = t3.teacher_id order by t3.name",
            "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join professor as t3 on t1.teacher_id = t3.teacher_id order by t3.name"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"instructor\": [\"name\"]}, {\"professor\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"professor\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"professor\": [\"name\"]}}",
        "gold_query": "select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join professor as t3 on t1.teacher_id = t3.teacher_id order by t3.name"
    },
    {
        "index": 389,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What is the total number of people living in the nations that do not use English?",
        "schema_without_content": "country : localname , continent , indepyear , capital , headofstate , gnp , lifeexpectancy , region , gnpold , governmentform , code , code2 , population , name \", \"Yugoslavia\", surfacearea  | spoken_language : isofficial , countrycode , percentage , language  | city : name , id , population , countrycode , district  | sqlite_sequence : seq , name  | official_language : isofficial , countrycode , percentage , language",
        "schema_with_content": "country : localname (\"Pilipinas\", \"Jugoslavija\", \"Gibraltar\"), continent (\"Europe\", \"Asia\", \"Europe\"), indepyear (1962, -1523, 1841), capital (3536, 594, 2882), headofstate (\"Hugo ChÃ¡vez FrÃ­as\", \"Isayas Afewerki [Isaias Afwerki]\", \"Mswati III\"), gnp (2036.0, 6353.0, 13714.0), lifeexpectancy (78.6, 54.9, 65.3), region (\"Antarctica\", \"Eastern Asia\", \"Eastern Asia\"), gnpold (4192638.0, 11203.0, 22834.0), governmentform (\"Independent Church State\", \"Monarchy\", \"Monarchy\"), code (\"TZA\", \"MLI\", \"BMU\"), code2 (\"CO\", \"GR\", \"IO\"), population (66591000, 50, 8495000), name (\"Norway\", \"Holy See (Vatican City State)\", \"Yugoslavia\"), surfacearea (323250.0, 71740.0, 1.5) | spoken_language : isofficial (\"T\", \"F\"), countrycode (\"PAN\", \"GEO\", \"TWN\"), percentage (97.7, 37.2, 21.7), language (\"Tuvalu\", \"Balochi\", \"Rundi\") | city : name (\"Masjed-e-Soleyman\", \"Aden\", \"Ambattur\"), id (3810, 2554, 2326), population (89667, 448607, 151862), countrycode (\"ZMB\", \"BEN\", \"UGA\"), district (\"Taipei\", \"CearÃ¡\", \"Herson\") | sqlite_sequence : seq (4079), name (\"city\") | official_language : isofficial (\"T\", \"F\"), countrycode (\"PAN\", \"GEO\", \"TWN\"), percentage (97.7, 37.2, 21.7), language (\"Tuvalu\", \"Balochi\", \"Rundi\")",
        "ambiguous_queries": [
            "select sum(population) from country where name not in (select t1.name from country as t1 join official_language as t2 on t1.code = t2.countrycode where t2.language = 'English')",
            "select sum(population) from country where name not in (select t1.name from country as t1 join spoken_language as t2 on t1.code = t2.countrycode where t2.language = 'English')"
        ],
        "gold_ambiguity": {
            "match": "{\"English\": [{\"official_language\": [\"language\"]}, {\"spoken_language\": [\"language\"]}], \"number of people\": [{\"official_language\": [\"population\"]}, {\"spoken_language\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"English\" refers to the schema \"official_language\".\"language\", \"number of people\" refers to the schema \"official_language\".\"population\"",
        "clear_ambiguity": "{\"English\": {\"official_language\": [\"language\"]}, \"number of people\": {\"official_language\": [\"population\"]}}",
        "gold_query": "select sum(population) from country where name not in (select t1.name from country as t1 join official_language as t2 on t1.code = t2.countrycode where t2.language = 'English')"
    },
    {
        "index": 390,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "List the Episode of all TV series sorted by rating.",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , series_name , country , id , hight_definition_tv , package_option , pay_per_view_ppv , language , content  | TV_show : 18_49_rating_share , share , air_date , rating , episode , channel , weekly_rank , viewers_m , id  | TV_program : 18_49_rating_share , share , air_date , rating , episode , channel , weekly_rank , viewers_m , id  | cartoon : id , production_code , directed_by , title , channel , written_by , original_air_date",
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"MTV Music\", \"MTV Rocks\", \"MTV Classic\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"709\", \"728\", \"700\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), content (\"music\") | TV_show : 18_49_rating_share (\"3.5/9\", \"2.7/7\", \"1.5/4\"), share (9.0, 5.0, 7.0), air_date (\"September 24, 2007\", \"October 22, 2007\", \"October 1, 2007\"), rating (\"3.8\", \"5.8\", \"4.3\"), episode (\"Blowback\", \"Keepers\", \"Winterland\"), channel (\"713\", \"707\", \"701\"), weekly_rank (68.0, 65.0, 62.0), viewers_m (\"6.94\", \"5.13\", \"5.75\"), id (8.0, 2.0, 11.0) | TV_program : 18_49_rating_share (\"3.5/9\", \"2.7/7\", \"1.5/4\"), share (9.0, 5.0, 7.0), air_date (\"September 24, 2007\", \"October 22, 2007\", \"October 1, 2007\"), rating (\"3.8\", \"5.8\", \"4.3\"), episode (\"Blowback\", \"Keepers\", \"Winterland\"), channel (\"713\", \"707\", \"701\"), weekly_rank (68.0, 65.0, 62.0), viewers_m (\"6.94\", \"5.13\", \"5.75\"), id (8.0, 2.0, 11.0) | cartoon : id (8.0, 3.0, 7.0), production_code (112.0, 109.0, 101.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), title (\"Fall of the Blue Beetle!\", \"The Eyes of Despero!\", \"Return of the Fearsome Fangs!\"), channel (\"707\", \"704\", \"706\"), written_by (\"James Krieg\", \"Adam Beechen\", \"Todd Casey\"), original_air_date (\"January9,2009\", \"January23,2009\", \"November21,2008\")",
        "ambiguous_queries": [
            "select episode from tv_show order by rating",
            "select episode from tv_program order by rating"
        ],
        "gold_ambiguity": {
            "match": "{\"Episode\": [{\"TV_program\": [\"episode\"]}, {\"TV_show\": [\"episode\"]}], \"rating\": [{\"TV_program\": [\"rating\"]}, {\"TV_show\": [\"rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Episode\" refers to the schema \"tv_show\".\"episode\", \"rating\" refers to the schema \"tv_show\".\"rating\"",
        "clear_ambiguity": "{\"Episode\": {\"TV_show\": [\"episode\"]}, \"rating\": {\"TV_show\": [\"rating\"]}}",
        "gold_query": "select episode from tv_show order by rating"
    },
    {
        "index": 391,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "schema_without_content": "countrylanguage : countrycode , isofficial , percentage , language  | sqlite_sequence : seq , name  | state : capital , code , lifeexpectancy , continent , gnpold , localname , code2 , surfacearea , name , gnp , indepyear , population , headofstate , governmentform \", \"People'sRepublic\", \"US Territory\", region  | nation : capital , code , lifeexpectancy , continent , gnpold , localname , code2 , surfacearea , name , gnp , indepyear , population , headofstate , governmentform \", \"People'sRepublic\", \"US Territory\", region  | city : id , population , district , countrycode , name",
        "schema_with_content": "countrylanguage : countrycode (\"PER\", \"COL\", \"GMB\"), isofficial (\"T\", \"F\"), percentage (12.3, 72.1, 90.6), language (\"Romanian\", \"Mortlock\", \"Banda\") | sqlite_sequence : seq (4079), name (\"city\") | state : capital (554, 204, 4074), code (\"PHL\", \"TKL\", \"CZE\"), lifeexpectancy (67.5, 73.0, 74.1), continent (\"Asia\", \"Asia\", \"North America\"), gnpold (15519.0, 220.0, 4100.0), localname (\"As-Sudan\", \"Malawi\", \"Fiji Islands\"), code2 (\"GD\", \"SY\", \"KI\"), surfacearea (637657.0, 143998.0, 551500.0), name (\"Luxembourg\", \"Malawi\", \"East Timor\"), gnp (598862.0, 116416.0, 14194.0), indepyear (1968, -1000, None), population (817000, 68470000, 10545700), headofstate (\"Gyanendra Bir Bikram\", \"Kostis Stefanopoulos\", \"Ahmed Tejan Kabbah\"), governmentform (\"Monarchy (Emirate)\", \"People'sRepublic\", \"US Territory\"), region (\"Eastern Africa\", \"Baltic Countries\", \"Western Africa\") | nation : capital (554, 204, 4074), code (\"PHL\", \"TKL\", \"CZE\"), lifeexpectancy (67.5, 73.0, 74.1), continent (\"Asia\", \"Asia\", \"North America\"), gnpold (15519.0, 220.0, 4100.0), localname (\"As-Sudan\", \"Malawi\", \"Fiji Islands\"), code2 (\"GD\", \"SY\", \"KI\"), surfacearea (637657.0, 143998.0, 551500.0), name (\"Luxembourg\", \"Malawi\", \"East Timor\"), gnp (598862.0, 116416.0, 14194.0), indepyear (1968, -1000, None), population (817000, 68470000, 10545700), headofstate (\"Gyanendra Bir Bikram\", \"Kostis Stefanopoulos\", \"Ahmed Tejan Kabbah\"), governmentform (\"Monarchy (Emirate)\", \"People'sRepublic\", \"US Territory\"), region (\"Eastern Africa\", \"Baltic Countries\", \"Western Africa\") | city : id (2714, 990, 1771), population (136554, 95521, 150168), district (\"Oklahoma\", \"Aleppo\", \"Oriental\"), countrycode (\"NCL\", \"DOM\", \"KEN\"), name (\"Little Rock\", \"Rubtsovsk\", \"Southend-on-Sea\")",
        "ambiguous_queries": [
            "select t2.language from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = 'Beatrix' and t2.isofficial = 'T'",
            "select t2.language from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = 'Beatrix' and t2.isofficial = 'T'"
        ],
        "gold_ambiguity": {
            "match": "{\"head of state\": [{\"nation\": [\"headofstate\"]}, {\"state\": [\"headofstate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"head of state\" refers to the schema \"nation\".\"headofstate\"",
        "clear_ambiguity": "{\"head of state\": {\"nation\": [\"headofstate\"]}}",
        "gold_query": "select t2.language from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = 'Beatrix' and t2.isofficial = 'T'"
    },
    {
        "index": 392,
        "db_id": "pets_1",
        "ambig_type": "table",
        "db_file": "table/pets_1/pets_1.sqlite",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "schema_without_content": "has_animal : stuid , petid  | pets : pettype , petid , pet_age , weight  | student : fname , lname , age , advisor , city_code , sex , stuid , major  | owns : stuid , petid",
        "schema_with_content": "has_animal : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3) | student : fname (\"Andy\", \"Charles\", \"Ian\"), lname (\"Schmidt\", \"Shieber\", \"Andreou\"), age (27, 20, 16), advisor (2311, 7792, 7271), city_code (\"LOS\", \"BAL\", \"HOU\"), sex (\"F\", \"M\"), stuid (1003, 1005, 1027), major (50, 520, 540) | owns : stuid (1001, 1002), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select major, age from student where stuid not in (select t1.stuid from student as t1 join owns as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
            "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_animal as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"old\": [{\"owns\": [\"age\"]}, {\"has_animal\": [\"age\"]}], \"major\": [{\"owns\": [\"major\"]}, {\"has_animal\": [\"major\"]}]}"
        },
        "clarification_context": "\"old\" refers to the schema \"has_animal\".\"age\", \"major\" refers to the schema \"has_animal\".\"major\"",
        "clear_ambiguity": "{\"old\": {\"has_animal\": [\"age\"]}, \"major\": {\"has_animal\": [\"major\"]}}",
        "gold_query": "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_animal as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')"
    },
    {
        "index": 393,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "schema_without_content": "state : headofstate , population , lifeexpectancy , governmentform \", \"Islamic Republic\", \"Nonmetropolitan Territory of France\", region , capital , gnpold , surfacearea , continent , code , indepyear , localname , code2 , name , gnp  | countrylanguage : language , percentage , isofficial , countrycode  | city : id , district , name , population , countrycode  | nation : headofstate , population , lifeexpectancy , governmentform \", \"Islamic Republic\", \"Nonmetropolitan Territory of France\", region , capital , gnpold , surfacearea , continent , code , indepyear , localname , code2 , name , gnp  | sqlite_sequence : name , seq",
        "schema_with_content": "state : headofstate (\"Leonid KutÅ¡ma\", \"Paul Biya\", \"Paul Kagame\"), population (22244000, 32300, 9997600), lifeexpectancy (46.2, 41.3, 66.2), governmentform (\"Monarchy (Emirate)\", \"Islamic Republic\", \"Nonmetropolitan Territory of France\"), region (\"Baltic Countries\", \"Northern Africa\", \"Micronesia\"), capital (2511, 5, 3243), gnpold (220.0, 45914.0, 263451.0), surfacearea (455.0, 338145.0, 175016.0), continent (\"Antarctica\", \"Europe\", \"Asia\"), code (\"ARG\", \"MLT\", \"BIH\"), indepyear (1066, 1769, 1861), localname (\"AzÃ¤rbaycan\", \"Sakartvelo\", \"Al-Jazaâir/AlgÃ©rie\"), code2 (\"PY\", \"NZ\", \"KH\"), name (\"Haiti\", \"Iran\", \"Virgin Islands, British\"), gnp (5121.0, 1579.0, 5332.0) | countrylanguage : language (\"Tahitian\", \"Araucan\", \"Gbaya\"), percentage (95.8, 17.9, 11.1), isofficial (\"T\", \"F\"), countrycode (\"SEN\", \"KIR\", \"GBR\") | city : id (126, 1927, 3775), district (\"al-Bahr al-Ahmar\", \"Penza\", \"Horad Minsk\"), name (\"Vijayawada\", \"Chesapeake\", \"Monywa\"), population (179976, 147595, 171173), countrycode (\"ABW\", \"SYR\", \"AUT\") | nation : headofstate (\"Leonid KutÅ¡ma\", \"Paul Biya\", \"Paul Kagame\"), population (22244000, 32300, 9997600), lifeexpectancy (46.2, 41.3, 66.2), governmentform (\"Monarchy (Emirate)\", \"Islamic Republic\", \"Nonmetropolitan Territory of France\"), region (\"Baltic Countries\", \"Northern Africa\", \"Micronesia\"), capital (2511, 5, 3243), gnpold (220.0, 45914.0, 263451.0), surfacearea (455.0, 338145.0, 175016.0), continent (\"Antarctica\", \"Europe\", \"Asia\"), code (\"ARG\", \"MLT\", \"BIH\"), indepyear (1066, 1769, 1861), localname (\"AzÃ¤rbaycan\", \"Sakartvelo\", \"Al-Jazaâir/AlgÃ©rie\"), code2 (\"PY\", \"NZ\", \"KH\"), name (\"Haiti\", \"Iran\", \"Virgin Islands, British\"), gnp (5121.0, 1579.0, 5332.0) | sqlite_sequence : name (\"city\"), seq (4079)",
        "ambiguous_queries": [
            "select name from nation where continent = 'Asia' order by lifeexpectancy limit 1",
            "select name from state where continent = 'Asia' order by lifeexpectancy limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"Asia\": [{\"nation\": [\"continent\"]}, {\"state\": [\"continent\"]}], \"life expectancy\": [{\"nation\": [\"lifeexpectancy\"]}, {\"state\": [\"lifeexpectancy\"]}], \"name\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Asia\" refers to the schema \"state\".\"continent\", \"life expectancy\" refers to the schema \"state\".\"lifeexpectancy\", \"name\" refers to the schema \"state\".\"name\"",
        "clear_ambiguity": "{\"Asia\": {\"state\": [\"continent\"]}, \"life expectancy\": {\"state\": [\"lifeexpectancy\"]}, \"name\": {\"state\": [\"name\"]}}",
        "gold_query": "select name from state where continent = 'Asia' order by lifeexpectancy limit 1"
    },
    {
        "index": 394,
        "db_id": "poker_player",
        "ambig_type": "table",
        "db_file": "table/poker_player/poker_player.sqlite",
        "question": "What are the names of people who do not play poker?",
        "schema_without_content": "individuals : height , people_id , nationality , name , birth_date  | person : height , people_id , nationality , name , birth_date  | poker_player : people_id , earnings , best_finish , poker_player_id , money_rank , final_table_made",
        "schema_with_content": "individuals : height (187.0, 196.0, 196.0), people_id (6, 5, 4), nationality (\"Russia\", \"Bulgaria\"), name (\"Yevgeni Sivozhelez\", \"Yevgeni Sivozhelez\", \"Maksim Botin\"), birth_date (\"May 26, 1986\", \"August 16, 1982\", \"May 26, 1986\") | person : height (187.0, 196.0, 196.0), people_id (6, 5, 4), nationality (\"Russia\", \"Bulgaria\"), name (\"Yevgeni Sivozhelez\", \"Yevgeni Sivozhelez\", \"Maksim Botin\"), birth_date (\"May 26, 1986\", \"August 16, 1982\", \"May 26, 1986\") | poker_player : people_id (1, 7, 5), earnings (476090.0, 189233.0, 142800.0), best_finish (1.0, 2.0, 3.0), poker_player_id (4, 5, 3), money_rank (68.0, 166.0, 58.0), final_table_made (10.0, 21.0, 21.0)",
        "ambiguous_queries": [
            "select name from person where people_id not in (select people_id from poker_player)",
            "select name from individuals where people_id not in (select people_id from poker_player)"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"individuals\": [\"name\"]}, {\"person\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"person\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"person\": [\"name\"]}}",
        "gold_query": "select name from person where people_id not in (select people_id from poker_player)"
    },
    {
        "index": 395,
        "db_id": "orchestra",
        "ambig_type": "table",
        "db_file": "table/orchestra/orchestra.sqlite",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "schema_without_content": "maestro : conductor_id , age , name , nationality , year_of_work  | orchestra : record_company , conductor_id , major_record_format , orchestra_id , year_of_founded , orchestra  | performance : share , date , type , weekly_rank , official_ratings_ , orchestra_id , performance_id  | show : result , performance_id , if_first_show , attendance , show_id  | director : conductor_id , age , name , nationality , year_of_work",
        "schema_with_content": "maestro : conductor_id (9, 7, 1), age (63, 40, 50), name (\"Paul Jorgensen\", \"Robert Craft\", \"Michael Tilson Thomas\"), nationality (\"USA\", \"UK\", \"France\"), year_of_work (11, 21, 6) | orchestra : record_company (\"EMI\", \"Delos Records\", \"RCA\"), conductor_id (12, 9, 2), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra_id (6, 1, 4), year_of_founded (2004.0, 2008.0, 2008.0), orchestra (\"Royal Danish Orchestra\", \"Royal Danish Orchestra\", \"Orchestre de Paris\") | performance : share (\"38.1%\", \"44.7%\", \"29.3%\"), date (\"11 June\", \"9 June\", \"9 June\"), type (\"Semi-final 3\", \"Live final results\", \"Auditions 1\"), weekly_rank (\"15\", \"9\", \"9\"), official_ratings_(millions) (8.36, 11.45, 6.73), orchestra_id (6, 1, 6), performance_id (4, 11, 4) | show : result (\"T\", \"F\"), performance_id (5, 1, 1), if_first_show (\"Fir Park\", \"Fir Park\", \"Hampden Park\"), attendance (1925.0, 1026.0, 1026.0), show_id (5, 3, 5) | director : conductor_id (9, 7, 1), age (63, 40, 50), name (\"Paul Jorgensen\", \"Robert Craft\", \"Michael Tilson Thomas\"), nationality (\"USA\", \"UK\", \"France\"), year_of_work (11, 21, 6)",
        "ambiguous_queries": [
            "select t1.name from director as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
            "select t1.name from maestro as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"director\": [\"name\"]}, {\"maestro\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"director\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"director\": [\"name\"]}}",
        "gold_query": "select t1.name from director as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1"
    },
    {
        "index": 396,
        "db_id": "wta_1",
        "ambig_type": "table",
        "db_file": "table/wta_1/wta_1.sqlite",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "schema_without_content": "competitors : last_name , country_code , first_name , player_id , hand , birth_date  | rankings : tours , ranking , ranking_points , ranking_date , player_id  | matches : winner_age , winner_hand , loser_ht , match_num , winner_rank_points , loser_ioc , round , tourney_name , winner_id , winner_seed , loser_seed , winner_rank , winner_entry , tourney_id , winner_ioc , year , tourney_level , tourney_date , winner_ht , loser_age , loser_id , score  6-4\", \"7-5 7-5\", \"3-6 7-6 6-0\", best_of , minutes , loser_rank , draw_size , loser_entry , loser_rank_points , surface , winner_name , loser_name , loser_hand  | athletes : last_name , country_code , first_name , player_id , hand , birth_date",
        "schema_with_content": "competitors : last_name (\"Thile\", \"Silverio\", \"Marik\"), country_code (\"OMA\", \"RSA\", \"NED\"), first_name (\"Oliwia\", \"Aleksandrina\", \"Lilly\"), player_id (217274, 209187, 218738), hand (\"R\", \"\", \"L\"), birth_date (19990227, 19760815, 19860301) | rankings : tours (1, 35, 6), ranking (117, 452, 277), ranking_points (3211, 1415, 187), ranking_date (19981012, 19920525, 20040816), player_id (206177, 201650, 206161) | matches : winner_age (28.301163586599998, 23.2361396304, 25.3990417522), winner_hand (\"R\", \"L\"), loser_ht (180, 175, 169), match_num (204, 278, 214), winner_rank_points (1145, 3595, 4985), loser_ioc (\"TPE\", \"SRB\", \"CZE\"), round (\"R32\", \"BR\", \"RR\"), tourney_name (\"Montreal\", \"Sydney\", \"Miami\"), winner_id (201474, 200748, 201505), winner_seed (3, 18, 14), loser_seed (11, 7, 8), winner_rank (13, 44, 30), winner_entry (\"\"), tourney_id (\"2016-M014\", \"2016-1081\", \"2016-1067\"), winner_ioc (\"NED\", \"UKR\", \"AUS\"), year (2013, 2016, 2017), tourney_level (\"I\", \"I\", \"I\"), tourney_date (20160321, 20170306, 20170717), winner_ht (159, 181, 179), loser_age (23.808350444899997, 36.908966461300004, 25.4291581109), loser_id (201506, 201585, 201518), score (\"7-6(0) 6-4\", \"7-5 7-5\", \"3-6 7-6(2) 6-0\"), best_of (3), minutes (121, 112, 60), loser_rank (24, 15, 34), draw_size (128, 64, 128), loser_entry (\"\"), loser_rank_points (3185, 3401, 1565), surface (\"Hard\", \"Clay\", \"Grass\"), winner_name (\"Lucie Safarova\", \"Caroline Wozniacki\", \"Johanna Larsson\"), loser_name (\"Elena Vesnina\", \"Johanna Larsson\", \"Agnieszka Radwanska\"), loser_hand (\"R\", \"L\") | athletes : last_name (\"Thile\", \"Silverio\", \"Marik\"), country_code (\"OMA\", \"RSA\", \"NED\"), first_name (\"Oliwia\", \"Aleksandrina\", \"Lilly\"), player_id (217274, 209187, 218738), hand (\"R\", \"\", \"L\"), birth_date (19990227, 19760815, 19860301)",
        "ambiguous_queries": [
            "select first_name, last_name from athletes where hand = 'L' order by birth_date",
            "select first_name, last_name from competitors where hand = 'L' order by birth_date"
        ],
        "gold_ambiguity": {
            "match": "{\"birth date\": [{\"athletes\": [\"birth_date\"]}, {\"competitors\": [\"birth_date\"]}], \"hand\": [{\"athletes\": [\"hand\"]}, {\"competitors\": [\"hand\"]}], \"last name\": [{\"athletes\": [\"last_name\"]}, {\"competitors\": [\"last_name\"]}], \"first\": [{\"athletes\": [\"first_name\"]}, {\"competitors\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth date\" refers to the schema \"athletes\".\"birth_date\", \"hand\" refers to the schema \"athletes\".\"hand\", \"last name\" refers to the schema \"athletes\".\"last_name\", \"first\" refers to the schema \"athletes\".\"first_name\"",
        "clear_ambiguity": "{\"birth date\": {\"athletes\": [\"birth_date\"]}, \"hand\": {\"athletes\": [\"hand\"]}, \"last name\": {\"athletes\": [\"last_name\"]}, \"first\": {\"athletes\": [\"first_name\"]}}",
        "gold_query": "select first_name, last_name from athletes where hand = 'L' order by birth_date"
    },
    {
        "index": 397,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What are the names of nations speak both English and French?",
        "schema_without_content": "nation : name , capital , region , lifeexpectancy , continent , localname , surfacearea , gnp , gnpold , headofstate , population , indepyear , governmentform , code2 , code  | countrylanguage : countrycode , language , isofficial , percentage  | state : name , capital , region , lifeexpectancy , continent , localname , surfacearea , gnp , gnpold , headofstate , population , indepyear , governmentform , code2 , code  | sqlite_sequence : name , seq  | city : countrycode , name , population , id , district",
        "schema_with_content": "nation : name (\"Niue\", \"Tajikistan\", \"Niue\"), capital (1365, 3248, 3225), region (\"Eastern Europe\", \"Micronesia\", \"Southern and Central Asia\"), lifeexpectancy (59.8, 73.3, 64.1), continent (\"South America\", \"Europe\", \"Oceania\"), localname (\"Nepal\", \"Cameroun/Cameroon\", \"Saint Lucia\"), surfacearea (181.0, 923768.0, 14874.0), gnp (16321.0, 2328.0, 14194.0), gnpold (993.0, 1084.0, 58549.0), headofstate (\"Fernando de la RÃºa\", \"Abdiqassim Salad Hassan\", \"Valdas Adamkus\"), population (21000, 11201000, 14786000), indepyear (1910, 1946, 1965), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Constitutional Monarchy\", \"Socialistic State\"), code2 (\"SC\", \"FO\", \"PE\"), code (\"MWI\", \"PRY\", \"ZMB\") | countrylanguage : countrycode (\"PRY\", \"ABW\", \"CXR\"), language (\"Cakchiquel\", \"Khoekhoe\", \"Mixtec\"), isofficial (\"T\", \"F\"), percentage (76.7, 10.3, 95.0) | state : name (\"Niue\", \"Tajikistan\", \"Niue\"), capital (1365, 3248, 3225), region (\"Eastern Europe\", \"Micronesia\", \"Southern and Central Asia\"), lifeexpectancy (59.8, 73.3, 64.1), continent (\"South America\", \"Europe\", \"Oceania\"), localname (\"Nepal\", \"Cameroun/Cameroon\", \"Saint Lucia\"), surfacearea (181.0, 923768.0, 14874.0), gnp (16321.0, 2328.0, 14194.0), gnpold (993.0, 1084.0, 58549.0), headofstate (\"Fernando de la RÃºa\", \"Abdiqassim Salad Hassan\", \"Valdas Adamkus\"), population (21000, 11201000, 14786000), indepyear (1910, 1946, 1965), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Constitutional Monarchy\", \"Socialistic State\"), code2 (\"SC\", \"FO\", \"PE\"), code (\"MWI\", \"PRY\", \"ZMB\") | sqlite_sequence : name (\"city\"), seq (4079) | city : countrycode (\"CZE\", \"BEN\", \"TUV\"), name (\"San Francisco del RincÃ³n\", \"Namibe\", \"BagÃ©\"), population (148006, 128651, 97855), id (2105, 12, 3046), district (\"Wales\", \"Macau\", \"Casablanca\")",
        "ambiguous_queries": [
            "select t1.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from nation as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'",
            "select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"nation\": [\"name\"]}, {\"state\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"state\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"state\": [\"name\"]}}",
        "gold_query": "select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from state as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'"
    },
    {
        "index": 398,
        "db_id": "tvshow",
        "ambig_type": "table",
        "db_file": "table/tvshow/tvshow.sqlite",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "schema_without_content": "TV_program : id , episode , 18_49_rating_share , rating , viewers_m , air_date , share , channel , weekly_rank  | tv_channel : pay_per_view_ppv , series_name , pixel_aspect_ratio_par , hight_definition_tv , content , country , id , language , package_option  | TV_show : id , episode , 18_49_rating_share , rating , viewers_m , air_date , share , channel , weekly_rank  | cartoon : written_by , id , title , channel , production_code , directed_by , original_air_date",
        "schema_with_content": "TV_program : id (7.0, 7.0, 10.0), episode (\"The Hanged Man\", \"A Love of a Lifetime\", \"The Year of the Rabbit\"), 18_49_rating_share (\"2.9/7\", \"3.2/8\", \"1.7/5\"), rating (\"3.0\", \"3.4\", \"3.0\"), viewers_m (\"5.75\", \"8.23\", \"5.28\"), air_date (\"December 10, 2007\", \"November 5, 2007\", \"October 8, 2007\"), share (5.0, 6.0, 5.0), channel (\"713\", \"700\", \"719\"), weekly_rank (65.0, 61.0, 50.0) | tv_channel : pay_per_view_ppv (\"no\"), series_name (\"Classica\", \"Sky Music\", \"myDeejay\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"713\", \"728\", \"701\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\") | TV_show : id (7.0, 7.0, 10.0), episode (\"The Hanged Man\", \"A Love of a Lifetime\", \"The Year of the Rabbit\"), 18_49_rating_share (\"2.9/7\", \"3.2/8\", \"1.7/5\"), rating (\"3.0\", \"3.4\", \"3.0\"), viewers_m (\"5.75\", \"8.23\", \"5.28\"), air_date (\"December 10, 2007\", \"November 5, 2007\", \"October 8, 2007\"), share (5.0, 6.0, 5.0), channel (\"713\", \"700\", \"719\"), weekly_rank (65.0, 61.0, 50.0) | cartoon : written_by (\"Steven Melching\", \"Matt Wayne\", \"Todd Casey\"), id (1.0, 11.0, 4.0), title (\"Deep Cover for Batman!\", \"Invasion of the Secret Santas!\", \"Enter the Outsiders!\"), channel (\"706\", \"708\", \"701\"), production_code (105.0, 112.0, 107.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"November14,2008\", \"January2,2009\", \"November14,2008\")",
        "ambiguous_queries": [
            "select air_date from tv_show where episode = 'A Love of a Lifetime'",
            "select air_date from tv_program where episode = 'A Love of a Lifetime'"
        ],
        "gold_ambiguity": {
            "match": "{\"Episode\": [{\"TV_program\": [\"episode\"]}, {\"TV_show\": [\"episode\"]}], \"air date\": [{\"TV_program\": [\"air_date\"]}, {\"TV_show\": [\"air_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Episode\" refers to the schema \"tv_show\".\"episode\", \"air date\" refers to the schema \"tv_show\".\"air_date\"",
        "clear_ambiguity": "{\"Episode\": {\"TV_show\": [\"episode\"]}, \"air date\": {\"TV_show\": [\"air_date\"]}}",
        "gold_query": "select air_date from tv_show where episode = 'A Love of a Lifetime'"
    },
    {
        "index": 399,
        "db_id": "world_1",
        "ambig_type": "table",
        "db_file": "table/world_1/world_1.sqlite",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "schema_without_content": "official_language : countrycode , language , percentage , isofficial  | city : id , name , countrycode , district , population  | sqlite_sequence : seq , name  | country : governmentform , localname , headofstate , capital , surfacearea , lifeexpectancy , continent , gnpold , code , gnp , name , code2 , population , indepyear , region  | spoken_language : countrycode , language , percentage , isofficial",
        "schema_with_content": "official_language : countrycode (\"PRY\", \"REU\", \"COK\"), language (\"Nama\", \"Bassa\", \"Yi\"), percentage (8.7, 45.5, 67.7), isofficial (\"T\", \"F\") | city : id (2957, 3163, 3426), name (\"Elizabeth\", \"Las PiÃ±as\", \"Santa Luzia\"), countrycode (\"TJK\", \"IRN\", \"SMR\"), district (\"Zachodnio-Pomorskie\", \"Munster\", \"Primorje\"), population (339917, 325000, 3361700) | sqlite_sequence : seq (4079), name (\"city\") | country : governmentform (\"Dependent Territory of the UK\", \"Socialistic Republic\", \"Islamic Republic\"), localname (\"Polska\", \"Antigua and Barbuda\", \"Guinea Ecuatorial\"), headofstate (\"Joseph Kabila\", \"Vojislav KoÅ¡tunica\", \"Ãlafur Ragnar GrÃ­msson\"), capital (905, 917, 1889), surfacearea (8547403.0, 622984.0, 112088.0), lifeexpectancy (50.8, 41.3, 63.4), continent (\"Africa\", \"Antarctica\", \"Antarctica\"), gnpold (7388.0, 1186.0, 1312.0), code (\"DEU\", \"ETH\", \"NFK\"), gnp (249704.0, 1694.0, 414972.0), name (\"Suriname\", \"Ecuador\", \"Cameroon\"), code2 (\"PY\", \"CR\", \"DE\"), population (24170000, 3850000, 11669000), indepyear (1974, 1993, -1000), region (\"Central America\", \"Polynesia\", \"Micronesia\") | spoken_language : countrycode (\"PRY\", \"REU\", \"COK\"), language (\"Nama\", \"Bassa\", \"Yi\"), percentage (8.7, 45.5, 67.7), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select language, countrycode, max(percentage) from official_language group by countrycode",
            "select language, countrycode, max(percentage) from spoken_language group by countrycode"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{\"official_language\": [\"countrycode\"]}, {\"spoken_language\": [\"countrycode\"]}], \"language\": [{\"official_language\": [\"language\"]}, {\"spoken_language\": [\"language\"]}], \"percentage\": [{\"official_language\": [\"percentage\"]}, {\"spoken_language\": [\"percentage\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"official_language\".\"countrycode\", \"language\" refers to the schema \"official_language\".\"language\", \"percentage\" refers to the schema \"official_language\".\"percentage\"",
        "clear_ambiguity": "{\"country\": {\"official_language\": [\"countrycode\"]}, \"language\": {\"official_language\": [\"language\"]}, \"percentage\": {\"official_language\": [\"percentage\"]}}",
        "gold_query": "select language, countrycode, max(percentage) from official_language group by countrycode"
    },
    {
        "index": 400,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "schema_without_content": "tv_channel : pay_per_view_ppv , pixel_aspect_ratio_par , series_name , id , language , hight_definition_tv , content , package_option \", \"no \", country  | tv_series : channel , rating , air_date , viewers_m , share , episode , 18_49_rating_share , weekly_rank , id  | cartoon : directed_by , id , written_by , channel , original_air_date , title , production_code  | cartoon_production_code : id , production_code ",
        "schema_with_content": "tv_channel : pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"myDeejay\", \"MTV Live HD\", \"Rock TV\"), id (\"706\", \"719\", \"707\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), package_option (\"Option\", \"no ( FTV )\", \"no ( FTV )\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : channel (\"708\", \"719\", \"708\"), rating (\"5.3\", \"4.4\", \"5.8\"), air_date (\"October 29, 2007\", \"December 17, 2007\", \"October 8, 2007\"), viewers_m (\"5.61\", \"5.13\", \"5.61\"), share (9.0, 6.0, 6.0), episode (\"The Legend of Dylan McCleen\", \"Friendly Skies\", \"The Year of the Rabbit\"), 18_49_rating_share (\"2.7/7\", \"2.7/7\", \"1.5/4\"), weekly_rank (50.0, 43.0, 71.0), id (3.0, 12.0, 1.0) | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (8.0, 3.0, 4.0), written_by (\"Matt Wayne\", \"Adam Beechen\", \"Todd Casey\"), channel (\"728\", \"701\", \"708\"), original_air_date (\"November14,2008\", \"November14,2008\", \"January30,2009\"), title (\"Journey to the Center of the Bat!\", \"Dawn of the Dead Man!\", \"Evil Under the Sea!\"), production_code (108.0, 105.0, 109.0) | cartoon_production_code : id (10.0, 8.0, 5.0), production_code (108.0, 105.0, 109.0)",
        "ambiguous_queries": [
            "select production_code, channel from cartoon order by original_air_date limit 1",
            "select t2.production_code, t1.channel from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"produdction code\": [{\"cartoon\": [\"production_code\"]}, {\"cartoon_production_code\": [\"production_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"produdction code\" refers to the schema \"cartoon\".\"production_code\"",
        "clear_ambiguity": "{\"produdction code\": {\"cartoon\": [\"production_code\"]}}",
        "gold_query": "select production_code, channel from cartoon order by original_air_date limit 1"
    },
    {
        "index": 401,
        "db_id": "poker_player",
        "ambig_type": "join",
        "db_file": "join/poker_player/poker_player.sqlite",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "schema_without_content": "poker_player : best_finish , people_id , final_table_made , money_rank , earnings , poker_player_id  | people : height , birth_date , people_id , nationality , name  | people_name : name , people_id ",
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), people_id (5, 7, 2), final_table_made (26.0, 19.0, 26.0), money_rank (141.0, 58.0, 58.0), earnings (104871.0, 104871.0, 596462.0), poker_player_id (5, 2, 5) | people : height (207.0, 193.0, 196.0), birth_date (\"July 14, 1983\", \"January 22, 1987\", \"July 14, 1983\"), people_id (1, 2, 4), nationality (\"Russia\", \"Bulgaria\"), name (\"Aleksey Ostapenko\", \"Semen Poltavskiy\", \"Semen Poltavskiy\") | people_name : name (\"Aleksey Ostapenko\", \"Semen Poltavskiy\", \"Semen Poltavskiy\"), people_id (3, 4, 3)",
        "ambiguous_queries": [
            "select name, birth_date from people order by name asc",
            "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"people\": [\"name\"]}, {\"people_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"people_name\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"people_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc"
    },
    {
        "index": 402,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , date_effective_from , template_type_code , template_details , version_number , date_effective_to  | templates_template_type_code : template_type_code , template_id  | documents : document_name , other_details , document_id , template_id , document_description  | paragraphs : other_details , paragraph_id , document_id , paragraph_text ",
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Paper\", \"CV\"), template_type_code (\"CV\", \"AD\", \"CV\") | templates : template_id (24, 18, 18), date_effective_from (\"1997-04-17 08:29:44\", \"1979-10-20 21:23:20\", \"1975-05-20 22:51:19\"), template_type_code (\"PPT\", \"CV\", \"BK\"), template_details (\"\"), version_number (2, 4, 3), date_effective_to (\"1994-12-07 13:26:23\", \"1975-07-16 04:52:10\", \"2008-01-05 14:19:28\") | templates_template_type_code : template_type_code (\"PPT\", \"CV\", \"BK\"), template_id (23, 11, 15) | documents : document_name (\"Introduction of OS\", \"About Korea\", \"How to write a CV\"), other_details (None), document_id (3830, 82, 3), template_id (11, 8, 11), document_description (\"y\", \"f\", \"w\") | paragraphs : other_details (None), paragraph_id (241, 571212310, 280120913), document_id (3540024, 3, 2394), paragraph_text (\"Indonesia\", \"Micronesia\", \"Papua New Guinea\")",
        "ambiguous_queries": [
            "select template_id, version_number, template_type_code from templates",
            "select t1.template_id, t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
        ],
        "gold_ambiguity": {
            "match": "{\"template type code\": [{\"templates\": [\"template_type_code\"]}, {\"templates_template_type_code\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template type code\" refers to the schema \"templates_template_type_code\".\"template_type_code\"",
        "clear_ambiguity": "{\"template type code\": {\"templates_template_type_code\": [\"template_type_code\"]}}",
        "gold_query": "select t1.template_id, t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
    },
    {
        "index": 403,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , version_number , date_effective_from , template_type_code , template_id , date_effective_to  | templates_template_type_code : template_type_code , template_id  | documents : template_id , other_details , document_id , document_name , document_description  | paragraphs : document_id , paragraph_text , paragraph_id , other_details ",
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"CV\", \"Presentation\"), template_type_code (\"BK\", \"CV\", \"BK\") | templates : template_details (\"\"), version_number (9, 6, 8), date_effective_from (\"1983-07-16 21:16:16\", \"1986-12-09 14:51:36\", \"1997-04-17 08:29:44\"), template_type_code (\"PP\", \"BK\", \"BK\"), template_id (25, 11, 18), date_effective_to (\"1995-09-19 22:27:48\", \"1989-11-24 19:06:06\", \"1999-07-08 03:31:04\") | templates_template_type_code : template_type_code (\"PP\", \"BK\", \"BK\"), template_id (22, 0, 20) | documents : template_id (6, 8, 8), other_details (None), document_id (0, 0, 3830), document_name (\"A history of Arts\", \"About Korea\", \"How to read a book\"), document_description (\"w\", \"y\", \"y\") | paragraphs : document_id (50123, 3830, 80), paragraph_text (\"Jersey\", \"Jersey\", \"UK\"), paragraph_id (241, 765713812, 65), other_details (None)",
        "ambiguous_queries": [
            "select version_number, template_type_code from templates where version_number > 5",
            "select t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5"
        ],
        "gold_ambiguity": {
            "match": "{\"template type code\": [{\"templates\": [\"template_type_code\"]}, {\"templates_template_type_code\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template type code\" refers to the schema \"templates\".\"template_type_code\"",
        "clear_ambiguity": "{\"template type code\": {\"templates\": [\"template_type_code\"]}}",
        "gold_query": "select version_number, template_type_code from templates where version_number > 5"
    },
    {
        "index": 404,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "schema_without_content": "city : id , district , countrycode , population , name  | sqlite_sequence : name , seq  | country : capital , gnpold , region , name , continent , population , localname , indepyear , headofstate , code2 , lifeexpectancy , surfacearea , governmentform , code , gnp  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : countrycode , isofficial , language , percentage ",
        "schema_with_content": "city : id (1282, 226, 1178), district (\"Santiago de Cuba\", \"Bretagne\", \"La Guajira\"), countrycode (\"MDV\", \"BRB\", \"TTO\"), population (326011, 105853, 584342), name (\"Bijapur\", \"Tampere\", \"Southend-on-Sea\") | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (2460, 3499, 3066), gnpold (243948.0, 542.0, 18862.0), region (\"Central Africa\", \"Southern Africa\", \"Northern Africa\"), name (\"India\", \"Yemen\", \"Bosnia and Herzegovina\"), continent (\"Antarctica\", \"Asia\", \"Asia\"), population (67702000, 3337000, 170115000), localname (\"Bermuda\", \"Niger\", \"Pakistan\"), indepyear (1066, 1983, 1143), headofstate (\"Mohammad Omar\", \"Arnoldo AlemÃ¡n Lacayo\", \"Jiang Zemin\"), code2 (\"UA\", \"BS\", \"SH\"), lifeexpectancy (73.1, 64.0, 72.4), surfacearea (199900.0, 527968.0, 21056.0), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Monarchy\", \"Constitutional Monarchy, Federation\"), code (\"FLK\", \"DEU\", \"MAC\"), gnp (1941.0, 10162.0, 828.0) | country_lifeexpectancy : code (\"LKA\", \"FRA\", \"ZWE\"), lifeexpectancy (73.1, 64.0, 72.4) | countrylanguage : countrycode (\"SVN\", \"SMR\", \"AUT\"), isofficial (\"T\", \"F\"), language (\"Osseetti\", \"Venda\", \"Afrikaans\"), percentage (50.8, 16.5, 50.8)",
        "ambiguous_queries": [
            "select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = 'Asia' order by t1.surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"expected life length\": [{\"country\": [\"lifeexpectancy\"]}, {\"country_lifeexpectancy\": [\"lifeexpectancy\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"expected life length\" refers to the schema \"country_lifeexpectancy\".\"lifeexpectancy\"",
        "clear_ambiguity": "{\"expected life length\": {\"country_lifeexpectancy\": [\"lifeexpectancy\"]}}",
        "gold_query": "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = 'Asia' order by t1.surfacearea desc limit 1"
    },
    {
        "index": 405,
        "db_id": "car_1",
        "ambig_type": "join",
        "db_file": "join/car_1/car_1.sqlite",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "schema_without_content": "continents : continent , contid  | countries : countryid , countryname , continent  | car_makers : id , fullname , maker , country  | model_list : maker , model , modelid  | car_names : make , makeid , model  | cars_data : year , accelerate , weight , cylinders , mpg , id , horsepower , edispl  | cars_data_accelerate : id , accelerate ",
        "schema_with_content": "continents : continent (\"europe\", \"asia\", \"africa\"), contid (5, 1, 4) | countries : countryid (12, 2, 14), countryname (\"brazil\", \"brazil\", \"germany\"), continent (5, 5, 5) | car_makers : id (12, 22, 13), fullname (\"Citroen\", \"American Motor Company\", \"Renault\"), maker (\"citroen\", \"kia\", \"opel\"), country (\"7\", \"7\", \"5\") | model_list : maker (19, 23, 9), model (\"peugeot\", \"hi\", \"kia\"), modelid (12, 6, 28) | car_names : make (\"plymouth fury iii\", \"toyota corona liftback\", \"volkswagen super beetle 117\"), makeid (247, 265, 39), model (\"ford\", \"fiat\", \"mazda\") | cars_data : year (1971, 1982, 1979), accelerate (18.0, 16.0, 21.5), weight (2279, 2745, 2678), cylinders (8, 5, 5), mpg (\"null\", \"18.2\", \"33.5\"), id (257, 319, 273), horsepower (\"180\", \"86\", \"125\"), edispl (96.0, 97.5, 110.0) | cars_data_accelerate : id (37, 227, 300), accelerate (18.0, 16.0, 21.5)",
        "ambiguous_queries": [
            "select max(accelerate), cylinders from cars_data group by cylinders",
            "select max(t2.accelerate), t1.cylinders from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by t1.cylinders"
        ],
        "gold_ambiguity": {
            "match": "{\"accelerate\": [{\"cars_data\": [\"accelerate\"]}, {\"cars_data_accelerate\": [\"accelerate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"accelerate\" refers to the schema \"cars_data\".\"accelerate\"",
        "clear_ambiguity": "{\"accelerate\": {\"cars_data\": [\"accelerate\"]}}",
        "gold_query": "select max(accelerate), cylinders from cars_data group by cylinders"
    },
    {
        "index": 406,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "What is the average and maximum age for each pet type?",
        "schema_without_content": "student : city_code , fname , age , lname , stuid , sex , major , advisor  | has_pet : stuid , petid  | pets : weight , petid , pettype , pet_age  | pets_pettype : pettype , petid ",
        "schema_with_content": "student : city_code (\"NAR\", \"LON\", \"NAR\"), fname (\"Lisa\", \"Shiela\", \"Ian\"), age (22, 16, 19), lname (\"Pang\", \"Schmidt\", \"Nelson\"), stuid (1001, 1023, 1011), sex (\"F\", \"M\"), major (520, 50, 520), advisor (2192, 8423, 8723) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
            "select avg(t1.pet_age), max(t1.pet_age), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"pet type\": [{\"pets\": [\"pettype\"]}, {\"pets_pettype\": [\"pettype\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"pet type\" refers to the schema \"pets\".\"pettype\"",
        "clear_ambiguity": "{\"pet type\": {\"pets\": [\"pettype\"]}}",
        "gold_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype"
    },
    {
        "index": 407,
        "db_id": "car_1",
        "ambig_type": "join",
        "db_file": "join/car_1/car_1.sqlite",
        "question": "What is the average weight and year for each year?",
        "schema_without_content": "continents : contid , continent  | countries : countryname , countryid , continent  | car_makers : id , country , maker , fullname  | model_list : model , modelid , maker  | car_names : model , makeid , make  | cars_data : weight , year , accelerate , cylinders , mpg , horsepower , id , edispl  | cars_data_weight : weight , id ",
        "schema_with_content": "continents : contid (4, 2, 2), continent (\"africa\", \"europe\", \"australia\") | countries : countryname (\"sweden\", \"new zealand\", \"germany\"), countryid (11, 14, 7), continent (5, 5, 1) | car_makers : id (1, 8, 16), country (\"6\", \"2\", \"7\"), maker (\"bmw\", \"chrysler\", \"kia\"), fullname (\"Volvo\", \"Volkswagen\", \"Citroen\") | model_list : model (\"capri\", \"datsun\", \"capri\"), modelid (12, 29, 26), maker (5, 17, 14) | car_names : model (\"mercedes-benz\", \"dodge\", \"capri\"), makeid (122, 317, 270), make (\"ford mustang boss 302\", \"toyota corolla liftback\", \"plymouth fury gran sedan\") | cars_data : weight (3645, 2279, 2108), year (1971, 1974, 1977), accelerate (13.0, 16.0, 13.8), cylinders (5, 8, 3), mpg (\"31\", \"20.8\", \"14.5\"), horsepower (\"208\", \"69\", \"null\"), id (325, 156, 274), edispl (307.0, 107.0, 78.0) | cars_data_weight : weight (3645, 2279, 2108), id (325, 215, 65)",
        "ambiguous_queries": [
            "select avg(weight), year from cars_data group by year",
            "select avg(t2.weight), t1.year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by t1.year"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"cars_data\": [\"weight\"]}, {\"cars_data_weight\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"cars_data_weight\".\"weight\"",
        "clear_ambiguity": "{\"weight\": {\"cars_data_weight\": [\"weight\"]}}",
        "gold_query": "select avg(t2.weight), t1.year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by t1.year"
    },
    {
        "index": 408,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "What are the first names and birth dates of players from the USA?",
        "schema_without_content": "players : first_name , birth_date , last_name , player_id , hand , country_code  | players_first_name : first_name , player_id  | matches : tourney_id , loser_seed , match_num , winner_name , winner_id , loser_ht , best_of , score , winner_ht , winner_rank , loser_age , draw_size , winner_hand , loser_ioc , tourney_level , winner_seed , loser_entry , winner_age , surface , round , winner_entry , winner_ioc , loser_rank , tourney_date , tourney_name , loser_id , minutes , loser_rank_points , year , loser_hand , winner_rank_points , loser_name  | rankings : ranking_date , tours , player_id , ranking , ranking_points ",
        "schema_with_content": "players : first_name (\"Gloire\", \"Callie\", \"Sai Jayalakshmy\"), birth_date (20000322, 19591031, 19790217), last_name (\"Roubickova\", \"Arafa\", \"Halbauer\"), player_id (220512, 219762, 206919), hand (\"L\", \"R\", \"\"), country_code (\"IND\", \"ESA\", \"NZL\") | players_first_name : first_name (\"Gloire\", \"Callie\", \"Sai Jayalakshmy\"), player_id (217164, 215481, 217659) | matches : tourney_id (\"2017-M016\", \"2017-1027\", \"2017-M004\"), loser_seed (5, 22, 5), match_num (219, 296, 210), winner_name (\"Barbora Zahlavova Strycova\", \"Lucie Safarova\", \"Julia Goerges\"), winner_id (201521, 201325, 201594), loser_ht (169, 170, 175), best_of (3), score (\"6-1 6-3\", \"7-5 1-6 7-5\", \"7-5 4-6 6-4\"), winner_ht (163, 168, 164), winner_rank (16, 52, 31), loser_age (28.1998631075, 22.9596167009, 31.019849418200003), draw_size (4, 32, 4), winner_hand (\"R\", \"L\"), loser_ioc (\"ROU\", \"BEL\", \"ITA\"), tourney_level (\"G\", \"W\", \"G\"), winner_seed (14, 3, 18), loser_entry (\"\"), winner_age (34.4449007529, 35.6440793977, 27.4688569473), surface (\"Hard\", \"Clay\", \"Grass\"), round (\"R16\", \"R32\", \"SF\"), winner_entry (\"\"), winner_ioc (\"JPN\", \"JPN\", \"JPN\"), loser_rank (5, 19, 4), tourney_date (20170522, 20160801, 20170501), tourney_name (\"Australian Open\", \"Brisbane\", \"Budapest\"), loser_id (201499, 201514, 201505), minutes (145, 93, 83), loser_rank_points (3440, 2750, 2560), year (2013, 2016, 2017), loser_hand (\"R\", \"L\"), winner_rank_points (1015, 3540, 1076), loser_name (\"Angelique Kerber\", \"Annika Beck\", \"Magdalena Rybarikova\") | rankings : ranking_date (19970331, 20040202, 19940321), tours (19, 27, 15), player_id (201690, 204431, 214221), ranking (1379, 552, 443), ranking_points (5430, 2845, 432)",
        "ambiguous_queries": [
            "select first_name, birth_date from players where country_code = 'USA'",
            "select t2.first_name, t1.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"players\": [\"first_name\"]}, {\"players_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"players_first_name\".\"first_name\"",
        "clear_ambiguity": "{\"first name\": {\"players_first_name\": [\"first_name\"]}}",
        "gold_query": "select t2.first_name, t1.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
    },
    {
        "index": 409,
        "db_id": "battle_death",
        "ambig_type": "join",
        "db_file": "join/battle_death/battle_death.sqlite",
        "question": "List the name, date and result of each battle.",
        "schema_without_content": "battle : latin_commander , name , date , result , bulgarian_commander , id  | battle_name : name , id  | ship : ship_type , tonnage , id , disposition_of_ship , location , lost_in_battle , name  | death : injured , id , note , caused_by_ship_id , killed ",
        "schema_with_content": "battle : latin_commander (\"Thierry de Termond\", \"Boniface of Montferrat\", \"Thierry de Termond\"), name (\"Battle of Philippopolis\", \"Battle of Boruy\", \"Siege of Constantinople\"), date (\"June 1205\", \"4 September 1207\", \"14 April 1205\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), bulgarian_commander (\"Unknown\", \"Ivan Asen II\", \"Ivan Asen II\"), id (5, 1, 2) | battle_name : name (\"Battle of Philippopolis\", \"Battle of Boruy\", \"Siege of Constantinople\"), id (3, 6, 4) | ship : ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), tonnage (\"t\", \"391\", \"225\"), id (4, 6, 6), disposition_of_ship (\"Sank\", \"Wrecked\", \"Wrecked\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), lost_in_battle (7, 5, 4), name (\"HMS Avon\", \"Mary\", \"Mary\") | death : injured (0, 9, 5), id (9, 3, 11), note (\"Sundargarh, Odisha\", \"Dantewada, Chhattisgarh\", \"Gajapati, Odisha\"), caused_by_ship_id (1, 1, 2), killed (3, 4, 4)",
        "ambiguous_queries": [
            "select name, date from battle",
            "select t2.name, t1.date from battle as t1 join battle_name as t2 on t1.id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"battle\": [\"name\"]}, {\"battle_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"battle_name\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"battle_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.date from battle as t1 join battle_name as t2 on t1.id = t2.id"
    },
    {
        "index": 410,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "Find the average and maximum age for each type of pet.",
        "schema_without_content": "student : age , sex , city_code , stuid , major , fname , lname , advisor  | has_pet : stuid , petid  | pets : weight , pettype , petid , pet_age  | pets_pettype : petid , pettype ",
        "schema_with_content": "student : age (19, 20, 19), sex (\"F\", \"M\"), city_code (\"SFO\", \"LON\", \"ATL\"), stuid (1005, 1022, 1016), major (100, 50, 520), fname (\"Bruce\", \"Bruce\", \"Susan\"), lname (\"Schwartz\", \"Wilson\", \"Shieber\"), advisor (2192, 7792, 1148) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), pet_age (3, 2, 1) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")",
        "ambiguous_queries": [
            "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
            "select avg(t1.pet_age), max(t1.pet_age), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"type\": [{\"pets\": [\"pettype\"]}, {\"pets_pettype\": [\"pettype\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type\" refers to the schema \"pets_pettype\".\"pettype\"",
        "clear_ambiguity": "{\"type\": {\"pets_pettype\": [\"pettype\"]}}",
        "gold_query": "select avg(t1.pet_age), max(t1.pet_age), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "index": 411,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "schema_without_content": "city : id , countrycode , name , population , district  | sqlite_sequence : seq , name  | country : surfacearea , code2 , capital , headofstate , lifeexpectancy , gnp , indepyear , continent , code , governmentform , region , population , gnpold , name , localname  | country_surfacearea : surfacearea , code  | countrylanguage : language , percentage , countrycode , isofficial ",
        "schema_with_content": "city : id (1989, 192, 1637), countrycode (\"RWA\", \"SEN\", \"AIA\"), name (\"LiuÂ´an\", \"Moratuwa\", \"Numazu\"), population (264081, 101309, 127350), district (\"Jharkhand\", \"Grad Sofija\", \"Tokat\") | sqlite_sequence : seq (4079), name (\"city\") | country : surfacearea (260.0, 102173.0, 242900.0), code2 (\"PL\", \"BV\", \"QA\"), capital (456, 2738, 3248), headofstate (\"Carlos Roberto Flores FacussÃ©\", \"Josefa Iloilo\", \"Kim Dae-jung\"), lifeexpectancy (75.4, 78.8, 54.7), gnp (10226.0, 818.0, 97.0), indepyear (1901, 1066, 1838), continent (\"Africa\", \"Antarctica\", \"South America\"), code (\"DOM\", \"BVT\", \"CYM\"), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Co-administrated\", \"Emirate Federation\"), region (\"South America\", \"Western Africa\", \"Southern Africa\"), population (428000, 6276000, 11385000), gnpold (105116.0, 993.0, 206025.0), name (\"Heard Island and McDonald Islands\", \"China\", \"Norway\"), localname (\"Italia\", \"Tunis/Tunisie\", \"Santa Sede/CittÃ  del Vaticano\") | country_surfacearea : surfacearea (260.0, 102173.0, 242900.0), code (\"BIH\", \"AUS\", \"NZL\") | countrylanguage : language (\"Ewe\", \"Pitcairnese\", \"Tuvalu\"), percentage (8.2, 0.9, 93.5), countrycode (\"GUM\", \"MOZ\", \"ZWE\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select name, surfacearea, indepyear from country order by population limit 1",
            "select t1.name, t2.surfacearea, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t1.population limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"surface\": [{\"country\": [\"surfacearea\"]}, {\"country_surfacearea\": [\"surfacearea\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"surface\" refers to the schema \"country\".\"surfacearea\"",
        "clear_ambiguity": "{\"surface\": {\"country\": [\"surfacearea\"]}}",
        "gold_query": "select name, surfacearea, indepyear from country order by population limit 1"
    },
    {
        "index": 412,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "schema_without_content": "stadium : name , lowest , stadium_id , highest , location , capacity , average  | singer : song_release_year , is_male , country , singer_id , song_name , name , age  | singer_age : age , singer_id  | concert : concert_name , stadium_id , concert_id , theme , year  | singer_in_concert : singer_id , concert_id ",
        "schema_with_content": "stadium : name (\"Stark's Park\", \"Hampden Park\", \"Somerset Park\"), lowest (331, 533, 1057), stadium_id (7, 3, 9), highest (2363, 1125, 780), location (\"Brechin City\", \"Ayr United\", \"Peterhead\"), capacity (4125, 10104, 3808), average (642, 2106, 730) | singer : song_release_year (\"2016\", \"2016\", \"2008\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 6, 6), song_name (\"Dangerous\", \"Gentleman\", \"Love\"), name (\"Timbaland\", \"Timbaland\", \"Timbaland\"), age (29, 29, 29) | singer_age : age (29, 29, 29), singer_id (3, 3, 4) | concert : concert_name (\"Auditions\", \"Home Visits\", \"Week 1\"), stadium_id (\"2\", \"9\", \"7\"), concert_id (5, 2, 5), theme (\"Wide Awake\", \"Happy Tonight\", \"Free choice 2\"), year (\"2014\", \"2015\") | singer_in_concert : singer_id (\"2\", \"5\", \"4\"), concert_id (5, 3, 6)",
        "ambiguous_queries": [
            "select name, country, age from singer order by age desc",
            "select t1.name, t1.country, t2.age from singer as t1 join singer_age as t2 on t1.singer_id = t2.singer_id order by t2.age desc"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"singer\": [\"age\"]}, {\"singer_age\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"singer\".\"age\"",
        "clear_ambiguity": "{\"age\": {\"singer\": [\"age\"]}}",
        "gold_query": "select name, country, age from singer order by age desc"
    },
    {
        "index": 413,
        "db_id": "flight_2",
        "ambig_type": "join",
        "db_file": "join/flight_2/flight_2.sqlite",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "schema_without_content": "airlines : uid , abbreviation , airline , country  | airlines_airline : uid , airline  | airports : airportname , country , countryabbrev , city , airportcode  | flights : sourceairport , destairport , flightno , airline ",
        "schema_with_content": "airlines : uid (1, 2, 5), abbreviation (\"JetBlue\", \"JetBlue\", \"Allegiant\"), airline (\"US Airways\", \"United Airlines\", \"JetBlue Airways\"), country (\"USA\") | airlines_airline : uid (2, 1, 7), airline (\"US Airways\", \"United Airlines\", \"JetBlue Airways\") | airports : airportname (\"Ainsworth \", \"Ashland \", \"Alpine \"), country (\"United States \"), countryabbrev (\"US \", \"US\"), city (\"Akhiok \", \"Alexandria \", \"Albert Lea \"), airportcode (\"ANB\", \"ALB\", \"NDV\") | flights : sourceairport (\" RFK\", \" ANC\", \" AST\"), destairport (\" AXB\", \" NDV\", \" ANQ\"), flightno (1064, 622, 839), airline (12, 12, 8)",
        "ambiguous_queries": [
            "select airline, abbreviation from airlines where country = 'USA'",
            "select t2.airline, t1.abbreviation from airlines as t1 join airlines_airline as t2 on t1.uid = t2.uid where t1.country = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"airline\": [{\"airlines\": [\"airline\"]}, {\"airlines_airline\": [\"airline\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airline\" refers to the schema \"airlines_airline\".\"airline\"",
        "clear_ambiguity": "{\"airline\": {\"airlines_airline\": [\"airline\"]}}",
        "gold_query": "select t2.airline, t1.abbreviation from airlines as t1 join airlines_airline as t2 on t1.uid = t2.uid where t1.country = 'USA'"
    },
    {
        "index": 414,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "schema_without_content": "city : name , district , population , countrycode , id  | sqlite_sequence : seq , name  | country : gnp , continent , governmentform , localname , code , gnpold , region , indepyear , population , capital , lifeexpectancy , surfacearea , name , headofstate , code2  | country_indepyear : code , indepyear  | countrylanguage : language , isofficial , percentage , countrycode ",
        "schema_with_content": "city : name (\"Tangshan\", \"Salvador\", \"Netanya\"), district (\"ValparaÃ­so\", \"Zytomyr\", \"Zufar\"), population (104200, 440052, 517083), countrycode (\"GIB\", \"ABW\", \"SMR\"), id (3836, 3892, 2641) | sqlite_sequence : seq (4079), name (\"city\") | country : gnp (818.0, 64140.0, 264478.0), continent (\"Oceania\", \"Antarctica\", \"Europe\"), governmentform (\"Socialistic Republic\", \"Part of Denmark\", \"Socialistic State\"), localname (\"United Kingdom\", \"Portugal\", \"Saint Lucia\"), code (\"GUF\", \"TTO\", \"CUB\"), gnpold (542.0, 173610.0, 96318.0), region (\"South America\", \"Eastern Europe\", \"Caribbean\"), indepyear (1992, 1923, 1905), population (11669000, 32300, 24039000), capital (2318, 1109, 3503), lifeexpectancy (65.5, 64.5, 40.4), surfacearea (1075.0, 41526.0, 118484.0), name (\"Cameroon\", \"Japan\", \"Gibraltar\"), headofstate (\"Gyanendra Bir Bikram\", \"Aljaksandr LukaÅ¡enka\", \"Daniel arap Moi\"), code2 (\"SC\", \"WS\", \"EH\") | country_indepyear : code (\"REU\", \"SGS\", \"MSR\"), indepyear (1992, 1923, 1905) | countrylanguage : language (\"Khmer\", \"Fur\", \"Bilin\"), isofficial (\"T\", \"F\"), percentage (95.9, 32.0, 2.6), countrycode (\"TTO\", \"RUS\", \"PAN\")",
        "ambiguous_queries": [
            "select name, surfacearea, indepyear from country order by population limit 1",
            "select t1.name, t1.surfacearea, t2.indepyear from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"year of independence\": [{\"country\": [\"indepyear\"]}, {\"country_indepyear\": [\"indepyear\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year of independence\" refers to the schema \"country_indepyear\".\"indepyear\"",
        "clear_ambiguity": "{\"year of independence\": {\"country_indepyear\": [\"indepyear\"]}}",
        "gold_query": "select t1.name, t1.surfacearea, t2.indepyear from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "index": 415,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "schema_without_content": "tv_channel : hight_definition_tv , country , content , id , language , package_option , series_name , pay_per_view_ppv , pixel_aspect_ratio_par  | tv_series : rating , weekly_rank , channel , id , episode , air_date , viewers_m , 18_49_rating_share , share  | tv_series_episode : episode , id  | cartoon : original_air_date , production_code , directed_by , channel , id , written_by , title ",
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), id (\"728\", \"703\", \"714\"), language (\"Italian\", \"English\"), package_option (\"Option\", \"Sky Famiglia + Sky HD\", \"Option\"), series_name (\"MTV Rocks\", \"myDeejay\", \"MTV Live HD\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | tv_series : rating (\"3.7\", \"3.5\", \"4.3\"), weekly_rank (61.0, 43.0, 68.0), channel (\"708\", \"717\", \"713\"), id (11.0, 9.0, 10.0), episode (\"Winterland\", \"A Love of a Lifetime\", \"The Hanged Man\"), air_date (\"October 15, 2007\", \"October 8, 2007\", \"September 24, 2007\"), viewers_m (\"9.16\", \"4.24\", \"5.61\"), 18_49_rating_share (\"2.9/7\", \"2.9/7\", \"2.7/7\"), share (9.0, 6.0, 5.0) | tv_series_episode : episode (\"Winterland\", \"A Love of a Lifetime\", \"The Hanged Man\"), id (10.0, 3.0, 8.0) | cartoon : original_air_date (\"February20,2009\", \"January23,2009\", \"January30,2009\"), production_code (108.0, 107.0, 102.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"728\", \"704\", \"706\"), id (2.0, 1.0, 1.0), written_by (\"Matt Wayne\", \"Steven Melching\", \"J. M. DeMatteis\"), title (\"Terror on Dinosaur Island!\", \"Evil Under the Sea!\", \"Deep Cover for Batman!\")",
        "ambiguous_queries": [
            "select episode, rating from tv_series order by rating desc limit 3",
            "select t2.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3"
        ],
        "gold_ambiguity": {
            "match": "{\"Episode\": [{\"tv_series\": [\"episode\"]}, {\"tv_series_episode\": [\"episode\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Episode\" refers to the schema \"tv_series_episode\".\"episode\"",
        "clear_ambiguity": "{\"Episode\": {\"tv_series_episode\": [\"episode\"]}}",
        "gold_query": "select t2.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3"
    },
    {
        "index": 416,
        "db_id": "network_1",
        "ambig_type": "join",
        "db_file": "join/network_1/network_1.sqlite",
        "question": "What are the names and grades for each high schooler?",
        "schema_without_content": "highschooler : grade , name , id  | highschooler_grade : id , grade  | friend : friend_id , student_id  | likes : student_id , liked_id ",
        "schema_with_content": "highschooler : grade (10, 11, 12), name (\"Logan\", \"Andrew\", \"Logan\"), id (1501, 1101, 1934) | highschooler_grade : id (1247, 1911, 1247), grade (10, 11, 12) | friend : friend_id (1641, 1934, 1304), student_id (1911, 1689, 1782) | likes : student_id (1934, 1641, 1247), liked_id (1247, 1304, 1501)",
        "ambiguous_queries": [
            "select name, grade from highschooler",
            "select t1.name, t2.grade from highschooler as t1 join highschooler_grade as t2 on t1.id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"grades\": [{\"highschooler\": [\"grade\"]}, {\"highschooler_grade\": [\"grade\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"grades\" refers to the schema \"highschooler\".\"grade\"",
        "clear_ambiguity": "{\"grades\": {\"highschooler\": [\"grade\"]}}",
        "gold_query": "select name, grade from highschooler"
    },
    {
        "index": 417,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , state , home_phone , email_address , owner_id , street , first_name , zip_code , last_name , cell_number  | dogs : owner_id , date_arrived , date_departed , name , abandoned_yn , date_of_birth , age , size_code , dog_id , weight , date_adopted , gender , breed_code  | dogs_age : age , dog_id  | professionals : role_code , city , first_name , email_address , street , professional_id , last_name , zip_code , state , cell_number , home_phone 1132733868\", \"325-155-0801x7005\" | treatments : professional_id , treatment_id , treatment_type_code , dog_id , date_of_treatment , cost_of_treatment ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"Beerton\", \"East Hillardberg\", \"Beerton\"), state (\"Wisconsin\", \"Vermont\", \"Arizona\"), home_phone (\"085.557.0379x84348\", \"1-332-849-1908\", \"066.264.7885\"), email_address (\"edythe62@example.org\", \"hudson.favian@example.com\", \"hudson.favian@example.com\"), owner_id (9, 6, 4), street (\"15828 Spencer Extensions\", \"1858 Jan Park\", \"51934 Treutel Harbor\"), first_name (\"Adelle\", \"Adelle\", \"Jaclyn\"), zip_code (\"22731\", \"36871\", \"92406\"), last_name (\"Rippin\", \"Fisher\", \"Stoltenberg\"), cell_number (\"121.381.3316x6535\", \"1-626-264-7659x1697\", \"481-483-9083x37986\") | dogs : owner_id (11, 11, 12), date_arrived (\"2018-01-17 11:44:16\", \"2017-05-06 08:03:52\", \"2017-10-24 04:45:13\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 02:47:40\", \"2018-03-25 02:11:32\"), name (\"Hipolito\", \"Jesus\", \"Merritt\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2008-05-30 12:51:34\", \"2012-01-27 05:11:53\", \"2008-05-30 12:51:34\"), age (\"1\", \"9\", \"4\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (7, 7, 4), weight (\"8.95\", \"7.57\", \"4.01\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-02-25 23:45:30\", \"2018-03-23 16:02:04\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\") | dogs_age : age (\"1\", \"9\", \"4\"), dog_id (11, 12, 12) | professionals : role_code (\"Employee\", \"Veterenarian\"), city (\"Borisside\", \"New Laurytown\", \"South Rockyport\"), first_name (\"Winfield\", \"Domenica\", \"Vernice\"), email_address (\"marquardt.furman@example.org\", \"jerrod.bahringer@example.org\", \"goyette.roosevelt@example.net\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), professional_id (11, 6, 7), last_name (\"Pouros\", \"Murazik\", \"Frami\"), zip_code (\"77129\", \"33020\", \"54312\"), state (\"California\", \"NewMexico\", \"Wyoming\"), cell_number (\"461-801-2600\", \"1-258-285-4707x8020\", \"00230569697\"), home_phone (\"325-155-0801x7005\", \"+43(5)1132733868\", \"325-155-0801x7005\") | treatments : professional_id (9, 14, 8), treatment_id (13, 2, 1), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (12, 15, 2), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\", \"2018-02-26 09:08:53\"), cost_of_treatment (681, 429, 514)",
        "ambiguous_queries": [
            "select name, age, weight from dogs where abandoned_yn = 1",
            "select t1.name, t2.age, t1.weight from dogs as t1 join dogs_age as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"dogs\": [\"age\"]}, {\"dogs_age\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"dogs\".\"age\"",
        "clear_ambiguity": "{\"age\": {\"dogs\": [\"age\"]}}",
        "gold_query": "select name, age, weight from dogs where abandoned_yn = 1"
    },
    {
        "index": 418,
        "db_id": "battle_death",
        "ambig_type": "join",
        "db_file": "join/battle_death/battle_death.sqlite",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "schema_without_content": "battle : result , id , name , date , bulgarian_commander , latin_commander  | ship : lost_in_battle , name , ship_type , id , tonnage , disposition_of_ship , location  | ship_name : name , id  | death : injured , id , note , caused_by_ship_id , killed ",
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), id (8, 6, 1), name (\"Siege of Constantinople\", \"Battle of Messinopolis\", \"Battle of Rodosto\"), date (\"June 1205\", \"1235\", \"June 1205\"), bulgarian_commander (\"Boril\", \"Ivan Asen II\", \"Unknown\"), latin_commander (\"Boniface of Montferrat\", \"Henry I\", \"John of Brienne\") | ship : lost_in_battle (7, 6, 7), name (\"Bon Accord\", \"Mary\", \"HMS Avon\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), id (4, 1, 1), tonnage (\"t\", \"391\", \"225\"), disposition_of_ship (\"Captured\", \"Wrecked\", \"Wrecked\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\") | ship_name : name (\"Bon Accord\", \"Mary\", \"HMS Avon\"), id (7, 5, 3) | death : injured (0, 9, 5), id (13, 9, 4), note (\"Sundargarh, Odisha\", \"Erraboru, Chhattisgarh\", \"WestMidnapore, West Bengal\"), caused_by_ship_id (6, 4, 4), killed (2, 14, 3)",
        "ambiguous_queries": [
            "select name, tonnage from ship order by name desc",
            "select t2.name, t1.tonnage from ship as t1 join ship_name as t2 on t1.id = t2.id order by t2.name desc"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"ship\": [\"name\"]}, {\"ship_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"ship_name\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"ship_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.tonnage from ship as t1 join ship_name as t2 on t1.id = t2.id order by t2.name desc"
    },
    {
        "index": 419,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "schema_without_content": "city : countrycode , id , population , name , district  | sqlite_sequence : name , seq  | country : surfacearea , lifeexpectancy , name , code , gnpold , code2 , continent , governmentform , indepyear , capital , region , headofstate , gnp , localname , population  | country_population : population , code  | countrylanguage : countrycode , language , isofficial , percentage ",
        "schema_with_content": "city : countrycode (\"NFK\", \"NGA\", \"KHM\"), id (672, 1247, 2078), population (665617, 155000, 165243), name (\"Bareilly\", \"Adamstown\", \"San Francisco de MacorÃ­s\"), district (\"Rabat-SalÃ©-Zammour-Z\", \"Mwanza\", \"Penza\") | sqlite_sequence : name (\"city\"), seq (4079) | country : surfacearea (1138914.0, 111369.0, 200.0), lifeexpectancy (78.9, 73.4, 69.2), name (\"Cameroon\", \"Andorra\", \"Turks and Caicos Islands\"), code (\"PNG\", \"UGA\", \"KGZ\"), gnpold (1084.0, 8670.0, 16153.0), code2 (\"SB\", \"BF\", \"VC\"), continent (\"Asia\", \"North America\", \"North America\"), governmentform (\"Parlementary Monarchy\", \"Co-administrated\", \"Federal Republic\"), indepyear (1769, 1878, 1906), capital (2698, 3225, 3333), region (\"Western Africa\", \"Caribbean\", \"Polynesia\"), headofstate (\"Gustavo Noboa Bejarano\", \"Yoweri Museveni\", \"Bakili Muluzi\"), gnp (8444.0, 681.0, 42168.0), localname (\"RÃ©publique DÃ©mocratique du Congo\", \"EspaÃ±a\", \"Tokelau\"), population (9997600, 15000, 3850000) | country_population : population (9997600, 15000, 3850000), code (\"SWE\", \"MYT\", \"CCK\") | countrylanguage : countrycode (\"KGZ\", \"COL\", \"BMU\"), language (\"Maguindanao\", \"QuichÃ©\", \"MahorÃ©\"), isofficial (\"T\", \"F\"), percentage (1.0, 4.7, 42.0)",
        "ambiguous_queries": [
            "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
            "select sum(t2.population), avg(t1.lifeexpectancy), t1.continent from country as t1 join country_population as t2 on t1.code = t2.code group by t1.continent having avg(t1.lifeexpectancy) < 72"
        ],
        "gold_ambiguity": {
            "match": "{\"popuation\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"popuation\" refers to the schema \"country_population\".\"population\"",
        "clear_ambiguity": "{\"popuation\": {\"country_population\": [\"population\"]}}",
        "gold_query": "select sum(t2.population), avg(t1.lifeexpectancy), t1.continent from country as t1 join country_population as t2 on t1.code = t2.code group by t1.continent having avg(t1.lifeexpectancy) < 72"
    },
    {
        "index": 420,
        "db_id": "car_1",
        "ambig_type": "join",
        "db_file": "join/car_1/car_1.sqlite",
        "question": "What is the average weight and year for each year?",
        "schema_without_content": "continents : continent , contid  | countries : countryid , continent , countryname  | car_makers : fullname , country , maker , id  | model_list : maker , modelid , model  | car_names : makeid , model , make  | cars_data : horsepower , cylinders , edispl , weight , accelerate , mpg , id , year  | cars_data_year : year , id ",
        "schema_with_content": "continents : continent (\"africa\", \"america\", \"africa\"), contid (1, 5, 1) | countries : countryid (6, 8, 11), continent (5, 5, 3), countryname (\"japan\", \"new zealand\", \"brazil\") | car_makers : fullname (\"Chrysler\", \"Opel\", \"Opel\"), country (\"2\", \"8\", \"6\"), maker (\"volvo\", \"peugeaut\", \"honda\"), id (4, 9, 6) | model_list : maker (6, 21, 3), modelid (11, 28, 30), model (\"saab\", \"datsun\", \"bmw\") | car_names : makeid (198, 312, 342), model (\"buick\", \"bmw\", \"saab\"), make (\"fiat 131\", \"dodge st. regis\", \"dodge coronet custom\") | cars_data : horsepower (\"140\", \"98\", \"116\"), cylinders (4, 8, 5), edispl (168.0, 79.0, 156.0), weight (4376, 4141, 4456), accelerate (17.3, 17.9, 14.8), mpg (\"25.4\", \"40.8\", \"27.2\"), id (60, 158, 212), year (1975, 1977, 1980) | cars_data_year : year (1975, 1977, 1980), id (265, 381, 385)",
        "ambiguous_queries": [
            "select avg(weight), year from cars_data group by year",
            "select avg(t1.weight), t2.year from cars_data as t1 join cars_data_year as t2 on t1.id = t2.id group by t2.year"
        ],
        "gold_ambiguity": {
            "match": "{\"year\": [{\"cars_data\": [\"year\"]}, {\"cars_data_year\": [\"year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year\" refers to the schema \"cars_data\".\"year\"",
        "clear_ambiguity": "{\"year\": {\"cars_data\": [\"year\"]}}",
        "gold_query": "select avg(weight), year from cars_data group by year"
    },
    {
        "index": 421,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "schema_without_content": "city : id , population , district , name , countrycode  | sqlite_sequence : seq , name  | country : localname , surfacearea , region , lifeexpectancy , population , code2 , headofstate , gnp , governmentform , continent , capital , gnpold , code , name , indepyear  | country_population : population , code  | countrylanguage : countrycode , percentage , language , isofficial ",
        "schema_with_content": "city : id (1167, 657, 3461), population (106409, 221400, 107004), district (\"Casablanca\", \"Gomel\", \"Xinxiang\"), name (\"Temuco\", \"Abakan\", \"Olmalik\"), countrycode (\"NPL\", \"YUG\", \"ARM\") | sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"Chile\", \"Brasil\", \"Amerika Samoa\"), surfacearea (323877.0, 298.0, 438317.0), region (\"Melanesia\", \"Southern and Central Asia\", \"Eastern Asia\"), lifeexpectancy (76.4, 68.1, 71.6), population (22720000, 1726000, 4473000), code2 (\"NF\", \"KN\", \"SJ\"), headofstate (\"Carlo Azeglio Ciampi\", \"Hans-Adam II\", \"Mary McAleese\"), gnp (8287.0, 903.0, 37966.0), governmentform (\"Constitutional Monarchy\", \"US Territory\", \"Dependent Territory of the UK\"), continent (\"Africa\", \"Europe\", \"Asia\"), capital (179, 3483, 901), gnpold (227757.0, 3384.0, 4192638.0), code (\"HKG\", \"PRT\", \"COG\"), name (\"Spain\", \"Uruguay\", \"Croatia\"), indepyear (1143, 1992, 1981) | country_population : population (22720000, 1726000, 4473000), code (\"PRI\", \"HND\", \"JAM\") | countrylanguage : countrycode (\"GRL\", \"GLP\", \"MTQ\"), percentage (77.1, 13.8, 43.9), language (\"Luhya\", \"Haiti Creole\", \"Nsenga\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select avg(gnp), sum(population) from country where governmentform = 'US Territory'",
            "select avg(t1.gnp), sum(t2.population) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform = 'US Territory'"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select avg(gnp), sum(population) from country where governmentform = 'US Territory'"
    },
    {
        "index": 422,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "join",
        "db_file": "join/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "schema_without_content": "employee : employee_id , name , age , city  | shop : location , number_products , manager_name , district , name , shop_id  | shop_manager_name : manager_name , shop_id  | hiring : employee_id , is_full_time , start_from , shop_id  | evaluation : year_awarded , bonus , employee_id ",
        "schema_with_content": "employee : employee_id (6, 3, 5), name (\"Jason Hobson\", \"Phil Vickery\", \"Louis Deacon\"), age (29, 23, 28), city (\"Wasps\", \"Bath\", \"Leicester\") | shop : location (\"Kuopio\", \"Kotka\", \"Jakobstad\"), number_products (6000, 10770, 10770), manager_name (\"Tommi Kautonen\", \"Ilkka MÃ¤kelÃ¤\", \"Mika Laurikainen\"), district (\"Finnair Stadium\", \"Magnum Areena\", \"Arto Tolsa Areena\"), name (\"FF Jaro\", \"FF Jaro\", \"HJK\"), shop_id (5, 4, 9) | shop_manager_name : manager_name (\"Tommi Kautonen\", \"Ilkka MÃ¤kelÃ¤\", \"Mika Laurikainen\"), shop_id (9, 3, 1) | hiring : employee_id (3, 6, 2), is_full_time (\"T\", \"F\"), start_from (\"2010\", \"2013\", \"2013\"), shop_id (8, 2, 4) | evaluation : year_awarded (\"2011\", \"2011\", \"2017\"), bonus (3200.0, 3200.0, 3000.0), employee_id (\"10\", \"4\", \"4\")",
        "ambiguous_queries": [
            "select manager_name, district from shop order by number_products desc limit 1",
            "select t2.manager_name, t1.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"manager name\": [{\"shop\": [\"manager_name\"]}, {\"shop_manager_name\": [\"manager_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"manager name\" refers to the schema \"shop\".\"manager_name\"",
        "clear_ambiguity": "{\"manager name\": {\"shop\": [\"manager_name\"]}}",
        "gold_query": "select manager_name, district from shop order by number_products desc limit 1"
    },
    {
        "index": 423,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , first_name , cell_number 9217952551\", state , home_phone , street , zip_code , last_name , city , email_address  | dogs : size_code , date_of_birth , dog_id , owner_id , breed_code , gender , date_departed , weight , name , date_arrived , abandoned_yn , age , date_adopted  | dogs_age : dog_id , age  | professionals : city , role_code , cell_number , street , last_name , first_name , professional_id , home_phone 338-3342x585\", \"246-951-0080x76716\", \"338-3342x585\", email_address , state , zip_code  | treatments : dog_id , professional_id , cost_of_treatment , date_of_treatment , treatment_type_code , treatment_id ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (2, 8, 4), first_name (\"Nora\", \"Orlando\", \"Emelie\"), cell_number (\"559.874.3011x989\", \"559.874.3011x989\", \"+70(4)9217952551\"), state (\"Florida\", \"NorthDakota\", \"SouthDakota\"), home_phone (\"318-052-6573\", \"363.948.1090\", \"066.264.7885\"), street (\"2635 Caitlyn Plains\", \"51934 Treutel Harbor\", \"2635 Caitlyn Plains\"), zip_code (\"61019\", \"36871\", \"22693\"), last_name (\"Nicolas\", \"Ondricka\", \"Prohaska\"), city (\"Barrettburgh\", \"Brakusfurt\", \"East Maribelbury\"), email_address (\"fschoen@example.net\", \"ykris@example.com\", \"edythe62@example.org\") | dogs : size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2008-05-30 12:51:34\", \"2017-09-19 05:39:09\", \"2012-01-27 05:11:53\"), dog_id (9, 11, 14), owner_id (8, 5, 1), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 15:05:16\", \"2018-03-25 02:47:40\", \"2018-03-25 04:42:14\"), weight (\"8.16\", \"9.48\", \"1.72\"), name (\"Holden\", \"George\", \"Evangeline\"), date_arrived (\"2017-04-20 00:58:55\", \"2018-01-17 11:44:16\", \"2017-12-22 05:02:02\"), abandoned_yn (\"1\", \"0\"), age (\"2\", \"6\", \"3\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-25 08:12:51\", \"2018-02-27 00:27:57\") | dogs_age : dog_id (3, 13, 9), age (\"2\", \"6\", \"3\") | professionals : city (\"North Adelberttown\", \"McLaughlinfort\", \"Jaceton\"), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"880-659-7577x736\", \"461-801-2600\", \"00230569697\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), last_name (\"Murazik\", \"Pouros\", \"Pouros\"), first_name (\"Sigurd\", \"Monte\", \"Karley\"), professional_id (6, 9, 9), home_phone (\"(230)338-3342x585\", \"246-951-0080x76716\", \"(230)338-3342x585\"), email_address (\"goyette.roosevelt@example.net\", \"lambert62@example.org\", \"lucile.shanahan@example.org\"), state (\"Indiana\", \"Hawaii\", \"NorthCarolina\"), zip_code (\"98844\", \"67980\", \"67980\") | treatments : dog_id (10, 10, 12), professional_id (6, 10, 14), cost_of_treatment (139, 139, 945), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-10 11:45:58\", \"2018-03-24 22:25:58\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (15, 11, 11)",
        "ambiguous_queries": [
            "select name, age, weight from dogs where abandoned_yn = 1",
            "select t1.name, t2.age, t1.weight from dogs as t1 join dogs_age as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"dogs\": [\"age\"]}, {\"dogs_age\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"dogs_age\".\"age\"",
        "clear_ambiguity": "{\"age\": {\"dogs_age\": [\"age\"]}}",
        "gold_query": "select t1.name, t2.age, t1.weight from dogs as t1 join dogs_age as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
    },
    {
        "index": 424,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_type_code , version_number , date_effective_to , template_id , template_details , date_effective_from  | documents : document_id , other_details , template_id , document_name , document_description  | documents_document_description : document_description , document_id  | paragraphs : paragraph_text , paragraph_id , document_id , other_details ",
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"CV\", \"PP\"), template_type_description (\"CV\", \"Advertisement\", \"CV\") | templates : template_type_code (\"PP\", \"BK\", \"CV\"), version_number (5, 8, 0), date_effective_to (\"1973-01-12 14:13:34\", \"1993-03-24 14:30:23\", \"1975-07-16 04:52:10\"), template_id (9, 20, 9), template_details (\"\"), date_effective_from (\"1986-12-09 14:51:36\", \"2003-06-05 04:03:45\", \"1979-12-24 10:28:16\") | documents : document_id (2394, 3830, 801801), other_details (None), template_id (10, 8, 6), document_name (\"Welcome to NY\", \"How to read a book\", \"How Google people work\"), document_description (\"z\", \"u\", \"u\") | documents_document_description : document_description (\"z\", \"u\", \"u\"), document_id (1, 651512, 76) | paragraphs : paragraph_text (\"UK\", \"Fiji\", \"Jersey\"), paragraph_id (510442723, 65, 7), document_id (16514113, 3, 16514113), other_details (None)",
        "ambiguous_queries": [
            "select document_id, document_name, document_description from documents",
            "select t1.document_id, t1.document_name, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id"
        ],
        "gold_ambiguity": {
            "match": "{\"document description\": [{\"documents\": [\"document_description\"]}, {\"documents_document_description\": [\"document_description\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"document description\" refers to the schema \"documents_document_description\".\"document_description\"",
        "clear_ambiguity": "{\"document description\": {\"documents_document_description\": [\"document_description\"]}}",
        "gold_query": "select t1.document_id, t1.document_name, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id"
    },
    {
        "index": 425,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "schema_without_content": "tv_channel : language , country , content , id , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , hight_definition_tv , package_option \" | tv_series : air_date , weekly_rank , episode , share , 18_49_rating_share , channel , id , rating , viewers_m  | tv_series_rating : id , rating  | cartoon : channel , directed_by , production_code , written_by , original_air_date , id , title ",
        "schema_with_content": "tv_channel : language (\"Italian\", \"English\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), id (\"719\", \"709\", \"706\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"MTV Dance\", \"Hip Hop TV\", \"Sky Radio\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia\", \"Option\", \"no ( FTV )\") | tv_series : air_date (\"October 8, 2007\", \"December 17, 2007\", \"October 22, 2007\"), weekly_rank (50.0, 65.0, 50.0), episode (\"Home By Another Way\", \"Game Three\", \"The Hanged Man\"), share (9.0, 6.0, 6.0), 18_49_rating_share (\"2.1/5\", \"2.2/6\", \"3.2/8\"), channel (\"714\", \"717\", \"707\"), id (4.0, 10.0, 7.0), rating (\"3.7\", \"3.5\", \"4.3\"), viewers_m (\"6.75\", \"5.13\", \"6.06\") | tv_series_rating : id (4.0, 3.0, 7.0), rating (\"3.7\", \"3.5\", \"4.3\") | cartoon : channel (\"705\", \"708\", \"707\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (108.0, 112.0, 105.0), written_by (\"Matt Wayne\", \"Steven Melching\", \"Matt Wayne\"), original_air_date (\"February27,2009\", \"November14,2008\", \"February27,2009\"), id (9.0, 5.0, 9.0), title (\"The Rise of the Blue Beetle!\", \"Journey to the Center of the Bat!\", \"Dawn of the Dead Man!\")",
        "ambiguous_queries": [
            "select episode, rating from tv_series order by rating desc limit 3",
            "select t1.episode, t2.rating from tv_series as t1 join tv_series_rating as t2 on t1.id = t2.id order by t2.rating desc limit 3"
        ],
        "gold_ambiguity": {
            "match": "{\"Rating\": [{\"tv_series\": [\"rating\"]}, {\"tv_series_rating\": [\"rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Rating\" refers to the schema \"tv_series\".\"rating\"",
        "clear_ambiguity": "{\"Rating\": {\"tv_series\": [\"rating\"]}}",
        "gold_query": "select episode, rating from tv_series order by rating desc limit 3"
    },
    {
        "index": 426,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "schema_without_content": "city : name , countrycode , population , district , id  | sqlite_sequence : seq , name  | country : indepyear , headofstate , capital , localname , continent , name , code2 , population , gnp , region , lifeexpectancy , code , governmentform , surfacearea , gnpold  | country_indepyear : code , indepyear  | countrylanguage : countrycode , percentage , language , isofficial ",
        "schema_with_content": "city : name (\"DivinÃ³polis\", \"Mandaluyong\", \"Brest\"), countrycode (\"PCN\", \"GTM\", \"DNK\"), population (514008, 124014, 1217818), district (\"Herson\", \"ValparaÃ­so\", \"Atyrau\"), id (2705, 771, 2317) | sqlite_sequence : seq (4079), name (\"city\") | country : indepyear (1861, 1947, 1983), headofstate (\"Denis Sassou-Nguesso\", \"Jorge SampÃ£io\", \"Fidel Castro Ruz\"), capital (3539, 594, 2460), localname (\"SÃ£o TomÃ© e PrÃ­ncipe\", \"PolynÃ©sie franÃ§aise\", \"Burundi/Uburundi\"), continent (\"North America\", \"Asia\", \"North America\"), name (\"Zimbabwe\", \"East Timor\", \"Martinique\"), code2 (\"PY\", \"VA\", \"SE\"), population (45611000, 3401200, 4629000), gnp (166448.0, 75921.0, 116729.0), region (\"Polynesia\", \"Middle East\", \"Central America\"), lifeexpectancy (76.9, 76.2, 77.1), code (\"TJK\", \"MLI\", \"TMP\"), governmentform (\"Nonmetropolitan Territory of France\", \"Republic\", \"Socialistic State\"), surfacearea (61.0, 283561.0, 1104300.0), gnpold (2201.0, 173610.0, 2141.0) | country_indepyear : code (\"FLK\", \"BMU\", \"CIV\"), indepyear (1861, 1947, 1983) | countrylanguage : countrycode (\"AIA\", \"MYT\", \"SGP\"), percentage (16.1, 78.8, 3.4), language (\"Busansi\", \"Rwanda\", \"Batakki\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select name, surfacearea, indepyear from country order by population limit 1",
            "select t1.name, t1.surfacearea, t2.indepyear from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"independence year\": [{\"country\": [\"indepyear\"]}, {\"country_indepyear\": [\"indepyear\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"independence year\" refers to the schema \"country_indepyear\".\"indepyear\"",
        "clear_ambiguity": "{\"independence year\": {\"country_indepyear\": [\"indepyear\"]}}",
        "gold_query": "select t1.name, t1.surfacearea, t2.indepyear from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "index": 427,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | charges_charge_amount : charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : zip_code , last_name , cell_number 768-5439x484\", \"768-5439x484\", \"+004323592985\", street , owner_id , city , home_phone 563-0260x454\", \"318-052-6573\", state , email_address , first_name  | dogs : weight , date_departed , breed_code , name , abandoned_yn , owner_id , dog_id , size_code , date_of_birth , date_arrived , date_adopted , age , gender  | professionals : cell_number 939-2435x80863\", \"1-258-285-4707x8020\", \"139-321-7313\", professional_id , role_code , first_name , street , home_phone , zip_code , email_address , last_name , city , state  | treatments : date_of_treatment , cost_of_treatment , dog_id , treatment_type_code , professional_id , treatment_id ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | charges_charge_amount : charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : zip_code (\"86010\", \"02647\", \"36871\"), last_name (\"Funk\", \"Haley\", \"Fisher\"), cell_number (\"(722)768-5439x484\", \"(722)768-5439x484\", \"+00(2)4323592985\"), street (\"1858 Jan Park\", \"1204 Mae Highway Apt. 107\", \"2417 Keara Stravenue Apt. 146\"), owner_id (15, 15, 15), city (\"Lake Valentin\", \"New Margaretteborough\", \"Lake Valentin\"), home_phone (\"893-862-5295x61709\", \"(799)563-0260x454\", \"318-052-6573\"), state (\"Mississippi\", \"Florida\", \"Arkansas\"), email_address (\"margaretta.runte@example.net\", \"lynn81@example.org\", \"ybergstrom@example.com\"), first_name (\"Nora\", \"Jaclyn\", \"Melisa\") | dogs : weight (\"5.16\", \"1.72\", \"8.96\"), date_departed (\"2018-03-24 19:12:22\", \"2018-03-25 06:29:10\", \"2018-03-25 05:07:47\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Bessie\", \"Betty\", \"Kacey\"), abandoned_yn (\"1\", \"0\"), owner_id (3, 1, 3), dog_id (3, 1, 5), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2012-05-31 08:01:36\", \"2012-07-11 17:15:10\", \"2010-11-11 07:11:53\"), date_arrived (\"2017-10-16 20:06:21\", \"2017-09-08 20:10:13\", \"2017-12-29 06:08:26\"), date_adopted (\"2018-02-27 00:27:57\", \"2018-03-13 12:47:15\", \"2018-03-13 12:47:15\"), age (\"5\", \"6\", \"9\"), gender (\"1\", \"0\") | professionals : cell_number (\"(275)939-2435x80863\", \"1-258-285-4707x8020\", \"139-321-7313\"), professional_id (7, 10, 11), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Karley\", \"Taryn\", \"Winfield\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), home_phone (\"022.529.0550x1319\", \"1-138-287-3775\", \"320-508-6023\"), zip_code (\"17902\", \"80775\", \"52476\"), email_address (\"marquardt.furman@example.org\", \"uboehm@example.org\", \"goyette.roosevelt@example.net\"), last_name (\"Christiansen\", \"Considine\", \"Christiansen\"), city (\"Juddton\", \"Baileymouth\", \"Baileymouth\"), state (\"Utah\", \"Connecticut\", \"Alabama\") | treatments : date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-15 19:10:02\", \"2018-03-01 04:14:46\"), cost_of_treatment (349, 313, 139), dog_id (15, 15, 7), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (9, 10, 4), treatment_id (14, 11, 2)",
        "ambiguous_queries": [
            "select charge_type, charge_amount from charges",
            "select t1.charge_type, t2.charge_amount from charges as t1 join charges_charge_amount as t2 on t1.charge_id = t2.charge_id"
        ],
        "gold_ambiguity": {
            "match": "{\"amount\": [{\"charges\": [\"charge_amount\"]}, {\"charges_charge_amount\": [\"charge_amount\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"amount\" refers to the schema \"charges_charge_amount\".\"charge_amount\"",
        "clear_ambiguity": "{\"amount\": {\"charges_charge_amount\": [\"charge_amount\"]}}",
        "gold_query": "select t1.charge_type, t2.charge_amount from charges as t1 join charges_charge_amount as t2 on t1.charge_id = t2.charge_id"
    },
    {
        "index": 428,
        "db_id": "battle_death",
        "ambig_type": "join",
        "db_file": "join/battle_death/battle_death.sqlite",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "schema_without_content": "battle : id , result , date , name , bulgarian_commander , latin_commander  | ship : location , id , disposition_of_ship , tonnage , ship_type , name , lost_in_battle  | ship_tonnage : id , tonnage  | death : note , caused_by_ship_id , injured , killed , id ",
        "schema_with_content": "battle : id (7, 8, 7), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), date (\"31 January 1206\", \"4 September 1207\", \"4 September 1207\"), name (\"Battle of Rusion\", \"Siege of Constantinople\", \"Siege of Constantinople\"), bulgarian_commander (\"Unknown\", \"Boril\", \"Kaloyan\"), latin_commander (\"Baldwin I\", \"Thierry de Termond\", \"Henry I\") | ship : location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), id (6, 3, 3), disposition_of_ship (\"Captured\", \"Captured\", \"Wrecked\"), tonnage (\"t\", \"391\", \"225\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), name (\"Mary\", \"HMS Atalanta\", \"Bacchus\"), lost_in_battle (4, 6, 4) | ship_tonnage : id (6, 1, 4), tonnage (\"t\", \"391\", \"225\") | death : note (\"Bokaro, Jharkhand\", \"Erraboru, Chhattisgarh\", \"Bastar, Chattisgarh\"), caused_by_ship_id (4, 5, 6), injured (0, 9, 5), killed (4, 29, 2), id (3, 10, 5)",
        "ambiguous_queries": [
            "select name, tonnage from ship order by name desc",
            "select t1.name, t2.tonnage from ship as t1 join ship_tonnage as t2 on t1.id = t2.id order by t1.name desc"
        ],
        "gold_ambiguity": {
            "match": "{\"tonnage\": [{\"ship\": [\"tonnage\"]}, {\"ship_tonnage\": [\"tonnage\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"tonnage\" refers to the schema \"ship_tonnage\".\"tonnage\"",
        "clear_ambiguity": "{\"tonnage\": {\"ship_tonnage\": [\"tonnage\"]}}",
        "gold_query": "select t1.name, t2.tonnage from ship as t1 join ship_tonnage as t2 on t1.id = t2.id order by t1.name desc"
    },
    {
        "index": 429,
        "db_id": "flight_2",
        "ambig_type": "join",
        "db_file": "join/flight_2/flight_2.sqlite",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "schema_without_content": "airlines : country , uid , airline , abbreviation  | airlines_abbreviation : uid , abbreviation  | airports : airportcode , airportname , city , country , countryabbrev  | flights : flightno , destairport , airline , sourceairport ",
        "schema_with_content": "airlines : country (\"USA\"), uid (2, 2, 12), airline (\"American Airlines\", \"Delta Airlines\", \"Delta Airlines\"), abbreviation (\"UAL\", \"Northwest\", \"Frontier\") | airlines_abbreviation : uid (9, 5, 6), abbreviation (\"UAL\", \"Northwest\", \"Frontier\") | airports : airportcode (\"AMN\", \"AGN\", \"AXX\"), airportname (\"Albuquerque International \", \"Amook \", \"Merrill Field \"), city (\" Alexander City AL  \", \"Arcata \", \"Aiken \"), country (\"United States \"), countryabbrev (\"US \", \"US\") | flights : flightno (1118, 740, 982), destairport (\" RLI\", \" AET\", \" MMI\"), airline (6, 7, 11), sourceairport (\" AKP\", \" OTS\", \" CAK\")",
        "ambiguous_queries": [
            "select airline, abbreviation from airlines where country = 'USA'",
            "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"abbreviations\": [{\"airlines\": [\"abbreviation\"]}, {\"airlines_abbreviation\": [\"abbreviation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"abbreviations\" refers to the schema \"airlines_abbreviation\".\"abbreviation\"",
        "clear_ambiguity": "{\"abbreviations\": {\"airlines_abbreviation\": [\"abbreviation\"]}}",
        "gold_query": "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'"
    },
    {
        "index": 430,
        "db_id": "course_teach",
        "ambig_type": "join",
        "db_file": "join/course_teach/course_teach.sqlite",
        "question": "What are the age and hometown of teachers?",
        "schema_without_content": "course : course_id , course , staring_date  | teacher : teacher_id , hometown , name , age  | teacher_age : teacher_id , age  | course_arrange : grade , teacher_id , course_id ",
        "schema_with_content": "course : course_id (2, 1, 4), course (\"French\", \"Health\", \"History\"), staring_date (\"11 May\", \"17 May\", \"10 May\") | teacher : teacher_id (1, 6, 7), hometown (\"Bolton County Borough\", \"Bolton County Borough\", \"Turton Urban District\"), name (\"Lucy Wong\", \"Vicente Carretero\", \"Gustaaf Deloor\"), age (\"32\", \"29\", \"26\") | teacher_age : teacher_id (1, 4, 1), age (\"32\", \"29\", \"26\") | course_arrange : grade (7, 7, 1), teacher_id (7, 2, 2), course_id (4, 5, 4)",
        "ambiguous_queries": [
            "select age, hometown from teacher",
            "select t2.age, t1.hometown from teacher as t1 join teacher_age as t2 on t1.teacher_id = t2.teacher_id"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"teacher\": [\"age\"]}, {\"teacher_age\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"teacher\".\"age\"",
        "clear_ambiguity": "{\"age\": {\"teacher\": [\"age\"]}}",
        "gold_query": "select age, hometown from teacher"
    },
    {
        "index": 431,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "schema_without_content": "student : stuid , sex , major , age , lname , fname , city_code , advisor  | has_pet : petid , stuid  | pets : pettype , weight , pet_age , petid  | pets_weight : petid , weight ",
        "schema_with_content": "student : stuid (1016, 1002, 1019), sex (\"F\", \"M\"), major (50, 600, 520), age (17, 20, 18), lname (\"Han\", \"Cheng\", \"Smith\"), fname (\"David\", \"Ian\", \"Linda\"), city_code (\"HOU\", \"DAL\", \"DAL\"), advisor (7134, 1121, 8741) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1), petid (2001, 2002, 2003) | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)",
        "ambiguous_queries": [
            "select pettype, weight from pets order by pet_age limit 1",
            "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid order by t1.pet_age limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"weigh\": [{\"pets\": [\"weight\"]}, {\"pets_weight\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weigh\" refers to the schema \"pets_weight\".\"weight\"",
        "clear_ambiguity": "{\"weigh\": {\"pets_weight\": [\"weight\"]}}",
        "gold_query": "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid order by t1.pet_age limit 1"
    },
    {
        "index": 432,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "schema_without_content": "stadium : capacity , stadium_id , lowest , name , average , highest , location  | stadium_capacity : capacity , stadium_id  | singer : song_release_year , age , name , is_male , song_name , country , singer_id  | concert : concert_id , year , concert_name , stadium_id , theme  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : capacity (3808, 4125, 3808), stadium_id (6, 9, 9), lowest (331, 400, 466), name (\"Bayview Stadium\", \"Stark's Park\", \"Glebe Park\"), average (638, 2106, 615), highest (1980, 2363, 780), location (\"Brechin City\", \"Alloa Athletic\", \"East Fife\") | stadium_capacity : capacity (3808, 4125, 3808), stadium_id (10, 6, 2) | singer : song_release_year (\"2003\", \"2014\", \"1992\"), age (52, 41, 41), name (\"Tribal King\", \"Timbaland\", \"John Nizinik\"), is_male (\"F\", \"T\"), song_name (\"You\", \"Love\", \"You\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (6, 5, 5) | concert : concert_id (5, 4, 5), year (\"2014\", \"2015\"), concert_name (\"Super bootcamp\", \"Week 1\", \"Week 2\"), stadium_id (\"9\", \"9\", \"7\"), theme (\"Party All Night\", \"Party All Night\", \"Party All Night\") | singer_in_concert : concert_id (1, 5, 4), singer_id (\"6\", \"2\", \"4\")",
        "ambiguous_queries": [
            "select name, capacity from stadium order by average desc limit 1",
            "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"capacity\": [{\"stadium\": [\"capacity\"]}, {\"stadium_capacity\": [\"capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"capacity\" refers to the schema \"stadium_capacity\".\"capacity\"",
        "clear_ambiguity": "{\"capacity\": {\"stadium_capacity\": [\"capacity\"]}}",
        "gold_query": "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
    },
    {
        "index": 433,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "schema_without_content": "city : population , countrycode , id , district , name  | sqlite_sequence : seq , name  | country : indepyear , name , region , gnpold , code , gnp , governmentform , localname , code2 , population , lifeexpectancy , capital , headofstate , surfacearea , continent  | country_population : population , code  | countrylanguage : isofficial , percentage , language , countrycode ",
        "schema_with_content": "city : population (118968, 103653, 1619115), countrycode (\"THA\", \"NZL\", \"ANT\"), id (2081, 364, 3957), district (\"Liguria\", \"West Java\", \"al-Bahr al-Ahmar\"), name (\"San NicolÃ¡s de los Garza\", \"Basirhat\", \"Muntinlupa\") | sqlite_sequence : seq (4079), name (\"city\") | country : indepyear (1816, 1901, 1066), name (\"Malta\", \"Saudi Arabia\", \"Brunei\"), region (\"Baltic Countries\", \"Middle East\", \"Central America\"), gnpold (206025.0, 31966.0, 10241.0), code (\"CYM\", \"UKR\", \"LBN\"), gnp (9.0, 64140.0, 372.0), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Special Administrative Region of China\", \"Administrated by the UN\"), localname (\"Mayotte\", \"Belarus\", \"Norfolk Island\"), code2 (\"BE\", \"SL\", \"TM\"), population (2500, 18827000, 6217000), lifeexpectancy (67.3, 52.4, 52.4), capital (3207, 902, 192), headofstate (\"JosÃ© Alexandre GusmÃ£o\", \"Mireya Elisa Moscoso RodrÃ­guez\", \"Festus G. Mogae\"), surfacearea (163265.0, 23200.0, 264.0), continent (\"North America\", \"Oceania\", \"South America\") | country_population : population (2500, 18827000, 6217000), code (\"BLZ\", \"MLI\", \"CCK\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (12.6, 32.1, 67.7), language (\"Papuan Languages\", \"Busansi\", \"Khmer\"), countrycode (\"GLP\", \"BGD\", \"GLP\")",
        "ambiguous_queries": [
            "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
            "select sum(t2.population), t1.governmentform from country as t1 join country_population as t2 on t1.code = t2.code group by t1.governmentform having avg(t1.lifeexpectancy) > 72"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72"
    },
    {
        "index": 434,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "schema_without_content": "city : district , population , name , id , countrycode  | sqlite_sequence : seq , name  | country : gnpold , headofstate , localname , indepyear , code , lifeexpectancy , continent , governmentform , population , surfacearea , region , gnp , code2 , name , capital  | country_surfacearea : code , surfacearea  | countrylanguage : percentage , isofficial , language , countrycode ",
        "schema_with_content": "city : district (\"Orjol\", \"Latium\", \"Jiangxi\"), population (205993, 342595, 524000), name (\"Nogales\", \"Samarinda\", \"Oakland\"), id (203, 3279, 3925), countrycode (\"CRI\", \"WSM\", \"MCO\") | sqlite_sequence : seq (4079), name (\"city\") | country : gnpold (146171.0, 170.0, 6884.0), headofstate (\"Khamtay Siphandone\", \"Hosni Mubarak\", \"kenraali Than Shwe\"), localname (\"Timor Timur\", \"Lubnan\", \"Hrvatska\"), indepyear (1811, 1958, 885), code (\"MEX\", \"KGZ\", \"GIB\"), lifeexpectancy (37.2, 52.3, 66.3), continent (\"North America\", \"North America\", \"Oceania\"), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Territorial Collectivity of France\", \"Dependent Territory of Norway\"), population (6782000, 15864000, 278357000), surfacearea (796095.0, 41284.0, 801590.0), region (\"Melanesia\", \"Southern Europe\", \"South America\"), gnp (137635.0, 6871.0, 11705.0), code2 (\"TG\", \"VE\", \"KN\"), name (\"Dominica\", \"Costa Rica\", \"Pakistan\"), capital (764, 2331, 2257) | country_surfacearea : code (\"SUR\", \"CAF\", \"AUT\"), surfacearea (796095.0, 41284.0, 801590.0) | countrylanguage : percentage (4.3, 22.7, 20.3), isofficial (\"T\", \"F\"), language (\"Punjabi\", \"Tamang\", \"Telugu\"), countrycode (\"UMI\", \"ERI\", \"SLE\")",
        "ambiguous_queries": [
            "select name, surfacearea from country order by surfacearea desc limit 5",
            "select t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t2.surfacearea desc limit 5"
        ],
        "gold_ambiguity": {
            "match": "{\"surface areas\": [{\"country\": [\"surfacearea\"]}, {\"country_surfacearea\": [\"surfacearea\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"surface areas\" refers to the schema \"country\".\"surfacearea\"",
        "clear_ambiguity": "{\"surface areas\": {\"country\": [\"surfacearea\"]}}",
        "gold_query": "select name, surfacearea from country order by surfacearea desc limit 5"
    },
    {
        "index": 435,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "schema_without_content": "city : name , id , district , countrycode , population  | sqlite_sequence : seq , name  | country : code2 , gnp , capital , population , region , governmentform \", \"Parlementary Monarchy\", \"Dependent Territory of the US\", headofstate , name , code , gnpold , localname , indepyear , lifeexpectancy , surfacearea , continent  | country_continent : code , continent  | countrylanguage : language , countrycode , isofficial , percentage ",
        "schema_with_content": "city : name (\"Gaya\", \"Angren\", \"Ise\"), id (43, 2980, 1463), district (\"Moskova\", \"Bangui\", \"Pahang\"), countrycode (\"TKM\", \"NAM\", \"BHS\"), population (98667, 90289, 273140) | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"BO\", \"BB\", \"EE\"), gnp (1626.0, 1990.0, 42168.0), capital (2509, 919, 3332), population (6276000, 293000, 25000), region (\"North America\", \"Western Africa\", \"British Islands\"), governmentform (\"Constitutional Monarchy (Emirate)\", \"Parlementary Monarchy\", \"Dependent Territory of the US\"), headofstate (\"Abdelaziz Bouteflika\", \"Kim Dae-jung\", \"Thomas Klestil\"), name (\"Romania\", \"Colombia\", \"Taiwan\"), code (\"CIV\", \"ZAF\", \"VNM\"), gnpold (1872.0, 170.0, 1186.0), localname (\"Liechtenstein\", \"Sakartvelo\", \"Burundi/Uburundi\"), indepyear (1992, 885, 843), lifeexpectancy (74.9, 77.6, 54.9), surfacearea (1246700.0, 6257.0, 446550.0), continent (\"Oceania\", \"North America\", \"Asia\") | country_continent : code (\"ALB\", \"KAZ\", \"MTQ\"), continent (\"Oceania\", \"North America\", \"Asia\") | countrylanguage : language (\"Gujarati\", \"Susu\", \"Oromo\"), countrycode (\"BLR\", \"DZA\", \"PAK\"), isofficial (\"T\", \"F\"), percentage (17.3, 14.0, 17.1)",
        "ambiguous_queries": [
            "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
            "select sum(t1.population), avg(t1.lifeexpectancy), t2.continent from country as t1 join country_continent as t2 on t1.code = t2.code group by t2.continent having avg(t1.lifeexpectancy) < 72"
        ],
        "gold_ambiguity": {
            "match": "{\"continents\": [{\"country\": [\"continent\"]}, {\"country_continent\": [\"continent\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"continents\" refers to the schema \"country\".\"continent\"",
        "clear_ambiguity": "{\"continents\": {\"country\": [\"continent\"]}}",
        "gold_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72"
    },
    {
        "index": 436,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the region and population of Angola?",
        "schema_without_content": "city : name , district , id , population , countrycode  | sqlite_sequence : seq , name  | country : indepyear , gnp , headofstate , localname , lifeexpectancy , governmentform , capital , code2 , surfacearea , name , region , population , continent , gnpold , code  | country_population : population , code  | countrylanguage : percentage , countrycode , language , isofficial ",
        "schema_with_content": "city : name (\"Tallahassee\", \"Cairns\", \"Panabo\"), district (\"Qyzylorda\", \"Pultava\", \"Rarotonga\"), id (3157, 122, 789), population (1357000, 110034, 167183), countrycode (\"HND\", \"ALB\", \"CZE\") | sqlite_sequence : seq (4079), name (\"city\") | country : indepyear (1867, 1965, 1955), gnp (870.0, 174099.0, 4251.0), headofstate (\"Mohammed VI\", \"Hosni Mubarak\", \"AndrÃ©s Pastrana Arango\"), localname (\"YeItyopÂ´iya\", \"TÃ¼rkiye\", \"BouvetÃ¸ya\"), lifeexpectancy (40.4, 73.8, 73.1), governmentform (\"Socialistic State\", \"Autonomous Area\", \"Co-administrated\"), capital (645, 2447, 201), code2 (\"CM\", \"JM\", \"BM\"), surfacearea (824292.0, 27750.0, 61.0), name (\"Panama\", \"Japan\", \"Antigua and Barbuda\"), region (\"Southern and Central Asia\", \"British Islands\", \"Southern Europe\"), population (50, 180000, 7734000), continent (\"Asia\", \"Asia\", \"North America\"), gnpold (22834.0, 34843.0, 206025.0), code (\"PRT\", \"YUG\", \"ABW\") | country_population : population (50, 180000, 7734000), code (\"LBR\", \"CZE\", \"CYP\") | countrylanguage : percentage (4.4, 50.0, 7.9), countrycode (\"NLD\", \"BGR\", \"DZA\"), language (\"Malay\", \"Bajan\", \"Lezgian\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select population, region from country where name = 'Angola'",
            "select t2.population, t1.region from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Angola'"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country_population\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country_population\": [\"population\"]}}",
        "gold_query": "select t2.population, t1.region from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Angola'"
    },
    {
        "index": 437,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "schema_without_content": "stadium : stadium_id , highest , name , average , lowest , location , capacity  | singer : is_male , song_release_year , name , country , singer_id , song_name , age  | singer_song_name : singer_id , song_name  | concert : year , theme , concert_name , stadium_id , concert_id  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : stadium_id (6, 6, 10), highest (1057, 1057, 1057), name (\"Gayfield Park\", \"Balmoor\", \"Bayview Stadium\"), average (1477, 1477, 615), lowest (466, 533, 400), location (\"Arbroath\", \"East Fife\", \"Alloa Athletic\"), capacity (3808, 4000, 4000) | singer : is_male (\"F\", \"T\"), song_release_year (\"2008\", \"1992\", \"2008\"), name (\"Joe Sharp\", \"Tribal King\", \"Rose White\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (5, 3, 2), song_name (\"You\", \"Dangerous\", \"Gentleman\"), age (32, 41, 25) | singer_song_name : singer_id (2, 2, 2), song_name (\"You\", \"Dangerous\", \"Gentleman\") | concert : year (\"2014\", \"2015\"), theme (\"Free choice\", \"Free choice\", \"Free choice\"), concert_name (\"Week 2\", \"Week 1\", \"Auditions\"), stadium_id (\"9\", \"10\", \"10\"), concert_id (6, 5, 2) | singer_in_concert : concert_id (4, 2, 1), singer_id (\"2\", \"4\", \"5\")",
        "ambiguous_queries": [
            "select song_name, song_release_year from singer order by age limit 1",
            "select t2.song_name, t1.song_release_year from singer as t1 join singer_song_name as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"singer\": [\"song_name\"]}, {\"singer_song_name\": [\"song_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"singer\".\"song_name\"",
        "clear_ambiguity": "{\"name\": {\"singer\": [\"song_name\"]}}",
        "gold_query": "select song_name, song_release_year from singer order by age limit 1"
    },
    {
        "index": 438,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : home_phone 997-7627\", \"997-7627\", city , last_name , zip_code , email_address , cell_number 271-6744x4507\", \"341.667.8085\", \"+004323592985\", street , first_name , owner_id , state  | dogs : date_arrived , date_adopted , gender , owner_id , weight , date_departed , date_of_birth , name , size_code , abandoned_yn , age , dog_id , breed_code  | dogs_date_departed : date_departed , dog_id  | professionals : zip_code , email_address , state , home_phone 2898266914\", first_name , cell_number 939-2435x80863\", street , city , last_name , role_code , professional_id  | treatments : dog_id , cost_of_treatment , date_of_treatment , treatment_id , professional_id , treatment_type_code ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : home_phone (\"085.557.0379x84348\", \"(058)997-7627\", \"(058)997-7627\"), city (\"East Maribelbury\", \"Brakusfurt\", \"East Maribelbury\"), last_name (\"Nicolas\", \"Hauck\", \"Fisher\"), zip_code (\"36871\", \"02647\", \"86010\"), email_address (\"hudson.favian@example.com\", \"christy49@example.org\", \"wpfeffer@example.net\"), cell_number (\"(783)271-6744x4507\", \"341.667.8085\", \"+00(2)4323592985\"), street (\"15828 Spencer Extensions\", \"0647 Hintz Village Apt. 024\", \"60352 Kayleigh Crossing Suite 700\"), first_name (\"Lorenz\", \"Orlando\", \"Rachelle\"), owner_id (12, 1, 1), state (\"Indiana\", \"Indiana\", \"Arkansas\") | dogs : date_arrived (\"2017-12-29 06:08:26\", \"2017-05-06 08:03:52\", \"2017-10-24 04:45:13\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-25 08:12:51\", \"2018-03-07 21:45:43\"), gender (\"1\", \"0\"), owner_id (8, 12, 2), weight (\"9.8\", \"3.52\", \"7.57\"), date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 04:50:22\", \"2018-03-25 05:07:47\"), date_of_birth (\"2013-02-13 05:15:21\", \"2012-01-27 05:11:53\", \"2015-02-26 21:31:22\"), name (\"Troy\", \"Kacey\", \"Merritt\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), age (\"5\", \"1\", \"2\"), dog_id (10, 7, 4), breed_code (\"ESK\", \"BUL\", \"HUS\") | dogs_date_departed : date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 04:50:22\", \"2018-03-25 05:07:47\"), dog_id (9, 5, 3) | professionals : zip_code (\"02281\", \"77129\", \"77129\"), email_address (\"cole.margarita@example.org\", \"jeichmann@example.com\", \"jacynthe.mclaughlin@example.net\"), state (\"Alabama\", \"NewMexico\", \"Connecticut\"), home_phone (\"320-508-6023\", \"971.048.3763x9404\", \"+71(6)2898266914\"), first_name (\"Taryn\", \"Jayson\", \"Ruben\"), cell_number (\"461-801-2600\", \"1-258-285-4707x8020\", \"(275)939-2435x80863\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), city (\"North Odellfurt\", \"North Adelberttown\", \"North Odellfurt\"), last_name (\"Hyatt\", \"Ullrich\", \"Pouros\"), role_code (\"Employee\", \"Veterenarian\"), professional_id (10, 8, 13) | treatments : dog_id (13, 12, 2), cost_of_treatment (852, 266, 429), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-02-28 17:09:43\", \"2018-03-15 20:25:34\"), treatment_id (9, 10, 12), professional_id (5, 5, 5), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "ambiguous_queries": [
            "select date_arrived, date_departed from dogs",
            "select t1.date_arrived, t2.date_departed from dogs as t1 join dogs_date_departed as t2 on t1.dog_id = t2.dog_id"
        ],
        "gold_ambiguity": {
            "match": "{\"departing date\": [{\"dogs\": [\"date_departed\"]}, {\"dogs_date_departed\": [\"date_departed\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"departing date\" refers to the schema \"dogs\".\"date_departed\"",
        "clear_ambiguity": "{\"departing date\": {\"dogs\": [\"date_departed\"]}}",
        "gold_query": "select date_arrived, date_departed from dogs"
    },
    {
        "index": 439,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "schema_without_content": "addresses : city , line_3 , line_2 , other_address_details , state_province_county , address_id , line_1 , country , zip_postcode  | courses : course_description , course_id , other_details , course_name  | departments : department_id , department_name , department_description , other_details  | degree_programs : department_id , degree_summary_description , degree_program_id , degree_summary_name , other_details  | sections : section_name , other_details , section_id , section_description , course_id  | semesters : other_details , semester_description , semester_id , semester_name  | students : first_name , ssn , last_name , student_id , email_address , date_left , other_student_details , date_first_registered , permanent_address_id , current_address_id , middle_name , cell_mobile_number 365-8405\", \"07661787471\" | students_middle_name : middle_name , student_id  | student_enrolment : student_enrolment_id , other_details , semester_id , degree_program_id , student_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : city (\"South Palma\", \"Port Elvisfurt\", \"Rutherfordtown\"), line_3 (None), line_2 (\"Suite 383\", \"Apt. 335\", \"Suite 239\"), other_address_details (None), state_province_county (\"Virginia\", \"WestVirginia\", \"WestVirginia\"), address_id (10, 6, 13), line_1 (\"9283 Schulist Falls Apt. 037\", \"9283 Schulist Falls Apt. 037\", \"3999 Aufderhar Ways Suite 593\"), country (\"Croatia\", \"Iceland\", \"Burundi\"), zip_postcode (\"839\", \"446\", \"386\") | courses : course_description (\"n\", \"w\", \"c\"), course_id (9, 1, 4), other_details (None), course_name (\"oop\", \"rs\", \"os\") | departments : department_id (11, 14, 15), department_name (\"dance\", \"biology\", \"geography\"), department_description (\"natus\", \"error\", \"ea\"), other_details (None) | degree_programs : department_id (4, 13, 12), degree_summary_description (\"architecto\", \"quam\", \"officiis\"), degree_program_id (4, 9, 6), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None) | sections : section_name (\"e\", \"f\", \"p\"), other_details (None), section_id (14, 9, 15), section_description (\"et\", \"doloremque\", \"voluptatem\"), course_id (5, 2, 4) | semesters : other_details (None), semester_description (\"c\", \"w\", \"g\"), semester_id (4, 15, 12), semester_name (\"spring 2019\", \"summer 2010\", \"summer 2010\") | students : first_name (\"Helga\", \"Timmothy\", \"Gregg\"), ssn (\"141072406\", \"156\", \"68095\"), last_name (\"Christiansen\", \"Weimann\", \"Carroll\"), student_id (7, 4, 10), email_address (\"swift.kolby@example.com\", \"jillian26@example.net\", \"baumbach.lucious@example.org\"), date_left (\"2007-08-02 04:12:58\", \"2007-08-02 04:12:58\", \"1990-09-01 05:03:27\"), other_student_details (\"non\", \"autem\", \"atque\"), date_first_registered (\"1971-02-05 07:28:23\", \"2004-12-24 12:36:46\", \"2009-09-25 00:14:25\"), permanent_address_id (5, 9, 11), current_address_id (12, 6, 7), middle_name (\"Alberta\", \"Judd\", \"Aaliyah\"), cell_mobile_number (\"07661787471\", \"(507)365-8405\", \"07661787471\") | students_middle_name : middle_name (\"Alberta\", \"Judd\", \"Aaliyah\"), student_id (13, 5, 15) | student_enrolment : student_enrolment_id (5, 10, 5), other_details (None), semester_id (4, 2, 1), degree_program_id (10, 4, 3), student_id (4, 4, 12) | student_enrolment_courses : student_enrolment_id (8, 4, 5), student_course_id (1, 9860, 1), course_id (14, 10, 8) | transcripts : other_details (None), transcript_id (3, 3, 7), transcript_date (\"1998-11-22 12:18:29\", \"1975-05-20 18:31:21\", \"1988-04-30 01:19:47\") | transcript_contents : student_course_id (70882679, 76, 45105806), transcript_id (12, 2, 15)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_left asc limit 1",
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"middle\": [{\"students\": [\"middle_name\"]}, {\"students_middle_name\": [\"middle_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"middle\" refers to the schema \"students\".\"middle_name\"",
        "clear_ambiguity": "{\"middle\": {\"students\": [\"middle_name\"]}}",
        "gold_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1"
    },
    {
        "index": 440,
        "db_id": "battle_death",
        "ambig_type": "join",
        "db_file": "join/battle_death/battle_death.sqlite",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "schema_without_content": "battle : result , bulgarian_commander , name , latin_commander , date , id  | battle_name : name , id  | ship : location , ship_type , tonnage , name , id , disposition_of_ship , lost_in_battle  | death : killed , injured , note , id , caused_by_ship_id ",
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), bulgarian_commander (\"Kaloyan\", \"Kaloyan\", \"Boril\"), name (\"Battle of Boruy\", \"Battle of Philippopolis\", \"Battle of Serres\"), latin_commander (\"Boniface of Montferrat\", \"Unknown\", \"Thierry de Termond\"), date (\"31 January 1206\", \"14 April 1205\", \"February 1206\"), id (7, 5, 7) | battle_name : name (\"Battle of Boruy\", \"Battle of Philippopolis\", \"Battle of Serres\"), id (5, 7, 5) | ship : location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), tonnage (\"t\", \"391\", \"225\"), name (\"Lettice\", \"HMS Avon\", \"Lettice\"), id (1, 7, 2), disposition_of_ship (\"Scuttled\", \"Wrecked\", \"Scuttled\"), lost_in_battle (8, 7, 5) | death : killed (3, 0, 25), injured (0, 9, 5), note (\"Erraboru, Chhattisgarh\", \"WestMidnapore, West Bengal\", \"Gajapati, Odisha\"), id (9, 6, 11), caused_by_ship_id (1, 6, 5)",
        "ambiguous_queries": [
            "select name, result from battle where bulgarian_commander != 'Boril'",
            "select t2.name, t1.result from battle as t1 join battle_name as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"battle\": [\"name\"]}, {\"battle_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"battle_name\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"battle_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.result from battle as t1 join battle_name as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'"
    },
    {
        "index": 441,
        "db_id": "singer",
        "ambig_type": "join",
        "db_file": "join/singer/singer.sqlite",
        "question": "What are the birth years and citizenships of the singers?",
        "schema_without_content": "singer : citizenship , birth_year , net_worth_millions , name , singer_id  | singer_birth_year : singer_id , birth_year  | song : sales , song_id , title \", singer_id , highest_position ",
        "schema_with_content": "singer : citizenship (\"Chile\", \"Chile\", \"United States\"), birth_year (1944.0, 1962.0, 1949.0), net_worth_millions (17.4, 17.8, 17.8), name (\"Christy Walton\", \"Abigail Johnson\", \"Liliane Bettencourt\"), singer_id (8, 8, 8) | singer_birth_year : singer_id (8, 6, 7), birth_year (1944.0, 1962.0, 1949.0) | song : sales (335000.0, 292000.0, 292000.0), song_id (2, 3, 2), title (\"Mysterious Girl\", \"Mysterious Girl\", \"F**k It (I Don't Want You Back)\"), singer_id (1, 6, 7), highest_position (1.0, 3.0)",
        "ambiguous_queries": [
            "select birth_year, citizenship from singer",
            "select t2.birth_year, t1.citizenship from singer as t1 join singer_birth_year as t2 on t1.singer_id = t2.singer_id"
        ],
        "gold_ambiguity": {
            "match": "{\"birth year\": [{\"singer\": [\"birth_year\"]}, {\"singer_birth_year\": [\"birth_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth year\" refers to the schema \"singer_birth_year\".\"birth_year\"",
        "clear_ambiguity": "{\"birth year\": {\"singer_birth_year\": [\"birth_year\"]}}",
        "gold_query": "select t2.birth_year, t1.citizenship from singer as t1 join singer_birth_year as t2 on t1.singer_id = t2.singer_id"
    },
    {
        "index": 442,
        "db_id": "voter_1",
        "ambig_type": "join",
        "db_file": "join/voter_1/voter_1.sqlite",
        "question": "What are the distinct states and create time of all votes?",
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_number , contestant_name  | votes : created , vote_id , state , contestant_number , phone_number  | votes_state : vote_id , state ",
        "schema_with_content": "area_code_state : area_code (424, 404, 857), state (\"CO\", \"LA\", \"IL\") | contestants : contestant_number (5, 7, 5), contestant_name (\"Alana Bregman\", \"Kelly Clauss\", \"Allie Rogalski\") | votes : created (\"2018-03-09 19:03:40\", \"2018-03-09 19:03:40\", \"2018-03-09 19:03:40\"), vote_id (2, 1, 2), state (\"NY\", \"CA\", \"NJ\n\"), contestant_number (2, 3, 5), phone_number (7182887233, 7182887233, 7148407040) | votes_state : vote_id (5, 3, 3), state (\"NY\", \"CA\", \"NJ\n\")",
        "ambiguous_queries": [
            "select distinct state, created from votes",
            "select distinct t2.state, t1.created from votes as t1 join votes_state as t2 on t1.vote_id = t2.vote_id"
        ],
        "gold_ambiguity": {
            "match": "{\"states\": [{\"votes\": [\"state\"]}, {\"votes_state\": [\"state\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"states\" refers to the schema \"votes_state\".\"state\"",
        "clear_ambiguity": "{\"states\": {\"votes_state\": [\"state\"]}}",
        "gold_query": "select distinct t2.state, t1.created from votes as t1 join votes_state as t2 on t1.vote_id = t2.vote_id"
    },
    {
        "index": 443,
        "db_id": "flight_2",
        "ambig_type": "join",
        "db_file": "join/flight_2/flight_2.sqlite",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "schema_without_content": "airlines : abbreviation , country , airline , uid  | airlines_abbreviation : abbreviation , uid  | airports : countryabbrev , city , country , airportname , airportcode  | flights : sourceairport , flightno , destairport , airline ",
        "schema_with_content": "airlines : abbreviation (\"Allegiant\", \"Allegiant\", \"Continental\"), country (\"USA\"), airline (\"United Airlines\", \"Allegiant Air\", \"Virgin America\"), uid (9, 6, 1) | airlines_abbreviation : abbreviation (\"Allegiant\", \"Allegiant\", \"Continental\"), uid (12, 6, 6) | airports : countryabbrev (\"US \", \"US\"), city (\"Arapahoe \", \"Akiak \", \"Aleneva \"), country (\"United States \"), airportname (\"Outagamie County \", \"Municipal \", \"Ohio University \"), airportcode (\"ANP\", \"ADT\", \"AKP\") | flights : sourceairport (\" LTS\", \" ANN\", \" HMN\"), flightno (888, 56, 711), destairport (\" APV\", \" AKO\", \" AKK\"), airline (2, 12, 8)",
        "ambiguous_queries": [
            "select airline, abbreviation from airlines where country = 'USA'",
            "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"abbreviations\": [{\"airlines\": [\"abbreviation\"]}, {\"airlines_abbreviation\": [\"abbreviation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"abbreviations\" refers to the schema \"airlines_abbreviation\".\"abbreviation\"",
        "clear_ambiguity": "{\"abbreviations\": {\"airlines_abbreviation\": [\"abbreviation\"]}}",
        "gold_query": "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'"
    },
    {
        "index": 444,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "Find the average and maximum age for each type of pet.",
        "schema_without_content": "student : age , fname , lname , advisor , sex , stuid , major , city_code  | has_pet : stuid , petid  | pets : weight , pettype , pet_age , petid  | pets_pet_age : petid , pet_age ",
        "schema_with_content": "student : age (19, 17, 16), fname (\"Dinesh\", \"William\", \"Stacy\"), lname (\"Davis\", \"Rugh\", \"Schwartz\"), advisor (1121, 2311, 8772), sex (\"F\", \"M\"), stuid (1025, 1016, 1018), major (520, 540, 550), city_code (\"PHL\", \"HKG\", \"CHI\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), petid (2001, 2002, 2003) | pets_pet_age : petid (2001, 2002, 2003), pet_age (3, 2, 1)",
        "ambiguous_queries": [
            "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
            "select avg(t2.pet_age), max(t2.pet_age), t1.pettype from pets as t1 join pets_pet_age as t2 on t1.petid = t2.petid group by t1.pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"pets\": [\"pet_age\"]}, {\"pets_pet_age\": [\"pet_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"pets_pet_age\".\"pet_age\"",
        "clear_ambiguity": "{\"age\": {\"pets_pet_age\": [\"pet_age\"]}}",
        "gold_query": "select avg(t2.pet_age), max(t2.pet_age), t1.pettype from pets as t1 join pets_pet_age as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "index": 445,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the first student to register?",
        "schema_without_content": "addresses : country , line_3 , state_province_county , line_1 , line_2 , city , zip_postcode , other_address_details , address_id  | courses : course_id , other_details , course_name , course_description  | departments : department_name , department_description , department_id , other_details  | degree_programs : department_id , degree_summary_description , other_details , degree_summary_name , degree_program_id  | sections : section_description , other_details , course_id , section_id , section_name  | semesters : semester_description , semester_id , semester_name , other_details  | students : email_address , last_name , first_name , middle_name , other_student_details , date_first_registered , ssn , date_left , current_address_id , permanent_address_id , student_id , cell_mobile_number  | students_first_name : student_id , first_name  | student_enrolment : semester_id , student_id , student_enrolment_id , degree_program_id , other_details  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : country (\"Saudi Arabia\", \"Norfolk Island\", \"Gabon\"), line_3 (None), state_province_county (\"Delaware\", \"Kansas\", \"Washington\"), line_1 (\"74046 Metz Walk Apt. 113\", \"202 Hessel Views Apt. 468\", \"492 Wilkinson Route\"), line_2 (\"Apt. 468\", \"Suite 239\", \"Suite 079\"), city (\"Prohaskafort\", \"Port Oceane\", \"New Clemensburgh\"), zip_postcode (\"068\", \"400\", \"541\"), other_address_details (None), address_id (6, 4, 10) | courses : course_id (14, 1, 10), other_details (None), course_name (\"cal\", \"nlp\", \"dl\"), course_description (\"n\", \"k\", \"l\") | departments : department_name (\"dance\", \"art\", \"drama\"), department_description (\"autem\", \"nisi\", \"nisi\"), department_id (6, 1, 3), other_details (None) | degree_programs : department_id (7, 13, 7), degree_summary_description (\"voluptas\", \"architecto\", \"et\"), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (9, 4, 12) | sections : section_description (\"ex\", \"non\", \"voluptas\"), other_details (None), course_id (2, 6, 5), section_id (7, 12, 10), section_name (\"j\", \"o\", \"b\") | semesters : semester_description (\"y\", \"w\", \"c\"), semester_id (2, 4, 12), semester_name (\"spring 2018\", \"spring 2019\", \"summer 2010\"), other_details (None) | students : email_address (\"jhuel@example.com\", \"mya88@example.org\", \"gracie29@example.com\"), last_name (\"Jaskolski\", \"Huel\", \"Rogahn\"), first_name (\"Deon\", \"Delaney\", \"Timmothy\"), middle_name (\"Cleve\", \"Violet\", \"Brooklyn\"), other_student_details (\"nesciunt\", \"autem\", \"qui\"), date_first_registered (\"1971-02-05 07:28:23\", \"1986-02-24 21:12:23\", \"1982-02-14 08:46:35\"), ssn (\"39\", \"3\", \"6274274\"), date_left (\"2016-04-09 12:27:04\", \"2007-08-02 04:12:58\", \"2007-03-31 09:53:19\"), current_address_id (14, 15, 2), permanent_address_id (11, 14, 9), student_id (7, 4, 1), cell_mobile_number (\"07661787471\", \"1-009-710-5151\", \"1-009-710-5151\") | students_first_name : student_id (3, 15, 11), first_name (\"Deon\", \"Delaney\", \"Timmothy\") | student_enrolment : semester_id (13, 2, 15), student_id (7, 4, 9), student_enrolment_id (13, 4, 8), degree_program_id (2, 5, 5), other_details (None) | student_enrolment_courses : course_id (10, 10, 3), student_enrolment_id (13, 9, 4), student_course_id (45105806, 0, 7) | transcripts : other_details (None), transcript_id (4, 11, 14), transcript_date (\"1984-01-18 23:07:07\", \"1986-07-12 07:27:29\", \"1985-08-21 09:32:39\") | transcript_contents : transcript_id (15, 12, 4), student_course_id (28982908, 70882679, 8)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
            "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first\": [{\"students\": [\"first_name\"]}, {\"students_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first\" refers to the schema \"students_first_name\".\"first_name\"",
        "clear_ambiguity": "{\"first\": {\"students_first_name\": [\"first_name\"]}}",
        "gold_query": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "index": 446,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : cell_number 9217952551\", \"399-3116\", \"762.589.6117x1328\", email_address , last_name , city , zip_code , street , home_phone , owner_id , state , first_name  | dogs : weight , date_of_birth , size_code , dog_id , name , age , breed_code , gender , abandoned_yn , date_departed , date_adopted , date_arrived , owner_id  | dogs_size_code : size_code , dog_id  | professionals : last_name , professional_id , role_code , street , state , cell_number , zip_code , city , first_name , email_address , home_phone  | treatments : cost_of_treatment , date_of_treatment , treatment_id , treatment_type_code , dog_id , professional_id ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : cell_number (\"+70(4)9217952551\", \"(257)399-3116\", \"762.589.6117x1328\"), email_address (\"christy49@example.org\", \"ymaggio@example.com\", \"lynn81@example.org\"), last_name (\"Fisher\", \"Hauck\", \"Fisher\"), city (\"East Maribelbury\", \"West Leonard\", \"Lake Valentin\"), zip_code (\"61019\", \"00589\", \"78297\"), street (\"2635 Caitlyn Plains\", \"68118 Daniel Row\", \"68118 Daniel Row\"), home_phone (\"1-332-849-1908\", \"1-346-655-5842x768\", \"916.976.9480x13851\"), owner_id (6, 11, 6), state (\"NewYork\", \"NorthDakota\", \"Vermont\"), first_name (\"Rachelle\", \"Heather\", \"Jaclyn\") | dogs : weight (\"6.92\", \"6.92\", \"3.52\"), date_of_birth (\"2010-11-11 07:11:53\", \"2008-05-30 12:51:34\", \"2018-03-17 04:05:12\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (5, 9, 5), name (\"Houston\", \"Jesus\", \"Holden\"), age (\"2\", \"4\", \"4\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 13:07:04\", \"2018-03-25 10:25:46\", \"2018-03-25 13:07:04\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-18 07:47:40\", \"2018-02-27 11:54:35\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-05-06 08:03:52\", \"2017-06-18 19:45:38\"), owner_id (2, 5, 7) | dogs_size_code : size_code (\"LGE\", \"MED\", \"SML\"), dog_id (13, 5, 13) | professionals : last_name (\"Considine\", \"Tillman\", \"Braun\"), professional_id (8, 3, 15), role_code (\"Employee\", \"Veterenarian\"), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), state (\"NorthCarolina\", \"SouthCarolina\", \"NorthCarolina\"), cell_number (\"962-983-8109x3509\", \"139-321-7313\", \"880-659-7577x736\"), zip_code (\"06646\", \"84515\", \"67980\"), city (\"Kirastad\", \"Borisside\", \"Kirastad\"), first_name (\"Lesly\", \"Winfield\", \"Sigurd\"), email_address (\"cole.margarita@example.org\", \"jacynthe.mclaughlin@example.net\", \"delphine29@example.com\"), home_phone (\"891.475.2256\", \"891.475.2256\", \"1-138-287-3775\") | treatments : cost_of_treatment (668, 681, 668), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-19 04:39:54\", \"2018-03-23 13:52:10\"), treatment_id (3, 7, 9), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (15, 14, 4), professional_id (14, 6, 7)",
        "ambiguous_queries": [
            "select distinct breed_code, size_code from dogs",
            "select distinct t1.breed_code, t2.size_code from dogs as t1 join dogs_size_code as t2 on t1.dog_id = t2.dog_id"
        ],
        "gold_ambiguity": {
            "match": "{\"size type\": [{\"dogs\": [\"size_code\"]}, {\"dogs_size_code\": [\"size_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"size type\" refers to the schema \"dogs_size_code\".\"size_code\"",
        "clear_ambiguity": "{\"size type\": {\"dogs_size_code\": [\"size_code\"]}}",
        "gold_query": "select distinct t1.breed_code, t2.size_code from dogs as t1 join dogs_size_code as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "index": 447,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "join",
        "db_file": "join/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "schema_without_content": "employee : city , employee_id , name , age  | shop : district , shop_id , location , name , number_products , manager_name  | shop_location : location , shop_id  | hiring : is_full_time , start_from , employee_id , shop_id  | evaluation : bonus , year_awarded , employee_id ",
        "schema_with_content": "employee : city (\"Sale\", \"Leicester\", \"Bristol\"), employee_id (6, 1, 9), name (\"Mark Regan\", \"Tim Payne\", \"Louis Deacon\"), age (28, 23, 32) | shop : district (\"Arto Tolsa Areena\", \"Veritas Stadion\", \"Veritas Stadion\"), shop_id (2, 6, 3), location (\"Lahti\", \"Kotka\", \"Helsinki\"), name (\"FC Haka\", \"FC Inter\", \"FC Honka\"), number_products (10000, 3500, 3500), manager_name (\"Mika Lehkosuo\", \"Olli Huttunen\", \"Job Dragtsma\") | shop_location : location (\"Lahti\", \"Kotka\", \"Helsinki\"), shop_id (9, 2, 7) | hiring : is_full_time (\"T\", \"F\"), start_from (\"2011\", \"2012\", \"2008\"), employee_id (1, 3, 7), shop_id (1, 4, 4) | evaluation : bonus (4000.0, 4000.0, 2900.0), year_awarded (\"2017\", \"2016\", \"2015\"), employee_id (\"10\", \"2\", \"7\")",
        "ambiguous_queries": [
            "select name, location, district from shop order by number_products desc",
            "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
        ],
        "gold_ambiguity": {
            "match": "{\"location\": [{\"shop\": [\"location\"]}, {\"shop_location\": [\"location\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"location\" refers to the schema \"shop\".\"location\"",
        "clear_ambiguity": "{\"location\": {\"shop\": [\"location\"]}}",
        "gold_query": "select name, location, district from shop order by number_products desc"
    },
    {
        "index": 448,
        "db_id": "flight_2",
        "ambig_type": "join",
        "db_file": "join/flight_2/flight_2.sqlite",
        "question": "Which city and country is the Alton airport at?",
        "schema_without_content": "airlines : abbreviation , country , uid , airline  | airports : city , airportname , country , airportcode , countryabbrev  | airports_city : city , airportcode  | flights : sourceairport , airline , destairport , flightno ",
        "schema_with_content": "airlines : abbreviation (\"Northwest\", \"Virgin\", \"Continental\"), country (\"USA\"), uid (4, 11, 4), airline (\"AirTran Airways\", \"Southwest Airlines\", \"Northwest Airlines\") | airports : city (\"Arlington Heights \", \" Alexander City AL  \", \"Allakaket \"), airportname (\"Phillips AAF \", \"Tri-State Steuben Cty \", \"Adak Island Ns \"), country (\"United States \"), airportcode (\"AKO\", \"KKI\", \"AMW\"), countryabbrev (\"US \", \"US\") | airports_city : city (\"Arlington Heights \", \" Alexander City AL  \", \"Allakaket \"), airportcode (\"ABR\", \"RFK\", \"APG\") | flights : sourceairport (\" TDW\", \" AIV\", \" ADR\"), airline (3, 12, 12), destairport (\" ANC\", \" ABY\", \" RFK\"), flightno (1376, 1041, 364)",
        "ambiguous_queries": [
            "select city, country from airports where airportname = 'Alton'",
            "select t2.city, t1.country from airports as t1 join airports_city as t2 on t1.airportcode = t2.airportcode where t1.airportname = 'Alton'"
        ],
        "gold_ambiguity": {
            "match": "{\"city\": [{\"airports\": [\"city\"]}, {\"airports_city\": [\"city\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"city\" refers to the schema \"airports_city\".\"city\"",
        "clear_ambiguity": "{\"city\": {\"airports_city\": [\"city\"]}}",
        "gold_query": "select t2.city, t1.country from airports as t1 join airports_city as t2 on t1.airportcode = t2.airportcode where t1.airportname = 'Alton'"
    },
    {
        "index": 449,
        "db_id": "poker_player",
        "ambig_type": "join",
        "db_file": "join/poker_player/poker_player.sqlite",
        "question": "List the final tables made and the best finishes of poker players.",
        "schema_without_content": "poker_player : best_finish , people_id , earnings , poker_player_id , money_rank , final_table_made  | poker_player_final_table_made : final_table_made , poker_player_id  | people : name , birth_date , height , nationality , people_id ",
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), people_id (7, 2, 6), earnings (142800.0, 189233.0, 142800.0), poker_player_id (4, 5, 5), money_rank (58.0, 68.0, 141.0), final_table_made (42.0, 21.0, 42.0) | poker_player_final_table_made : final_table_made (42.0, 21.0, 42.0), poker_player_id (2, 1, 1) | people : name (\"Aleksey Ostapenko\", \"Semen Poltavskiy\", \"Roman Bragin\"), birth_date (\"August 8, 1986\", \"July 14, 1983\", \"July 14, 1983\"), height (182.0, 196.0, 207.0), nationality (\"Russia\", \"Bulgaria\"), people_id (7, 5, 1)",
        "ambiguous_queries": [
            "select final_table_made, best_finish from poker_player",
            "select t2.final_table_made, t1.best_finish from poker_player as t1 join poker_player_final_table_made as t2 on t1.poker_player_id = t2.poker_player_id"
        ],
        "gold_ambiguity": {
            "match": "{\"final tables made\": [{\"poker_player\": [\"final_table_made\"]}, {\"poker_player_final_table_made\": [\"final_table_made\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"final tables made\" refers to the schema \"poker_player\".\"final_table_made\"",
        "clear_ambiguity": "{\"final tables made\": {\"poker_player\": [\"final_table_made\"]}}",
        "gold_query": "select final_table_made, best_finish from poker_player"
    },
    {
        "index": 450,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "schema_without_content": "stadium : stadium_id , average , name , lowest , capacity , location , highest  | stadium_name : name , stadium_id  | singer : song_name , is_male , singer_id , name , age , country , song_release_year  | concert : theme , year , stadium_id , concert_id , concert_name  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : stadium_id (9, 2, 2), average (642, 1477, 552), name (\"Bayview Stadium\", \"Hampden Park\", \"Glebe Park\"), lowest (533, 331, 331), capacity (2000, 4000, 11998), location (\"Raith Rovers\", \"Alloa Athletic\", \"Stirling Albion\"), highest (780, 1057, 2363) | stadium_name : name (\"Bayview Stadium\", \"Hampden Park\", \"Glebe Park\"), stadium_id (1, 1, 7) | singer : song_name (\"Hey Oh\", \"Sun\", \"Sun\"), is_male (\"F\", \"T\"), singer_id (5, 2, 5), name (\"Rose White\", \"John Nizinik\", \"John Nizinik\"), age (29, 52, 25), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2008\", \"2003\", \"2016\") | concert : theme (\"Bleeding Love\", \"Free choice\", \"Party All Night\"), year (\"2014\", \"2015\"), stadium_id (\"7\", \"10\", \"2\"), concert_id (2, 4, 5), concert_name (\"Super bootcamp\", \"Super bootcamp\", \"Week 1\") | singer_in_concert : concert_id (3, 3, 3), singer_id (\"2\", \"2\", \"6\")",
        "ambiguous_queries": [
            "select location, name from stadium where capacity between 5000 and 10000",
            "select t1.location, t2.name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"stadium\": [\"name\"]}, {\"stadium_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"stadium\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"stadium\": [\"name\"]}}",
        "gold_query": "select location, name from stadium where capacity between 5000 and 10000"
    },
    {
        "index": 451,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the population, name and leader of the country with the largest area?",
        "schema_without_content": "city : district , name \", id , countrycode , population  | sqlite_sequence : name , seq  | country : region , continent , gnp , headofstate , localname , gnpold , surfacearea , name , capital , code , lifeexpectancy , code2 , governmentform \", \"Nonmetropolitan Territory of New Zealand\", population , indepyear  | country_population : code , population  | countrylanguage : isofficial , countrycode , language , percentage ",
        "schema_with_content": "city : district (\"Gaziantep\", \"Podravska\", \"VÃ½chodnÃ­ Cechy\"), name (\"Uzgorod\", \"Nellore\", \"Sittwe (Akyab)\"), id (2471, 3174, 3861), countrycode (\"AUS\", \"BRA\", \"GMB\"), population (138020, 512880, 362773) | sqlite_sequence : name (\"city\"), seq (4079) | country : region (\"Micronesia\", \"Micronesia/Caribbean\", \"Eastern Africa\"), continent (\"Oceania\", \"Africa\", \"North America\"), gnp (1061.0, 24375.0, 17000.0), headofstate (\"Kessai Note\", \"kenraali Than Shwe\", \"Jiang Zemin\"), localname (\"Polska\", \"Ecuador\", \"Singapore/Singapura/Xinjiapo/Singapur\"), gnpold (2500.0, 7388.0, 15129.0), surfacearea (1267000.0, 110994.0, 1104300.0), name (\"Palestine\", \"Jordan\", \"Kiribati\"), capital (135, 1780, 916), code (\"GRD\", \"SDN\", \"POL\"), lifeexpectancy (37.2, 48.8, 60.2), code2 (\"IR\", \"PH\", \"TT\"), governmentform (\"Dependent Territory of the US\", \"Monarchy (Sultanate)\", \"Nonmetropolitan Territory of New Zealand\"), population (79832000, 293000, 6485000), indepyear (1955, 1906, 1066) | country_population : code (\"MAC\", \"AFG\", \"NFK\"), population (79832000, 293000, 6485000) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"COD\", \"VUT\", \"KGZ\"), language (\"Hehet\", \"Venda\", \"Uighur\"), percentage (50.8, 17.9, 2.6)",
        "ambiguous_queries": [
            "select name, population, headofstate from country order by surfacearea desc limit 1",
            "select t1.name, t2.population, t1.headofstate from country as t1 join country_population as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country_population\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country_population\": [\"population\"]}}",
        "gold_query": "select t1.name, t2.population, t1.headofstate from country as t1 join country_population as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
    },
    {
        "index": 452,
        "db_id": "flight_2",
        "ambig_type": "join",
        "db_file": "join/flight_2/flight_2.sqlite",
        "question": "Give the city and country for the Alton airport.",
        "schema_without_content": "airlines : uid , abbreviation , country , airline  | airports : country , countryabbrev , airportcode , airportname , city  | airports_city : airportcode , city  | flights : destairport , sourceairport , airline , flightno ",
        "schema_with_content": "airlines : uid (10, 5, 5), abbreviation (\"AirTran\", \"Delta\", \"USAir\"), country (\"USA\"), airline (\"Northwest Airlines\", \"Allegiant Air\", \"American Airlines\") | airports : country (\"United States \"), countryabbrev (\"US \", \"US\"), airportcode (\"AND\", \"APG\", \"ALN\"), airportname (\"Ada \", \"Alyeska \", \"Zahns \"), city (\"Amityville \", \"Ashley \", \"Andrews \") | airports_city : airportcode (\"AXN\", \"ASX\", \"AAF\"), city (\"Amityville \", \"Ashley \", \"Andrews \") | flights : destairport (\" ESF\", \" NDV\", \" AIK\"), sourceairport (\" ATS\", \" AKK\", \" NGZ\"), airline (3, 11, 1), flightno (681, 386, 479)",
        "ambiguous_queries": [
            "select city, country from airports where airportname = 'Alton'",
            "select t2.city, t1.country from airports as t1 join airports_city as t2 on t1.airportcode = t2.airportcode where t1.airportname = 'Alton'"
        ],
        "gold_ambiguity": {
            "match": "{\"city\": [{\"airports\": [\"city\"]}, {\"airports_city\": [\"city\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"city\" refers to the schema \"airports_city\".\"city\"",
        "clear_ambiguity": "{\"city\": {\"airports_city\": [\"city\"]}}",
        "gold_query": "select t2.city, t1.country from airports as t1 join airports_city as t2 on t1.airportcode = t2.airportcode where t1.airportname = 'Alton'"
    },
    {
        "index": 453,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "schema_without_content": "tv_channel : series_name , pixel_aspect_ratio_par , package_option \", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\", hight_definition_tv , content , pay_per_view_ppv , country , id , language  | tv_channel_package_option : id , package_option \", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\" | tv_series : channel , viewers_m , id , 18_49_rating_share , share , episode , rating , weekly_rank , air_date  | cartoon : title , directed_by , written_by , channel , production_code , id , original_air_date ",
        "schema_with_content": "tv_channel : series_name (\"MTV Live HD\", \"Match Music\", \"Classica\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"728\", \"709\", \"703\"), language (\"Italian\", \"English\") | tv_channel_package_option : id (\"705\", \"709\", \"719\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\") | tv_series : channel (\"708\", \"713\", \"708\"), viewers_m (\"5.75\", \"5.28\", \"5.61\"), id (4.0, 1.0, 10.0), 18_49_rating_share (\"2.2/6\", \"2.9/7\", \"2.1/5\"), share (9.0, 7.0, 6.0), episode (\"Blowback\", \"Game Three\", \"Game Three\"), rating (\"4.3\", \"5.3\", \"3.8\"), weekly_rank (67.0, 71.0, 43.0), air_date (\"October 22, 2007\", \"November 12, 2007\", \"October 29, 2007\") | cartoon : title (\"Enter the Outsiders!\", \"Journey to the Center of the Bat!\", \"Enter the Outsiders!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Joseph Kuhr\", \"James Krieg\", \"J. M. DeMatteis\"), channel (\"705\", \"707\", \"703\"), production_code (112.0, 107.0, 112.0), id (10.0, 6.0, 12.0), original_air_date (\"January23,2009\", \"January9,2009\", \"February6,2009\")",
        "ambiguous_queries": [
            "select package_option, series_name from tv_channel where hight_definition_tv = 'yes'",
            "select t2.package_option, t1.series_name from tv_channel as t1 join tv_channel_package_option as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'"
        ],
        "gold_ambiguity": {
            "match": "{\"package options\": [{\"tv_channel\": [\"package_option\"]}, {\"tv_channel_package_option\": [\"package_option\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"package options\" refers to the schema \"tv_channel_package_option\".\"package_option\"",
        "clear_ambiguity": "{\"package options\": {\"tv_channel_package_option\": [\"package_option\"]}}",
        "gold_query": "select t2.package_option, t1.series_name from tv_channel as t1 join tv_channel_package_option as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'"
    },
    {
        "index": 454,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "What is the average weight for each type of pet?",
        "schema_without_content": "student : lname , age , stuid , fname , city_code , major , advisor , sex  | has_pet : petid , stuid  | pets : petid , pettype , pet_age , weight  | pets_weight : weight , petid ",
        "schema_with_content": "student : lname (\"Nelson\", \"Rugh\", \"Smith\"), age (26, 19, 27), stuid (1009, 1029, 1031), fname (\"Susan\", \"Charles\", \"Arthur\"), city_code (\"NAR\", \"ROC\", \"PIT\"), major (550, 50, 600), advisor (1121, 8721, 2311), sex (\"F\", \"M\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3) | pets_weight : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select avg(weight), pettype from pets group by pettype",
            "select avg(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"pets\": [\"weight\"]}, {\"pets_weight\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"pets_weight\".\"weight\"",
        "clear_ambiguity": "{\"weight\": {\"pets_weight\": [\"weight\"]}}",
        "gold_query": "select avg(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "index": 455,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "Find the type and weight of the youngest pet.",
        "schema_without_content": "student : advisor , age , sex , major , lname , stuid , fname , city_code  | has_pet : stuid , petid  | pets : petid , pet_age , pettype , weight  | pets_pettype : pettype , petid ",
        "schema_with_content": "student : advisor (8918, 7723, 8772), age (18, 22, 22), sex (\"F\", \"M\"), major (540, 600, 540), lname (\"Kumar\", \"Lee\", \"Apap\"), stuid (1021, 1019, 1006), fname (\"Stacy\", \"William\", \"Ian\"), city_code (\"LON\", \"HOU\", \"NYC\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select pettype, weight from pets order by pet_age limit 1",
            "select t2.pettype, t1.weight from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid order by t1.pet_age limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"type\": [{\"pets\": [\"pettype\"]}, {\"pets_pettype\": [\"pettype\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type\" refers to the schema \"pets\".\"pettype\"",
        "clear_ambiguity": "{\"type\": {\"pets\": [\"pettype\"]}}",
        "gold_query": "select pettype, weight from pets order by pet_age limit 1"
    },
    {
        "index": 456,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "What are the email, cell phone and home phone of each professional?",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , cell_number , state , first_name , zip_code , owner_id , email_address , last_name , home_phone 997-7627\", \"318-052-6573\", city  | dogs : owner_id , gender , date_departed , name , age , date_of_birth , date_arrived , breed_code , dog_id , weight , date_adopted , size_code , abandoned_yn  | professionals : first_name , email_address , zip_code , street , home_phone , state , role_code , city , last_name , cell_number 908-7311x065\", \"00230569697\", \"011.193.9081x3186\", professional_id  | professionals_home_phone : home_phone , professional_id  | treatments : date_of_treatment , treatment_id , professional_id , cost_of_treatment , treatment_type_code , dog_id ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"59509 Mellie Mountain\", \"15828 Spencer Extensions\", \"2417 Keara Stravenue Apt. 146\"), cell_number (\"762.589.6117x1328\", \"762.589.6117x1328\", \"739-136-7202\"), state (\"Virginia\", \"Pennsylvania\", \"Wisconsin\"), first_name (\"Lorenz\", \"Emelie\", \"Adelle\"), zip_code (\"92406\", \"61019\", \"61019\"), owner_id (4, 5, 14), email_address (\"edythe62@example.org\", \"lynn81@example.org\", \"pearlie18@example.com\"), last_name (\"Ondricka\", \"Rippin\", \"Hamill\"), home_phone (\"1-332-849-1908\", \"(058)997-7627\", \"318-052-6573\"), city (\"Lake Valentin\", \"East Hillardberg\", \"Port Reannamouth\") | dogs : owner_id (8, 10, 5), gender (\"1\", \"0\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 05:07:47\", \"2018-03-25 13:07:04\"), name (\"Merritt\", \"Troy\", \"Jesus\"), age (\"9\", \"9\", \"4\"), date_of_birth (\"2008-05-19 15:54:49\", \"2012-01-27 05:11:53\", \"2013-02-20 14:50:56\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-06-25 10:14:05\", \"2017-04-15 09:25:31\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (12, 6, 1), weight (\"7.57\", \"8.16\", \"4.01\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-21 10:41:18\", \"2018-03-13 12:47:15\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\") | professionals : first_name (\"Danny\", \"Brady\", \"Taryn\"), email_address (\"lucile.shanahan@example.org\", \"cole.margarita@example.org\", \"marquardt.furman@example.org\"), zip_code (\"54312\", \"54312\", \"41215\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\"), home_phone (\"320-508-6023\", \"022.529.0550x1319\", \"971.048.3763x9404\"), state (\"Connecticut\", \"Alabama\", \"California\"), role_code (\"Employee\", \"Veterenarian\"), city (\"Jaceton\", \"East Ila\", \"New Laurytown\"), last_name (\"Christiansen\", \"Tillman\", \"Christiansen\"), cell_number (\"(369)908-7311x065\", \"00230569697\", \"011.193.9081x3186\"), professional_id (6, 12, 14) | professionals_home_phone : home_phone (\"320-508-6023\", \"022.529.0550x1319\", \"971.048.3763x9404\"), professional_id (10, 15, 12) | treatments : date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-24 22:25:58\", \"2018-03-13 12:22:58\"), treatment_id (1, 7, 7), professional_id (8, 9, 9), cost_of_treatment (428, 407, 514), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (14, 13, 15)",
        "ambiguous_queries": [
            "select email_address, cell_number, home_phone from professionals",
            "select t1.email_address, t1.cell_number, t2.home_phone from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id"
        ],
        "gold_ambiguity": {
            "match": "{\"cell phone\": [{\"professionals\": [\"home_phone\"]}, {\"professionals_home_phone\": [\"home_phone\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cell phone\" refers to the schema \"professionals\".\"home_phone\"",
        "clear_ambiguity": "{\"cell phone\": {\"professionals\": [\"home_phone\"]}}",
        "gold_query": "select email_address, cell_number, home_phone from professionals"
    },
    {
        "index": 457,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "what are all the addresses including line 1 and line 2?",
        "schema_without_content": "addresses : other_address_details , city , line_3 , zip_postcode , line_1 , address_id , state_province_county , country , line_2  | addresses_line_2 : address_id , line_2  | courses : course_id , course_description , other_details , course_name  | departments : department_id , department_description , department_name , other_details  | degree_programs : degree_program_id , other_details , degree_summary_description , degree_summary_name , department_id  | sections : section_id , section_description , section_name , course_id , other_details  | semesters : semester_id , semester_name , other_details , semester_description  | students : date_left , first_name , cell_mobile_number 889-8954x524\", \"365-8405\", \"889-8954x524\", middle_name , email_address , date_first_registered , last_name , student_id , other_student_details , ssn , current_address_id , permanent_address_id  | student_enrolment : semester_id , other_details , student_id , degree_program_id , student_enrolment_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : other_address_details (None), city (\"Goodwinhaven\", \"Port Oceane\", \"Port Oceane\"), line_3 (None), zip_postcode (\"669\", \"446\", \"446\"), line_1 (\"0643 Muller Vista\", \"858 Peggie Bypass Suite 212\", \"0643 Muller Vista\"), address_id (8, 3, 3), state_province_county (\"Arkansas\", \"Arkansas\", \"Florida\"), country (\"Gibraltar\", \"Gibraltar\", \"Gibraltar\"), line_2 (\"Apt. 388\", \"Apt. 370\", \"Apt. 583\") | addresses_line_2 : address_id (13, 4, 15), line_2 (\"Apt. 388\", \"Apt. 370\", \"Apt. 583\") | courses : course_id (8, 1, 11), course_description (\"c\", \"b\", \"c\"), other_details (None), course_name (\"nlp\", \"en\", \"fr\") | departments : department_id (14, 11, 10), department_description (\"doloribus\", \"error\", \"dolorem\"), department_name (\"art\", \"art\", \"history\"), other_details (None) | degree_programs : degree_program_id (3, 15, 9), other_details (None), degree_summary_description (\"cumque\", \"quam\", \"qui\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (15, 4, 15) | sections : section_id (14, 3, 5), section_description (\"quis\", \"facilis\", \"voluptatem\"), section_name (\"a\", \"j\", \"e\"), course_id (12, 10, 14), other_details (None) | semesters : semester_id (4, 12, 10), semester_name (\"winter 2010\", \"winter 2018\", \"spring 2014\"), other_details (None), semester_description (\"w\", \"m\", \"y\") | students : date_left (\"1997-11-16 08:54:33\", \"2007-03-31 09:53:19\", \"1971-05-17 19:28:49\"), first_name (\"Stanford\", \"Warren\", \"Helga\"), cell_mobile_number (\"(096)889-8954x524\", \"(507)365-8405\", \"(096)889-8954x524\"), middle_name (\"Osborne\", \"Brooklyn\", \"Vaughn\"), email_address (\"mya88@example.org\", \"baumbach.lucious@example.org\", \"dell43@example.net\"), date_first_registered (\"1976-10-26 02:33:06\", \"1989-05-24 23:31:29\", \"1971-02-05 07:28:23\"), last_name (\"Christiansen\", \"Mohr\", \"Carroll\"), student_id (15, 15, 1), other_student_details (\"rerum\", \"et\", \"quia\"), ssn (\"141072406\", \"3\", \"668\"), current_address_id (14, 2, 14), permanent_address_id (8, 5, 8) | student_enrolment : semester_id (5, 13, 15), other_details (None), student_id (6, 14, 6), degree_program_id (4, 9, 2), student_enrolment_id (2, 8, 10) | student_enrolment_courses : course_id (4, 14, 11), student_enrolment_id (10, 13, 6), student_course_id (83814225, 8, 28982908) | transcripts : other_details (None), transcript_id (7, 13, 9), transcript_date (\"1986-07-12 07:27:29\", \"2010-12-13 10:55:15\", \"1984-12-19 00:37:21\") | transcript_contents : student_course_id (76, 28982908, 96), transcript_id (6, 15, 2)",
        "ambiguous_queries": [
            "select line_1, line_2 from addresses",
            "select t1.line_1, t2.line_2 from addresses as t1 join addresses_line_2 as t2 on t1.address_id = t2.address_id"
        ],
        "gold_ambiguity": {
            "match": "{\"line 2\": [{\"addresses\": [\"line_2\"]}, {\"addresses_line_2\": [\"line_2\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"line 2\" refers to the schema \"addresses\".\"line_2\"",
        "clear_ambiguity": "{\"line 2\": {\"addresses\": [\"line_2\"]}}",
        "gold_query": "select line_1, line_2 from addresses"
    },
    {
        "index": 458,
        "db_id": "museum_visit",
        "ambig_type": "join",
        "db_file": "join/museum_visit/museum_visit.sqlite",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "schema_without_content": "museum : name , open_year , num_of_staff , museum_id  | museum_num_of_staff : museum_id , num_of_staff  | visitor : name , id , level_of_membership , age  | visit : visitor_id , total_spent , museum_id , num_of_ticket ",
        "schema_with_content": "museum : name (\"Plaza Museum\", \"Central City District Residential Museum\", \"Plaza Museum\"), open_year (\"2012\", \"2009\", \"2011\"), num_of_staff (12, 62, 62), museum_id (2, 5, 6) | museum_num_of_staff : museum_id (3, 4, 7), num_of_staff (12, 62, 62) | visitor : name (\"Guti Midfielder\", \"Rafael van der Vaart\", \"Rafael van der Vaart\"), id (4, 2, 1), level_of_membership (6, 5, 8), age (36, 35, 36) | visit : visitor_id (\"5\", \"3\", \"6\"), total_spent (209.98, 320.44, 320.44), museum_id (4, 4, 4), num_of_ticket (24, 3, 2)",
        "ambiguous_queries": [
            "select num_of_staff, open_year from museum where name = 'Plaza Museum'",
            "select t2.num_of_staff, t1.open_year from museum as t1 join museum_num_of_staff as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'"
        ],
        "gold_ambiguity": {
            "match": "{\"staff number\": [{\"museum\": [\"num_of_staff\"]}, {\"museum_num_of_staff\": [\"num_of_staff\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"staff number\" refers to the schema \"museum_num_of_staff\".\"num_of_staff\"",
        "clear_ambiguity": "{\"staff number\": {\"museum_num_of_staff\": [\"num_of_staff\"]}}",
        "gold_query": "select t2.num_of_staff, t1.open_year from museum as t1 join museum_num_of_staff as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'"
    },
    {
        "index": 459,
        "db_id": "course_teach",
        "ambig_type": "join",
        "db_file": "join/course_teach/course_teach.sqlite",
        "question": "What is the age and hometown of every teacher?",
        "schema_without_content": "course : course , staring_date , course_id  | teacher : name , age , teacher_id , hometown  | teacher_hometown : teacher_id , hometown  | course_arrange : grade , course_id , teacher_id ",
        "schema_with_content": "course : course (\"Science\", \"Music\", \"Music\"), staring_date (\"10 May\", \"15 May\", \"13 May\"), course_id (9, 4, 2) | teacher : name (\"Gustaaf Deloor\", \"John Deloor\", \"Joseph Huts\"), age (\"45\", \"26\", \"26\"), teacher_id (5, 5, 3), hometown (\"Bolton County Borough\", \"Horwich Urban District\", \"Bolton County Borough\") | teacher_hometown : teacher_id (2, 1, 3), hometown (\"Bolton County Borough\", \"Horwich Urban District\", \"Bolton County Borough\") | course_arrange : grade (5, 4, 1), course_id (3, 5, 3), teacher_id (2, 3, 7)",
        "ambiguous_queries": [
            "select age, hometown from teacher",
            "select t1.age, t2.hometown from teacher as t1 join teacher_hometown as t2 on t1.teacher_id = t2.teacher_id"
        ],
        "gold_ambiguity": {
            "match": "{\"hometown\": [{\"teacher\": [\"hometown\"]}, {\"teacher_hometown\": [\"hometown\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"hometown\" refers to the schema \"teacher_hometown\".\"hometown\"",
        "clear_ambiguity": "{\"hometown\": {\"teacher_hometown\": [\"hometown\"]}}",
        "gold_query": "select t1.age, t2.hometown from teacher as t1 join teacher_hometown as t2 on t1.teacher_id = t2.teacher_id"
    },
    {
        "index": 460,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "schema_without_content": "addresses : country , address_id , line_1 , line_3 , city , state_province_county , other_address_details , line_2 , zip_postcode  | courses : other_details , course_name , course_description , course_id  | departments : department_id , department_name , other_details , department_description  | degree_programs : degree_program_id , other_details , degree_summary_name , department_id , degree_summary_description  | sections : course_id , section_id , section_description , other_details , section_name  | semesters : semester_name , other_details , semester_id , semester_description  | students : current_address_id , first_name , middle_name , last_name , date_left , permanent_address_id , cell_mobile_number , other_student_details , ssn , email_address , date_first_registered , student_id  | student_enrolment : student_enrolment_id , semester_id , degree_program_id , student_id , other_details  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcripts_transcript_date : transcript_date , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : country (\"Cook Islands\", \"Norfolk Island\", \"Croatia\"), address_id (1, 11, 14), line_1 (\"858 Peggie Bypass Suite 212\", \"67942 Carlotta Ferry Apt. 686\", \"7081 Eda Center\"), line_3 (None), city (\"Port Elvisfurt\", \"Rutherfordtown\", \"Michelleburgh\"), state_province_county (\"Kansas\", \"Wyoming\", \"Florida\"), other_address_details (None), line_2 (\"Suite 383\", \"Apt. 305\", \"Apt. 468\"), zip_postcode (\"638\", \"541\", \"839\") | courses : other_details (None), course_name (\"pl\", \"cal\", \"ml\"), course_description (\"w\", \"l\", \"l\"), course_id (11, 14, 10) | departments : department_id (7, 9, 15), department_name (\"medical\", \"drama\", \"statistics\"), other_details (None), department_description (\"aliquam\", \"natus\", \"consequatur\") | degree_programs : degree_program_id (15, 3, 9), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (12, 7, 8), degree_summary_description (\"unde\", \"architecto\", \"et\") | sections : course_id (2, 1, 5), section_id (7, 3, 4), section_description (\"qui\", \"facilis\", \"reprehenderit\"), other_details (None), section_name (\"c\", \"h\", \"g\") | semesters : semester_name (\"summer 2010\", \"spring 2013\", \"winter 2010\"), other_details (None), semester_id (6, 2, 3), semester_description (\"q\", \"t\", \"y\") | students : current_address_id (10, 1, 10), first_name (\"Frida\", \"Helga\", \"Warren\"), middle_name (\"Mona\", \"Neal\", \"Judd\"), last_name (\"Huel\", \"Weimann\", \"Gleichner\"), date_left (\"2017-07-09 21:38:43\", \"1975-10-09 00:49:27\", \"1982-06-11 00:25:39\"), permanent_address_id (15, 8, 4), cell_mobile_number (\"677.401.9382\", \"07661787471\", \"677.401.9382\"), other_student_details (\"rerum\", \"autem\", \"et\"), ssn (\"248\", \"248\", \"402\"), email_address (\"nya.lesch@example.net\", \"nya.lesch@example.net\", \"nya.lesch@example.net\"), date_first_registered (\"2007-08-29 23:25:41\", \"2007-08-29 23:25:41\", \"1973-05-19 19:12:46\"), student_id (2, 7, 1) | student_enrolment : student_enrolment_id (13, 8, 12), semester_id (13, 6, 6), degree_program_id (2, 10, 5), student_id (6, 9, 12), other_details (None) | student_enrolment_courses : student_enrolment_id (8, 5, 8), course_id (10, 8, 10), student_course_id (8, 681404, 0) | transcripts : other_details (None), transcript_date (\"1975-10-28 15:16:51\", \"1998-11-22 12:18:29\", \"1985-08-21 09:32:39\"), transcript_id (9, 14, 2) | transcripts_transcript_date : transcript_date (\"1975-10-28 15:16:51\", \"1998-11-22 12:18:29\", \"1985-08-21 09:32:39\"), transcript_id (14, 5, 1) | transcript_contents : transcript_id (6, 8, 6), student_course_id (70882679, 96, 70882679)",
        "ambiguous_queries": [
            "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
            "select t2.transcript_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"transcript release\": [{\"transcripts\": [\"transcript_date\"]}, {\"transcripts_transcript_date\": [\"transcript_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"transcript release\" refers to the schema \"transcripts\".\"transcript_date\"",
        "clear_ambiguity": "{\"transcript release\": {\"transcripts\": [\"transcript_date\"]}}",
        "gold_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1"
    },
    {
        "index": 461,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "schema_without_content": "city : id , countrycode , population , name , district  | sqlite_sequence : name , seq  | country : code , population , governmentform \", \"Emirate Federation\", \"Nonmetropolitan Territory of New Zealand\", capital , indepyear , gnpold , gnp , localname , region , lifeexpectancy , surfacearea , continent , name , headofstate , code2  | country_governmentform : governmentform \", \"Emirate Federation\", \"Nonmetropolitan Territory of New Zealand\", code  | countrylanguage : countrycode , language , isofficial , percentage ",
        "schema_with_content": "city : id (143, 3882, 979), countrycode (\"BGD\", \"IRL\", \"CXR\"), population (332969, 163431, 95592), name (\"Khartum\", \"Jingdezhen\", \"Napoli\"), district (\"Antalya\", \"Tirana\", \"West Australia\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"LVA\", \"AZE\", \"KOR\"), population (4478500, 2424200, 4380000), governmentform (\"Monarchy (Emirate)\", \"Emirate Federation\", \"Nonmetropolitan Territory of New Zealand\"), capital (3483, 539, 2914), indepyear (1963, 1941, 1932), gnpold (8246.0, 5867.0, 5670.0), gnp (935.0, 382.0, 97.0), localname (\"Uruguay\", \"Svalbard og Jan Mayen\", \"HaÃ¯ti/Dayti\"), region (\"Northern Africa\", \"South America\", \"North America\"), lifeexpectancy (74.4, 79.5, 66.0), surfacearea (1221037.0, 65301.0, 12173.0), continent (\"Antarctica\", \"South America\", \"South America\"), name (\"Italy\", \"United States\", \"Comoros\"), headofstate (\"Bernard Dowiyogo\", \"Margrethe II\", \"Salahuddin Abdul Aziz Shah Alhaj\"), code2 (\"TF\", \"ET\", \"PK\") | country_governmentform : governmentform (\"Monarchy (Emirate)\", \"Emirate Federation\", \"Nonmetropolitan Territory of New Zealand\"), code (\"TON\", \"MTQ\", \"HRV\") | countrylanguage : countrycode (\"CPV\", \"CXR\", \"GRC\"), language (\"Khmer\", \"Sumo\", \"Maranao\"), isofficial (\"T\", \"F\"), percentage (97.2, 40.8, 34.8)",
        "ambiguous_queries": [
            "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
            "select sum(t1.population), t2.governmentform from country as t1 join country_governmentform as t2 on t1.code = t2.code group by t2.governmentform having avg(t1.lifeexpectancy) > 72"
        ],
        "gold_ambiguity": {
            "match": "{\"government forms\": [{\"country\": [\"governmentform\"]}, {\"country_governmentform\": [\"governmentform\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"government forms\" refers to the schema \"country_governmentform\".\"governmentform\"",
        "clear_ambiguity": "{\"government forms\": {\"country_governmentform\": [\"governmentform\"]}}",
        "gold_query": "select sum(t1.population), t2.governmentform from country as t1 join country_governmentform as t2 on t1.code = t2.code group by t2.governmentform having avg(t1.lifeexpectancy) > 72"
    },
    {
        "index": 462,
        "db_id": "car_1",
        "ambig_type": "join",
        "db_file": "join/car_1/car_1.sqlite",
        "question": "What are all the makers and models?",
        "schema_without_content": "continents : contid , continent  | countries : continent , countryname , countryid  | car_makers : maker , id , country , fullname  | model_list : maker , modelid , model  | model_list_maker : maker , modelid  | car_names : model , make , makeid  | cars_data : weight , mpg , cylinders , edispl , year , id , horsepower , accelerate ",
        "schema_with_content": "continents : contid (4, 4, 2), continent (\"australia\", \"asia\", \"america\") | countries : continent (4, 5, 4), countryname (\"japan\", \"sweden\", \"egypt\"), countryid (1, 13, 5) | car_makers : maker (\"triumph\", \"chrysler\", \"fiat\"), id (5, 15, 3), country (\"2\", \"5\", \"6\"), fullname (\"American Motor Company\", \"Opel\", \"Hyundai\") | model_list : maker (22, 4, 22), modelid (12, 35, 31), model (\"pontiac\", \"plymouth\", \"kia\") | model_list_maker : maker (22, 4, 22), modelid (19, 19, 9) | car_names : model (\"fiat\", \"ford\", \" volkswagen\"), make (\"citroen ds-21 pallas\", \"dodge colt\", \"dodge d200\"), makeid (40, 386, 136) | cars_data : weight (1867, 2228, 2050), mpg (\"26\", \"39.4\", \"26.6\"), cylinders (6, 4, 5), edispl (110.0, 134.0, 199.0), year (1974, 1971, 1973), id (2, 318, 318), horsepower (\"53\", \"81\", \"133\"), accelerate (15.6, 16.4, 15.0)",
        "ambiguous_queries": [
            "select maker, model from model_list",
            "select t2.maker, t1.model from model_list as t1 join model_list_maker as t2 on t1.modelid = t2.modelid"
        ],
        "gold_ambiguity": {
            "match": "{\"makers\": [{\"model_list\": [\"maker\"]}, {\"model_list_maker\": [\"maker\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"makers\" refers to the schema \"model_list\".\"maker\"",
        "clear_ambiguity": "{\"makers\": {\"model_list\": [\"maker\"]}}",
        "gold_query": "select maker, model from model_list"
    },
    {
        "index": 463,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : state , zip_code , email_address , city , first_name , home_phone 747-5094x8134\", \"747-5094x8134\", street , last_name , cell_number 271-6744x4507\", owner_id  | dogs : weight , date_adopted , breed_code , date_departed , size_code , age , name , owner_id , abandoned_yn , date_of_birth , date_arrived , gender , dog_id  | professionals : state , professional_id , cell_number , street , first_name , last_name , home_phone , city , email_address , zip_code , role_code  | professionals_street : street , professional_id  | treatments : treatment_id , treatment_type_code , dog_id , cost_of_treatment , date_of_treatment , professional_id ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : state (\"Arkansas\", \"Maryland\", \"Vermont\"), zip_code (\"93165\", \"02647\", \"36871\"), email_address (\"fschoen@example.net\", \"christy49@example.org\", \"ybergstrom@example.com\"), city (\"West Leonard\", \"Barrettburgh\", \"New Margaretteborough\"), first_name (\"Rolando\", \"Cindy\", \"Gay\"), home_phone (\"085.557.0379x84348\", \"(094)747-5094x8134\", \"(094)747-5094x8134\"), street (\"15828 Spencer Extensions\", \"0647 Hintz Village Apt. 024\", \"0647 Hintz Village Apt. 024\"), last_name (\"Mertz\", \"DuBuque\", \"Hamill\"), cell_number (\"633.455.3045x85484\", \"633.455.3045x85484\", \"(783)271-6744x4507\"), owner_id (6, 15, 8) | dogs : weight (\"4.36\", \"4.36\", \"9.48\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-10 15:06:43\", \"2018-03-13 12:47:15\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 15:05:16\", \"2018-03-25 06:29:10\", \"2018-03-25 04:50:22\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"6\", \"5\", \"3\"), name (\"George\", \"Houston\", \"George\"), owner_id (8, 5, 5), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2013-02-20 14:50:56\", \"2012-01-27 05:11:53\", \"2012-10-14 14:44:37\"), date_arrived (\"2017-04-20 00:58:55\", \"2017-07-25 15:19:07\", \"2017-10-16 20:06:21\"), gender (\"1\", \"0\"), dog_id (8, 6, 4) | professionals : state (\"Montana\", \"Alabama\", \"Connecticut\"), professional_id (12, 4, 15), cell_number (\"889-940-2676\", \"1-181-670-9466\", \"889-940-2676\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\"), first_name (\"Vernice\", \"Sigurd\", \"Jayson\"), last_name (\"Frami\", \"Hyatt\", \"Murazik\"), home_phone (\"325-155-0801x7005\", \"325-155-0801x7005\", \"891.475.2256\"), city (\"Baileymouth\", \"McLaughlinfort\", \"Jaceton\"), email_address (\"west.eula@example.net\", \"mekhi.little@example.org\", \"jerrod.bahringer@example.org\"), zip_code (\"41215\", \"06646\", \"41215\"), role_code (\"Employee\", \"Veterenarian\") | professionals_street : street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\"), professional_id (6, 8, 4) | treatments : treatment_id (13, 2, 9), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (2, 15, 7), cost_of_treatment (567, 147, 567), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-23 13:52:10\", \"2018-03-15 19:10:02\"), professional_id (6, 10, 10)",
        "ambiguous_queries": [
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t1.role_code, t2.street, t1.city, t1.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
        ],
        "gold_ambiguity": {
            "match": "{\"street\": [{\"professionals\": [\"street\"]}, {\"professionals_street\": [\"street\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"street\" refers to the schema \"professionals_street\".\"street\"",
        "clear_ambiguity": "{\"street\": {\"professionals_street\": [\"street\"]}}",
        "gold_query": "select t1.role_code, t2.street, t1.city, t1.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
    },
    {
        "index": 464,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "schema_without_content": "tv_channel : country , content , pixel_aspect_ratio_par , id , series_name , pay_per_view_ppv , language , hight_definition_tv , package_option \", \"no \", \"Sky Famiglia + Sky HD\" | tv_series : id , rating , share , air_date , episode , 18_49_rating_share , viewers_m , channel , weekly_rank  | cartoon : channel , original_air_date , title , production_code , directed_by , id , written_by  | cartoon_production_code : production_code , id ",
        "schema_with_content": "tv_channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"713\", \"700\", \"701\"), series_name (\"MTV Classic\", \"Hip Hop TV\", \"MTV Classic\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"no ( FTV )\", \"no ( FTV )\", \"Sky Famiglia + Sky HD\") | tv_series : id (3.0, 3.0, 7.0), rating (\"3.5\", \"4.0\", \"3.4\"), share (7.0, 7.0, 5.0), air_date (\"October 29, 2007\", \"October 8, 2007\", \"October 22, 2007\"), episode (\"Game Three\", \"The Year of the Rabbit\", \"Home By Another Way\"), 18_49_rating_share (\"2.2/6\", \"2.7/7\", \"2.2/6\"), viewers_m (\"6.94\", \"6.09\", \"5.61\"), channel (\"728\", \"708\", \"707\"), weekly_rank (62.0, 65.0, 72.0) | cartoon : channel (\"700\", \"701\", \"706\"), original_air_date (\"January16,2009\", \"January23,2009\", \"February20,2009\"), title (\"Terror on Dinosaur Island!\", \"Day of the Dark Knight!\", \"Return of the Fearsome Fangs!\"), production_code (102.0, 108.0, 103.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (8.0, 7.0, 6.0), written_by (\"J. M. DeMatteis\", \"Steven Melching\", \"Todd Casey\") | cartoon_production_code : production_code (102.0, 108.0, 103.0), id (3.0, 2.0, 2.0)",
        "ambiguous_queries": [
            "select production_code, channel from cartoon order by original_air_date limit 1",
            "select t2.production_code, t1.channel from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"production code\": [{\"cartoon\": [\"production_code\"]}, {\"cartoon_production_code\": [\"production_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"production code\" refers to the schema \"cartoon_production_code\".\"production_code\"",
        "clear_ambiguity": "{\"production code\": {\"cartoon_production_code\": [\"production_code\"]}}",
        "gold_query": "select t2.production_code, t1.channel from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
    },
    {
        "index": 465,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "schema_without_content": "addresses : state_province_county , line_1 , line_3 , country , zip_postcode , other_address_details , address_id , line_2 , city  | courses : course_description , course_id , other_details , course_name  | departments : department_name , other_details , department_description , department_id  | degree_programs : degree_summary_name , degree_summary_description , department_id , degree_program_id , other_details  | sections : section_description , section_name , other_details , section_id , course_id  | semesters : semester_description , semester_id , other_details , semester_name  | students : date_left , student_id , current_address_id , cell_mobile_number 889-8954x524\", \"677.401.9382\", \"1-009-710-5151\", permanent_address_id , email_address , first_name , date_first_registered , last_name , ssn , middle_name , other_student_details  | students_first_name : first_name , student_id  | student_enrolment : student_id , other_details , degree_program_id , semester_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : state_province_county (\"Hawaii\", \"Delaware\", \"Washington\"), line_1 (\"202 Hessel Views Apt. 468\", \"0643 Muller Vista\", \"186 Evan Motorway Apt. 409\"), line_3 (None), country (\"Gabon\", \"Lesotho\", \"Kyrgyz Republic\"), zip_postcode (\"148\", \"446\", \"669\"), other_address_details (None), address_id (3, 14, 12), line_2 (\"Suite 865\", \"Apt. 689\", \"Apt. 370\"), city (\"Rutherfordtown\", \"South Palma\", \"North Omer\") | courses : course_description (\"p\", \"c\", \"d\"), course_id (1, 10, 10), other_details (None), course_name (\"ai\", \"ml\", \"en\") | departments : department_name (\"history\", \"dance\", \"management\"), other_details (None), department_description (\"natus\", \"natus\", \"dolorem\"), department_id (2, 12, 9) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"unde\", \"officiis\", \"esse\"), department_id (14, 4, 8), degree_program_id (7, 14, 6), other_details (None) | sections : section_description (\"ex\", \"qui\", \"quis\"), section_name (\"l\", \"o\", \"k\"), other_details (None), section_id (11, 6, 11), course_id (6, 1, 9) | semesters : semester_description (\"y\", \"g\", \"g\"), semester_id (13, 8, 15), other_details (None), semester_name (\"winter 2018\", \"spring 2015\", \"fall 2018\") | students : date_left (\"1999-08-24 00:07:10\", \"2007-03-31 09:53:19\", \"2007-11-28 12:50:21\"), student_id (9, 5, 5), current_address_id (6, 7, 9), cell_mobile_number (\"(096)889-8954x524\", \"677.401.9382\", \"1-009-710-5151\"), permanent_address_id (4, 8, 5), email_address (\"beth42@example.org\", \"swift.kolby@example.com\", \"nbruen@example.org\"), first_name (\"Jarvis\", \"Jordy\", \"Timmothy\"), date_first_registered (\"1982-02-14 08:46:35\", \"1989-05-24 23:31:29\", \"1982-02-14 08:46:35\"), last_name (\"Christiansen\", \"Ankunding\", \"Rempel\"), ssn (\"156\", \"6274274\", \"39\"), middle_name (\"Alberta\", \"Osborne\", \"Neal\"), other_student_details (\"atque\", \"rerum\", \"voluptatem\") | students_first_name : first_name (\"Jarvis\", \"Jordy\", \"Timmothy\"), student_id (4, 3, 11) | student_enrolment : student_id (1, 6, 14), other_details (None), degree_program_id (4, 11, 3), semester_id (2, 15, 13), student_enrolment_id (2, 1, 8) | student_enrolment_courses : student_enrolment_id (14, 2, 5), student_course_id (438800, 28982908, 0), course_id (11, 6, 8) | transcripts : other_details (None), transcript_id (1, 1, 9), transcript_date (\"2010-12-13 10:55:15\", \"1988-04-30 01:19:47\", \"1975-05-20 18:31:21\") | transcript_contents : student_course_id (0, 0, 2), transcript_id (2, 8, 5)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
            "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"students\": [\"first_name\"]}, {\"students_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"students_first_name\".\"first_name\"",
        "clear_ambiguity": "{\"first name\": {\"students_first_name\": [\"first_name\"]}}",
        "gold_query": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "index": 466,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "schema_without_content": "city : population , id , district , countrycode , name  | sqlite_sequence : seq , name  | country : surfacearea , name , population , headofstate , governmentform , code , capital , lifeexpectancy , code2 , localname , continent , gnp , gnpold , indepyear , region  | country_name : name , code  | countrylanguage : countrycode , percentage , isofficial , language ",
        "schema_with_content": "city : population (282348, 237713, 109576), id (795, 559, 2172), district (\"Belgorod\", \"Khuzestan\", \"SÃ£o Paulo\"), countrycode (\"ARE\", \"LVA\", \"LUX\"), name (\"CamagÃ¼ey\", \"Rawalpindi\", \"Bhilai\") | sqlite_sequence : seq (4079), name (\"city\") | country : surfacearea (527968.0, 238391.0, 65610.0), name (\"North Korea\", \"Uzbekistan\", \"Latvia\"), population (66591000, 18112000, 8091800), headofstate (\"Sellapan Rama Nathan\", \"Emomali Rahmonov\", \"Maaouiya Ould SidÂ´Ahmad Taya\"), governmentform (\"Administrated by the UN\", \"Republic\", \"US Territory\"), code (\"KWT\", \"BRB\", \"MRT\"), capital (3048, 2447, 3018), lifeexpectancy (69.3, 78.1, 54.7), code2 (\"BM\", \"AR\", \"MS\"), localname (\"Muritaniya/Mauritanie\", \"Tokelau\", \"Argentina\"), continent (\"North America\", \"Africa\", \"Europe\"), gnp (20831.0, 11345.0, 1988.0), gnpold (532031.0, 22834.0, 584.0), indepyear (1941, 1917, 1581), region (\"Southern Europe\", \"South America\", \"Caribbean\") | country_name : name (\"North Korea\", \"Uzbekistan\", \"Latvia\"), code (\"CPV\", \"SLE\", \"IDN\") | countrylanguage : countrycode (\"VAT\", \"VUT\", \"TCA\"), percentage (98.1, 92.0, 5.4), isofficial (\"T\", \"F\"), language (\"Luba\", \"Sindhi\", \"Luba\")",
        "ambiguous_queries": [
            "select name, surfacearea from country order by surfacearea desc limit 5",
            "select t2.name, t1.surfacearea from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 5"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"country\": [\"name\"]}, {\"country_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"country\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"country\": [\"name\"]}}",
        "gold_query": "select name, surfacearea from country order by surfacearea desc limit 5"
    },
    {
        "index": 467,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "schema_without_content": "tv_channel : package_option , pixel_aspect_ratio_par , content , hight_definition_tv , id , series_name , country , pay_per_view_ppv , language  | tv_channel_series_name : id , series_name  | tv_series : episode , id , viewers_m , channel , 18_49_rating_share , air_date , share , weekly_rank , rating  | cartoon : written_by , directed_by , id , title , channel , production_code , original_air_date ",
        "schema_with_content": "tv_channel : package_option (\"Option\", \"Sky Famiglia\", \"Sky Famiglia\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), hight_definition_tv (\"no\", \"yes\"), id (\"701\", \"705\", \"705\"), series_name (\"Music Box Italia\", \"Classica\", \"Rock TV\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\") | tv_channel_series_name : id (\"728\", \"708\", \"714\"), series_name (\"Music Box Italia\", \"Classica\", \"Rock TV\") | tv_series : episode (\"Blowback\", \"Keepers\", \"Home By Another Way\"), id (8.0, 1.0, 9.0), viewers_m (\"6.05\", \"6.75\", \"8.23\"), channel (\"701\", \"708\", \"708\"), 18_49_rating_share (\"3.2/8\", \"3.5/9\", \"1.5/4\"), air_date (\"October 29, 2007\", \"November 12, 2007\", \"October 8, 2007\"), share (6.0, 5.0, 7.0), weekly_rank (72.0, 66.0, 72.0), rating (\"3.0\", \"5.3\", \"4.0\") | cartoon : written_by (\"Todd Casey\", \"Joseph Kuhr\", \"Steven Melching\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (10.0, 4.0, 4.0), title (\"Dawn of the Dead Man!\", \"The Eyes of Despero!\", \"Invasion of the Secret Santas!\"), channel (\"706\", \"706\", \"728\"), production_code (110.0, 103.0, 103.0), original_air_date (\"January9,2009\", \"January23,2009\", \"February6,2009\")",
        "ambiguous_queries": [
            "select count(distinct series_name), count(distinct content) from tv_channel",
            "select count(distinct t2.series_name), count(distinct t1.content) from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"series name\": [{\"tv_channel\": [\"series_name\"]}, {\"tv_channel_series_name\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"series name\" refers to the schema \"tv_channel\".\"series_name\"",
        "clear_ambiguity": "{\"series name\": {\"tv_channel\": [\"series_name\"]}}",
        "gold_query": "select count(distinct series_name), count(distinct content) from tv_channel"
    },
    {
        "index": 468,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "Find the first name and country code of the oldest player.",
        "schema_without_content": "players : player_id , first_name , birth_date , country_code , last_name , hand  | players_country_code : player_id , country_code  | matches : tourney_level , round , loser_age , loser_seed , tourney_id , winner_entry , loser_rank , winner_age , winner_rank_points , winner_hand , loser_rank_points , match_num , tourney_name , best_of , winner_id , loser_ht , loser_entry , winner_name , loser_id , surface , winner_ht , winner_rank , score  6-1\", \"3-6 6-3 6-4\", year , loser_hand , winner_ioc , minutes , loser_name , winner_seed , draw_size , tourney_date , loser_ioc  | rankings : ranking_points , tours , ranking , player_id , ranking_date ",
        "schema_with_content": "players : player_id (204139, 220650, 212532), first_name (\"Sevvy\", \"Vlada\", \"Chirashanthi\"), birth_date (19590428, 19830115, 19840401), country_code (\"HON\", \"BRU\", \"ZAM\"), last_name (\"Sidorovich\", \"Stavridou\", \"Stemmer\"), hand (\"\", \"\", \"U\") | players_country_code : player_id (204071, 203795, 203007), country_code (\"HON\", \"BRU\", \"ZAM\") | matches : tourney_level (\"P\", \"P\", \"P\"), round (\"R16\", \"F\", \"RR\"), loser_age (24.6406570842, 26.340862423, 24.4435318275), loser_seed (1, 10, 13), tourney_id (\"2016-M009\", \"2016-1050\", \"2016-M015\"), winner_entry (\"\"), loser_rank (29, 4, 35), winner_age (23.961670089000002, 34.6557152635, 23.8877481177), winner_rank_points (1343, 2915, 845), winner_hand (\"R\", \"L\"), loser_rank_points (2240, 2140, 2975), match_num (213, 213, 209), tourney_name (\"Acapulco\", \"Birmingham\", \"Sydney\"), best_of (3), winner_id (202494, 201540, 202429), loser_ht (157, 184, 178), loser_entry (\"\"), winner_name (\"Angelique Kerber\", \"Jelena Jankovic\", \"Ekaterina Makarova\"), loser_id (201662, 201425, 201616), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ht (168, 174, 182), winner_rank (22, 45, 19), score (\"6-3 6-1\", \"6-4 6-7(4) 6-1\", \"3-6 6-3 6-4\"), year (2013, 2016, 2017), loser_hand (\"R\", \"L\"), winner_ioc (\"SRB\", \"HUN\", \"SWE\"), minutes (62, 116, 63), loser_name (\"Dominika Cibulkova\", \"Annika Beck\", \"Sara Errani\"), winner_seed (16, 24, 18), draw_size (32, 32, 8), tourney_date (20170220, 20170703, 20170213), loser_ioc (\"GER\", \"FRA\", \"ESP\") | rankings : ranking_points (1205, 1187, 2065), tours (18, 11, 34), ranking (303, 621, 639), player_id (214805, 203563, 202476), ranking_date (19940801, 19971215, 20040628)",
        "ambiguous_queries": [
            "select first_name, country_code from players order by birth_date limit 1",
            "select t1.first_name, t2.country_code from players as t1 join players_country_code as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"country code\": [{\"players\": [\"country_code\"]}, {\"players_country_code\": [\"country_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country code\" refers to the schema \"players\".\"country_code\"",
        "clear_ambiguity": "{\"country code\": {\"players\": [\"country_code\"]}}",
        "gold_query": "select first_name, country_code from players order by birth_date limit 1"
    },
    {
        "index": 469,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "schema_without_content": "tv_channel : package_option \", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\", pixel_aspect_ratio_par , country , series_name , hight_definition_tv , pay_per_view_ppv , content , id , language  | tv_channel_country : id , country  | tv_series : 18_49_rating_share , air_date , id , channel , rating , episode , share , weekly_rank , viewers_m  | cartoon : written_by , directed_by , channel , title , original_air_date , id , production_code ",
        "schema_with_content": "tv_channel : package_option (\"no ( FTV )\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"myDeejay\", \"MTV Dance\", \"MTV Music\"), hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\"), content (\"music\"), id (\"704\", \"715\", \"713\"), language (\"Italian\", \"English\") | tv_channel_country : id (\"714\", \"719\", \"708\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : 18_49_rating_share (\"2.9/7\", \"1.7/5\", \"3.2/8\"), air_date (\"December 10, 2007\", \"December 17, 2007\", \"November 19, 2007\"), id (11.0, 9.0, 6.0), channel (\"713\", \"717\", \"714\"), rating (\"5.8\", \"3.8\", \"4.4\"), episode (\"Double Down\", \"Emily\", \"Emily\"), share (6.0, 6.0, 7.0), weekly_rank (68.0, 80.0, 70.0), viewers_m (\"5.28\", \"6.75\", \"6.94\") | cartoon : written_by (\"Matt Wayne\", \"Michael Jelenic\", \"Matt Wayne\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"705\", \"707\", \"707\"), title (\"Journey to the Center of the Bat!\", \"Journey to the Center of the Bat!\", \"Invasion of the Secret Santas!\"), original_air_date (\"February27,2009\", \"January16,2009\", \"February20,2009\"), id (6.0, 5.0, 5.0), production_code (103.0, 112.0, 111.0)",
        "ambiguous_queries": [
            "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
            "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{\"tv_channel\": [\"country\"]}, {\"tv_channel_country\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"tv_channel\".\"country\"",
        "clear_ambiguity": "{\"country\": {\"tv_channel\": [\"country\"]}}",
        "gold_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'"
    },
    {
        "index": 470,
        "db_id": "voter_1",
        "ambig_type": "join",
        "db_file": "join/voter_1/voter_1.sqlite",
        "question": "What are the distinct states and create time of all votes?",
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_number , contestant_name  | votes : state , contestant_number , phone_number , vote_id , created  | votes_created : created , vote_id ",
        "schema_with_content": "area_code_state : area_code (901, 865, 859), state (\"MS\", \"NY\", \"NM\") | contestants : contestant_number (1, 6, 6), contestant_name (\"Allie Rogalski\", \"Loraine NygrenTania Mattioli\", \"Nita Coster\") | votes : state (\"NY\", \"CA\", \"NJ\n\"), contestant_number (2, 3, 5), phone_number (5112677315, 7148407040, 7148407040), vote_id (1, 2, 2), created (\"2018-03-09 19:03:39\", \"2018-03-09 19:03:36\", \"2018-03-09 19:03:39\") | votes_created : created (\"2018-03-09 19:03:39\", \"2018-03-09 19:03:36\", \"2018-03-09 19:03:39\"), vote_id (3, 1, 5)",
        "ambiguous_queries": [
            "select distinct state, created from votes",
            "select distinct t1.state, t2.created from votes as t1 join votes_created as t2 on t1.vote_id = t2.vote_id"
        ],
        "gold_ambiguity": {
            "match": "{\"create time\": [{\"votes\": [\"created\"]}, {\"votes_created\": [\"created\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"create time\" refers to the schema \"votes_created\".\"created\"",
        "clear_ambiguity": "{\"create time\": {\"votes_created\": [\"created\"]}}",
        "gold_query": "select distinct t1.state, t2.created from votes as t1 join votes_created as t2 on t1.vote_id = t2.vote_id"
    },
    {
        "index": 471,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "schema_without_content": "players : first_name , hand , player_id , country_code , last_name , birth_date  | players_first_name : first_name , player_id  | matches : loser_hand , tourney_level , best_of , loser_entry , match_num , loser_name , score , winner_age , loser_seed , winner_name , tourney_name , winner_ioc , loser_ht , surface , winner_id , winner_seed , loser_rank_points , winner_entry , winner_hand , year , loser_id , winner_rank , tourney_date , tourney_id , round , winner_ht , draw_size , winner_rank_points , loser_age , minutes , loser_rank , loser_ioc  | rankings : player_id , ranking_date , tours , ranking_points , ranking ",
        "schema_with_content": "players : first_name (\"Maryla\", \"Karima\", \"Ema\"), hand (\"R\", \"U\", \"\"), player_id (201396, 203978, 218783), country_code (\"BDI\", \"NOR\", \"GBR\"), last_name (\"Sanford\", \"Mothes Jobkel\", \"Caetano\"), birth_date (19960604, 19370923, 19900108) | players_first_name : first_name (\"Maryla\", \"Karima\", \"Ema\"), player_id (202432, 203998, 213997) | matches : loser_hand (\"R\", \"L\"), tourney_level (\"W\", \"G\", \"P\"), best_of (3), loser_entry (\"\"), match_num (285, 295, 291), loser_name (\"Jelena Jankovic\", \"Dominika Cibulkova\", \"Christina Mchale\"), score (\"6-0 3-6 6-2\", \"4-6 6-4 6-3\", \"6-0 3-6 6-2\"), winner_age (26.6529774127, 28.6105407255, 31.6495550992), loser_seed (13, 29, 9), winner_name (\"Samantha Stosur\", \"Simona Halep\", \"Roberta Vinci\"), tourney_name (\"Prague\", \"French Open\", \"Kaohsiung\"), winner_ioc (\"ITA\", \"CZE\", \"CHN\"), loser_ht (182, 177, 183), surface (\"Hard\", \"Clay\", \"Grass\"), winner_id (201596, 201325, 201474), winner_seed (30, 21, 12), loser_rank_points (1770, 1870, 2480), winner_entry (\"\"), winner_hand (\"R\", \"L\"), year (2013, 2016, 2017), loser_id (200033, 202470, 201311), winner_rank (6, 7, 5), tourney_date (20160509, 20170508, 20160418), tourney_id (\"2016-M035\", \"2016-1086\", \"2016-1074\"), round (\"F\", \"F\", \"RR\"), winner_ht (170, 172, 172), draw_size (12, 4, 32), winner_rank_points (1302, 3091, 3637), loser_age (34.4449007529, 25.842573579699998, 28.5448323066), minutes (93, 77, 86), loser_rank (11, 22, 24), loser_ioc (\"TPE\", \"RUS\", \"SVK\") | rankings : player_id (215234, 214821, 205977), ranking_date (19900910, 20000626, 20010507), tours (11, 19, 20), ranking_points (1039, 2117, 120), ranking (837, 833, 1419)",
        "ambiguous_queries": [
            "select first_name, last_name from players where hand = 'L' order by birth_date",
            "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"players\": [\"first_name\"]}, {\"players_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"players_first_name\".\"first_name\"",
        "clear_ambiguity": "{\"names\": {\"players_first_name\": [\"first_name\"]}}",
        "gold_query": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
    },
    {
        "index": 472,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "schema_without_content": "addresses : other_address_details , city , line_2 , address_id , state_province_county , line_1 , country , zip_postcode , line_3  | courses : other_details , course_description , course_name , course_id  | departments : other_details , department_name , department_id , department_description  | degree_programs : other_details , degree_summary_name , degree_program_id , department_id , degree_summary_description  | sections : other_details , section_id , section_name , course_id , section_description  | semesters : semester_name , other_details , semester_id , semester_description  | students : email_address , other_student_details , ssn , cell_mobile_number 365-8405\", \"03174364122\", \"445-0399x85208\", permanent_address_id , current_address_id , middle_name , date_first_registered , last_name , student_id , first_name , date_left  | students_first_name : first_name , student_id  | student_enrolment : semester_id , other_details , student_enrolment_id , student_id , degree_program_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : other_address_details (None), city (\"Lake Careyberg\", \"Herzoghaven\", \"Port Oceane\"), line_2 (\"Suite 865\", \"Apt. 388\", \"Apt. 388\"), address_id (6, 11, 14), state_province_county (\"SouthDakota\", \"Kansas\", \"Kentucky\"), line_1 (\"67942 Carlotta Ferry Apt. 686\", \"7081 Eda Center\", \"492 Wilkinson Route\"), country (\"Gabon\", \"Bermuda\", \"Cook Islands\"), zip_postcode (\"669\", \"068\", \"446\"), line_3 (None) | courses : other_details (None), course_description (\"v\", \"w\", \"q\"), course_name (\"dl\", \"ds\", \"db\"), course_id (10, 7, 2) | departments : other_details (None), department_name (\"art\", \"law\", \"law\"), department_id (10, 5, 11), department_description (\"aliquam\", \"natus\", \"consequatur\") | degree_programs : other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (8, 13, 13), department_id (3, 3, 13), degree_summary_description (\"officiis\", \"aperiam\", \"officiis\") | sections : other_details (None), section_id (8, 3, 3), section_name (\"f\", \"f\", \"k\"), course_id (1, 7, 7), section_description (\"nesciunt\", \"nesciunt\", \"ex\") | semesters : semester_name (\"spring 2018\", \"fall 2010\", \"spring 2019\"), other_details (None), semester_id (8, 8, 13), semester_description (\"q\", \"t\", \"f\") | students : email_address (\"qo'kon@example.com\", \"qo'kon@example.com\", \"swift.kolby@example.com\"), other_student_details (\"quia\", \"qui\", \"et\"), ssn (\"141072406\", \"39\", \"3\"), cell_mobile_number (\"(507)365-8405\", \"03174364122\", \"(213)445-0399x85208\"), permanent_address_id (4, 3, 11), current_address_id (14, 14, 2), middle_name (\"Osborne\", \"Osborne\", \"Golda\"), date_first_registered (\"1986-02-24 21:12:23\", \"1986-02-24 21:12:23\", \"1989-05-24 23:31:29\"), last_name (\"Rogahn\", \"Rempel\", \"Ward\"), student_id (5, 14, 12), first_name (\"Reva\", \"Timmothy\", \"Hobart\"), date_left (\"2004-12-08 05:29:11\", \"1997-11-16 08:54:33\", \"1971-05-17 19:28:49\") | students_first_name : first_name (\"Reva\", \"Timmothy\", \"Hobart\"), student_id (10, 15, 6) | student_enrolment : semester_id (5, 5, 15), other_details (None), student_enrolment_id (4, 8, 7), student_id (5, 4, 6), degree_program_id (2, 8, 9) | student_enrolment_courses : course_id (10, 6, 11), student_course_id (7, 2, 7), student_enrolment_id (10, 14, 5) | transcripts : other_details (None), transcript_id (8, 11, 4), transcript_date (\"2010-12-13 10:55:15\", \"2010-12-13 10:55:15\", \"1975-05-06 12:04:47\") | transcript_contents : transcript_id (2, 5, 11), student_course_id (2, 0, 28982908)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_left asc limit 1",
            "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first\": [{\"students\": [\"first_name\"]}, {\"students_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first\" refers to the schema \"students_first_name\".\"first_name\"",
        "clear_ambiguity": "{\"first\": {\"students_first_name\": [\"first_name\"]}}",
        "gold_query": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "index": 473,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "schema_without_content": "addresses : country , state_province_county , line_2 , zip_postcode , line_3 , address_id , line_1 , other_address_details , city  | courses : other_details , course_name , course_id , course_description  | departments : department_description , department_name , other_details , department_id  | degree_programs : other_details , degree_summary_description , department_id , degree_program_id , degree_summary_name  | sections : section_name , section_description , section_id , other_details , course_id  | semesters : semester_id , other_details , semester_name , semester_description  | students : current_address_id , student_id , first_name , date_first_registered , ssn , cell_mobile_number 365-8405\", \"03174364122\", \"1-009-710-5151\", middle_name , last_name , date_left , other_student_details , permanent_address_id , email_address  | students_last_name : last_name , student_id  | student_enrolment : degree_program_id , semester_id , student_id , student_enrolment_id , other_details  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : country (\"Iceland\", \"Burundi\", \"Angola\"), state_province_county (\"Idaho\", \"NorthCarolina\", \"Arkansas\"), line_2 (\"Suite 383\", \"Apt. 335\", \"Apt. 406\"), zip_postcode (\"839\", \"638\", \"839\"), line_3 (None), address_id (8, 9, 10), line_1 (\"202 Hessel Views Apt. 468\", \"67942 Carlotta Ferry Apt. 686\", \"202 Hessel Views Apt. 468\"), other_address_details (None), city (\"New Clemensburgh\", \"Herzoghaven\", \"Prohaskafort\") | courses : other_details (None), course_name (\"db\", \"cal\", \"os\"), course_id (8, 15, 8), course_description (\"d\", \"w\", \"w\") | departments : department_description (\"natus\", \"in\", \"aliquam\"), department_name (\"biology\", \"art\", \"engineer\"), other_details (None), department_id (2, 15, 1) | degree_programs : other_details (None), degree_summary_description (\"architecto\", \"qui\", \"quam\"), department_id (7, 4, 8), degree_program_id (13, 7, 11), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_name (\"a\", \"h\", \"l\"), section_description (\"ad\", \"facilis\", \"doloremque\"), section_id (15, 13, 12), other_details (None), course_id (7, 6, 2) | semesters : semester_id (15, 5, 7), other_details (None), semester_name (\"spring 2019\", \"spring 2010\", \"spring 2015\"), semester_description (\"w\", \"c\", \"t\") | students : current_address_id (2, 12, 10), student_id (14, 11, 7), first_name (\"Jarvis\", \"Gregg\", \"Timmothy\"), date_first_registered (\"2009-09-25 00:14:25\", \"2005-12-15 08:42:10\", \"2009-09-25 00:14:25\"), ssn (\"68095\", \"6274274\", \"6274274\"), cell_mobile_number (\"(507)365-8405\", \"03174364122\", \"1-009-710-5151\"), middle_name (\"Golda\", \"Vaughn\", \"Vaughn\"), last_name (\"Osinski\", \"Weimann\", \"Ward\"), date_left (\"2016-04-09 12:27:04\", \"2006-08-04 17:26:49\", \"2007-11-28 12:50:21\"), other_student_details (\"nesciunt\", \"quia\", \"laborum\"), permanent_address_id (8, 8, 14), email_address (\"beth42@example.org\", \"mya88@example.org\", \"jillian26@example.net\") | students_last_name : last_name (\"Osinski\", \"Weimann\", \"Ward\"), student_id (11, 2, 11) | student_enrolment : degree_program_id (10, 9, 2), semester_id (13, 9, 13), student_id (7, 6, 12), student_enrolment_id (8, 12, 15), other_details (None) | student_enrolment_courses : student_enrolment_id (8, 13, 5), student_course_id (0, 9860, 8), course_id (3, 13, 10) | transcripts : other_details (None), transcript_id (9, 12, 11), transcript_date (\"1999-01-06 20:06:46\", \"1985-08-21 09:32:39\", \"2002-09-24 06:11:49\") | transcript_contents : student_course_id (96, 2, 96), transcript_id (13, 8, 15)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
            "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"students\": [\"last_name\"]}, {\"students_last_name\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"students_last_name\".\"last_name\"",
        "clear_ambiguity": "{\"last name\": {\"students_last_name\": [\"last_name\"]}}",
        "gold_query": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "index": 474,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "List the arrival date and the departure date for all the dogs.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : cell_number 271-6744x4507\", \"559.874.3011x989\", first_name , street , city , last_name , state , zip_code , home_phone 747-5094x8134\", \"034-1670\", email_address , owner_id  | dogs : dog_id , age , size_code , owner_id , date_departed , abandoned_yn , date_of_birth , date_adopted , breed_code , name , weight , date_arrived , gender  | dogs_date_arrived : date_arrived , dog_id  | professionals : home_phone , city , state , cell_number 939-2435x80863\", \"1-181-670-9466\", \"011.193.9081x3186\", role_code , email_address , street , last_name , zip_code , professional_id , first_name  | treatments : professional_id , dog_id , treatment_type_code , cost_of_treatment , treatment_id , date_of_treatment ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : cell_number (\"478.978.0729\", \"(783)271-6744x4507\", \"559.874.3011x989\"), first_name (\"Rolando\", \"Cindy\", \"Orlando\"), street (\"2635 Caitlyn Plains\", \"57382 Yost Ridges\", \"2417 Keara Stravenue Apt. 146\"), city (\"South Afton\", \"West Leonard\", \"Brakusfurt\"), last_name (\"Hamill\", \"Hamill\", \"DuBuque\"), state (\"SouthDakota\", \"Vermont\", \"Vermont\"), zip_code (\"45244\", \"11990\", \"35747\"), home_phone (\"363.948.1090\", \"(094)747-5094x8134\", \"(544)034-1670\"), email_address (\"pearlie18@example.com\", \"ybergstrom@example.com\", \"ymaggio@example.com\"), owner_id (10, 6, 10) | dogs : dog_id (10, 9, 1), age (\"9\", \"3\", \"5\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (1, 6, 13), date_departed (\"2018-03-25 05:07:47\", \"2018-03-25 04:50:22\", \"2018-03-25 13:07:04\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2013-02-13 05:15:21\", \"2012-07-11 17:15:10\", \"2018-03-17 04:05:12\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-13 12:47:15\", \"2018-02-27 00:27:57\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"George\", \"Kacey\", \"Evangeline\"), weight (\"8.95\", \"9.48\", \"2.18\"), date_arrived (\"2017-12-29 06:08:26\", \"2018-01-02 03:15:29\", \"2017-12-22 05:02:02\"), gender (\"1\", \"0\") | dogs_date_arrived : date_arrived (\"2017-12-29 06:08:26\", \"2018-01-02 03:15:29\", \"2017-12-22 05:02:02\"), dog_id (3, 11, 3) | professionals : home_phone (\"971.048.3763x9404\", \"971.048.3763x9404\", \"312.216.3352\"), city (\"West Heidi\", \"South Rockyport\", \"Raynorfort\"), state (\"Wisconsin\", \"NewMexico\", \"Wisconsin\"), cell_number (\"(275)939-2435x80863\", \"1-181-670-9466\", \"011.193.9081x3186\"), role_code (\"Employee\", \"Veterenarian\"), email_address (\"lambert62@example.org\", \"lourdes.lowe@example.net\", \"uboehm@example.org\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), last_name (\"Tillman\", \"Christiansen\", \"Pouros\"), zip_code (\"80775\", \"02281\", \"98844\"), professional_id (3, 3, 7), first_name (\"Sigurd\", \"Sigurd\", \"Karley\") | treatments : professional_id (7, 8, 7), dog_id (4, 10, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (668, 313, 349), treatment_id (4, 2, 10), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-10 11:45:58\", \"2018-02-26 09:08:53\")",
        "ambiguous_queries": [
            "select date_arrived, date_departed from dogs",
            "select t2.date_arrived, t1.date_departed from dogs as t1 join dogs_date_arrived as t2 on t1.dog_id = t2.dog_id"
        ],
        "gold_ambiguity": {
            "match": "{\"arrival date\": [{\"dogs\": [\"date_arrived\"]}, {\"dogs_date_arrived\": [\"date_arrived\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"arrival date\" refers to the schema \"dogs\".\"date_arrived\"",
        "clear_ambiguity": "{\"arrival date\": {\"dogs\": [\"date_arrived\"]}}",
        "gold_query": "select date_arrived, date_departed from dogs"
    },
    {
        "index": 475,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : version_number , template_type_code , date_effective_from , date_effective_to , template_id , template_details  | templates_version_number : template_id , version_number  | documents : document_name , template_id , other_details , document_id , document_description  | paragraphs : document_id , paragraph_id , paragraph_text , other_details ",
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"PPT\", \"PPT\"), template_type_description (\"Paper\", \"Advertisement\", \"Book\") | templates : version_number (2, 6, 7), template_type_code (\"PP\", \"CV\", \"AD\"), date_effective_from (\"2005-02-20 00:31:34\", \"1997-04-17 08:29:44\", \"2012-04-05 07:11:42\"), date_effective_to (\"2006-02-06 23:52:04\", \"1995-09-19 22:27:48\", \"1989-11-24 19:06:06\"), template_id (11, 9, 0), template_details (\"\") | templates_version_number : template_id (4, 23, 22), version_number (2, 6, 7) | documents : document_name (\"Summer Show\", \"Robbin CV\", \"Palm reading\"), template_id (22, 10, 1), other_details (None), document_id (33930, 0, 385906526), document_description (\"y\", \"u\", \"b\") | paragraphs : document_id (33930, 16514113, 80), paragraph_id (241, 65, 1104059), paragraph_text (\"Brazil\", \"Palestinian Territory\", \"Japan\"), other_details (None)",
        "ambiguous_queries": [
            "select version_number, template_type_code from templates where version_number > 5",
            "select t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5"
        ],
        "gold_ambiguity": {
            "match": "{\"version number\": [{\"templates\": [\"version_number\"]}, {\"templates_version_number\": [\"version_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"version number\" refers to the schema \"templates_version_number\".\"version_number\"",
        "clear_ambiguity": "{\"version number\": {\"templates_version_number\": [\"version_number\"]}}",
        "gold_query": "select t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5"
    },
    {
        "index": 476,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : email_address , owner_id , city , zip_code , first_name , state , last_name , street , home_phone 034-1670\", cell_number 271-6744x4507\", \"768-5439x484\", \"478.978.0729\" | dogs : age , date_adopted , weight , size_code , dog_id , gender , date_of_birth , breed_code , abandoned_yn , date_departed , name , date_arrived , owner_id  | professionals : state , zip_code , professional_id , home_phone , city , street , first_name , email_address , role_code , last_name , cell_number  | professionals_street : street , professional_id  | treatments : professional_id , treatment_id , date_of_treatment , cost_of_treatment , dog_id , treatment_type_code ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : email_address (\"kturner@example.net\", \"zboncak.madonna@example.net\", \"zboncak.madonna@example.net\"), owner_id (5, 11, 14), city (\"Barrettburgh\", \"East Maribelbury\", \"Lake Jennyferfort\"), zip_code (\"11990\", \"87304\", \"45244\"), first_name (\"Orlando\", \"Johann\", \"Gay\"), state (\"NorthDakota\", \"NewYork\", \"Indiana\"), last_name (\"DuBuque\", \"Fisher\", \"Stoltenberg\"), street (\"692 Jaskolski Forges\", \"692 Jaskolski Forges\", \"6950 Katherine Forges Apt. 630\"), home_phone (\"066.264.7885\", \"1-346-655-5842x768\", \"(544)034-1670\"), cell_number (\"(783)271-6744x4507\", \"(722)768-5439x484\", \"478.978.0729\") | dogs : age (\"9\", \"4\", \"8\"), date_adopted (\"2018-03-08 15:03:00\", \"2018-03-08 15:03:00\", \"2018-03-06 16:32:11\"), weight (\"8.96\", \"9.48\", \"2.18\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (3, 9, 11), gender (\"1\", \"0\"), date_of_birth (\"2008-05-30 12:51:34\", \"2008-05-19 15:54:49\", \"2008-05-30 12:51:34\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 02:47:40\", \"2018-03-25 06:46:07\", \"2018-03-25 06:58:44\"), name (\"Narciso\", \"Lyric\", \"Jeffrey\"), date_arrived (\"2017-10-16 20:06:21\", \"2018-01-17 11:44:16\", \"2017-09-08 20:10:13\"), owner_id (5, 2, 11) | professionals : state (\"Mississippi\", \"NewMexico\", \"California\"), zip_code (\"84515\", \"17902\", \"41215\"), professional_id (9, 7, 12), home_phone (\"971.048.3763x9404\", \"1-138-287-3775\", \"325-155-0801x7005\"), city (\"Raynorfort\", \"New Maryjane\", \"Baileymouth\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), first_name (\"Velva\", \"Vernice\", \"Sigurd\"), email_address (\"lambert62@example.org\", \"marquardt.furman@example.org\", \"lucile.shanahan@example.org\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"O'Reilly\", \"Watsica\", \"Kshlerin\"), cell_number (\"139-321-7313\", \"139-321-7313\", \"1-258-285-4707x8020\") | professionals_street : street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), professional_id (7, 2, 5) | treatments : professional_id (8, 9, 8), treatment_id (12, 8, 8), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-23 13:52:10\", \"2018-03-11 04:23:15\"), cost_of_treatment (428, 147, 428), dog_id (13, 1, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "ambiguous_queries": [
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t1.role_code, t2.street, t1.city, t1.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
        ],
        "gold_ambiguity": {
            "match": "{\"street\": [{\"professionals\": [\"street\"]}, {\"professionals_street\": [\"street\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"street\" refers to the schema \"professionals\".\"street\"",
        "clear_ambiguity": "{\"street\": {\"professionals\": [\"street\"]}}",
        "gold_query": "select role_code, street, city, state from professionals where city like '%West%'"
    },
    {
        "index": 477,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "schema_without_content": "city : name , countrycode , district , population , id  | sqlite_sequence : seq , name  | country : lifeexpectancy , region , gnpold , indepyear , headofstate , population , capital , surfacearea , code2 , name , governmentform , continent , gnp , localname , code  | country_surfacearea : code , surfacearea  | countrylanguage : isofficial , countrycode , language , percentage ",
        "schema_with_content": "city : name (\"Birkirkara\", \"Macon\", \"AraÂ´ar\"), countrycode (\"KAZ\", \"NIC\", \"COL\"), district (\"Kerala\", \"KwaZulu-Natal\", \"ParanÃ¡\"), population (2812000, 80700, 102716), id (1501, 1644, 226) | sqlite_sequence : seq (4079), name (\"city\") | country : lifeexpectancy (63.1, 66.0, 74.4), region (\"Central Africa\", \"Micronesia/Caribbean\", \"Central Africa\"), gnpold (19769.0, 2559.0, 97884.0), indepyear (1970, 1966, 1066), headofstate (\"Bashar al-Assad\", \"Ismail Omar Guelleh\", \"Maaouiya Ould SidÂ´Ahmad Taya\"), population (20212000, 600, 1439200), capital (129, 3336, 2728), surfacearea (112088.0, 1399.0, 446550.0), code2 (\"GR\", \"GM\", \"MY\"), name (\"Namibia\", \"Grenada\", \"Samoa\"), governmentform (\"Federation\", \"Autonomous Area\", \"Federal Republic\"), continent (\"Asia\", \"Antarctica\", \"South America\"), gnp (6.0, 44806.0, 6398.0), localname (\"Qatar\", \"RÃ©publique DÃ©mocratique du Congo\", \"Puerto Rico\"), code (\"YEM\", \"HTI\", \"THA\") | country_surfacearea : code (\"HRV\", \"ATF\", \"BWA\"), surfacearea (112088.0, 1399.0, 446550.0) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"LSO\", \"HND\", \"GUY\"), language (\"Cakchiquel\", \"Marshallese\", \"Rakhine\"), percentage (52.6, 19.0, 17.7)",
        "ambiguous_queries": [
            "select name, surfacearea, indepyear from country order by population limit 1",
            "select t1.name, t2.surfacearea, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t1.population limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"surface area\": [{\"country\": [\"surfacearea\"]}, {\"country_surfacearea\": [\"surfacearea\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"surface area\" refers to the schema \"country\".\"surfacearea\"",
        "clear_ambiguity": "{\"surface area\": {\"country\": [\"surfacearea\"]}}",
        "gold_query": "select name, surfacearea, indepyear from country order by population limit 1"
    },
    {
        "index": 478,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "schema_without_content": "tv_channel : language , pixel_aspect_ratio_par , content , id , pay_per_view_ppv , hight_definition_tv , country , package_option , series_name  | tv_channel_pixel_aspect_ratio_par : pixel_aspect_ratio_par , id  | tv_series : channel , rating , 18_49_rating_share , weekly_rank , viewers_m , episode , air_date , share , id  | cartoon : title , original_air_date , directed_by , channel , id , production_code , written_by ",
        "schema_with_content": "tv_channel : language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), id (\"728\", \"705\", \"703\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), package_option (\"Option\", \"Option\", \"Sky Famiglia + Sky HD\"), series_name (\"Radio Capital TiVÃ¹\", \"MTV Music\", \"MTV Dance\") | tv_channel_pixel_aspect_ratio_par : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"705\", \"706\", \"705\") | tv_series : channel (\"717\", \"700\", \"714\"), rating (\"3.7\", \"5.8\", \"4.4\"), 18_49_rating_share (\"2.4/6\", \"2.4/6\", \"2.1/5\"), weekly_rank (62.0, 72.0, 61.0), viewers_m (\"5.28\", \"6.94\", \"6.94\"), episode (\"The Hanged Man\", \"Friendly Skies\", \"Game Three\"), air_date (\"November 26, 2007\", \"October 15, 2007\", \"December 17, 2007\"), share (7.0, 9.0, 9.0), id (2.0, 8.0, 4.0) | cartoon : title (\"Return of the Fearsome Fangs!\", \"The Eyes of Despero!\", \"Dawn of the Dead Man!\"), original_air_date (\"January9,2009\", \"February27,2009\", \"January16,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"708\", \"703\", \"701\"), id (6.0, 3.0, 10.0), production_code (104.0, 103.0, 101.0), written_by (\"Adam Beechen\", \"J. M. DeMatteis\", \"J. M. DeMatteis\")",
        "ambiguous_queries": [
            "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
            "select t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1 join tv_channel_pixel_aspect_ratio_par as t2 on t1.id = t2.id where t1.language != 'English'"
        ],
        "gold_ambiguity": {
            "match": "{\"pixel aspect ratio\": [{\"tv_channel\": [\"pixel_aspect_ratio_par\"]}, {\"tv_channel_pixel_aspect_ratio_par\": [\"pixel_aspect_ratio_par\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"pixel aspect ratio\" refers to the schema \"tv_channel\".\"pixel_aspect_ratio_par\"",
        "clear_ambiguity": "{\"pixel aspect ratio\": {\"tv_channel\": [\"pixel_aspect_ratio_par\"]}}",
        "gold_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'"
    },
    {
        "index": 479,
        "db_id": "singer",
        "ambig_type": "join",
        "db_file": "join/singer/singer.sqlite",
        "question": "For each citizenship, what is the maximum net worth?",
        "schema_without_content": "singer : singer_id , citizenship , birth_year , net_worth_millions , name  | singer_net_worth_millions : singer_id , net_worth_millions  | song : sales , highest_position , singer_id , song_id , title ",
        "schema_with_content": "singer : singer_id (2, 5, 6), citizenship (\"Germany\", \"Australia\", \"Australia\"), birth_year (1948.0, 1953.0, 1949.0), net_worth_millions (17.4, 12.7, 30.0), name (\"Gina Rinehart\", \"Liliane Bettencourt\", \"Christy Walton\") | singer_net_worth_millions : singer_id (1, 7, 3), net_worth_millions (17.4, 12.7, 30.0) | song : sales (1094000.0, 261000.0, 351421.0), highest_position (1.0, 3.0), singer_id (6, 1, 2), song_id (4, 1, 3), title (\"Cha Cha Slide\", \"Cha Cha Slide\", \"Yeah\")",
        "ambiguous_queries": [
            "select citizenship, max(net_worth_millions) from singer group by citizenship",
            "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship"
        ],
        "gold_ambiguity": {
            "match": "{\"net worth\": [{\"singer\": [\"net_worth_millions\"]}, {\"singer_net_worth_millions\": [\"net_worth_millions\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"net worth\" refers to the schema \"singer_net_worth_millions\".\"net_worth_millions\"",
        "clear_ambiguity": "{\"net worth\": {\"singer_net_worth_millions\": [\"net_worth_millions\"]}}",
        "gold_query": "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship"
    },
    {
        "index": 480,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "List the arrival date and the departure date for all the dogs.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : first_name , zip_code , last_name , street , state , email_address , owner_id , home_phone 747-5094x8134\", city , cell_number 9217952551\", \"121.381.3316x6535\" | dogs : date_arrived , date_adopted , weight , age , size_code , date_departed , abandoned_yn , owner_id , date_of_birth , gender , name , dog_id , breed_code  | dogs_date_departed : dog_id , date_departed  | professionals : street , last_name , home_phone , cell_number , email_address , professional_id , zip_code , city , first_name , role_code , state  | treatments : treatment_id , dog_id , date_of_treatment , treatment_type_code , professional_id , cost_of_treatment ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : first_name (\"Emelie\", \"Adelle\", \"Heather\"), zip_code (\"86010\", \"92406\", \"35747\"), last_name (\"Fisher\", \"Funk\", \"Ondricka\"), street (\"68118 Daniel Row\", \"1858 Jan Park\", \"1858 Jan Park\"), state (\"Indiana\", \"Washington\", \"Washington\"), email_address (\"ybergstrom@example.com\", \"pearlie18@example.com\", \"margaretta.runte@example.net\"), owner_id (10, 5, 11), home_phone (\"916.976.9480x13851\", \"318-052-6573\", \"(094)747-5094x8134\"), city (\"West Leonard\", \"Lake Carleyborough\", \"Brakusfurt\"), cell_number (\"762.589.6117x1328\", \"+70(4)9217952551\", \"121.381.3316x6535\") | dogs : date_arrived (\"2018-01-17 11:44:16\", \"2017-10-25 00:55:34\", \"2017-10-16 20:06:21\"), date_adopted (\"2018-03-23 16:02:04\", \"2018-03-10 15:06:43\", \"2018-03-08 15:03:00\"), weight (\"1.72\", \"3.52\", \"6.92\"), age (\"9\", \"4\", \"1\"), size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-24 19:12:22\", \"2018-03-25 15:05:16\"), abandoned_yn (\"1\", \"0\"), owner_id (2, 8, 10), date_of_birth (\"2015-02-26 21:31:22\", \"2013-02-20 14:50:56\", \"2008-05-30 12:51:34\"), gender (\"1\", \"0\"), name (\"Narciso\", \"Troy\", \"George\"), dog_id (2, 14, 15), breed_code (\"ESK\", \"BUL\", \"HUS\") | dogs_date_departed : dog_id (14, 2, 14), date_departed (\"2018-03-24 19:36:59\", \"2018-03-24 19:12:22\", \"2018-03-25 15:05:16\") | professionals : street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), last_name (\"Watsica\", \"Kshlerin\", \"Watsica\"), home_phone (\"346.594.3739\", \"022.529.0550x1319\", \"1-138-287-3775\"), cell_number (\"011.193.9081x3186\", \"880-659-7577x736\", \"328.842.3792\"), email_address (\"uboehm@example.org\", \"schneider.kathryne@example.org\", \"mekhi.little@example.org\"), professional_id (13, 11, 1), zip_code (\"43129\", \"84515\", \"02281\"), city (\"North Adelberttown\", \"McLaughlinfort\", \"New Maryjane\"), first_name (\"Karley\", \"Ruben\", \"Olaf\"), role_code (\"Employee\", \"Veterenarian\"), state (\"Hawaii\", \"Utah\", \"Montana\") | treatments : treatment_id (15, 15, 4), dog_id (12, 10, 7), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (14, 10, 6), cost_of_treatment (668, 514, 668)",
        "ambiguous_queries": [
            "select date_arrived, date_departed from dogs",
            "select t1.date_arrived, t2.date_departed from dogs as t1 join dogs_date_departed as t2 on t1.dog_id = t2.dog_id"
        ],
        "gold_ambiguity": {
            "match": "{\"departure date\": [{\"dogs\": [\"date_departed\"]}, {\"dogs_date_departed\": [\"date_departed\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"departure date\" refers to the schema \"dogs\".\"date_departed\"",
        "clear_ambiguity": "{\"departure date\": {\"dogs\": [\"date_departed\"]}}",
        "gold_query": "select date_arrived, date_departed from dogs"
    },
    {
        "index": 481,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "schema_without_content": "addresses : line_1 , city , state_province_county , zip_postcode , line_2 , country , address_id , line_3 , other_address_details  | courses : course_description , course_id , other_details , course_name  | departments : other_details , department_name , department_description , department_id  | degree_programs : degree_summary_description , other_details , degree_program_id , degree_summary_name , department_id  | sections : section_id , other_details , course_id , section_name , section_description  | semesters : semester_description , semester_id , other_details , semester_name  | students : permanent_address_id , other_student_details , date_first_registered , current_address_id , middle_name , date_left , cell_mobile_number 246-7921\", \"09700166582\", last_name , email_address , ssn , student_id , first_name  | student_enrolment : student_id , other_details , student_enrolment_id , semester_id , degree_program_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcripts_other_details : transcript_id , other_details  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : line_1 (\"74046 Metz Walk Apt. 113\", \"2294 Grant Square Apt. 235\", \"193 Marlin Brook\"), city (\"Prohaskafort\", \"Lake Careyberg\", \"Port Evanston\"), state_province_county (\"Idaho\", \"Kentucky\", \"Kentucky\"), zip_postcode (\"446\", \"839\", \"777\"), line_2 (\"Apt. 689\", \"Apt. 388\", \"Suite 383\"), country (\"Saudi Arabia\", \"Burundi\", \"Norfolk Island\"), address_id (14, 10, 5), line_3 (None), other_address_details (None) | courses : course_description (\"w\", \"p\", \"c\"), course_id (7, 3, 12), other_details (None), course_name (\"cal\", \"os\", \"rs\") | departments : other_details (None), department_name (\"law\", \"engineer\", \"linguistic\"), department_description (\"error\", \"non\", \"doloribus\"), department_id (8, 10, 6) | degree_programs : degree_summary_description (\"architecto\", \"aperiam\", \"quam\"), other_details (None), degree_program_id (6, 5, 4), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (14, 12, 7) | sections : section_id (7, 12, 9), other_details (None), course_id (5, 9, 10), section_name (\"g\", \"l\", \"d\"), section_description (\"non\", \"reprehenderit\", \"qui\") | semesters : semester_description (\"c\", \"l\", \"y\"), semester_id (15, 10, 13), other_details (None), semester_name (\"spring 2016\", \"spring 2016\", \"spring 2015\") | students : permanent_address_id (9, 15, 9), other_student_details (\"voluptatem\", \"facilis\", \"facilis\"), date_first_registered (\"2017-01-04 08:10:25\", \"1982-06-19 13:15:18\", \"2004-12-24 12:36:46\"), current_address_id (1, 9, 14), middle_name (\"Aaliyah\", \"Neal\", \"Golda\"), date_left (\"1999-08-24 00:07:10\", \"2007-08-02 04:12:58\", \"1999-08-24 00:07:10\"), cell_mobile_number (\"171-642-5684\", \"(462)246-7921\", \"09700166582\"), last_name (\"Osinski\", \"Osinski\", \"Osinski\"), email_address (\"nya.lesch@example.net\", \"jillian26@example.net\", \"nya.lesch@example.net\"), ssn (\"965\", \"668\", \"248\"), student_id (6, 12, 10), first_name (\"Jordy\", \"Jarvis\", \"Jarvis\") | student_enrolment : student_id (5, 7, 14), other_details (None), student_enrolment_id (5, 1, 14), semester_id (2, 2, 2), degree_program_id (10, 4, 10) | student_enrolment_courses : course_id (10, 10, 4), student_enrolment_id (2, 10, 6), student_course_id (83814225, 8, 45105806) | transcripts : other_details (None), transcript_date (\"1975-05-06 12:04:47\", \"1986-07-12 07:27:29\", \"1988-04-30 01:19:47\"), transcript_id (10, 7, 11) | transcripts_other_details : transcript_id (7, 13, 14), other_details (None) | transcript_contents : student_course_id (28982908, 8, 28982908), transcript_id (13, 13, 15)",
        "ambiguous_queries": [
            "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
            "select t1.transcript_date, t2.other_details from transcripts as t1 join transcripts_other_details as t2 on t1.transcript_id = t2.transcript_id order by t1.transcript_date asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"details\": [{\"transcripts\": [\"other_details\"]}, {\"transcripts_other_details\": [\"other_details\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"details\" refers to the schema \"transcripts\".\"other_details\"",
        "clear_ambiguity": "{\"details\": {\"transcripts\": [\"other_details\"]}}",
        "gold_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1"
    },
    {
        "index": 482,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "schema_without_content": "tv_channel : hight_definition_tv , country , pay_per_view_ppv , id , series_name , pixel_aspect_ratio_par , language , package_option \", content  | tv_channel_series_name : series_name , id  | tv_series : share , viewers_m , channel , rating , air_date , id , weekly_rank , 18_49_rating_share , episode  | cartoon : title , written_by , channel , id , original_air_date , directed_by , production_code ",
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), id (\"700\", \"717\", \"709\"), series_name (\"Music Box Italia\", \"Radio Capital TiVÃ¹\", \"MTV Classic\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia\", \"Sky Famiglia\", \"no ( FTV )\"), content (\"music\") | tv_channel_series_name : series_name (\"Music Box Italia\", \"Radio Capital TiVÃ¹\", \"MTV Classic\"), id (\"719\", \"704\", \"705\") | tv_series : share (9.0, 5.0, 5.0), viewers_m (\"6.06\", \"4.24\", \"5.28\"), channel (\"708\", \"708\", \"714\"), rating (\"5.3\", \"4.3\", \"3.0\"), air_date (\"October 22, 2007\", \"November 26, 2007\", \"December 17, 2007\"), id (8.0, 6.0, 7.0), weekly_rank (61.0, 80.0, 43.0), 18_49_rating_share (\"2.4/6\", \"2.9/7\", \"2.2/6\"), episode (\"Keepers\", \"Game Three\", \"The Hanged Man\") | cartoon : title (\"Deep Cover for Batman!\", \"The Eyes of Despero!\", \"Enter the Outsiders!\"), written_by (\"Matt Wayne\", \"James Krieg\", \"Joseph Kuhr\"), channel (\"708\", \"706\", \"700\"), id (5.0, 6.0, 2.0), original_air_date (\"January16,2009\", \"November14,2008\", \"January23,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (102.0, 107.0, 104.0)",
        "ambiguous_queries": [
            "select package_option, series_name from tv_channel where hight_definition_tv = 'yes'",
            "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'"
        ],
        "gold_ambiguity": {
            "match": "{\"series name\": [{\"tv_channel\": [\"series_name\"]}, {\"tv_channel_series_name\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"series name\" refers to the schema \"tv_channel\".\"series_name\"",
        "clear_ambiguity": "{\"series name\": {\"tv_channel\": [\"series_name\"]}}",
        "gold_query": "select package_option, series_name from tv_channel where hight_definition_tv = 'yes'"
    },
    {
        "index": 483,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , cell_number 271-6744x4507\", \"762.589.6117x1328\", \"559.874.3011x989\", email_address , first_name , last_name , zip_code , owner_id , state , street , home_phone  | dogs : age , date_of_birth , size_code , weight , gender , name , date_departed , abandoned_yn , date_arrived , date_adopted , owner_id , breed_code , dog_id  | dogs_name : dog_id , name  | professionals : last_name , cell_number , street , zip_code , first_name , professional_id , home_phone 2898266914\", state , city , email_address , role_code  | treatments : dog_id , professional_id , date_of_treatment , treatment_id , treatment_type_code , cost_of_treatment ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"Beerton\", \"Port Reannamouth\", \"Lake Jennyferfort\"), cell_number (\"(783)271-6744x4507\", \"762.589.6117x1328\", \"559.874.3011x989\"), email_address (\"margaretta.runte@example.net\", \"kturner@example.net\", \"wpfeffer@example.net\"), first_name (\"Cindy\", \"Cindy\", \"Heather\"), last_name (\"Schmitt\", \"Price\", \"Hamill\"), zip_code (\"11990\", \"02647\", \"45244\"), owner_id (10, 12, 3), state (\"SouthDakota\", \"Wisconsin\", \"Arizona\"), street (\"1204 Mae Highway Apt. 107\", \"68118 Daniel Row\", \"1204 Mae Highway Apt. 107\"), home_phone (\"1-346-655-5842x768\", \"916.976.9480x13851\", \"1-346-655-5842x768\") | dogs : age (\"4\", \"6\", \"6\"), date_of_birth (\"2008-05-19 15:54:49\", \"2017-09-19 05:39:09\", \"2013-02-20 14:50:56\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"8.04\", \"6.92\", \"7.57\"), gender (\"1\", \"0\"), name (\"Hipolito\", \"Merritt\", \"Kacey\"), date_departed (\"2018-03-24 19:12:22\", \"2018-03-25 02:47:40\", \"2018-03-24 19:12:22\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-10-25 00:55:34\", \"2018-01-02 03:15:29\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-05 06:05:23\", \"2018-03-13 12:47:15\"), owner_id (2, 3, 6), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (3, 11, 9) | dogs_name : dog_id (8, 12, 2), name (\"Hipolito\", \"Merritt\", \"Kacey\") | professionals : last_name (\"Frami\", \"Kshlerin\", \"Braun\"), cell_number (\"328.842.3792\", \"011.193.9081x3186\", \"1-185-137-1945x409\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), zip_code (\"54312\", \"41215\", \"43129\"), first_name (\"Lesly\", \"Ruben\", \"Jayson\"), professional_id (13, 4, 13), home_phone (\"246-951-0080x76716\", \"246-951-0080x76716\", \"+71(6)2898266914\"), state (\"SouthCarolina\", \"Indiana\", \"SouthCarolina\"), city (\"Kirastad\", \"New Maryjane\", \"Jaceton\"), email_address (\"deanna.schuster@example.com\", \"lourdes.lowe@example.net\", \"lucile.shanahan@example.org\"), role_code (\"Employee\", \"Veterenarian\") | treatments : dog_id (13, 7, 12), professional_id (6, 4, 10), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-04 20:33:43\", \"2018-03-16 10:27:36\"), treatment_id (7, 8, 4), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (139, 139, 656)",
        "ambiguous_queries": [
            "select name, age, weight from dogs where abandoned_yn = 1",
            "select t2.name, t1.age, t1.weight from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"dog name\": [{\"dogs\": [\"name\"]}, {\"dogs_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"dog name\" refers to the schema \"dogs_name\".\"name\"",
        "clear_ambiguity": "{\"dog name\": {\"dogs_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.age, t1.weight from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
    },
    {
        "index": 484,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "schema_without_content": "stadium : average , capacity , lowest , stadium_id , name , highest , location  | singer : age , is_male , song_release_year , song_name , singer_id , name , country  | singer_name : singer_id , name  | concert : year , stadium_id , concert_name , concert_id , theme  | singer_in_concert : singer_id , concert_id ",
        "schema_with_content": "stadium : average (730, 615, 552), capacity (10104, 10104, 3960), lowest (466, 404, 466), stadium_id (10, 4, 3), name (\"Balmoor\", \"Glebe Park\", \"Somerset Park\"), highest (2363, 1763, 2363), location (\"Arbroath\", \"East Fife\", \"Alloa Athletic\") | singer : age (25, 25, 32), is_male (\"F\", \"T\"), song_release_year (\"2013\", \"2003\", \"2008\"), song_name (\"You\", \"Gentleman\", \"Gentleman\"), singer_id (6, 1, 2), name (\"Justin Brown\", \"Timbaland\", \"Joe Sharp\"), country (\"Netherlands\", \"United States\", \"France\") | singer_name : singer_id (1, 4, 6), name (\"Justin Brown\", \"Timbaland\", \"Joe Sharp\") | concert : year (\"2014\", \"2015\"), stadium_id (\"10\", \"9\", \"9\"), concert_name (\"Week 1\", \"Home Visits\", \"Week 2\"), concert_id (1, 1, 1), theme (\"Bleeding Love\", \"Free choice 2\", \"Wide Awake\") | singer_in_concert : singer_id (\"2\", \"6\", \"5\"), concert_id (6, 6, 6)",
        "ambiguous_queries": [
            "select name, country, age from singer order by age desc",
            "select t2.name, t1.country, t1.age from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"singer\": [\"name\"]}, {\"singer_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"singer_name\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"singer_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.country, t1.age from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
    },
    {
        "index": 485,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What the smallest version number and its template type code?",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , date_effective_to , date_effective_from , template_type_code , template_details , version_number  | templates_template_type_code : template_type_code , template_id  | documents : document_id , template_id , other_details , document_name , document_description  | paragraphs : other_details , paragraph_text , document_id , paragraph_id ",
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Book\", \"Paper\"), template_type_code (\"BK\", \"CV\", \"AD\") | templates : template_id (1, 24, 24), date_effective_to (\"2007-06-06 06:18:53\", \"1993-03-24 14:30:23\", \"2000-10-22 11:57:12\"), date_effective_from (\"1975-10-20 02:28:58\", \"2003-06-05 04:03:45\", \"1986-11-14 12:20:18\"), template_type_code (\"PPT\", \"BK\", \"PPT\"), template_details (\"\"), version_number (6, 2, 5) | templates_template_type_code : template_type_code (\"PPT\", \"BK\", \"PPT\"), template_id (21, 8, 8) | documents : document_id (3830, 3, 76), template_id (14, 6, 21), other_details (None), document_name (\"Understanding DB\", \"How Google people work\", \"Understanding DB\"), document_description (\"n\", \"y\", \"k\") | paragraphs : other_details (None), paragraph_text (\"Brazil\", \"Fiji\", \"Micronesia\"), document_id (385906526, 385906526, 80), paragraph_id (241, 241, 946335436)",
        "ambiguous_queries": [
            "select min(version_number), template_type_code from templates",
            "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
        ],
        "gold_ambiguity": {
            "match": "{\"template type code\": [{\"templates\": [\"template_type_code\"]}, {\"templates_template_type_code\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template type code\" refers to the schema \"templates\".\"template_type_code\"",
        "clear_ambiguity": "{\"template type code\": {\"templates\": [\"template_type_code\"]}}",
        "gold_query": "select min(version_number), template_type_code from templates"
    },
    {
        "index": 486,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the region and population of Angola?",
        "schema_without_content": "city : district , countrycode , name , population , id  | sqlite_sequence : seq , name  | country : code2 , gnpold , continent , localname , headofstate , lifeexpectancy , name , gnp , governmentform , region , code , indepyear , surfacearea , capital , population  | country_region : region , code  | countrylanguage : percentage , countrycode , language , isofficial ",
        "schema_with_content": "city : district (\"East Java\", \"Chinandega\", \"Attika\"), countrycode (\"BRA\", \"TMP\", \"PAN\"), name (\"Foggia\", \"Macon\", \"Gaya\"), population (170034, 2190500, 145542), id (2824, 3130, 1292) | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"ZW\", \"CL\", \"SM\"), gnpold (1767.0, 96318.0, 2000.0), continent (\"North America\", \"North America\", \"Oceania\"), localname (\"Guyane franÃ§aise\", \"The Turks and Caicos Islands\", \"Christmas Island\"), headofstate (\"Daniel arap Moi\", \"Thabo Mbeki\", \"Bhumibol Adulyadej\"), lifeexpectancy (79.6, 40.4, 72.4), name (\"Afghanistan\", \"Guinea-Bissau\", \"Slovakia\"), gnp (318.0, 4768.0, 121914.0), governmentform (\"Islamic Republic\", \"Constitutional Monarchy, Federation\", \"Independent Church State\"), region (\"British Islands\", \"Polynesia\", \"Polynesia\"), code (\"MOZ\", \"VEN\", \"IRN\"), indepyear (1944, 1143, 1992), surfacearea (2344858.0, 438317.0, 331689.0), capital (2697, 594, 594), population (93000, 286000, 5074000) | country_region : region (\"British Islands\", \"Polynesia\", \"Polynesia\"), code (\"SYR\", \"JAM\", \"NFK\") | countrylanguage : percentage (2.3, 17.1, 17.9), countrycode (\"KHM\", \"UGA\", \"GAB\"), language (\"Mboshi\", \"Luo\", \"Persian\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select population, region from country where name = 'Angola'",
            "select t1.population, t2.region from country as t1 join country_region as t2 on t1.code = t2.code where t1.name = 'Angola'"
        ],
        "gold_ambiguity": {
            "match": "{\"region\": [{\"country\": [\"region\"]}, {\"country_region\": [\"region\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"region\" refers to the schema \"country_region\".\"region\"",
        "clear_ambiguity": "{\"region\": {\"country_region\": [\"region\"]}}",
        "gold_query": "select t1.population, t2.region from country as t1 join country_region as t2 on t1.code = t2.code where t1.name = 'Angola'"
    },
    {
        "index": 487,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_type_code , date_effective_from , date_effective_to , template_id , version_number , template_details  | templates_template_type_code : template_id , template_type_code  | documents : document_name , document_id , other_details , template_id , document_description  | paragraphs : paragraph_text , paragraph_id , other_details , document_id ",
        "schema_with_content": "ref_template_types : template_type_description (\"Paper\", \"Advertisement\", \"CV\"), template_type_code (\"PPT\", \"PP\", \"PP\") | templates : template_type_code (\"PPT\", \"PPT\", \"PP\"), date_effective_from (\"1983-07-16 21:16:16\", \"2002-08-25 13:26:23\", \"1997-04-17 08:29:44\"), date_effective_to (\"2000-10-22 11:57:12\", \"1989-11-24 19:06:06\", \"2001-04-18 09:29:52\"), template_id (18, 16, 10), version_number (8, 5, 3), template_details (\"\") | templates_template_type_code : template_id (25, 7, 4), template_type_code (\"PPT\", \"PPT\", \"PP\") | documents : document_name (\"How to read a book\", \"How to write a CV\", \"Introduction of OS\"), document_id (50123, 385906526, 2394), other_details (None), template_id (7, 21, 20), document_description (\"b\", \"r\", \"f\") | paragraphs : paragraph_text (\"Palestinian Territory\", \"Brazil\", \"Jersey\"), paragraph_id (571212310, 608931827, 7), other_details (None), document_id (651512, 3830, 33930)",
        "ambiguous_queries": [
            "select template_id, version_number, template_type_code from templates",
            "select t1.template_id, t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
        ],
        "gold_ambiguity": {
            "match": "{\"type codes\": [{\"templates\": [\"template_type_code\"]}, {\"templates_template_type_code\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type codes\" refers to the schema \"templates\".\"template_type_code\"",
        "clear_ambiguity": "{\"type codes\": {\"templates\": [\"template_type_code\"]}}",
        "gold_query": "select template_id, version_number, template_type_code from templates"
    },
    {
        "index": 488,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "What are the email, cell phone and home phone of each professional?",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , street , cell_number 768-5439x484\", \"341.667.8085\", zip_code , home_phone , first_name , last_name , city , state , email_address  | dogs : date_arrived , weight , age , date_adopted , owner_id , name , size_code , dog_id , date_of_birth , breed_code , date_departed , gender , abandoned_yn  | professionals : last_name , email_address , city , state , street , professional_id , cell_number , zip_code , role_code , home_phone 0259033559\", \"320-508-6023\", \"1-609-566-2752x25197\", first_name  | professionals_cell_number : professional_id , cell_number  | treatments : treatment_type_code , professional_id , dog_id , cost_of_treatment , treatment_id , date_of_treatment ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (7, 1, 14), street (\"2635 Caitlyn Plains\", \"51934 Treutel Harbor\", \"59509 Mellie Mountain\"), cell_number (\"633.455.3045x85484\", \"(722)768-5439x484\", \"341.667.8085\"), zip_code (\"00589\", \"22693\", \"45244\"), home_phone (\"130-796-4589x05454\", \"318-052-6573\", \"363.948.1090\"), first_name (\"Adelle\", \"Tre\", \"Emelie\"), last_name (\"Schmitt\", \"Ondricka\", \"Prohaska\"), city (\"Brakusfurt\", \"South Afton\", \"East Hillardberg\"), state (\"NorthDakota\", \"SouthDakota\", \"Wisconsin\"), email_address (\"margaretta.runte@example.net\", \"pearlie18@example.com\", \"ykris@example.com\") | dogs : date_arrived (\"2017-07-25 15:19:07\", \"2018-01-02 03:15:29\", \"2017-10-16 20:06:21\"), weight (\"9.8\", \"1.39\", \"9.8\"), age (\"9\", \"6\", \"1\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-02-27 00:27:57\", \"2018-03-25 08:12:51\"), owner_id (13, 5, 2), name (\"Merritt\", \"Merritt\", \"Jesus\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (4, 9, 1), date_of_birth (\"2012-10-14 14:44:37\", \"2009-04-12 06:02:48\", \"2008-10-09 22:38:53\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-24 23:48:59\", \"2018-03-25 02:47:40\", \"2018-03-25 10:25:46\"), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\") | professionals : last_name (\"Pouros\", \"Kshlerin\", \"O'Reilly\"), email_address (\"jeichmann@example.com\", \"delphine29@example.com\", \"cole.margarita@example.org\"), city (\"East Ila\", \"New Laurytown\", \"North Odellfurt\"), state (\"NewMexico\", \"NorthCarolina\", \"Mississippi\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), professional_id (6, 12, 11), cell_number (\"139-321-7313\", \"011.193.9081x3186\", \"1-185-137-1945x409\"), zip_code (\"34041\", \"33020\", \"06646\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"+02(1)0259033559\", \"320-508-6023\", \"1-609-566-2752x25197\"), first_name (\"Ericka\", \"Olaf\", \"Olaf\") | professionals_cell_number : professional_id (12, 5, 10), cell_number (\"139-321-7313\", \"011.193.9081x3186\", \"1-185-137-1945x409\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (10, 9, 4), dog_id (4, 7, 2), cost_of_treatment (147, 313, 567), treatment_id (2, 14, 2), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-08 05:26:23\", \"2018-03-10 11:45:58\")",
        "ambiguous_queries": [
            "select email_address, cell_number, home_phone from professionals",
            "select t1.email_address, t2.cell_number, t1.home_phone from professionals as t1 join professionals_cell_number as t2 on t1.professional_id = t2.professional_id"
        ],
        "gold_ambiguity": {
            "match": "{\"cell phone\": [{\"professionals\": [\"cell_number\"]}, {\"professionals_cell_number\": [\"cell_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cell phone\" refers to the schema \"professionals\".\"cell_number\"",
        "clear_ambiguity": "{\"cell phone\": {\"professionals\": [\"cell_number\"]}}",
        "gold_query": "select email_address, cell_number, home_phone from professionals"
    },
    {
        "index": 489,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "schema_without_content": "stadium : stadium_id , capacity , location , average , name , highest , lowest  | singer : singer_id , age , is_male , country , name , song_release_year , song_name  | singer_song_name : song_name , singer_id  | concert : stadium_id , year , theme , concert_name , concert_id  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : stadium_id (7, 3, 10), capacity (52500, 11998, 4000), location (\"Brechin City\", \"Raith Rovers\", \"Stirling Albion\"), average (615, 642, 642), name (\"Balmoor\", \"Stark's Park\", \"Glebe Park\"), highest (1125, 1057, 837), lowest (404, 466, 1294) | singer : singer_id (4, 1, 4), age (41, 29, 41), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), name (\"John Nizinik\", \"Tribal King\", \"Justin Brown\"), song_release_year (\"2003\", \"2008\", \"1992\"), song_name (\"Gentleman\", \"Sun\", \"Sun\") | singer_song_name : song_name (\"Gentleman\", \"Sun\", \"Sun\"), singer_id (4, 5, 2) | concert : stadium_id (\"1\", \"2\", \"1\"), year (\"2014\", \"2015\"), theme (\"Bleeding Love\", \"Free choice 2\", \"Free choice\"), concert_name (\"Home Visits\", \"Super bootcamp\", \"Home Visits\"), concert_id (4, 4, 5) | singer_in_concert : concert_id (6, 5, 4), singer_id (\"6\", \"6\", \"6\")",
        "ambiguous_queries": [
            "select song_name, song_release_year from singer order by age limit 1",
            "select t2.song_name, t1.song_release_year from singer as t1 join singer_song_name as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"singer\": [\"song_name\"]}, {\"singer_song_name\": [\"song_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"singer\".\"song_name\"",
        "clear_ambiguity": "{\"names\": {\"singer\": [\"song_name\"]}}",
        "gold_query": "select song_name, song_release_year from singer order by age limit 1"
    },
    {
        "index": 490,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , email_address , first_name , cell_number , zip_code , state , last_name , owner_id , street , home_phone 747-5094x8134\", \"893-862-5295x61709\", \"1-332-849-1908\" | dogs : date_adopted , gender , date_departed , age , owner_id , date_of_birth , abandoned_yn , breed_code , date_arrived , size_code , dog_id , weight , name  | professionals : zip_code , email_address , role_code , street , state , professional_id , home_phone 0259033559\", \"+020259033559\", first_name , cell_number , city , last_name  | professionals_city : city , professional_id  | treatments : treatment_type_code , dog_id , date_of_treatment , professional_id , cost_of_treatment , treatment_id ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"South Daisyfurt\", \"Beerton\", \"Lake Carleyborough\"), email_address (\"lynn81@example.org\", \"christy49@example.org\", \"edythe62@example.org\"), first_name (\"Lorenz\", \"Gay\", \"Tre\"), cell_number (\"121.381.3316x6535\", \"1-626-264-7659x1697\", \"341.667.8085\"), zip_code (\"45244\", \"35747\", \"93165\"), state (\"Arkansas\", \"Wisconsin\", \"Vermont\"), last_name (\"DuBuque\", \"Feil\", \"Mertz\"), owner_id (4, 2, 5), street (\"15828 Spencer Extensions\", \"692 Jaskolski Forges\", \"57382 Yost Ridges\"), home_phone (\"(094)747-5094x8134\", \"893-862-5295x61709\", \"1-332-849-1908\") | dogs : date_adopted (\"2018-02-27 00:27:57\", \"2018-03-14 08:05:18\", \"2018-03-21 10:41:18\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 15:05:16\", \"2018-03-25 10:25:46\"), age (\"2\", \"1\", \"2\"), owner_id (10, 8, 8), date_of_birth (\"2013-02-13 05:15:21\", \"2012-07-11 17:15:10\", \"2012-07-11 17:15:10\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-07-25 15:19:07\", \"2017-12-22 05:02:02\", \"2018-01-02 03:15:29\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (8, 5, 12), weight (\"6.92\", \"1.72\", \"5.16\"), name (\"Kacey\", \"Narciso\", \"Bessie\") | professionals : zip_code (\"54312\", \"54312\", \"54312\"), email_address (\"deanna.schuster@example.com\", \"goyette.roosevelt@example.net\", \"goyette.roosevelt@example.net\"), role_code (\"Employee\", \"Veterenarian\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), state (\"NorthCarolina\", \"Connecticut\", \"NewMexico\"), professional_id (7, 12, 11), home_phone (\"312.216.3352\", \"+02(1)0259033559\", \"+02(1)0259033559\"), first_name (\"Sigurd\", \"Karley\", \"Taryn\"), cell_number (\"00230569697\", \"011.193.9081x3186\", \"499-434-0215x1628\"), city (\"Jaceton\", \"McLaughlinfort\", \"North Adelberttown\"), last_name (\"O'Reilly\", \"O'Reilly\", \"O'Reilly\") | professionals_city : city (\"Jaceton\", \"McLaughlinfort\", \"North Adelberttown\"), professional_id (9, 14, 4) | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (4, 1, 13), date_of_treatment (\"2018-03-01 04:14:46\", \"2018-02-26 09:08:53\", \"2018-03-15 20:25:34\"), professional_id (9, 7, 4), cost_of_treatment (349, 567, 852), treatment_id (14, 4, 11)",
        "ambiguous_queries": [
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1 join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'"
        ],
        "gold_ambiguity": {
            "match": "{\"city\": [{\"professionals\": [\"city\"]}, {\"professionals_city\": [\"city\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"city\" refers to the schema \"professionals_city\".\"city\"",
        "clear_ambiguity": "{\"city\": {\"professionals_city\": [\"city\"]}}",
        "gold_query": "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1 join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'"
    },
    {
        "index": 491,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , state , owner_id , cell_number 4323592985\", \"739-136-7202\", \"341.667.8085\", email_address , last_name , first_name , zip_code , home_phone , city  | owners_first_name : owner_id , first_name  | dogs : date_departed , dog_id , date_arrived , owner_id , size_code , gender , date_of_birth , weight , abandoned_yn , breed_code , age , name , date_adopted  | professionals : email_address , role_code , street , state , last_name , cell_number 908-7311x065\", home_phone 304-4499x59146\", \"312.216.3352\", professional_id , city , zip_code , first_name  | treatments : treatment_type_code , cost_of_treatment , dog_id , professional_id , treatment_id , date_of_treatment ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"0647 Hintz Village Apt. 024\", \"51934 Treutel Harbor\", \"0647 Hintz Village Apt. 024\"), state (\"Maryland\", \"Washington\", \"Pennsylvania\"), owner_id (6, 4, 6), cell_number (\"+00(2)4323592985\", \"739-136-7202\", \"341.667.8085\"), email_address (\"fschoen@example.net\", \"zboncak.madonna@example.net\", \"hudson.favian@example.com\"), last_name (\"Haley\", \"Hauck\", \"Hauck\"), first_name (\"Cindy\", \"Nora\", \"Cindy\"), zip_code (\"00589\", \"22731\", \"86010\"), home_phone (\"085.557.0379x84348\", \"893-862-5295x61709\", \"363.948.1090\"), city (\"Beerton\", \"Lake Valentin\", \"South Daisyfurt\") | owners_first_name : owner_id (7, 10, 2), first_name (\"Cindy\", \"Nora\", \"Cindy\") | dogs : date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 10:25:46\", \"2018-03-25 06:58:44\"), dog_id (9, 10, 9), date_arrived (\"2017-06-25 10:14:05\", \"2017-12-22 05:02:02\", \"2017-04-15 09:25:31\"), owner_id (3, 8, 6), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), date_of_birth (\"2015-02-26 21:31:22\", \"2018-03-17 04:05:12\", \"2012-05-31 08:01:36\"), weight (\"1.72\", \"8.16\", \"3.52\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"6\", \"2\", \"1\"), name (\"Bessie\", \"Troy\", \"Kacey\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-23 16:02:04\", \"2018-03-07 21:45:43\") | professionals : email_address (\"jacynthe.mclaughlin@example.net\", \"goyette.roosevelt@example.net\", \"uboehm@example.org\"), role_code (\"Employee\", \"Veterenarian\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), state (\"Wisconsin\", \"NewMexico\", \"Hawaii\"), last_name (\"Braun\", \"Hayes\", \"Ullrich\"), cell_number (\"1-258-285-4707x8020\", \"00230569697\", \"(369)908-7311x065\"), home_phone (\"971.048.3763x9404\", \"(920)304-4499x59146\", \"312.216.3352\"), professional_id (11, 15, 8), city (\"Baileymouth\", \"Jaceton\", \"Juddton\"), zip_code (\"02281\", \"98844\", \"41215\"), first_name (\"Velva\", \"Brady\", \"Karley\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (656, 139, 668), dog_id (7, 4, 4), professional_id (6, 6, 4), treatment_id (7, 8, 15), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-03-13 12:22:58\", \"2018-03-11 04:23:15\")",
        "ambiguous_queries": [
            "select first_name, last_name, email_address from owners where state like '%North%'",
            "select t2.first_name, t1.last_name, t1.email_address from owners as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"owners\": [\"first_name\"]}, {\"owners_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"owners\".\"first_name\"",
        "clear_ambiguity": "{\"first name\": {\"owners\": [\"first_name\"]}}",
        "gold_query": "select first_name, last_name, email_address from owners where state like '%North%'"
    },
    {
        "index": 492,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , owner_id , first_name , city , zip_code , cell_number 768-5439x484\", email_address , state , last_name , home_phone  | dogs : date_of_birth , age , size_code , abandoned_yn , owner_id , gender , date_departed , date_adopted , breed_code , name , dog_id , date_arrived , weight  | professionals : first_name , zip_code , professional_id , last_name , role_code , home_phone 304-4499x59146\", \"246-951-0080x76716\", \"022.529.0550x1319\", email_address , cell_number 908-7311x065\", \"00230569697\", street , city , state  | professionals_home_phone : home_phone 304-4499x59146\", \"246-951-0080x76716\", \"022.529.0550x1319\", professional_id  | treatments : cost_of_treatment , date_of_treatment , dog_id , treatment_type_code , treatment_id , professional_id ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"57382 Yost Ridges\", \"0647 Hintz Village Apt. 024\", \"15828 Spencer Extensions\"), owner_id (2, 13, 2), first_name (\"Orlando\", \"Tre\", \"Melisa\"), city (\"Barrettburgh\", \"Brakusfurt\", \"Lake Valentin\"), zip_code (\"78297\", \"87304\", \"86010\"), cell_number (\"478.978.0729\", \"559.874.3011x989\", \"(722)768-5439x484\"), email_address (\"kturner@example.net\", \"pearlie18@example.com\", \"kturner@example.net\"), state (\"Washington\", \"Pennsylvania\", \"Arizona\"), last_name (\"Stoltenberg\", \"DuBuque\", \"Nicolas\"), home_phone (\"085.557.0379x84348\", \"1-332-849-1908\", \"066.264.7885\") | dogs : date_of_birth (\"2008-10-09 22:38:53\", \"2008-05-19 15:54:49\", \"2012-07-11 17:15:10\"), age (\"4\", \"1\", \"6\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), owner_id (3, 12, 13), gender (\"1\", \"0\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 04:42:14\", \"2018-03-24 19:36:59\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-08 15:03:00\", \"2018-03-18 07:47:40\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Mavis\", \"Lyric\", \"Kacey\"), dog_id (5, 15, 10), date_arrived (\"2017-05-06 08:03:52\", \"2017-12-22 05:02:02\", \"2018-01-02 03:15:29\"), weight (\"9.48\", \"4.01\", \"6.92\") | professionals : first_name (\"Ruben\", \"Monte\", \"Ericka\"), zip_code (\"43129\", \"17902\", \"98844\"), professional_id (6, 8, 1), last_name (\"Frami\", \"Ullrich\", \"Considine\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"(920)304-4499x59146\", \"246-951-0080x76716\", \"022.529.0550x1319\"), email_address (\"jacynthe.mclaughlin@example.net\", \"jerrod.bahringer@example.org\", \"lourdes.lowe@example.net\"), cell_number (\"1-258-285-4707x8020\", \"(369)908-7311x065\", \"00230569697\"), street (\"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), city (\"North Odellfurt\", \"North Odellfurt\", \"North Adelberttown\"), state (\"Hawaii\", \"Indiana\", \"Alabama\") | professionals_home_phone : home_phone (\"(920)304-4499x59146\", \"246-951-0080x76716\", \"022.529.0550x1319\"), professional_id (10, 2, 14) | treatments : cost_of_treatment (428, 428, 428), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-03-01 04:14:46\", \"2018-03-19 04:39:54\"), dog_id (7, 2, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (5, 7, 10), professional_id (6, 4, 10)",
        "ambiguous_queries": [
            "select email_address, cell_number, home_phone from professionals",
            "select t1.email_address, t1.cell_number, t2.home_phone from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id"
        ],
        "gold_ambiguity": {
            "match": "{\"home phone\": [{\"professionals\": [\"home_phone\"]}, {\"professionals_home_phone\": [\"home_phone\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"home phone\" refers to the schema \"professionals\".\"home_phone\"",
        "clear_ambiguity": "{\"home phone\": {\"professionals\": [\"home_phone\"]}}",
        "gold_query": "select email_address, cell_number, home_phone from professionals"
    },
    {
        "index": 493,
        "db_id": "singer",
        "ambig_type": "join",
        "db_file": "join/singer/singer.sqlite",
        "question": "For each citizenship, what is the maximum net worth?",
        "schema_without_content": "singer : birth_year , name , citizenship , singer_id , net_worth_millions  | singer_citizenship : singer_id , citizenship  | song : highest_position , singer_id , song_id , title \", \"Left Outside Alone\", \"Do They Know It's Christmas\", sales ",
        "schema_with_content": "singer : birth_year (1942.0, 1962.0, 1949.0), name (\"Susanne Klatten\", \"Susanne Klatten\", \"Alice Walton\"), citizenship (\"Australia\", \"Germany\", \"Germany\"), singer_id (5, 3, 1), net_worth_millions (14.3, 17.0, 26.3) | singer_citizenship : singer_id (5, 7, 2), citizenship (\"Australia\", \"Germany\", \"Germany\") | song : highest_position (1.0, 3.0), singer_id (2, 5, 2), song_id (2, 7, 3), title (\"F**k It (I Don't Want You Back)\", \"Left Outside Alone\", \"Do They Know It's Christmas\"), sales (351421.0, 335000.0, 300000.0)",
        "ambiguous_queries": [
            "select citizenship, max(net_worth_millions) from singer group by citizenship",
            "select t2.citizenship, max(t1.net_worth_millions) from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship"
        ],
        "gold_ambiguity": {
            "match": "{\"citizenship\": [{\"singer\": [\"citizenship\"]}, {\"singer_citizenship\": [\"citizenship\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"citizenship\" refers to the schema \"singer\".\"citizenship\"",
        "clear_ambiguity": "{\"citizenship\": {\"singer\": [\"citizenship\"]}}",
        "gold_query": "select citizenship, max(net_worth_millions) from singer group by citizenship"
    },
    {
        "index": 494,
        "db_id": "car_1",
        "ambig_type": "join",
        "db_file": "join/car_1/car_1.sqlite",
        "question": "What are the makers and models?",
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : maker , country , id , fullname  | model_list : modelid , maker , model  | model_list_maker : modelid , maker  | car_names : makeid , model , make  | cars_data : horsepower , weight , edispl , mpg , id , year , cylinders , accelerate ",
        "schema_with_content": "continents : contid (2, 5, 5), continent (\"america\", \"africa\", \"america\") | countries : countryid (15, 7, 6), continent (1, 3, 2), countryname (\"sweden\", \"germany\", \"egypt\") | car_makers : maker (\"daimler benz\", \"opel\", \"opel\"), country (\"6\", \"1\", \"1\"), id (1, 8, 7), fullname (\"Toyota\", \"Volkswagen\", \"Ford Motor Company\") | model_list : modelid (11, 5, 21), maker (12, 15, 20), model (\"subaru\", \"plymouth\", \"renault\") | model_list_maker : modelid (11, 5, 2), maker (12, 15, 20) | car_names : makeid (314, 155, 36), model (\"mercury\", \"datsun\", \"hi\"), make (\"mazda glc custom\", \"saab 99e\", \"toyota corolla 1200\") | cars_data : horsepower (\"105\", \"97\", \"67\"), weight (4499, 3190, 3193), edispl (120.0, 146.0, 260.0), mpg (\"13\", \"30.9\", \"44\"), id (171, 117, 351), year (1974, 1970, 1973), cylinders (8, 4, 6), accelerate (20.5, 16.7, 14.5)",
        "ambiguous_queries": [
            "select maker, model from model_list",
            "select t2.maker, t1.model from model_list as t1 join model_list_maker as t2 on t1.modelid = t2.modelid"
        ],
        "gold_ambiguity": {
            "match": "{\"makers\": [{\"model_list\": [\"maker\"]}, {\"model_list_maker\": [\"maker\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"makers\" refers to the schema \"model_list\".\"maker\"",
        "clear_ambiguity": "{\"makers\": {\"model_list\": [\"maker\"]}}",
        "gold_query": "select maker, model from model_list"
    },
    {
        "index": 495,
        "db_id": "museum_visit",
        "ambig_type": "join",
        "db_file": "join/museum_visit/museum_visit.sqlite",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "schema_without_content": "museum : open_year , num_of_staff , museum_id , name  | museum_open_year : museum_id , open_year  | visitor : id , age , level_of_membership , name  | visit : total_spent , museum_id , num_of_ticket , visitor_id ",
        "schema_with_content": "museum : open_year (\"2012\", \"2008\", \"2010\"), num_of_staff (16, 25, 18), museum_id (2, 6, 2), name (\"Plaza Museum\", \"Place Tower Museum\", \"RiverPark Museum\") | museum_open_year : museum_id (4, 4, 2), open_year (\"2012\", \"2008\", \"2010\") | visitor : id (3, 1, 1), age (36, 27, 27), level_of_membership (2, 5, 1), name (\"Gonzalo HiguaÃ­n \", \"Rafael van der Vaart\", \"Gonzalo HiguaÃ­n \") | visit : total_spent (320.44, 320.44, 20.44), museum_id (2, 8, 4), num_of_ticket (24, 3, 4), visitor_id (\"5\", \"3\", \"6\")",
        "ambiguous_queries": [
            "select num_of_staff, open_year from museum where name = 'Plaza Museum'",
            "select t1.num_of_staff, t2.open_year from museum as t1 join museum_open_year as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'"
        ],
        "gold_ambiguity": {
            "match": "{\"opening year\": [{\"museum\": [\"open_year\"]}, {\"museum_open_year\": [\"open_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"opening year\" refers to the schema \"museum_open_year\".\"open_year\"",
        "clear_ambiguity": "{\"opening year\": {\"museum_open_year\": [\"open_year\"]}}",
        "gold_query": "select t1.num_of_staff, t2.open_year from museum as t1 join museum_open_year as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'"
    },
    {
        "index": 496,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , cell_number 399-3116\", \"1-626-264-7659x1697\", owner_id , first_name , email_address , state , city , zip_code , home_phone 997-7627\", \"916.976.9480x13851\", last_name  | dogs : dog_id , weight , breed_code , owner_id , gender , abandoned_yn , date_of_birth , size_code , age , name , date_adopted , date_departed , date_arrived  | dogs_name : name , dog_id  | professionals : zip_code , home_phone , email_address , city , cell_number , role_code , last_name , street , professional_id , state , first_name  | treatments : treatment_id , dog_id , professional_id , cost_of_treatment , treatment_type_code , date_of_treatment ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"68118 Daniel Row\", \"51934 Treutel Harbor\", \"60352 Kayleigh Crossing Suite 700\"), cell_number (\"559.874.3011x989\", \"(257)399-3116\", \"1-626-264-7659x1697\"), owner_id (8, 5, 15), first_name (\"Jaclyn\", \"Orlando\", \"Heather\"), email_address (\"christy49@example.org\", \"ykris@example.com\", \"wpfeffer@example.net\"), state (\"Arizona\", \"NorthDakota\", \"Indiana\"), city (\"Lake Tia\", \"Port Reannamouth\", \"Lake Jennyferfort\"), zip_code (\"86010\", \"78297\", \"86010\"), home_phone (\"1-346-655-5842x768\", \"(058)997-7627\", \"916.976.9480x13851\"), last_name (\"Hamill\", \"Schmitt\", \"Price\") | dogs : dog_id (7, 8, 1), weight (\"6.92\", \"8.04\", \"6.92\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (2, 10, 7), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2010-11-11 07:11:53\", \"2012-10-14 14:44:37\", \"2012-05-03 21:42:25\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"1\", \"9\", \"1\"), name (\"Holden\", \"Jesus\", \"Jeffrey\"), date_adopted (\"2018-03-08 15:03:00\", \"2018-03-07 21:45:43\", \"2018-03-18 07:47:40\"), date_departed (\"2018-03-24 19:12:22\", \"2018-03-24 23:48:59\", \"2018-03-25 06:29:10\"), date_arrived (\"2018-01-02 03:15:29\", \"2017-10-25 00:55:34\", \"2017-09-08 20:10:13\") | dogs_name : name (\"Holden\", \"Jesus\", \"Jeffrey\"), dog_id (5, 8, 9) | professionals : zip_code (\"34041\", \"77129\", \"07412\"), home_phone (\"971.048.3763x9404\", \"022.529.0550x1319\", \"022.529.0550x1319\"), email_address (\"goyette.roosevelt@example.net\", \"goyette.roosevelt@example.net\", \"lambert62@example.org\"), city (\"McLaughlinfort\", \"North Adelberttown\", \"East Ila\"), cell_number (\"889-940-2676\", \"962-983-8109x3509\", \"461-801-2600\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Hyatt\", \"Hyatt\", \"Hayes\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), professional_id (12, 1, 5), state (\"NewMexico\", \"Connecticut\", \"Mississippi\"), first_name (\"Ericka\", \"Karley\", \"Jayson\") | treatments : treatment_id (2, 4, 6), dog_id (10, 14, 10), professional_id (5, 7, 8), cost_of_treatment (567, 668, 313), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-14 19:10:40\", \"2018-03-15 20:25:34\")",
        "ambiguous_queries": [
            "select name, age, weight from dogs where abandoned_yn = 1",
            "select t2.name, t1.age, t1.weight from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"dog name\": [{\"dogs\": [\"name\"]}, {\"dogs_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"dog name\" refers to the schema \"dogs\".\"name\"",
        "clear_ambiguity": "{\"dog name\": {\"dogs\": [\"name\"]}}",
        "gold_query": "select name, age, weight from dogs where abandoned_yn = 1"
    },
    {
        "index": 497,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_to , date_effective_from , version_number , template_details , template_id , template_type_code  | documents : template_id , document_description , document_id , other_details , document_name  | documents_template_id : document_id , template_id  | paragraphs : paragraph_id , document_id , paragraph_text , other_details ",
        "schema_with_content": "ref_template_types : template_type_code (\"PP\", \"CV\", \"PPT\"), template_type_description (\"CV\", \"Advertisement\", \"Book\") | templates : date_effective_to (\"1974-09-14 06:34:39\", \"1976-10-28 10:08:50\", \"1980-05-07 12:15:47\"), date_effective_from (\"1984-08-07 13:36:26\", \"1975-10-20 02:28:58\", \"1997-04-17 08:29:44\"), version_number (4, 8, 9), template_details (\"\"), template_id (8, 14, 22), template_type_code (\"CV\", \"BK\", \"AD\") | documents : template_id (10, 10, 20), document_description (\"u\", \"y\", \"k\"), document_id (50123, 385906526, 3), other_details (None), document_name (\"Welcome to NY\", \"Do not panic\", \"Learning French\") | documents_template_id : document_id (16514113, 82, 801801), template_id (10, 10, 20) | paragraphs : paragraph_id (571212310, 1104059, 608931827), document_id (3540024, 385906526, 3830), paragraph_text (\"Somalia\", \"Senegal\", \"Japan\"), other_details (None)",
        "ambiguous_queries": [
            "select document_id, template_id, document_description from documents where document_name = 'Robbin CV'",
            "select t1.document_id, t2.template_id, t1.document_description from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_name = 'Robbin CV'"
        ],
        "gold_ambiguity": {
            "match": "{\"template id\": [{\"documents\": [\"document_id\"]}, {\"documents_template_id\": [\"document_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template id\" refers to the schema \"documents\".\"document_id\"",
        "clear_ambiguity": "{\"template id\": {\"documents\": [\"document_id\"]}}",
        "gold_query": "select document_id, template_id, document_description from documents where document_name = 'Robbin CV'"
    },
    {
        "index": 498,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What are the names and descriptions of all the sections?",
        "schema_without_content": "addresses : other_address_details , city , country , line_2 , line_1 , address_id , zip_postcode , line_3 , state_province_county  | courses : course_description , course_name , course_id , other_details  | departments : department_id , department_name , department_description , other_details  | degree_programs : degree_summary_name , department_id , degree_program_id , other_details , degree_summary_description  | sections : course_id , section_name , other_details , section_id , section_description  | sections_section_name : section_id , section_name  | semesters : other_details , semester_name , semester_description , semester_id  | students : first_name , email_address , permanent_address_id , other_student_details , cell_mobile_number , date_left , date_first_registered , current_address_id , last_name , middle_name , ssn , student_id  | student_enrolment : semester_id , student_id , student_enrolment_id , other_details , degree_program_id  | student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : other_address_details (None), city (\"Michelleburgh\", \"Herzoghaven\", \"Port Evanston\"), country (\"New Caledonia\", \"Norfolk Island\", \"Bermuda\"), line_2 (\"Suite 865\", \"Apt. 583\", \"Suite 865\"), line_1 (\"67942 Carlotta Ferry Apt. 686\", \"2294 Grant Square Apt. 235\", \"858 Peggie Bypass Suite 212\"), address_id (12, 11, 9), zip_postcode (\"446\", \"902\", \"777\"), line_3 (None), state_province_county (\"Florida\", \"Delaware\", \"SouthDakota\") | courses : course_description (\"v\", \"w\", \"n\"), course_name (\"os\", \"en\", \"oop\"), course_id (9, 11, 2), other_details (None) | departments : department_id (7, 3, 8), department_name (\"medical\", \"computer science\", \"engineer\"), department_description (\"autem\", \"ea\", \"in\"), other_details (None) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (12, 4, 15), degree_program_id (10, 3, 9), other_details (None), degree_summary_description (\"quam\", \"earum\", \"quam\") | sections : course_id (5, 7, 6), section_name (\"o\", \"g\", \"y\"), other_details (None), section_id (3, 10, 12), section_description (\"voluptas\", \"nesciunt\", \"facilis\") | sections_section_name : section_id (7, 10, 12), section_name (\"o\", \"g\", \"y\") | semesters : other_details (None), semester_name (\"fall 2010\", \"spring 2015\", \"spring 2012\"), semester_description (\"g\", \"y\", \"q\"), semester_id (8, 14, 9) | students : first_name (\"Milton\", \"Deon\", \"Timmothy\"), email_address (\"nya.lesch@example.net\", \"swift.kolby@example.com\", \"jhuel@example.com\"), permanent_address_id (5, 4, 15), other_student_details (\"quia\", \"assumenda\", \"qui\"), cell_mobile_number (\"436.613.7683\", \"1-009-710-5151\", \"07661787471\"), date_left (\"1971-05-17 19:28:49\", \"2006-08-04 17:26:49\", \"1982-06-11 00:25:39\"), date_first_registered (\"2007-08-29 23:25:41\", \"2014-03-28 05:48:23\", \"1982-06-19 13:15:18\"), current_address_id (12, 12, 10), last_name (\"Kemmer\", \"Gleichner\", \"Jaskolski\"), middle_name (\"Cleve\", \"Brooklyn\", \"Violet\"), ssn (\"248\", \"156\", \"668\"), student_id (8, 4, 13) | student_enrolment : semester_id (13, 13, 2), student_id (12, 6, 9), student_enrolment_id (15, 10, 2), other_details (None), degree_program_id (2, 5, 9) | student_enrolment_courses : student_course_id (1, 2, 8), student_enrolment_id (5, 13, 8), course_id (14, 8, 3) | transcripts : transcript_date (\"1975-05-06 12:04:47\", \"1975-05-20 18:31:21\", \"1975-05-06 12:04:47\"), other_details (None), transcript_id (10, 11, 9) | transcript_contents : transcript_id (2, 6, 11), student_course_id (45105806, 70882679, 8)",
        "ambiguous_queries": [
            "select section_name, section_description from sections",
            "select t2.section_name, t1.section_description from sections as t1 join sections_section_name as t2 on t1.section_id = t2.section_id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"sections\": [\"section_name\"]}, {\"sections_section_name\": [\"section_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"sections\".\"section_name\"",
        "clear_ambiguity": "{\"names\": {\"sections\": [\"section_name\"]}}",
        "gold_query": "select section_name, section_description from sections"
    },
    {
        "index": 499,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : home_phone 997-7627\", city , owner_id , first_name , email_address , state , last_name , zip_code , cell_number 9217952551\", \"1-739-421-2225x38148\", street  | owners_email_address : email_address , owner_id  | dogs : owner_id , abandoned_yn , name , date_departed , breed_code , date_of_birth , date_adopted , date_arrived , weight , dog_id , age , size_code , gender  | professionals : cell_number , city , first_name , last_name , professional_id , street , zip_code , email_address , role_code , state , home_phone 0259033559\", \"1-609-566-2752x25197\" | treatments : treatment_id , date_of_treatment , dog_id , treatment_type_code , cost_of_treatment , professional_id ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : home_phone (\"066.264.7885\", \"066.264.7885\", \"(058)997-7627\"), city (\"Lake Tia\", \"West Leonard\", \"Port Zackery\"), owner_id (14, 8, 13), first_name (\"Lorenz\", \"Adelle\", \"Gay\"), email_address (\"hudson.favian@example.com\", \"christy49@example.org\", \"pearlie18@example.com\"), state (\"NewYork\", \"Pennsylvania\", \"Mississippi\"), last_name (\"Stoltenberg\", \"Price\", \"Price\"), zip_code (\"92406\", \"02647\", \"35747\"), cell_number (\"559.874.3011x989\", \"+70(4)9217952551\", \"1-739-421-2225x38148\"), street (\"1858 Jan Park\", \"60352 Kayleigh Crossing Suite 700\", \"2417 Keara Stravenue Apt. 146\") | owners_email_address : email_address (\"hudson.favian@example.com\", \"christy49@example.org\", \"pearlie18@example.com\"), owner_id (7, 11, 7) | dogs : owner_id (14, 14, 2), abandoned_yn (\"1\", \"0\"), name (\"Hipolito\", \"Jesus\", \"George\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 10:25:46\", \"2018-03-25 13:07:04\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2015-02-26 21:31:22\", \"2010-11-11 07:11:53\", \"2012-05-31 08:01:36\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-08 15:03:00\", \"2018-02-25 23:45:30\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-10-24 04:45:13\", \"2017-07-25 15:19:07\"), weight (\"3.52\", \"1.39\", \"4.01\"), dog_id (14, 12, 14), age (\"6\", \"8\", \"4\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\") | professionals : cell_number (\"499-434-0215x1628\", \"461-801-2600\", \"00230569697\"), city (\"New Laurytown\", \"Domenickton\", \"West Heidi\"), first_name (\"Ruben\", \"Lesly\", \"Lesly\"), last_name (\"Frami\", \"O'Reilly\", \"O'Reilly\"), professional_id (6, 8, 2), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), zip_code (\"80775\", \"33020\", \"67980\"), email_address (\"marquardt.furman@example.org\", \"mekhi.little@example.org\", \"lambert62@example.org\"), role_code (\"Employee\", \"Veterenarian\"), state (\"Connecticut\", \"Utah\", \"California\"), home_phone (\"346.594.3739\", \"+02(1)0259033559\", \"1-609-566-2752x25197\") | treatments : treatment_id (15, 1, 2), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-02-26 09:08:53\", \"2018-03-24 22:25:58\"), dog_id (2, 12, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (147, 514, 945), professional_id (8, 8, 6)",
        "ambiguous_queries": [
            "select first_name, last_name, email_address from owners where state like '%North%'",
            "select t1.first_name, t1.last_name, t2.email_address from owners as t1 join owners_email_address as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
        ],
        "gold_ambiguity": {
            "match": "{\"email\": [{\"owners\": [\"email_address\"]}, {\"owners_email_address\": [\"email_address\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"email\" refers to the schema \"owners\".\"email_address\"",
        "clear_ambiguity": "{\"email\": {\"owners\": [\"email_address\"]}}",
        "gold_query": "select first_name, last_name, email_address from owners where state like '%North%'"
    },
    {
        "index": 500,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "schema_without_content": "stadium : average , location , lowest , name , stadium_id , highest , capacity  | singer : song_name , name , age , singer_id , is_male , song_release_year , country  | singer_name : singer_id , name  | concert : theme , stadium_id , concert_id , year , concert_name  | singer_in_concert : singer_id , concert_id ",
        "schema_with_content": "stadium : average (638, 1477, 615), location (\"Alloa Athletic\", \"Raith Rovers\", \"Brechin City\"), lowest (315, 411, 1057), name (\"Stark's Park\", \"Bayview Stadium\", \"Stark's Park\"), stadium_id (10, 4, 9), highest (1763, 2363, 4812), capacity (3960, 10104, 3808) | singer : song_name (\"Gentleman\", \"You\", \"Gentleman\"), name (\"Justin Brown\", \"John Nizinik\", \"Justin Brown\"), age (43, 25, 43), singer_id (5, 1, 6), is_male (\"F\", \"T\"), song_release_year (\"2008\", \"2016\", \"2016\"), country (\"Netherlands\", \"United States\", \"France\") | singer_name : singer_id (5, 3, 2), name (\"Justin Brown\", \"John Nizinik\", \"Justin Brown\") | concert : theme (\"Free choice\", \"Party All Night\", \"Party All Night\"), stadium_id (\"10\", \"9\", \"1\"), concert_id (4, 6, 6), year (\"2014\", \"2015\"), concert_name (\"Super bootcamp\", \"Week 2\", \"Auditions\") | singer_in_concert : singer_id (\"3\", \"2\", \"2\"), concert_id (4, 1, 4)",
        "ambiguous_queries": [
            "select name, country from singer where song_name like '%Hey%'",
            "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"singer\": [\"name\"]}, {\"singer_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"singer\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"singer\": [\"name\"]}}",
        "gold_query": "select name, country from singer where song_name like '%Hey%'"
    },
    {
        "index": 501,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "schema_without_content": "addresses : line_2 , address_id , country , zip_postcode , other_address_details , line_3 , state_province_county , line_1 , city  | courses : course_id , course_name , course_description , other_details  | departments : department_name , department_id , other_details , department_description  | degree_programs : degree_summary_description , degree_program_id , department_id , degree_summary_name , other_details  | sections : section_id , section_name , course_id , other_details , section_description  | semesters : other_details , semester_id , semester_description , semester_name  | students : first_name , current_address_id , last_name , email_address , other_student_details , student_id , ssn , middle_name , permanent_address_id , cell_mobile_number , date_left , date_first_registered  | students_last_name : student_id , last_name  | student_enrolment : degree_program_id , student_id , semester_id , student_enrolment_id , other_details  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : line_2 (\"Apt. 388\", \"Apt. 305\", \"Apt. 388\"), address_id (11, 7, 8), country (\"Iceland\", \"Angola\", \"Iceland\"), zip_postcode (\"839\", \"777\", \"148\"), other_address_details (None), line_3 (None), state_province_county (\"WestVirginia\", \"Delaware\", \"Virginia\"), line_1 (\"858 Peggie Bypass Suite 212\", \"0144 Lamar Plaza Apt. 346\", \"9283 Schulist Falls Apt. 037\"), city (\"Mariliehaven\", \"Port Oceane\", \"Lake Laishafurt\") | courses : course_id (15, 4, 14), course_name (\"ai\", \"ml\", \"en\"), course_description (\"b\", \"k\", \"l\"), other_details (None) | departments : department_name (\"drama\", \"biology\", \"geography\"), department_id (7, 6, 2), other_details (None), department_description (\"ea\", \"natus\", \"aliquam\") | degree_programs : degree_summary_description (\"quam\", \"placeat\", \"cumque\"), degree_program_id (13, 6, 9), department_id (13, 8, 15), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None) | sections : section_id (3, 12, 5), section_name (\"g\", \"j\", \"k\"), course_id (2, 5, 2), other_details (None), section_description (\"nesciunt\", \"ad\", \"facilis\") | semesters : other_details (None), semester_id (9, 10, 15), semester_description (\"c\", \"w\", \"c\"), semester_name (\"spring 2014\", \"spring 2012\", \"spring 2016\") | students : first_name (\"Stanford\", \"Helga\", \"Frida\"), current_address_id (7, 9, 14), last_name (\"Christiansen\", \"Weimann\", \"Mohr\"), email_address (\"lhartmann@example.org\", \"mya88@example.org\", \"jhuel@example.com\"), other_student_details (\"assumenda\", \"facilis\", \"facilis\"), student_id (14, 13, 1), ssn (\"402\", \"3\", \"156\"), middle_name (\"Brooklyn\", \"Mona\", \"Osborne\"), permanent_address_id (8, 14, 5), cell_mobile_number (\"1-009-710-5151\", \"877.549.9067x8723\", \"03174364122\"), date_left (\"1971-05-17 19:28:49\", \"1990-09-01 05:03:27\", \"2006-08-04 17:26:49\"), date_first_registered (\"1997-03-20 16:47:25\", \"1986-02-24 21:12:23\", \"1997-03-20 16:47:25\") | students_last_name : student_id (12, 7, 14), last_name (\"Christiansen\", \"Weimann\", \"Mohr\") | student_enrolment : degree_program_id (12, 5, 8), student_id (5, 7, 4), semester_id (13, 9, 6), student_enrolment_id (6, 1, 8), other_details (None) | student_enrolment_courses : student_course_id (83814225, 681404, 7), course_id (8, 10, 4), student_enrolment_id (2, 9, 6) | transcripts : other_details (None), transcript_id (3, 15, 5), transcript_date (\"1990-03-05 11:59:41\", \"1988-04-30 01:19:47\", \"1990-03-05 11:59:41\") | transcript_contents : transcript_id (5, 12, 6), student_course_id (0, 70882679, 2)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_left asc limit 1",
            "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"students\": [\"last_name\"]}, {\"students_last_name\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"students_last_name\".\"last_name\"",
        "clear_ambiguity": "{\"last name\": {\"students_last_name\": [\"last_name\"]}}",
        "gold_query": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "index": 502,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "schema_without_content": "city : district , population , countrycode , id , name  | sqlite_sequence : name , seq  | country : code , population , headofstate , code2 , indepyear , capital , region , lifeexpectancy , continent , governmentform , surfacearea , gnp , localname , gnpold , name  | country_population : code , population  | countrylanguage : isofficial , language , countrycode , percentage ",
        "schema_with_content": "city : district (\"Asyut\", \"Santa Ana\", \"Adygea\"), population (104585, 94443, 91100), countrycode (\"BEN\", \"PAN\", \"NRU\"), id (960, 2395, 1782), name (\"NaÃ§ala-Porto\", \"Sabadell\", \"Tianmen\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"SVK\", \"ESH\", \"CXR\"), population (6485000, 9586000, 170115000), headofstate (\"Hans-Adam II\", \"Vicente Fox Quesada\", \"Robert KotÅ¡arjan\"), code2 (\"AQ\", \"BB\", \"CX\"), indepyear (1956, 1981, 1975), capital (2511, 3171, 4074), region (\"Australia and New Zealand\", \"South America\", \"Australia and New Zealand\"), lifeexpectancy (41.3, 79.5, 66.2), continent (\"Africa\", \"Antarctica\", \"North America\"), governmentform (\"Islamic Republic\", \"Socialistic State\", \"Occupied by Marocco\"), surfacearea (1904569.0, 323877.0, 549.0), gnp (510.0, 2841.0, 612.0), localname (\"Sierra Leone\", \"Angola\", \"United States\"), gnpold (3338.0, 215002.0, 2190.0), name (\"Wallis and Futuna\", \"Uruguay\", \"Liechtenstein\") | country_population : code (\"IRQ\", \"AUS\", \"MKD\"), population (6485000, 9586000, 170115000) | countrylanguage : isofficial (\"T\", \"F\"), language (\"Uzbek\", \"Northsotho\", \"Kiga\"), countrycode (\"JOR\", \"PRK\", \"IRL\"), percentage (32.5, 6.9, 81.2)",
        "ambiguous_queries": [
            "select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000",
            "select sum(t2.population), avg(t1.surfacearea) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = 'North America' and t1.surfacearea > 3000"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000"
    },
    {
        "index": 503,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give me Brazil's population and life expectancies.",
        "schema_without_content": "city : name , id , countrycode , population , district  | sqlite_sequence : name , seq  | country : gnp , name , headofstate , localname , code , code2 , lifeexpectancy , population , indepyear , governmentform , region , gnpold , surfacearea , capital , continent  | country_population : code , population  | countrylanguage : language , percentage , isofficial , countrycode ",
        "schema_with_content": "city : name (\"San Bernardino\", \"Candelaria\", \"Koyang\"), id (2157, 3161, 1199), countrycode (\"RWA\", \"FSM\", \"PHL\"), population (393664, 177000, 172710), district (\"Shamal Sina\", \"Tel Aviv\", \"Daloa\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnp (11705.0, 16321.0, 8287.0), name (\"Equatorial Guinea\", \"Malaysia\", \"Mayotte\"), headofstate (\"Maaouiya Ould SidÂ´Ahmad Taya\", \"Miguel Trovoada\", \"Milan Kucan\"), localname (\"Papua New Guinea/Papua Niugini\", \"United States\", \"Solomon Islands\"), code (\"UZB\", \"CXR\", \"ESH\"), code2 (\"AZ\", \"SG\", \"SC\"), lifeexpectancy (78.0, 55.0, 51.1), population (190000, 18886000, 65000), indepyear (1822, 1932, 1910), governmentform (\"Territory of Australia\", \"Overseas Department of France\", \"Federation\"), region (\"Southern Africa\", \"Melanesia\", \"Central America\"), gnpold (173610.0, 10285.0, 323310.0), surfacearea (193.0, 357022.0, 322463.0), capital (2401, 2806, 539), continent (\"Antarctica\", \"Asia\", \"Antarctica\") | country_population : code (\"LKA\", \"EGY\", \"WLF\"), population (190000, 18886000, 65000) | countrylanguage : language (\"Lao-Soung\", \"Kosrean\", \"Maka\"), percentage (9.0, 2.5, 8.5), isofficial (\"T\", \"F\"), countrycode (\"RWA\", \"JPN\", \"AUT\")",
        "ambiguous_queries": [
            "select population, lifeexpectancy from country where name = 'Brazil'",
            "select t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Brazil'"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select population, lifeexpectancy from country where name = 'Brazil'"
    },
    {
        "index": 504,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "join",
        "db_file": "join/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "schema_without_content": "employee : age , city , name , employee_id  | shop : number_products , shop_id , location , district , name , manager_name  | shop_district : district , shop_id  | hiring : start_from , shop_id , employee_id , is_full_time  | evaluation : employee_id , year_awarded , bonus ",
        "schema_with_content": "employee : age (29, 43, 43), city (\"Leicester\", \"Bath\", \"Sale\"), name (\"Phil Vickery\", \"George Chuter\", \"Mark Regan\"), employee_id (10, 8, 1) | shop : number_products (6000, 5000, 5000), shop_id (1, 6, 2), location (\"Turku\", \"Espoo\", \"Kotka\"), district (\"Tehtaan kenttÃ¤\", \"Magnum Areena\", \"Jakobstads Centralplan\"), name (\"IFK Mariehamn\", \"FC KooTeePee\", \"FC Lahti\"), manager_name (\"Ilkka MÃ¤kelÃ¤\", \"Antti Muurinen\", \"Tommi Kautonen\") | shop_district : district (\"Tehtaan kenttÃ¤\", \"Magnum Areena\", \"Jakobstads Centralplan\"), shop_id (7, 5, 7) | hiring : start_from (\"2003\", \"2008\", \"2011\"), shop_id (8, 6, 4), employee_id (1, 1, 1), is_full_time (\"T\", \"F\") | evaluation : employee_id (\"1\", \"10\", \"2\"), year_awarded (\"2017\", \"2017\", \"2015\"), bonus (4000.0, 3200.0, 3200.0)",
        "ambiguous_queries": [
            "select manager_name, district from shop order by number_products desc limit 1",
            "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"shop\": [\"district\"]}, {\"shop_district\": [\"district\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"shop_district\".\"district\"",
        "clear_ambiguity": "{\"district\": {\"shop_district\": [\"district\"]}}",
        "gold_query": "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
    },
    {
        "index": 505,
        "db_id": "singer",
        "ambig_type": "join",
        "db_file": "join/singer/singer.sqlite",
        "question": "What are the birth year and citizenship of singers?",
        "schema_without_content": "singer : citizenship , birth_year , singer_id , name , net_worth_millions  | singer_birth_year : singer_id , birth_year  | song : sales , singer_id , highest_position , title \", \"Yeah\", song_id ",
        "schema_with_content": "singer : citizenship (\"Australia\", \"Chile\", \"Germany\"), birth_year (1953.0, 1940.0, 1949.0), singer_id (8, 4, 8), name (\"Liliane Bettencourt\", \"Gina Rinehart\", \"Susanne Klatten\"), net_worth_millions (17.8, 30.0, 14.3) | singer_birth_year : singer_id (2, 2, 6), birth_year (1953.0, 1940.0, 1949.0) | song : sales (275000.0, 552407.0, 1094000.0), singer_id (7, 6, 6), highest_position (1.0, 3.0), title (\"Call on Me\", \"F**k It (I Don't Want You Back)\", \"Yeah\"), song_id (7, 8, 1)",
        "ambiguous_queries": [
            "select birth_year, citizenship from singer",
            "select t2.birth_year, t1.citizenship from singer as t1 join singer_birth_year as t2 on t1.singer_id = t2.singer_id"
        ],
        "gold_ambiguity": {
            "match": "{\"birth year\": [{\"singer\": [\"birth_year\"]}, {\"singer_birth_year\": [\"birth_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth year\" refers to the schema \"singer\".\"birth_year\"",
        "clear_ambiguity": "{\"birth year\": {\"singer\": [\"birth_year\"]}}",
        "gold_query": "select birth_year, citizenship from singer"
    },
    {
        "index": 506,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "schema_without_content": "city : name , countrycode , population , district , id  | sqlite_sequence : seq , name  | country : capital , region , headofstate , gnpold , indepyear , code , governmentform , gnp , lifeexpectancy , population , surfacearea , continent , name , localname , code2  | country_headofstate : code , headofstate  | countrylanguage : language , isofficial , percentage , countrycode ",
        "schema_with_content": "city : name (\"Daloa\", \"Liaoyuan\", \"Blumenau\"), countrycode (\"GMB\", \"NIC\", \"MUS\"), population (108574, 122106, 115000), district (\"Kaolack\", \"Miyazaki\", \"Kemerovo\"), id (1783, 277, 1903) | sqlite_sequence : seq (4079), name (\"city\") | country : capital (3426, 2331, 3173), region (\"Northern Africa\", \"Eastern Asia\", \"Micronesia\"), headofstate (\"Abdelaziz Bouteflika\", \"Letsie III\", \"HipÃ³lito MejÃ­a DomÃ­nguez\"), gnpold (1136.0, 1863.0, 30373.0), indepyear (1978, 1993, -1523), code (\"TUN\", \"HUN\", \"ABW\"), governmentform (\"Republic\", \"Nonmetropolitan Territory of France\", \"People'sRepublic\"), gnp (96.0, 5749.0, 6232.0), lifeexpectancy (71.3, 74.4, 70.7), population (10043200, 861000, 3615000), surfacearea (2166090.0, 236800.0, 5130.0), continent (\"Europe\", \"South America\", \"Asia\"), name (\"Djibouti\", \"Yemen\", \"Pakistan\"), localname (\"South Africa\", \"RepÃºblica Dominicana\", \"Tuvalu\"), code2 (\"HR\", \"TV\", \"CH\") | country_headofstate : code (\"DNK\", \"GEO\", \"IRQ\"), headofstate (\"Abdelaziz Bouteflika\", \"Letsie III\", \"HipÃ³lito MejÃ­a DomÃ­nguez\") | countrylanguage : language (\"Gorane\", \"Herero\", \"Marathi\"), isofficial (\"T\", \"F\"), percentage (5.0, 9.7, 16.9), countrycode (\"DEU\", \"AZE\", \"PRI\")",
        "ambiguous_queries": [
            "select name, population, headofstate from country order by surfacearea desc limit 1",
            "select t1.name, t1.population, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"head of state\": [{\"country\": [\"headofstate\"]}, {\"country_headofstate\": [\"headofstate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"head of state\" refers to the schema \"country\".\"headofstate\"",
        "clear_ambiguity": "{\"head of state\": {\"country\": [\"headofstate\"]}}",
        "gold_query": "select name, population, headofstate from country order by surfacearea desc limit 1"
    },
    {
        "index": 507,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_from , template_type_code , version_number , template_id , template_details , date_effective_to  | documents : document_name , document_description , other_details , template_id , document_id  | documents_document_description : document_description , document_id  | paragraphs : other_details , paragraph_text , document_id , paragraph_id ",
        "schema_with_content": "ref_template_types : template_type_description (\"CV\", \"Presentation\", \"CV\"), template_type_code (\"BK\", \"AD\", \"PPT\") | templates : date_effective_from (\"1986-11-14 12:20:18\", \"1986-11-14 12:20:18\", \"2008-08-01 13:57:26\"), template_type_code (\"AD\", \"BK\", \"BK\"), version_number (0, 8, 4), template_id (1, 22, 19), template_details (\"\"), date_effective_to (\"1989-11-24 19:06:06\", \"1973-01-12 14:13:34\", \"2000-10-22 11:57:12\") | documents : document_name (\"Introduction of OS\", \"Data base\", \"How Google people work\"), document_description (\"f\", \"z\", \"r\"), other_details (None), template_id (11, 7, 6), document_id (1, 16514113, 0) | documents_document_description : document_description (\"f\", \"z\", \"r\"), document_id (82, 385906526, 3830) | paragraphs : other_details (None), paragraph_text (\"Jersey\", \"Palestinian Territory\", \"Jersey\"), document_id (80, 2394, 33930), paragraph_id (3708, 571212310, 608931827)",
        "ambiguous_queries": [
            "select document_id, template_id, document_description from documents where document_name = 'Robbin CV'",
            "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id where t1.document_name = 'Robbin CV'"
        ],
        "gold_ambiguity": {
            "match": "{\"description\": [{\"documents\": [\"document_description\"]}, {\"documents_document_description\": [\"document_description\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"description\" refers to the schema \"documents\".\"document_description\"",
        "clear_ambiguity": "{\"description\": {\"documents\": [\"document_description\"]}}",
        "gold_query": "select document_id, template_id, document_description from documents where document_name = 'Robbin CV'"
    },
    {
        "index": 508,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "schema_without_content": "stadium : lowest , average , highest , name , stadium_id , location , capacity  | singer : song_release_year , name , singer_id , country , is_male , song_name , age  | singer_country : singer_id , country  | concert : stadium_id , concert_name , concert_id , year , theme  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : lowest (411, 1294, 400), average (2106, 638, 2106), highest (1125, 1980, 780), name (\"Balmoor\", \"Stark's Park\", \"Somerset Park\"), stadium_id (5, 4, 2), location (\"Ayr United\", \"Brechin City\", \"Brechin City\"), capacity (4000, 3100, 11998) | singer : song_release_year (\"2003\", \"2016\", \"2014\"), name (\"Joe Sharp\", \"Tribal King\", \"Timbaland\"), singer_id (3, 2, 1), country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), song_name (\"Love\", \"Dangerous\", \"Dangerous\"), age (41, 29, 32) | singer_country : singer_id (6, 5, 1), country (\"Netherlands\", \"United States\", \"France\") | concert : stadium_id (\"9\", \"2\", \"7\"), concert_name (\"Week 2\", \"Auditions\", \"Home Visits\"), concert_id (5, 5, 4), year (\"2014\", \"2015\"), theme (\"Party All Night\", \"Party All Night\", \"Bleeding Love\") | singer_in_concert : concert_id (1, 2, 3), singer_id (\"6\", \"2\", \"6\")",
        "ambiguous_queries": [
            "select name, country, age from singer order by age desc",
            "select t1.name, t2.country, t1.age from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
        ],
        "gold_ambiguity": {
            "match": "{\"countries\": [{\"singer\": [\"country\"]}, {\"singer_country\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"countries\" refers to the schema \"singer\".\"country\"",
        "clear_ambiguity": "{\"countries\": {\"singer\": [\"country\"]}}",
        "gold_query": "select name, country, age from singer order by age desc"
    },
    {
        "index": 509,
        "db_id": "battle_death",
        "ambig_type": "join",
        "db_file": "join/battle_death/battle_death.sqlite",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "schema_without_content": "battle : result , name , date , id , latin_commander , bulgarian_commander  | battle_result : id , result  | ship : tonnage , disposition_of_ship , lost_in_battle , name , id , ship_type , location  | death : injured , killed , caused_by_ship_id , id , note ",
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), name (\"Battle of Rusion\", \"Battle of Boruy\", \"Battle of Adrianople\"), date (\"February 1206\", \"14 April 1205\", \"4 September 1207\"), id (6, 5, 8), latin_commander (\"Boniface of Montferrat\", \"Thierry de Termond\", \"Boniface of Montferrat\"), bulgarian_commander (\"Unknown\", \"Boril\", \"Boril\") | battle_result : id (3, 3, 2), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\") | ship : tonnage (\"t\", \"391\", \"225\"), disposition_of_ship (\"Wrecked\", \"Scuttled\", \"Scuttled\"), lost_in_battle (5, 6, 5), name (\"Mary\", \"HMS Avon\", \"Three Brothers\"), id (2, 1, 3), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\") | death : injured (0, 9, 5), killed (4, 0, 29), caused_by_ship_id (6, 1, 5), id (12, 6, 13), note (\"Sundargarh, Odisha\", \"WestMidnapore, West Bengal\", \"Gajapati, Odisha\")",
        "ambiguous_queries": [
            "select name, result from battle where bulgarian_commander != 'Boril'",
            "select t1.name, t2.result from battle as t1 join battle_result as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'"
        ],
        "gold_ambiguity": {
            "match": "{\"results\": [{\"battle\": [\"result\"]}, {\"battle_result\": [\"result\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"results\" refers to the schema \"battle_result\".\"result\"",
        "clear_ambiguity": "{\"results\": {\"battle_result\": [\"result\"]}}",
        "gold_query": "select t1.name, t2.result from battle as t1 join battle_result as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'"
    },
    {
        "index": 510,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , version_number , template_type_code , date_effective_to , template_id , date_effective_from  | templates_version_number : version_number , template_id  | documents : template_id , other_details , document_id , document_name , document_description  | paragraphs : paragraph_id , document_id , paragraph_text , other_details ",
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"Book\", \"Presentation\"), template_type_code (\"PPT\", \"BK\", \"BK\") | templates : template_details (\"\"), version_number (2, 7, 4), template_type_code (\"PP\", \"PPT\", \"CV\"), date_effective_to (\"1993-03-24 14:30:23\", \"1976-10-28 10:08:50\", \"1998-05-12 12:51:29\"), template_id (4, 10, 1), date_effective_from (\"1996-02-04 11:27:24\", \"1984-08-07 13:36:26\", \"2005-02-20 00:31:34\") | templates_version_number : version_number (2, 7, 4), template_id (21, 25, 11) | documents : template_id (25, 14, 22), other_details (None), document_id (0, 3830, 3540024), document_name (\"Understanding DB\", \"Customer reviews\", \"How Google people work\"), document_description (\"z\", \"h\", \"h\") | paragraphs : paragraph_id (608931827, 7, 280120913), document_id (80, 651512, 3), paragraph_text (\"Ukraine\", \"Papua New Guinea\", \"UK\"), other_details (None)",
        "ambiguous_queries": [
            "select version_number, template_type_code from templates where version_number > 5",
            "select t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5"
        ],
        "gold_ambiguity": {
            "match": "{\"version number\": [{\"templates\": [\"version_number\"]}, {\"templates_version_number\": [\"version_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"version number\" refers to the schema \"templates\".\"version_number\"",
        "clear_ambiguity": "{\"version number\": {\"templates\": [\"version_number\"]}}",
        "gold_query": "select version_number, template_type_code from templates where version_number > 5"
    },
    {
        "index": 511,
        "db_id": "car_1",
        "ambig_type": "join",
        "db_file": "join/car_1/car_1.sqlite",
        "question": "What is the average weight of cars each year?",
        "schema_without_content": "continents : continent , contid  | countries : countryname , countryid , continent  | car_makers : id , country , fullname , maker  | model_list : model , maker , modelid  | car_names : make \", \"volkswagen rabbit l\", makeid , model  | cars_data : year , horsepower , edispl , mpg , accelerate , weight , id , cylinders  | cars_data_weight : id , weight ",
        "schema_with_content": "continents : continent (\"africa\", \"europe\", \"asia\"), contid (1, 3, 2) | countries : countryname (\"uk\", \"uk\", \"nigeria\"), countryid (3, 6, 6), continent (4, 3, 4) | car_makers : id (9, 18, 3), country (\"2\", \"3\", \"8\"), fullname (\"Honda\", \"Daimler Benz\", \"Saab\"), maker (\"mazda\", \"honda\", \"mazda\") | model_list : model (\"chevrolet\", \"volkswagen\", \"renault\"), maker (22, 21, 19), modelid (15, 35, 35) | car_names : make (\"audi 4000\", \"amc matador (sw)\", \"volkswagen rabbit l\"), makeid (351, 350, 365), model (\"dodge\", \"amc\", \"bmw\") | cars_data : year (1971, 1982, 1976), horsepower (\"165\", \"90\", \"64\"), edispl (111.0, 120.0, 305.0), mpg (\"19.8\", \"39.4\", \"34.1\"), accelerate (16.9, 13.5, 17.9), weight (2639, 3892, 3432), id (394, 371, 257), cylinders (4, 4, 3) | cars_data_weight : id (96, 263, 132), weight (2639, 3892, 3432)",
        "ambiguous_queries": [
            "select avg(weight), year from cars_data group by year",
            "select avg(t2.weight), t1.year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by t1.year"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"cars_data\": [\"weight\"]}, {\"cars_data_weight\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"cars_data_weight\".\"weight\"",
        "clear_ambiguity": "{\"weight\": {\"cars_data_weight\": [\"weight\"]}}",
        "gold_query": "select avg(t2.weight), t1.year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by t1.year"
    },
    {
        "index": 512,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "schema_without_content": "city : district , population , countrycode , name , id  | sqlite_sequence : seq , name  | country : region , name , continent , population , indepyear , localname , governmentform , code , gnpold , gnp , code2 , headofstate , surfacearea , lifeexpectancy , capital  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : percentage , isofficial , language , countrycode ",
        "schema_with_content": "city : district (\"Arecibo\", \"Tirana\", \"Shiga\"), population (121000, 96500, 149665), countrycode (\"NIC\", \"MRT\", \"JAM\"), name (\"El Alto\", \"Kediri\", \"Okara\"), id (1330, 673, 1638) | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Western Europe\", \"Australia and New Zealand\", \"Micronesia/Caribbean\"), name (\"East Timor\", \"Turks and Caicos Islands\", \"Tonga\"), continent (\"Europe\", \"North America\", \"Antarctica\"), population (6695000, 111506000, 6188000), indepyear (1993, 1825, 1878), localname (\"Â´Uman\", \"Malta\", \"Canada\"), governmentform (\"Commonwealth of the US\", \"Administrated by the UN\", \"Federation\"), code (\"MDA\", \"CHE\", \"TMP\"), gnpold (5940.0, 6180.0, 19769.0), gnp (818.0, 14194.0, 11345.0), code2 (\"GP\", \"CU\", \"TJ\"), headofstate (\"Paul Kagame\", \"Bhumibol Adulyadej\", \"Laurent Gbagbo\"), surfacearea (316.0, 5130.0, 551500.0), lifeexpectancy (68.5, 60.8, 77.9), capital (3014, 2882, 2710) | country_lifeexpectancy : code (\"IRN\", \"FSM\", \"PSE\"), lifeexpectancy (68.5, 60.8, 77.9) | countrylanguage : percentage (7.5, 11.1, 27.8), isofficial (\"T\", \"F\"), language (\"Ganda\", \"Gaeli\", \"Urdu\"), countrycode (\"ITA\", \"IRL\", \"COM\")",
        "ambiguous_queries": [
            "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
            "select sum(t1.population), avg(t2.lifeexpectancy), t1.continent from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code group by t1.continent having avg(t2.lifeexpectancy) < 72"
        ],
        "gold_ambiguity": {
            "match": "{\"life expectancy\": [{\"country\": [\"lifeexpectancy\"]}, {\"country_lifeexpectancy\": [\"lifeexpectancy\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"life expectancy\" refers to the schema \"country_lifeexpectancy\".\"lifeexpectancy\"",
        "clear_ambiguity": "{\"life expectancy\": {\"country_lifeexpectancy\": [\"lifeexpectancy\"]}}",
        "gold_query": "select sum(t1.population), avg(t2.lifeexpectancy), t1.continent from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code group by t1.continent having avg(t2.lifeexpectancy) < 72"
    },
    {
        "index": 513,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "schema_without_content": "city : id , district , countrycode , population , name  | sqlite_sequence : seq , name  | country : population , gnpold , code2 , capital , continent , governmentform , localname , region , gnp , name , surfacearea , headofstate , code , lifeexpectancy , indepyear  | country_surfacearea : code , surfacearea  | countrylanguage : countrycode , isofficial , percentage , language ",
        "schema_with_content": "city : id (3752, 46, 1659), district (\"Rjazan\", \"ZÃ¼rich\", \"Sisilia\"), countrycode (\"MAC\", \"SDN\", \"REU\"), population (929270, 119283, 194784), name (\"Chicago\", \"Oceanside\", \"TÃ¢rgu Mures\") | sqlite_sequence : seq (4079), name (\"city\") | country : population (32300, 2583000, 2424200), gnpold (2474.0, 2186.0, 4361.0), code2 (\"KG\", \"TF\", \"YT\"), capital (185, 1786, 2690), continent (\"Europe\", \"Asia\", \"Asia\"), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Emirate Federation\", \"Nonmetropolitan Territory of France\"), localname (\"Nederland\", \"Qazaqstan\", \"Uzbekiston\"), region (\"North America\", \"Micronesia/Caribbean\", \"Northern Africa\"), gnp (21929.0, 17000.0, 10226.0), name (\"Uganda\", \"Palau\", \"Saint Pierre and Miquelon\"), surfacearea (260.0, 505992.0, 112088.0), headofstate (\"Alpha Oumar KonarÃ©\", \"Bernard Dowiyogo\", \"Islam Karimov\"), code (\"CIV\", \"PRY\", \"SOM\"), lifeexpectancy (42.9, 69.1, 59.8), indepyear (1830, 1810, 1984) | country_surfacearea : code (\"BEN\", \"JAM\", \"NOR\"), surfacearea (260.0, 505992.0, 112088.0) | countrylanguage : countrycode (\"CYM\", \"MEX\", \"CAF\"), isofficial (\"T\", \"F\"), percentage (97.9, 27.7, 93.5), language (\"Bariba\", \"Nsenga\", \"Hiligaynon\")",
        "ambiguous_queries": [
            "select name, surfacearea from country order by surfacearea desc limit 5",
            "select t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t2.surfacearea desc limit 5"
        ],
        "gold_ambiguity": {
            "match": "{\"area\": [{\"country\": [\"surfacearea\"]}, {\"country_surfacearea\": [\"surfacearea\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"area\" refers to the schema \"country\".\"surfacearea\"",
        "clear_ambiguity": "{\"area\": {\"country\": [\"surfacearea\"]}}",
        "gold_query": "select name, surfacearea from country order by surfacearea desc limit 5"
    },
    {
        "index": 514,
        "db_id": "museum_visit",
        "ambig_type": "join",
        "db_file": "join/museum_visit/museum_visit.sqlite",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "schema_without_content": "museum : num_of_staff , museum_id , open_year , name  | visitor : name , level_of_membership , id , age  | visitor_name : id , name  | visit : total_spent , museum_id , num_of_ticket , visitor_id ",
        "schema_with_content": "museum : num_of_staff (15, 18, 18), museum_id (7, 1, 4), open_year (\"2012\", \"2000\", \"2008\"), name (\"Jefferson Development Museum\", \"Capital Plaza Museum\", \"Jefferson Development Museum\") | visitor : name (\"Guti Midfielder\", \"Guti Midfielder\", \"Rafael van der Vaart\"), level_of_membership (8, 5, 2), id (3, 4, 3), age (56, 28, 56) | visitor_name : id (6, 1, 4), name (\"Guti Midfielder\", \"Guti Midfielder\", \"Rafael van der Vaart\") | visit : total_spent (320.44, 20.44, 320.44), museum_id (2, 2, 4), num_of_ticket (4, 10, 4), visitor_id (\"5\", \"3\", \"6\")",
        "ambiguous_queries": [
            "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
            "select t2.name, t1.level_of_membership from visitor as t1 join visitor_name as t2 on t1.id = t2.id where t1.level_of_membership > 4 order by t1.age desc"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"visitor\": [\"name\"]}, {\"visitor_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"visitor\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"visitor\": [\"name\"]}}",
        "gold_query": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc"
    },
    {
        "index": 515,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the first student to register?",
        "schema_without_content": "addresses : line_2 , address_id , other_address_details , state_province_county , zip_postcode , line_1 , line_3 , country , city  | courses : course_id , course_description , course_name , other_details  | departments : department_description , department_id , department_name , other_details  | degree_programs : degree_program_id , degree_summary_description , other_details , department_id , degree_summary_name  | sections : section_id , course_id , section_name , section_description , other_details  | semesters : semester_name , other_details , semester_description , semester_id  | students : student_id , current_address_id , email_address , first_name , last_name , cell_mobile_number 445-0399x85208\", date_left , other_student_details , ssn , permanent_address_id , date_first_registered , middle_name  | students_last_name : last_name , student_id  | student_enrolment : semester_id , degree_program_id , other_details , student_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : line_2 (\"Apt. 388\", \"Suite 079\", \"Suite 830\"), address_id (4, 3, 11), other_address_details (None), state_province_county (\"SouthDakota\", \"Hawaii\", \"WestVirginia\"), zip_postcode (\"895\", \"638\", \"400\"), line_1 (\"7081 Eda Center\", \"74046 Metz Walk Apt. 113\", \"7081 Eda Center\"), line_3 (None), country (\"Samoa\", \"Burundi\", \"Norfolk Island\"), city (\"New Clemensburgh\", \"Port Elvisfurt\", \"Lake Laishafurt\") | courses : course_id (12, 11, 3), course_description (\"c\", \"q\", \"c\"), course_name (\"rs\", \"cal\", \"la\"), other_details (None) | departments : department_description (\"autem\", \"dolorem\", \"non\"), department_id (10, 10, 1), department_name (\"statistics\", \"medical\", \"statistics\"), other_details (None) | degree_programs : degree_program_id (12, 15, 3), degree_summary_description (\"architecto\", \"voluptas\", \"cumque\"), other_details (None), department_id (12, 14, 13), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_id (5, 8, 3), course_id (9, 6, 7), section_name (\"d\", \"e\", \"c\"), section_description (\"provident\", \"provident\", \"ex\"), other_details (None) | semesters : semester_name (\"fall 2018\", \"spring 2010\", \"spring 2015\"), other_details (None), semester_description (\"f\", \"m\", \"o\"), semester_id (6, 10, 3) | students : student_id (10, 4, 15), current_address_id (6, 12, 1), email_address (\"nya.lesch@example.net\", \"dell43@example.net\", \"jhuel@example.com\"), first_name (\"Reva\", \"Timmothy\", \"Hobart\"), last_name (\"Christiansen\", \"Rempel\", \"Mohr\"), cell_mobile_number (\"171-642-5684\", \"877.549.9067x8723\", \"(213)445-0399x85208\"), date_left (\"1990-09-01 05:03:27\", \"2007-03-31 09:53:19\", \"2007-08-02 04:12:58\"), other_student_details (\"facilis\", \"facilis\", \"voluptatem\"), ssn (\"39\", \"248\", \"\"), permanent_address_id (11, 5, 11), date_first_registered (\"2018-03-13 09:56:22\", \"1986-02-24 21:12:23\", \"2014-03-28 05:48:23\"), middle_name (\"Anna\", \"Vaughn\", \"Aaliyah\") | students_last_name : last_name (\"Christiansen\", \"Rempel\", \"Mohr\"), student_id (15, 1, 2) | student_enrolment : semester_id (1, 13, 13), degree_program_id (12, 8, 5), other_details (None), student_id (12, 1, 9), student_enrolment_id (12, 8, 14) | student_enrolment_courses : student_enrolment_id (4, 13, 5), student_course_id (70882679, 70882679, 2), course_id (10, 3, 4) | transcripts : transcript_date (\"1975-10-28 15:16:51\", \"2010-12-13 10:55:15\", \"1975-05-06 12:04:47\"), transcript_id (1, 11, 5), other_details (None) | transcript_contents : transcript_id (8, 5, 2), student_course_id (2, 96, 7)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
            "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"students\": [\"last_name\"]}, {\"students_last_name\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"students\".\"last_name\"",
        "clear_ambiguity": "{\"last name\": {\"students\": [\"last_name\"]}}",
        "gold_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1"
    },
    {
        "index": 516,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What region does Angola belong to and what is its population?",
        "schema_without_content": "city : population , district , id , name , countrycode  | sqlite_sequence : seq , name  | country : code2 , gnp , localname , region , governmentform \", lifeexpectancy , headofstate , gnpold , population , name , code , continent , surfacearea , indepyear , capital  | country_population : population , code  | countrylanguage : countrycode , percentage , language , isofficial ",
        "schema_with_content": "city : population (391170, 115571, 89089), district (\"Puno\", \"Baijeri\", \"Taizz\"), id (782, 457, 327), name (\"Napoli\", \"Kaolack\", \"Burgos\"), countrycode (\"ARG\", \"BMU\", \"SVN\") | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"SO\", \"SK\", \"ZW\"), gnp (722.0, 151697.0, 5493.0), localname (\"Tokelau\", \"Lubnan\", \"Anguilla\"), region (\"Melanesia\", \"Eastern Asia\", \"Western Africa\"), governmentform (\"Co-administrated\", \"Independent Church State\", \"Monarchy (Emirate)\"), lifeexpectancy (70.8, 78.7, 69.3), headofstate (\"Yoweri Museveni\", \"Blaise CompaorÃ©\", \"Kocheril Raman Narayanan\"), gnpold (323310.0, 1081.0, 9585.0), population (19680000, 68000, 18827000), name (\"Guyana\", \"Guinea-Bissau\", \"China\"), code (\"CZE\", \"ITA\", \"COK\"), continent (\"Europe\", \"Africa\", \"Asia\"), surfacearea (200.0, 14.0, 796095.0), indepyear (1947, 1946, -660), capital (2331, 586, 1449) | country_population : population (19680000, 68000, 18827000), code (\"ATG\", \"PRI\", \"GNB\") | countrylanguage : countrycode (\"ZWE\", \"SUR\", \"COL\"), percentage (55.1, 89.7, 19.0), language (\"Lithuanian\", \"Bajan\", \"Mam\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select population, region from country where name = 'Angola'",
            "select t2.population, t1.region from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Angola'"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select population, region from country where name = 'Angola'"
    },
    {
        "index": 517,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "schema_without_content": "addresses : state_province_county , other_address_details , address_id , zip_postcode , city , line_2 , line_1 , country , line_3  | courses : course_name , course_id , other_details , course_description  | departments : other_details , department_id , department_name , department_description  | degree_programs : degree_summary_name , other_details , degree_summary_description , department_id , degree_program_id  | sections : section_id , section_description , other_details , course_id , section_name  | semesters : semester_id , semester_name , semester_description , other_details  | students : date_first_registered , cell_mobile_number 365-8405\", \"877.549.9067x8723\", current_address_id , middle_name , permanent_address_id , email_address , date_left , other_student_details , last_name , first_name , student_id , ssn  | students_last_name : last_name , student_id  | student_enrolment : semester_id , student_enrolment_id , student_id , other_details , degree_program_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : state_province_county (\"Hawaii\", \"Florida\", \"Idaho\"), other_address_details (None), address_id (6, 11, 9), zip_postcode (\"068\", \"446\", \"068\"), city (\"Mariliehaven\", \"Port Oceane\", \"Goodwinhaven\"), line_2 (\"Apt. 335\", \"Apt. 583\", \"Apt. 406\"), line_1 (\"0144 Lamar Plaza Apt. 346\", \"16998 Mraz Lodge\", \"67942 Carlotta Ferry Apt. 686\"), country (\"Lesotho\", \"Bermuda\", \"Norfolk Island\"), line_3 (None) | courses : course_name (\"db\", \"math\", \"en\"), course_id (4, 9, 11), other_details (None), course_description (\"v\", \"n\", \"d\") | departments : other_details (None), department_id (9, 14, 6), department_name (\"dance\", \"art\", \"law\"), department_description (\"in\", \"in\", \"error\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_summary_description (\"aut\", \"quam\", \"unde\"), department_id (11, 13, 15), degree_program_id (6, 14, 8) | sections : section_id (7, 11, 9), section_description (\"reprehenderit\", \"voluptatem\", \"voluptas\"), other_details (None), course_id (7, 4, 6), section_name (\"l\", \"e\", \"a\") | semesters : semester_id (5, 4, 13), semester_name (\"winter 2010\", \"spring 2017\", \"winter 2018\"), semester_description (\"w\", \"g\", \"g\"), other_details (None) | students : date_first_registered (\"1989-05-24 23:31:29\", \"2017-01-04 08:10:25\", \"1997-03-20 16:47:25\"), cell_mobile_number (\"03174364122\", \"(507)365-8405\", \"877.549.9067x8723\"), current_address_id (12, 10, 10), middle_name (\"Mossie\", \"Anna\", \"Brooklyn\"), permanent_address_id (4, 8, 14), email_address (\"swift.kolby@example.com\", \"johns.unique@example.net\", \"lhartmann@example.org\"), date_left (\"2007-11-28 12:50:21\", \"2007-08-02 04:12:58\", \"1990-09-01 05:03:27\"), other_student_details (\"dolorum\", \"atque\", \"quia\"), last_name (\"Mohr\", \"Ankunding\", \"Kemmer\"), first_name (\"Gregg\", \"Jett\", \"Orrin\"), student_id (1, 2, 1), ssn (\"68095\", \"668\", \"3\") | students_last_name : last_name (\"Mohr\", \"Ankunding\", \"Kemmer\"), student_id (3, 15, 2) | student_enrolment : semester_id (15, 13, 5), student_enrolment_id (9, 11, 14), student_id (4, 4, 4), other_details (None), degree_program_id (5, 4, 8) | student_enrolment_courses : student_enrolment_id (4, 14, 13), student_course_id (45105806, 8, 70882679), course_id (13, 11, 12) | transcripts : transcript_date (\"1984-01-18 23:07:07\", \"2010-12-13 10:55:15\", \"2002-09-24 06:11:49\"), transcript_id (12, 5, 13), other_details (None) | transcript_contents : student_course_id (28982908, 70882679, 96), transcript_id (11, 8, 11)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_left asc limit 1",
            "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"students\": [\"last_name\"]}, {\"students_last_name\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"students_last_name\".\"last_name\"",
        "clear_ambiguity": "{\"last name\": {\"students_last_name\": [\"last_name\"]}}",
        "gold_query": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "index": 518,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first, middle, and last name of the first student to register?",
        "schema_without_content": "addresses : city , line_3 , line_1 , address_id , other_address_details , country , zip_postcode , state_province_county , line_2  | courses : course_id , course_description , other_details , course_name  | departments : other_details , department_name , department_id , department_description  | degree_programs : degree_program_id , other_details , degree_summary_name , degree_summary_description , department_id  | sections : course_id , section_description , section_name , other_details , section_id  | semesters : semester_name , semester_description , other_details , semester_id  | students : student_id , first_name , other_student_details , cell_mobile_number , date_first_registered , last_name , email_address , date_left , middle_name , permanent_address_id , current_address_id , ssn  | students_middle_name : middle_name , student_id  | student_enrolment : student_enrolment_id , semester_id , other_details , degree_program_id , student_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : transcript_id , transcript_date , other_details  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : city (\"North Omer\", \"Mariliehaven\", \"Prohaskafort\"), line_3 (None), line_1 (\"202 Hessel Views Apt. 468\", \"74046 Metz Walk Apt. 113\", \"186 Evan Motorway Apt. 409\"), address_id (15, 6, 9), other_address_details (None), country (\"Gabon\", \"Croatia\", \"Haiti\"), zip_postcode (\"777\", \"847\", \"590\"), state_province_county (\"NorthCarolina\", \"Arkansas\", \"Virginia\"), line_2 (\"Apt. 583\", \"Suite 703\", \"Suite 239\") | courses : course_id (15, 10, 7), course_description (\"l\", \"c\", \"v\"), other_details (None), course_name (\"cal\", \"rs\", \"pl\") | departments : other_details (None), department_name (\"dance\", \"linguistic\", \"drama\"), department_id (4, 6, 3), department_description (\"doloribus\", \"in\", \"in\") | degree_programs : degree_program_id (11, 4, 13), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"cumque\", \"quam\", \"officiis\"), department_id (7, 15, 4) | sections : course_id (6, 10, 12), section_description (\"ad\", \"qui\", \"et\"), section_name (\"f\", \"a\", \"d\"), other_details (None), section_id (8, 9, 6) | semesters : semester_name (\"spring 2013\", \"spring 2014\", \"winter 2010\"), semester_description (\"m\", \"w\", \"f\"), other_details (None), semester_id (9, 9, 9) | students : student_id (8, 9, 13), first_name (\"Frida\", \"Warren\", \"Jett\"), other_student_details (\"atque\", \"voluptatem\", \"facilis\"), cell_mobile_number (\"07661787471\", \"1-879-796-8987x164\", \"677.401.9382\"), date_first_registered (\"1976-10-26 02:33:06\", \"1973-05-19 19:12:46\", \"2014-03-28 05:48:23\"), last_name (\"Mohr\", \"Mohr\", \"Ward\"), email_address (\"mya88@example.org\", \"jhuel@example.com\", \"nbruen@example.org\"), date_left (\"1982-06-11 00:25:39\", \"1982-06-11 00:25:39\", \"1975-10-09 00:49:27\"), middle_name (\"Aaliyah\", \"Osborne\", \"Judd\"), permanent_address_id (4, 9, 9), current_address_id (7, 6, 2), ssn (\"39\", \"965\", \"141072406\") | students_middle_name : middle_name (\"Aaliyah\", \"Osborne\", \"Judd\"), student_id (2, 11, 5) | student_enrolment : student_enrolment_id (4, 12, 1), semester_id (6, 4, 5), other_details (None), degree_program_id (11, 8, 8), student_id (5, 6, 12) | student_enrolment_courses : course_id (2, 8, 14), student_course_id (28982908, 8, 681404), student_enrolment_id (9, 13, 6) | transcripts : transcript_id (10, 1, 11), transcript_date (\"1975-10-28 15:16:51\", \"1988-04-30 01:19:47\", \"1986-07-12 07:27:29\"), other_details (None) | transcript_contents : student_course_id (76, 2, 96), transcript_id (2, 13, 9)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"middle\": [{\"students\": [\"middle_name\"]}, {\"students_middle_name\": [\"middle_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"middle\" refers to the schema \"students_middle_name\".\"middle_name\"",
        "clear_ambiguity": "{\"middle\": {\"students_middle_name\": [\"middle_name\"]}}",
        "gold_query": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "index": 519,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "schema_without_content": "stadium : highest , location , capacity , average , name , lowest , stadium_id  | singer : singer_id , song_release_year , age , name , is_male , country , song_name  | singer_song_release_year : song_release_year , singer_id  | concert : stadium_id , year , theme , concert_name , concert_id  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : highest (780, 1125, 921), location (\"Arbroath\", \"Stirling Albion\", \"Queen's Park\"), capacity (3808, 10104, 52500), average (638, 1477, 637), name (\"Bayview Stadium\", \"Stark's Park\", \"Somerset Park\"), lowest (404, 331, 315), stadium_id (10, 9, 6) | singer : singer_id (4, 4, 4), song_release_year (\"2014\", \"2013\", \"2013\"), age (32, 32, 52), name (\"Timbaland\", \"Timbaland\", \"John Nizinik\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Gentleman\", \"Gentleman\", \"Love\") | singer_song_release_year : song_release_year (\"2014\", \"2013\", \"2013\"), singer_id (6, 3, 5) | concert : stadium_id (\"10\", \"10\", \"2\"), year (\"2014\", \"2015\"), theme (\"Happy Tonight\", \"Free choice\", \"Free choice\"), concert_name (\"Auditions\", \"Super bootcamp\", \"Auditions\"), concert_id (2, 3, 3) | singer_in_concert : concert_id (3, 6, 5), singer_id (\"4\", \"2\", \"3\")",
        "ambiguous_queries": [
            "select song_name, song_release_year from singer order by age limit 1",
            "select t1.song_name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"release years\": [{\"singer\": [\"song_release_year\"]}, {\"singer_song_release_year\": [\"song_release_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"release years\" refers to the schema \"singer\".\"song_release_year\"",
        "clear_ambiguity": "{\"release years\": {\"singer\": [\"song_release_year\"]}}",
        "gold_query": "select song_name, song_release_year from singer order by age limit 1"
    },
    {
        "index": 520,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "schema_without_content": "tv_channel : hight_definition_tv , series_name , content , country , pixel_aspect_ratio_par , package_option , language , pay_per_view_ppv , id  | tv_channel_series_name : series_name , id  | tv_series : viewers_m , air_date , id , weekly_rank , 18_49_rating_share , episode , channel , share , rating  | cartoon : directed_by , production_code , channel , id , original_air_date , title , written_by ",
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), series_name (\"myDeejay\", \"MTV Hits\", \"Sky Radio\"), content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Sky Famiglia\", \"Sky Famiglia + Sky HD\", \"Option\"), language (\"Italian\", \"English\"), pay_per_view_ppv (\"no\"), id (\"708\", \"715\", \"728\") | tv_channel_series_name : series_name (\"myDeejay\", \"MTV Hits\", \"Sky Radio\"), id (\"707\", \"704\", \"717\") | tv_series : viewers_m (\"9.16\", \"5.28\", \"5.75\"), air_date (\"November 26, 2007\", \"November 19, 2007\", \"November 5, 2007\"), id (9.0, 12.0, 7.0), weekly_rank (71.0, 67.0, 72.0), 18_49_rating_share (\"2.4/6\", \"2.1/5\", \"3.2/8\"), episode (\"Friendly Skies\", \"The Year of the Rabbit\", \"Friendly Skies\"), channel (\"714\", \"713\", \"707\"), share (5.0, 9.0, 5.0), rating (\"3.4\", \"4.3\", \"3.8\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (109.0, 112.0, 103.0), channel (\"705\", \"700\", \"707\"), id (8.0, 2.0, 9.0), original_air_date (\"February6,2009\", \"November21,2008\", \"December12,2008\"), title (\"Fall of the Blue Beetle!\", \"Day of the Dark Knight!\", \"The Rise of the Blue Beetle!\"), written_by (\"Joseph Kuhr\", \"James Krieg\", \"J. M. DeMatteis\")",
        "ambiguous_queries": [
            "select count(distinct series_name), count(distinct content) from tv_channel",
            "select count(distinct t2.series_name), count(distinct t1.content) from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"series\": [{\"tv_channel\": [\"series_name\"]}, {\"tv_channel_series_name\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"series\" refers to the schema \"tv_channel_series_name\".\"series_name\"",
        "clear_ambiguity": "{\"series\": {\"tv_channel_series_name\": [\"series_name\"]}}",
        "gold_query": "select count(distinct t2.series_name), count(distinct t1.content) from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id"
    },
    {
        "index": 521,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "schema_without_content": "student : sex , city_code , age , stuid , major , advisor , lname , fname  | has_pet : stuid , petid  | pets : pet_age , weight , petid , pettype  | pets_weight : petid , weight ",
        "schema_with_content": "student : sex (\"F\", \"M\"), city_code (\"DET\", \"BOS\", \"NYC\"), age (27, 26, 16), stuid (1025, 1005, 1007), major (550, 50, 600), advisor (9172, 7134, 8918), lname (\"Leighton\", \"Shieber\", \"Schultz\"), fname (\"Dinesh\", \"William\", \"Derek\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pet_age (3, 2, 1), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\") | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)",
        "ambiguous_queries": [
            "select max(weight), pettype from pets group by pettype",
            "select max(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"pets\": [\"weight\"]}, {\"pets_weight\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"pets\".\"weight\"",
        "clear_ambiguity": "{\"weight\": {\"pets\": [\"weight\"]}}",
        "gold_query": "select max(weight), pettype from pets group by pettype"
    },
    {
        "index": 522,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the population and life expectancies in Brazil?",
        "schema_without_content": "city : population , id , name \", countrycode , district  | sqlite_sequence : seq , name  | country : governmentform , lifeexpectancy , gnpold , gnp , continent , capital , surfacearea , code2 , population , localname , code , region , name , headofstate , indepyear  | country_population : code , population  | countrylanguage : countrycode , percentage , language , isofficial ",
        "schema_with_content": "city : population (277752, 117019, 180400), id (3300, 2686, 836), name (\"Taegu\", \"Berezniki\", \"Henzada (Hinthada)\"), countrycode (\"ITA\", \"NRU\", \"DZA\"), district (\"al-Minya\", \"Toa Baja\", \"Georgetown\") | sqlite_sequence : seq (4079), name (\"city\") | country : governmentform (\"Territory of Australia\", \"Independent Church State\", \"Autonomous Area\"), lifeexpectancy (70.3, 73.0, 68.7), gnpold (7474.0, 4542.0, 34843.0), gnp (65707.0, 435.0, 612.0), continent (\"South America\", \"Europe\", \"Asia\"), capital (2689, 191, 2928), surfacearea (163610.0, 323250.0, 88946.0), code2 (\"SJ\", \"MR\", \"PT\"), population (2441000, 6485000, 3567000), localname (\"Tâai-wan\", \"Iran\", \"Ertra\"), code (\"ESP\", \"TJK\", \"LCA\"), region (\"Melanesia\", \"Central America\", \"Baltic Countries\"), name (\"United Kingdom\", \"French Guiana\", \"San Marino\"), headofstate (\"Fernando Henrique Cardoso\", \"\", \"John Bani\"), indepyear (836, 1958, 1932) | country_population : code (\"FSM\", \"TKM\", \"ZMB\"), population (2441000, 6485000, 3567000) | countrylanguage : countrycode (\"PRY\", \"ETH\", \"VIR\"), percentage (6.0, 76.7, 4.9), language (\"Chuabo\", \"OtomÃ­\", \"Eskimo Languages\"), isofficial (\"T\", \"F\")",
        "ambiguous_queries": [
            "select population, lifeexpectancy from country where name = 'Brazil'",
            "select t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Brazil'"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select population, lifeexpectancy from country where name = 'Brazil'"
    },
    {
        "index": 523,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "schema_without_content": "tv_channel : id , country , series_name , pixel_aspect_ratio_par , package_option \", pay_per_view_ppv , language , hight_definition_tv , content  | tv_series : episode , viewers_m , rating , channel , air_date , id , 18_49_rating_share , share , weekly_rank  | cartoon : id , channel , title , production_code , written_by , original_air_date , directed_by  | cartoon_channel : id , channel ",
        "schema_with_content": "tv_channel : id (\"714\", \"708\", \"728\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"MTV Dance\", \"Classica\", \"MTV Live HD\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Sky Famiglia\", \"Sky Famiglia\", \"no ( FTV )\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\") | tv_series : episode (\"Blowback\", \"Double Down\", \"Home By Another Way\"), viewers_m (\"6.05\", \"5.61\", \"9.16\"), rating (\"5.3\", \"5.3\", \"3.5\"), channel (\"717\", \"707\", \"728\"), air_date (\"October 22, 2007\", \"December 17, 2007\", \"November 5, 2007\"), id (8.0, 4.0, 4.0), 18_49_rating_share (\"2.9/7\", \"1.7/5\", \"3.2/8\"), share (9.0, 6.0, 5.0), weekly_rank (72.0, 68.0, 68.0) | cartoon : id (4.0, 2.0, 1.0), channel (\"705\", \"701\", \"706\"), title (\"Evil Under the Sea!\", \"Dawn of the Dead Man!\", \"The Eyes of Despero!\"), production_code (107.0, 101.0, 111.0), written_by (\"Joseph Kuhr\", \"J. M. DeMatteis\", \"J. M. DeMatteis\"), original_air_date (\"January23,2009\", \"December12,2008\", \"January9,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\") | cartoon_channel : id (8.0, 1.0, 9.0), channel (\"705\", \"701\", \"706\")",
        "ambiguous_queries": [
            "select production_code, channel from cartoon order by original_air_date limit 1",
            "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"channel\": [{\"cartoon\": [\"channel\"]}, {\"cartoon_channel\": [\"channel\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"channel\" refers to the schema \"cartoon_channel\".\"channel\"",
        "clear_ambiguity": "{\"channel\": {\"cartoon_channel\": [\"channel\"]}}",
        "gold_query": "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
    },
    {
        "index": 524,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "schema_without_content": "stadium : name , average , highest , stadium_id , location , lowest , capacity  | singer : is_male , age , name , song_name , country , singer_id , song_release_year  | singer_name : name , singer_id  | concert : theme , year , stadium_id , concert_id , concert_name  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : name (\"Glebe Park\", \"Bayview Stadium\", \"Bayview Stadium\"), average (642, 638, 2106), highest (780, 837, 4812), stadium_id (5, 4, 4), location (\"Peterhead\", \"Raith Rovers\", \"Stirling Albion\"), lowest (1057, 400, 1057), capacity (4125, 2000, 4125) | singer : is_male (\"F\", \"T\"), age (25, 52, 29), name (\"Justin Brown\", \"Rose White\", \"Timbaland\"), song_name (\"Love\", \"Dangerous\", \"Sun\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (4, 4, 6), song_release_year (\"2014\", \"2003\", \"2003\") | singer_name : name (\"Justin Brown\", \"Rose White\", \"Timbaland\"), singer_id (2, 6, 4) | concert : theme (\"Happy Tonight\", \"Free choice 2\", \"Party All Night\"), year (\"2014\", \"2015\"), stadium_id (\"10\", \"1\", \"10\"), concert_id (2, 4, 1), concert_name (\"Home Visits\", \"Auditions\", \"Home Visits\") | singer_in_concert : concert_id (4, 3, 5), singer_id (\"5\", \"5\", \"6\")",
        "ambiguous_queries": [
            "select name, country from singer where song_name like '%Hey%'",
            "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"singer\": [\"name\"]}, {\"singer_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"singer_name\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"singer_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'"
    },
    {
        "index": 525,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "schema_without_content": "players : first_name , hand , last_name , country_code , birth_date , player_id  | players_last_name : last_name , player_id  | matches : loser_name , winner_rank_points , loser_rank_points , loser_ioc , winner_hand , loser_hand , winner_age , tourney_id , winner_entry , match_num , loser_rank , loser_id , winner_ioc , tourney_date , loser_seed , best_of , loser_ht , draw_size , winner_id , winner_seed , round , tourney_name , score  6-2 8-6\", minutes , winner_rank , winner_name , year , loser_age , surface , winner_ht , loser_entry , tourney_level  | rankings : ranking_points , player_id , ranking , tours , ranking_date ",
        "schema_with_content": "players : first_name (\"Ayano\", \"Yeon Hee\", \"Halla\"), hand (\"R\", \"\", \"R\"), last_name (\"Suetrong\", \"Weiland\", \"Stocker Jones\"), country_code (\"FRA\", \"CMR\", \"URU\"), birth_date (19880731, 19860214, 19821105), player_id (201688, 207478, 215753) | players_last_name : last_name (\"Suetrong\", \"Weiland\", \"Stocker Jones\"), player_id (217119, 215901, 212810) | matches : loser_name (\"Julia Goerges\", \"Jelena Jankovic\", \"Kiki Bertens\"), winner_rank_points (1620, 5850, 1960), loser_rank_points (2045, 2146, 3285), loser_ioc (\"UKR\", \"NED\", \"ROU\"), winner_hand (\"R\", \"L\"), loser_hand (\"R\", \"L\"), winner_age (24.9965776865, 26.6502395619, 34.6173853525), tourney_id (\"2016-0804\", \"2017-M016\", \"2016-580\"), winner_entry (\"\"), match_num (280, 210, 264), loser_rank (25, 61, 61), loser_id (201455, 201539, 201458), winner_ioc (\"ITA\", \"CZE\", \"ROU\"), tourney_date (20161003, 20160627, 20160222), loser_seed (18, 29, 8), best_of (3), loser_ht (181, 168, 180), draw_size (8, 64, 128), winner_id (201693, 201596, 200033), winner_seed (28, 19, 11), round (\"RR\", \"SF\", \"SF\"), tourney_name (\"Olympics\", \"Birmingham\", \"Birmingham\"), score (\"6-2 4-6 6-3\", \"6-3 3-6 6-3 \", \"6-7(1) 6-2 8-6\"), minutes (152, 153, 68), winner_rank (58, 44, 52), winner_name (\"Serena Williams\", \"Karolina Pliskova\", \"Alize Cornet\"), year (2013, 2016, 2017), loser_age (36.1998631075, 31.9370294319, 29.8480492813), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ht (184, 182, 178), loser_entry (\"\"), tourney_level (\"P\", \"W\", \"I\") | rankings : ranking_points (4221, 6200, 4337), player_id (201653, 206289, 203284), ranking (462, 653, 1350), tours (25, 26, 22), ranking_date (20050919, 19930830, 20000214)",
        "ambiguous_queries": [
            "select first_name, last_name from players where hand = 'L' order by birth_date",
            "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"players\": [\"last_name\"]}, {\"players_last_name\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"players_last_name\".\"last_name\"",
        "clear_ambiguity": "{\"names\": {\"players_last_name\": [\"last_name\"]}}",
        "gold_query": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
    },
    {
        "index": 526,
        "db_id": "flight_2",
        "ambig_type": "join",
        "db_file": "join/flight_2/flight_2.sqlite",
        "question": "Which city and country is the Alton airport at?",
        "schema_without_content": "airlines : airline , uid , country , abbreviation  | airports : countryabbrev , airportname , city , country , airportcode  | airports_country : country , airportcode  | flights : flightno , sourceairport , airline , destairport ",
        "schema_with_content": "airlines : airline (\"Allegiant Air\", \"Delta Airlines\", \"US Airways\"), uid (7, 2, 4), country (\"USA\"), abbreviation (\"Continental\", \"Allegiant\", \"American\") | airports : countryabbrev (\"US \", \"US\"), airportname (\"Aspen \", \"Apple Valley \", \"Anita Bay \"), city (\"Alamosa \", \"Aleneva \", \"Afton \"), country (\"United States \"), airportcode (\"ABL\", \"AEL\", \"ABI\") | airports_country : country (\"United States \"), airportcode (\"AHN\", \"ABR\", \"ALM\") | flights : flightno (1189, 1274, 923), sourceairport (\" AAF\", \" MRI\", \" AAF\"), airline (10, 8, 10), destairport (\" ABY\", \" AED\", \" ADG\")",
        "ambiguous_queries": [
            "select city, country from airports where airportname = 'Alton'",
            "select t1.city, t2.country from airports as t1 join airports_country as t2 on t1.airportcode = t2.airportcode where t1.airportname = 'Alton'"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{\"airports\": [\"country\"]}, {\"airports_country\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"airports\".\"country\"",
        "clear_ambiguity": "{\"country\": {\"airports\": [\"country\"]}}",
        "gold_query": "select city, country from airports where airportname = 'Alton'"
    },
    {
        "index": 527,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , template_id , version_number , template_details , date_effective_to , template_type_code  | documents : other_details , document_description , document_id , document_name , template_id  | documents_document_description : document_description , document_id  | paragraphs : paragraph_id , document_id , paragraph_text , other_details ",
        "schema_with_content": "ref_template_types : template_type_code (\"CV\", \"PPT\", \"BK\"), template_type_description (\"Presentation\", \"Paper\", \"Book\") | templates : date_effective_from (\"1986-12-09 14:51:36\", \"1999-06-21 11:10:30\", \"1993-10-07 02:33:04\"), template_id (15, 8, 1), version_number (5, 8, 2), template_details (\"\"), date_effective_to (\"1973-01-12 14:13:34\", \"1974-09-14 06:34:39\", \"1999-07-08 03:31:04\"), template_type_code (\"BK\", \"PPT\", \"BK\") | documents : other_details (None), document_description (\"b\", \"n\", \"w\"), document_id (385906526, 33930, 50123), document_name (\"How Google people work\", \"A history of Arts\", \"Data base\"), template_id (20, 21, 1) | documents_document_description : document_description (\"b\", \"n\", \"w\"), document_id (82, 76, 33930) | paragraphs : paragraph_id (1104059, 7, 16615), document_id (651512, 33930, 3830), paragraph_text (\"Palestinian Territory\", \"Fiji\", \"Papua New Guinea\"), other_details (None)",
        "ambiguous_queries": [
            "select document_id, template_id, document_description from documents where document_name = 'Robbin CV'",
            "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id where t1.document_name = 'Robbin CV'"
        ],
        "gold_ambiguity": {
            "match": "{\"description\": [{\"documents\": [\"document_description\"]}, {\"documents_document_description\": [\"document_description\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"description\" refers to the schema \"documents_document_description\".\"document_description\"",
        "clear_ambiguity": "{\"description\": {\"documents_document_description\": [\"document_description\"]}}",
        "gold_query": "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id where t1.document_name = 'Robbin CV'"
    },
    {
        "index": 528,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "When is the first transcript released? List the date and details.",
        "schema_without_content": "addresses : address_id , country , city , zip_postcode , line_3 , line_2 , line_1 , other_address_details , state_province_county  | courses : course_name , course_id , course_description , other_details  | departments : other_details , department_id , department_description , department_name  | degree_programs : other_details , department_id , degree_summary_description , degree_program_id , degree_summary_name  | sections : section_id , section_description , other_details , section_name , course_id  | semesters : semester_name , semester_description , other_details , semester_id  | students : permanent_address_id , ssn , other_student_details , first_name , date_first_registered , last_name , current_address_id , middle_name , date_left , cell_mobile_number 889-8954x524\", \"03174364122\", \"677.401.9382\", email_address , student_id  | student_enrolment : student_id , degree_program_id , semester_id , student_enrolment_id , other_details  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcripts_transcript_date : transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : address_id (10, 14, 9), country (\"Samoa\", \"Gibraltar\", \"Croatia\"), city (\"Port Elvisfurt\", \"Port Chelsea\", \"Mariliehaven\"), zip_postcode (\"590\", \"400\", \"386\"), line_3 (None), line_2 (\"Apt. 305\", \"Suite 703\", \"Apt. 370\"), line_1 (\"7081 Eda Center\", \"7081 Eda Center\", \"202 Hessel Views Apt. 468\"), other_address_details (None), state_province_county (\"Delaware\", \"Virginia\", \"Idaho\") | courses : course_name (\"ml\", \"pl\", \"ai\"), course_id (13, 13, 9), course_description (\"c\", \"w\", \"n\"), other_details (None) | departments : other_details (None), department_id (4, 8, 15), department_description (\"autem\", \"in\", \"non\"), department_name (\"engineer\", \"history\", \"art\") | degree_programs : other_details (None), department_id (11, 13, 14), degree_summary_description (\"aperiam\", \"et\", \"officiis\"), degree_program_id (9, 5, 1), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_id (5, 5, 13), section_description (\"quis\", \"qui\", \"non\"), other_details (None), section_name (\"o\", \"f\", \"o\"), course_id (5, 4, 12) | semesters : semester_name (\"spring 2010\", \"fall 2018\", \"fall 2010\"), semester_description (\"y\", \"o\", \"m\"), other_details (None), semester_id (6, 9, 13) | students : permanent_address_id (4, 4, 11), ssn (\"402\", \"304246\", \"39\"), other_student_details (\"voluptatem\", \"et\", \"assumenda\"), first_name (\"Jett\", \"Orrin\", \"Helga\"), date_first_registered (\"1982-02-14 08:46:35\", \"2005-12-15 08:42:10\", \"2009-09-25 00:14:25\"), last_name (\"Carroll\", \"Kemmer\", \"Jaskolski\"), current_address_id (15, 12, 2), middle_name (\"Cleve\", \"Mona\", \"Mossie\"), date_left (\"1982-06-11 00:25:39\", \"2006-08-04 17:26:49\", \"2007-11-28 12:50:21\"), cell_mobile_number (\"(096)889-8954x524\", \"03174364122\", \"677.401.9382\"), email_address (\"lhartmann@example.org\", \"gracie29@example.com\", \"gracie29@example.com\"), student_id (5, 3, 14) | student_enrolment : student_id (14, 14, 14), degree_program_id (5, 5, 2), semester_id (2, 13, 2), student_enrolment_id (1, 1, 14), other_details (None) | student_enrolment_courses : student_enrolment_id (5, 13, 4), course_id (13, 11, 12), student_course_id (83814225, 681404, 70882679) | transcripts : other_details (None), transcript_date (\"2013-06-30 13:01:40\", \"1975-05-06 12:04:47\", \"1975-10-28 15:16:51\"), transcript_id (11, 7, 13) | transcripts_transcript_date : transcript_id (6, 12, 15), transcript_date (\"2013-06-30 13:01:40\", \"1975-05-06 12:04:47\", \"1975-10-28 15:16:51\") | transcript_contents : student_course_id (28982908, 45105806, 45105806), transcript_id (12, 6, 2)",
        "ambiguous_queries": [
            "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
            "select t2.transcript_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"transcript released\": [{\"transcripts\": [\"transcript_date\"]}, {\"transcripts_transcript_date\": [\"transcript_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"transcript released\" refers to the schema \"transcripts_transcript_date\".\"transcript_date\"",
        "clear_ambiguity": "{\"transcript released\": {\"transcripts_transcript_date\": [\"transcript_date\"]}}",
        "gold_query": "select t2.transcript_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date asc limit 1"
    },
    {
        "index": 529,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "schema_without_content": "players : last_name , birth_date , hand , first_name , country_code , player_id  | players_first_name : player_id , first_name  | matches : loser_age , best_of , winner_entry , loser_rank_points , draw_size , tourney_name , loser_rank , winner_age , winner_hand , loser_hand , winner_seed , winner_id , winner_rank , loser_id , tourney_level , winner_ioc , loser_seed , loser_ioc , minutes , year , winner_ht , tourney_id , round , winner_name , loser_name , match_num , loser_ht , score \", \"6-4 6-0\", \"6-3 7-6\", surface , loser_entry , winner_rank_points , tourney_date  | rankings : ranking_date , ranking , tours , ranking_points , player_id ",
        "schema_with_content": "players : last_name (\"Pienaar\", \"Siegler\", \"Osorio Pena\"), birth_date (20010601, 19870404, 19450925), hand (\"U\", \"\", \"R\"), first_name (\"Mylene\", \"Sayuri\", \"Yun Ling\"), country_code (\"NED\", \"VEN\", \"ROU\"), player_id (215995, 214726, 219682) | players_first_name : player_id (215397, 215554, 213958), first_name (\"Mylene\", \"Sayuri\", \"Yun Ling\") | matches : loser_age (30.7323750856, 23.2717316906, 30.250513347), best_of (3), winner_entry (\"\"), loser_rank_points (1840, 5830, 1960), draw_size (8, 32, 4), tourney_name (\"Madrid\", \"Bastad\", \"Miami\"), loser_rank (14, 18, 37), winner_age (27.430527036300003, 24.4407939767, 26.554414784400002), winner_hand (\"R\", \"L\"), loser_hand (\"R\", \"L\"), winner_seed (12, 19, 1), winner_id (200033, 201596, 202429), winner_rank (44, 82, 56), loser_id (201506, 201662, 201518), tourney_level (\"W\", \"G\", \"G\"), winner_ioc (\"HUN\", \"UKR\", \"SWE\"), loser_seed (26, 3, 15), loser_ioc (\"SRB\", \"RUS\", \"AUS\"), minutes (72, 60, 161), year (2013, 2016, 2017), winner_ht (170, 163, 170), tourney_id (\"2016-580\", \"2016-M015\", \"2016-1048\"), round (\"R32\", \"SF\", \"BR\"), winner_name (\"Sloane Stephens\", \"Serena Williams\", \"Camila Giorgi\"), loser_name (\"Petra Kvitova\", \"Samantha Stosur\", \"Coco Vandeweghe\"), match_num (298, 213, 209), loser_ht (177, 164, 163), score (\"4-6 6-4 7-6(3)\", \"6-4 6-0\", \"6-3 7-6(4)\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_entry (\"\"), winner_rank_points (845, 3401, 1658), tourney_date (20161017, 20170731, 20160620) | rankings : ranking_date (20110516, 19970519, 20021216), ranking (128, 131, 202), tours (24, 3, 40), ranking_points (2071, 4996, 2955), player_id (205964, 214724, 206292)",
        "ambiguous_queries": [
            "select first_name, last_name from players where hand = 'L' order by birth_date",
            "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
        ],
        "gold_ambiguity": {
            "match": "{\"first\": [{\"players\": [\"first_name\"]}, {\"players_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first\" refers to the schema \"players\".\"first_name\"",
        "clear_ambiguity": "{\"first\": {\"players\": [\"first_name\"]}}",
        "gold_query": "select first_name, last_name from players where hand = 'L' order by birth_date"
    },
    {
        "index": 530,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What are the names and descriptions for all the sections?",
        "schema_without_content": "addresses : address_id , country , city , line_1 , line_2 , state_province_county , other_address_details , line_3 , zip_postcode  | courses : course_name , other_details , course_id , course_description  | departments : department_id , department_description , department_name , other_details  | degree_programs : degree_summary_name , department_id , degree_program_id , other_details , degree_summary_description  | sections : course_id , section_name , section_id , section_description , other_details  | sections_section_description : section_description , section_id  | semesters : semester_name , other_details , semester_description , semester_id  | students : student_id , date_first_registered , permanent_address_id , current_address_id , email_address , middle_name , other_student_details , date_left , first_name , cell_mobile_number 445-0399x85208\", \"877.549.9067x8723\", \"445-0399x85208\", last_name , ssn  | student_enrolment : student_id , semester_id , degree_program_id , other_details , student_enrolment_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_id , other_details , transcript_date  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : address_id (11, 8, 12), country (\"Angola\", \"Norfolk Island\", \"Kyrgyz Republic\"), city (\"North Omer\", \"Port Elvisfurt\", \"Lake Laishafurt\"), line_1 (\"193 Marlin Brook\", \"67942 Carlotta Ferry Apt. 686\", \"202 Hessel Views Apt. 468\"), line_2 (\"Apt. 689\", \"Suite 830\", \"Apt. 305\"), state_province_county (\"SouthDakota\", \"Delaware\", \"Delaware\"), other_address_details (None), line_3 (None), zip_postcode (\"068\", \"541\", \"590\") | courses : course_name (\"dl\", \"rs\", \"math\"), other_details (None), course_id (9, 11, 5), course_description (\"k\", \"b\", \"c\") | departments : department_id (5, 6, 13), department_description (\"error\", \"nostrum\", \"natus\"), department_name (\"management\", \"linguistic\", \"biology\"), other_details (None) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (11, 2, 2), degree_program_id (11, 4, 12), other_details (None), degree_summary_description (\"officiis\", \"voluptas\", \"esse\") | sections : course_id (12, 1, 9), section_name (\"p\", \"e\", \"c\"), section_id (12, 6, 3), section_description (\"quis\", \"qui\", \"qui\"), other_details (None) | sections_section_description : section_description (\"quis\", \"qui\", \"qui\"), section_id (7, 8, 14) | semesters : semester_name (\"spring 2016\", \"spring 2019\", \"spring 2019\"), other_details (None), semester_description (\"t\", \"o\", \"t\"), semester_id (10, 3, 14) | students : student_id (4, 2, 9), date_first_registered (\"2014-03-28 05:48:23\", \"2017-01-04 08:10:25\", \"2018-03-13 09:56:22\"), permanent_address_id (4, 11, 15), current_address_id (14, 2, 14), email_address (\"nbruen@example.org\", \"nya.lesch@example.net\", \"skassulke@example.net\"), middle_name (\"Mona\", \"Neal\", \"Golda\"), other_student_details (\"laborum\", \"laborum\", \"atque\"), date_left (\"2016-04-09 12:27:04\", \"1999-08-24 00:07:10\", \"1997-11-16 08:54:33\"), first_name (\"Gregg\", \"Stanford\", \"Deon\"), cell_mobile_number (\"(213)445-0399x85208\", \"877.549.9067x8723\", \"(213)445-0399x85208\"), last_name (\"Rogahn\", \"Schuppe\", \"Ankunding\"), ssn (\"141072406\", \"43\", \"\") | student_enrolment : student_id (12, 12, 5), semester_id (6, 6, 9), degree_program_id (9, 9, 2), other_details (None), student_enrolment_id (15, 7, 6) | student_enrolment_courses : course_id (12, 4, 12), student_enrolment_id (5, 9, 4), student_course_id (96, 96, 9860) | transcripts : transcript_id (15, 10, 3), other_details (None), transcript_date (\"1975-05-20 18:31:21\", \"1990-03-05 11:59:41\", \"1984-01-18 23:07:07\") | transcript_contents : transcript_id (8, 12, 12), student_course_id (70882679, 45105806, 76)",
        "ambiguous_queries": [
            "select section_name, section_description from sections",
            "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id"
        ],
        "gold_ambiguity": {
            "match": "{\"descriptions\": [{\"sections\": [\"section_description\"]}, {\"sections_section_description\": [\"section_description\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"descriptions\" refers to the schema \"sections_section_description\".\"section_description\"",
        "clear_ambiguity": "{\"descriptions\": {\"sections_section_description\": [\"section_description\"]}}",
        "gold_query": "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id"
    },
    {
        "index": 531,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "schema_without_content": "players : country_code , birth_date , first_name , player_id , last_name , hand  | players_first_name : first_name , player_id  | matches : draw_size , winner_hand , winner_entry , loser_rank , loser_name , loser_ht , minutes , surface , winner_rank , winner_age , loser_ioc , winner_rank_points , tourney_id , loser_rank_points , winner_id , match_num , year , tourney_name , loser_age , loser_entry , tourney_date , tourney_level , winner_name , round , winner_seed , best_of , loser_seed , winner_ht , loser_hand , score , loser_id , winner_ioc  | rankings : ranking , ranking_date , tours , player_id , ranking_points ",
        "schema_with_content": "players : country_code (\"BIH\", \"UKR\", \"TOG\"), birth_date (19640206, 19991002, 19750418), first_name (\"Iulia\", \"I Hui\", \"Vilma\"), player_id (218754, 209687, 203121), last_name (\"Moss\", \"Kelley\", \"Lopez Herrera\"), hand (\"L\", \"U\", \"L\") | players_first_name : first_name (\"Iulia\", \"I Hui\", \"Vilma\"), player_id (210712, 201925, 211114) | matches : draw_size (12, 128, 8), winner_hand (\"R\", \"L\"), winner_entry (\"\"), loser_rank (32, 4, 47), loser_name (\"Mona Barthel\", \"Lucie Safarova\", \"Irina Camelia Begu\"), loser_ht (175, 181, 159), minutes (89, 131, 121), surface (\"Hard\", \"Clay\", \"Grass\"), winner_rank (34, 48, 12), winner_age (32.1478439425, 27.578370978800002, 28.9336071184), loser_ioc (\"CZE\", \"CHN\", \"NED\"), winner_rank_points (2714, 2340, 6860), tourney_id (\"2017-1097\", \"2016-580\", \"2017-M004\"), loser_rank_points (3401, 6010, 3745), winner_id (201506, 201596, 201496), match_num (215, 224, 152), year (2013, 2016, 2017), tourney_name (\"French Open\", \"Biel\", \"Prague\"), loser_age (24.626967830300003, 30.9021218344, 25.541409993200002), loser_entry (\"\"), tourney_date (20160307, 20170717, 20170320), tourney_level (\"P\", \"G\", \"G\"), winner_name (\"Elina Svitolina\", \"Simona Halep\", \"Serena Williams\"), round (\"BR\", \"SF\", \"RR\"), winner_seed (19, 14, 18), best_of (3), loser_seed (29, 32, 28), winner_ht (163, 176, 185), loser_hand (\"R\", \"L\"), score (\"6-3 4-6 6-2\", \"6-2 3-6 7-5\", \"6-2 6-4\"), loser_id (201506, 201621, 200033), winner_ioc (\"JPN\", \"UKR\", \"UKR\") | rankings : ranking (1073, 88, 122), ranking_date (19990419, 20011217, 20080630), tours (30, 13, 24), player_id (201532, 213889, 212050), ranking_points (3036, 2535, 5585)",
        "ambiguous_queries": [
            "select first_name, birth_date from players where country_code = 'USA'",
            "select t2.first_name, t1.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"players\": [\"first_name\"]}, {\"players_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"players\".\"first_name\"",
        "clear_ambiguity": "{\"first name\": {\"players\": [\"first_name\"]}}",
        "gold_query": "select first_name, birth_date from players where country_code = 'USA'"
    },
    {
        "index": 532,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "join",
        "db_file": "join/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "schema_without_content": "employee : employee_id , name , age , city  | shop : location , manager_name , name , number_products , district , shop_id  | shop_district : district , shop_id  | hiring : employee_id , is_full_time , start_from , shop_id  | evaluation : employee_id , bonus , year_awarded ",
        "schema_with_content": "employee : employee_id (9, 10, 10), name (\"Tim Payne\", \"Louis Deacon\", \"Steve Borthwick\"), age (43, 32, 36), city (\"Bath\", \"Bristol\", \"Bath\") | shop : location (\"Kotka\", \"Mariehamn\", \"Espoo\"), manager_name (\"Olli Huttunen\", \"Job Dragtsma\", \"Mika Laurikainen\"), name (\"HJK\", \"KuPS\", \"HJK\"), number_products (10770, 15000, 3500), district (\"Veritas Stadion\", \"Veritas Stadion\", \"WiklÃ¶f Holding Arena\"), shop_id (7, 2, 2) | shop_district : district (\"Veritas Stadion\", \"Veritas Stadion\", \"WiklÃ¶f Holding Arena\"), shop_id (1, 1, 5) | hiring : employee_id (1, 1, 4), is_full_time (\"T\", \"F\"), start_from (\"2008\", \"2012\", \"2003\"), shop_id (4, 2, 2) | evaluation : employee_id (\"10\", \"1\", \"4\"), bonus (3000.0, 4000.0, 3200.0), year_awarded (\"2018\", \"2018\", \"2015\")",
        "ambiguous_queries": [
            "select manager_name, district from shop order by number_products desc limit 1",
            "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"shop\": [\"district\"]}, {\"shop_district\": [\"district\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"shop\".\"district\"",
        "clear_ambiguity": "{\"district\": {\"shop\": [\"district\"]}}",
        "gold_query": "select manager_name, district from shop order by number_products desc limit 1"
    },
    {
        "index": 533,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "schema_without_content": "stadium : highest , capacity , lowest , name , average , location , stadium_id  | singer : name , song_release_year , age , singer_id , country , song_name , is_male  | singer_name : name , singer_id  | concert : year , theme , stadium_id , concert_name , concert_id  | singer_in_concert : singer_id , concert_id ",
        "schema_with_content": "stadium : highest (1057, 921, 2363), capacity (52500, 4125, 3960), lowest (466, 404, 315), name (\"Glebe Park\", \"Balmoor\", \"Stark's Park\"), average (615, 615, 1477), location (\"Ayr United\", \"Arbroath\", \"Brechin City\"), stadium_id (7, 4, 5) | singer : name (\"Rose White\", \"Tribal King\", \"Tribal King\"), song_release_year (\"2014\", \"2008\", \"2016\"), age (29, 25, 43), singer_id (5, 3, 5), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Love\", \"Sun\", \"Love\"), is_male (\"F\", \"T\") | singer_name : name (\"Rose White\", \"Tribal King\", \"Tribal King\"), singer_id (1, 6, 5) | concert : year (\"2014\", \"2015\"), theme (\"Free choice\", \"Free choice\", \"Happy Tonight\"), stadium_id (\"1\", \"1\", \"2\"), concert_name (\"Super bootcamp\", \"Super bootcamp\", \"Week 2\"), concert_id (1, 6, 3) | singer_in_concert : singer_id (\"4\", \"4\", \"2\"), concert_id (3, 2, 3)",
        "ambiguous_queries": [
            "select name, country, age from singer order by age desc",
            "select t2.name, t1.country, t1.age from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"singer\": [\"name\"]}, {\"singer_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"singer\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"singer\": [\"name\"]}}",
        "gold_query": "select name, country, age from singer order by age desc"
    },
    {
        "index": 534,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "schema_without_content": "stadium : lowest , location , capacity , stadium_id , highest , average , name  | singer : song_release_year , is_male , name , country , age , song_name , singer_id  | singer_country : country , singer_id  | concert : stadium_id , concert_id , concert_name , theme , year  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : lowest (533, 411, 331), location (\"Ayr United\", \"Queen's Park\", \"Ayr United\"), capacity (4000, 3100, 2000), stadium_id (4, 10, 2), highest (1125, 921, 921), average (730, 638, 642), name (\"Hampden Park\", \"Glebe Park\", \"Somerset Park\") | singer : song_release_year (\"1992\", \"1992\", \"2014\"), is_male (\"F\", \"T\"), name (\"John Nizinik\", \"Justin Brown\", \"Justin Brown\"), country (\"Netherlands\", \"United States\", \"France\"), age (43, 29, 41), song_name (\"Gentleman\", \"Hey Oh\", \"Gentleman\"), singer_id (5, 1, 1) | singer_country : country (\"Netherlands\", \"United States\", \"France\"), singer_id (4, 5, 4) | concert : stadium_id (\"10\", \"9\", \"1\"), concert_id (1, 3, 6), concert_name (\"Auditions\", \"Home Visits\", \"Auditions\"), theme (\"Wide Awake\", \"Wide Awake\", \"Free choice 2\"), year (\"2014\", \"2015\") | singer_in_concert : concert_id (4, 4, 2), singer_id (\"6\", \"4\", \"6\")",
        "ambiguous_queries": [
            "select name, country, age from singer order by age desc",
            "select t1.name, t2.country, t1.age from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{\"singer\": [\"country\"]}, {\"singer_country\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"singer\".\"country\"",
        "clear_ambiguity": "{\"country\": {\"singer\": [\"country\"]}}",
        "gold_query": "select name, country, age from singer order by age desc"
    },
    {
        "index": 535,
        "db_id": "car_1",
        "ambig_type": "join",
        "db_file": "join/car_1/car_1.sqlite",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "schema_without_content": "continents : contid , continent  | countries : continent , countryname , countryid  | car_makers : id , country , fullname , maker  | model_list : modelid , maker , model  | car_names : makeid , make \", \"toyota carina\", \"ford mustang ii\", model  | cars_data : weight , mpg , accelerate , id , horsepower , year , cylinders , edispl  | cars_data_accelerate : id , accelerate ",
        "schema_with_content": "continents : contid (1, 5, 4), continent (\"asia\", \"america\", \"australia\") | countries : continent (4, 4, 1), countryname (\"mexico\", \"nigeria\", \"usa\"), countryid (2, 8, 2) | car_makers : id (12, 13, 3), country (\"5\", \"2\", \"2\"), fullname (\"Volkswagen\", \"Subaru\", \"Honda\"), maker (\"hyundai\", \"honda\", \"volvo\") | model_list : modelid (11, 33, 24), maker (22, 18, 18), model (\"peugeot\", \"capri\", \"scion\") | car_names : makeid (188, 72, 98), make (\"vw dasher (diesel)\", \"toyota carina\", \"ford mustang ii\"), model (\"mazda\", \"datsun\", \"dodge\") | cars_data : weight (2700, 2572, 2565), mpg (\"20.5\", \"22.3\", \"18.2\"), accelerate (16.9, 22.2, 15.1), id (10, 214, 401), horsepower (\"122\", \"152\", \"76\"), year (1980, 1974, 1977), cylinders (6, 6, 6), edispl (231.0, 383.0, 350.0) | cars_data_accelerate : id (369, 113, 262), accelerate (16.9, 22.2, 15.1)",
        "ambiguous_queries": [
            "select max(accelerate), cylinders from cars_data group by cylinders",
            "select max(t2.accelerate), t1.cylinders from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by t1.cylinders"
        ],
        "gold_ambiguity": {
            "match": "{\"accelerate\": [{\"cars_data\": [\"accelerate\"]}, {\"cars_data_accelerate\": [\"accelerate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"accelerate\" refers to the schema \"cars_data_accelerate\".\"accelerate\"",
        "clear_ambiguity": "{\"accelerate\": {\"cars_data_accelerate\": [\"accelerate\"]}}",
        "gold_query": "select max(t2.accelerate), t1.cylinders from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by t1.cylinders"
    },
    {
        "index": 536,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , version_number , template_type_code , date_effective_from , template_details , date_effective_to  | documents : other_details , document_id , template_id , document_name , document_description  | documents_template_id : document_id , template_id  | paragraphs : other_details , document_id , paragraph_text , paragraph_id ",
        "schema_with_content": "ref_template_types : template_type_description (\"Paper\", \"Book\", \"Book\"), template_type_code (\"PP\", \"PP\", \"BK\") | templates : template_id (4, 1, 20), version_number (6, 2, 9), template_type_code (\"CV\", \"PP\", \"AD\"), date_effective_from (\"1975-10-20 02:28:58\", \"2002-08-25 13:26:23\", \"1984-08-07 13:36:26\"), template_details (\"\"), date_effective_to (\"2007-06-06 06:18:53\", \"1992-05-02 20:06:11\", \"2000-10-22 11:57:12\") | documents : other_details (None), document_id (82, 16514113, 801801), template_id (1, 22, 20), document_name (\"About Korea\", \"Customer reviews\", \"How Google people work\"), document_description (\"h\", \"h\", \"b\") | documents_template_id : document_id (2394, 801801, 3), template_id (1, 22, 20) | paragraphs : other_details (None), document_id (651512, 50123, 33930), paragraph_text (\"Ukraine\", \"Ireland\", \"Indonesia\"), paragraph_id (946335436, 16615, 571212310)",
        "ambiguous_queries": [
            "select document_id, template_id, document_description from documents where document_name = 'Robbin CV'",
            "select t1.document_id, t2.template_id, t1.document_description from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_name = 'Robbin CV'"
        ],
        "gold_ambiguity": {
            "match": "{\"template id\": [{\"documents\": [\"template_id\"]}, {\"documents_template_id\": [\"template_id\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template id\" refers to the schema \"documents\".\"template_id\"",
        "clear_ambiguity": "{\"template id\": {\"documents\": [\"template_id\"]}}",
        "gold_query": "select document_id, template_id, document_description from documents where document_name = 'Robbin CV'"
    },
    {
        "index": 537,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "schema_without_content": "tv_channel : pay_per_view_ppv , country , id , series_name , pixel_aspect_ratio_par , package_option \", hight_definition_tv , language , content  | tv_channel_country : country , id  | tv_series : share , air_date , viewers_m , weekly_rank , rating , channel , id , 18_49_rating_share , episode  | cartoon : channel , id , title , written_by , directed_by , original_air_date , production_code ",
        "schema_with_content": "tv_channel : pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"703\", \"717\", \"709\"), series_name (\"MTV Music\", \"MTV Dance\", \"MTV Classic\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia\", \"no ( FTV )\"), hight_definition_tv (\"no\", \"yes\"), language (\"Italian\", \"English\"), content (\"music\") | tv_channel_country : country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"714\", \"709\", \"719\") | tv_series : share (9.0, 5.0, 6.0), air_date (\"November 12, 2007\", \"November 26, 2007\", \"December 10, 2007\"), viewers_m (\"9.16\", \"8.23\", \"6.06\"), weekly_rank (67.0, 67.0, 61.0), rating (\"3.7\", \"5.3\", \"5.3\"), channel (\"714\", \"701\", \"717\"), id (3.0, 3.0, 10.0), 18_49_rating_share (\"3.2/8\", \"2.4/6\", \"1.5/4\"), episode (\"Blowback\", \"The Legend of Dylan McCleen\", \"Home By Another Way\") | cartoon : channel (\"700\", \"728\", \"707\"), id (4.0, 6.0, 11.0), title (\"Evil Under the Sea!\", \"Day of the Dark Knight!\", \"The Eyes of Despero!\"), written_by (\"James Krieg\", \"Matt Wayne\", \"J. M. DeMatteis\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"January2,2009\", \"January9,2009\", \"February6,2009\"), production_code (111.0, 109.0, 110.0)",
        "ambiguous_queries": [
            "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
            "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'"
        ],
        "gold_ambiguity": {
            "match": "{\"nation\": [{\"tv_channel\": [\"country\"]}, {\"tv_channel_country\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"nation\" refers to the schema \"tv_channel_country\".\"country\"",
        "clear_ambiguity": "{\"nation\": {\"tv_channel_country\": [\"country\"]}}",
        "gold_query": "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'"
    },
    {
        "index": 538,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What is the total population and maximum GNP in Asia?",
        "schema_without_content": "city : name , district , countrycode , population , id  | sqlite_sequence : seq , name  | country : localname , gnpold , capital , code2 , region , lifeexpectancy , code , population , surfacearea , indepyear , name , governmentform , headofstate , continent , gnp  | country_population : code , population  | countrylanguage : language , isofficial , percentage , countrycode ",
        "schema_with_content": "city : name (\"Santander\", \"Myingyan\", \"Guigang\"), district (\"Minsk\", \"ParanÃ¡\", \"Aleppo\"), countrycode (\"OMN\", \"SLB\", \"YEM\"), population (304952, 281979, 529121), id (2970, 3330, 794) | sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"Afganistan/Afqanestan\", \"New Zealand/Aotearoa\", \"As-Sudan\"), gnpold (917719.0, 15519.0, 373.0), capital (939, 766, 915), code2 (\"TK\", \"LI\", \"SM\"), region (\"Eastern Asia\", \"Southern Africa\", \"Eastern Asia\"), lifeexpectancy (80.7, 71.6, 69.3), code (\"MRT\", \"BVT\", \"VEN\"), population (1305000, 45611000, 2024000), surfacearea (267668.0, 449964.0, 102173.0), indepyear (1929, 1945, 1917), name (\"United States Minor Outlying Islands\", \"Tanzania\", \"Yugoslavia\"), governmentform (\"Parlementary Monarchy\", \"Territory of Australia\", \"Nonmetropolitan Territory of France\"), headofstate (\"Francisco Guillermo Flores PÃ©rez\", \"Elisabeth II\", \"Yoweri Museveni\"), continent (\"Oceania\", \"Asia\", \"North America\"), gnp (256.0, 1687.0, 435.0) | country_population : code (\"IND\", \"ATA\", \"GLP\"), population (1305000, 45611000, 2024000) | countrylanguage : language (\"Luchazi\", \"Bemba\", \"Turkana\"), isofficial (\"T\", \"F\"), percentage (47.5, 23.2, 50.2), countrycode (\"ALB\", \"ETH\", \"DJI\")",
        "ambiguous_queries": [
            "select sum(population), max(gnp) from country where continent = 'Asia'",
            "select sum(t2.population), max(t1.gnp) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = 'Asia'"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select sum(population), max(gnp) from country where continent = 'Asia'"
    },
    {
        "index": 539,
        "db_id": "singer",
        "ambig_type": "join",
        "db_file": "join/singer/singer.sqlite",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "schema_without_content": "singer : birth_year , singer_id , name , citizenship , net_worth_millions  | singer_net_worth_millions : net_worth_millions , singer_id  | song : singer_id , song_id , title , sales , highest_position ",
        "schema_with_content": "singer : birth_year (1944.0, 1962.0, 1944.0), singer_id (2, 6, 4), name (\"Jacqueline Mars\", \"Gina Rinehart\", \"Alice Walton\"), citizenship (\"United States\", \"Australia\", \"Chile\"), net_worth_millions (17.8, 26.3, 14.3) | singer_net_worth_millions : net_worth_millions (17.8, 26.3, 14.3), singer_id (5, 3, 4) | song : singer_id (6, 5, 2), song_id (5, 5, 5), title (\"Mysterious Girl\", \"Left Outside Alone\", \"Do They Know It's Christmas\"), sales (552407.0, 261000.0, 552407.0), highest_position (1.0, 3.0)",
        "ambiguous_queries": [
            "select citizenship, max(net_worth_millions) from singer group by citizenship",
            "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship"
        ],
        "gold_ambiguity": {
            "match": "{\"net worth\": [{\"singer\": [\"net_worth_millions\"]}, {\"singer_net_worth_millions\": [\"net_worth_millions\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"net worth\" refers to the schema \"singer_net_worth_millions\".\"net_worth_millions\"",
        "clear_ambiguity": "{\"net worth\": {\"singer_net_worth_millions\": [\"net_worth_millions\"]}}",
        "gold_query": "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship"
    },
    {
        "index": 540,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "schema_without_content": "city : name , district , countrycode , population , id  | sqlite_sequence : name , seq  | country : gnp , code , localname , population , continent , headofstate , governmentform , name , gnpold , lifeexpectancy , surfacearea , region , indepyear , capital , code2  | country_name : name , code  | countrylanguage : isofficial , percentage , language , countrycode ",
        "schema_with_content": "city : name (\"Chifeng\", \"Ciputat\", \"Novomoskovsk\"), district (\"South Kivu\", \"Pingtung\", \"La Habana\"), countrycode (\"ISR\", \"REU\", \"GAB\"), population (187035, 577969, 199184), id (169, 1678, 1238) | sqlite_sequence : name (\"city\"), seq (4079) | country : gnp (195746.0, 6871.0, 1579.0), code (\"SLB\", \"HND\", \"FIN\"), localname (\"Svalbard og Jan Mayen\", \"Angola\", \"Ghana\"), population (3520000, 21607000, 5496000), continent (\"North America\", \"South America\", \"Asia\"), headofstate (\"Abdelaziz Bouteflika\", \"Abdullah II\", \"Milan Kucan\"), governmentform (\"Monarchy\", \"Constitutional Monarchy\", \"Emirate Federation\"), name (\"RÃ©union\", \"Mayotte\", \"Colombia\"), gnpold (325.0, 169264.0, 15519.0), lifeexpectancy (42.9, 64.5, 68.7), surfacearea (446550.0, 676578.0, 103000.0), region (\"Melanesia\", \"Australia and New Zealand\", \"Northern Africa\"), indepyear (1932, 1350, 1816), capital (2696, 129, 3483), code2 (\"BH\", \"GB\", \"IQ\") | country_name : name (\"RÃ©union\", \"Mayotte\", \"Colombia\"), code (\"BHR\", \"BWA\", \"SMR\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (97.9, 16.2, 99.6), language (\"Nama\", \"Futuna\", \"Danish\"), countrycode (\"EGY\", \"ABW\", \"HKG\")",
        "ambiguous_queries": [
            "select name, surfacearea, indepyear from country order by population limit 1",
            "select t2.name, t1.surfacearea, t1.indepyear from country as t1 join country_name as t2 on t1.code = t2.code order by t1.population limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"country\": [\"name\"]}, {\"country_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"country_name\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"country_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.surfacearea, t1.indepyear from country as t1 join country_name as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "index": 541,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the population, name and leader of the country with the largest area?",
        "schema_without_content": "city : population , name , countrycode , district , id  | sqlite_sequence : name , seq  | country : continent , localname , name , indepyear , gnpold , code2 , capital , lifeexpectancy , governmentform , surfacearea , region , gnp , headofstate , population , code  | country_headofstate : code , headofstate  | countrylanguage : isofficial , language , countrycode , percentage ",
        "schema_with_content": "city : population (390058, 303346, 326011), name (\"Zhuzhou\", \"Shulin\", \"Gingoog\"), countrycode (\"SOM\", \"BGD\", \"SJM\"), district (\"GuantÃ¡namo\", \"Frederiksberg\", \"Alger\"), id (3892, 3862, 977) | sqlite_sequence : name (\"city\"), seq (4079) | country : continent (\"Europe\", \"Africa\", \"Asia\"), localname (\"Myanma Pye\", \"Aruba\", \"MÃ©xico\"), name (\"Suriname\", \"Uruguay\", \"Virgin Islands, U.S.\"), indepyear (1980, 1499, 1941), gnpold (4697.0, 263451.0, 781.0), code2 (\"GY\", \"BG\", \"CN\"), capital (3172, 3017, 2890), lifeexpectancy (78.3, 57.8, 75.1), governmentform (\"Dependent Territory of the US\", \"Emirate Federation\", \"Islamic Republic\"), surfacearea (181035.0, 694.0, 7741220.0), region (\"Southern Africa\", \"Eastern Asia\", \"Western Africa\"), gnp (2223.0, 6041.0, 4768.0), headofstate (\"Natsagiin Bagabandi\", \"Vaira Vike-Freiberga\", \"Malietoa Tanumafili II\"), population (79832000, 50456000, 19680000), code (\"MLI\", \"AIA\", \"KAZ\") | country_headofstate : code (\"IRQ\", \"AUT\", \"GUF\"), headofstate (\"Natsagiin Bagabandi\", \"Vaira Vike-Freiberga\", \"Malietoa Tanumafili II\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Bhojpuri\", \"Kalenjin\", \"Teso\"), countrycode (\"OMN\", \"GNB\", \"FLK\"), percentage (7.0, 5.6, 63.6)",
        "ambiguous_queries": [
            "select name, population, headofstate from country order by surfacearea desc limit 1",
            "select t1.name, t1.population, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"leader\": [{\"country\": [\"headofstate\"]}, {\"country_headofstate\": [\"headofstate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"leader\" refers to the schema \"country_headofstate\".\"headofstate\"",
        "clear_ambiguity": "{\"leader\": {\"country_headofstate\": [\"headofstate\"]}}",
        "gold_query": "select t1.name, t1.population, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
    },
    {
        "index": 542,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : version_number , date_effective_to , template_id , template_type_code , date_effective_from , template_details  | documents : document_description , document_name , document_id , other_details , template_id  | documents_document_name : document_name , document_id  | paragraphs : other_details , document_id , paragraph_id , paragraph_text ",
        "schema_with_content": "ref_template_types : template_type_code (\"BK\", \"PP\", \"PP\"), template_type_description (\"Presentation\", \"Book\", \"Advertisement\") | templates : version_number (2, 3, 2), date_effective_to (\"1989-11-24 19:06:06\", \"2000-10-22 11:57:12\", \"1980-05-07 12:15:47\"), template_id (19, 19, 6), template_type_code (\"BK\", \"BK\", \"CV\"), date_effective_from (\"1979-12-24 10:28:16\", \"1996-02-04 11:27:24\", \"1975-05-20 22:51:19\"), template_details (\"\") | documents : document_description (\"f\", \"h\", \"f\"), document_name (\"A history of Arts\", \"Understanding DB\", \"Palm reading\"), document_id (16514113, 33930, 2394), other_details (None), template_id (7, 11, 6) | documents_document_name : document_name (\"A history of Arts\", \"Understanding DB\", \"Palm reading\"), document_id (0, 3, 1) | paragraphs : other_details (None), document_id (2394, 385906526, 3830), paragraph_id (7, 7, 946335436), paragraph_text (\"Palestinian Territory\", \"Japan\", \"Jersey\")",
        "ambiguous_queries": [
            "select document_id, document_name, document_description from documents",
            "select t1.document_id, t2.document_name, t1.document_description from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id"
        ],
        "gold_ambiguity": {
            "match": "{\"document name\": [{\"documents\": [\"document_name\"]}, {\"documents_document_name\": [\"document_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"document name\" refers to the schema \"documents\".\"document_name\"",
        "clear_ambiguity": "{\"document name\": {\"documents\": [\"document_name\"]}}",
        "gold_query": "select document_id, document_name, document_description from documents"
    },
    {
        "index": 543,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "schema_without_content": "tv_channel : series_name , pay_per_view_ppv , country , hight_definition_tv , pixel_aspect_ratio_par , content , id , language , package_option  | tv_series : viewers_m , share , air_date , 18_49_rating_share , id , channel , weekly_rank , episode , rating  | cartoon : written_by , title , id , original_air_date , directed_by , production_code , channel  | cartoon_directed_by : id , directed_by ",
        "schema_with_content": "tv_channel : series_name (\"MTV Music\", \"Music Box Italia\", \"MTV Music\"), pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), id (\"706\", \"708\", \"713\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\") | tv_series : viewers_m (\"5.75\", \"8.23\", \"5.13\"), share (6.0, 5.0, 5.0), air_date (\"December 10, 2007\", \"October 29, 2007\", \"November 26, 2007\"), 18_49_rating_share (\"3.2/8\", \"2.9/7\", \"2.7/7\"), id (9.0, 7.0, 9.0), channel (\"717\", \"728\", \"707\"), weekly_rank (71.0, 67.0, 62.0), episode (\"A Love of a Lifetime\", \"Winterland\", \"Blowback\"), rating (\"5.3\", \"5.8\", \"4.4\") | cartoon : written_by (\"Todd Casey\", \"Todd Casey\", \"Adam Beechen\"), title (\"Fall of the Blue Beetle!\", \"Invasion of the Secret Santas!\", \"Dawn of the Dead Man!\"), id (2.0, 3.0, 11.0), original_air_date (\"February20,2009\", \"January9,2009\", \"February27,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (107.0, 110.0, 112.0), channel (\"707\", \"701\", \"708\") | cartoon_directed_by : id (11.0, 8.0, 1.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "ambiguous_queries": [
            "select title, directed_by from cartoon order by original_air_date",
            "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date"
        ],
        "gold_ambiguity": {
            "match": "{\"directors\": [{\"cartoon\": [\"directed_by\"]}, {\"cartoon_directed_by\": [\"directed_by\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"directors\" refers to the schema \"cartoon\".\"directed_by\"",
        "clear_ambiguity": "{\"directors\": {\"cartoon\": [\"directed_by\"]}}",
        "gold_query": "select title, directed_by from cartoon order by original_air_date"
    },
    {
        "index": 544,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "What is the first name and country code of the oldest player?",
        "schema_without_content": "players : country_code , last_name , hand , birth_date , first_name , player_id  | players_first_name : player_id , first_name  | matches : winner_hand , winner_id , winner_ioc , winner_entry , loser_age , loser_ioc , year , loser_name , loser_rank_points , best_of , loser_entry , winner_age , tourney_id , loser_rank , winner_seed , loser_ht , score  6-4\", \"6-3 6-2\", \"7-5 2-6 6-2\", loser_id , winner_rank , surface , match_num , winner_ht , winner_rank_points , round , loser_seed , winner_name , loser_hand , draw_size , tourney_level , minutes , tourney_date , tourney_name  | rankings : ranking_points , tours , ranking_date , player_id , ranking ",
        "schema_with_content": "players : country_code (\"LIE\", \"DOM\", \"GHA\"), last_name (\"Fidler\", \"Tang\", \"Jamrichova\"), hand (\"R\", \"R\", \"U\"), birth_date (19800911, 19741020, 19921226), first_name (\"Carin\", \"Mananchaya\", \"Seika\"), player_id (202374, 217222, 215109) | players_first_name : player_id (207924, 208601, 217179), first_name (\"Carin\", \"Mananchaya\", \"Seika\") | matches : winner_hand (\"R\", \"L\"), winner_id (202428, 201311, 201518), winner_ioc (\"POL\", \"AUS\", \"SWE\"), winner_entry (\"\"), loser_age (22.3080082136, 21.472963723499998, 25.149897330599998), loser_ioc (\"NED\", \"BEL\", \"ESP\"), year (2013, 2016, 2017), loser_name (\"Misaki Doi\", \"Stefanie Voegele\", \"Agnieszka Radwanska\"), loser_rank_points (4776, 8000, 4425), best_of (3), loser_entry (\"\"), winner_age (31.3073237509, 32.9719370294, 31.3073237509), tourney_id (\"2017-540\", \"2017-M035\", \"2017-0718\"), loser_rank (29, 81, 8), winner_seed (12, 12, 9), loser_ht (181, 185, 173), score (\"6-1 6-7(2) 6-4\", \"6-3 6-2\", \"7-5 2-6 6-2\"), loser_id (201595, 201311, 201662), winner_rank (26, 22, 61), surface (\"Hard\", \"Clay\", \"Grass\"), match_num (223, 222, 163), winner_ht (162, 172, 159), winner_rank_points (1715, 1037, 2714), round (\"F\", \"R32\", \"QF\"), loser_seed (22, 9, 10), winner_name (\"Angelique Kerber\", \"Victoria Azarenka\", \"Petra Kvitova\"), loser_hand (\"R\", \"L\"), draw_size (64, 12, 8), tourney_level (\"W\", \"P\", \"I\"), minutes (168, 148, 80), tourney_date (20161031, 20170501, 20160425), tourney_name (\"Singapore\", \"Beijing\", \"Madrid\") | rankings : ranking_points (5005, 324, 916), tours (34, 23, 23), ranking_date (20170109, 19980629, 20061113), player_id (206194, 210593, 203454), ranking (1339, 1227, 1223)",
        "ambiguous_queries": [
            "select first_name, country_code from players order by birth_date limit 1",
            "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"players\": [\"first_name\"]}, {\"players_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"players_first_name\".\"first_name\"",
        "clear_ambiguity": "{\"first name\": {\"players_first_name\": [\"first_name\"]}}",
        "gold_query": "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
    },
    {
        "index": 545,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "schema_without_content": "players : hand , first_name , country_code , last_name , birth_date , player_id  | players_birth_date : player_id , birth_date  | matches : winner_seed , loser_id , loser_ht , loser_seed , loser_name , winner_entry , loser_rank , score \", \"6-3 6-3\", \"6-2 5-7 6-4\", loser_hand , winner_rank_points , match_num , draw_size , round , winner_hand , winner_ioc , tourney_name , best_of , tourney_level , winner_ht , winner_id , winner_age , surface , winner_rank , loser_ioc , tourney_date , loser_entry , tourney_id , year , minutes , loser_rank_points , loser_age , winner_name  | rankings : player_id , ranking_points , ranking , tours , ranking_date ",
        "schema_with_content": "players : hand (\"U\", \"\", \"U\"), first_name (\"Rui Jie\", \"Vera Carina\", \"Andrea Natalia\"), country_code (\"MLT\", \"ESP\", \"EGY\"), last_name (\"Udofa\", \"Valdes\", \"Capogrosso\"), birth_date (19891011, 19941129, 19750529), player_id (218643, 204683, 216012) | players_birth_date : player_id (206427, 203882, 217181), birth_date (19891011, 19941129, 19750529) | matches : winner_seed (27, 19, 8), loser_id (201621, 201596, 201527), loser_ht (163, 168, 176), loser_seed (22, 15, 28), loser_name (\"Victoria Azarenka\", \"Sara Errani\", \"Alize Cornet\"), winner_entry (\"\"), loser_rank (21, 14, 11), score (\"6-2 7-6(5)\", \"6-3 6-3\", \"6-2 5-7 6-4\"), loser_hand (\"R\", \"L\"), winner_rank_points (1215, 1076, 1290), match_num (198, 217, 294), draw_size (4, 32, 12), round (\"F\", \"RR\", \"F\"), winner_hand (\"R\", \"L\"), winner_ioc (\"SWE\", \"USA\", \"JPN\"), tourney_name (\"Madrid\", \"Washington\", \"Us Open\"), best_of (3), tourney_level (\"G\", \"G\", \"I\"), winner_ht (163, 184, 181), winner_id (201366, 201474, 201455), winner_age (24.402464065700002, 26.611909650900003, 24.958247775500002), surface (\"Hard\", \"Clay\", \"Grass\"), winner_rank (2, 15, 53), loser_ioc (\"GER\", \"TPE\", \"JPN\"), tourney_date (20161010, 20170424, 20160718), loser_entry (\"\"), tourney_id (\"2016-1051\", \"2017-M004\", \"2017-M021\"), year (2013, 2016, 2017), minutes (100, 153, 99), loser_rank_points (3160, 1729, 2730), loser_age (27.928815879499997, 27.635865845300003, 21.5222450376), winner_name (\"Roberta Vinci\", \"Kiki Bertens\", \"Angelique Kerber\") | rankings : player_id (209949, 212011, 206405), ranking_points (2463, 846, 2302), ranking (1096, 713, 880), tours (4, 20, 7), ranking_date (19870907, 20070122, 20090119)",
        "ambiguous_queries": [
            "select first_name, birth_date from players where country_code = 'USA'",
            "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"birth date\": [{\"players\": [\"birth_date\"]}, {\"players_birth_date\": [\"birth_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth date\" refers to the schema \"players_birth_date\".\"birth_date\"",
        "clear_ambiguity": "{\"birth date\": {\"players_birth_date\": [\"birth_date\"]}}",
        "gold_query": "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
    },
    {
        "index": 546,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "schema_without_content": "addresses : line_3 , country , address_id , state_province_county , other_address_details , line_1 , zip_postcode , city , line_2  | courses : course_name , course_description , course_id , other_details  | departments : department_name , other_details , department_id , department_description  | degree_programs : degree_program_id , degree_summary_name , department_id , degree_summary_description , other_details  | sections : section_description , section_id , course_id , section_name , other_details  | semesters : other_details , semester_description , semester_name , semester_id  | students : middle_name , last_name , permanent_address_id , other_student_details , student_id , date_first_registered , cell_mobile_number 246-7921\", first_name , email_address , date_left , current_address_id , ssn  | students_middle_name : student_id , middle_name  | student_enrolment : degree_program_id , other_details , student_enrolment_id , semester_id , student_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : line_3 (None), country (\"Cook Islands\", \"Haiti\", \"Cook Islands\"), address_id (11, 13, 15), state_province_county (\"Kansas\", \"Kansas\", \"Florida\"), other_address_details (None), line_1 (\"7081 Eda Center\", \"202 Hessel Views Apt. 468\", \"7081 Eda Center\"), zip_postcode (\"400\", \"400\", \"669\"), city (\"Port Chelsea\", \"Port Chelsea\", \"Port Oceane\"), line_2 (\"Suite 239\", \"Suite 239\", \"Apt. 370\") | courses : course_name (\"cal\", \"dl\", \"nlp\"), course_description (\"w\", \"v\", \"b\"), course_id (13, 13, 1), other_details (None) | departments : department_name (\"statistics\", \"dance\", \"management\"), other_details (None), department_id (1, 2, 11), department_description (\"error\", \"in\", \"natus\") | degree_programs : degree_program_id (13, 3, 4), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (4, 8, 3), degree_summary_description (\"unde\", \"architecto\", \"assumenda\"), other_details (None) | sections : section_description (\"reprehenderit\", \"non\", \"qui\"), section_id (1, 15, 6), course_id (5, 4, 2), section_name (\"a\", \"p\", \"f\"), other_details (None) | semesters : other_details (None), semester_description (\"w\", \"f\", \"t\"), semester_name (\"spring 2014\", \"spring 2013\", \"winter 2010\"), semester_id (3, 15, 3) | students : middle_name (\"Aaliyah\", \"Lorenz\", \"Violet\"), last_name (\"Balistreri\", \"Christiansen\", \"Christiansen\"), permanent_address_id (4, 8, 14), other_student_details (\"facilis\", \"non\", \"dolorum\"), student_id (4, 1, 1), date_first_registered (\"2005-12-15 08:42:10\", \"2017-01-04 08:10:25\", \"2007-08-29 23:25:41\"), cell_mobile_number (\"171-642-5684\", \"1-009-710-5151\", \"(462)246-7921\"), first_name (\"Jordy\", \"Delaney\", \"Timmothy\"), email_address (\"skassulke@example.net\", \"dell43@example.net\", \"erwin.zboncak@example.com\"), date_left (\"2007-08-02 04:12:58\", \"2013-10-05 17:41:28\", \"1997-11-16 08:54:33\"), current_address_id (1, 6, 2), ssn (\"248\", \"402\", \"248\") | students_middle_name : student_id (9, 6, 8), middle_name (\"Aaliyah\", \"Lorenz\", \"Violet\") | student_enrolment : degree_program_id (8, 9, 5), other_details (None), student_enrolment_id (1, 8, 3), semester_id (9, 6, 4), student_id (5, 5, 9) | student_enrolment_courses : course_id (2, 6, 8), student_enrolment_id (8, 8, 13), student_course_id (9860, 7, 28982908) | transcripts : other_details (None), transcript_date (\"2002-09-24 06:11:49\", \"1990-03-05 11:59:41\", \"1986-07-12 07:27:29\"), transcript_id (8, 1, 14) | transcript_contents : transcript_id (5, 6, 5), student_course_id (76, 45105806, 70882679)",
        "ambiguous_queries": [
            "select first_name, middle_name, last_name from students order by date_left asc limit 1",
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"middle name\": [{\"students\": [\"middle_name\"]}, {\"students_middle_name\": [\"middle_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"middle name\" refers to the schema \"students\".\"middle_name\"",
        "clear_ambiguity": "{\"middle name\": {\"students\": [\"middle_name\"]}}",
        "gold_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1"
    },
    {
        "index": 547,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "schema_without_content": "stadium : location , highest , stadium_id , capacity , name , lowest , average  | stadium_name : name , stadium_id  | singer : name , country , song_release_year , singer_id , is_male , age , song_name  | concert : concert_id , year , theme , concert_name , stadium_id  | singer_in_concert : singer_id , concert_id ",
        "schema_with_content": "stadium : location (\"Ayr United\", \"Arbroath\", \"Peterhead\"), highest (837, 2363, 921), stadium_id (1, 9, 7), capacity (3100, 10104, 3960), name (\"Recreation Park\", \"Bayview Stadium\", \"Hampden Park\"), lowest (533, 466, 1057), average (864, 864, 642) | stadium_name : name (\"Recreation Park\", \"Bayview Stadium\", \"Hampden Park\"), stadium_id (1, 5, 9) | singer : name (\"Justin Brown\", \"Timbaland\", \"Rose White\"), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2013\", \"2008\", \"2013\"), singer_id (4, 6, 4), is_male (\"F\", \"T\"), age (32, 25, 41), song_name (\"Dangerous\", \"Love\", \"Dangerous\") | concert : concert_id (3, 4, 5), year (\"2014\", \"2015\"), theme (\"Party All Night\", \"Party All Night\", \"Party All Night\"), concert_name (\"Super bootcamp\", \"Home Visits\", \"Super bootcamp\"), stadium_id (\"7\", \"1\", \"2\") | singer_in_concert : singer_id (\"5\", \"2\", \"3\"), concert_id (5, 6, 2)",
        "ambiguous_queries": [
            "select name, capacity from stadium order by average desc limit 1",
            "select t2.name, t1.capacity from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"stadium\": [\"name\"]}, {\"stadium_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"stadium_name\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"stadium_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.capacity from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
    },
    {
        "index": 548,
        "db_id": "poker_player",
        "ambig_type": "join",
        "db_file": "join/poker_player/poker_player.sqlite",
        "question": "List the final tables made and the best finishes of poker players.",
        "schema_without_content": "poker_player : earnings , people_id , poker_player_id , money_rank , final_table_made , best_finish  | poker_player_best_finish : best_finish , poker_player_id  | people : nationality , height , people_id , name , birth_date ",
        "schema_with_content": "poker_player : earnings (476090.0, 596462.0, 104871.0), people_id (5, 2, 2), poker_player_id (4, 5, 2), money_rank (166.0, 166.0, 166.0), final_table_made (21.0, 42.0, 26.0), best_finish (1.0, 2.0, 3.0) | poker_player_best_finish : best_finish (1.0, 2.0, 3.0), poker_player_id (5, 1, 1) | people : nationality (\"Russia\", \"Bulgaria\"), height (182.0, 187.0, 194.0), people_id (2, 5, 6), name (\"Sergey Grankin\", \"Semen Poltavskiy\", \"Aleksey Ostapenko\"), birth_date (\"April 17, 1987\", \"July 14, 1983\", \"January 22, 1987\")",
        "ambiguous_queries": [
            "select final_table_made, best_finish from poker_player",
            "select t1.final_table_made, t2.best_finish from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id"
        ],
        "gold_ambiguity": {
            "match": "{\"best finish\": [{\"poker_player\": [\"best_finish\"]}, {\"poker_player_best_finish\": [\"best_finish\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"best finish\" refers to the schema \"poker_player\".\"best_finish\"",
        "clear_ambiguity": "{\"best finish\": {\"poker_player\": [\"best_finish\"]}}",
        "gold_query": "select final_table_made, best_finish from poker_player"
    },
    {
        "index": 549,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "What is the average and maximum age for each pet type?",
        "schema_without_content": "student : age , city_code , advisor , sex , fname , lname , stuid , major  | has_pet : stuid , petid  | pets : pet_age , weight , petid , pettype  | pets_pet_age : pet_age , petid ",
        "schema_with_content": "student : age (16, 22, 26), city_code (\"SFO\", \"CHI\", \"CHI\"), advisor (2311, 7712, 8918), sex (\"F\", \"M\"), fname (\"Michael\", \"Dinesh\", \"David\"), lname (\"Schwartz\", \"Nelson\", \"Kumar\"), stuid (1021, 1001, 1026), major (600, 520, 50) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pet_age (3, 2, 1), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\") | pets_pet_age : pet_age (3, 2, 1), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
            "select avg(t2.pet_age), max(t2.pet_age), t1.pettype from pets as t1 join pets_pet_age as t2 on t1.petid = t2.petid group by t1.pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"pets\": [\"pet_age\"]}, {\"pets_pet_age\": [\"pet_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"pets_pet_age\".\"pet_age\"",
        "clear_ambiguity": "{\"age\": {\"pets_pet_age\": [\"pet_age\"]}}",
        "gold_query": "select avg(t2.pet_age), max(t2.pet_age), t1.pettype from pets as t1 join pets_pet_age as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "index": 550,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , street , last_name , home_phone , city , first_name , zip_code , cell_number , owner_id , state  | dogs : date_adopted , size_code , dog_id , abandoned_yn , breed_code , owner_id , date_of_birth , gender , date_arrived , age , date_departed , name , weight  | dogs_date_arrived : date_arrived , dog_id  | professionals : email_address , state , role_code , last_name , city , home_phone 0259033559\", \"+020259033559\", \"1-609-566-2752x25197\", zip_code , street , first_name , cell_number , professional_id  | treatments : treatment_id , cost_of_treatment , date_of_treatment , dog_id , professional_id , treatment_type_code ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"ymaggio@example.com\", \"ymaggio@example.com\", \"ymaggio@example.com\"), street (\"1204 Mae Highway Apt. 107\", \"59509 Mellie Mountain\", \"57382 Yost Ridges\"), last_name (\"Funk\", \"Haley\", \"Haley\"), home_phone (\"363.948.1090\", \"1-682-845-0116x63235\", \"01802479758\"), city (\"South Daisyfurt\", \"South Afton\", \"New Margaretteborough\"), first_name (\"Rolando\", \"Cindy\", \"Emelie\"), zip_code (\"61019\", \"00589\", \"22693\"), cell_number (\"478.978.0729\", \"633.455.3045x85484\", \"559.874.3011x989\"), owner_id (12, 5, 15), state (\"Washington\", \"Wisconsin\", \"NorthDakota\") | dogs : date_adopted (\"2018-03-07 21:45:43\", \"2018-03-23 16:02:04\", \"2018-03-25 08:12:51\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (2, 8, 4), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (14, 13, 1), date_of_birth (\"2015-02-26 21:31:22\", \"2009-04-12 06:02:48\", \"2017-09-19 05:39:09\"), gender (\"1\", \"0\"), date_arrived (\"2017-12-22 05:02:02\", \"2017-04-15 09:25:31\", \"2018-01-17 11:44:16\"), age (\"2\", \"6\", \"9\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 06:46:07\", \"2018-03-24 19:36:59\"), name (\"Troy\", \"Merritt\", \"Kacey\"), weight (\"6.92\", \"1.39\", \"5.16\") | dogs_date_arrived : date_arrived (\"2017-12-22 05:02:02\", \"2017-04-15 09:25:31\", \"2018-01-17 11:44:16\"), dog_id (13, 5, 8) | professionals : email_address (\"marquardt.furman@example.org\", \"jacynthe.mclaughlin@example.net\", \"uboehm@example.org\"), state (\"NewMexico\", \"NewMexico\", \"Utah\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Hayes\", \"Braun\", \"Hayes\"), city (\"North Odellfurt\", \"New Laurytown\", \"Kirastad\"), home_phone (\"+02(1)0259033559\", \"+02(1)0259033559\", \"1-609-566-2752x25197\"), zip_code (\"77129\", \"67980\", \"02281\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), first_name (\"Karley\", \"Taryn\", \"Brady\"), cell_number (\"962-983-8109x3509\", \"00230569697\", \"011.193.9081x3186\"), professional_id (8, 15, 13) | treatments : treatment_id (7, 4, 12), cost_of_treatment (681, 147, 147), date_of_treatment (\"2018-03-11 04:23:15\", \"2018-03-15 20:25:34\", \"2018-02-28 17:09:43\"), dog_id (4, 14, 4), professional_id (14, 8, 8), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "ambiguous_queries": [
            "select date_arrived, date_departed from dogs",
            "select t2.date_arrived, t1.date_departed from dogs as t1 join dogs_date_arrived as t2 on t1.dog_id = t2.dog_id"
        ],
        "gold_ambiguity": {
            "match": "{\"arriving date\": [{\"dogs\": [\"date_arrived\"]}, {\"dogs_date_arrived\": [\"date_arrived\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"arriving date\" refers to the schema \"dogs_date_arrived\".\"date_arrived\"",
        "clear_ambiguity": "{\"arriving date\": {\"dogs_date_arrived\": [\"date_arrived\"]}}",
        "gold_query": "select t2.date_arrived, t1.date_departed from dogs as t1 join dogs_date_arrived as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "index": 551,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "What is the average weight for each type of pet?",
        "schema_without_content": "student : age , stuid , city_code , sex , major , fname , advisor , lname  | has_pet : stuid , petid  | pets : pettype , pet_age , weight , petid  | pets_pettype : pettype , petid ",
        "schema_with_content": "student : age (19, 18, 20), stuid (1008, 1031, 1025), city_code (\"NAR\", \"DET\", \"NYC\"), sex (\"F\", \"M\"), major (100, 540, 540), fname (\"Michael\", \"Dinesh\", \"William\"), advisor (7134, 5718, 2192), lname (\"Jones\", \"Gompers\", \"Cheng\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)",
        "ambiguous_queries": [
            "select avg(weight), pettype from pets group by pettype",
            "select avg(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"type\": [{\"pets\": [\"pettype\"]}, {\"pets_pettype\": [\"pettype\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type\" refers to the schema \"pets_pettype\".\"pettype\"",
        "clear_ambiguity": "{\"type\": {\"pets_pettype\": [\"pettype\"]}}",
        "gold_query": "select avg(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "index": 552,
        "db_id": "course_teach",
        "ambig_type": "join",
        "db_file": "join/course_teach/course_teach.sqlite",
        "question": "What is the age and hometown of every teacher?",
        "schema_without_content": "course : course , staring_date , course_id  | teacher : hometown , name , teacher_id , age  | teacher_age : age , teacher_id  | course_arrange : course_id , grade , teacher_id ",
        "schema_with_content": "course : course (\"History\", \"Sports\", \"Bible\"), staring_date (\"15 May\", \"14 May\", \"9 May\"), course_id (2, 6, 7) | teacher : hometown (\"Bolton County Borough\", \"Little Lever Urban District\", \"Horwich Urban District\"), name (\"Vicente Carretero\", \"John Deloor\", \"Joseph Huts\"), teacher_id (2, 7, 7), age (\"29\", \"39\", \"26\") | teacher_age : age (\"29\", \"39\", \"26\"), teacher_id (3, 6, 5) | course_arrange : course_id (5, 2, 3), grade (7, 4, 4), teacher_id (2, 7, 6)",
        "ambiguous_queries": [
            "select age, hometown from teacher",
            "select t2.age, t1.hometown from teacher as t1 join teacher_age as t2 on t1.teacher_id = t2.teacher_id"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"teacher\": [\"age\"]}, {\"teacher_age\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"teacher\".\"age\"",
        "clear_ambiguity": "{\"age\": {\"teacher\": [\"age\"]}}",
        "gold_query": "select age, hometown from teacher"
    },
    {
        "index": 553,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "schema_without_content": "tv_channel : hight_definition_tv , pay_per_view_ppv , id , pixel_aspect_ratio_par , content , language , package_option \", \"Sky Famiglia\", country , series_name  | tv_channel_content : id , content  | tv_series : air_date , channel , weekly_rank , share , 18_49_rating_share , viewers_m , episode , rating , id  | cartoon : id , production_code , directed_by , written_by , title , channel , original_air_date ",
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\"), id (\"704\", \"717\", \"703\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia + Sky HD\", \"no ( FTV )\", \"Sky Famiglia\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"MTV Live HD\", \"MTV Rocks\", \"MTV Live HD\") | tv_channel_content : id (\"713\", \"714\", \"704\"), content (\"music\") | tv_series : air_date (\"October 8, 2007\", \"October 8, 2007\", \"September 24, 2007\"), channel (\"714\", \"717\", \"707\"), weekly_rank (43.0, 66.0, 61.0), share (6.0, 6.0, 6.0), 18_49_rating_share (\"1.5/4\", \"3.2/8\", \"2.2/6\"), viewers_m (\"5.75\", \"6.06\", \"8.23\"), episode (\"Game Three\", \"Game Three\", \"Game Three\"), rating (\"3.8\", \"4.3\", \"3.0\"), id (6.0, 3.0, 6.0) | cartoon : id (3.0, 11.0, 1.0), production_code (109.0, 103.0, 107.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"James Krieg\", \"Steven Melching\", \"James Krieg\"), title (\"Invasion of the Secret Santas!\", \"Dawn of the Dead Man!\", \"The Eyes of Despero!\"), channel (\"703\", \"707\", \"700\"), original_air_date (\"February20,2009\", \"November21,2008\", \"February20,2009\")",
        "ambiguous_queries": [
            "select count(distinct series_name), count(distinct content) from tv_channel",
            "select count(distinct t1.series_name), count(distinct t2.content) from tv_channel as t1 join tv_channel_content as t2 on t1.id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"contents\": [{\"tv_channel\": [\"content\"]}, {\"tv_channel_content\": [\"content\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"contents\" refers to the schema \"tv_channel_content\".\"content\"",
        "clear_ambiguity": "{\"contents\": {\"tv_channel_content\": [\"content\"]}}",
        "gold_query": "select count(distinct t1.series_name), count(distinct t2.content) from tv_channel as t1 join tv_channel_content as t2 on t1.id = t2.id"
    },
    {
        "index": 554,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : first_name , street , zip_code , last_name , state , cell_number , home_phone , owner_id , city , email_address  | dogs : date_of_birth , name , abandoned_yn , date_arrived , date_adopted , date_departed , owner_id , breed_code , age , weight , size_code , gender , dog_id  | dogs_weight : dog_id , weight  | professionals : email_address , professional_id , last_name , home_phone , state , role_code , street , city , first_name , zip_code , cell_number  | treatments : professional_id , cost_of_treatment , dog_id , treatment_id , treatment_type_code , date_of_treatment ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : first_name (\"Heather\", \"Kade\", \"Lorenz\"), street (\"692 Jaskolski Forges\", \"692 Jaskolski Forges\", \"2635 Caitlyn Plains\"), zip_code (\"25609\", \"00589\", \"36871\"), last_name (\"Hauck\", \"Schmitt\", \"Haley\"), state (\"Washington\", \"Vermont\", \"NewYork\"), cell_number (\"121.381.3316x6535\", \"481-483-9083x37986\", \"633.455.3045x85484\"), home_phone (\"01802479758\", \"893-862-5295x61709\", \"085.557.0379x84348\"), owner_id (9, 1, 5), city (\"Lake Tia\", \"Lake Carleyborough\", \"East Hillardberg\"), email_address (\"pearlie18@example.com\", \"hudson.favian@example.com\", \"ybergstrom@example.com\") | dogs : date_of_birth (\"2012-10-14 14:44:37\", \"2012-01-27 05:11:53\", \"2013-02-20 14:50:56\"), name (\"Holden\", \"Bessie\", \"Bessie\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2018-01-02 03:15:29\", \"2017-05-06 08:03:52\", \"2017-10-16 20:06:21\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-03-25 08:12:51\", \"2018-03-25 08:12:51\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 14:15:41\", \"2018-03-24 19:12:22\"), owner_id (7, 8, 8), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"3\", \"9\", \"3\"), weight (\"8.04\", \"2.18\", \"9.8\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), dog_id (6, 2, 14) | dogs_weight : dog_id (2, 11, 10), weight (\"8.04\", \"2.18\", \"9.8\") | professionals : email_address (\"goyette.roosevelt@example.net\", \"lourdes.lowe@example.net\", \"west.eula@example.net\"), professional_id (13, 5, 6), last_name (\"Hyatt\", \"Braun\", \"Watsica\"), home_phone (\"971.048.3763x9404\", \"346.594.3739\", \"1-138-287-3775\"), state (\"Alabama\", \"NorthCarolina\", \"Connecticut\"), role_code (\"Employee\", \"Veterenarian\"), street (\"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), city (\"East Ila\", \"Jaceton\", \"East Ila\"), first_name (\"Brady\", \"Karley\", \"Domenica\"), zip_code (\"43129\", \"41215\", \"80775\"), cell_number (\"1-258-285-4707x8020\", \"1-185-137-1945x409\", \"00230569697\") | treatments : professional_id (9, 5, 8), cost_of_treatment (139, 429, 428), dog_id (10, 1, 10), treatment_id (14, 2, 14), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-08 05:26:23\", \"2018-02-26 09:08:53\")",
        "ambiguous_queries": [
            "select name, age, weight from dogs where abandoned_yn = 1",
            "select t1.name, t1.age, t2.weight from dogs as t1 join dogs_weight as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"weight\": [{\"dogs\": [\"weight\"]}, {\"dogs_weight\": [\"weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"weight\" refers to the schema \"dogs\".\"weight\"",
        "clear_ambiguity": "{\"weight\": {\"dogs\": [\"weight\"]}}",
        "gold_query": "select name, age, weight from dogs where abandoned_yn = 1"
    },
    {
        "index": 555,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : state , zip_code , last_name , cell_number , street , email_address , home_phone 997-7627\", \"130-796-4589x05454\", \"01802479758\", first_name , city , owner_id  | dogs : date_arrived , date_adopted , name , date_departed , gender , date_of_birth , owner_id , abandoned_yn , size_code , breed_code , dog_id , age , weight  | professionals : zip_code , role_code , street , city , last_name , home_phone 1132733868\", state , cell_number , email_address , first_name , professional_id  | professionals_role_code : professional_id , role_code  | treatments : treatment_type_code , dog_id , date_of_treatment , professional_id , treatment_id , cost_of_treatment ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : state (\"NorthDakota\", \"Arkansas\", \"Indiana\"), zip_code (\"36871\", \"25609\", \"22731\"), last_name (\"Rippin\", \"Mertz\", \"DuBuque\"), cell_number (\"478.978.0729\", \"481-483-9083x37986\", \"1-626-264-7659x1697\"), street (\"692 Jaskolski Forges\", \"692 Jaskolski Forges\", \"68118 Daniel Row\"), email_address (\"margaretta.runte@example.net\", \"marks.gail@example.org\", \"ykris@example.com\"), home_phone (\"(058)997-7627\", \"130-796-4589x05454\", \"01802479758\"), first_name (\"Gay\", \"Heather\", \"Cindy\"), city (\"Barrettburgh\", \"Beerton\", \"Lake Jennyferfort\"), owner_id (1, 12, 6) | dogs : date_arrived (\"2017-06-25 10:14:05\", \"2017-12-29 06:08:26\", \"2017-10-16 20:06:21\"), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-21 10:41:18\", \"2018-02-27 00:27:57\"), name (\"Troy\", \"Troy\", \"Mavis\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-24 19:12:22\", \"2018-03-24 23:48:59\"), gender (\"1\", \"0\"), date_of_birth (\"2012-10-14 14:44:37\", \"2008-05-30 12:51:34\", \"2008-05-19 15:54:49\"), owner_id (7, 5, 7), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (13, 13, 12), age (\"4\", \"3\", \"4\"), weight (\"1.39\", \"4.01\", \"2.18\") | professionals : zip_code (\"43129\", \"84515\", \"43129\"), role_code (\"Employee\", \"Veterenarian\"), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), city (\"Jaceton\", \"Jaceton\", \"Jaceton\"), last_name (\"Braun\", \"Christiansen\", \"Hyatt\"), home_phone (\"246-951-0080x76716\", \"1-138-287-3775\", \"+43(5)1132733868\"), state (\"Hawaii\", \"Wyoming\", \"Utah\"), cell_number (\"499-434-0215x1628\", \"499-434-0215x1628\", \"328.842.3792\"), email_address (\"jeichmann@example.com\", \"jerrod.bahringer@example.org\", \"jacynthe.mclaughlin@example.net\"), first_name (\"Velva\", \"Winfield\", \"Lesly\"), professional_id (11, 3, 5) | professionals_role_code : professional_id (2, 12, 3), role_code (\"Employee\", \"Veterenarian\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (13, 10, 15), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-23 13:52:10\", \"2018-03-13 12:22:58\"), professional_id (7, 8, 6), treatment_id (10, 3, 8), cost_of_treatment (681, 852, 139)",
        "ambiguous_queries": [
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t2.role_code, t1.street, t1.city, t1.state from professionals as t1 join professionals_role_code as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
        ],
        "gold_ambiguity": {
            "match": "{\"role\": [{\"professionals\": [\"role_code\"]}, {\"professionals_role_code\": [\"role_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"role\" refers to the schema \"professionals\".\"role_code\"",
        "clear_ambiguity": "{\"role\": {\"professionals\": [\"role_code\"]}}",
        "gold_query": "select role_code, street, city, state from professionals where city like '%West%'"
    },
    {
        "index": 556,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give me Brazil's population and life expectancies.",
        "schema_without_content": "city : id , name , district , countrycode , population  | sqlite_sequence : seq , name  | country : localname , name , lifeexpectancy , indepyear , code , capital , governmentform , code2 , headofstate , gnp , continent , region , population , surfacearea , gnpold  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : percentage , countrycode , isofficial , language ",
        "schema_with_content": "city : id (728, 1045, 927), name (\"Pinsk\", \"Pinetown\", \"Gandhinagar\"), district (\"New Jersey\", \"Utrecht\", \"Bursa\"), countrycode (\"DMA\", \"HND\", \"SGP\"), population (207557, 214727, 101391) | sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"PanamÃ¡\", \"Uganda\", \"Suomi\"), name (\"Tuvalu\", \"Palestine\", \"Ethiopia\"), lifeexpectancy (48.8, 45.6, 77.8), indepyear (1957, 1946, 1912), code (\"NER\", \"MDV\", \"DMA\"), capital (2754, 3333, 2919), governmentform (\"Socialistic State\", \"Republic\", \"Independent Church State\"), code2 (\"VA\", \"TN\", \"IQ\"), headofstate (\"Miguel Ãngel RodrÃ­guez EcheverrÃ­a\", \"Valdas Adamkus\", \"Shahabuddin Ahmad\"), gnp (1424285.0, 1161755.0, 3563.0), continent (\"Africa\", \"Oceania\", \"Oceania\"), region (\"Micronesia/Caribbean\", \"North America\", \"British Islands\"), population (10097000, 22720000, 5605000), surfacearea (468.0, 88946.0, 49012.0), gnpold (153370.0, 10241.0, 1746.0) | country_lifeexpectancy : code (\"TTO\", \"YUG\", \"KGZ\"), lifeexpectancy (48.8, 45.6, 77.8) | countrylanguage : percentage (52.6, 84.8, 17.9), countrycode (\"NAM\", \"ARM\", \"TCD\"), isofficial (\"T\", \"F\"), language (\"Sidamo\", \"Sena\", \"Venda\")",
        "ambiguous_queries": [
            "select population, lifeexpectancy from country where name = 'Brazil'",
            "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.name = 'Brazil'"
        ],
        "gold_ambiguity": {
            "match": "{\"life expectancies\": [{\"country\": [\"lifeexpectancy\"]}, {\"country_lifeexpectancy\": [\"lifeexpectancy\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"life expectancies\" refers to the schema \"country\".\"lifeexpectancy\"",
        "clear_ambiguity": "{\"life expectancies\": {\"country\": [\"lifeexpectancy\"]}}",
        "gold_query": "select population, lifeexpectancy from country where name = 'Brazil'"
    },
    {
        "index": 557,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "What are the email, cell phone and home phone of each professional?",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : last_name , street , zip_code , cell_number , first_name , city , home_phone , email_address , state , owner_id  | dogs : date_arrived , breed_code , age , date_adopted , size_code , gender , name , weight , abandoned_yn , owner_id , dog_id , date_of_birth , date_departed  | professionals : state , last_name , cell_number , role_code , home_phone , city , zip_code , email_address , first_name , professional_id , street  | professionals_email_address : email_address , professional_id  | treatments : date_of_treatment , cost_of_treatment , professional_id , treatment_type_code , treatment_id , dog_id ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : last_name (\"Fisher\", \"Hamill\", \"Funk\"), street (\"1858 Jan Park\", \"2417 Keara Stravenue Apt. 146\", \"68118 Daniel Row\"), zip_code (\"00589\", \"45244\", \"22693\"), cell_number (\"478.978.0729\", \"762.589.6117x1328\", \"633.455.3045x85484\"), first_name (\"Tre\", \"Nora\", \"Heather\"), city (\"West Leonard\", \"New Margaretteborough\", \"South Daisyfurt\"), home_phone (\"1-346-655-5842x768\", \"1-332-849-1908\", \"1-332-849-1908\"), email_address (\"angeline99@example.com\", \"hudson.favian@example.com\", \"ybergstrom@example.com\"), state (\"Wisconsin\", \"Pennsylvania\", \"Washington\"), owner_id (2, 7, 7) | dogs : date_arrived (\"2017-10-25 00:55:34\", \"2018-01-17 11:44:16\", \"2017-04-20 00:58:55\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"1\", \"5\", \"1\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-13 12:47:15\", \"2018-02-25 23:45:30\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), name (\"Troy\", \"Evangeline\", \"Kacey\"), weight (\"1.72\", \"8.16\", \"9.48\"), abandoned_yn (\"1\", \"0\"), owner_id (11, 14, 3), dog_id (15, 8, 3), date_of_birth (\"2012-05-31 08:01:36\", \"2018-03-17 04:05:12\", \"2015-02-26 21:31:22\"), date_departed (\"2018-03-25 05:07:47\", \"2018-03-25 04:42:14\", \"2018-03-25 10:25:46\") | professionals : state (\"Connecticut\", \"NorthCarolina\", \"Montana\"), last_name (\"Frami\", \"Braun\", \"Considine\"), cell_number (\"00230569697\", \"962-983-8109x3509\", \"889-940-2676\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"325-155-0801x7005\", \"246-951-0080x76716\", \"312.216.3352\"), city (\"South Rockyport\", \"East Ila\", \"Jaceton\"), zip_code (\"34041\", \"43129\", \"67980\"), email_address (\"deanna.schuster@example.com\", \"west.eula@example.net\", \"west.eula@example.net\"), first_name (\"Taryn\", \"Taryn\", \"Brady\"), professional_id (6, 2, 2), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\") | professionals_email_address : email_address (\"deanna.schuster@example.com\", \"west.eula@example.net\", \"west.eula@example.net\"), professional_id (15, 5, 6) | treatments : date_of_treatment (\"2018-03-15 19:10:02\", \"2018-02-26 09:08:53\", \"2018-03-15 19:10:02\"), cost_of_treatment (945, 407, 349), professional_id (5, 8, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (11, 6, 14), dog_id (2, 15, 14)",
        "ambiguous_queries": [
            "select email_address, cell_number, home_phone from professionals",
            "select t2.email_address, t1.cell_number, t1.home_phone from professionals as t1 join professionals_email_address as t2 on t1.professional_id = t2.professional_id"
        ],
        "gold_ambiguity": {
            "match": "{\"email\": [{\"professionals\": [\"email_address\"]}, {\"professionals_email_address\": [\"email_address\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"email\" refers to the schema \"professionals\".\"email_address\"",
        "clear_ambiguity": "{\"email\": {\"professionals\": [\"email_address\"]}}",
        "gold_query": "select email_address, cell_number, home_phone from professionals"
    },
    {
        "index": 558,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "join",
        "db_file": "join/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "schema_without_content": "employee : name , employee_id , city , age  | shop : shop_id , location , district , number_products , name , manager_name  | shop_name : shop_id , name  | hiring : is_full_time , start_from , shop_id , employee_id  | evaluation : bonus , year_awarded , employee_id ",
        "schema_with_content": "employee : name (\"Steve Borthwick\", \"Tim Payne\", \"Mark Regan\"), employee_id (1, 5, 9), city (\"Sale\", \"Sale\", \"Leicester\"), age (28, 36, 40) | shop : shop_id (9, 9, 6), location (\"Espoo\", \"Valkeakoski\", \"Kuopio\"), district (\"Jakobstads Centralplan\", \"Magnum Areena\", \"Veritas Stadion\"), number_products (1600, 4780, 10770), name (\"FC Honka\", \"FC Inter\", \"FF Jaro\"), manager_name (\"Antti Muurinen\", \"Mika Laurikainen\", \"Olli Huttunen\") | shop_name : shop_id (1, 3, 1), name (\"FC Honka\", \"FC Inter\", \"FF Jaro\") | hiring : is_full_time (\"T\", \"F\"), start_from (\"2010\", \"2013\", \"2013\"), shop_id (1, 4, 1), employee_id (6, 5, 5) | evaluation : bonus (2900.0, 4000.0, 4000.0), year_awarded (\"2016\", \"2015\", \"2018\"), employee_id (\"4\", \"4\", \"7\")",
        "ambiguous_queries": [
            "select name, location, district from shop order by number_products desc",
            "select t2.name, t1.location, t1.district from shop as t1 join shop_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"shop\": [\"name\"]}, {\"shop_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"shop\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"shop\": [\"name\"]}}",
        "gold_query": "select name, location, district from shop order by number_products desc"
    },
    {
        "index": 559,
        "db_id": "network_1",
        "ambig_type": "join",
        "db_file": "join/network_1/network_1.sqlite",
        "question": "Show the names and grades of each high schooler.",
        "schema_without_content": "highschooler : name , id , grade  | highschooler_name : name , id  | friend : friend_id , student_id  | likes : student_id , liked_id ",
        "schema_with_content": "highschooler : name (\"Kyle\", \"Jessica\", \"Brittany\"), id (1304, 1468, 1661), grade (9, 11, 10) | highschooler_name : name (\"Kyle\", \"Jessica\", \"Brittany\"), id (1468, 1316, 1661) | friend : friend_id (1709, 1381, 1782), student_id (1381, 1510, 1689) | likes : student_id (1911, 1709, 1782), liked_id (1689, 1304, 1934)",
        "ambiguous_queries": [
            "select name, grade from highschooler",
            "select t2.name, t1.grade from highschooler as t1 join highschooler_name as t2 on t1.id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"highschooler\": [\"name\"]}, {\"highschooler_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"highschooler_name\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"highschooler_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.grade from highschooler as t1 join highschooler_name as t2 on t1.id = t2.id"
    },
    {
        "index": 560,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "schema_without_content": "stadium : lowest , location , highest , average , name , stadium_id , capacity  | singer : singer_id , country , song_release_year , age , name , song_name , is_male  | singer_country : singer_id , country  | concert : stadium_id , theme , concert_name , concert_id , year  | singer_in_concert : singer_id , concert_id ",
        "schema_with_content": "stadium : lowest (466, 315, 400), location (\"Stirling Albion\", \"Alloa Athletic\", \"Brechin City\"), highest (780, 1763, 1125), average (2106, 864, 638), name (\"Stark's Park\", \"Somerset Park\", \"Recreation Park\"), stadium_id (1, 3, 6), capacity (52500, 3100, 52500) | singer : singer_id (3, 5, 6), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2008\", \"2013\", \"2014\"), age (41, 29, 29), name (\"Justin Brown\", \"Joe Sharp\", \"Timbaland\"), song_name (\"Gentleman\", \"Love\", \"Hey Oh\"), is_male (\"F\", \"T\") | singer_country : singer_id (5, 6, 4), country (\"Netherlands\", \"United States\", \"France\") | concert : stadium_id (\"1\", \"9\", \"2\"), theme (\"Wide Awake\", \"Wide Awake\", \"Free choice\"), concert_name (\"Week 2\", \"Week 1\", \"Week 1\"), concert_id (6, 2, 3), year (\"2014\", \"2015\") | singer_in_concert : singer_id (\"2\", \"4\", \"5\"), concert_id (3, 4, 5)",
        "ambiguous_queries": [
            "select name, country from singer where song_name like '%Hey%'",
            "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'"
        ],
        "gold_ambiguity": {
            "match": "{\"singer\": [{\"singer\": [\"country\"]}, {\"singer_country\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"singer\" refers to the schema \"singer\".\"country\"",
        "clear_ambiguity": "{\"singer\": {\"singer\": [\"country\"]}}",
        "gold_query": "select name, country from singer where song_name like '%Hey%'"
    },
    {
        "index": 561,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "join",
        "db_file": "join/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "schema_without_content": "employee : name , city , employee_id , age  | shop : name , shop_id , district , number_products , manager_name , location  | shop_location : shop_id , location  | hiring : is_full_time , employee_id , start_from , shop_id  | evaluation : year_awarded , employee_id , bonus ",
        "schema_with_content": "employee : name (\"Louis Deacon\", \"Phil Vickery\", \"Steve Borthwick\"), city (\"Sale\", \"Bath\", \"Wasps\"), employee_id (8, 1, 8), age (29, 32, 30) | shop : name (\"FF Jaro\", \"FC Honka\", \"FC Lahti\"), shop_id (8, 3, 2), district (\"Tehtaan kenttÃ¤\", \"Veritas Stadion\", \"Arto Tolsa Areena\"), number_products (10770, 3516, 3500), manager_name (\"Job Dragtsma\", \"Pekka Lyyski\", \"Mika Lehkosuo\"), location (\"Kuopio\", \"Espoo\", \"Kotka\") | shop_location : shop_id (9, 8, 2), location (\"Kuopio\", \"Espoo\", \"Kotka\") | hiring : is_full_time (\"T\", \"F\"), employee_id (4, 1, 3), start_from (\"2012\", \"2013\", \"2003\"), shop_id (5, 2, 6) | evaluation : year_awarded (\"2016\", \"2016\", \"2017\"), employee_id (\"7\", \"10\", \"1\"), bonus (4000.0, 4000.0, 3000.0)",
        "ambiguous_queries": [
            "select name, location, district from shop order by number_products desc",
            "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
        ],
        "gold_ambiguity": {
            "match": "{\"location\": [{\"shop\": [\"location\"]}, {\"shop_location\": [\"location\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"location\" refers to the schema \"shop\".\"location\"",
        "clear_ambiguity": "{\"location\": {\"shop\": [\"location\"]}}",
        "gold_query": "select name, location, district from shop order by number_products desc"
    },
    {
        "index": 562,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : cell_number 9217952551\", \"121.381.3316x6535\", email_address , home_phone 034-1670\", \"916.976.9480x13851\", \"363.948.1090\", first_name , owner_id , last_name , city , zip_code , state , street  | dogs : gender , abandoned_yn , breed_code , dog_id , age , date_arrived , name , date_adopted , owner_id , date_of_birth , date_departed , weight , size_code  | dogs_breed_code : breed_code , dog_id  | professionals : professional_id , street , city , zip_code , cell_number 908-7311x065\", \"880-659-7577x736\", \"889-940-2676\", email_address , role_code , first_name , home_phone , state , last_name  | treatments : treatment_id , dog_id , treatment_type_code , date_of_treatment , cost_of_treatment , professional_id ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : cell_number (\"478.978.0729\", \"+70(4)9217952551\", \"121.381.3316x6535\"), email_address (\"kturner@example.net\", \"wpfeffer@example.net\", \"angeline99@example.com\"), home_phone (\"(544)034-1670\", \"916.976.9480x13851\", \"363.948.1090\"), first_name (\"Cindy\", \"Johann\", \"Heather\"), owner_id (6, 11, 12), last_name (\"Haley\", \"Hamill\", \"Fisher\"), city (\"Beerton\", \"Lake Valentin\", \"Lake Tia\"), zip_code (\"92406\", \"02647\", \"93165\"), state (\"Vermont\", \"Pennsylvania\", \"Arizona\"), street (\"57382 Yost Ridges\", \"2417 Keara Stravenue Apt. 146\", \"2635 Caitlyn Plains\") | dogs : gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (15, 9, 2), age (\"8\", \"3\", \"4\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-12-29 06:08:26\", \"2017-05-06 08:03:52\"), name (\"Hipolito\", \"Betty\", \"Mavis\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-10 15:06:43\", \"2018-03-14 08:05:18\"), owner_id (1, 11, 2), date_of_birth (\"2013-02-13 05:15:21\", \"2012-07-11 17:15:10\", \"2013-02-20 14:50:56\"), date_departed (\"2018-03-25 13:07:04\", \"2018-03-25 10:25:46\", \"2018-03-25 06:46:07\"), weight (\"6.92\", \"4.36\", \"7.57\"), size_code (\"LGE\", \"MED\", \"SML\") | dogs_breed_code : breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (5, 15, 14) | professionals : professional_id (12, 3, 14), street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"72532 Hane Course\nLake Berylland, ND 95283\"), city (\"Borisside\", \"McLaughlinfort\", \"New Maryjane\"), zip_code (\"07412\", \"98844\", \"54312\"), cell_number (\"(369)908-7311x065\", \"880-659-7577x736\", \"889-940-2676\"), email_address (\"lambert62@example.org\", \"uboehm@example.org\", \"lucile.shanahan@example.org\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Domenica\", \"Ericka\", \"Danny\"), home_phone (\"022.529.0550x1319\", \"346.594.3739\", \"971.048.3763x9404\"), state (\"Utah\", \"California\", \"Alabama\"), last_name (\"Walter\", \"Walter\", \"Christiansen\") | treatments : treatment_id (7, 12, 6), dog_id (1, 15, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-11 04:23:15\", \"2018-03-24 22:25:58\"), cost_of_treatment (349, 852, 668), professional_id (7, 9, 7)",
        "ambiguous_queries": [
            "select distinct breed_code, size_code from dogs",
            "select distinct t2.breed_code, t1.size_code from dogs as t1 join dogs_breed_code as t2 on t1.dog_id = t2.dog_id"
        ],
        "gold_ambiguity": {
            "match": "{\"breed type\": [{\"dogs\": [\"breed_code\"]}, {\"dogs_breed_code\": [\"breed_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"breed type\" refers to the schema \"dogs\".\"breed_code\"",
        "clear_ambiguity": "{\"breed type\": {\"dogs\": [\"breed_code\"]}}",
        "gold_query": "select distinct breed_code, size_code from dogs"
    },
    {
        "index": 563,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , street , state , city , first_name , last_name , owner_id , zip_code , home_phone 997-7627\", \"318-052-6573\", \"085.557.0379x84348\", cell_number 271-6744x4507\" | owners_last_name : last_name , owner_id  | dogs : abandoned_yn , date_arrived , size_code , breed_code , weight , dog_id , age , date_of_birth , date_adopted , name , owner_id , date_departed , gender  | professionals : first_name , cell_number 908-7311x065\", \"939-2435x80863\", role_code , zip_code , professional_id , home_phone , email_address , state , city , street , last_name  | treatments : treatment_type_code , dog_id , cost_of_treatment , date_of_treatment , professional_id , treatment_id ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"hudson.favian@example.com\", \"zboncak.madonna@example.net\", \"zboncak.madonna@example.net\"), street (\"2635 Caitlyn Plains\", \"0647 Hintz Village Apt. 024\", \"9212 Rosenbaum Lights\"), state (\"Mississippi\", \"NewYork\", \"Mississippi\"), city (\"Lake Jennyferfort\", \"East Hillardberg\", \"West Leonard\"), first_name (\"Gay\", \"Lorenz\", \"Tre\"), last_name (\"DuBuque\", \"Stoltenberg\", \"Fisher\"), owner_id (11, 6, 2), zip_code (\"22731\", \"00589\", \"35747\"), home_phone (\"(058)997-7627\", \"318-052-6573\", \"085.557.0379x84348\"), cell_number (\"762.589.6117x1328\", \"478.978.0729\", \"(783)271-6744x4507\") | owners_last_name : last_name (\"DuBuque\", \"Stoltenberg\", \"Fisher\"), owner_id (2, 15, 10) | dogs : abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-06-25 10:14:05\", \"2017-12-22 05:02:02\", \"2017-06-25 10:14:05\"), size_code (\"LGE\", \"MED\", \"SML\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), weight (\"1.72\", \"5.16\", \"4.01\"), dog_id (11, 2, 2), age (\"1\", \"1\", \"3\"), date_of_birth (\"2012-05-31 08:01:36\", \"2013-02-13 05:15:21\", \"2008-10-09 22:38:53\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-02-27 00:27:57\", \"2018-03-13 12:47:15\"), name (\"Hipolito\", \"Holden\", \"Hipolito\"), owner_id (3, 7, 14), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 14:15:41\", \"2018-03-25 06:29:10\"), gender (\"1\", \"0\") | professionals : first_name (\"Brady\", \"Taryn\", \"Sigurd\"), cell_number (\"1-185-137-1945x409\", \"(369)908-7311x065\", \"(275)939-2435x80863\"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"43129\", \"17902\", \"07412\"), professional_id (7, 5, 6), home_phone (\"1-138-287-3775\", \"325-155-0801x7005\", \"971.048.3763x9404\"), email_address (\"west.eula@example.net\", \"mekhi.little@example.org\", \"lucile.shanahan@example.org\"), state (\"Wisconsin\", \"Alabama\", \"NewMexico\"), city (\"Borisside\", \"East Ila\", \"McLaughlinfort\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), last_name (\"Murazik\", \"Watsica\", \"Murazik\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (15, 10, 4), cost_of_treatment (567, 266, 407), date_of_treatment (\"2018-03-19 04:39:54\", \"2018-02-28 17:09:43\", \"2018-02-28 17:09:43\"), professional_id (4, 10, 7), treatment_id (9, 6, 5)",
        "ambiguous_queries": [
            "select first_name, last_name, email_address from owners where state like '%North%'",
            "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"owners\": [\"last_name\"]}, {\"owners_last_name\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"owners_last_name\".\"last_name\"",
        "clear_ambiguity": "{\"last name\": {\"owners_last_name\": [\"last_name\"]}}",
        "gold_query": "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
    },
    {
        "index": 564,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "schema_without_content": "city : district , name , id , countrycode , population  | sqlite_sequence : name , seq  | country : capital , headofstate , code , code2 , localname , lifeexpectancy , gnp , surfacearea , continent , name , indepyear , region , population , gnpold , governmentform \" | country_surfacearea : surfacearea , code  | countrylanguage : isofficial , language , countrycode , percentage ",
        "schema_with_content": "city : district (\"Ho Chi Minh City\", \"Cross River\", \"Taza-Al Hoceima-Taou\"), name (\"Jhansi\", \"Reggio nellÂ´ Emilia\", \"Daska\"), id (1334, 3848, 2594), countrycode (\"GIB\", \"SJM\", \"MEX\"), population (112455, 140459, 212977) | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (2696, 3171, 1791), headofstate (\"Muammar al-Qadhafi\", \"Muammar al-Qadhafi\", \"Carl XVI Gustaf\"), code (\"SLV\", \"DNK\", \"TUV\"), code2 (\"KM\", \"CY\", \"IE\"), localname (\"BelgiÃ«/Belgique\", \"Hrvatska\", \"TÃ¼rkiye\"), lifeexpectancy (63.2, 70.3, 71.4), gnp (13714.0, 903.0, 4127.0), surfacearea (13878.0, 13878.0, 2831.0), continent (\"Africa\", \"Europe\", \"North America\"), name (\"India\", \"RÃ©union\", \"Colombia\"), indepyear (1977, 1923, 1991), region (\"Middle East\", \"Eastern Asia\", \"Caribbean\"), population (380200, 38653600, 417000), gnpold (4542.0, 1102.0, 45914.0), governmentform (\"Socialistic Republic\", \"Nonmetropolitan Territory of New Zealand\", \"Constitutional Monarchy (Emirate)\") | country_surfacearea : surfacearea (13878.0, 13878.0, 2831.0), code (\"MHL\", \"GRC\", \"CYM\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Chiu chau\", \"Gisu\", \"Kachin\"), countrycode (\"KGZ\", \"SPM\", \"KEN\"), percentage (4.1, 2.5, 70.6)",
        "ambiguous_queries": [
            "select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000",
            "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = 'North America' and t2.surfacearea > 3000"
        ],
        "gold_ambiguity": {
            "match": "{\"surface area\": [{\"country\": [\"surfacearea\"]}, {\"country_surfacearea\": [\"surfacearea\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"surface area\" refers to the schema \"country\".\"surfacearea\"",
        "clear_ambiguity": "{\"surface area\": {\"country\": [\"surfacearea\"]}}",
        "gold_query": "select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000"
    },
    {
        "index": 565,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , street , last_name , state , home_phone 563-0260x454\", \"747-5094x8134\", zip_code , city , email_address , cell_number 768-5439x484\", \"399-3116\", \"+004323592985\", first_name  | owners_first_name : first_name , owner_id  | dogs : date_of_birth , name , age , size_code , owner_id , gender , date_arrived , weight , date_adopted , dog_id , breed_code , date_departed , abandoned_yn  | professionals : state , city , street , cell_number , last_name , zip_code , home_phone 1132733868\", \"022.529.0550x1319\", \"+712898266914\", professional_id , role_code , first_name , email_address  | treatments : cost_of_treatment , professional_id , date_of_treatment , dog_id , treatment_type_code , treatment_id ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (15, 10, 3), street (\"2417 Keara Stravenue Apt. 146\", \"692 Jaskolski Forges\", \"0647 Hintz Village Apt. 024\"), last_name (\"Hauck\", \"Stoltenberg\", \"Nicolas\"), state (\"Washington\", \"Mississippi\", \"Washington\"), home_phone (\"066.264.7885\", \"(799)563-0260x454\", \"(094)747-5094x8134\"), zip_code (\"02647\", \"61019\", \"87304\"), city (\"Port Zackery\", \"Lake Jennyferfort\", \"Port Reannamouth\"), email_address (\"lynn81@example.org\", \"wpfeffer@example.net\", \"ykris@example.com\"), cell_number (\"(722)768-5439x484\", \"(257)399-3116\", \"+00(2)4323592985\"), first_name (\"Cindy\", \"Johann\", \"Melisa\") | owners_first_name : first_name (\"Cindy\", \"Johann\", \"Melisa\"), owner_id (11, 5, 2) | dogs : date_of_birth (\"2012-05-03 21:42:25\", \"2017-09-19 05:39:09\", \"2010-11-11 07:11:53\"), name (\"Jeffrey\", \"Mavis\", \"Mavis\"), age (\"9\", \"6\", \"5\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (10, 12, 10), gender (\"1\", \"0\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-10-25 00:55:34\", \"2017-06-18 19:45:38\"), weight (\"4.01\", \"9.48\", \"9.48\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-07 21:45:43\", \"2018-03-14 08:05:18\"), dog_id (7, 7, 8), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 05:07:47\", \"2018-03-24 23:48:59\"), abandoned_yn (\"1\", \"0\") | professionals : state (\"Alabama\", \"Mississippi\", \"Indiana\"), city (\"Kirastad\", \"Borisside\", \"Raynorfort\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), cell_number (\"328.842.3792\", \"889-940-2676\", \"328.842.3792\"), last_name (\"Christiansen\", \"Tillman\", \"Frami\"), zip_code (\"17902\", \"41215\", \"17902\"), home_phone (\"+43(5)1132733868\", \"022.529.0550x1319\", \"+71(6)2898266914\"), professional_id (2, 4, 3), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Sigurd\", \"Jayson\", \"Jayson\"), email_address (\"goyette.roosevelt@example.net\", \"lucile.shanahan@example.org\", \"lourdes.lowe@example.net\") | treatments : cost_of_treatment (852, 428, 407), professional_id (7, 7, 9), date_of_treatment (\"2018-03-19 04:39:54\", \"2018-03-15 20:25:34\", \"2018-03-16 10:27:36\"), dog_id (1, 15, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (7, 6, 1)",
        "ambiguous_queries": [
            "select first_name, last_name, email_address from owners where state like '%North%'",
            "select t2.first_name, t1.last_name, t1.email_address from owners as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"owners\": [\"first_name\"]}, {\"owners_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"owners_first_name\".\"first_name\"",
        "clear_ambiguity": "{\"first name\": {\"owners_first_name\": [\"first_name\"]}}",
        "gold_query": "select t2.first_name, t1.last_name, t1.email_address from owners as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
    },
    {
        "index": 566,
        "db_id": "poker_player",
        "ambig_type": "join",
        "db_file": "join/poker_player/poker_player.sqlite",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "schema_without_content": "poker_player : earnings , money_rank , poker_player_id , people_id , final_table_made , best_finish  | people : birth_date , people_id , name , nationality , height  | people_birth_date : birth_date , people_id ",
        "schema_with_content": "poker_player : earnings (142800.0, 476090.0, 476090.0), money_rank (154.0, 166.0, 154.0), poker_player_id (5, 1, 4), people_id (2, 7, 1), final_table_made (21.0, 26.0, 26.0), best_finish (1.0, 2.0, 3.0) | people : birth_date (\"August 8, 1986\", \"May 26, 1986\", \"February 8, 1981\"), people_id (6, 3, 4), name (\"Aleksey Ostapenko\", \"Sergey Grankin\", \"Aleksey Ostapenko\"), nationality (\"Russia\", \"Bulgaria\"), height (182.0, 193.0, 193.0) | people_birth_date : birth_date (\"August 8, 1986\", \"May 26, 1986\", \"February 8, 1981\"), people_id (1, 1, 3)",
        "ambiguous_queries": [
            "select name, birth_date from people order by name asc",
            "select t1.name, t2.birth_date from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc"
        ],
        "gold_ambiguity": {
            "match": "{\"birth date\": [{\"people\": [\"birth_date\"]}, {\"people_birth_date\": [\"birth_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth date\" refers to the schema \"people_birth_date\".\"birth_date\"",
        "clear_ambiguity": "{\"birth date\": {\"people_birth_date\": [\"birth_date\"]}}",
        "gold_query": "select t1.name, t2.birth_date from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc"
    },
    {
        "index": 567,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What the smallest version number and its template type code?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_id , template_type_code , template_details , date_effective_from , date_effective_to , version_number  | templates_version_number : version_number , template_id  | documents : document_id , document_description , document_name , template_id , other_details  | paragraphs : paragraph_text , paragraph_id , document_id , other_details ",
        "schema_with_content": "ref_template_types : template_type_code (\"PPT\", \"AD\", \"AD\"), template_type_description (\"Paper\", \"Presentation\", \"Advertisement\") | templates : template_id (18, 25, 9), template_type_code (\"PPT\", \"CV\", \"PPT\"), template_details (\"\"), date_effective_from (\"1975-10-20 02:28:58\", \"1993-10-07 02:33:04\", \"2010-09-24 01:15:11\"), date_effective_to (\"2007-06-06 06:18:53\", \"1989-11-24 19:06:06\", \"1998-05-12 12:51:29\"), version_number (0, 6, 4) | templates_version_number : version_number (0, 6, 4), template_id (4, 1, 15) | documents : document_id (2394, 82, 385906526), document_description (\"n\", \"w\", \"h\"), document_name (\"Data base\", \"Do not panic\", \"How to read a book\"), template_id (21, 14, 6), other_details (None) | paragraphs : paragraph_text (\"Jersey\", \"Japan\", \"Jersey\"), paragraph_id (7, 16615, 16615), document_id (2394, 33930, 3830), other_details (None)",
        "ambiguous_queries": [
            "select min(version_number), template_type_code from templates",
            "select min(t2.version_number), t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
        ],
        "gold_ambiguity": {
            "match": "{\"version number\": [{\"templates\": [\"version_number\"]}, {\"templates_version_number\": [\"version_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"version number\" refers to the schema \"templates_version_number\".\"version_number\"",
        "clear_ambiguity": "{\"version number\": {\"templates_version_number\": [\"version_number\"]}}",
        "gold_query": "select min(t2.version_number), t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
    },
    {
        "index": 568,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_to , date_effective_from , version_number , template_type_code , template_details , template_id  | templates_template_type_code : template_id , template_type_code  | documents : document_description , document_name , document_id , other_details , template_id  | paragraphs : other_details , document_id , paragraph_text , paragraph_id ",
        "schema_with_content": "ref_template_types : template_type_code (\"PPT\", \"PP\", \"CV\"), template_type_description (\"Book\", \"Book\", \"CV\") | templates : date_effective_to (\"2000-10-22 11:57:12\", \"1994-12-07 13:26:23\", \"1976-10-28 10:08:50\"), date_effective_from (\"1986-11-14 12:20:18\", \"2012-04-05 07:11:42\", \"1999-06-21 11:10:30\"), version_number (0, 5, 3), template_type_code (\"BK\", \"AD\", \"CV\"), template_details (\"\"), template_id (7, 11, 0) | templates_template_type_code : template_id (18, 22, 20), template_type_code (\"BK\", \"AD\", \"CV\") | documents : document_description (\"b\", \"b\", \"h\"), document_name (\"How to read a book\", \"Customer reviews\", \"Palm reading\"), document_id (80, 76, 16514113), other_details (None), template_id (7, 7, 7) | paragraphs : other_details (None), document_id (651512, 3830, 2394), paragraph_text (\"Jersey\", \"Palestinian Territory\", \"Indonesia\"), paragraph_id (510442723, 280120913, 608931827)",
        "ambiguous_queries": [
            "select min(version_number), template_type_code from templates",
            "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
        ],
        "gold_ambiguity": {
            "match": "{\"template type code\": [{\"templates\": [\"template_type_code\"]}, {\"templates_template_type_code\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template type code\" refers to the schema \"templates_template_type_code\".\"template_type_code\"",
        "clear_ambiguity": "{\"template type code\": {\"templates_template_type_code\": [\"template_type_code\"]}}",
        "gold_query": "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
    },
    {
        "index": 569,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "schema_without_content": "city : countrycode , population , name , id , district  | sqlite_sequence : name , seq  | country : name , indepyear , code2 , capital , surfacearea , gnp , population , lifeexpectancy , continent , region , localname , gnpold , governmentform , code , headofstate  | country_population : population , code  | countrylanguage : percentage , isofficial , countrycode , language ",
        "schema_with_content": "city : countrycode (\"ERI\", \"MHL\", \"MSR\"), population (962507, 4802, 114912), name (\"Suez\", \"Tshikapa\", \"Regina\"), id (2953, 965, 2614), district (\"Belize City\", \"Sofala\", \"Shiga\") | sqlite_sequence : name (\"city\"), seq (4079) | country : name (\"Ethiopia\", \"Bahrain\", \"Belgium\"), indepyear (1960, 843, 1906), code2 (\"ET\", \"PW\", \"CU\"), capital (3320, 2298, 916), surfacearea (83859.0, 637657.0, 1102.0), gnp (612.0, 11345.0, 746.0), population (21778000, 5171300, 34000), lifeexpectancy (63.7, 56.5, 37.8), continent (\"South America\", \"Africa\", \"South America\"), region (\"Southern and Central Asia\", \"Western Europe\", \"Caribbean\"), localname (\"Brunei Darussalam\", \"â\", \"New Zealand/Aotearoa\"), gnpold (442544.0, 19452.0, 9757.0), governmentform (\"Part of Denmark\", \"Occupied by Marocco\", \"Parlementary Monarchy\"), code (\"GNQ\", \"LAO\", \"SEN\"), headofstate (\"Haji Hassan al-Bolkiah\", \"Maumoon Abdul Gayoom\", \"Arthur N. R. Robinson\") | country_population : population (21778000, 5171300, 34000), code (\"NIU\", \"ETH\", \"GIN\") | countrylanguage : percentage (18.4, 31.8, 75.2), isofficial (\"T\", \"F\"), countrycode (\"ATG\", \"SMR\", \"ISL\"), language (\"Lao-Soung\", \"Nahua\", \"Senufo and Minianka\")",
        "ambiguous_queries": [
            "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
            "select sum(t2.population), t1.governmentform from country as t1 join country_population as t2 on t1.code = t2.code group by t1.governmentform having avg(t1.lifeexpectancy) > 72"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72"
    },
    {
        "index": 570,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "schema_without_content": "city : name \", \"Borujerd\", \"Ivano-Frankivsk\", district , population , countrycode , id  | sqlite_sequence : name , seq  | country : continent , code2 , code , surfacearea , capital , name , population , region , gnpold , governmentform , gnp , headofstate , lifeexpectancy , localname , indepyear  | country_name : name , code  | countrylanguage : countrycode , isofficial , percentage , language ",
        "schema_with_content": "city : name (\"Cochin (Kochi)\", \"Borujerd\", \"Ivano-Frankivsk\"), district (\"Jiangsu\", \"Pondicherry\", \"Kilis\"), population (177000, 593700, 91069), countrycode (\"NER\", \"LKA\", \"SPM\"), id (3278, 3807, 1707) | sqlite_sequence : name (\"city\"), seq (4079) | country : continent (\"Antarctica\", \"Europe\", \"Africa\"), code2 (\"CV\", \"TC\", \"VN\"), code (\"COG\", \"TTO\", \"BRB\"), surfacearea (185180.0, 373.0, 181.0), capital (652, 2884, 144), name (\"Martinique\", \"Laos\", \"Egypt\"), population (10043200, 50, 2583000), region (\"Western Africa\", \"Central Africa\", \"Micronesia\"), gnpold (119946.0, 153370.0, 30373.0), governmentform (\"Socialistic Republic\", \"Socialistic Republic\", \"Autonomous Area\"), gnp (4787.0, 96.0, 105.0), headofstate (\"Alpha Oumar KonarÃ©\", \"HeydÃ¤r Ãliyev\", \"Sam Nujoma\"), lifeexpectancy (74.1, 38.3, 69.3), localname (\"Honduras\", \"Andorra\", \"Lietuva\"), indepyear (1923, 1948, 1970) | country_name : name (\"Martinique\", \"Laos\", \"Egypt\"), code (\"MWI\", \"PAK\", \"ESP\") | countrylanguage : countrycode (\"VCT\", \"VCT\", \"CUB\"), isofficial (\"T\", \"F\"), percentage (2.4, 7.7, 10.4), language (\"Iban\", \"Turkmenian\", \"Carolinian\")",
        "ambiguous_queries": [
            "select name, population, headofstate from country order by surfacearea desc limit 1",
            "select t2.name, t1.population, t1.headofstate from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"country\": [\"name\"]}, {\"country_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"country\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"country\": [\"name\"]}}",
        "gold_query": "select name, population, headofstate from country order by surfacearea desc limit 1"
    },
    {
        "index": 571,
        "db_id": "car_1",
        "ambig_type": "join",
        "db_file": "join/car_1/car_1.sqlite",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : id , fullname , country , maker  | model_list : maker , modelid , model  | car_names : makeid , make , model  | cars_data : year , horsepower , accelerate , mpg , id , weight , cylinders , edispl  | cars_data_cylinders : id , cylinders ",
        "schema_with_content": "continents : contid (1, 3, 2), continent (\"africa\", \"africa\", \"asia\") | countries : countryid (5, 1, 13), continent (3, 5, 1), countryname (\"japan\", \"germany\", \"new zealand\") | car_makers : id (11, 16, 1), fullname (\"Honda\", \"Chrysler\", \"Nissan Motors\"), country (\"1\", \"4\", \"1\"), maker (\"fiat\", \"subaru\", \"nissan\") | model_list : maker (10, 8, 6), modelid (16, 24, 20), model (\"pontiac\", \"pontiac\", \"chrysler\") | car_names : makeid (197, 169, 340), make (\"chevrolet nova custom\", \"volkswagen rabbit\", \"honda civic 1300\"), model (\"hi\", \"volkswagen\", \"mercury\") | cars_data : year (1978, 1981, 1978), horsepower (\"85\", \"96\", \"167\"), accelerate (11.0, 20.5, 15.5), mpg (\"9\", \"44.6\", \"21\"), id (25, 272, 176), weight (1968, 2278, 2430), cylinders (5, 4, 5), edispl (116.0, 383.0, 140.0) | cars_data_cylinders : id (297, 237, 261), cylinders (5, 4, 5)",
        "ambiguous_queries": [
            "select max(accelerate), cylinders from cars_data group by cylinders",
            "select max(t1.accelerate), t2.cylinders from cars_data as t1 join cars_data_cylinders as t2 on t1.id = t2.id group by t2.cylinders"
        ],
        "gold_ambiguity": {
            "match": "{\"cylinders\": [{\"cars_data\": [\"cylinders\"]}, {\"cars_data_cylinders\": [\"cylinders\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cylinders\" refers to the schema \"cars_data\".\"cylinders\"",
        "clear_ambiguity": "{\"cylinders\": {\"cars_data\": [\"cylinders\"]}}",
        "gold_query": "select max(accelerate), cylinders from cars_data group by cylinders"
    },
    {
        "index": 572,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "schema_without_content": "tv_channel : content , pixel_aspect_ratio_par , package_option \", \"Option\", country , pay_per_view_ppv , hight_definition_tv , id , language , series_name  | tv_series : 18_49_rating_share , air_date , weekly_rank , share , id , viewers_m , channel , episode , rating  | tv_series_episode : id , episode  | cartoon : production_code , channel , title , directed_by , written_by , original_air_date , id ",
        "schema_with_content": "tv_channel : content (\"music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Option\", \"no ( FTV )\", \"Option\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), id (\"705\", \"728\", \"708\"), language (\"Italian\", \"English\"), series_name (\"myDeejay\", \"MTV Hits\", \"Classica\") | tv_series : 18_49_rating_share (\"1.5/4\", \"1.5/4\", \"2.2/6\"), air_date (\"October 8, 2007\", \"November 5, 2007\", \"October 15, 2007\"), weekly_rank (66.0, 70.0, 66.0), share (6.0, 6.0, 6.0), id (10.0, 5.0, 8.0), viewers_m (\"5.75\", \"6.75\", \"8.23\"), channel (\"713\", \"719\", \"728\"), episode (\"Winterland\", \"Blowback\", \"The Legend of Dylan McCleen\"), rating (\"3.4\", \"5.3\", \"4.4\") | tv_series_episode : id (8.0, 3.0, 2.0), episode (\"Winterland\", \"Blowback\", \"The Legend of Dylan McCleen\") | cartoon : production_code (106.0, 110.0, 108.0), channel (\"700\", \"701\", \"705\"), title (\"Journey to the Center of the Bat!\", \"Fall of the Blue Beetle!\", \"Deep Cover for Batman!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Joseph Kuhr\", \"J. M. DeMatteis\", \"J. M. DeMatteis\"), original_air_date (\"January2,2009\", \"February27,2009\", \"February20,2009\"), id (8.0, 2.0, 9.0)",
        "ambiguous_queries": [
            "select episode, rating from tv_series order by rating desc limit 3",
            "select t2.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3"
        ],
        "gold_ambiguity": {
            "match": "{\"episodes\": [{\"tv_series\": [\"episode\"]}, {\"tv_series_episode\": [\"episode\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"episodes\" refers to the schema \"tv_series_episode\".\"episode\"",
        "clear_ambiguity": "{\"episodes\": {\"tv_series_episode\": [\"episode\"]}}",
        "gold_query": "select t2.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3"
    },
    {
        "index": 573,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What is the first and second line for all addresses?",
        "schema_without_content": "addresses : state_province_county , other_address_details , line_3 , city , line_2 , country , zip_postcode , address_id , line_1  | addresses_line_2 : line_2 , address_id  | courses : other_details , course_description , course_id , course_name  | departments : department_description , other_details , department_name , department_id  | degree_programs : degree_program_id , degree_summary_name , department_id , other_details , degree_summary_description  | sections : section_description , section_name , section_id , course_id , other_details  | semesters : semester_name , semester_description , other_details , semester_id  | students : middle_name , first_name , email_address , last_name , permanent_address_id , current_address_id , cell_mobile_number , student_id , ssn , date_left , date_first_registered , other_student_details  | student_enrolment : degree_program_id , other_details , student_enrolment_id , student_id , semester_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : state_province_county (\"WestVirginia\", \"NorthCarolina\", \"Hawaii\"), other_address_details (None), line_3 (None), city (\"Michelleburgh\", \"New Clemensburgh\", \"Mariliehaven\"), line_2 (\"Apt. 370\", \"Suite 079\", \"Apt. 406\"), country (\"Angola\", \"Samoa\", \"Norfolk Island\"), zip_postcode (\"541\", \"446\", \"400\"), address_id (4, 12, 6), line_1 (\"0643 Muller Vista\", \"202 Hessel Views Apt. 468\", \"202 Hessel Views Apt. 468\") | addresses_line_2 : line_2 (\"Apt. 370\", \"Suite 079\", \"Apt. 406\"), address_id (1, 11, 11) | courses : other_details (None), course_description (\"b\", \"d\", \"v\"), course_id (2, 10, 13), course_name (\"fr\", \"os\", \"os\") | departments : department_description (\"non\", \"in\", \"consequatur\"), other_details (None), department_name (\"engineer\", \"law\", \"biology\"), department_id (12, 14, 10) | degree_programs : degree_program_id (1, 5, 7), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (3, 11, 13), other_details (None), degree_summary_description (\"assumenda\", \"architecto\", \"unde\") | sections : section_description (\"ex\", \"voluptatem\", \"provident\"), section_name (\"y\", \"b\", \"o\"), section_id (5, 12, 15), course_id (2, 5, 6), other_details (None) | semesters : semester_name (\"spring 2016\", \"spring 2013\", \"spring 2012\"), semester_description (\"q\", \"g\", \"o\"), other_details (None), semester_id (14, 6, 5) | students : middle_name (\"Brooklyn\", \"Violet\", \"Alberta\"), first_name (\"Jordy\", \"Stanford\", \"Orrin\"), email_address (\"jhuel@example.com\", \"skassulke@example.net\", \"nya.lesch@example.net\"), last_name (\"Osinski\", \"Mohr\", \"Rempel\"), permanent_address_id (8, 8, 9), current_address_id (2, 6, 12), cell_mobile_number (\"877.549.9067x8723\", \"171-642-5684\", \"171-642-5684\"), student_id (2, 11, 15), ssn (\"248\", \"6274274\", \"494\"), date_left (\"2007-08-02 04:12:58\", \"2004-12-08 05:29:11\", \"2017-07-09 21:38:43\"), date_first_registered (\"1986-02-24 21:12:23\", \"2017-01-04 08:10:25\", \"2018-03-13 09:56:22\"), other_student_details (\"omnis\", \"nesciunt\", \"qui\") | student_enrolment : degree_program_id (3, 5, 5), other_details (None), student_enrolment_id (8, 8, 2), student_id (14, 5, 1), semester_id (13, 12, 4) | student_enrolment_courses : course_id (6, 2, 8), student_enrolment_id (9, 4, 4), student_course_id (45105806, 76, 0) | transcripts : transcript_date (\"1984-01-18 23:07:07\", \"1990-03-05 11:59:41\", \"1986-07-12 07:27:29\"), other_details (None), transcript_id (7, 15, 3) | transcript_contents : student_course_id (2, 76, 28982908), transcript_id (5, 5, 4)",
        "ambiguous_queries": [
            "select line_1, line_2 from addresses",
            "select t1.line_1, t2.line_2 from addresses as t1 join addresses_line_2 as t2 on t1.address_id = t2.address_id"
        ],
        "gold_ambiguity": {
            "match": "{\"second line\": [{\"addresses\": [\"line_2\"]}, {\"addresses_line_2\": [\"line_2\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"second line\" refers to the schema \"addresses_line_2\".\"line_2\"",
        "clear_ambiguity": "{\"second line\": {\"addresses_line_2\": [\"line_2\"]}}",
        "gold_query": "select t1.line_1, t2.line_2 from addresses as t1 join addresses_line_2 as t2 on t1.address_id = t2.address_id"
    },
    {
        "index": 574,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_type_code , template_id , template_details , date_effective_from , version_number , date_effective_to  | templates_version_number : template_id , version_number  | documents : other_details , template_id , document_id , document_description , document_name  | paragraphs : paragraph_id , paragraph_text , other_details , document_id ",
        "schema_with_content": "ref_template_types : template_type_description (\"CV\", \"Presentation\", \"Paper\"), template_type_code (\"BK\", \"BK\", \"PPT\") | templates : template_type_code (\"CV\", \"PPT\", \"PP\"), template_id (24, 25, 19), template_details (\"\"), date_effective_from (\"1983-07-16 21:16:16\", \"1979-12-24 10:28:16\", \"1975-10-20 02:28:58\"), version_number (8, 5, 1), date_effective_to (\"1989-11-24 19:06:06\", \"1992-05-02 20:06:11\", \"1975-07-16 04:52:10\") | templates_version_number : template_id (14, 16, 24), version_number (8, 5, 1) | documents : other_details (None), template_id (8, 8, 4), document_id (651512, 385906526, 50123), document_description (\"z\", \"k\", \"h\"), document_name (\"Learning French\", \"Robbin CV\", \"Robbin CV\") | paragraphs : paragraph_id (243399026, 1104059, 9946), paragraph_text (\"Micronesia\", \"Jersey\", \"Ukraine\"), other_details (None), document_id (50123, 80, 651512)",
        "ambiguous_queries": [
            "select template_id, version_number, template_type_code from templates",
            "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
        ],
        "gold_ambiguity": {
            "match": "{\"version number\": [{\"templates\": [\"version_number\"]}, {\"templates_version_number\": [\"version_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"version number\" refers to the schema \"templates_version_number\".\"version_number\"",
        "clear_ambiguity": "{\"version number\": {\"templates_version_number\": [\"version_number\"]}}",
        "gold_query": "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
    },
    {
        "index": 575,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "schema_without_content": "city : population , name , id , district , countrycode  | sqlite_sequence : seq , name  | country : region , population , code2 , governmentform \", surfacearea , capital , name , gnpold , continent , lifeexpectancy , code , headofstate , gnp , indepyear , localname  | country_governmentform : governmentform \", code  | countrylanguage : percentage , isofficial , language , countrycode ",
        "schema_with_content": "city : population (659604, 93735, 302108), name (\"Roanoke\", \"Siem Reap\", \"Katsina\"), id (3434, 1786, 2670), district (\"al-Tamim\", \"NariÃ±o\", \"Trabzon\"), countrycode (\"AZE\", \"NZL\", \"GHA\") | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Central Africa\", \"Southeast Asia\", \"Middle East\"), population (12878000, 5083000, 29490000), code2 (\"ID\", \"BW\", \"AS\"), governmentform (\"Socialistic Republic\", \"Republic\", \"Monarchy (Emirate)\"), surfacearea (242.0, 6257.0, 801590.0), capital (3209, 2253, 3171), name (\"Tuvalu\", \"New Caledonia\", \"Turkey\"), gnpold (19452.0, 206025.0, 6884.0), continent (\"Oceania\", \"Europe\", \"Europe\"), lifeexpectancy (50.5, 52.4, 78.0), code (\"NIC\", \"BTN\", \"PER\"), headofstate (\"Charles Taylor\", \"Johannes Rau\", \"Lansana ContÃ©\"), gnp (95023.0, 351182.0, 293.0), indepyear (1951, 1929, 1980), localname (\"ToÃ§ikiston\", \"Cameroun/Cameroon\", \"Togo\") | country_governmentform : governmentform (\"Socialistic Republic\", \"Republic\", \"Monarchy (Emirate)\"), code (\"MLT\", \"GNQ\", \"BIH\") | countrylanguage : percentage (52.0, 12.4, 88.7), isofficial (\"T\", \"F\"), language (\"Hadjarai\", \"Malagasy\", \"Kanuri\"), countrycode (\"GUY\", \"CZE\", \"SJM\")",
        "ambiguous_queries": [
            "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
            "select sum(t1.population), t2.governmentform from country as t1 join country_governmentform as t2 on t1.code = t2.code group by t2.governmentform having avg(t1.lifeexpectancy) > 72"
        ],
        "gold_ambiguity": {
            "match": "{\"government form name\": [{\"country\": [\"governmentform\"]}, {\"country_governmentform\": [\"governmentform\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"government form name\" refers to the schema \"country\".\"governmentform\"",
        "clear_ambiguity": "{\"government form name\": {\"country\": [\"governmentform\"]}}",
        "gold_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72"
    },
    {
        "index": 576,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , state , city , zip_code , first_name , email_address , last_name , home_phone 747-5094x8134\", \"997-7627\", cell_number 768-5439x484\", \"341.667.8085\", street  | owners_email_address : email_address , owner_id  | dogs : name , size_code , date_departed , gender , owner_id , breed_code , date_adopted , date_arrived , age , dog_id , abandoned_yn , weight , date_of_birth  | professionals : state , city , home_phone , professional_id , cell_number , role_code , street , email_address , last_name , first_name , zip_code  | treatments : dog_id , treatment_id , treatment_type_code , date_of_treatment , cost_of_treatment , professional_id ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (15, 11, 1), state (\"Arkansas\", \"Mississippi\", \"Vermont\"), city (\"Brakusfurt\", \"Lake Jennyferfort\", \"Barrettburgh\"), zip_code (\"92406\", \"11990\", \"36871\"), first_name (\"Melisa\", \"Jaclyn\", \"Rachelle\"), email_address (\"angeline99@example.com\", \"pearlie18@example.com\", \"hudson.favian@example.com\"), last_name (\"Stoltenberg\", \"Prohaska\", \"Haley\"), home_phone (\"363.948.1090\", \"(094)747-5094x8134\", \"(058)997-7627\"), cell_number (\"121.381.3316x6535\", \"(722)768-5439x484\", \"341.667.8085\"), street (\"51934 Treutel Harbor\", \"59509 Mellie Mountain\", \"89011 Kertzmann Spring Suite 642\") | owners_email_address : email_address (\"angeline99@example.com\", \"pearlie18@example.com\", \"hudson.favian@example.com\"), owner_id (12, 10, 2) | dogs : name (\"Bessie\", \"Bessie\", \"Hipolito\"), size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-24 23:48:59\", \"2018-03-25 06:29:10\", \"2018-03-25 06:29:10\"), gender (\"1\", \"0\"), owner_id (11, 14, 1), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-18 07:47:40\", \"2018-03-18 07:47:40\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-10-25 00:55:34\", \"2017-04-20 00:58:55\"), age (\"2\", \"9\", \"4\"), dog_id (14, 13, 15), abandoned_yn (\"1\", \"0\"), weight (\"1.39\", \"9.48\", \"8.96\"), date_of_birth (\"2015-02-26 21:31:22\", \"2010-11-11 07:11:53\", \"2015-02-26 21:31:22\") | professionals : state (\"Mississippi\", \"Connecticut\", \"Connecticut\"), city (\"North Odellfurt\", \"Borisside\", \"New Maryjane\"), home_phone (\"971.048.3763x9404\", \"246-951-0080x76716\", \"022.529.0550x1319\"), professional_id (12, 3, 15), cell_number (\"1-258-285-4707x8020\", \"1-181-670-9466\", \"1-185-137-1945x409\"), role_code (\"Employee\", \"Veterenarian\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), email_address (\"west.eula@example.net\", \"lucile.shanahan@example.org\", \"delphine29@example.com\"), last_name (\"Hyatt\", \"Braun\", \"Kshlerin\"), first_name (\"Velva\", \"Sigurd\", \"Olaf\"), zip_code (\"17902\", \"67980\", \"02281\") | treatments : dog_id (13, 1, 13), treatment_id (14, 4, 6), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-13 12:22:58\", \"2018-03-15 19:10:02\"), cost_of_treatment (668, 349, 681), professional_id (14, 8, 10)",
        "ambiguous_queries": [
            "select first_name, last_name, email_address from owners where state like '%North%'",
            "select t1.first_name, t1.last_name, t2.email_address from owners as t1 join owners_email_address as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
        ],
        "gold_ambiguity": {
            "match": "{\"email\": [{\"owners\": [\"email_address\"]}, {\"owners_email_address\": [\"email_address\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"email\" refers to the schema \"owners\".\"email_address\"",
        "clear_ambiguity": "{\"email\": {\"owners\": [\"email_address\"]}}",
        "gold_query": "select first_name, last_name, email_address from owners where state like '%North%'"
    },
    {
        "index": 577,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "join",
        "db_file": "join/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "schema_without_content": "employee : city , age , employee_id , name  | shop : number_products , location , district , manager_name , shop_id , name  | shop_manager_name : shop_id , manager_name  | hiring : employee_id , shop_id , start_from , is_full_time  | evaluation : employee_id , bonus , year_awarded ",
        "schema_with_content": "employee : city (\"Bath\", \"Leicester\", \"Bristol\"), age (23, 23, 36), employee_id (7, 4, 8), name (\"Mark Regan\", \"Mark Regan\", \"Tim Payne\") | shop : number_products (5000, 15000, 10770), location (\"Turku\", \"Espoo\", \"Lahti\"), district (\"Magnum Areena\", \"Magnum Areena\", \"Finnair Stadium\"), manager_name (\"Kai NyyssÃ¶nen\", \"Mika Lehkosuo\", \"Antti Muurinen\"), shop_id (1, 3, 4), name (\"HJK\", \"FC Haka\", \"FC Haka\") | shop_manager_name : shop_id (4, 5, 9), manager_name (\"Kai NyyssÃ¶nen\", \"Mika Lehkosuo\", \"Antti Muurinen\") | hiring : employee_id (7, 3, 1), shop_id (8, 4, 2), start_from (\"2008\", \"2010\", \"2010\"), is_full_time (\"T\", \"F\") | evaluation : employee_id (\"1\", \"10\", \"2\"), bonus (2900.0, 3000.0, 2900.0), year_awarded (\"2016\", \"2017\", \"2017\")",
        "ambiguous_queries": [
            "select manager_name, district from shop order by number_products desc limit 1",
            "select t2.manager_name, t1.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"manager name\": [{\"shop\": [\"manager_name\"]}, {\"shop_manager_name\": [\"manager_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"manager name\" refers to the schema \"shop_manager_name\".\"manager_name\"",
        "clear_ambiguity": "{\"manager name\": {\"shop_manager_name\": [\"manager_name\"]}}",
        "gold_query": "select t2.manager_name, t1.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
    },
    {
        "index": 578,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "schema_without_content": "stadium : stadium_id , name , location , highest , capacity , average , lowest  | singer : song_release_year , name , is_male , country , singer_id , song_name , age  | singer_song_release_year : song_release_year , singer_id  | concert : year , stadium_id , concert_id , theme , concert_name  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : stadium_id (3, 7, 6), name (\"Hampden Park\", \"Balmoor\", \"Hampden Park\"), location (\"Peterhead\", \"Raith Rovers\", \"Brechin City\"), highest (1125, 921, 2363), capacity (3808, 10104, 2000), average (642, 2106, 1477), lowest (466, 400, 1294) | singer : song_release_year (\"1992\", \"2008\", \"1992\"), name (\"Joe Sharp\", \"Justin Brown\", \"Timbaland\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (5, 2, 5), song_name (\"Gentleman\", \"Dangerous\", \"Gentleman\"), age (41, 25, 52) | singer_song_release_year : song_release_year (\"1992\", \"2008\", \"1992\"), singer_id (5, 4, 6) | concert : year (\"2014\", \"2015\"), stadium_id (\"7\", \"7\", \"1\"), concert_id (5, 4, 2), theme (\"Party All Night\", \"Happy Tonight\", \"Happy Tonight\"), concert_name (\"Week 1\", \"Week 2\", \"Super bootcamp\") | singer_in_concert : concert_id (6, 1, 2), singer_id (\"2\", \"4\", \"6\")",
        "ambiguous_queries": [
            "select song_name, song_release_year from singer order by age limit 1",
            "select t1.song_name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"release year\": [{\"singer\": [\"song_release_year\"]}, {\"singer_song_release_year\": [\"song_release_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"release year\" refers to the schema \"singer\".\"song_release_year\"",
        "clear_ambiguity": "{\"release year\": {\"singer\": [\"song_release_year\"]}}",
        "gold_query": "select song_name, song_release_year from singer order by age limit 1"
    },
    {
        "index": 579,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "schema_without_content": "stadium : capacity , location , name , average , lowest , stadium_id , highest  | stadium_name : stadium_id , name  | singer : singer_id , age , name , is_male , song_name , song_release_year , country  | concert : year , concert_name , stadium_id , concert_id , theme  | singer_in_concert : singer_id , concert_id ",
        "schema_with_content": "stadium : capacity (3100, 3960, 52500), location (\"Peterhead\", \"Stirling Albion\", \"Ayr United\"), name (\"Somerset Park\", \"Balmoor\", \"Recreation Park\"), average (642, 637, 730), lowest (466, 466, 466), stadium_id (9, 5, 7), highest (780, 2363, 1763) | stadium_name : stadium_id (2, 7, 2), name (\"Somerset Park\", \"Balmoor\", \"Recreation Park\") | singer : singer_id (5, 4, 1), age (43, 43, 29), name (\"Tribal King\", \"Rose White\", \"Justin Brown\"), is_male (\"F\", \"T\"), song_name (\"You\", \"Gentleman\", \"Sun\"), song_release_year (\"2013\", \"2014\", \"2003\"), country (\"Netherlands\", \"United States\", \"France\") | concert : year (\"2014\", \"2015\"), concert_name (\"Home Visits\", \"Auditions\", \"Week 1\"), stadium_id (\"7\", \"1\", \"2\"), concert_id (3, 2, 1), theme (\"Happy Tonight\", \"Free choice 2\", \"Free choice 2\") | singer_in_concert : singer_id (\"4\", \"6\", \"4\"), concert_id (3, 4, 5)",
        "ambiguous_queries": [
            "select location, name from stadium where capacity between 5000 and 10000",
            "select t1.location, t2.name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"stadium\": [\"name\"]}, {\"stadium_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"stadium_name\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"stadium_name\": [\"name\"]}}",
        "gold_query": "select t1.location, t2.name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
    },
    {
        "index": 580,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "join",
        "db_file": "join/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "schema_without_content": "employee : age , city , name , employee_id  | shop : manager_name , district , number_products , name , location , shop_id  | shop_district : shop_id , district  | hiring : start_from , shop_id , is_full_time , employee_id  | evaluation : employee_id , bonus , year_awarded ",
        "schema_with_content": "employee : age (32, 36, 43), city (\"Bristol\", \"Bristol\", \"Bath\"), name (\"Mark Regan\", \"Jason Hobson\", \"Jason Hobson\"), employee_id (6, 1, 2) | shop : manager_name (\"Kai NyyssÃ¶nen\", \"Mika Lehkosuo\", \"Pekka Lyyski\"), district (\"WiklÃ¶f Holding Arena\", \"Lahden Stadion\", \"Veritas Stadion\"), number_products (10770, 15000, 5000), name (\"FC Haka\", \"KuPS\", \"FC Haka\"), location (\"Kotka\", \"Mariehamn\", \"Jakobstad\"), shop_id (3, 9, 1) | shop_district : shop_id (4, 6, 3), district (\"WiklÃ¶f Holding Arena\", \"Lahden Stadion\", \"Veritas Stadion\") | hiring : start_from (\"2003\", \"2013\", \"2010\"), shop_id (4, 5, 4), is_full_time (\"T\", \"F\"), employee_id (1, 5, 1) | evaluation : employee_id (\"4\", \"1\", \"4\"), bonus (4000.0, 4000.0, 2900.0), year_awarded (\"2018\", \"2015\", \"2016\")",
        "ambiguous_queries": [
            "select name, location, district from shop order by number_products desc",
            "select t1.name, t1.location, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"shop\": [\"district\"]}, {\"shop_district\": [\"district\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"shop_district\".\"district\"",
        "clear_ambiguity": "{\"district\": {\"shop_district\": [\"district\"]}}",
        "gold_query": "select t1.name, t1.location, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
    },
    {
        "index": 581,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "schema_without_content": "players : country_code , last_name , player_id , first_name , birth_date , hand  | players_last_name : player_id , last_name  | matches : winner_age , loser_seed , tourney_name , surface , match_num , winner_rank , loser_id , tourney_date , winner_ht , best_of , loser_age , loser_hand , tourney_level , winner_rank_points , winner_id , loser_rank , winner_name , minutes , loser_rank_points , draw_size , loser_ht , winner_seed , loser_name , round , winner_hand , winner_ioc , winner_entry , tourney_id , loser_entry , year , loser_ioc , score  6-4 6-3\" | rankings : ranking_date , ranking , tours , ranking_points , player_id ",
        "schema_with_content": "players : country_code (\"TJK\", \"HAI\", \"RSA\"), last_name (\"Kostikova\", \"Solorio\", \"Scheiflinger\"), player_id (207355, 200746, 219460), first_name (\"Bo Ra\", \"Gill\", \"Zina\"), birth_date (19480612, 19800702, 19881228), hand (\"R\", \"R\", \"\") | players_last_name : player_id (210030, 209683, 215398), last_name (\"Kostikova\", \"Solorio\", \"Scheiflinger\") | matches : winner_age (27.463381245700003, 36.027378507899996, 32.1478439425), loser_seed (23, 18, 8), tourney_name (\"Biel\", \"Istanbul\", \"Roland Garros\"), surface (\"Hard\", \"Clay\", \"Grass\"), match_num (148, 254, 283), winner_rank (35, 8, 33), loser_id (201320, 201514, 201493), tourney_date (20160208, 20160307, 20160822), winner_ht (173, 174, 184), best_of (3), loser_age (31.8631074606, 23.4387405886, 27.310061601599998), loser_hand (\"R\", \"L\"), tourney_level (\"P\", \"W\", \"P\"), winner_rank_points (4236, 2480, 5151), winner_id (201419, 201535, 201427), loser_rank (3, 10, 4), winner_name (\"Camila Giorgi\", \"Roberta Vinci\", \"Kristina Mladenovic\"), minutes (154, 0, 184), loser_rank_points (2120, 2094, 1577), draw_size (128, 12, 64), loser_ht (177, 180, 168), winner_seed (14, 12, 14), loser_name (\"Anastasia Pavlyuchenkova\", \"Sorana Cirstea\", \"Misaki Doi\"), round (\"QF\", \"BR\", \"QF\"), winner_hand (\"R\", \"L\"), winner_ioc (\"SVK\", \"NED\", \"SRB\"), winner_entry (\"\"), tourney_id (\"2017-1039\", \"2016-M004\", \"2016-M009\"), loser_entry (\"\"), year (2013, 2016, 2017), loser_ioc (\"RUS\", \"FRA\", \"AUS\"), score (\"6-4 1-6 6-4\", \"6-1 6-3\", \"6-7(3) 6-4 6-3\") | rankings : ranking_date (20030203, 20060703, 19970331), ranking (730, 587, 642), tours (16, 33, 1), ranking_points (10, 1850, 2604), player_id (201655, 202445, 211586)",
        "ambiguous_queries": [
            "select first_name, last_name from players where hand = 'L' order by birth_date",
            "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"players\": [\"last_name\"]}, {\"players_last_name\": [\"last_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"players_last_name\".\"last_name\"",
        "clear_ambiguity": "{\"last name\": {\"players_last_name\": [\"last_name\"]}}",
        "gold_query": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
    },
    {
        "index": 582,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : state , cell_number 271-6744x4507\", \"271-6744x4507\", home_phone 563-0260x454\", \"318-052-6573\", last_name , zip_code , first_name , email_address , owner_id , city , street  | dogs : name , gender , weight , dog_id , date_of_birth , owner_id , age , size_code , breed_code , date_arrived , date_adopted , date_departed , abandoned_yn  | professionals : last_name , professional_id , role_code , state , home_phone , email_address , zip_code , street , cell_number , city , first_name  | professionals_role_code : professional_id , role_code  | treatments : date_of_treatment , cost_of_treatment , treatment_type_code , treatment_id , dog_id , professional_id ",
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : state (\"Arkansas\", \"NorthDakota\", \"Pennsylvania\"), cell_number (\"1-626-264-7659x1697\", \"(783)271-6744x4507\", \"(783)271-6744x4507\"), home_phone (\"1-682-845-0116x63235\", \"(799)563-0260x454\", \"318-052-6573\"), last_name (\"Feil\", \"Rippin\", \"Stoltenberg\"), zip_code (\"93165\", \"86010\", \"22731\"), first_name (\"Johann\", \"Kade\", \"Cindy\"), email_address (\"edythe62@example.org\", \"angeline99@example.com\", \"edythe62@example.org\"), owner_id (6, 7, 8), city (\"Lake Jennyferfort\", \"South Daisyfurt\", \"Barrettburgh\"), street (\"15828 Spencer Extensions\", \"0647 Hintz Village Apt. 024\", \"692 Jaskolski Forges\") | dogs : name (\"George\", \"Houston\", \"Betty\"), gender (\"1\", \"0\"), weight (\"4.01\", \"2.18\", \"6.92\"), dog_id (1, 10, 2), date_of_birth (\"2018-03-17 04:05:12\", \"2013-02-20 14:50:56\", \"2012-07-11 17:15:10\"), owner_id (7, 2, 7), age (\"1\", \"2\", \"9\"), size_code (\"LGE\", \"MED\", \"SML\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-10-16 20:06:21\", \"2017-04-15 09:25:31\", \"2017-07-25 15:19:07\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-25 08:12:51\", \"2018-03-10 15:06:43\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-24 19:12:22\", \"2018-03-25 02:11:32\"), abandoned_yn (\"1\", \"0\") | professionals : last_name (\"Hyatt\", \"Walter\", \"Jacobs\"), professional_id (1, 5, 15), role_code (\"Employee\", \"Veterenarian\"), state (\"Utah\", \"NorthCarolina\", \"Utah\"), home_phone (\"1-609-566-2752x25197\", \"1-609-566-2752x25197\", \"320-508-6023\"), email_address (\"goyette.roosevelt@example.net\", \"deanna.schuster@example.com\", \"mekhi.little@example.org\"), zip_code (\"67980\", \"67980\", \"34041\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), cell_number (\"609-405-2990\", \"889-940-2676\", \"609-405-2990\"), city (\"Raynorfort\", \"McLaughlinfort\", \"North Adelberttown\"), first_name (\"Karley\", \"Winfield\", \"Winfield\") | professionals_role_code : professional_id (14, 5, 1), role_code (\"Employee\", \"Veterenarian\") | treatments : date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-04 20:33:43\", \"2018-03-11 04:23:15\"), cost_of_treatment (139, 656, 407), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (5, 15, 2), dog_id (4, 2, 2), professional_id (4, 8, 5)",
        "ambiguous_queries": [
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t2.role_code, t1.street, t1.city, t1.state from professionals as t1 join professionals_role_code as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
        ],
        "gold_ambiguity": {
            "match": "{\"role\": [{\"professionals\": [\"role_code\"]}, {\"professionals_role_code\": [\"role_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"role\" refers to the schema \"professionals_role_code\".\"role_code\"",
        "clear_ambiguity": "{\"role\": {\"professionals_role_code\": [\"role_code\"]}}",
        "gold_query": "select t2.role_code, t1.street, t1.city, t1.state from professionals as t1 join professionals_role_code as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
    },
    {
        "index": 583,
        "db_id": "world_1",
        "ambig_type": "join",
        "db_file": "join/world_1/world_1.sqlite",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "schema_without_content": "city : id , countrycode , district , population , name  | sqlite_sequence : name , seq  | country : capital , gnp , region , surfacearea , name , governmentform , population , code , gnpold , code2 , continent , headofstate , lifeexpectancy , localname , indepyear  | country_population : population , code  | countrylanguage : isofficial , countrycode , percentage , language ",
        "schema_with_content": "city : id (3640, 1754, 2408), countrycode (\"BOL\", \"MSR\", \"IDN\"), district (\"QuÃ©bec\", \"Inner Harbour\", \"Sulawesi Utara\"), population (1070000, 1095874, 101295), name (\"Vishakhapatnam\", \"Arequipa\", \"Kumi\") | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (3320, 2885, 1889), gnp (1043.0, 598862.0, 34100.0), region (\"Western Africa\", \"Western Europe\", \"Central America\"), surfacearea (1399.0, 464.0, 49.0), name (\"Christmas Island\", \"Belgium\", \"Maldives\"), governmentform (\"Special Administrative Region of China\", \"Dependent Territory of Norway\", \"Independent Church State\"), population (25000, 14786000, 37032000), code (\"TZA\", \"TCD\", \"BVT\"), gnpold (171028.0, 2527.0, 3384.0), code2 (\"AE\", \"LK\", \"UG\"), continent (\"Europe\", \"Africa\", \"Asia\"), headofstate (\"Carlo Azeglio Ciampi\", \"Carlos Roberto Flores FacussÃ©\", \"Omar Hassan Ahmad al-Bashir\"), lifeexpectancy (70.5, 76.2, 62.2), localname (\"MoÃ§ambique\", \"Niue\", \"As-Sahrawiya\"), indepyear (1971, 1962, 1960) | country_population : population (25000, 14786000, 37032000), code (\"NIC\", \"PLW\", \"CXR\") | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"MTQ\", \"CHL\", \"TJK\"), percentage (77.1, 72.1, 7.7), language (\"Irish\", \"Papiamento\", \"Comorian-French\")",
        "ambiguous_queries": [
            "select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select t1.name, t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = 'Asia' order by t1.surfacearea desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"country\": [\"population\"]}, {\"country_population\": [\"population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"population\": {\"country\": [\"population\"]}}",
        "gold_query": "select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1"
    },
    {
        "index": 584,
        "db_id": "poker_player",
        "ambig_type": "join",
        "db_file": "join/poker_player/poker_player.sqlite",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "schema_without_content": "poker_player : best_finish , people_id , final_table_made , money_rank , poker_player_id , earnings  | people : nationality , name , birth_date , people_id , height  | people_name : name , people_id ",
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), people_id (2, 6, 7), final_table_made (42.0, 21.0, 26.0), money_rank (58.0, 141.0, 166.0), poker_player_id (1, 4, 1), earnings (476090.0, 104871.0, 476090.0) | people : nationality (\"Russia\", \"Bulgaria\"), name (\"Maksim Botin\", \"Sergey Grankin\", \"Teodor Salparov\"), birth_date (\"February 8, 1981\", \"April 17, 1987\", \"August 8, 1986\"), people_id (4, 6, 7), height (196.0, 193.0, 194.0) | people_name : name (\"Maksim Botin\", \"Sergey Grankin\", \"Teodor Salparov\"), people_id (5, 4, 5)",
        "ambiguous_queries": [
            "select name, birth_date from people order by name asc",
            "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"people\": [\"name\"]}, {\"people_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"people_name\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"people_name\": [\"name\"]}}",
        "gold_query": "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc"
    },
    {
        "index": 585,
        "db_id": "singer",
        "ambig_type": "join",
        "db_file": "join/singer/singer.sqlite",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "schema_without_content": "singer : singer_id , birth_year , net_worth_millions , name , citizenship  | singer_citizenship : singer_id , citizenship  | song : sales , highest_position , title \", singer_id , song_id ",
        "schema_with_content": "singer : singer_id (1, 7, 2), birth_year (1944.0, 1962.0, 1949.0), net_worth_millions (17.4, 17.8, 28.8), name (\"Christy Walton\", \"Iris Fontbona\", \"Iris Fontbona\"), citizenship (\"France\", \"Chile\", \"Germany\") | singer_citizenship : singer_id (4, 1, 8), citizenship (\"France\", \"Chile\", \"Germany\") | song : sales (300000.0, 261000.0, 1094000.0), highest_position (1.0, 3.0), title (\"All This Time\", \"Cha Cha Slide\", \"F**k It (I Don't Want You Back)\"), singer_id (6, 4, 6), song_id (4, 4, 3)",
        "ambiguous_queries": [
            "select citizenship, max(net_worth_millions) from singer group by citizenship",
            "select t2.citizenship, max(t1.net_worth_millions) from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship"
        ],
        "gold_ambiguity": {
            "match": "{\"citizenship\": [{\"singer\": [\"citizenship\"]}, {\"singer_citizenship\": [\"citizenship\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"citizenship\" refers to the schema \"singer\".\"citizenship\"",
        "clear_ambiguity": "{\"citizenship\": {\"singer\": [\"citizenship\"]}}",
        "gold_query": "select citizenship, max(net_worth_millions) from singer group by citizenship"
    },
    {
        "index": 586,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "When is the first transcript released? List the date and details.",
        "schema_without_content": "addresses : state_province_county , line_1 , other_address_details , country , city , line_3 , line_2 , zip_postcode , address_id  | courses : other_details , course_description , course_id , course_name  | departments : department_id , other_details , department_name , department_description  | degree_programs : degree_summary_name , other_details , degree_summary_description , degree_program_id , department_id  | sections : course_id , section_id , section_description , other_details , section_name  | semesters : semester_description , semester_id , other_details , semester_name  | students : last_name , email_address , date_first_registered , first_name , current_address_id , date_left , cell_mobile_number 365-8405\", \"677.401.9382\", other_student_details , student_id , middle_name , permanent_address_id , ssn  | student_enrolment : other_details , semester_id , student_id , degree_program_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcripts_other_details : other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "schema_with_content": "addresses : state_province_county (\"WestVirginia\", \"Florida\", \"Kentucky\"), line_1 (\"2294 Grant Square Apt. 235\", \"9283 Schulist Falls Apt. 037\", \"7081 Eda Center\"), other_address_details (None), country (\"Burundi\", \"Croatia\", \"Kyrgyz Republic\"), city (\"North Omer\", \"Lake Laishafurt\", \"Rutherfordtown\"), line_3 (None), line_2 (\"Suite 383\", \"Suite 703\", \"Apt. 335\"), zip_postcode (\"669\", \"400\", \"669\"), address_id (1, 4, 3) | courses : other_details (None), course_description (\"l\", \"q\", \"q\"), course_id (14, 12, 11), course_name (\"en\", \"pl\", \"math\") | departments : department_id (14, 8, 12), other_details (None), department_name (\"law\", \"history\", \"linguistic\"), department_description (\"natus\", \"doloribus\", \"nihil\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_summary_description (\"voluptas\", \"aut\", \"earum\"), degree_program_id (1, 10, 7), department_id (11, 8, 4) | sections : course_id (1, 1, 1), section_id (4, 14, 11), section_description (\"ad\", \"ad\", \"non\"), other_details (None), section_name (\"p\", \"e\", \"j\") | semesters : semester_description (\"y\", \"x\", \"w\"), semester_id (13, 6, 13), other_details (None), semester_name (\"spring 2014\", \"spring 2018\", \"spring 2010\") | students : last_name (\"Mohr\", \"Gleichner\", \"Osinski\"), email_address (\"johns.unique@example.net\", \"beth42@example.org\", \"beth42@example.org\"), date_first_registered (\"1989-05-24 23:31:29\", \"1997-03-20 16:47:25\", \"1976-10-26 02:33:06\"), first_name (\"Deon\", \"Delaney\", \"Jarvis\"), current_address_id (15, 14, 12), date_left (\"2006-08-04 17:26:49\", \"1982-06-11 00:25:39\", \"2014-05-30 23:32:02\"), cell_mobile_number (\"07661787471\", \"(507)365-8405\", \"677.401.9382\"), other_student_details (\"omnis\", \"laborum\", \"assumenda\"), student_id (1, 6, 13), middle_name (\"Lorenz\", \"Alberta\", \"Anna\"), permanent_address_id (11, 11, 8), ssn (\"68095\", \"141072406\", \"34458427\") | student_enrolment : other_details (None), semester_id (13, 2, 2), student_id (14, 4, 5), degree_program_id (9, 9, 3), student_enrolment_id (4, 5, 7) | student_enrolment_courses : student_enrolment_id (2, 14, 4), course_id (8, 11, 2), student_course_id (96, 1, 70882679) | transcripts : other_details (None), transcript_date (\"2002-09-24 06:11:49\", \"1975-05-20 18:31:21\", \"1986-07-12 07:27:29\"), transcript_id (2, 15, 4) | transcripts_other_details : other_details (None), transcript_id (5, 11, 8) | transcript_contents : transcript_id (9, 12, 2), student_course_id (0, 96, 0)",
        "ambiguous_queries": [
            "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
            "select t1.transcript_date, t2.other_details from transcripts as t1 join transcripts_other_details as t2 on t1.transcript_id = t2.transcript_id order by t1.transcript_date asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"details\": [{\"transcripts\": [\"other_details\"]}, {\"transcripts_other_details\": [\"other_details\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"details\" refers to the schema \"transcripts_other_details\".\"other_details\"",
        "clear_ambiguity": "{\"details\": {\"transcripts_other_details\": [\"other_details\"]}}",
        "gold_query": "select t1.transcript_date, t2.other_details from transcripts as t1 join transcripts_other_details as t2 on t1.transcript_id = t2.transcript_id order by t1.transcript_date asc limit 1"
    },
    {
        "index": 587,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , version_number , template_id , date_effective_to , template_details , template_type_code  | templates_version_number : template_id , version_number  | documents : document_id , document_description , document_name , other_details , template_id  | paragraphs : document_id , paragraph_text , other_details , paragraph_id ",
        "schema_with_content": "ref_template_types : template_type_code (\"CV\", \"PP\", \"BK\"), template_type_description (\"Paper\", \"CV\", \"Advertisement\") | templates : date_effective_from (\"1984-08-07 13:36:26\", \"1996-02-04 11:27:24\", \"1983-07-16 21:16:16\"), version_number (0, 6, 9), template_id (4, 0, 14), date_effective_to (\"1976-10-28 10:08:50\", \"1989-11-24 19:06:06\", \"1992-05-02 20:06:11\"), template_details (\"\"), template_type_code (\"CV\", \"BK\", \"CV\") | templates_version_number : template_id (11, 25, 20), version_number (0, 6, 9) | documents : document_id (76, 1, 385906526), document_description (\"u\", \"n\", \"k\"), document_name (\"How to write a CV\", \"Learning French\", \"How to read a book\"), other_details (None), template_id (4, 1, 21) | paragraphs : document_id (16514113, 16514113, 3), paragraph_text (\"Fiji\", \"Japan\", \"Ireland\"), other_details (None), paragraph_id (243399026, 280120913, 3708)",
        "ambiguous_queries": [
            "select template_id, version_number, template_type_code from templates",
            "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
        ],
        "gold_ambiguity": {
            "match": "{\"version number\": [{\"templates\": [\"version_number\"]}, {\"templates_version_number\": [\"version_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"version number\" refers to the schema \"templates_version_number\".\"version_number\"",
        "clear_ambiguity": "{\"version number\": {\"templates_version_number\": [\"version_number\"]}}",
        "gold_query": "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
    },
    {
        "index": 588,
        "db_id": "tvshow",
        "ambig_type": "join",
        "db_file": "join/tvshow/tvshow.sqlite",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "schema_without_content": "tv_channel : id , pixel_aspect_ratio_par , content , country , pay_per_view_ppv , language , hight_definition_tv , package_option \", series_name  | tv_channel_series_name : series_name , id  | tv_series : air_date , id , channel , weekly_rank , viewers_m , share , rating , episode , 18_49_rating_share  | cartoon : title , written_by , id , production_code , channel , original_air_date , directed_by ",
        "schema_with_content": "tv_channel : id (\"714\", \"715\", \"704\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia + Sky HD\", \"Option\", \"no ( FTV )\"), series_name (\"Rock TV\", \"MTV Music\", \"Hip Hop TV\") | tv_channel_series_name : series_name (\"Rock TV\", \"MTV Music\", \"Hip Hop TV\"), id (\"707\", \"713\", \"728\") | tv_series : air_date (\"October 15, 2007\", \"October 22, 2007\", \"December 10, 2007\"), id (9.0, 7.0, 2.0), channel (\"707\", \"700\", \"719\"), weekly_rank (65.0, 70.0, 65.0), viewers_m (\"6.06\", \"6.05\", \"8.23\"), share (5.0, 6.0, 5.0), rating (\"3.8\", \"3.7\", \"3.5\"), episode (\"Emily\", \"Home By Another Way\", \"A Love of a Lifetime\"), 18_49_rating_share (\"2.7/7\", \"2.2/6\", \"2.4/6\") | cartoon : title (\"Deep Cover for Batman!\", \"Terror on Dinosaur Island!\", \"Dawn of the Dead Man!\"), written_by (\"Michael Jelenic\", \"Todd Casey\", \"Steven Melching\"), id (12.0, 5.0, 9.0), production_code (101.0, 105.0, 101.0), channel (\"704\", \"706\", \"700\"), original_air_date (\"January16,2009\", \"February27,2009\", \"January2,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "ambiguous_queries": [
            "select package_option, series_name from tv_channel where hight_definition_tv = 'yes'",
            "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'"
        ],
        "gold_ambiguity": {
            "match": "{\"name of the series\": [{\"tv_channel\": [\"series_name\"]}, {\"tv_channel_series_name\": [\"series_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name of the series\" refers to the schema \"tv_channel_series_name\".\"series_name\"",
        "clear_ambiguity": "{\"name of the series\": {\"tv_channel_series_name\": [\"series_name\"]}}",
        "gold_query": "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'"
    },
    {
        "index": 589,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "schema_without_content": "stadium : stadium_id , location , average , name , highest , lowest , capacity  | stadium_location : stadium_id , location  | singer : name , song_name , country , song_release_year , age , singer_id , is_male  | concert : stadium_id , theme , year , concert_id , concert_name  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : stadium_id (3, 2, 5), location (\"Queen's Park\", \"Stirling Albion\", \"Alloa Athletic\"), average (864, 864, 2106), name (\"Recreation Park\", \"Forthbank Stadium\", \"Somerset Park\"), highest (1980, 1057, 4812), lowest (404, 533, 404), capacity (2000, 2000, 3808) | stadium_location : stadium_id (2, 10, 10), location (\"Queen's Park\", \"Stirling Albion\", \"Alloa Athletic\") | singer : name (\"Tribal King\", \"Rose White\", \"Tribal King\"), song_name (\"Sun\", \"You\", \"Hey Oh\"), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2008\", \"2013\", \"2008\"), age (52, 41, 32), singer_id (3, 5, 4), is_male (\"F\", \"T\") | concert : stadium_id (\"7\", \"7\", \"1\"), theme (\"Wide Awake\", \"Happy Tonight\", \"Happy Tonight\"), year (\"2014\", \"2015\"), concert_id (2, 3, 6), concert_name (\"Home Visits\", \"Super bootcamp\", \"Super bootcamp\") | singer_in_concert : concert_id (1, 6, 4), singer_id (\"4\", \"5\", \"6\")",
        "ambiguous_queries": [
            "select location, name from stadium where capacity between 5000 and 10000",
            "select t2.location, t1.name from stadium as t1 join stadium_location as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"stadium\": [\"location\"]}, {\"stadium_location\": [\"location\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"stadium_location\".\"location\"",
        "clear_ambiguity": "{\"locations\": {\"stadium_location\": [\"location\"]}}",
        "gold_query": "select t2.location, t1.name from stadium as t1 join stadium_location as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
    },
    {
        "index": 590,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , template_details , date_effective_from , template_type_code , version_number , date_effective_to  | documents : template_id , document_id , other_details , document_name , document_description  | documents_document_name : document_id , document_name  | paragraphs : other_details , paragraph_text , document_id , paragraph_id ",
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"CV\", \"Book\"), template_type_code (\"CV\", \"PP\", \"PPT\") | templates : template_id (20, 23, 19), template_details (\"\"), date_effective_from (\"1999-06-21 11:10:30\", \"1986-11-14 12:20:18\", \"2005-11-12 07:09:48\"), template_type_code (\"CV\", \"BK\", \"CV\"), version_number (9, 3, 7), date_effective_to (\"1994-12-07 13:26:23\", \"1976-10-28 10:08:50\", \"1975-07-16 04:52:10\") | documents : template_id (4, 8, 6), document_id (801801, 1, 33930), other_details (None), document_name (\"Palm reading\", \"How to read a book\", \"Introduction of OS\"), document_description (\"r\", \"h\", \"n\") | documents_document_name : document_id (2394, 801801, 651512), document_name (\"Palm reading\", \"How to read a book\", \"Introduction of OS\") | paragraphs : other_details (None), paragraph_text (\"Somalia\", \"Somalia\", \"Senegal\"), document_id (2394, 3540024, 33930), paragraph_id (608931827, 608931827, 510442723)",
        "ambiguous_queries": [
            "select document_name, template_id from documents where document_description like '%w%'",
            "select t2.document_name, t1.template_id from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id where t1.document_description like '%w%'"
        ],
        "gold_ambiguity": {
            "match": "{\"document name\": [{\"documents\": [\"document_name\"]}, {\"documents_document_name\": [\"document_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"document name\" refers to the schema \"documents\".\"document_name\"",
        "clear_ambiguity": "{\"document name\": {\"documents\": [\"document_name\"]}}",
        "gold_query": "select document_name, template_id from documents where document_description like '%w%'"
    },
    {
        "index": 591,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "join",
        "db_file": "join/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_details , date_effective_to , date_effective_from , template_id , template_type_code , version_number  | templates_template_type_code : template_id , template_type_code  | documents : document_description , other_details , document_id , document_name , template_id  | paragraphs : document_id , paragraph_id , paragraph_text , other_details ",
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"PPT\", \"BK\"), template_type_description (\"CV\", \"Book\", \"Paper\") | templates : template_details (\"\"), date_effective_to (\"1976-10-28 10:08:50\", \"2015-09-06 01:08:44\", \"2001-04-18 09:29:52\"), date_effective_from (\"2003-06-05 04:03:45\", \"2008-08-01 13:57:26\", \"1986-12-09 14:51:36\"), template_id (6, 21, 25), template_type_code (\"AD\", \"AD\", \"AD\"), version_number (9, 8, 0) | templates_template_type_code : template_id (14, 15, 16), template_type_code (\"AD\", \"AD\", \"AD\") | documents : document_description (\"w\", \"f\", \"z\"), other_details (None), document_id (1, 33930, 33930), document_name (\"How to read a book\", \"Do not panic\", \"Do not panic\"), template_id (20, 1, 8) | paragraphs : document_id (33930, 33930, 50123), paragraph_id (1104059, 280120913, 65), paragraph_text (\"Korea\", \"Fiji\", \"Somalia\"), other_details (None)",
        "ambiguous_queries": [
            "select version_number, template_type_code from templates where version_number > 5",
            "select t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5"
        ],
        "gold_ambiguity": {
            "match": "{\"template type code\": [{\"templates\": [\"template_type_code\"]}, {\"templates_template_type_code\": [\"template_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template type code\" refers to the schema \"templates\".\"template_type_code\"",
        "clear_ambiguity": "{\"template type code\": {\"templates\": [\"template_type_code\"]}}",
        "gold_query": "select version_number, template_type_code from templates where version_number > 5"
    },
    {
        "index": 592,
        "db_id": "singer",
        "ambig_type": "join",
        "db_file": "join/singer/singer.sqlite",
        "question": "What are the birth years and citizenships of the singers?",
        "schema_without_content": "singer : net_worth_millions , birth_year , name , citizenship , singer_id  | singer_citizenship : singer_id , citizenship  | song : highest_position , title , song_id , sales , singer_id ",
        "schema_with_content": "singer : net_worth_millions (28.8, 17.0, 14.3), birth_year (1949.0, 1953.0, 1940.0), name (\"Alice Walton\", \"Alice Walton\", \"Liliane Bettencourt\"), citizenship (\"France\", \"Australia\", \"United States\"), singer_id (6, 7, 4) | singer_citizenship : singer_id (6, 2, 6), citizenship (\"France\", \"Australia\", \"United States\") | song : highest_position (1.0, 3.0), title (\"Call on Me\", \"All This Time\", \"Mysterious Girl\"), song_id (6, 5, 7), sales (261000.0, 335000.0, 300000.0), singer_id (1, 6, 1)",
        "ambiguous_queries": [
            "select birth_year, citizenship from singer",
            "select t1.birth_year, t2.citizenship from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id"
        ],
        "gold_ambiguity": {
            "match": "{\"citizenships\": [{\"singer\": [\"citizenship\"]}, {\"singer_citizenship\": [\"citizenship\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"citizenships\" refers to the schema \"singer_citizenship\".\"citizenship\"",
        "clear_ambiguity": "{\"citizenships\": {\"singer_citizenship\": [\"citizenship\"]}}",
        "gold_query": "select t1.birth_year, t2.citizenship from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id"
    },
    {
        "index": 593,
        "db_id": "pets_1",
        "ambig_type": "join",
        "db_file": "join/pets_1/pets_1.sqlite",
        "question": "List the maximum weight and type for each type of pet.",
        "schema_without_content": "student : stuid , city_code , age , advisor , fname , sex , lname , major  | has_pet : petid , stuid  | pets : pet_age , pettype , petid , weight  | pets_pettype : petid , pettype ",
        "schema_with_content": "student : stuid (1026, 1001, 1002), city_code (\"PHL\", \"BAL\", \"PIT\"), age (21, 19, 26), advisor (7712, 8741, 8772), fname (\"Paul\", \"Stacy\", \"Andy\"), sex (\"F\", \"M\"), lname (\"Schmidt\", \"Simms\", \"Pang\"), major (50, 50, 550) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")",
        "ambiguous_queries": [
            "select max(weight), pettype from pets group by pettype",
            "select max(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
        ],
        "gold_ambiguity": {
            "match": "{\"type\": [{\"pets\": [\"pettype\"]}, {\"pets_pettype\": [\"pettype\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type\" refers to the schema \"pets_pettype\".\"pettype\"",
        "clear_ambiguity": "{\"type\": {\"pets_pettype\": [\"pettype\"]}}",
        "gold_query": "select max(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "index": 594,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "What are the first names and birth dates of players from the USA?",
        "schema_without_content": "players : birth_date , player_id , hand , first_name , last_name , country_code  | players_birth_date : birth_date , player_id  | matches : loser_age , winner_rank , winner_ioc , loser_hand , loser_entry , loser_ioc , best_of , surface , score \", \"6-2 6-2\", \"7-6 6-1\", loser_name , winner_name , tourney_date , loser_id , draw_size , loser_ht , year , loser_rank , minutes , winner_rank_points , winner_hand , winner_seed , loser_seed , winner_id , tourney_name , winner_ht , tourney_id , tourney_level , winner_entry , loser_rank_points , winner_age , match_num , round  | rankings : ranking_points , ranking , player_id , tours , ranking_date ",
        "schema_with_content": "players : birth_date (19970920, 19590120, 20000811), player_id (219728, 217995, 215585), hand (\"U\", \"U\", \"\"), first_name (\"Barbare\", \"Anouschka\", \"Yoshimi\"), last_name (\"Hendry\", \"Sprinckmoller\", \"Madenoglou\"), country_code (\"ZIM\", \"RSA\", \"MEX\") | players_birth_date : birth_date (19970920, 19590120, 20000811), player_id (213545, 201299, 211676) | matches : loser_age (31.1348391513, 27.310061601599998, 28.517453798800002), winner_rank (58, 42, 53), winner_ioc (\"ROU\", \"USA\", \"NED\"), loser_hand (\"R\", \"L\"), loser_entry (\"\"), loser_ioc (\"AUS\", \"CHN\", \"TPE\"), best_of (3), surface (\"Hard\", \"Clay\", \"Grass\"), score (\"3-6 6-2 7-6(6)\", \"6-2 6-2\", \"7-6(6) 6-1\"), loser_name (\"Lesia Tsurenko\", \"Kirsten Flipkens\", \"Kirsten Flipkens\"), winner_name (\"Sloane Stephens\", \"Madison Keys\", \"Misaki Doi\"), tourney_date (20170807, 20160523, 20160307), loser_id (201397, 201495, 201585), draw_size (32, 64, 32), loser_ht (180, 165, 169), year (2013, 2016, 2017), loser_rank (66, 27, 23), minutes (89, 87, 152), winner_rank_points (2525, 3185, 1695), winner_hand (\"R\", \"L\"), winner_seed (9, 7, 8), loser_seed (15, 11, 2), winner_id (201311, 201458, 201535), tourney_name (\"Budapest\", \"'S-Hertogenbosch\", \"Wimbledon\"), winner_ht (162, 174, 179), tourney_id (\"2016-1049\", \"2017-1079\", \"2016-1064\"), tourney_level (\"I\", \"G\", \"G\"), winner_entry (\"\"), loser_rank_points (1550, 1665, 1015), winner_age (26.4804928131, 23.8877481177, 28.5557837098), match_num (292, 202, 220), round (\"R32\", \"R16\", \"BR\") | rankings : ranking_points (5475, 445, 2040), ranking (930, 282, 1433), player_id (206305, 210192, 214587), tours (23, 2, 36), ranking_date (19940718, 19950508, 19991101)",
        "ambiguous_queries": [
            "select first_name, birth_date from players where country_code = 'USA'",
            "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{\"birth date\": [{\"players\": [\"birth_date\"]}, {\"players_birth_date\": [\"birth_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth date\" refers to the schema \"players\".\"birth_date\"",
        "clear_ambiguity": "{\"birth date\": {\"players\": [\"birth_date\"]}}",
        "gold_query": "select first_name, birth_date from players where country_code = 'USA'"
    },
    {
        "index": 595,
        "db_id": "dog_kennels",
        "ambig_type": "join",
        "db_file": "join/dog_kennels/dog_kennels.sqlite",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : state , zip_code , city , first_name , email_address , last_name , owner_id , home_phone 034-1670\", \"318-052-6573\", street , cell_number 768-5439x484\", \"+004323592985\", \"121.381.3316x6535\" | dogs : owner_id , age , name , date_arrived , date_departed , abandoned_yn , weight , date_adopted , gender , breed_code , dog_id , date_of_birth , size_code  | professionals : street , professional_id , last_name , zip_code , role_code , state , cell_number 908-7311x065\", \"011.193.9081x3186\", home_phone 0259033559\", \"+431132733868\", \"312.216.3352\", email_address , city , first_name  | professionals_state : professional_id , state  | treatments : treatment_id , date_of_treatment , treatment_type_code , dog_id , cost_of_treatment , professional_id ",
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : state (\"Arkansas\", \"Florida\", \"Washington\"), zip_code (\"78297\", \"92406\", \"93165\"), city (\"East Hillardberg\", \"Lake Tia\", \"Lake Tia\"), first_name (\"Kade\", \"Nora\", \"Cindy\"), email_address (\"pearlie18@example.com\", \"edythe62@example.org\", \"marks.gail@example.org\"), last_name (\"Nicolas\", \"Ondricka\", \"Stoltenberg\"), owner_id (12, 3, 12), home_phone (\"1-682-845-0116x63235\", \"(544)034-1670\", \"318-052-6573\"), street (\"60352 Kayleigh Crossing Suite 700\", \"2417 Keara Stravenue Apt. 146\", \"68118 Daniel Row\"), cell_number (\"(722)768-5439x484\", \"+00(2)4323592985\", \"121.381.3316x6535\") | dogs : owner_id (11, 12, 3), age (\"9\", \"3\", \"4\"), name (\"Evangeline\", \"Merritt\", \"George\"), date_arrived (\"2017-06-25 10:14:05\", \"2017-10-25 00:55:34\", \"2018-01-17 11:44:16\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 13:07:04\", \"2018-03-24 19:36:59\"), abandoned_yn (\"1\", \"0\"), weight (\"5.16\", \"4.01\", \"6.92\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-23 16:02:04\", \"2018-03-25 08:12:51\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (3, 1, 9), date_of_birth (\"2012-07-11 17:15:10\", \"2017-09-19 05:39:09\", \"2008-05-19 15:54:49\"), size_code (\"LGE\", \"MED\", \"SML\") | professionals : street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), professional_id (14, 6, 1), last_name (\"Kshlerin\", \"Jacobs\", \"Walter\"), zip_code (\"98844\", \"02281\", \"02281\"), role_code (\"Employee\", \"Veterenarian\"), state (\"Alabama\", \"Hawaii\", \"Alabama\"), cell_number (\"1-181-670-9466\", \"(369)908-7311x065\", \"011.193.9081x3186\"), home_phone (\"+02(1)0259033559\", \"+43(5)1132733868\", \"312.216.3352\"), email_address (\"jeichmann@example.com\", \"lucile.shanahan@example.org\", \"jacynthe.mclaughlin@example.net\"), city (\"Borisside\", \"McLaughlinfort\", \"West Heidi\"), first_name (\"Brady\", \"Sigurd\", \"Monte\") | professionals_state : professional_id (8, 8, 6), state (\"Alabama\", \"Hawaii\", \"Alabama\") | treatments : treatment_id (3, 15, 15), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-16 10:27:36\", \"2018-03-04 20:33:43\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (10, 4, 12), cost_of_treatment (428, 514, 668), professional_id (5, 5, 10)",
        "ambiguous_queries": [
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t1.role_code, t1.street, t1.city, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
        ],
        "gold_ambiguity": {
            "match": "{\"state\": [{\"professionals\": [\"state\"]}, {\"professionals_state\": [\"state\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"state\" refers to the schema \"professionals\".\"state\"",
        "clear_ambiguity": "{\"state\": {\"professionals\": [\"state\"]}}",
        "gold_query": "select role_code, street, city, state from professionals where city like '%West%'"
    },
    {
        "index": 596,
        "db_id": "concert_singer",
        "ambig_type": "join",
        "db_file": "join/concert_singer/concert_singer.sqlite",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "schema_without_content": "stadium : capacity , lowest , location , name , highest , stadium_id , average  | stadium_capacity : capacity , stadium_id  | singer : country , is_male , age , song_release_year , name , singer_id , song_name  | concert : concert_id , stadium_id , concert_name , theme , year  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "stadium : capacity (2000, 4000, 3808), lowest (1057, 1057, 411), location (\"Brechin City\", \"East Fife\", \"East Fife\"), name (\"Recreation Park\", \"Hampden Park\", \"Forthbank Stadium\"), highest (837, 1763, 1763), stadium_id (10, 5, 6), average (864, 552, 615) | stadium_capacity : capacity (2000, 4000, 3808), stadium_id (1, 3, 7) | singer : country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), age (25, 41, 52), song_release_year (\"2008\", \"2013\", \"2013\"), name (\"Rose White\", \"Tribal King\", \"Rose White\"), singer_id (5, 2, 6), song_name (\"You\", \"Sun\", \"Dangerous\") | concert : concert_id (5, 5, 6), stadium_id (\"10\", \"2\", \"7\"), concert_name (\"Week 1\", \"Auditions\", \"Week 2\"), theme (\"Free choice 2\", \"Free choice 2\", \"Party All Night\"), year (\"2014\", \"2015\") | singer_in_concert : concert_id (2, 3, 6), singer_id (\"3\", \"4\", \"4\")",
        "ambiguous_queries": [
            "select name, capacity from stadium order by average desc limit 1",
            "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"capacity\": [{\"stadium\": [\"capacity\"]}, {\"stadium_capacity\": [\"capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"capacity\" refers to the schema \"stadium\".\"capacity\"",
        "clear_ambiguity": "{\"capacity\": {\"stadium\": [\"capacity\"]}}",
        "gold_query": "select name, capacity from stadium order by average desc limit 1"
    },
    {
        "index": 597,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "join",
        "db_file": "join/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "What are the names and descriptions of all the sections?",
        "schema_without_content": "addresses : other_address_details , line_2 , country , city , zip_postcode , line_1 , state_province_county , address_id , line_3  | courses : course_name , course_id , course_description , other_details  | departments : department_description , department_id , other_details , department_name  | degree_programs : department_id , degree_summary_description , degree_summary_name , other_details , degree_program_id  | sections : section_id , section_name , section_description , course_id , other_details  | sections_section_description : section_description , section_id  | semesters : semester_id , semester_name , other_details , semester_description  | students : email_address , date_left , current_address_id , first_name , permanent_address_id , ssn , cell_mobile_number 153-1469x1733\", \"03174364122\", \"889-8954x524\", date_first_registered , other_student_details , middle_name , last_name , student_id  | student_enrolment : semester_id , other_details , student_id , degree_program_id , student_enrolment_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "schema_with_content": "addresses : other_address_details (None), line_2 (\"Suite 383\", \"Suite 703\", \"Suite 703\"), country (\"Cook Islands\", \"Cook Islands\", \"Cook Islands\"), city (\"Goodwinhaven\", \"North Omer\", \"Herzoghaven\"), zip_postcode (\"400\", \"895\", \"590\"), line_1 (\"492 Wilkinson Route\", \"858 Peggie Bypass Suite 212\", \"2294 Grant Square Apt. 235\"), state_province_county (\"NorthCarolina\", \"Delaware\", \"Idaho\"), address_id (14, 3, 8), line_3 (None) | courses : course_name (\"os\", \"fr\", \"oop\"), course_id (13, 1, 3), course_description (\"d\", \"b\", \"l\"), other_details (None) | departments : department_description (\"nisi\", \"dolorem\", \"aliquam\"), department_id (8, 4, 6), other_details (None), department_name (\"biology\", \"art\", \"history\") | degree_programs : department_id (4, 3, 11), degree_summary_description (\"cumque\", \"cumque\", \"esse\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_program_id (2, 9, 6) | sections : section_id (5, 1, 6), section_name (\"b\", \"g\", \"c\"), section_description (\"voluptatem\", \"voluptas\", \"quis\"), course_id (1, 9, 7), other_details (None) | sections_section_description : section_description (\"voluptatem\", \"voluptas\", \"quis\"), section_id (9, 1, 15) | semesters : semester_id (10, 3, 15), semester_name (\"summer 2010\", \"spring 2015\", \"spring 2016\"), other_details (None), semester_description (\"o\", \"l\", \"o\") | students : email_address (\"mya88@example.org\", \"skassulke@example.net\", \"jillian26@example.net\"), date_left (\"2004-12-08 05:29:11\", \"2007-11-28 12:50:21\", \"1997-11-16 08:54:33\"), current_address_id (12, 7, 12), first_name (\"Milton\", \"Stanford\", \"Reva\"), permanent_address_id (8, 9, 3), ssn (\"141072406\", \"494\", \"34458427\"), cell_mobile_number (\"(982)153-1469x1733\", \"03174364122\", \"(096)889-8954x524\"), date_first_registered (\"2007-08-29 23:25:41\", \"1982-02-14 08:46:35\", \"2014-03-28 05:48:23\"), other_student_details (\"laborum\", \"atque\", \"laborum\"), middle_name (\"Cleve\", \"Judd\", \"Aaliyah\"), last_name (\"Carroll\", \"Mohr\", \"Osinski\"), student_id (10, 12, 1) | student_enrolment : semester_id (5, 9, 9), other_details (None), student_id (14, 5, 14), degree_program_id (8, 8, 5), student_enrolment_id (8, 2, 3) | student_enrolment_courses : course_id (6, 12, 11), student_enrolment_id (9, 2, 9), student_course_id (83814225, 45105806, 0) | transcripts : transcript_date (\"1985-08-21 09:32:39\", \"1975-10-28 15:16:51\", \"1975-05-06 12:04:47\"), other_details (None), transcript_id (1, 6, 10) | transcript_contents : student_course_id (0, 45105806, 76), transcript_id (13, 11, 5)",
        "ambiguous_queries": [
            "select section_name, section_description from sections",
            "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id"
        ],
        "gold_ambiguity": {
            "match": "{\"descriptions\": [{\"sections\": [\"section_description\"]}, {\"sections_section_description\": [\"section_description\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"descriptions\" refers to the schema \"sections_section_description\".\"section_description\"",
        "clear_ambiguity": "{\"descriptions\": {\"sections_section_description\": [\"section_description\"]}}",
        "gold_query": "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id"
    },
    {
        "index": 598,
        "db_id": "wta_1",
        "ambig_type": "join",
        "db_file": "join/wta_1/wta_1.sqlite",
        "question": "Find the first name and country code of the oldest player.",
        "schema_without_content": "players : hand , birth_date , player_id , country_code , first_name , last_name  | players_first_name : player_id , first_name  | matches : round , loser_seed , loser_ioc , loser_hand , loser_name , loser_rank , draw_size , winner_seed , loser_rank_points , match_num , winner_age , winner_hand , winner_ht , year , tourney_level , score \", winner_rank , tourney_name , loser_age , loser_id , winner_ioc , loser_ht , winner_id , minutes , tourney_date , best_of , winner_entry , winner_name , tourney_id , winner_rank_points , surface , loser_entry  | rankings : ranking_points , ranking_date , ranking , tours , player_id ",
        "schema_with_content": "players : hand (\"U\", \"R\", \"L\"), birth_date (19770406, 19811030, 19870813), player_id (218617, 219864, 206209), country_code (\"TTO\", \"SAM\", \"MRN\"), first_name (\"Ariane\", \"Stephanie Mariel\", \"Anushka\"), last_name (\"Veraverbeke\", \"Sinha\", \"Tibuleac\") | players_first_name : player_id (213899, 211492, 211208), first_name (\"Ariane\", \"Stephanie Mariel\", \"Anushka\") | matches : round (\"BR\", \"BR\", \"R32\"), loser_seed (9, 16, 16), loser_ioc (\"BEL\", \"ESP\", \"ESP\"), loser_hand (\"R\", \"L\"), loser_name (\"Venus Williams\", \"Sloane Stephens\", \"Shuai Peng\"), loser_rank (14, 1, 7), draw_size (128, 8, 32), winner_seed (28, 6, 10), loser_rank_points (2975, 3325, 2416), match_num (218, 296, 211), winner_age (28.0355920602, 37.196440794000004, 24.4407939767), winner_hand (\"R\", \"L\"), winner_ht (177, 170, 179), year (2013, 2016, 2017), tourney_level (\"W\", \"I\", \"W\"), score (\"3-6 6-3 6-4\", \"6-1 3-0 RET\", \"6-3 7-6(4)\"), winner_rank (13, 6, 13), tourney_name (\"Doha\", \"Acapulco\", \"Auckland\"), loser_age (26.340862423, 31.249828884299998, 30.9404517454), loser_id (201427, 201693, 201621), winner_ioc (\"NED\", \"NED\", \"DEN\"), loser_ht (161, 182, 170), winner_id (201596, 202429, 200033), minutes (113, 51, 98), tourney_date (20160725, 20170508, 20160321), best_of (3), winner_entry (\"\"), winner_name (\"Barbora Zahlavova Strycova\", \"Lucie Safarova\", \"Kristina Mladenovic\"), tourney_id (\"2016-1051\", \"2017-M020\", \"2017-580\"), winner_rank_points (3855, 2081, 1377), surface (\"Hard\", \"Clay\", \"Grass\"), loser_entry (\"\") | rankings : ranking_points (3241, 2465, 3251), ranking_date (20161114, 20100719, 20060724), ranking (1005, 240, 1324), tours (7, 34, 18), player_id (211524, 213928, 205824)",
        "ambiguous_queries": [
            "select first_name, country_code from players order by birth_date limit 1",
            "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"players\": [\"first_name\"]}, {\"players_first_name\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"players_first_name\".\"first_name\"",
        "clear_ambiguity": "{\"first name\": {\"players_first_name\": [\"first_name\"]}}",
        "gold_query": "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
    },
    {
        "index": 599,
        "db_id": "network_1",
        "ambig_type": "join",
        "db_file": "join/network_1/network_1.sqlite",
        "question": "What are the names and grades for each high schooler?",
        "schema_without_content": "highschooler : name , id , grade  | highschooler_name : id , name  | friend : friend_id , student_id  | likes : student_id , liked_id ",
        "schema_with_content": "highschooler : name (\"Haley\", \"Andrew\", \"Haley\"), id (1641, 1510, 1911), grade (11, 11, 11) | highschooler_name : id (1468, 1025, 1661), name (\"Haley\", \"Andrew\", \"Haley\") | friend : friend_id (1934, 1709, 1101), student_id (1468, 1934, 1689) | likes : student_id (1501, 1782, 1025), liked_id (1468, 1468, 1468)",
        "ambiguous_queries": [
            "select name, grade from highschooler",
            "select t2.name, t1.grade from highschooler as t1 join highschooler_name as t2 on t1.id = t2.id"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"highschooler\": [\"name\"]}, {\"highschooler_name\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"highschooler\".\"name\"",
        "clear_ambiguity": "{\"names\": {\"highschooler\": [\"name\"]}}",
        "gold_query": "select name, grade from highschooler"
    },
    {
        "index": 600,
        "db_id": "baseball_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/baseball_1/baseball_1.sqlite",
        "question": "Find the average height of the players who belong to the college called 'Yale University'.",
        "schema_without_content": "fielding_outfield : year , player_id , glf , gcf , grf , stint  | postseason : ties , team_id_loser , league_id_loser , league_id_winner , losses , wins , team_id_winner , year , round  | manager_half : year , l , g , w , team_id , player_id , half , rank , inseason , league_id  | batting_postseason : ibb , sb , sf , player_id , triple , h , team_id , r , year , rbi , hbp , g_idp , league_id , bb , double , hr , cs , round , so , sh , ab , g  | batting : ibb , h , team_id , hr , league_id , year , g_idp , sb , bb , r , player_id , so , g , triple , cs , double , sf , hbp , stint , ab , rbi , sh  | player_award : league_id , player_id , tie , notes , year , award_id  | home_game : attendance , span_first , games , openings , span_last , team_id , league_id , park_id , year  | team_franchise : active , na_assoc , franchise_id , franchise_name  | fielding_postseason : gs , league_id , inn_outs , player_id , team_id , tp , pb , g , a , year , po , pos , e , round , cs , dp , sb  | team : sho , team_id_br , soa , team_id_retro , e , wc_win , dp , attendance , r , park , ipouts , so , name , h , ra , lg_win , ab , div_id , era , hra , team_id , l , bb , g , sb , league_id , bpf , ha , bba , team_id_lahman45 , ghome , rank , franchise_id , hbp , er , double , hr , cg , ppf , sf , ws_win , year , triple , div_win , cs , w , sv , fp  | manager : team_id , league_id , player_id , year , plyr_mgr , inseason , l , rank , w , g  | player : weight , death_year , death_country , birth_country , player_id , name_first , bats , death_city , birth_day , death_month , name_given , debut , retro_id , final_game , birth_month , birth_state , height , birth_city , death_day , birth_year , death_state , bbref_id , name_last , throws  | pitching : team_id , league_id , r , sh , gf , wp , so , h , era , g_idp , cg , bfp , stint , year , ibb , sf , sho , hr , sv , bb , w , bk , gs , player_id , l , er , g , ipouts , baopp , hbp  | team_half : team_id , rank , div_id , year , half , g , div_win , w , league_id , l  | player_award_vote : player_id , award_id , year , league_id , points_max , votes_first , points_won  | fielding : wp , stint , a , g , team_id , po , sb , league_id , dp , e , cs , gs , year , pb , pos , player_id , inn_outs , zr  | hall_of_fame : yearid , inducted , needed_note , category , ballots , votedby , votes , player_id , needed  | salary : salary , league_id , team_id , player_id , year  | all_star : player_id , game_id , gp , team_id , year , game_num , starting_pos , league_id  | college : country , city , college_id , name_full , state  | pitching_postseason : round , wp , gf , sv , w , gs , bfp , baopp , r , sho , bk , sf , sh , l , cg , era , player_id , bb , er , ibb , hr , league_id , year , g , hbp , so , ipouts , team_id , h , g_idp  | park : park_name , country , state , park_alias , city , park_id  | manager_award_vote : points_won , votes_first , player_id , year , award_id , league_id , points_max  | manager_award : award_id , year , tie , notes , player_id , league_id  | player_player_college_college_height : name_full , sum_height , min_height , max_height , avg_height  | player_college : player_id , college_id , year  | appearances : g_c , g_defense , team_id , g_1b , g_pr , g_cf , g_ss , player_id , g_ph , g_rf , year , gs , g_dh , g_batting , g_lf , g_of , g_2b , g_all , league_id , g_p , g_3b ",
        "schema_with_content": "fielding_outfield : year (1884, 1939, 1897), player_id (\"childpe01\", \"thornwa01\", \"portehe01\"), glf (136, 28, 85), gcf (116, 93, 105), grf (146, 28, 100), stint (2, 3, 3) | postseason : ties (0, 1), team_id_loser (\"ATL\", \"LAA\", \"SEA\"), league_id_loser (\"AA\", \"NL\", \"AL\"), league_id_winner (\"NL\", \"AA\", \"AL\"), losses (5, 0, 1), wins (3, 5, 5), team_id_winner (\"NY1\", \"PHI\", \"PHI\"), year (1990, 1890, 1962), round (\"ALWC\", \"ALWC\", \"AEDIV\") | manager_half : year (1892, 1981), l (28, 10, 46), g (25, 48, 54), w (1, 44, 38), team_id (\"NYN\", \"NY1\", \"DET\"), player_id (\"willsma01\", \"coxbo01\", \"wrighha01\"), half (1, 2), rank (4, 3, 10), inseason (3, 1, 2), league_id (\"NL\", \"AL\") | batting_postseason : ibb (2, 1, 6), sb (15, 0, 7), sf (2, 2, 2), player_id (\"walkela01\", \"clippty01\", \"knowlda01\"), triple (1, 2, 3), h (3, 4, 14), team_id (\"HOU\", \"COL\", \"MIN\"), r (6, 5, 3), year (1977, 1890, 1939), rbi (8, 6, 8), hbp (3, 0, 1), g_idp (\"\", 5, 5), league_id (\"AA\", \"NL\", \"AL\"), bb (12, 6, 13), double (1, 3, 5), hr (2, 2, 2), cs (\"\", 0, 1), round (\"ALDS1\", \"AEDIV\", \"ALWC\"), so (5, 6, 2), sh (4, 4, \"\"), ab (0, 23, 17), g (9, 8, 2) | batting : ibb (9, 29, 2), h (12, 218, 57), team_id (\"NH1\", \"TL1\", \"NYA\"), hr (48, 51, \"\"), league_id (\"\", \"PL\", \"AL\"), year (1951, 1931, 1910), g_idp (14, 20, 6), sb (82, 86, 21), bb (132, 177, 103), r (107, 25, 55), player_id (\"gumbeha01\", \"rubelal01\", \"busbypa01\"), so (102, 179, 124), g (142, 71, 14), triple (12, 8, 20), cs (19, 13, 30), double (18, 32, 29), sf (18, 5, 7), hbp (3, 12, 32), stint (1, 2, 4), ab (588, 500, 164), rbi (134, \"\", 133), sh (26, 41, 17) | player_award : league_id (\"AA\", \"NL\", \"AA\"), player_id (\"hatchbi01\", \"thomair01\", \"wagneho01\"), tie (\"\", \"Y\"), notes (\"RHP\", \"CF\", \"P4\"), year (1905, 1969, 1923), award_id (\"ALCS MVP\", \"Rolaids Relief Man Award\", \"TSN All-Star\") | home_game : attendance (1117226, 1250410, 2526031), span_first (\"1905-04-15\", \"1873-04-14\", \"1955-04-12\"), games (2, 68, 71), openings (42, 54, 27), span_last (\"1886-09-19\", \"2005-09-25\", \"1994-08-10\"), team_id (\"BL4\", \"WS9\", \"BLU\"), league_id (\"\", \"PL\", \"UA\"), park_id (\"HOU03\", \"SEA02\", \"STL04\"), year (2009, 1983, 1983) | team_franchise : active (\"N\", \"Y\", \"\"), na_assoc (\"SBS\", \"NYU\", \"ATH\"), franchise_id (\"CIN\", \"SLI\", \"PWS\"), franchise_name (\"St. Louis Terriers\", \"Baltimore Canaries\", \"Troy Haymakers\") | fielding_postseason : gs (6, 4, \"\"), league_id (\"AL\", \"NL\"), inn_outs (114, 192, 69), player_id (\"mccorfr01\", \"hollial01\", \"fioreto01\"), team_id (\"NYN\", \"TBA\", \"SLA\"), tp (0, 1), pb (0, 2, 2), g (6, 4, 3), a (12, 12, 3), year (1958, 1916, 1998), po (68, 81, 27), pos (\"3B\", \"CF\", \"SS\"), e (5, 2, 2), round (\"AEDIV\", \"NLDS2\", \"NWDIV\"), cs (0, 3, \"\"), dp (3, 0, 1), sb (13, 16, \"\") | team : sho (9, 24, 5), team_id_br (\"WIL\", \"CHC\", \"TOL\"), soa (733, 845, 947), team_id_retro (\"BOS\", \"SL1\", \"SLA\"), e (353, 440, 228), wc_win (\"\", \"N\", \"Y\"), dp (165, 172, 71), attendance (1483547, 2907933, 1611459), r (901, 604, 955), park (\"Connie Mack Stadium\", \"League Park II\", \"Congress Street Grounds\"), ipouts (4405, 3528, 4399), so (504, 923, 1128), name (\"Brooklyn Grooms\", \"Houston Colt .45's\", \"New York Giants\"), h (1715, 1437, 1665), ra (711, 533, 423), lg_win (\"N\", \"Y\", \"\"), ab (5274, 5604, 5025), div_id (\"W\", \"W\", \"\"), era (4.86, 3.48, 2.59), hra (213, 6, 26), team_id (\"KCF\", \"MIN\", \"PH2\"), l (60, 105, 57), bb (116, 157, 107), g (52, 159, 107), sb (118, 581, 196), league_id (\"FL\", \"PL\", \"PL\"), bpf (113, 90, 116), ha (1418, 1257, 757), bba (412, 575, 486), team_id_lahman45 (\"BFN\", \"TEX\", \"PT1\"), ghome (69, 52, 51), rank (12, 7, 9), franchise_id (\"TRO\", \"MIN\", \"CLE\"), hbp (44, 45, 76), er (153, 655, 633), double (333, 108, 156), hr (8, 168, 201), cg (35, 124, 53), ppf (121, 113, 108), sf (57, 47, 51), ws_win (\"\", \"N\", \"Y\"), year (1980, 1915, 1991), triple (78, 30, 64), div_win (\"\", \"Y\", \"N\"), cs (79, 157, 152), w (44, 71, 47), sv (58, 11, 39), fp (0.977, 0.8, 0.79) | manager : team_id (\"BOS\", \"CLP\", \"TRN\"), league_id (\"NL\", \"PL\", \"AL\"), player_id (\"lillibo01\", \"mackea01\", \"brenlbo01\"), year (1978, 2013, 1913), plyr_mgr (\"Y\", \"N\"), inseason (7, 1, 8), l (108, 86, 8), rank (\"\", 9, \"\"), w (108, 47, 60), g (104, 51, 38) | player : weight (222, 179, 320), death_year (1994, 1930, 1875), death_country (\"North Korea\", \"France\", \"CAN\"), birth_country (\"Germany\", \"USA\", \"Nicaragua\"), player_id (\"conrobi01\", \"mathebo01\", \"pickch01\"), name_first (\"Elvin\", \"Ravelo\", \"Charlie\"), bats (\"\", \"B\", \"L\"), death_city (\"Lawrenceville\", \"Monterey\", \"Olympia\"), birth_day (4, 15, 25), death_month (1, 1, 9), name_given (\"Thomas Andrew\", \"Melquisedec\", \"Sylvester Adam\"), debut (\"1904-09-10\", \"1902-08-19\", \"1914-08-30\"), retro_id (\"may-c101\", \"tysot102\", \"corcm102\"), final_game (\"1951-09-13\", \"1923-04-29\", \"1903-04-30\"), birth_month (7, 11, 10), birth_state (\"Miranda\", \"VA\", \"MA\"), height (76, 73, 79), birth_city (\"West New Brighton\", \"Shawnee\", \"Blue Island\"), death_day (3, 26, 1), birth_year (1960, 1951, 1894), death_state (\"AZ\", \"PA\", \"BC\"), bbref_id (\"ostrojo01\", \"cuetobe01\", \"moharjo01\"), name_last (\"Sawyer\", \"Robison\", \"Hook\"), throws (\"R\", \"L\", \"\") | pitching : team_id (\"BL4\", \"CH1\", \"WS8\"), league_id (\"AL\", \"AA\", \"\"), r (80, 306, 261), sh (8, 15, 2), gf (36, 20, 83), wp (63, 5, 22), so (41, 188, 187), h (153, 129, 136), era (17.25, 12.05, 3), g_idp (30, 4, 23), cg (24, 15, 66), bfp (1174, 392, 659), stint (4, 1, 1), year (1982, 1886, 1998), ibb (1, 1, 8), sf (11, \"\", 13), sho (3, 1, 2), hr (14, 18, 39), sv (26, 38, 30), bb (206, 3, 61), w (3, 1, 15), bk (5, 0, 12), gs (46, 64, 10), player_id (\"willite01\", \"mccatst01\", \"mahafar01\"), l (9, 1, 30), er (149, 8, 153), g (24, 32, 75), ipouts (1422, 597, 609), baopp (0.304, 0.248, 0.46399999999999997), hbp (32, 25, 9) | team_half : team_id (\"PIT\", \"OAK\", \"MIN\"), rank (1, 3, 2), div_id (\"W\", \"E\"), year (1981), half (1, 2), g (56, 50, 50), div_win (\"N\"), w (16, 24, 35), league_id (\"NL\", \"AL\"), l (24, 24, 30) | player_award_vote : player_id (\"wellsve01\", \"herrto01\", \"hallme01\"), award_id (\"Cy Young\", \"MVP\", \"Rookie of the Year\"), year (1914, 1934, 1943), league_id (\"ML\", \"AL\", \"NL\"), points_max (120, 392, 336), votes_first (23.5, 31, 17), points_won (369, 42, 422) | fielding : wp (45, 28, 69), stint (4, 1, 1), a (472, 406, 357), g (58, 63, 18), team_id (\"SPU\", \"BR1\", \"NY1\"), po (1154, 241, 722), sb (50, 47, 93), league_id (\"FL\", \"UA\", \"AL\"), dp (44, 59, 98), e (34, 73, 40), cs (15, 11, 53), gs (60, 152, 6), year (1915, 1907, 1964), pb (48, 23, 57), pos (\"3B\", \"C\", \"LF\"), player_id (\"colemjo02\", \"fitzgma01\", \"brownno01\"), inn_outs (2941, 1524, 286), zr (15, 2, 5) | hall_of_fame : yearid (2011, 1985, 1942), inducted (\"Y\", \"N\"), needed_note (\"\", \"Top 20\", \"1st\"), category (\"Pioneer/Executive\", \"Player\", \"Pioneer/Executive\"), ballots (269, 247, 153), votedby (\"Final Ballot\", \"Special Election\", \"Run Off\"), votes (114, 174, 125), player_id (\"ferrewe01\", \"perryga01\", \"seleaa01\"), needed (436, 151, 405) | salary : salary (7111111, 383600, 567667), league_id (\"NL\", \"AL\"), team_id (\"LAN\", \"FLO\", \"CAL\"), player_id (\"hugheke01\", \"ruckeda01\", \"danieka01\"), year (2015, 1985, 1993) | all_star : player_id (\"bonilbo01\", \"raineti01\", \"ramiral03\"), game_id (\"ALS196207100\", \"NLS198807120\", \"ALS196207100\"), gp (1, 0, \"\"), team_id (\"SFN\", \"TEX\", \"PHI\"), year (1944, 1950, 1994), game_num (0, 2, 1), starting_pos (0, 4, 6), league_id (\"AL\", \"NL\") | college : country (\"USA\"), city (\"Santa Clara\", \"Wilburton\", \"Chico\"), college_id (\"utchat\", \"pennst\", \"txweath\"), name_full (\"University of Tennessee at Chattanooga\", \"Indiana University of Pennsylvania\", \"College of DuPage\"), state (\"NM\", \"PA\", \"OH\") | pitching_postseason : round (\"NLCS\", \"AEDIV\", \"NWDIV\"), wp (3, 1, 4), gf (4, 4, 2), sv (1, 1, 4), w (2, 0, 3), gs (6, 3, 5), bfp (23, 36, 101), baopp (\"0.355\", \"0.12\", \"0.16\"), r (27, 18, 15), sho (0, 3, 1), bk (\"\", 0, 1), sf (3, 3, 4), sh (2, 6, 3), l (3, 3, 1), cg (2, 0, 2), era (4.97, 8.22, 2.33), player_id (\"suppaje01\", \"durbich01\", \"cookde01\"), bb (11, 7, 15), er (25, 26, 4), ibb (0, 4, 3), hr (2, 2, 3), league_id (\"AA\", \"NL\", \"AL\"), year (1892, 1989, 1979), g (4, 3, 8), hbp (\"\", 0, 0), so (5, 21, 31), ipouts (32, 50, 17), team_id (\"ML4\", \"FLO\", \"CIN\"), h (22, 14, 1), g_idp (4, 5, 0) | park : park_name (\"Colt Stadium\", \"Sportsman's Park III\", \"Bennett Park\"), country (\"AU\", \"CA\", \"JP\"), state (\"QC\", \"DC\", \"Tokyo\"), park_alias (\"Olympic Stadium\", \"Union Base-ball Grounds\", \"Ridgewood Park II\"), city (\"Phoenix\", \"Miami\", \"Keokuk\"), park_id (\"LOU03\", \"WNY01\", \"JER01\") | manager_award_vote : points_won (1, 10, 45), votes_first (24, 30, 2), player_id (\"zimmedo01\", \"wathajo01\", \"washiro01\"), year (1988, 1988, 2010), award_id (\"Mgr of the year\", \"Mgr of the Year\"), league_id (\"AL\", \"NL\"), points_max (150, 140, 160) | manager_award : award_id (\"BBWAA Manager of the year\", \"TSN Manager of the Year\"), year (1969, 2007, 1994), tie (\"\", \"Y\"), notes (\"\"), player_id (\"torrejo01\", \"molitpa01\", \"rodgebu01\"), league_id (\"AL\", \"NL\", \"ML\") | player_player_college_college_height : name_full (\"Brigham Young University\", \"University of New Orleans\", \"Lehigh University\"), sum_height (81, 76, 70), min_height (72, 78, 68), max_height (\"\", 79, 71), avg_height (71, 80, 80) | player_college : player_id (\"maysc01\", \"furmajj01\", \"lucasga01\"), college_id (\"lakeforest\", \"baylor\", \"cafooth\"), year (1898, 1979, 1980) | appearances : g_c (42, 60, 76), g_defense (94, 52, 91), team_id (\"WS9\", \"MIN\", \"ML1\"), g_1b (76, 13, 19), g_pr (2, 6, 92), g_cf (145, 94, 46), g_ss (162, 148, 127), player_id (\"warneho01\", \"reganbi01\", \"wolstab01\"), g_ph (79, 3, 4), g_rf (46, 40, 150), year (1988, 1889, 2002), gs (84, 161, 20), g_dh (74, 101, 97), g_batting (138, 4, 42), g_lf (144, 99, 151), g_of (118, 66, 57), g_2b (13, 1, 24), g_all (25, 79, 113), league_id (\"NL\", \"AL\", \"AA\"), g_p (71, 35, 70), g_3b (5, 82, 125)",
        "ambiguous_queries": [
            "select avg(t1.height) from player as t1 join player_college as t2 on t1.player_id = t2.player_id join college as t3 on t3.college_id = t2.college_id where t3.name_full = 'Yale University'",
            "select avg_height from player_player_college_college_height where name_full = 'Yale University'"
        ],
        "gold_ambiguity": {
            "match": "{\"average height\": [{\"player\": [\"height\"]}, {\"player_player_college_college_height\": [\"avg_height\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average height\" refers to the schema \"player\".\"height\"",
        "clear_ambiguity": "{\"average height\": {\"player\": [\"height\"]}}",
        "gold_query": "select avg(t1.height) from player as t1 join player_college as t2 on t1.player_id = t2.player_id join college as t3 on t3.college_id = t2.college_id where t3.name_full = 'Yale University'"
    },
    {
        "index": 601,
        "db_id": "network_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/network_2/network_2.sqlite",
        "question": "What is minimum age for different job title?",
        "schema_without_content": "person_age : job , sum_age , avg_age , max_age , min_age  | person : age , name , city , job , gender  | personfriend : year , friend , name ",
        "schema_with_content": "person_age : job (\"student\", \"engineer\", \"doctor\"), sum_age (26, 26, 35), avg_age (26, 45, 45), max_age (25, 26, 26), min_age (25, 26, 25) | person : age (25, 45, 25), name (\"Zach\", \"Alice\", \"Bob\"), city (\"salt lake city\", \"salt lake city\", \"new york city\"), job (\"student\", \"engineer\", \"doctor\"), gender (\"female\", \"male\") | personfriend : year (6, 12, 10), friend (\"Bob\", \"Dan\", \"Bob\"), name (\"Alice\", \"Zach\", \"Bob\")",
        "ambiguous_queries": [
            "select min(age), job from person group by job",
            "select min_age, job from person_age"
        ],
        "gold_ambiguity": {
            "match": "{\"job\": [{\"person\": [\"job\"]}, {\"person_age\": [\"job\"]}], \"minimum age\": [{\"person\": [\"age\"]}, {\"person_age\": [\"min_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"job\" refers to the schema \"person_age\".\"job\", \"minimum age\" refers to the schema \"person_age\".\"min_age\"",
        "clear_ambiguity": "{\"job\": {\"person_age\": [\"job\"]}, \"minimum age\": {\"person_age\": [\"min_age\"]}}",
        "gold_query": "select min_age, job from person_age"
    },
    {
        "index": 602,
        "db_id": "world_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/world_1/world_1.sqlite",
        "question": "What is the total population and maximum GNP in Asia?",
        "schema_without_content": "city : id , district , population , countrycode , name  | country : surfacearea , code , indepyear , code2 , region , headofstate , capital , continent , gnpold , name , localname , population , lifeexpectancy , gnp , governmentform  | country_population_gnp : sum_gnp , min_gnp , sum_population , min_population , avg_population , max_gnp , avg_gnp , max_population  | sqlite_sequence : name , seq  | countrylanguage : countrycode , language , isofficial , percentage ",
        "schema_with_content": "city : id (2337, 3346, 2722), district (\"Krim\", \"Montevideo\", \"Yaracuy\"), population (118858, 103653, 193174), countrycode (\"MYS\", \"BHR\", \"SVK\"), name (\"Taman\", \"Tokyo\", \"Terrassa\") | country : surfacearea (199.0, 4000.0, 17364.0), code (\"BEL\", \"ARE\", \"DMA\"), indepyear (1830, 1350, 1984), code2 (\"MP\", \"LB\", \"BS\"), region (\"Southern Africa\", \"Micronesia/Caribbean\", \"Micronesia/Caribbean\"), headofstate (\"Johannes Paavali II\", \"Abdelaziz Bouteflika\", \"Idriss DÃ©by\"), capital (3261, 584, 933), continent (\"Africa\", \"Africa\", \"Oceania\"), gnpold (243.0, 1081.0, 360478.0), name (\"Bangladesh\", \"Sweden\", \"Kyrgyzstan\"), localname (\"Ecuador\", \"TÃ¼rkmenostan\", \"Tâai-wan\"), population (79832000, 11000, 94000), lifeexpectancy (40.4, 79.0, 68.4), gnp (14194.0, 553233.0, 37966.0), governmentform (\"Autonomous Area\", \"Islamic Republic\", \"Monarchy\") | country_population_gnp : sum_gnp (141.0, 1813.0, 1161755.0), min_gnp (1292.0, 86503.0, 11705.0), sum_population (62565000, 10097000, 14786000), min_population (4629000, 68000, 1277558000), avg_population (2500, 23930000, 861000), max_gnp (8005.0, 109.0, 180375.0), avg_gnp (15706.0, 3787042.0, 2328.0), max_population (3869000, 2153000, 5171300) | sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : countrycode (\"UMI\", \"BMU\", \"LSO\"), language (\"Mon-khmer\", \"Songhai-zerma\", \"Philippene Languages\"), isofficial (\"T\", \"F\"), percentage (29.3, 23.4, 5.3)",
        "ambiguous_queries": [
            "select sum(population), max(gnp) from country where continent = 'Asia'",
            "select sum_population, max_gnp from country_population_gnp where continent = 'Asia'"
        ],
        "gold_ambiguity": {
            "match": "{\"Asia\": [{\"country\": [\"continent\"]}, {\"country_population_gnp\": [\"continent\"]}], \"maximum GNP\": [{\"country\": [\"gnp\"]}, {\"country_population_gnp\": [\"max_gnp\"]}], \"total population\": [{\"country\": [\"population\"]}, {\"country_population_gnp\": [\"sum_population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Asia\" refers to the schema \"country\".\"continent\", \"maximum GNP\" refers to the schema \"country\".\"gnp\", \"total population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"Asia\": {\"country\": [\"continent\"]}, \"maximum GNP\": {\"country\": [\"gnp\"]}, \"total population\": {\"country\": [\"population\"]}}",
        "gold_query": "select sum(population), max(gnp) from country where continent = 'Asia'"
    },
    {
        "index": 603,
        "db_id": "apartment_rentals",
        "ambig_type": "aggregate",
        "db_file": "aggregate/apartment_rentals/apartment_rentals.sqlite",
        "question": "What is the average number of bedrooms of all apartments?",
        "schema_without_content": "guests : guest_id , date_of_birth , guest_first_name , gender_code , guest_last_name  | apartments : apt_id , room_count , bathroom_count , apt_type_code , apt_number , bedroom_count , building_id  | apartment_bookings : booking_end_date , booking_start_date , guest_id , apt_booking_id , apt_id , booking_status_code  | apartment_buildings : building_short_name , building_description , building_id , building_address , building_phone 411-6406\", \"1-724-982-9507x640\", \"1-724-982-9507x640\", building_full_name , building_manager  | view_unit_status : status_date , apt_id , available_yn , apt_booking_id  | apartment_facilities : facility_code , apt_id  | apartments_bedroom_count : min_bedroom_count , max_bedroom_count , avg_bedroom_count , sum_bedroom_count ",
        "schema_with_content": "guests : guest_id (10, 8, 13), date_of_birth (\"1995-11-04 07:09:57\", \"2015-02-03 23:34:13\", \"2013-02-22 11:26:22\"), guest_first_name (\"Josefina\", \"Keon\", \"Louvenia\"), gender_code (\"Male\", \"Unknown\", \"Female\"), guest_last_name (\"Hoeger\", \"Bode\", \"Treutel\") | apartments : apt_id (5, 5, 12), room_count (\"9\", \"5\", \"7\"), bathroom_count (1, 2, 3), apt_type_code (\"Flat\", \"Studio\", \"Duplex\"), apt_number (\"Apt. 794\", \"Suite 645\", \"Apt. 585\"), bedroom_count (6, 6, 6), building_id (624, 744, 153) | apartment_bookings : booking_end_date (\"2017-11-13 13:59:45\", \"2018-02-25 15:15:37\", \"2017-10-07 11:38:48\"), booking_start_date (\"2016-06-07 05:05:18\", \"2016-04-01 06:28:08\", \"2017-03-13 16:20:14\"), guest_id (2, 14, 13), apt_booking_id (526, 577, 258), apt_id (6, 10, 7), booking_status_code (\"Provisional\", \"Confirmed\") | apartment_buildings : building_short_name (\"Silver Towers\", \"Avalon Park\", \"Peter Cooper Village\"), building_description (\"Studio\", \"Flat\", \"Duplex\"), building_id (133, 968, 744), building_address (\"6827 Kessler Parkway Suite 908\nAhmedberg, WI 48788\", \"6827 Kessler Parkway Suite 908\nAhmedberg, WI 48788\", \"101 Queenie Mountains Suite 619\nNew Korbinmouth, KS 88726-1376\"), building_phone (\"(145)411-6406\", \"1-724-982-9507x640\", \"1-724-982-9507x640\"), building_full_name (\"Biltmore Plaza\", \"Windsor Court\", \"VIA 57 WEST\"), building_manager (\"Holly\", \"Darlene\", \"Juvenal\") | view_unit_status : status_date (\"2003-08-02 08:36:36\", \"1990-11-04 17:57:50\", \"1976-12-18 04:03:51\"), apt_id (14, 9, 15), available_yn (1, 0), apt_booking_id (575, 889, 807) | apartment_facilities : facility_code (\"Boardband\", \"Boardband\", \"Cable TV\"), apt_id (5, 9, 6) | apartments_bedroom_count : min_bedroom_count (6, 5, 6), max_bedroom_count (4, 6, 4), avg_bedroom_count (5, 4, 4), sum_bedroom_count (5, 3, 5)",
        "ambiguous_queries": [
            "select avg(bedroom_count) from apartments",
            "select avg_bedroom_count from apartments_bedroom_count"
        ],
        "gold_ambiguity": {
            "match": "{\"average number\": [{\"apartments\": [\"bedroom_count\"]}, {\"apartments_bedroom_count\": [\"avg_bedroom_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number\" refers to the schema \"apartments\".\"bedroom_count\"",
        "clear_ambiguity": "{\"average number\": {\"apartments\": [\"bedroom_count\"]}}",
        "gold_query": "select avg(bedroom_count) from apartments"
    },
    {
        "index": 604,
        "db_id": "gas_company",
        "ambig_type": "aggregate",
        "db_file": "aggregate/gas_company/gas_company.sqlite",
        "question": "What is the minimum, maximum, and average market value for every company?",
        "schema_without_content": "station_company : station_id , company_id , rank_of_the_year  | company : assets_billion , main_industry , rank , company_id , headquarters , market_value , sales_billion , company , profits_billion  | company_market_value : sum_market_value , max_market_value , min_market_value , avg_market_value  | gas_station : location , open_year , representative_name , vice_manager_name , station_id , manager_name ",
        "schema_with_content": "station_company : station_id (11, 6, 6), company_id (3, 10, 1), rank_of_the_year (9, 4, 13) | company : assets_billion (319.4, 1313.9, 340.5), main_industry (\"Oil and gas\", \"Conglomerate\", \"Banking\"), rank (3, 10, 5), company_id (6, 8, 3), headquarters (\"USA\", \"USA\", \"USA\"), market_value (180.0, 180.0, 202.2), sales_billion (102.0, 375.5, 147.3), company (\"BP\", \"HSBC\", \"General Electric\"), profits_billion (16.2, 15.9, 25.1) | company_market_value : sum_market_value (202.2, 227.6, 227.6), max_market_value (147.4, 180.0, 213.7), min_market_value (237.4, 147.4, 178.7), avg_market_value (213.7, 227.6, 164.3) | gas_station : location (\"Herne St\", \"Newport Rd\", \"Reading\"), open_year (2003, 2000, 2004), representative_name (\"Ray Hughes\", \"Clive Burr\", \"Ray Hughes\"), vice_manager_name (\"James Colin \", \"Steve Parsons\", \"JameMarloe\"), station_id (1, 2, 2), manager_name (\"Simon Cope Derek Marloe\", \"Tom Whit\", \"BrianWingrave\")",
        "ambiguous_queries": [
            "select min(market_value), max(market_value), avg(market_value) from company",
            "select min_market_value, max_market_value, avg_market_value from company_market_value"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"company\": [\"market_value\"]}, {\"company_market_value\": [\"avg_market_value\"]}], \"maximum\": [{\"company\": [\"market_value\"]}, {\"company_market_value\": [\"max_market_value\"]}], \"minimum\": [{\"company\": [\"market_value\"]}, {\"company_market_value\": [\"min_market_value\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"company\".\"market_value\", \"maximum\" refers to the schema \"company\".\"market_value\", \"minimum\" refers to the schema \"company\".\"market_value\"",
        "clear_ambiguity": "{\"average\": {\"company\": [\"market_value\"]}, \"maximum\": {\"company\": [\"market_value\"]}, \"minimum\": {\"company\": [\"market_value\"]}}",
        "gold_query": "select min(market_value), max(market_value), avg(market_value) from company"
    },
    {
        "index": 605,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?",
        "schema_without_content": "song : country , releasedate , song_name , f_id , genre_is , artist_name , languages , rating , resolution  | files : duration , f_id , artist_name , file_size , formats  | artist : country , preferred_genre , gender , artist_name  | files_song_duration : resolution , min_duration , max_duration , sum_duration , avg_duration , formats  | genre : rating , most_popular_in , g_name ",
        "schema_with_content": "song : country (\"UK\", \"UK\", \"Bangladesh\"), releasedate (\"7-APR-2001\", \"17-MAR-2002\", \"24-JAN-2007\"), song_name (\"Shukno patar nupur pae\", \"My love\", \"Just beat it\"), f_id (4, 6, 1), genre_is (\"nazrul\", \"folk\", \"pop\"), artist_name (\"Shrikanta\", \"Enrique\", \"Shrikanta\"), languages (\"bangla\", \"english\"), rating (8, 7, 10), resolution (512, 512, 720) | files : duration (\"5:23\", \"4:30\", \"4:12\"), f_id (5, 2, 6), artist_name (\"Enrique\", \"Enrique\", \"Topu\"), file_size (\"4.58 MB\", \"3.69 MB\", \"4.10 MB\"), formats (\"mp4\", \"mp3\") | artist : country (\"Bangladesh\", \"USA\", \"Bangladesh\"), preferred_genre (\"modern\", \"nazrul\", \"nazrul\"), gender (\"Male\", \"Female\"), artist_name (\"Shrikanta\", \"Topu\", \"Topu\") | files_song_duration : resolution (320, 320, 512), min_duration (\"4:30\", \"2:56\", \"5:23\"), max_duration (\"3:45\", \"4:30\", \"3:45\"), sum_duration (\"2:56\", \"4:30\", \"3:45\"), avg_duration (\"4:12\", \"5:23\", \"3:45\"), formats (\"mp4\", \"mp3\") | genre : rating (\"8\", \"7\", \"9\"), most_popular_in (\"Bangladesh\", \"Sylhet,Chittagong,Kustia\", \"America\"), g_name (\"nazrul\", \"blues\", \"modern\")",
        "ambiguous_queries": [
            "select avg(t1.duration) from files as t1 join song as t2 on t1.f_id = t2.f_id where t1.formats = 'mp3' and t2.resolution < 800",
            "select avg_duration from files_song_duration where formats = 'mp3' and resolution < 800"
        ],
        "gold_ambiguity": {
            "match": "{\"average song duration\": [{\"files\": [\"duration\"]}, {\"files_song_duration\": [\"avg_duration\"]}], \"format\": [{\"files\": [\"formats\"]}, {\"files_song_duration\": [\"formats\"]}], \"resolution\": [{\"files_song_duration\": [\"resolution\"]}, {\"song\": [\"resolution\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average song duration\" refers to the schema \"files\".\"duration\", \"format\" refers to the schema \"files\".\"formats\", \"resolution\" refers to the schema \"song\".\"resolution\"",
        "clear_ambiguity": "{\"average song duration\": {\"files\": [\"duration\"]}, \"format\": {\"files\": [\"formats\"]}, \"resolution\": {\"song\": [\"resolution\"]}}",
        "gold_query": "select avg(t1.duration) from files as t1 join song as t2 on t1.f_id = t2.f_id where t1.formats = 'mp3' and t2.resolution < 800"
    },
    {
        "index": 606,
        "db_id": "sports_competition",
        "ambig_type": "aggregate",
        "db_file": "aggregate/sports_competition/sports_competition.sqlite",
        "question": "Show total points of all players.",
        "schema_without_content": "player : name , tries , points , club_id , position , goals , player_id , apps  | club_rank : bronze , total , club_id , rank , gold , silver  | club : region , club_id , name , start_year  | competition_result : club_id_1 , competition_id , score , club_id_2  | competition : year , competition_type , competition_id , country  | player_points : sum_points , max_points , min_points , avg_points ",
        "schema_with_content": "player : name (\"Tame Tupou\", \"Andy Lynch\", \"Dave Halley\"), tries (6.0, 3.0, 1.0), points (188.0, 24.0, 20.0), club_id (5, 5, 4), position (\"Second Row\", \"Scrum Half\", \"Second Row\"), goals (\"0/1\", \"0/1\", \"90/106\"), player_id (14, 8, 2), apps (26.0, 20.0, 14.0) | club_rank : bronze (6.0, 9.0, 0.0), total (21.0, 3.0, 31.0), club_id (5, 1, 3), rank (3.0, 6.0, 4.0), gold (7.0, 11.0, 7.0), silver (1.0, 2.0, 11.0) | club : region (\"England\", \"Brazil\", \"UK\"), club_id (5, 6, 2), name (\"BK Slide\", \"HSBIF\", \"HSBIF\"), start_year (\"2011\", \"2001\", \"2001\") | competition_result : club_id_1 (1, 3, 4), competition_id (10, 2, 10), score (\"25:2\", \"12:9\", \"10:11\"), club_id_2 (2, 4, 6) | competition : year (2006.0, 2007.0), competition_type (\"Friendly\", \"Tournament\"), competition_id (5, 6, 5), country (\"Australia\", \"Spain\", \"Slovenia\") | player_points : sum_points (36.0, 8.0, 4.0), max_points (188.0, 188.0, 188.0), min_points (8.0, 16.0, 12.0), avg_points (24.0, 188.0, 24.0)",
        "ambiguous_queries": [
            "select sum(points) from player",
            "select sum_points from player_points"
        ],
        "gold_ambiguity": {
            "match": "{\"total points\": [{\"player\": [\"points\"]}, {\"player_points\": [\"sum_points\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total points\" refers to the schema \"player\".\"points\"",
        "clear_ambiguity": "{\"total points\": {\"player\": [\"points\"]}}",
        "gold_query": "select sum(points) from player"
    },
    {
        "index": 607,
        "db_id": "small_bank_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/small_bank_1/small_bank_1.sqlite",
        "question": "Find the total balance across checking accounts.",
        "schema_without_content": "accounts : name , custid  | checking_balance : max_balance , sum_balance , avg_balance , min_balance  | checking : balance , custid  | savings : balance , custid ",
        "schema_with_content": "accounts : name (\"O'mahony\", \"Brown\", \"Granger\"), custid (2, 4, 2) | checking_balance : max_balance (7.0, 10000.0, 10000.0), sum_balance (77.0, 7.0, 7000.0), avg_balance (77.0, 3000.0, 7000.0), min_balance (7000.0, 7000.0, 7000.0) | checking : balance (2000.0, 77.0, 77.0), custid (1, 5, 2) | savings : balance (60.0, 999999999.0, 80000.0), custid (3, 6, 1)",
        "ambiguous_queries": [
            "select sum(balance) from checking",
            "select sum_balance from checking_balance"
        ],
        "gold_ambiguity": {
            "match": "{\"total balance\": [{\"checking\": [\"balance\"]}, {\"checking_balance\": [\"sum_balance\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total balance\" refers to the schema \"checking_balance\".\"sum_balance\"",
        "clear_ambiguity": "{\"total balance\": {\"checking_balance\": [\"sum_balance\"]}}",
        "gold_query": "select sum_balance from checking_balance"
    },
    {
        "index": 608,
        "db_id": "aircraft",
        "ambig_type": "aggregate",
        "db_file": "aggregate/aircraft/aircraft.sqlite",
        "question": "What is the average number of international passengers of all airports?",
        "schema_without_content": "match : country , round , fastest_qualifying , winning_aircraft , location , date , winning_pilot  | airport : international_passengers , airport_id , %_change_2007 , airport_name , domestic_passengers , transit_passengers , aircraft_movements , total_passengers , freight_metric_tonnes  | aircraft : description , total_disk_area \", \"5,655 ftÂ² \", \"4,900 ftÂ² \", aircraft_id , max_gross_weight \", \"50,000 lb \", \"50,000 lb \", max_disk_loading \", \"15 lb/ftÂ² \", \"2.6 lb/ftÂ² \", aircraft  | airport_aircraft : aircraft_id , id , airport_id  | airport_international_passengers : min_international_passengers , avg_international_passengers , sum_international_passengers , max_international_passengers  | pilot : age , name , pilot_id ",
        "schema_with_content": "match : country (\"United Arab Emirates\", \"United Arab Emirates\", \"Australia\"), round (1.0, 2.0, 2.0), fastest_qualifying (\"Nigel Lamb\", \"Cancelled\", \"Paul Bonhomme\"), winning_aircraft (\"2\", \"3\", \"2\"), location (\"Swan River , Perth\", \"Mina' Zayid , Abu Dhabi\", \"New York City\"), date (\"August 7â8\", \"May 8â9\", \"May 8â9\"), winning_pilot (\"2\", \"6\", \"4\") | airport : international_passengers (19996947.0, 8105162.0, 61344438.0), airport_id (3, 5, 8), %_change_2007 (\"0.5%\", \"5.7%\", \"2.9%\"), airport_name (\"London Stansted\", \"East Midlands\", \"Glasgow International\"), domestic_passengers (5562516.0, 746094.0, 1320678.0), transit_passengers (4395.0, 38458.0, 38458.0), aircraft_movements (117859.0, 193282.0, 117859.0), total_passengers (22360364.0, 22360364.0, 8178891.0), freight_metric_tonnes (141781.0, 1397054.0, 141781.0) | aircraft : description (\"Heavy-lift helicopter\", \"Heavy-lift helicopter\", \"Turboshaft utility helicopter\"), total_disk_area (\"8,495 ftÂ² (789 mÂ²)\", \"5,655 ftÂ² (526 mÂ²)\", \"4,900 ftÂ² (460 mÂ²)\"), aircraft_id (1, 1, 2), max_gross_weight (\"73,500 lb (33,300 kg)\", \"50,000 lb (22,680 kg)\", \"50,000 lb (22,680 kg)\"), max_disk_loading (\"2.6 lb/ftÂ² (14 kg/mÂ²)\", \"15 lb/ftÂ² (72 kg/mÂ²)\", \"2.6 lb/ftÂ² (14 kg/mÂ²)\"), aircraft (\"Robinson R-22\", \"Robinson R-22\", \"CH-47D Chinook\") | airport_aircraft : aircraft_id (5, 5, 5), id (3, 2, 1), airport_id (2, 9, 6) | airport_international_passengers : min_international_passengers (8853224.0, 3943139.0, 8853224.0), avg_international_passengers (3711140.0, 3711140.0, 61344438.0), sum_international_passengers (61344438.0, 8853224.0, 4870184.0), max_international_passengers (8105162.0, 3943139.0, 5057051.0) | pilot : age (23, 20, 20), name (\"Elisha Hickle V\", \"Mr. Cristian Halvorson II\", \"Della Lindgren\"), pilot_id (10, 9, 11)",
        "ambiguous_queries": [
            "select avg(international_passengers) from airport",
            "select avg_international_passengers from airport_international_passengers"
        ],
        "gold_ambiguity": {
            "match": "{\"average number\": [{\"airport\": [\"international_passengers\"]}, {\"airport_international_passengers\": [\"avg_international_passengers\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number\" refers to the schema \"airport_international_passengers\".\"avg_international_passengers\"",
        "clear_ambiguity": "{\"average number\": {\"airport_international_passengers\": [\"avg_international_passengers\"]}}",
        "gold_query": "select avg_international_passengers from airport_international_passengers"
    },
    {
        "index": 609,
        "db_id": "club_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/club_1/club_1.sqlite",
        "question": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "schema_without_content": "member_of_club : clubid , stuid , position  | student : stuid , city_code , advisor , sex , fname , lname , age , major  | club_member_of_club_student_age : sum_age , avg_age , min_age , clubname , max_age  | club : clubid , clubname , clublocation , clubdesc ",
        "schema_with_content": "member_of_club : clubid (1, 4, 2), stuid (1007, 1010, 1007), position (\"Vice-President\", \"President\", \"President\") | student : stuid (1032, 1020, 1016), city_code (\"BOS\", \"DAL\", \"HOU\"), advisor (8423, 7712, 8721), sex (\"F\", \"M\"), fname (\"Andy\", \"Lisa\", \"Tracy\"), lname (\"Schmidt\", \"Brown\", \"Apap\"), age (20, 16, 19), major (520, 600, 540) | club_member_of_club_student_age : sum_age (27, 26, 22), avg_age (20, 20, 16), min_age (22, 20, 26), clubname (\"Bootup Baltimore\", \"Bootup Baltimore\", \"Bootup Baltimore\"), max_age (20, 26, 27) | club : clubid (2, 2, 4), clubname (\"Hopkins Student Enterprises\", \"Bootup Baltimore\", \"Bootup Baltimore\"), clublocation (\"AKW\", \"HHH\"), clubdesc (\"Venture capital fund for student business.\", \"Venture capital fund for student business.\", \"Refurbish computers; teach kids and adults about computer basics.\")",
        "ambiguous_queries": [
            "select avg(t3.age) from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t1.clubname = 'Bootup Baltimore'",
            "select avg_age from club_member_of_club_student_age where clubname = 'Bootup Baltimore'"
        ],
        "gold_ambiguity": {
            "match": "{\"average age\": [{\"club_member_of_club_student_age\": [\"avg_age\"]}, {\"student\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average age\" refers to the schema \"club_member_of_club_student_age\".\"avg_age\"",
        "clear_ambiguity": "{\"average age\": {\"club_member_of_club_student_age\": [\"avg_age\"]}}",
        "gold_query": "select avg_age from club_member_of_club_student_age where clubname = 'Bootup Baltimore'"
    },
    {
        "index": 610,
        "db_id": "driving_school",
        "ambig_type": "aggregate",
        "db_file": "aggregate/driving_school/driving_school.sqlite",
        "question": "How long is the total lesson time took by the customer named Rylan Goodwin?",
        "schema_without_content": "lessons : staff_id , lesson_status_code , lesson_time , price , lesson_date , customer_id , vehicle_id , lesson_id  | vehicles : vehicle_details , vehicle_id  | lessons_customers_lesson_time : min_lesson_time , max_lesson_time , avg_lesson_time , sum_lesson_time , last_name , first_name  | customer_payments : customer_id , amount_payment , payment_method_code , datetime_payment  | customers : date_of_birth , date_became_customer , last_name , first_name , email_address , customer_id , phone_number 490-3108\", customer_address_id , customer_status_code , amount_outstanding , cell_mobile_phone_number 964-2426\", \"200.830.8723\", \"964-2426\" | staff : date_joined_staff , nickname , first_name , date_left_staff , date_of_birth , staff_id , middle_name , staff_address_id , last_name  | addresses : line_1_number_building , state_province_county , country , city , address_id , zip_postcode ",
        "schema_with_content": "lessons : staff_id (15, 15, 14), lesson_status_code (\"Cancelled\", \"Completed\"), lesson_time (\"9\", \"2\", \"2\"), price (492.0, 483.0, 446.0), lesson_date (\"2018-03-06 21:48:51\", \"2018-03-05 18:05:31\", \"2018-03-08 16:05:05\"), customer_id (8, 9, 5), vehicle_id (3, 2, 1), lesson_id (4, 5, 7) | vehicles : vehicle_details (\"Van\", \"Truck\", \"Car\"), vehicle_id (1, 2, 3) | lessons_customers_lesson_time : min_lesson_time (\"6\", \"3\", \"9\"), max_lesson_time (\"4\", \"2\", \"9\"), avg_lesson_time (\"4\", \"5\", \"6\"), sum_lesson_time (\"6\", \"4\", \"6\"), last_name (\"Leuschke\", \"Terry\", \"Terry\"), first_name (\"Genevieve\", \"Amya\", \"Genevieve\") | customer_payments : customer_id (2, 11, 7), amount_payment (4032.33, 3073.98, 5475.26), payment_method_code (\"Direct Debit\", \"Credit Card\"), datetime_payment (\"2018-03-12 08:41:47\", \"2018-02-03 15:04:36\", \"2018-02-24 10:07:05\") | customers : date_of_birth (\"1991-12-05 02:50:15\", \"1988-09-19 14:45:56\", \"1996-05-23 01:21:54\"), date_became_customer (\"2016-07-22 15:53:44\", \"2015-09-25 13:59:21\", \"2017-10-05 14:15:46\"), last_name (\"Spinka\", \"Schmeler\", \"Terry\"), first_name (\"Leif\", \"Clara\", \"Sigrid\"), email_address (\"mayert.judy@example.com\", \"ehowell@example.com\", \"wehner.harold@example.com\"), customer_id (7, 4, 11), phone_number (\"374-483-2758x85087\", \"1-673-962-8158x7646\", \"(662)490-3108\"), customer_address_id (13, 8, 13), customer_status_code (\"Bad Customer\", \"Good Customer\"), amount_outstanding (7256.0, 2099.0, 2099.0), cell_mobile_phone_number (\"(630)964-2426\", \"200.830.8723\", \"(630)964-2426\") | staff : date_joined_staff (\"2016-06-05 22:22:23\", \"2016-06-06 08:54:28\", \"2017-02-20 18:45:20\"), nickname (\"ledner.jamie\", \"thompson.constantin\", \"edwin.hudson\"), first_name (\"Eulalia\", \"Simeon\", \"Lincoln\"), date_left_staff (\"2018-03-14 07:14:37\", \"2018-03-04 17:13:53\", \"2018-03-05 18:30:12\"), date_of_birth (\"2003-01-16 06:29:11\", \"2003-01-16 06:29:11\", \"1998-04-27 12:55:05\"), staff_id (5, 2, 14), middle_name (\"Ulices\", \"Stephania\", \"Sherwood\"), staff_address_id (7, 1, 3), last_name (\"Mertz\", \"Durgan\", \"Maggio\") | addresses : line_1_number_building (\"56461 Baumbach Well Suite 634\", \"2291 Larkin Ports\", \"43235 Jazmin Mountain Suite 251\"), state_province_county (\"Connecticut\", \"Kentucky\", \"Idaho\"), country (\"USA\"), city (\"Damianfort\", \"South Eugene\", \"New Bernieceburgh\"), address_id (12, 10, 4), zip_postcode (\"75074\", \"63768\", \"00005\")",
        "ambiguous_queries": [
            "select sum(t1.lesson_time) from lessons as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.first_name = 'Rylan' and t2.last_name = 'Goodwin'",
            "select sum_lesson_time from lessons_customers_lesson_time where first_name = 'Rylan' and last_name = 'Goodwin'"
        ],
        "gold_ambiguity": {
            "match": "{\"total lesson time\": [{\"lessons\": [\"lesson_time\"]}, {\"lessons_customers_lesson_time\": [\"sum_lesson_time\"]}], \"named\": [{\"customers\": [\"first_name\"]}, {\"lessons_customers_lesson_time\": [\"first_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total lesson time\" refers to the schema \"lessons\".\"lesson_time\", \"named\" refers to the schema \"customers\".\"first_name\"",
        "clear_ambiguity": "{\"total lesson time\": {\"lessons\": [\"lesson_time\"]}, \"named\": {\"customers\": [\"first_name\"]}}",
        "gold_query": "select sum(t1.lesson_time) from lessons as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.first_name = 'Rylan' and t2.last_name = 'Goodwin'"
    },
    {
        "index": 611,
        "db_id": "manufactory_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/manufactory_1/manufactory_1.sqlite",
        "question": "What are the codes and names of the cheapest products in each category?",
        "schema_without_content": "products : code , name , manufacturer , price  | manufacturers : headquarter , revenue , founder , code , name  | products_price : max_price , sum_price , name , avg_price , min_price , code ",
        "schema_with_content": "products : code (6, 3, 8), name (\"CD drive\", \"Hard drive\", \"Monitor\"), manufacturer (6, 6, 1), price (270, 240, 180) | manufacturers : headquarter (\"Tokyo\", \"Beijing\", \"Los Angeles\"), revenue (100.0, 30.0, 100.0), founder (\"James\", \"James\", \"John\"), code (3, 5, 3), name (\"Fujitsu\", \"Fujitsu\", \"Creative Labs\") | products_price : max_price (240, 90, 66), sum_price (90, 90, 66), name (\"Printer\", \"CD drive\", \"ZIP drive\"), avg_price (66, 270, 150), min_price (240, 66, 180), code (5, 11, 10)",
        "ambiguous_queries": [
            "select code, name, min(price) from products group by name",
            "select code, name, min_price from products_price"
        ],
        "gold_ambiguity": {
            "match": "{\"cheapest\": [{\"products\": [\"price\"]}, {\"products_price\": [\"min_price\"]}], \"codes\": [{\"products\": [\"code\"]}, {\"products_price\": [\"code\"]}], \"names\": [{\"products\": [\"name\"]}, {\"products_price\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cheapest\" refers to the schema \"products\".\"price\", \"codes\" refers to the schema \"products\".\"code\", \"names\" refers to the schema \"products\".\"name\"",
        "clear_ambiguity": "{\"cheapest\": {\"products\": [\"price\"]}, \"codes\": {\"products\": [\"code\"]}, \"names\": {\"products\": [\"name\"]}}",
        "gold_query": "select code, name, min(price) from products group by name"
    },
    {
        "index": 612,
        "db_id": "pets_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/pets_1/pets_1.sqlite",
        "question": "Find the average and maximum age for each type of pet.",
        "schema_without_content": "pets : weight , pet_age , pettype , petid  | student : age , major , sex , fname , lname , stuid , advisor , city_code  | has_pet : petid , stuid  | pets_pet_age : pettype , sum_pet_age , min_pet_age , avg_pet_age , max_pet_age ",
        "schema_with_content": "pets : weight (12.0, 13.4, 9.3), pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003) | student : age (27, 18, 18), major (100, 600, 50), sex (\"F\", \"M\"), fname (\"Susan\", \"Paul\", \"Mark\"), lname (\"Apap\", \"Schmidt\", \"Schultz\"), stuid (1027, 1031, 1024), advisor (8918, 5718, 7792), city_code (\"DET\", \"ROC\", \"BAL\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets_pet_age : pettype (\"cat\", \"dog\"), sum_pet_age (3, 2, 1), min_pet_age (3, 2, 1), avg_pet_age (3, 2, 1), max_pet_age (3, 2, 1)",
        "ambiguous_queries": [
            "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
            "select avg_pet_age, max_pet_age, pettype from pets_pet_age"
        ],
        "gold_ambiguity": {
            "match": "{\"pet\": [{\"pets\": [\"pettype\"]}, {\"pets_pet_age\": [\"pettype\"]}], \"average\": [{\"pets\": [\"pet_age\"]}, {\"pets_pet_age\": [\"avg_pet_age\"]}], \"maximum\": [{\"pets\": [\"pet_age\"]}, {\"pets_pet_age\": [\"max_pet_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"pet\" refers to the schema \"pets_pet_age\".\"pettype\", \"average\" refers to the schema \"pets_pet_age\".\"avg_pet_age\", \"maximum\" refers to the schema \"pets_pet_age\".\"max_pet_age\"",
        "clear_ambiguity": "{\"pet\": {\"pets_pet_age\": [\"pettype\"]}, \"average\": {\"pets_pet_age\": [\"avg_pet_age\"]}, \"maximum\": {\"pets_pet_age\": [\"max_pet_age\"]}}",
        "gold_query": "select avg_pet_age, max_pet_age, pettype from pets_pet_age"
    },
    {
        "index": 613,
        "db_id": "small_bank_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/small_bank_1/small_bank_1.sqlite",
        "question": "What is the average balance in checking accounts?",
        "schema_without_content": "checking : balance , custid  | checking_balance : sum_balance , avg_balance , min_balance , max_balance  | accounts : custid , name  | savings : balance , custid ",
        "schema_with_content": "checking : balance (2000.0, 2000.0, 3000.0), custid (5, 1, 3) | checking_balance : sum_balance (77.0, 2000.0, 3000.0), avg_balance (7.0, 77.0, 7.0), min_balance (7.0, 7.0, 2000.0), max_balance (2000.0, 7.0, 3000.0) | accounts : custid (2, 2, 1), name (\"Granger\", \"Brown\", \"Granger\") | savings : balance (999999999.0, 999999999.0, 200000.0), custid (2, 2, 4)",
        "ambiguous_queries": [
            "select avg(balance) from checking",
            "select avg_balance from checking_balance"
        ],
        "gold_ambiguity": {
            "match": "{\"average balance\": [{\"checking\": [\"balance\"]}, {\"checking_balance\": [\"avg_balance\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average balance\" refers to the schema \"checking_balance\".\"avg_balance\"",
        "clear_ambiguity": "{\"average balance\": {\"checking_balance\": [\"avg_balance\"]}}",
        "gold_query": "select avg_balance from checking_balance"
    },
    {
        "index": 614,
        "db_id": "cre_Doc_Template_Mgt",
        "ambig_type": "aggregate",
        "db_file": "aggregate/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "schema_without_content": "paragraphs : document_id , paragraph_id , other_details , paragraph_text  | documents : template_id , document_name , document_id , other_details , document_description  | templates_version_number : max_version_number , template_type_code , sum_version_number , min_version_number , avg_version_number  | templates : version_number , template_details , template_id , date_effective_from , template_type_code , date_effective_to  | ref_template_types : template_type_description , template_type_code ",
        "schema_with_content": "paragraphs : document_id (16514113, 385906526, 50123), paragraph_id (3708, 243399026, 241), other_details (None), paragraph_text (\"Indonesia\", \"Palestinian Territory\", \"Korea\") | documents : template_id (25, 4, 22), document_name (\"Data base\", \"Summer Show\", \"Understanding DB\"), document_id (3540024, 76, 76), other_details (None), document_description (\"y\", \"w\", \"z\") | templates_version_number : max_version_number (9, 6, 8), template_type_code (\"PP\", \"PP\", \"CV\"), sum_version_number (7, 6, 9), min_version_number (6, 2, 5), avg_version_number (1, 7, 7) | templates : version_number (4, 5, 9), template_details (\"\"), template_id (0, 19, 19), date_effective_from (\"1979-10-20 21:23:20\", \"1996-02-04 11:27:24\", \"1984-08-07 13:36:26\"), template_type_code (\"CV\", \"AD\", \"AD\"), date_effective_to (\"1973-01-12 14:13:34\", \"2001-04-18 09:29:52\", \"1998-05-12 12:51:29\") | ref_template_types : template_type_description (\"Paper\", \"Book\", \"Presentation\"), template_type_code (\"PP\", \"PP\", \"BK\")",
        "ambiguous_queries": [
            "select min(version_number), template_type_code from templates",
            "select min_version_number, template_type_code from templates_version_number"
        ],
        "gold_ambiguity": {
            "match": "{\"template type code\": [{\"templates\": [\"template_type_code\"]}, {\"templates_version_number\": [\"template_type_code\"]}], \"lowest version number\": [{\"templates\": [\"version_number\"]}, {\"templates_version_number\": [\"min_version_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"template type code\" refers to the schema \"templates_version_number\".\"template_type_code\", \"lowest version number\" refers to the schema \"templates_version_number\".\"min_version_number\"",
        "clear_ambiguity": "{\"template type code\": {\"templates_version_number\": [\"template_type_code\"]}, \"lowest version number\": {\"templates_version_number\": [\"min_version_number\"]}}",
        "gold_query": "select min_version_number, template_type_code from templates_version_number"
    },
    {
        "index": 615,
        "db_id": "dog_kennels",
        "ambig_type": "aggregate",
        "db_file": "aggregate/dog_kennels/dog_kennels.sqlite",
        "question": "Compute the average age of all the dogs.",
        "schema_without_content": "treatment_types : treatment_type_code , treatment_type_description  | dogs_age : sum_age , avg_age , max_age , min_age  | charges : charge_type , charge_amount , charge_id  | owners : street , first_name , email_address , city , home_phone , owner_id , state , zip_code , last_name , cell_number  | professionals : zip_code , street , city , last_name , home_phone , professional_id , role_code , cell_number , state , email_address , first_name  | breeds : breed_code , breed_name  | sizes : size_code , size_description  | dogs : age , dog_id , date_arrived , breed_code , gender , name , abandoned_yn , date_adopted , owner_id , size_code , weight , date_of_birth , date_departed  | treatments : dog_id , professional_id , treatment_id , date_of_treatment , treatment_type_code , cost_of_treatment ",
        "schema_with_content": "treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | dogs_age : sum_age (\"3\", \"2\", \"5\"), avg_age (\"8\", \"3\", \"8\"), max_age (\"8\", \"1\", \"5\"), min_age (\"9\", \"9\", \"8\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | owners : street (\"60352 Kayleigh Crossing Suite 700\", \"1858 Jan Park\", \"9212 Rosenbaum Lights\"), first_name (\"Nora\", \"Emelie\", \"Jaclyn\"), email_address (\"fschoen@example.net\", \"ybergstrom@example.com\", \"ymaggio@example.com\"), city (\"Barrettburgh\", \"East Maribelbury\", \"Brakusfurt\"), home_phone (\"1-682-845-0116x63235\", \"893-862-5295x61709\", \"1-332-849-1908\"), owner_id (14, 1, 8), state (\"NewYork\", \"Wisconsin\", \"Arkansas\"), zip_code (\"78297\", \"78297\", \"22731\"), last_name (\"Mertz\", \"Hamill\", \"Feil\"), cell_number (\"481-483-9083x37986\", \"478.978.0729\", \"739-136-7202\") | professionals : zip_code (\"98844\", \"02281\", \"67980\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), city (\"South Rockyport\", \"Domenickton\", \"East Ila\"), last_name (\"Walter\", \"Hayes\", \"Hayes\"), home_phone (\"1-138-287-3775\", \"022.529.0550x1319\", \"246-951-0080x76716\"), professional_id (10, 6, 2), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"499-434-0215x1628\", \"1-258-285-4707x8020\", \"1-185-137-1945x409\"), state (\"Wyoming\", \"Mississippi\", \"SouthCarolina\"), email_address (\"jacynthe.mclaughlin@example.net\", \"deanna.schuster@example.com\", \"west.eula@example.net\"), first_name (\"Jayson\", \"Lesly\", \"Domenica\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | dogs : age (\"5\", \"5\", \"9\"), dog_id (11, 6, 12), date_arrived (\"2017-12-22 05:02:02\", \"2017-10-24 04:45:13\", \"2018-01-02 03:15:29\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), name (\"Mavis\", \"Evangeline\", \"Hipolito\"), abandoned_yn (\"1\", \"0\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-18 15:12:50\", \"2018-03-10 15:06:43\"), owner_id (1, 8, 7), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"8.96\", \"8.95\", \"4.36\"), date_of_birth (\"2008-10-09 22:38:53\", \"2012-07-11 17:15:10\", \"2015-02-26 21:31:22\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 05:07:47\", \"2018-03-25 04:50:22\") | treatments : dog_id (1, 7, 4), professional_id (10, 4, 14), treatment_id (1, 8, 12), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-15 20:25:34\", \"2018-03-15 20:25:34\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (852, 681, 139)",
        "ambiguous_queries": [
            "select avg(age) from dogs",
            "select avg_age from dogs_age"
        ],
        "gold_ambiguity": {
            "match": "{\"average age\": [{\"dogs\": [\"age\"]}, {\"dogs_age\": [\"avg_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average age\" refers to the schema \"dogs_age\".\"avg_age\"",
        "clear_ambiguity": "{\"average age\": {\"dogs_age\": [\"avg_age\"]}}",
        "gold_query": "select avg_age from dogs_age"
    },
    {
        "index": 616,
        "db_id": "dorm_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/dorm_1/dorm_1.sqlite",
        "question": "Find the average age of students living in each dorm and the name of dorm.",
        "schema_without_content": "dorm : dormid , student_capacity , gender , dorm_name  | lives_in : stuid , room_number , dormid  | has_amenity : dormid , amenid  | dorm_amenity : amenity_name , amenid  | student : stuid , age , major , sex , fname , advisor , city_code , lname  | student_lives_in_dorm_age : max_age , dorm_name , avg_age , sum_age , min_age ",
        "schema_with_content": "dorm : dormid (100, 140, 109), student_capacity (116, 400, 85), gender (\"X\", \"M\", \"F\"), dorm_name (\"University Hovels\", \"Bud Jones Hall\", \"Bud Jones Hall\") | lives_in : stuid (1017, 1009, 1005), room_number (211, 124, 124), dormid (117, 109, 104) | has_amenity : dormid (140, 140, 100), amenid (903, 932, 955) | dorm_amenity : amenity_name (\"Carpeted Rooms\", \"Roof\", \"Study Room\"), amenid (901, 922, 901) | student : stuid (1001, 1012, 1033), age (18, 16, 27), major (50, 550, 100), sex (\"F\", \"M\"), fname (\"Jandy\", \"David\", \"Jandy\"), advisor (8721, 9172, 7134), city_code (\"LON\", \"ROC\", \"NAR\"), lname (\"Epp\", \"Pang\", \"Goldman\") | student_lives_in_dorm_age : max_age (22, 17, 18), dorm_name (\"Bud Jones Hall\", \"Fawlty Towers\", \"Fawlty Towers\"), avg_age (19, 17, 21), sum_age (17, 20, 21), min_age (27, 17, 22)",
        "ambiguous_queries": [
            "select avg(t1.age), t3.dorm_name from student as t1 join lives_in as t2 on t1.stuid = t2.stuid join dorm as t3 on t3.dormid = t2.dormid group by t3.dorm_name",
            "select avg_age, dorm_name from student_lives_in_dorm_age"
        ],
        "gold_ambiguity": {
            "match": "{\"average age\": [{\"student\": [\"age\"]}, {\"student_lives_in_dorm_age\": [\"avg_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average age\" refers to the schema \"student_lives_in_dorm_age\".\"avg_age\"",
        "clear_ambiguity": "{\"average age\": {\"student_lives_in_dorm_age\": [\"avg_age\"]}}",
        "gold_query": "select avg_age, dorm_name from student_lives_in_dorm_age"
    },
    {
        "index": 617,
        "db_id": "flight_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/flight_1/flight_1.sqlite",
        "question": "What is the average and largest salary of all employees?",
        "schema_without_content": "employee : name , eid , salary  | certificate : aid , eid  | aircraft : name , aid , distance  | employee_salary : sum_salary , avg_salary , max_salary , min_salary  | flight : aid , distance , origin , arrival_date , destination , departure_date , flno , price ",
        "schema_with_content": "employee : name (\"Barbara Wilson\", \"Chad Stewart\", \"David Anderson\"), eid (489221823, 355548984, 248965255), salary (99890, 105743, 178345) | certificate : aid (15, 12, 3), eid (567354612, 310454876, 141582651) | aircraft : name (\"Boeing 727\", \"Piper Archer III\", \"Boeing 767-400ER\"), aid (6, 3, 7), distance (1504, 7120, 6475) | employee_salary : sum_salary (44740, 27984, 44740), avg_salary (105743, 114323, 289950), max_salary (23980, 205187, 48090), min_salary (101745, 43001, 44740) | flight : aid (2, 10, 9), distance (1251, 802, 2308), origin (\"Los Angeles\", \"Chicago\"), arrival_date (\"04/12/2005 11:15\", \"04/12/2005 07:05\", \"04/12/2005 10:03\"), destination (\"Washington D.C.\", \"Sydney\", \"Los Angeles\"), departure_date (\"04/12/2005 08:45\", \"04/12/2005 08:45\", \"04/12/2005 09:00\"), flno (346, 76, 76), price (261.56, 235.98, 261.56)",
        "ambiguous_queries": [
            "select avg(salary), max(salary) from employee",
            "select avg_salary, max_salary from employee_salary"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"employee\": [\"salary\"]}, {\"employee_salary\": [\"avg_salary\"]}], \"largest\": [{\"employee\": [\"salary\"]}, {\"employee_salary\": [\"max_salary\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"employee\".\"salary\", \"largest\" refers to the schema \"employee\".\"salary\"",
        "clear_ambiguity": "{\"average\": {\"employee\": [\"salary\"]}, \"largest\": {\"employee\": [\"salary\"]}}",
        "gold_query": "select avg(salary), max(salary) from employee"
    },
    {
        "index": 618,
        "db_id": "game_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/game_1/game_1.sqlite",
        "question": "How many games are played for all students?",
        "schema_without_content": "video_games : gtype , gname , gameid  | plays_games : hours_played , stuid , gameid  | student : stuid , city_code , lname , age , sex , advisor , fname , major  | sportsinfo_gamesplayed : sum_gamesplayed , max_gamesplayed , min_gamesplayed , avg_gamesplayed  | sportsinfo : sportname , gamesplayed , onscholarship , hoursperweek , stuid ",
        "schema_with_content": "video_games : gtype (\"Collectible card game\", \"Collectible card game\", \"Role-playing game\"), gname (\"Call of Destiny\", \"RNG Stone\", \"Grand Term Assignment\"), gameid (4, 6, 4) | plays_games : hours_played (100, 47, 1000), stuid (1032, 1010, 1007), gameid (1, 4, 3) | student : stuid (1002, 1026, 1029), city_code (\"DAL\", \"NYC\", \"HKG\"), lname (\"Gompers\", \"Brown\", \"Rugh\"), age (17, 18, 21), sex (\"F\", \"M\"), advisor (7723, 7271, 1121), fname (\"Eric\", \"David\", \"Jun\"), major (520, 540, 50) | sportsinfo_gamesplayed : sum_gamesplayed (56, 31, 20), max_gamesplayed (62, 18, 16), min_gamesplayed (37, 45, 20), avg_gamesplayed (37, 25, 20) | sportsinfo : sportname (\"Cricket\", \"Basketball\", \"Athletics\"), gamesplayed (62, 16, 94), onscholarship (\"N\", \"Y\"), hoursperweek (25, 2, 19), stuid (1033, 1019, 1018)",
        "ambiguous_queries": [
            "select sum(gamesplayed) from sportsinfo",
            "select sum_gamesplayed from sportsinfo_gamesplayed"
        ],
        "gold_ambiguity": {
            "match": "{\"games\": [{\"sportsinfo\": [\"gamesplayed\"]}, {\"sportsinfo_gamesplayed\": [\"sum_gamesplayed\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"games\" refers to the schema \"sportsinfo_gamesplayed\".\"sum_gamesplayed\"",
        "clear_ambiguity": "{\"games\": {\"sportsinfo_gamesplayed\": [\"sum_gamesplayed\"]}}",
        "gold_query": "select sum_gamesplayed from sportsinfo_gamesplayed"
    },
    {
        "index": 619,
        "db_id": "perpetrator",
        "ambig_type": "aggregate",
        "db_file": "aggregate/perpetrator/perpetrator.sqlite",
        "question": "What is the average number of people injured by all perpetrators?",
        "schema_without_content": "perpetrator : year , injured , location , date , killed , people_id , perpetrator_id , country  | people : height , home town , people_id , weight , name  | perpetrator_injured : sum_injured , max_injured , avg_injured , min_injured ",
        "schema_with_content": "perpetrator : year (1938.0, 1995.0, 1994.0), injured (16, 16, 80), location (\"Uiryeong\", \"Nainital\", \"Beijing\"), date (\"11.18 Nov. 18\", \"05.21 May 21\", \"11.18 Nov. 18\"), killed (56, 32, 30), people_id (1, 6, 8), perpetrator_id (5, 2, 4), country (\"South Korea\", \"India\", \"Japan\") | people : height (6.8, 6.1, 6.7), home town (\"Beaver Dam, KY\", \"Beaver Dam, KY\", \"Los Angeles, CA\"), people_id (5, 11, 4), weight (160.0, 170.0, 205.0), name (\"Rob Cunningham\", \"Mike Murphy\", \"Ovie Dotson\") | perpetrator_injured : sum_injured (16, 16, 0), max_injured (80, 0, 80), avg_injured (80, 16, 80), min_injured (80, 80, 3)",
        "ambiguous_queries": [
            "select avg(injured) from perpetrator",
            "select avg_injured from perpetrator_injured"
        ],
        "gold_ambiguity": {
            "match": "{\"injured\": [{\"perpetrator\": [\"injured\"]}, {\"perpetrator_injured\": [\"avg_injured\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"injured\" refers to the schema \"perpetrator_injured\".\"avg_injured\"",
        "clear_ambiguity": "{\"injured\": {\"perpetrator_injured\": [\"avg_injured\"]}}",
        "gold_query": "select avg_injured from perpetrator_injured"
    },
    {
        "index": 620,
        "db_id": "soccer_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/soccer_1/soccer_1.sqlite",
        "question": "What is the average weight of all players?",
        "schema_without_content": "country : id , name  | player : birthday , weight , player_name , height , player_api_id , player_fifa_api_id , id  | sqlite_sequence : seq , name  | team_attributes : buildupplaypassingclass , defenceteamwidth , defenceaggressionclass , team_api_id , buildupplayspeedclass , chancecreationpositioningclass , id , date , chancecreationshootingclass , chancecreationshooting , buildupplaydribbling , defencepressureclass , buildupplaypositioningclass , chancecreationpassingclass , defenceaggression , chancecreationcrossing , buildupplaydribblingclass , defenceteamwidthclass , team_fifa_api_id , chancecreationpassing , buildupplayspeed , defencedefenderlineclass , defencepressure , buildupplaypassing , chancecreationcrossingclass  | team : team_api_id , id , team_fifa_api_id , team_short_name , team_long_name  | league : id , name , country_id  | player_attributes : acceleration , id , positioning , overall_rating , standing_tackle , finishing , long_passing , shot_power , crossing , aggression , player_api_id , gk_kicking , gk_handling , vision , curve , reactions , long_shots , heading_accuracy , gk_positioning , preferred_foot , interceptions , marking , dribbling , defensive_work_rate , balance , strength , agility , sprint_speed , penalties , gk_diving , attacking_work_rate , potential , free_kick_accuracy , gk_reflexes , stamina , jumping , date , short_passing , sliding_tackle , player_fifa_api_id , volleys , ball_control  | player_weight : max_weight , sum_weight , min_weight , avg_weight ",
        "schema_with_content": "country : id (1729, 4769, 1), name (\"Belgium\", \"Switzerland\", \"Switzerland\") | player : birthday (\"1986-09-27 00:00:00\", \"1985-06-20 00:00:00\", \"1989-09-05 00:00:00\"), weight (126, 225, 243), player_name (\"Souleymane Adama Diamoutene\", \"Stefan Thesker\", \"Bartosz Kaniecki\"), height (187.96, 180.34, 182.88), player_api_id (18734, 40958, 35475), player_fifa_api_id (173857, 225908, 183177), id (8868, 1329, 2902) | sqlite_sequence : seq (51958, 183978, 51958), name (\"Team\", \"Player_Attributes\", \"League\") | team_attributes : buildupplaypassingclass (\"Mixed\", \"Long\", \"Short\"), defenceteamwidth (60, 55, 37), defenceaggressionclass (\"Press\", \"Double\", \"Contain\"), team_api_id (9772, 10269, 8560), buildupplayspeedclass (\"Balanced\", \"Fast\", \"Slow\"), chancecreationpositioningclass (\"Organised\", \"Free Form\"), id (568, 507, 1306), date (\"2013-09-20 00:00:00\", \"2013-09-20 00:00:00\", \"2011-02-22 00:00:00\"), chancecreationshootingclass (\"Normal\", \"Lots\", \"Little\"), chancecreationshooting (58, 50, 80), buildupplaydribbling (59, 40, 66), defencepressureclass (\"Medium\", \"Deep\", \"High\"), buildupplaypositioningclass (\"Organised\", \"Free Form\"), chancecreationpassingclass (\"Normal\", \"Risky\", \"Safe\"), defenceaggression (34, 40, 69), chancecreationcrossing (77, 39, 80), buildupplaydribblingclass (\"Little\", \"Normal\", \"Lots\"), defenceteamwidthclass (\"Normal\", \"Wide\", \"Narrow\"), team_fifa_api_id (81, 34, 1887), chancecreationpassing (33, 59, 61), buildupplayspeed (69, 28, 28), defencedefenderlineclass (\"Cover\", \"Offside Trap\"), defencepressure (49, 38, 56), buildupplaypassing (66, 73, 29), chancecreationcrossingclass (\"Normal\", \"Lots\", \"Little\") | team : team_api_id (9911, 10217, 9906), id (43040, 27780, 49124), team_fifa_api_id (38, 1738, 1887), team_short_name (\"COR\", \"ULE\", \"GOR\"), team_long_name (\"Hellas Verona\", \"KVC Westerlo\", \"Bolton Wanderers\") | league : id (7809, 13274, 13274), name (\"Portugal Liga ZON Sagres\", \"Belgium Jupiler League\", \"Portugal Liga ZON Sagres\"), country_id (19694, 19694, 17642) | player_attributes : acceleration (13, 95, 26), id (28854, 39671, 11017), positioning (64, 23, 68), overall_rating (64, 58, 63), standing_tackle (76, 76, 3), finishing (22, 49, 32), long_passing (58, 73, 18), shot_power (83, 94, 29), crossing (24, 83, 44), aggression (33, 14, 62), player_api_id (264686, 164472, 46079), gk_kicking (24, 77, 84), gk_handling (17, 41, 67), vision (78, 10, 28), curve (20, 36, 15), reactions (88, 72, 49), long_shots (39, 54, 64), heading_accuracy (72, 7, 20), gk_positioning (36, 48, 77), preferred_foot (\"right\", \"left\", None), interceptions (57, 3, 42), marking (33, 15, 61), dribbling (86, 15, 4), defensive_work_rate (\"1\", \"4\", \"tocky\"), balance (84, 70, 40), strength (42, 39, 40), agility (43, 84, 63), sprint_speed (86, 14, 12), penalties (21, 48, 91), gk_diving (69, 24, 63), attacking_work_rate (\"None\", \"stoc\", \"y\"), potential (67, 66, 62), free_kick_accuracy (7, 95, 46), gk_reflexes (43, 22, 46), stamina (52, 81, 84), jumping (84, 73, 20), date (\"2013-09-20 00:00:00\", \"2014-12-19 00:00:00\", \"2015-01-02 00:00:00\"), short_passing (51, 4, 71), sliding_tackle (82, 10, 12), player_fifa_api_id (195057, 203446, 216410), volleys (49, 57, 84), ball_control (79, 57, 75) | player_weight : max_weight (201, 181, 220), sum_weight (123, 192, 183), min_weight (176, 137, 137), avg_weight (192, 181, 198)",
        "ambiguous_queries": [
            "select avg(weight) from player",
            "select avg_weight from player_weight"
        ],
        "gold_ambiguity": {
            "match": "{\"average weight\": [{\"player\": [\"weight\"]}, {\"player_weight\": [\"avg_weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average weight\" refers to the schema \"player_weight\".\"avg_weight\"",
        "clear_ambiguity": "{\"average weight\": {\"player_weight\": [\"avg_weight\"]}}",
        "gold_query": "select avg_weight from player_weight"
    },
    {
        "index": 621,
        "db_id": "orchestra",
        "ambig_type": "aggregate",
        "db_file": "aggregate/orchestra/orchestra.sqlite",
        "question": "What is the average attendance of shows?",
        "schema_without_content": "show_attendance : avg_attendance , sum_attendance , min_attendance , max_attendance  | orchestra : orchestra_id , conductor_id , major_record_format , record_company , orchestra , year_of_founded  | show : result , if_first_show , attendance , show_id , performance_id  | performance : share , performance_id , weekly_rank , type , official_ratings_ , date , orchestra_id  | conductor : conductor_id , age , nationality , year_of_work , name ",
        "schema_with_content": "show_attendance : avg_attendance (2431.0, 555.0, 695.0), sum_attendance (2431.0, 555.0, 2431.0), min_attendance (1026.0, 1026.0, 695.0), max_attendance (555.0, 2431.0, 1026.0) | orchestra : orchestra_id (8, 3, 10), conductor_id (5, 9, 11), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), record_company (\"Columbia Masterworks\", \"Philips\", \"Kultur\"), orchestra (\"Seattle Symphony Orchestra\", \"Detroit Symphony Orchestra\", \"Detroit Symphony Orchestra\"), year_of_founded (2002.0, 2003.0, 2009.0) | show : result (\"T\", \"F\"), if_first_show (\"Glebe Park\", \"Fir Park\", \"Fir Park\"), attendance (1925.0, 1925.0, 555.0), show_id (4, 2, 5), performance_id (1, 2, 4) | performance : share (\"29.4%\", \"29.2%\", \"28.0%\"), performance_id (6, 3, 2), weekly_rank (\"15\", \"12\", \"12\"), type (\"Auditions 3\", \"Live final\", \"Auditions 2\"), official_ratings_(millions) (8.38, 7.39, 7.39), date (\"10 June\", \"16 June\", \"16 June\"), orchestra_id (9, 10, 11) | conductor : conductor_id (7, 4, 2), age (47, 43, 50), nationality (\"USA\", \"UK\", \"France\"), year_of_work (11, 16, 11), name (\"Paul Jorgensen\", \"Valeri Gergiev\", \"Colin Davis\")",
        "ambiguous_queries": [
            "select avg(attendance) from show",
            "select avg_attendance from show_attendance"
        ],
        "gold_ambiguity": {
            "match": "{\"average attendance\": [{\"show\": [\"attendance\"]}, {\"show_attendance\": [\"avg_attendance\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average attendance\" refers to the schema \"show\".\"attendance\"",
        "clear_ambiguity": "{\"average attendance\": {\"show\": [\"attendance\"]}}",
        "gold_query": "select avg(attendance) from show"
    },
    {
        "index": 622,
        "db_id": "epinions_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/epinions_1/epinions_1.sqlite",
        "question": "Find each target user's name and average trust score.",
        "schema_without_content": "trust_useracct_trust : max_trust , name , avg_trust , sum_trust , min_trust  | review : i_id , a_id , rank , rating , u_id  | trust : source_u_id , target_u_id , trust  | item : i_id , title  | useracct : u_id , name ",
        "schema_with_content": "trust_useracct_trust : max_trust (2, 7, 3), name (\"Emily\", \"Nancy\", \"Mark\"), avg_trust (10, 7, 4), sum_trust (10, 7, 7), min_trust (3, 1, 3) | review : i_id (1, 3, 7), a_id (6, 4, 7), rank (4, 6, 5), rating (7, 10, 7), u_id (1, 2) | trust : source_u_id (6, 1, 3), target_u_id (3, 2, 2), trust (10, 4, 2) | item : i_id (0, 2, 4), title (\"cup\", \"pear\", \"orange\") | useracct : u_id (6, 2, 2), name (\"Rosie\", \"Roxi\", \"Terry\")",
        "ambiguous_queries": [
            "select t1.name, avg(trust) from useracct as t1 join trust as t2 on t1.u_id = t2.target_u_id group by t2.target_u_id",
            "select name, avg_trust from trust_useracct_trust"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"trust_useracct_trust\": [\"name\"]}, {\"useracct\": [\"name\"]}], \"average trust score\": [{\"trust_useracct_trust\": [\"avg_trust\"]}, {\"useracct\": [\"trust\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"useracct\".\"name\", \"average trust score\" refers to the schema \"useracct\".\"trust\"",
        "clear_ambiguity": "{\"name\": {\"useracct\": [\"name\"]}, \"average trust score\": {\"useracct\": [\"trust\"]}}",
        "gold_query": "select t1.name, avg(trust) from useracct as t1 join trust as t2 on t1.u_id = t2.target_u_id group by t2.target_u_id"
    },
    {
        "index": 623,
        "db_id": "cinema",
        "ambig_type": "aggregate",
        "db_file": "aggregate/cinema/cinema.sqlite",
        "question": "What is total number of show times per dat for each cinema?",
        "schema_without_content": "schedule : show_times_per_day , date , film_id , cinema_id , price  | schedule_cinema_show_times_per_day : max_show_times_per_day , name , sum_show_times_per_day , avg_show_times_per_day , min_show_times_per_day  | cinema : location , cinema_id , openning_year , capacity , name  | film : production_code , number_in_season , film_id , rank_in_series , title , directed_by , original_air_date ",
        "schema_with_content": "schedule : show_times_per_day (5, 3, 5), date (\"19 May\", \"2 Aug\", \"21 May\"), film_id (2, 4, 3), cinema_id (2, 1, 9), price (15.99, 8.99, 12.99) | schedule_cinema_show_times_per_day : max_show_times_per_day (2, 5, 4), name (\"Carrowleagh\", \"Grouse Lodge\", \"Moneypoint\"), sum_show_times_per_day (5, 4, 3), avg_show_times_per_day (5, 5, 3), min_show_times_per_day (4, 5, 2) | cinema : location (\"County Tipperary\", \"County Louth\", \"County Tipperary\"), cinema_id (9, 9, 5), openning_year (2013, 2012, 2010), capacity (908, 305, 1100), name (\"Carrowleagh\", \"Oriel\", \"Gortahile\") | film : production_code (\"50251â50255\", \"50021â50025\", \"50231â50235\"), number_in_season (4, 1, 3), film_id (3, 2, 5), rank_in_series (27, 26, 28), title (\"The Case of the Smart Dummy\", \"The Case of the Bermuda Triangle\", \"The Case of the Bermuda Triangle\"), directed_by (\"Bill Schreiner\", \"Jesus Salvador TreviÃ±o\"), original_air_date (\"October 19â23, 1992\", \"October 19â23, 1992\", \"October 5â9, 1992\")",
        "ambiguous_queries": [
            "select t2.name, sum(t1.show_times_per_day) from schedule as t1 join cinema as t2 on t1.cinema_id = t2.cinema_id group by t1.cinema_id",
            "select name, sum_show_times_per_day from schedule_cinema_show_times_per_day"
        ],
        "gold_ambiguity": {
            "match": "{\"total number of show times\": [{\"schedule\": [\"show_times_per_day\"]}, {\"schedule_cinema_show_times_per_day\": [\"sum_show_times_per_day\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total number of show times\" refers to the schema \"schedule\".\"show_times_per_day\"",
        "clear_ambiguity": "{\"total number of show times\": {\"schedule\": [\"show_times_per_day\"]}}",
        "gold_query": "select t2.name, sum(t1.show_times_per_day) from schedule as t1 join cinema as t2 on t1.cinema_id = t2.cinema_id group by t1.cinema_id"
    },
    {
        "index": 624,
        "db_id": "battle_death",
        "ambig_type": "aggregate",
        "db_file": "aggregate/battle_death/battle_death.sqlite",
        "question": "What is maximum and minimum death toll caused each time?",
        "schema_without_content": "battle : name , latin_commander , date , id , result , bulgarian_commander  | death_killed : max_killed , sum_killed , avg_killed , min_killed  | death : note , caused_by_ship_id , id , killed , injured  | ship : name , tonnage , ship_type , lost_in_battle , location , disposition_of_ship , id ",
        "schema_with_content": "battle : name (\"Battle of Messinopolis\", \"Battle of Messinopolis\", \"Siege of Constantinople\"), latin_commander (\"John of Brienne\", \"Henry I\", \"Boniface of Montferrat\"), date (\"14 April 1205\", \"14 April 1205\", \"31 January 1206\"), id (5, 7, 3), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), bulgarian_commander (\"Boril\", \"Unknown\", \"Ivan Asen II\") | death_killed : max_killed (4, 29, 14), sum_killed (8, 29, 0), avg_killed (0, 29, 14), min_killed (29, 8, 8) | death : note (\"Bokaro, Jharkhand\", \"Bokaro, Jharkhand\", \"East Champaran, Bihar\"), caused_by_ship_id (6, 1, 5), id (13, 3, 13), killed (3, 25, 3), injured (0, 9, 5) | ship : name (\"Bon Accord\", \"Bacchus\", \"Lettice\"), tonnage (\"t\", \"391\", \"225\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), lost_in_battle (8, 8, 6), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), disposition_of_ship (\"Captured\", \"Captured\", \"Captured\"), id (3, 5, 7)",
        "ambiguous_queries": [
            "select max(killed), min(killed) from death",
            "select max_killed, min_killed from death_killed"
        ],
        "gold_ambiguity": {
            "match": "{\"minimum\": [{\"death\": [\"killed\"]}, {\"death_killed\": [\"min_killed\"]}], \"maximum\": [{\"death\": [\"killed\"]}, {\"death_killed\": [\"max_killed\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"minimum\" refers to the schema \"death_killed\".\"min_killed\", \"maximum\" refers to the schema \"death_killed\".\"max_killed\"",
        "clear_ambiguity": "{\"minimum\": {\"death_killed\": [\"min_killed\"]}, \"maximum\": {\"death_killed\": [\"max_killed\"]}}",
        "gold_query": "select max_killed, min_killed from death_killed"
    },
    {
        "index": 625,
        "db_id": "apartment_rentals",
        "ambig_type": "aggregate",
        "db_file": "aggregate/apartment_rentals/apartment_rentals.sqlite",
        "question": "Find the total number of rooms in the apartments that have facility code \"Gym\".",
        "schema_without_content": "apartment_buildings : building_phone 411-6406\", building_full_name , building_description , building_short_name , building_manager , building_id , building_address  | apartments : bathroom_count , apt_type_code , apt_number , bedroom_count , room_count , apt_id , building_id  | view_unit_status : available_yn , apt_booking_id , status_date , apt_id  | apartment_facilities_apartments_room_count : max_room_count , min_room_count , avg_room_count , sum_room_count , facility_code  | guests : guest_first_name , gender_code , guest_last_name , guest_id , date_of_birth  | apartment_facilities : apt_id , facility_code  | apartment_bookings : booking_status_code , booking_start_date , apt_booking_id , booking_end_date , guest_id , apt_id ",
        "schema_with_content": "apartment_buildings : building_phone (\"1-724-982-9507x640\", \"544-148-5565x2847\", \"(145)411-6406\"), building_full_name (\"Avalon Park\", \"Avalon Park\", \"Normandie Court\"), building_description (\"Studio\", \"Flat\", \"Duplex\"), building_short_name (\"Windsor Court\", \"The Anthem\", \"The Eugene\"), building_manager (\"Olaf\", \"Juvenal\", \"Albert\"), building_id (153, 808, 968), building_address (\"489 Josh Orchard Apt. 998\nSipesview, DE 69053\", \"0703 Danika Mountains Apt. 362\nMohrland, AL 56839-5028\", \"101 Queenie Mountains Suite 619\nNew Korbinmouth, KS 88726-1376\") | apartments : bathroom_count (1, 2, 3), apt_type_code (\"Flat\", \"Studio\", \"Duplex\"), apt_number (\"Apt. 908\", \"Apt. 187\", \"Apt. 940\"), bedroom_count (6, 3, 4), room_count (\"8\", \"6\", \"6\"), apt_id (5, 10, 4), building_id (790, 734, 624) | view_unit_status : available_yn (1, 0), apt_booking_id (575, 924, 337), status_date (\"1970-09-28 10:24:29\", \"2001-02-17 20:17:09\", \"2014-12-10 13:53:21\"), apt_id (4, 4, 2) | apartment_facilities_apartments_room_count : max_room_count (\"6\", \"6\", \"6\"), min_room_count (\"5\", \"7\", \"5\"), avg_room_count (\"6\", \"8\", \"3\"), sum_room_count (\"8\", \"8\", \"9\"), facility_code (\"Boardband\", \"Boardband\", \"Swimming Pool\") | guests : guest_first_name (\"Louvenia\", \"Kip\", \"Else\"), gender_code (\"Male\", \"Unknown\", \"Female\"), guest_last_name (\"Roberts\", \"Roberts\", \"Runolfsson\"), guest_id (12, 15, 6), date_of_birth (\"1978-03-08 04:43:04\", \"1997-01-15 17:37:40\", \"1997-01-20 17:11:31\") | apartment_facilities : apt_id (15, 6, 15), facility_code (\"Gym\", \"Cable TV\", \"Gym\") | apartment_bookings : booking_status_code (\"Provisional\", \"Confirmed\"), booking_start_date (\"2016-05-24 20:09:38\", \"2016-04-17 12:53:59\", \"2017-02-11 14:34:14\"), apt_booking_id (365, 924, 279), booking_end_date (\"2017-10-06 11:15:58\", \"2018-02-25 15:15:37\", \"2017-10-07 20:47:19\"), guest_id (12, 15, 15), apt_id (15, 11, 12)",
        "ambiguous_queries": [
            "select sum(t2.room_count) from apartment_facilities as t1 join apartments as t2 on t1.apt_id = t2.apt_id where t1.facility_code = 'Gym'",
            "select sum_room_count from apartment_facilities_apartments_room_count where facility_code = 'Gym'"
        ],
        "gold_ambiguity": {
            "match": "{\"facility code\": [{\"apartment_facilities\": [\"facility_code\"]}, {\"apartment_facilities_apartments_room_count\": [\"facility_code\"]}], \"total number of rooms\": [{\"apartment_facilities_apartments_room_count\": [\"sum_room_count\"]}, {\"apartments\": [\"room_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"facility code\" refers to the schema \"apartment_facilities_apartments_room_count\".\"facility_code\", \"total number of rooms\" refers to the schema \"apartment_facilities_apartments_room_count\".\"sum_room_count\"",
        "clear_ambiguity": "{\"facility code\": {\"apartment_facilities_apartments_room_count\": [\"facility_code\"]}, \"total number of rooms\": {\"apartment_facilities_apartments_room_count\": [\"sum_room_count\"]}}",
        "gold_query": "select sum_room_count from apartment_facilities_apartments_room_count where facility_code = 'Gym'"
    },
    {
        "index": 626,
        "db_id": "car_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/car_1/car_1.sqlite",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "schema_without_content": "cars_data_mpg : avg_mpg , sum_mpg , min_mpg , max_mpg  | countries : countryid , continent , countryname  | car_makers : fullname , country , maker , id  | continents : contid , continent  | car_names : model , makeid , make  | cars_data : edispl , weight , cylinders , horsepower , mpg , accelerate , id , year  | model_list : maker , modelid , model ",
        "schema_with_content": "cars_data_mpg : avg_mpg (\"14\", \"15\", \"36.1\"), sum_mpg (\"22.5\", \"18.5\", \"null\"), min_mpg (\"32.7\", \"26.5\", \"32.3\"), max_mpg (\"19.4\", \"27.9\", \"null\") | countries : countryid (9, 12, 5), continent (1, 5, 2), countryname (\"italy\", \"australia\", \"australia\") | car_makers : fullname (\"Opel\", \"BMW\", \"Subaru\"), country (\"3\", \"6\", \"2\"), maker (\"saab\", \"mazda\", \"kia\"), id (9, 11, 14) | continents : contid (4, 1, 4), continent (\"africa\", \"asia\", \"asia\") | car_names : model (\"mercedes\", \" volkswagen\", \"volvo\"), makeid (81, 228, 360), make (\"dodge diplomat\", \"toyota corolla 1200\", \"chevrolet monte carlo landau\") | cars_data : edispl (100.0, 113.0, 97.0), weight (3777, 4615, 1649), cylinders (6, 4, 3), horsepower (\"66\", \"75\", \"70\"), mpg (\"19.1\", \"20\", \"17.5\"), accelerate (16.5, 14.1, 14.0), id (340, 399, 174), year (1977, 1974, 1980) | model_list : maker (10, 1, 12), modelid (32, 18, 19), model (\"toyota\", \"renault\", \"citroen\")",
        "ambiguous_queries": [
            "select avg(mpg) from cars_data where cylinders = 4",
            "select avg_mpg from cars_data_mpg where cylinders = 4"
        ],
        "gold_ambiguity": {
            "match": "{\"cylinders\": [{\"cars_data\": [\"cylinders\"]}, {\"cars_data_mpg\": [\"cylinders\"]}], \"average miles per gallon(mpg)\": [{\"cars_data\": [\"mpg\"]}, {\"cars_data_mpg\": [\"avg_mpg\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cylinders\" refers to the schema \"cars_data_mpg\".\"cylinders\", \"average miles per gallon(mpg)\" refers to the schema \"cars_data_mpg\".\"avg_mpg\"",
        "clear_ambiguity": "{\"cylinders\": {\"cars_data_mpg\": [\"cylinders\"]}, \"average miles per gallon(mpg)\": {\"cars_data_mpg\": [\"avg_mpg\"]}}",
        "gold_query": "select avg_mpg from cars_data_mpg where cylinders = 4"
    },
    {
        "index": 627,
        "db_id": "bike_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/bike_1/bike_1.sqlite",
        "question": "What is the average latitude and longitude in San Jose?",
        "schema_without_content": "trip : start_station_id , subscription_type , id , duration , end_date , start_station_name , start_date , bike_id , end_station_name , end_station_id , zip_code  | station_lat_long : max_lat , avg_lat , min_lat , min_long , sum_lat , avg_long , max_long , sum_long  | status : docks_available , station_id , bikes_available , time  | weather : max_gust_speed_mph , max_visibility_miles , mean_wind_speed_mph , mean_temperature_f , cloud_cover , events , mean_sea_level_pressure_inches , mean_dew_point_f , max_dew_point_f , mean_visibility_miles , max_humidity , zip_code , max_sea_level_pressure_inches , precipitation_inches , max_temperature_f , min_visibility_miles , min_humidity , min_temperature_f , mean_humidity , min_sea_level_pressure_inches , max_wind_speed_mph , date , min_dew_point_f , wind_dir_degrees  | station : installation_date , city , id , lat , name , long , dock_count ",
        "schema_with_content": "trip : start_station_id (31, 11, 62), subscription_type (\"Subscriber\", \"Customer\"), id (901495, 905399, 906015), duration (583, 791, 678), end_date (\"8/27/2015 6:58\", \"8/22/2015 11:43\", \"8/28/2015 22:21\"), start_station_name (\"Broadway St at Battery St\", \"Cowper at University\", \"Steuart at Market\"), start_date (\"8/28/2015 7:46\", \"8/29/2015 15:40\", \"8/22/2015 0:51\"), bike_id (370, 221, 95), end_station_name (\"5th at Howard\", \"Beale at Market\", \"Powell Street BART\"), end_station_id (57, 54, 64), zip_code (92084, 30338, 90210) | station_lat_long : max_lat (37.79728, 37.788975, 37.444521), avg_lat (37.425683899999996, 37.795001, 37.795001), min_lat (37.781039, 37.785299, 37.335885), min_long (-121.90178200000001, -121.88694299999999, -122.13777749999998), sum_lat (37.332808, 37.333954999999996, 37.784878000000006), avg_long (-122.39810800000001, -122.164759, -122.16309299999999), max_long (-121.88389099999999, -122.39810800000001, -122.394434), sum_long (-122.40512700000001, -121.888979, -122.39546999999999) | status : docks_available (8, 15, 5), station_id (70, 30, 6), bikes_available (3, 3, 16), time (\"2015-06-02 13:07:02\", \"2015-06-02 14:17:02\", \"2015-06-02 13:41:03\") | weather : max_gust_speed_mph (44, 21, 24), max_visibility_miles (20, 6, 16), mean_wind_speed_mph (19, 6, 19), mean_temperature_f (76, 40, 73), cloud_cover (\"\", 2, 3), events (\"Rain\", \"Rain\", \"Fog\"), mean_sea_level_pressure_inches (30.16, 29.74, 29.99), mean_dew_point_f (24, 47, 17), max_dew_point_f (34, 62, 20), mean_visibility_miles (15, 16, 9), max_humidity (96, 80, 42), zip_code (94063, 95113, 95113), max_sea_level_pressure_inches (29.77, 30.01, 29.74), precipitation_inches (0.45, 0.47, 0.55), max_temperature_f (68, 68, 66), min_visibility_miles (15, 2, 3), min_humidity (39, 88, 13), min_temperature_f (61, 52, 47), mean_humidity (24, 45, 88), min_sea_level_pressure_inches (\"\", 29.88, 30.17), max_wind_speed_mph (21, 36, 122), date (\"10/18/2013\", \"5/2/2014\", \"10/10/2014\"), min_dew_point_f (49, 48, 27), wind_dir_degrees (274, 344, 177) | station : installation_date (\"8/6/2013\", \"8/6/2013\", \"8/7/2013\"), city (\"San Francisco\", \"San Francisco\", \"San Jose\"), id (73, 4, 71), lat (37.795425, 37.484219, 37.774814), name (\"Howard at 2nd\", \"Rengstorff Avenue / California Street\", \"Evelyn Park and Ride\"), long (-122.16309299999999, -122.10833799999999, -122.40086200000002), dock_count (27, 19, 27)",
        "ambiguous_queries": [
            "select avg(lat), avg(long) from station where city = 'San Jose'",
            "select avg_lat, avg_long from station_lat_long where city = 'San Jose'"
        ],
        "gold_ambiguity": {
            "match": "{\"latitude\": [{\"station\": [\"city\"]}, {\"station_lat_long\": [\"city\"]}], \"longitude\": [{\"station\": [\"lat\"]}, {\"station_lat_long\": [\"avg_lat\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"latitude\" refers to the schema \"station\".\"city\", \"longitude\" refers to the schema \"station\".\"lat\"",
        "clear_ambiguity": "{\"latitude\": {\"station\": [\"city\"]}, \"longitude\": {\"station\": [\"lat\"]}}",
        "gold_query": "select avg(lat), avg(long) from station where city = 'San Jose'"
    },
    {
        "index": 628,
        "db_id": "world_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/world_1/world_1.sqlite",
        "question": "How long is the people's average life expectancy in Central Africa?",
        "schema_without_content": "countrylanguage : percentage , isofficial , language , countrycode  | country : gnpold , headofstate , code , governmentform , continent , name , population , region , gnp , indepyear , code2 , localname , lifeexpectancy , capital , surfacearea  | sqlite_sequence : seq , name  | country_lifeexpectancy : sum_lifeexpectancy , avg_lifeexpectancy , min_lifeexpectancy , max_lifeexpectancy  | city : population , district , id , name , countrycode ",
        "schema_with_content": "countrylanguage : percentage (81.2, 7.4, 50.0), isofficial (\"T\", \"F\"), language (\"Banda\", \"German\", \"Ambo\"), countrycode (\"DZA\", \"ARM\", \"TZA\") | country : gnpold (2559.0, 8670.0, 45914.0), headofstate (\"AntÃ³nio Mascarenhas Monteiro\", \"Yahya Jammeh\", \"Frederick Chiluba\"), code (\"KWT\", \"DZA\", \"GRC\"), governmentform (\"Territory of Australia\", \"Federation\", \"Emirate Federation\"), continent (\"South America\", \"Oceania\", \"Europe\"), name (\"Senegal\", \"Tonga\", \"Cuba\"), population (45611000, 75967000, 62565000), region (\"Micronesia\", \"Micronesia/Caribbean\", \"Central Africa\"), gnp (180375.0, 7526.0, 1694.0), indepyear (1973, 1953, 1971), code2 (\"GP\", \"ZA\", \"TZ\"), localname (\"Sri Lanka/Ilankai\", \"Cabo Verde\", \"HaÃ¯ti/Dayti\"), lifeexpectancy (55.0, 74.5, 37.2), capital (1780, 3337, 2695), surfacearea (65301.0, 462840.0, 4000.0) | sqlite_sequence : seq (4079), name (\"city\") | country_lifeexpectancy : sum_lifeexpectancy (69.5, 64.5, 73.1), avg_lifeexpectancy (55.0, 60.6, 49.2), min_lifeexpectancy (71.3, 69.3, 57.4), max_lifeexpectancy (49.8, 62.5, 75.7) | city : population (241910, 117258, 266569), district (\"Umbria\", \"Madhya Pradesh\", \"Pennsylvania\"), id (2426, 3269, 885), name (\"Rio Grande\", \"Drobeta-Turnu Severin\", \"NouÃ¢dhibou\"), countrycode (\"TUR\", \"GNQ\", \"PCN\")",
        "ambiguous_queries": [
            "select avg(lifeexpectancy) from country where region = 'Central Africa'",
            "select avg_lifeexpectancy from country_lifeexpectancy where region = 'Central Africa'"
        ],
        "gold_ambiguity": {
            "match": "{\"Africa\": [{\"country\": [\"region\"]}, {\"country_lifeexpectancy\": [\"region\"]}], \"average life expectancy\": [{\"country\": [\"lifeexpectancy\"]}, {\"country_lifeexpectancy\": [\"avg_lifeexpectancy\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Africa\" refers to the schema \"country\".\"region\", \"average life expectancy\" refers to the schema \"country\".\"lifeexpectancy\"",
        "clear_ambiguity": "{\"Africa\": {\"country\": [\"region\"]}, \"average life expectancy\": {\"country\": [\"lifeexpectancy\"]}}",
        "gold_query": "select avg(lifeexpectancy) from country where region = 'Central Africa'"
    },
    {
        "index": 629,
        "db_id": "station_weather",
        "ambig_type": "aggregate",
        "db_file": "aggregate/station_weather/station_weather.sqlite",
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "schema_without_content": "weekly_weather_station_low_temperature_precipitation : avg_low_temperature , max_precipitation , min_precipitation , max_low_temperature , avg_precipitation , network_name , sum_precipitation , min_low_temperature , sum_low_temperature  | route : station_id , train_id  | weekly_weather : wind_speed_mph , high_temperature , station_id , day_of_week , precipitation , low_temperature  | station : local_authority , id , services , network_name  | train : time , name , origin , interval , destination , id , train_number ",
        "schema_with_content": "weekly_weather_station_low_temperature_precipitation : avg_low_temperature (50, 56, 49), max_precipitation (10.0, 50.0, 30.0), min_precipitation (90.0, 90.0, 10.0), max_low_temperature (49, 55, 52), avg_precipitation (10.0, 70.0, 90.0), network_name (\"Croxley\", \"Chesham\", \"Brentwood\"), sum_precipitation (80.0, 30.0, 70.0), min_low_temperature (54, 46, 56), sum_low_temperature (56, 52, 50) | route : station_id (7, 2, 2), train_id (7, 3, 6) | weekly_weather : wind_speed_mph (14, 12, 17), high_temperature (66, 60, 57), station_id (10, 3, 3), day_of_week (\"Saturday\", \"Monday\", \"Monday\"), precipitation (50.0, 80.0, 70.0), low_temperature (54, 54, 50) | station : local_authority (\"Watford\", \"Watford\", \"Thurrock\"), id (7, 2, 2), services (\"c2c\", \"c2c\", \"London Overground and London Midland\"), network_name (\"Chesham\", \"Chafford Hundred\", \"Croxley\") | train : time (\"11:15\", \"16:59\", \"16:59\"), name (\"Parasuram Express\", \"Jayanthi Janatha Express\", \"Parasuram Express\"), origin (\"Madurai\", \"Mumbai\", \"Chennai\"), interval (\"Daily\"), destination (\"Quilon Junction\", \"Guruvayur\", \"Guruvayur\"), id (5, 2, 8), train_number (16526, 16127, 56700)",
        "ambiguous_queries": [
            "select max(t1.low_temperature), avg(t1.precipitation) from weekly_weather as t1 join station as t2 on t1.station_id = t2.id where t2.network_name = 'Amersham'",
            "select max_low_temperature, avg_precipitation from weekly_weather_station_low_temperature_precipitation where network_name = 'Amersham'"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum low temperature\": [{\"weekly_weather\": [\"low_temperature\"]}, {\"weekly_weather_station_low_temperature_precipitation\": [\"max_low_temperature\"]}], \"average precipitation\": [{\"weekly_weather\": [\"precipitation\"]}, {\"weekly_weather_station_low_temperature_precipitation\": [\"avg_precipitation\"]}], \"Amersham\": [{\"station\": [\"network_name\"]}, {\"weekly_weather_station_low_temperature_precipitation\": [\"network_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum low temperature\" refers to the schema \"weekly_weather_station_low_temperature_precipitation\".\"max_low_temperature\", \"average precipitation\" refers to the schema \"weekly_weather_station_low_temperature_precipitation\".\"avg_precipitation\", \"Amersham\" refers to the schema \"weekly_weather_station_low_temperature_precipitation\".\"network_name\"",
        "clear_ambiguity": "{\"maximum low temperature\": {\"weekly_weather_station_low_temperature_precipitation\": [\"max_low_temperature\"]}, \"average precipitation\": {\"weekly_weather_station_low_temperature_precipitation\": [\"avg_precipitation\"]}, \"Amersham\": {\"weekly_weather_station_low_temperature_precipitation\": [\"network_name\"]}}",
        "gold_query": "select max_low_temperature, avg_precipitation from weekly_weather_station_low_temperature_precipitation where network_name = 'Amersham'"
    },
    {
        "index": 630,
        "db_id": "soccer_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/soccer_1/soccer_1.sqlite",
        "question": "What is the maximum and minimum height of all players?",
        "schema_without_content": "country : name , id  | league : country_id , name , id  | player_attributes : curve , date , standing_tackle , gk_kicking , interceptions , penalties , reactions , gk_diving , id , defensive_work_rate , sprint_speed , stamina , ball_control , acceleration , preferred_foot , gk_positioning , overall_rating , dribbling , strength , agility , heading_accuracy , sliding_tackle , crossing , attacking_work_rate , player_fifa_api_id , potential , gk_handling , volleys , short_passing , gk_reflexes , long_shots , aggression , jumping , free_kick_accuracy , balance , long_passing , finishing , marking , player_api_id , positioning , vision , shot_power  | team_attributes : defenceaggressionclass , buildupplaypassing , defenceteamwidthclass , chancecreationpassing , chancecreationcrossingclass , defencepressureclass , team_api_id , buildupplayspeedclass , chancecreationpassingclass , chancecreationcrossing , buildupplayspeed , buildupplaypassingclass , defencepressure , defencedefenderlineclass , buildupplaypositioningclass , date , buildupplaydribbling , chancecreationshooting , defenceteamwidth , team_fifa_api_id , buildupplaydribblingclass , defenceaggression , chancecreationpositioningclass , id , chancecreationshootingclass  | sqlite_sequence : name , seq  | player_weight : min_weight , max_weight , avg_weight , sum_weight  | player : player_fifa_api_id , id , height , birthday , player_api_id , player_name , weight  | team : team_fifa_api_id , id , team_short_name , team_long_name , team_api_id ",
        "schema_with_content": "country : name (\"Germany\", \"Spain\", \"Scotland\"), id (24558, 21518, 1729) | league : country_id (17642, 19694, 1), name (\"France Ligue 1\", \"Spain LIGA BBVA\", \"Poland Ekstraklasa\"), id (1, 15722, 17642) | player_attributes : curve (85, 8, 59), date (\"2016-03-10 00:00:00\", \"2011-02-22 00:00:00\", \"2015-04-10 00:00:00\"), standing_tackle (12, 14, 95), gk_kicking (77, 86, 17), interceptions (26, 17, 25), penalties (23, 74, 88), reactions (31, 62, 85), gk_diving (19, 59, 85), id (162596, 97015, 117646), defensive_work_rate (\"9\", \"o\", None), sprint_speed (32, 42, 45), stamina (38, 82, 89), ball_control (81, 69, 52), acceleration (25, 20, 33), preferred_foot (\"right\", \"left\", None), gk_positioning (9, 88, 10), overall_rating (45, 81, 38), dribbling (7, 47, 95), strength (84, 51, 29), agility (86, 53, 31), heading_accuracy (38, 81, 72), sliding_tackle (3, 38, 70), crossing (70, 15, 48), attacking_work_rate (\"y\", \"y\", \"None\"), player_fifa_api_id (198710, 229260, 187514), potential (79, 93, 47), gk_handling (59, 67, 90), volleys (33, 68, 93), short_passing (54, 53, 96), gk_reflexes (4, 70, 93), long_shots (40, 41, 90), aggression (76, 32, 50), jumping (62, 35, 46), free_kick_accuracy (71, 72, 20), balance (69, 18, 89), long_passing (22, 7, 72), finishing (24, 18, 64), marking (27, 40, 75), player_api_id (93453, 159465, 40659), positioning (27, 40, 8), vision (69, 15, 8), shot_power (60, 67, 45) | team_attributes : defenceaggressionclass (\"Press\", \"Double\", \"Contain\"), buildupplaypassing (41, 63, 43), defenceteamwidthclass (\"Normal\", \"Wide\", \"Narrow\"), chancecreationpassing (44, 62, 76), chancecreationcrossingclass (\"Normal\", \"Lots\", \"Little\"), defencepressureclass (\"Medium\", \"Deep\", \"High\"), team_api_id (9868, 9869, 7842), buildupplayspeedclass (\"Balanced\", \"Fast\", \"Slow\"), chancecreationpassingclass (\"Normal\", \"Risky\", \"Safe\"), chancecreationcrossing (60, 33, 46), buildupplayspeed (40, 67, 42), buildupplaypassingclass (\"Mixed\", \"Long\", \"Short\"), defencepressure (60, 25, 37), defencedefenderlineclass (\"Cover\", \"Offside Trap\"), buildupplaypositioningclass (\"Organised\", \"Free Form\"), date (\"2014-09-19 00:00:00\", \"2013-09-20 00:00:00\", \"2014-09-19 00:00:00\"), buildupplaydribbling (41, 44, 33), chancecreationshooting (46, 33, 32), defenceteamwidth (64, 67, 43), team_fifa_api_id (378, 100741, 111082), buildupplaydribblingclass (\"Little\", \"Normal\", \"Lots\"), defenceaggression (24, 68, 47), chancecreationpositioningclass (\"Organised\", \"Free Form\"), id (623, 1387, 809), chancecreationshootingclass (\"Normal\", \"Lots\", \"Little\") | sqlite_sequence : name (\"Country\", \"Player\", \"Country\"), seq (183978, 11075, 11075) | player_weight : min_weight (218, 174, 170), max_weight (170, 168, 130), avg_weight (121, 130, 163), sum_weight (168, 207, 141) | player : player_fifa_api_id (156124, 144054, 178043), id (2440, 9354, 7964), height (187.96, 195.58, 172.72), birthday (\"1973-08-17 00:00:00\", \"1982-06-24 00:00:00\", \"1976-07-07 00:00:00\"), player_api_id (479217, 295212, 43006), player_name (\"Tijani Belaid\", \"Luca Antonini\", \"Florent Hadergjonaj\"), weight (216, 227, 126) | team : team_fifa_api_id (571, 110364, 467), id (31443, 3476, 15621), team_short_name (\"RKC\", \"AJA\", \"ETI\"), team_long_name (\"VfL Wolfsburg\", \"Eintracht Braunschweig\", \"RSC Anderlecht\"), team_api_id (10233, 8429, 8534)",
        "ambiguous_queries": [
            "select max(weight), min(weight) from player",
            "select max_weight, min_weight from player_weight"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"player\": [\"weight\"]}, {\"player_weight\": [\"max_weight\"]}], \"minimum\": [{\"player\": [\"weight\"]}, {\"player_weight\": [\"min_weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"player\".\"weight\", \"minimum\" refers to the schema \"player\".\"weight\"",
        "clear_ambiguity": "{\"maximum\": {\"player\": [\"weight\"]}, \"minimum\": {\"player\": [\"weight\"]}}",
        "gold_query": "select max(weight), min(weight) from player"
    },
    {
        "index": 631,
        "db_id": "news_report",
        "ambig_type": "aggregate",
        "db_file": "aggregate/news_report/news_report.sqlite",
        "question": "what are the average and maximum attendances of all events?",
        "schema_without_content": "news_report : work_type , event_id , journalist_id  | event : date , event_id , event_attendance , name , venue  | event_event_attendance : min_event_attendance , max_event_attendance , avg_event_attendance , sum_event_attendance  | journalist : age , journalist_id , years_working , nationality , name ",
        "schema_with_content": "news_report : work_type (\"Screening\", \"Music\", \"Host\"), event_id (3, 3, 4), journalist_id (8, 1, 6) | event : date (\"9 April 2014\", \"7 October 2010\", \"7 October 2010\"), event_id (5, 5, 1), event_attendance (6650, 1675, 225), name (\"Global Awarding\", \"Olympia Games Openning\", \"Government Hearing\"), venue (\"Motagua\", \"Marathon\", \"Platense\") | event_event_attendance : min_event_attendance (369, 225, 369), max_event_attendance (2356, 225, 1675), avg_event_attendance (6650, 369, 6650), sum_event_attendance (225, 225, 1675) | journalist : age (\"43\", \"43\", \"43\"), journalist_id (11, 8, 10), years_working (21, 21, 5), nationality (\"England\", \"Wales\", \"Northern Ireland\"), name (\"Jackie Waring\", \"Tom Briggs\", \"George Gilchrist\")",
        "ambiguous_queries": [
            "select avg(event_attendance), max(event_attendance) from event",
            "select avg_event_attendance, max_event_attendance from event_event_attendance"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"event\": [\"event_attendance\"]}, {\"event_event_attendance\": [\"avg_event_attendance\"]}], \"maximum\": [{\"event\": [\"event_attendance\"]}, {\"event_event_attendance\": [\"max_event_attendance\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"event\".\"event_attendance\", \"maximum\" refers to the schema \"event\".\"event_attendance\"",
        "clear_ambiguity": "{\"average\": {\"event\": [\"event_attendance\"]}, \"maximum\": {\"event\": [\"event_attendance\"]}}",
        "gold_query": "select avg(event_attendance), max(event_attendance) from event"
    },
    {
        "index": 632,
        "db_id": "concert_singer",
        "ambig_type": "aggregate",
        "db_file": "aggregate/concert_singer/concert_singer.sqlite",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "schema_without_content": "stadium : lowest , average , name , highest , stadium_id , location , capacity  | singer : age , country , song_release_year , is_male , name , song_name , singer_id  | singer_age : avg_age , sum_age , max_age , min_age  | singer_in_concert : singer_id , concert_id  | concert : year , concert_id , stadium_id , theme , concert_name ",
        "schema_with_content": "stadium : lowest (400, 533, 1294), average (1477, 864, 2106), name (\"Gayfield Park\", \"Somerset Park\", \"Balmoor\"), highest (921, 1763, 921), stadium_id (1, 5, 7), location (\"Ayr United\", \"Raith Rovers\", \"Queen's Park\"), capacity (4000, 52500, 2000) | singer : age (43, 43, 41), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2003\", \"2008\", \"2013\"), is_male (\"F\", \"T\"), name (\"Joe Sharp\", \"Justin Brown\", \"John Nizinik\"), song_name (\"Love\", \"Gentleman\", \"Dangerous\"), singer_id (5, 4, 6) | singer_age : avg_age (29, 52, 41), sum_age (41, 43, 41), max_age (52, 41, 41), min_age (29, 29, 52) | singer_in_concert : singer_id (\"4\", \"5\", \"4\"), concert_id (2, 5, 6) | concert : year (\"2014\", \"2015\"), concert_id (1, 1, 1), stadium_id (\"2\", \"7\", \"9\"), theme (\"Free choice 2\", \"Party All Night\", \"Happy Tonight\"), concert_name (\"Auditions\", \"Auditions\", \"Auditions\")",
        "ambiguous_queries": [
            "select avg(age), min(age), max(age) from singer where country = 'France'",
            "select avg_age, min_age, max_age from singer_age where country = 'France'"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"singer\": [\"age\"]}, {\"singer_age\": [\"avg_age\"]}], \"maximum\": [{\"singer\": [\"age\"]}, {\"singer_age\": [\"max_age\"]}], \"minimum\": [{\"singer\": [\"age\"]}, {\"singer_age\": [\"min_age\"]}], \"French\": [{\"singer\": [\"country\"]}, {\"singer_age\": [\"country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"singer\".\"age\", \"maximum\" refers to the schema \"singer\".\"age\", \"minimum\" refers to the schema \"singer\".\"age\", \"French\" refers to the schema \"singer\".\"country\"",
        "clear_ambiguity": "{\"average\": {\"singer\": [\"age\"]}, \"maximum\": {\"singer\": [\"age\"]}, \"minimum\": {\"singer\": [\"age\"]}, \"French\": {\"singer\": [\"country\"]}}",
        "gold_query": "select avg(age), min(age), max(age) from singer where country = 'France'"
    },
    {
        "index": 633,
        "db_id": "network_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/network_2/network_2.sqlite",
        "question": "How old is the youngest person for each job?",
        "schema_without_content": "person_age : avg_age , max_age , sum_age , job , min_age  | personfriend : year , friend , name  | person : gender , city , name , age , job ",
        "schema_with_content": "person_age : avg_age (26, 45, 26), max_age (45, 25, 25), sum_age (35, 45, 26), job (\"student\", \"engineer\", \"doctor\"), min_age (45, 25, 26) | personfriend : year (12, 12, 10), friend (\"Dan\", \"Bob\", \"Dan\"), name (\"Alice\", \"Zach\", \"Bob\") | person : gender (\"female\", \"male\"), city (\"new york city\", \"austin\", \"chicago\"), name (\"Bob\", \"Bob\", \"Alice\"), age (35, 26, 45), job (\"student\", \"engineer\", \"doctor\")",
        "ambiguous_queries": [
            "select min(age), job from person group by job",
            "select min_age, job from person_age"
        ],
        "gold_ambiguity": {
            "match": "{\"job\": [{\"person\": [\"job\"]}, {\"person_age\": [\"job\"]}], \"youngest\": [{\"person\": [\"age\"]}, {\"person_age\": [\"min_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"job\" refers to the schema \"person_age\".\"job\", \"youngest\" refers to the schema \"person_age\".\"min_age\"",
        "clear_ambiguity": "{\"job\": {\"person_age\": [\"job\"]}, \"youngest\": {\"person_age\": [\"min_age\"]}}",
        "gold_query": "select min_age, job from person_age"
    },
    {
        "index": 634,
        "db_id": "inn_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/inn_1/inn_1.sqlite",
        "question": "Find the total number of king beds available.",
        "schema_without_content": "rooms : maxoccupancy , roomname , decor , bedtype , beds , baseprice , roomid  | reservations : lastname , code , rate , room , kids , firstname , adults , checkout , checkin  | rooms_beds : min_beds , sum_beds , max_beds , avg_beds ",
        "schema_with_content": "rooms : maxoccupancy (2, 4), roomname (\"Abscond or bolster\", \"Abscond or bolster\", \"Riddle to exculpate\"), decor (\"modern\", \"traditional\", \"rustic\"), bedtype (\"King\", \"Queen\", \"Double\"), beds (1, 2), baseprice (100, 175, 75), roomid (\"HBB\", \"CAS\", \"TAA\") | reservations : lastname (\"LUANGSINGOTHA\", \"BIERWAGEN\", \"ALWINE\"), code (12631, 14834, 69654), rate (106.25, 127.5, 86.25), room (\"RTE\", \"HBB\", \"CAS\"), kids (2, 1, 0), firstname (\"GARY\", \"WELDON\", \"VANDA\"), adults (2, 2, 4), checkout (\"15-APR-10\", \"14-JAN-10\", \"03-AUG-10\"), checkin (\"31-JAN-10\", \"27-DEC-10\", \"01-MAR-10\") | rooms_beds : min_beds (1, 2), sum_beds (1, 2), max_beds (1, 2), avg_beds (1, 2)",
        "ambiguous_queries": [
            "select sum(beds) from rooms where bedtype = 'King'",
            "select sum_beds from rooms_beds where bedtype = 'King'"
        ],
        "gold_ambiguity": {
            "match": "{\"king beds\": [{\"rooms\": [\"bedtype\"]}, {\"rooms_beds\": [\"bedtype\"]}], \"total number\": [{\"rooms\": [\"beds\"]}, {\"rooms_beds\": [\"sum_beds\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"king beds\" refers to the schema \"rooms\".\"bedtype\", \"total number\" refers to the schema \"rooms\".\"beds\"",
        "clear_ambiguity": "{\"king beds\": {\"rooms\": [\"bedtype\"]}, \"total number\": {\"rooms\": [\"beds\"]}}",
        "gold_query": "select sum(beds) from rooms where bedtype = 'King'"
    },
    {
        "index": 635,
        "db_id": "poker_player",
        "ambig_type": "aggregate",
        "db_file": "aggregate/poker_player/poker_player.sqlite",
        "question": "Return the average earnings across all poker players.",
        "schema_without_content": "poker_player : poker_player_id , best_finish , earnings , final_table_made , money_rank , people_id  | poker_player_earnings : min_earnings , sum_earnings , max_earnings , avg_earnings  | people : name , height , birth_date , nationality , people_id ",
        "schema_with_content": "poker_player : poker_player_id (1, 4, 3), best_finish (1.0, 2.0, 3.0), earnings (189233.0, 476090.0, 476090.0), final_table_made (26.0, 21.0, 10.0), money_rank (68.0, 154.0, 166.0), people_id (7, 2, 7) | poker_player_earnings : min_earnings (142800.0, 104871.0, 476090.0), sum_earnings (476090.0, 142800.0, 476090.0), max_earnings (142800.0, 596462.0, 104871.0), avg_earnings (476090.0, 142800.0, 596462.0) | people : name (\"Yevgeni Sivozhelez\", \"Aleksey Ostapenko\", \"Teodor Salparov\"), height (196.0, 205.0, 193.0), birth_date (\"May 26, 1986\", \"April 17, 1987\", \"January 22, 1987\"), nationality (\"Russia\", \"Bulgaria\"), people_id (4, 1, 1)",
        "ambiguous_queries": [
            "select avg(earnings) from poker_player",
            "select avg_earnings from poker_player_earnings"
        ],
        "gold_ambiguity": {
            "match": "{\"average earnings\": [{\"poker_player\": [\"earnings\"]}, {\"poker_player_earnings\": [\"avg_earnings\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average earnings\" refers to the schema \"poker_player\".\"earnings\"",
        "clear_ambiguity": "{\"average earnings\": {\"poker_player\": [\"earnings\"]}}",
        "gold_query": "select avg(earnings) from poker_player"
    },
    {
        "index": 636,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What is the average rating and resolution of all bangla songs?",
        "schema_without_content": "song : languages , rating , releasedate , country , resolution , f_id , song_name , artist_name , genre_is  | artist : artist_name , preferred_genre , country , gender  | files : duration , file_size , formats , artist_name , f_id  | genre : most_popular_in , rating , g_name  | song_rating_resolution : sum_rating , sum_resolution , min_rating , max_rating , max_resolution , avg_resolution , avg_rating , min_resolution ",
        "schema_with_content": "song : languages (\"bangla\", \"english\"), rating (6, 5, 8), releasedate (\"7-APR-2001\", \"7-APR-2001\", \"28-AUG-2011\"), country (\"UK\", \"India\", \"USA\"), resolution (512, 320, 720), f_id (2, 1, 3), song_name (\"Tumi robe nirobe\", \"Tumi robe nirobe\", \"Just beat it\"), artist_name (\"Enrique\", \"Topu\", \"Topu\"), genre_is (\"pop\", \"pop\", \"pop\") | artist : artist_name (\"Michel\", \"Prity\", \"Michel\"), preferred_genre (\"modern\", \"blues\", \"tagore\"), country (\"India\", \"India\", \"UK\"), gender (\"Male\", \"Female\") | files : duration (\"2:56\", \"4:30\", \"5:23\"), file_size (\"5.10 MB\", \"3.69 MB\", \"3.78 MB\"), formats (\"mp4\", \"mp3\"), artist_name (\"Michel\", \"Prity\", \"Michel\"), f_id (5, 5, 2) | genre : most_popular_in (\"Sylhet,Chittagong,Kustia\", \"Sylhet,Chittagong,Kustia\", \"Bangladesh\"), rating (\"8\", \"7\", \"9\"), g_name (\"pop\", \"pop\", \"pop\") | song_rating_resolution : sum_rating (10, 8, 8), sum_resolution (1080, 720, 720), min_rating (10, 10, 7), max_rating (6, 5, 6), max_resolution (320, 320, 1080), avg_resolution (720, 1080, 720), avg_rating (6, 7, 10), min_resolution (720, 320, 1080)",
        "ambiguous_queries": [
            "select avg(rating), avg(resolution) from song where languages = 'bangla'",
            "select avg_rating, avg_resolution from song_rating_resolution where languages = 'bangla'"
        ],
        "gold_ambiguity": {
            "match": "{\"average rating\": [{\"song\": [\"rating\"]}, {\"song_rating_resolution\": [\"avg_rating\"]}], \"resolution\": [{\"song\": [\"resolution\"]}, {\"song_rating_resolution\": [\"avg_resolution\"]}], \"bangla\": [{\"song\": [\"languages\"]}, {\"song_rating_resolution\": [\"languages\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average rating\" refers to the schema \"song_rating_resolution\".\"avg_rating\", \"resolution\" refers to the schema \"song_rating_resolution\".\"avg_resolution\", \"bangla\" refers to the schema \"song_rating_resolution\".\"languages\"",
        "clear_ambiguity": "{\"average rating\": {\"song_rating_resolution\": [\"avg_rating\"]}, \"resolution\": {\"song_rating_resolution\": [\"avg_resolution\"]}, \"bangla\": {\"song_rating_resolution\": [\"languages\"]}}",
        "gold_query": "select avg_rating, avg_resolution from song_rating_resolution where languages = 'bangla'"
    },
    {
        "index": 637,
        "db_id": "college_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_1/college_1.sqlite",
        "question": "Which department has the highest average student GPA, and what is the average gpa?",
        "schema_without_content": "professor : prof_high_degree , emp_num , dept_code , prof_extension , prof_office  | enroll : stu_num , enroll_grade , class_code  | student : stu_hrs , stu_num , dept_code , stu_transfer , stu_lname , stu_phone , stu_dob , stu_class , prof_num , stu_fname , stu_gpa , stu_init  | course : dept_code , crs_code , crs_credit , crs_description  | employee : emp_hiredate , emp_initial , emp_jobcode , emp_dob , emp_num , emp_lname , emp_fname  | student_department_stu_gpa : sum_stu_gpa , avg_stu_gpa , min_stu_gpa , max_stu_gpa , dept_name  | class : class_code , class_section , crs_code , class_room , class_time , prof_num  | department : dept_code , school_code , emp_num , dept_name , dept_address , dept_extension ",
        "schema_with_content": "professor : prof_high_degree (\"MA\", \"MBA\", \"Ph.D.\"), emp_num (425, 110, 103), dept_code (\"PSYCH\", \"SOC\", \"MATH\"), prof_extension (\"4016\", \"3412\", \"4436\"), prof_office (\"KLR 211\", \"KLR 126\", \"DRE 156\") | enroll : stu_num (321452, 324257), enroll_grade (\"C\", \"B\", \"A\"), class_code (\"10014\", \"10018\", \"10021\") | student : stu_hrs (114, 102, 66), stu_num (321452, 324291, 324273), dept_code (\"EDU\", \"BIOL\", \"BIOL\"), stu_transfer (0, 1), stu_lname (\"Katinga\", \"Bowser\", \"Katinga\"), stu_phone (\"2114\", \"2231\", \"2231\"), stu_dob (\"1981-11-15\", \"1979-10-21\", \"1976-9-16\"), stu_class (\"Sr\", \"Fr\", \"Jr\"), prof_num (228, 205, 205), stu_fname (\"Anne\", \"Juliette\", \"William\"), stu_gpa (3.27, 2.26, 3.87), stu_init (\"\", \"P\", \"T\") | course : dept_code (\"ACCT\", \"CIS\"), crs_code (\"CIS-420\", \"QM-362\", \"CIS-220\"), crs_credit (3.0, 4.0), crs_description (\"Intro. to Microcomputing\", \"Intro. to Microcomputing\", \"Database Design and Implementation\") | employee : emp_hiredate (\"1991-7-1\", \"1984-8-1\", \"1994-10-1\"), emp_initial (\"\", \"D\", \"L\"), emp_jobcode (\"CLRK\", \"PROF\", \"CLRK\"), emp_dob (\"1943-9-13\", \"1962-10-2\", \"1962-10-2\"), emp_num (335, 425, 166), emp_lname (\"Herndon\", \"Stoddard\", \"Edwards\"), emp_fname (\"Julian\", \"Rosemary\", \"Todd\") | student_department_stu_gpa : sum_stu_gpa (2.26, 3.27, 2.11), avg_stu_gpa (3.87, 2.92, 2.26), min_stu_gpa (2.92, 3.27, 3.27), max_stu_gpa (2.11, 3.27, 2.92), dept_name (\"Sociology\", \"Economics/Finance\", \"Mathematics\") | class : class_code (\"10022\", \"10022\", \"10014\"), class_section (\"1\", \"2\", \"3\"), crs_code (\"CIS-420\", \"QM-261\", \"CIS-220\"), class_room (\"KLR209\", \"BUS311\", \"BUS311\"), class_time (\"TTh 2:30-3:45 p.m.\", \"MWF 11:00-11:50 a.m.\", \"MWF 11:00-11:50 a.m.\"), prof_num (301, 342, 301) | department : dept_code (\"ART\", \"BIOL\", \"MKT/MGT\"), school_code (\"BUS\", \"A&SCI\"), emp_num (209, 299, 114), dept_name (\"Sociology\", \"Sociology\", \"Marketing/Management\"), dept_address (\"AAK 297, Box 438\", \"AAK 194, Box 422\", \"KLR 333, Box 56\"), dept_extension (\"1867\", \"4234\", \"3126\")",
        "ambiguous_queries": [
            "select t2.dept_name, avg(t1.stu_gpa) from student as t1 join department as t2 on t1.dept_code = t2.dept_code group by t1.dept_code order by avg(t1.stu_gpa) desc limit 1",
            "select dept_name, avg_stu_gpa from student_department_stu_gpa"
        ],
        "gold_ambiguity": {
            "match": "{\"average student GPA\": [{\"student\": [\"stu_gpa\"]}, {\"student_department_stu_gpa\": [\"avg_stu_gpa\"]}], \"department\": [{\"department\": [\"dept_name\"]}, {\"student_department_stu_gpa\": [\"dept_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average student GPA\" refers to the schema \"student_department_stu_gpa\".\"avg_stu_gpa\", \"department\" refers to the schema \"student_department_stu_gpa\".\"dept_name\"",
        "clear_ambiguity": "{\"average student GPA\": {\"student_department_stu_gpa\": [\"avg_stu_gpa\"]}, \"department\": {\"student_department_stu_gpa\": [\"dept_name\"]}}",
        "gold_query": "select dept_name, avg_stu_gpa from student_department_stu_gpa"
    },
    {
        "index": 638,
        "db_id": "wine_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/wine_1/wine_1.sqlite",
        "question": "What are the average price and score of wines grouped by appelation?",
        "schema_without_content": "wine_price_score : min_score , max_price , sum_price , min_price , sum_score , avg_score , appelation , max_score , avg_price  | appellations : isava , state , area , no , county , appelation  | grapes : id , color , grape  | wine : name , winery , drink , state , cases , year , appelation , no , grape , price , score ",
        "schema_with_content": "wine_price_score : min_score (91, 98, 89), max_price (39, 33, 21), sum_price (12, 24, 115), min_price (43, 48, 13), sum_score (85, 95, 85), avg_score (84, 89, 95), appelation (\"Chalk Hill\", \"San Luis Obispo County\", \"North Coast\"), max_score (86, 80, 90), avg_price (17, 41, 39) | appellations : isava (\"Yes\", \"No\"), state (\"California\"), area (\"N/A\", \"California\", \"Central Coast\"), no (1, 10, 25), county (\"Lake\", \"Solano\", \"Amador\"), appelation (\"Santa Barbara County\", \"Rutherford\", \"Santa Ynez Valley\") | grapes : id (19, 8, 11), color (\"Red\", \"White\"), grape (\"Cabernet Franc\", \"Malbec\", \"Sangiovese\") | wine : name (\"Tomahawk Vineyard\", \"Bailey Vineyard\", \"Romeo\"), winery (\"El Molino\", \"Robert Mondavi\", \"Keller\"), drink (\"2001\", \"now\", \"now\"), state (\"California\"), cases (190, 239, 30000), year (2004, 2006, 2006), appelation (\"Calaveras County\", \"Rockpile\", \"Spring Mountain District\"), no (310, 350, 78), grape (\"Malbec\", \"Zinfandel\", \"Syrah\"), price (16, 30, 29), score (86, 91, 80)",
        "ambiguous_queries": [
            "select avg(price), avg(score), appelation from wine group by appelation",
            "select avg_price, avg_score, appelation from wine_price_score"
        ],
        "gold_ambiguity": {
            "match": "{\"appelation\": [{\"wine\": [\"appelation\"]}, {\"wine_price_score\": [\"appelation\"]}], \"price\": [{\"wine\": [\"price\"]}, {\"wine_price_score\": [\"avg_price\"]}], \"score\": [{\"wine\": [\"score\"]}, {\"wine_price_score\": [\"avg_score\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"appelation\" refers to the schema \"wine_price_score\".\"appelation\", \"price\" refers to the schema \"wine_price_score\".\"avg_price\", \"score\" refers to the schema \"wine_price_score\".\"avg_score\"",
        "clear_ambiguity": "{\"appelation\": {\"wine_price_score\": [\"appelation\"]}, \"price\": {\"wine_price_score\": [\"avg_price\"]}, \"score\": {\"wine_price_score\": [\"avg_score\"]}}",
        "gold_query": "select avg_price, avg_score, appelation from wine_price_score"
    },
    {
        "index": 639,
        "db_id": "theme_gallery",
        "ambig_type": "aggregate",
        "db_file": "aggregate/theme_gallery/theme_gallery.sqlite",
        "question": "Return the average and minimum ages across artists from the United States.",
        "schema_without_content": "artist_age : avg_age , max_age , sum_age , min_age  | artist : name , age , year_join , artist_id , country  | exhibition_record : attendance , date , exhibition_id  | exhibition : year , exhibition_id , ticket_price , theme , artist_id ",
        "schema_with_content": "artist_age : avg_age (46, 45, 46), max_age (48, 45, 50), sum_age (47, 57, 48), min_age (50, 57, 46) | artist : name (\"Jeff Sluman\", \"Mark Brooks\", \"Mark Brooks\"), age (46, 48, 57), year_join (1993, 1998, 1998), artist_id (3, 1, 5), country (\"Fiji\", \"United States\", \"Zimbabwe\") | exhibition_record : attendance (1098, 13142, 1134), date (\"December 2\", \"December 5\", \"December 9\"), exhibition_id (1, 1, 5) | exhibition : year (2005, 2009, 2004), exhibition_id (3, 5, 4), ticket_price (16.95, 14.95, 14.95), theme (\"Christmas stocking\", \"Christmas Tree\", \"Christmas Tree\"), artist_id (4, 2, 3)",
        "ambiguous_queries": [
            "select avg(age), min(age) from artist where country = 'United States'",
            "select avg_age, min_age from artist_age where country = 'United States'"
        ],
        "gold_ambiguity": {
            "match": "{\"United States\": [{\"artist\": [\"country\"]}, {\"artist_age\": [\"country\"]}], \"average\": [{\"artist\": [\"age\"]}, {\"artist_age\": [\"avg_age\"]}], \"minimum\": [{\"artist\": [\"age\"]}, {\"artist_age\": [\"min_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"United States\" refers to the schema \"artist_age\".\"country\", \"average\" refers to the schema \"artist_age\".\"avg_age\", \"minimum\" refers to the schema \"artist_age\".\"min_age\"",
        "clear_ambiguity": "{\"United States\": {\"artist_age\": [\"country\"]}, \"average\": {\"artist_age\": [\"avg_age\"]}, \"minimum\": {\"artist_age\": [\"min_age\"]}}",
        "gold_query": "select avg_age, min_age from artist_age where country = 'United States'"
    },
    {
        "index": 640,
        "db_id": "chinook_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/chinook_1/chinook_1.sqlite",
        "question": "What is the average unit price of all the tracks?",
        "schema_without_content": "playlisttrack : playlistid , trackid  | invoiceline : quantity , trackid , invoiceid , unitprice , invoicelineid  | track : genreid , bytes , milliseconds , trackid , composer , albumid , name , unitprice , mediatypeid  | mediatype : mediatypeid , name  | album : title , albumid , artistid  | genre : name , genreid  | playlist : playlistid , name  | customer : postalcode , company , email , phone  332-3232\", \"+49 030 2141444\", \"+48 22 828 37 39\", address , fax  882-8081\", \"+1  221-4679\", firstname , city , supportrepid , lastname , state , country , customerid  | invoice : billingcity , billingaddress , total , billingstate , customerid , billingpostalcode , invoiceid , invoicedate , billingcountry  | employee : postalcode , birthdate , title , employeeid , firstname , reportsto , email , address , fax  246-9899\", \"+1  428-3457\", \"1  836-9543\", hiredate , phone  836-9987\", \"+1  467-3351\", \"+1  428-9482\", lastname , city , country , state  | track_unitprice : avg_unitprice , sum_unitprice , min_unitprice , max_unitprice  | artist : name , artistid ",
        "schema_with_content": "playlisttrack : playlistid (17, 13, 16), trackid (1427, 202, 1153) | invoiceline : quantity (1), trackid (831, 655, 2344), invoiceid (18, 219, 168), unitprice (0.99, 1.99), invoicelineid (866, 46, 623) | track : genreid (7, 24, 18), bytes (7792604, 8147224, 5195776), milliseconds (619467, 330684, 512339), trackid (269, 3129, 3489), composer (\"Adrian Smith/Bruce Dickinson/Steve Harris\", \"Delroy \"Chris\" Cooper, Donovan Jackson, Earl Chinna Smith, Felix Howard, Gordon Williams, Luke Smith, Paul Watson & Wilburn Squiddley Cole\", \"Gonzaga Jr.\"), albumid (15, 180, 102), name (\"Wild Hearted Son\", \"Blood On The World's Hands\", \"I've Got You Under My Skin\"), unitprice (0.99, 1.99), mediatypeid (2, 2, 4) | mediatype : mediatypeid (4, 2, 3), name (\"Protected MPEG-4 video file\", \"Protected AAC audio file\", \"AAC audio file\") | album : title (\"For Those About To Rock We Salute You\", \"The Doors\", \"Every Kind of Light\"), albumid (346, 71, 208), artistid (244, 105, 231) | genre : name (\"Classical\", \"Electronica/Dance\", \"Soundtrack\"), genreid (23, 19, 11) | playlist : playlistid (11, 4, 6), name (\"Heavy Metal Classic\", \"Classical 101 - Deep Cuts\", \"Music Videos\") | customer : postalcode (\"89503\", \"T6G 2C7\", \"11230\"), company (\"Google Inc.\", \"Woodstock Discos\", \"Woodstock Discos\"), email (\"nschroder@surfeu.de\", \"hleacock@gmail.com\", \"nschroder@surfeu.de\"), phone (\"+1 (312) 332-3232\", \"+49 030 2141444\", \"+48 22 828 37 39\"), address (\"RilskÃ¡ 3174/6\", \"RotenturmstraÃe 4, 1010 Innere Stadt\", \"202 Hoxton Street\"), fax (None, \"+1 (425) 882-8081\", \"+1 (212) 221-4679\"), firstname (\"Tim\", \"Lucas\", \"Ladislav\"), city (\"Amsterdam\", \"Paris\", \"Helsinki\"), supportrepid (3, 4, 5), lastname (\"Gruber\", \"WÃ³jcik\", \"Rojas\"), state (\"AZ\", \"FL\", \"MA\"), country (\"Italy\", \"Spain\", \"Norway\"), customerid (37, 7, 29) | invoice : billingcity (\"Edmonton\", \"Madison\", \"Madrid\"), billingaddress (\"1033 N Park Ave\", \"2211 W Berry Street\", \"421 Bourke Street\"), total (7.96, 7.96, 16.86), billingstate (\"NS\", \"UT\", \"RM\"), customerid (12, 10, 22), billingpostalcode (\"53703\", \"75009\", \"1010\"), invoiceid (254, 378, 106), invoicedate (\"2011-05-06 00:00:00\", \"2013-08-12 00:00:00\", \"2012-10-29 00:00:00\"), billingcountry (\"Norway\", \"Canada\", \"Czech Republic\") | employee : postalcode (\"T2P 2T3\", \"T1K 5N8\", \"T3B 0C5\"), birthdate (\"1973-07-01 00:00:00\", \"1973-07-01 00:00:00\", \"1962-02-18 00:00:00\"), title (\"IT Staff\", \"IT Staff\", \"Sales Support Agent\"), employeeid (4, 2, 2), firstname (\"Robert\", \"Margaret\", \"Margaret\"), reportsto (2, 1, None), email (\"steve@chinookcorp.com\", \"laura@chinookcorp.com\", \"margaret@chinookcorp.com\"), address (\"1111 6 Ave SW\", \"7727B 41 Ave\", \"683 10 Street SW\"), fax (\"+1 (403) 246-9899\", \"+1 (780) 428-3457\", \"1 (780) 836-9543\"), hiredate (\"2002-04-01 00:00:00\", \"2004-01-02 00:00:00\", \"2002-08-14 00:00:00\"), phone (\"1 (780) 836-9987\", \"+1 (403) 467-3351\", \"+1 (780) 428-9482\"), lastname (\"Peacock\", \"Adams\", \"Edwards\"), city (\"Edmonton\", \"Calgary\", \"Lethbridge\"), country (\"Canada\"), state (\"AB\") | track_unitprice : avg_unitprice (0.99, 1.99), sum_unitprice (0.99, 1.99), min_unitprice (0.99, 1.99), max_unitprice (0.99, 1.99) | artist : name (\"The Tea Party\", \"Sir Georg Solti, Sumi Jo & Wiener Philharmoniker\", \"Gerald Moore\"), artistid (17, 252, 228)",
        "ambiguous_queries": [
            "select avg(unitprice) from track",
            "select avg_unitprice from track_unitprice"
        ],
        "gold_ambiguity": {
            "match": "{\"average unit price\": [{\"track\": [\"unitprice\"]}, {\"track_unitprice\": [\"avg_unitprice\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average unit price\" refers to the schema \"track_unitprice\".\"avg_unitprice\"",
        "clear_ambiguity": "{\"average unit price\": {\"track_unitprice\": [\"avg_unitprice\"]}}",
        "gold_query": "select avg_unitprice from track_unitprice"
    },
    {
        "index": 641,
        "db_id": "party_host",
        "ambig_type": "aggregate",
        "db_file": "aggregate/party_host/party_host.sqlite",
        "question": "Compute the average number of hosts for parties.",
        "schema_without_content": "party : first_year , party_id , number_of_hosts , last_year , party_theme , location  | party_host : party_id , is_main_in_charge , host_id  | party_number_of_hosts : min_number_of_hosts , avg_number_of_hosts , max_number_of_hosts , sum_number_of_hosts  | host : name , age , nationality , host_id ",
        "schema_with_content": "party : first_year (\"2004\", \"2000\", \"2000\"), party_id (2, 8, 4), number_of_hosts (18, 4, 18), last_year (\"2007\", \"2001\", \"2007\"), party_theme (\"Houseqlassics\", \"QrimeTime\", \"Club Q-BASE\"), location (\"Hemkade 48 Zaandam\", \"Heineken Music Hall Amsterdam\", \"Various locations\") | party_host : party_id (1, 1, 6), is_main_in_charge (\"T\", \"F\"), host_id (7, 7, 1) | party_number_of_hosts : min_number_of_hosts (5, 31, 6), avg_number_of_hosts (6, 7, 31), max_number_of_hosts (31, 31, 5), sum_number_of_hosts (7, 31, 31) | host : name (\"Hubert Davis\", \"Carlos Delfino\", \"Lloyd Daniels\"), age (\"40\", \"60\", \"31\"), nationality (\"United States\", \"Hungary\", \"Argentina\"), host_id (5, 3, 2)",
        "ambiguous_queries": [
            "select avg(number_of_hosts) from party",
            "select avg_number_of_hosts from party_number_of_hosts"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of hosts\": [{\"party\": [\"number_of_hosts\"]}, {\"party_number_of_hosts\": [\"avg_number_of_hosts\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of hosts\" refers to the schema \"party_number_of_hosts\".\"avg_number_of_hosts\"",
        "clear_ambiguity": "{\"average number of hosts\": {\"party_number_of_hosts\": [\"avg_number_of_hosts\"]}}",
        "gold_query": "select avg_number_of_hosts from party_number_of_hosts"
    },
    {
        "index": 642,
        "db_id": "sports_competition",
        "ambig_type": "aggregate",
        "db_file": "aggregate/sports_competition/sports_competition.sqlite",
        "question": "What is the total number of points for all players?",
        "schema_without_content": "club_rank : bronze , silver , gold , total , rank , club_id  | club : club_id , name , region , start_year  | player : goals , club_id , tries , name , player_id , position , points , apps  | competition_result : score , club_id_2 , competition_id , club_id_1  | competition : country , competition_type , year , competition_id  | player_points : max_points , min_points , sum_points , avg_points ",
        "schema_with_content": "club_rank : bronze (2.0, 0.0, 9.0), silver (4.0, 3.0, 3.0), gold (7.0, 11.0, 2.0), total (3.0, 3.0, 21.0), rank (5.0, 1.0, 5.0), club_id (2, 3, 5) | club : club_id (6, 3, 1), name (\"IFG\", \"ASC\", \"ASC\"), region (\"UK\", \"Japan\", \"USA\"), start_year (\"1998\", \"1998\", \"2001\") | player : goals (\"50/60\", \"50/60\", \"0\"), club_id (3, 1, 1), tries (8.0, 4.0, 6.0), name (\"Sam Burgess\", \"Matt Cook\", \"Joe Vagana\"), player_id (13, 4, 4), position (\"Left Wing\", \"Loose Forward\", \"Left Wing\"), points (188.0, 110.0, 12.0), apps (27.0, 13.0, 14.0) | competition_result : score (\"11:10\", \"10:3\", \"10:3\"), club_id_2 (2, 4, 6), competition_id (2, 6, 10), club_id_1 (1, 3, 4) | competition : country (\"Ireland\", \"Slovenia\", \"Ireland\"), competition_type (\"Friendly\", \"Tournament\"), year (2006.0, 2007.0), competition_id (4, 9, 8) | player_points : max_points (4.0, 20.0, 12.0), min_points (24.0, 20.0, 36.0), sum_points (188.0, 110.0, 8.0), avg_points (24.0, 16.0, 12.0)",
        "ambiguous_queries": [
            "select sum(points) from player",
            "select sum_points from player_points"
        ],
        "gold_ambiguity": {
            "match": "{\"total number of points\": [{\"player\": [\"points\"]}, {\"player_points\": [\"sum_points\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total number of points\" refers to the schema \"player_points\".\"sum_points\"",
        "clear_ambiguity": "{\"total number of points\": {\"player_points\": [\"sum_points\"]}}",
        "gold_query": "select sum_points from player_points"
    },
    {
        "index": 643,
        "db_id": "driving_school",
        "ambig_type": "aggregate",
        "db_file": "aggregate/driving_school/driving_school.sqlite",
        "question": "What is maximum, minimum and average amount of outstanding of customer?",
        "schema_without_content": "customers : last_name , first_name , customer_id , date_of_birth , amount_outstanding , cell_mobile_phone_number , phone_number , customer_address_id , date_became_customer , email_address , customer_status_code  | addresses : line_1_number_building , city , address_id , state_province_county , zip_postcode , country  | customers_amount_outstanding : min_amount_outstanding , max_amount_outstanding , avg_amount_outstanding , sum_amount_outstanding  | vehicles : vehicle_id , vehicle_details  | lessons : lesson_date , price , lesson_status_code , customer_id , vehicle_id , lesson_id , lesson_time , staff_id  | staff : staff_address_id , first_name , middle_name , date_joined_staff , date_of_birth , nickname , date_left_staff , staff_id , last_name  | customer_payments : payment_method_code , datetime_payment , customer_id , amount_payment ",
        "schema_with_content": "customers : last_name (\"Schmeler\", \"Tromp\", \"Tromp\"), first_name (\"Rylan\", \"Carole\", \"Ray\"), customer_id (5, 6, 8), date_of_birth (\"1995-07-17 12:13:16\", \"1993-07-09 11:11:36\", \"1996-11-07 05:30:55\"), amount_outstanding (255.0, 3900.0, 2099.0), cell_mobile_phone_number (\"00659133944\", \"578-518-4785x612\", \"081-097-3684\"), phone_number (\"417.136.2900x672\", \"1-618-535-9750\", \"417.136.2900x672\"), customer_address_id (9, 13, 7), date_became_customer (\"2016-02-17 08:26:23\", \"2017-11-12 04:34:44\", \"2016-02-17 08:26:23\"), email_address (\"karina.carroll@example.net\", \"mayert.judy@example.com\", \"huel.jana@example.org\"), customer_status_code (\"Bad Customer\", \"Good Customer\") | addresses : line_1_number_building (\"535 Ariel Brook\", \"354 Frederik Ridge\", \"56461 Baumbach Well Suite 634\"), city (\"Port Jackelinemouth\", \"Port Melyssa\", \"New Bernieceburgh\"), address_id (2, 8, 8), state_province_county (\"WestVirginia\", \"Idaho\", \"Ohio\"), zip_postcode (\"75074\", \"27559\", \"14445\"), country (\"USA\") | customers_amount_outstanding : min_amount_outstanding (2099.0, 2255.0, 9500.0), max_amount_outstanding (9332.0, 3900.0, 9443.0), avg_amount_outstanding (7093.0, 7093.0, 2099.0), sum_amount_outstanding (3751.0, 1000.0, 9500.0) | vehicles : vehicle_id (1, 2, 3), vehicle_details (\"Van\", \"Truck\", \"Car\") | lessons : lesson_date (\"2018-03-07 16:12:36\", \"2018-03-07 11:53:32\", \"2018-03-16 07:08:52\"), price (199.0, 167.0, 456.0), lesson_status_code (\"Cancelled\", \"Completed\"), customer_id (10, 13, 13), vehicle_id (3, 2, 1), lesson_id (7, 8, 4), lesson_time (\"9\", \"6\", \"6\"), staff_id (14, 12, 8) | staff : staff_address_id (5, 5, 6), first_name (\"Camylle\", \"Janessa\", \"Simeon\"), middle_name (\"Stephania\", \"Ulices\", \"Ulices\"), date_joined_staff (\"2017-06-04 14:30:41\", \"2016-05-16 20:56:53\", \"2016-05-01 02:22:45\"), date_of_birth (\"1996-09-24 09:51:42\", \"1996-09-24 09:51:42\", \"2000-11-16 06:55:12\"), nickname (\"nicholaus92\", \"bkunze\", \"ymiller\"), date_left_staff (\"2018-03-10 15:25:00\", \"2018-03-08 05:16:29\", \"2018-03-02 01:48:15\"), staff_id (11, 11, 15), last_name (\"Sawayn\", \"Mertz\", \"Jast\") | customer_payments : payment_method_code (\"Direct Debit\", \"Credit Card\"), datetime_payment (\"2018-02-19 09:06:29\", \"2018-02-27 20:08:53\", \"2018-03-18 13:48:13\"), customer_id (2, 1, 13), amount_payment (9414.74, 4032.33, 1708.18)",
        "ambiguous_queries": [
            "select max(amount_outstanding), min(amount_outstanding), avg(amount_outstanding) from customers",
            "select max_amount_outstanding, min_amount_outstanding, avg_amount_outstanding from customers_amount_outstanding"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"customers\": [\"amount_outstanding\"]}, {\"customers_amount_outstanding\": [\"avg_amount_outstanding\"]}], \"maximum\": [{\"customers\": [\"amount_outstanding\"]}, {\"customers_amount_outstanding\": [\"max_amount_outstanding\"]}], \"minimum\": [{\"customers\": [\"amount_outstanding\"]}, {\"customers_amount_outstanding\": [\"min_amount_outstanding\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"customers_amount_outstanding\".\"avg_amount_outstanding\", \"maximum\" refers to the schema \"customers_amount_outstanding\".\"max_amount_outstanding\", \"minimum\" refers to the schema \"customers_amount_outstanding\".\"min_amount_outstanding\"",
        "clear_ambiguity": "{\"average\": {\"customers_amount_outstanding\": [\"avg_amount_outstanding\"]}, \"maximum\": {\"customers_amount_outstanding\": [\"max_amount_outstanding\"]}, \"minimum\": {\"customers_amount_outstanding\": [\"min_amount_outstanding\"]}}",
        "gold_query": "select max_amount_outstanding, min_amount_outstanding, avg_amount_outstanding from customers_amount_outstanding"
    },
    {
        "index": 644,
        "db_id": "pets_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/pets_1/pets_1.sqlite",
        "question": "What is the average and maximum age for each pet type?",
        "schema_without_content": "pets : pettype , petid , pet_age , weight  | student : advisor , city_code , major , age , lname , stuid , sex , fname  | pets_pet_age : avg_pet_age , sum_pet_age , max_pet_age , min_pet_age , pettype  | has_pet : petid , stuid ",
        "schema_with_content": "pets : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3) | student : advisor (2192, 7271, 7712), city_code (\"BOS\", \"DAL\", \"BOS\"), major (600, 100, 50), age (17, 27, 27), lname (\"Shieber\", \"Norris\", \"Smith\"), stuid (1030, 1015, 1030), sex (\"F\", \"M\"), fname (\"Ian\", \"Bruce\", \"Bruce\") | pets_pet_age : avg_pet_age (3, 2, 1), sum_pet_age (3, 2, 1), max_pet_age (3, 2, 1), min_pet_age (3, 2, 1), pettype (\"cat\", \"dog\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002)",
        "ambiguous_queries": [
            "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
            "select avg_pet_age, max_pet_age, pettype from pets_pet_age"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"pets\": [\"pet_age\"]}, {\"pets_pet_age\": [\"avg_pet_age\"]}], \"maximum\": [{\"pets\": [\"pet_age\"]}, {\"pets_pet_age\": [\"max_pet_age\"]}], \"pet type\": [{\"pets\": [\"pettype\"]}, {\"pets_pet_age\": [\"pettype\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"pets\".\"pet_age\", \"maximum\" refers to the schema \"pets\".\"pet_age\", \"pet type\" refers to the schema \"pets\".\"pettype\"",
        "clear_ambiguity": "{\"average\": {\"pets\": [\"pet_age\"]}, \"maximum\": {\"pets\": [\"pet_age\"]}, \"pet type\": {\"pets\": [\"pettype\"]}}",
        "gold_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype"
    },
    {
        "index": 645,
        "db_id": "museum_visit",
        "ambig_type": "aggregate",
        "db_file": "aggregate/museum_visit/museum_visit.sqlite",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "schema_without_content": "visitor : name , level_of_membership , age , id  | visitor_visit_total_spent : min_total_spent , sum_total_spent , max_total_spent , level_of_membership , avg_total_spent  | visit : museum_id , visitor_id , total_spent , num_of_ticket  | museum : num_of_staff , museum_id , name , open_year ",
        "schema_with_content": "visitor : name (\"Arjen Robben\", \"Rafael van der Vaart\", \"Gonzalo HiguaÃ­n \"), level_of_membership (2, 2, 2), age (56, 35, 56), id (4, 3, 6) | visitor_visit_total_spent : min_total_spent (320.14, 89.98, 89.98), sum_total_spent (89.98, 320.44, 19.98), max_total_spent (89.98, 320.14, 209.98), level_of_membership (5, 6, 6), avg_total_spent (20.44, 19.98, 89.98) | visit : museum_id (8, 1, 1), visitor_id (\"5\", \"3\", \"6\"), total_spent (320.44, 89.98, 209.98), num_of_ticket (20, 2, 10) | museum : num_of_staff (12, 25, 16), museum_id (5, 2, 7), name (\"Place Tower Museum\", \"Central City District Residential Museum\", \"Place Tower Museum\"), open_year (\"2008\", \"2010\", \"2010\")",
        "ambiguous_queries": [
            "select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1",
            "select sum_total_spent from visitor_visit_total_spent where level_of_membership = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"membership\": [{\"visitor\": [\"level_of_membership\"]}, {\"visitor_visit_total_spent\": [\"level_of_membership\"]}], \"total ticket expense\": [{\"visit\": [\"total_spent\"]}, {\"visitor_visit_total_spent\": [\"sum_total_spent\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"membership\" refers to the schema \"visitor_visit_total_spent\".\"level_of_membership\", \"total ticket expense\" refers to the schema \"visitor_visit_total_spent\".\"sum_total_spent\"",
        "clear_ambiguity": "{\"membership\": {\"visitor_visit_total_spent\": [\"level_of_membership\"]}, \"total ticket expense\": {\"visitor_visit_total_spent\": [\"sum_total_spent\"]}}",
        "gold_query": "select sum_total_spent from visitor_visit_total_spent where level_of_membership = 1"
    },
    {
        "index": 646,
        "db_id": "architecture",
        "ambig_type": "aggregate",
        "db_file": "aggregate/architecture/architecture.sqlite",
        "question": "What is the average length in feet of the bridges?",
        "schema_without_content": "bridge : length_meters , location , architect_id , length_feet , id , name  | bridge_length_feet : min_length_feet , sum_length_feet , avg_length_feet , max_length_feet  | architect : id , gender , name , nationality  | mill : notes \", name , architect_id , type , id , location , built_year ",
        "schema_with_content": "bridge : length_meters (87.0, 74.0, 75.0), location (\"Wrather Canyon , Arizona , USA\", \"Escalante Canyon , Utah , USA\", \"Negro Bill Canyon , Utah , USA\"), architect_id (2, 2, 5), length_feet (206.0, 230.0, 234.0), id (8, 12, 7), name (\"Sipapu Natural Bridge\", \"Outlaw Arch\", \"Wrather Arch\") | bridge_length_feet : min_length_feet (212.0, 243.0, 243.0), sum_length_feet (206.0, 243.0, 234.0), avg_length_feet (206.0, 400.0, 204.0), max_length_feet (234.0, 230.0, 290.0) | architect : id (\"4\", \"1\", \"3\"), gender (\"male\", \"female\"), name (\"Le Corbusier\", \"Zaha Hadid\", \"Frank Lloyd Wright\"), nationality (\"German, American\", \"Iraqi, British\", \"German, American\") | mill : notes (\"Molenechos (Dutch)\"), name (\"Moulin du ChÃ¢teau\", \"Moulin Bertrand\", \"Moulin de Pousset\"), architect_id (3, 3, 3), type (\"Grondzeiler\", \"Bergmolen\"), id (2, 4, 3), location (\"Fexhe-le-haut-Clocher\", \"Coswarem\", \"Donceel\"), built_year (1843, 1890, 1890)",
        "ambiguous_queries": [
            "select avg(length_feet) from bridge",
            "select avg_length_feet from bridge_length_feet"
        ],
        "gold_ambiguity": {
            "match": "{\"average length\": [{\"bridge\": [\"length_feet\"]}, {\"bridge_length_feet\": [\"avg_length_feet\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average length\" refers to the schema \"bridge_length_feet\".\"avg_length_feet\"",
        "clear_ambiguity": "{\"average length\": {\"bridge_length_feet\": [\"avg_length_feet\"]}}",
        "gold_query": "select avg_length_feet from bridge_length_feet"
    },
    {
        "index": 647,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What is the average song rating for each language?",
        "schema_without_content": "artist : preferred_genre , country , gender , artist_name  | files : f_id , file_size , duration , artist_name , formats  | song_rating : languages , min_rating , max_rating , avg_rating , sum_rating  | genre : most_popular_in , rating , g_name  | song : genre_is , song_name , artist_name , country , rating , languages , releasedate , resolution , f_id ",
        "schema_with_content": "artist : preferred_genre (\"pop\", \"blues\", \"blues\"), country (\"Bangladesh\", \"India\", \"UK\"), gender (\"Male\", \"Female\"), artist_name (\"Enrique\", \"Shrikanta\", \"Prity\") | files : f_id (1, 1, 5), file_size (\"4.58 MB\", \"4.10 MB\", \"4.58 MB\"), duration (\"4:12\", \"5:23\", \"3:45\"), artist_name (\"Topu\", \"Topu\", \"Farida\"), formats (\"mp4\", \"mp3\") | song_rating : languages (\"bangla\", \"english\"), min_rating (10, 6, 7), max_rating (6, 7, 5), avg_rating (6, 7, 5), sum_rating (10, 8, 6) | genre : most_popular_in (\"America\", \"Sylhet,Chittagong,Kustia\", \"Canada\"), rating (\"8\", \"7\", \"9\"), g_name (\"folk\", \"nazrul\", \"modern\") | song : genre_is (\"tagore\", \"folk\", \"pop\"), song_name (\"Just beat it\", \"My love\", \"Aj ei akash\"), artist_name (\"Michel\", \"Michel\", \"Topu\"), country (\"UK\", \"Bangladesh\", \"Bangladesh\"), rating (10, 6, 5), languages (\"bangla\", \"english\"), releasedate (\"24-JAN-2007\", \"7-APR-2001\", \"21-SEP-1997\"), resolution (720, 320, 1080), f_id (1, 4, 3)",
        "ambiguous_queries": [
            "select avg(rating), languages from song group by languages",
            "select avg_rating, languages from song_rating"
        ],
        "gold_ambiguity": {
            "match": "{\"language\": [{\"song\": [\"languages\"]}, {\"song_rating\": [\"languages\"]}], \"average song rating\": [{\"song\": [\"rating\"]}, {\"song_rating\": [\"avg_rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"language\" refers to the schema \"song_rating\".\"languages\", \"average song rating\" refers to the schema \"song_rating\".\"avg_rating\"",
        "clear_ambiguity": "{\"language\": {\"song_rating\": [\"languages\"]}, \"average song rating\": {\"song_rating\": [\"avg_rating\"]}}",
        "gold_query": "select avg_rating, languages from song_rating"
    },
    {
        "index": 648,
        "db_id": "election",
        "ambig_type": "aggregate",
        "db_file": "aggregate/election/election.sqlite",
        "question": "Show the average population of all counties.",
        "schema_without_content": "county : county_id , population , zip_code , county_name  | party : year , attorney_general , comptroller , lieutenant_governor , governor , party_id , party , us_senate \", \"Hillary Rodham Clinton\" | county_population : avg_population , max_population , sum_population , min_population  | election : election_id , delegate , counties_represented , first_elected , district , committee , party ",
        "schema_with_content": "county : county_id (2, 1, 4), population (90000.0, 87200.0, 87200.0), zip_code (\"D21\", \"D08\", \"D21\"), county_name (\"Colony\", \"Mansfield\", \"Mansfield\") | party : year (1998.0, 2002.0, 2006.0), attorney_general (\"Eliot Spitzer\", \"Andrew Cuomo\", \"Jeanine Pirro\"), comptroller (\"Carl McCall\", \"Alan Hevesi\", \"John Faso\"), lieutenant_governor (\"Mary Donohue\", \"David Paterson\", \"Mary Donohue\"), governor (\"Betsy McCaughey Ross\", \"Betsy McCaughey Ross\", \"Carl McCall\"), party_id (7, 3, 4), party (\"Liberal\", \"Democratic\", \"Democratic\"), us_senate (\"Charles Schumer\", \"(no election)\", \"Hillary Rodham Clinton\") | county_population : avg_population (79000.0, 87200.0, 87200.0), max_population (21000.0, 13300.0, 21000.0), sum_population (90000.0, 21000.0, 87200.0), min_population (79000.0, 90000.0, 21000.0) | election : election_id (5, 3, 7), delegate (\"Miller, Warren E. Warren E. Miller\", \"Pendergrass, Shane E. Shane Pendergrass\", \"Guzzone, Guy Guy Guzzone\"), counties_represented (\"12.1 12A\", \"12.1 12A\", \"13\"), first_elected (1994.0, 2002.0, 2006.0), district (1, 4, 2), committee (\"Appropriations\", \"Economic Matters\", \"Economic Matters\"), party (3, 3, 2)",
        "ambiguous_queries": [
            "select avg(population) from county",
            "select avg_population from county_population"
        ],
        "gold_ambiguity": {
            "match": "{\"average population\": [{\"county\": [\"population\"]}, {\"county_population\": [\"avg_population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average population\" refers to the schema \"county_population\".\"avg_population\"",
        "clear_ambiguity": "{\"average population\": {\"county_population\": [\"avg_population\"]}}",
        "gold_query": "select avg_population from county_population"
    },
    {
        "index": 649,
        "db_id": "wine_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/wine_1/wine_1.sqlite",
        "question": "What is the average prices of wines for each each?",
        "schema_without_content": "wine_price : sum_price , max_price , min_price , year , avg_price  | appellations : state , isava , appelation , area , county , no  | grapes : color , grape , id  | wine : name , price , drink , year , appelation , score , no , state , cases , winery , grape ",
        "schema_with_content": "wine_price : sum_price (70, 17, 43), max_price (50, 41, 54), min_price (95, 72, 48), year (2008, 2004, 2066), avg_price (54, 16, 36) | appellations : state (\"California\"), isava (\"Yes\", \"No\"), appelation (\"Chalk Hill\", \"Atlas Peak\", \"Guenoc Valley\"), area (\"Central Valley\", \"Central Coast\", \"N/A\"), county (\"Sonoma\", \"Yolo\", \"San Benito\"), no (45, 40, 56) | grapes : color (\"Red\", \"White\"), grape (\"Tempranillo\", \"Malbec\", \"Zinfandel\"), id (17, 8, 2) | wine : name (\"3CV Grassini Family Vineyards\", \"McDougal Ranch\", \"1886\"), price (100, 13, 69), drink (\"2015\", \"2015\", \"2001\"), year (2009, 2005, 2007), appelation (\"Spring Mountain District\", \"Sierra Foothills\", \"Santa Ynez Valley\"), score (89, 97, 95), no (218, 354, 147), state (\"California\"), cases (2284, 1094, 2550), winery (\"Chasseur\", \"Vision Cellars\", \"Kistler\"), grape (\"Tempranillo\", \"Merlot\", \"Syrah\")",
        "ambiguous_queries": [
            "select avg(price), year from wine group by year",
            "select avg_price, year from wine_price"
        ],
        "gold_ambiguity": {
            "match": "{\"average prices\": [{\"wine\": [\"price\"]}, {\"wine_price\": [\"avg_price\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average prices\" refers to the schema \"wine\".\"price\"",
        "clear_ambiguity": "{\"average prices\": {\"wine\": [\"price\"]}}",
        "gold_query": "select avg(price), year from wine group by year"
    },
    {
        "index": 650,
        "db_id": "sakila_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/sakila_1/sakila_1.sqlite",
        "question": "Return the sum of all payment amounts.",
        "schema_without_content": "inventory : store_id , last_update , inventory_id , film_id  | customer : email , create_date , address_id , active , last_update , last_name , customer_id , first_name , store_id  | actor : first_name , last_name , actor_id , last_update  | rental : last_update , rental_date , inventory_id , rental_id , return_date , staff_id , customer_id  | film : rental_duration , original_language_id , film_id , language_id , length , rental_rate , replacement_cost , title , description , release_year , special_features , rating , last_update  | film_actor : last_update , film_id , actor_id  | country : country , last_update , country_id  | store : address_id , manager_staff_id , last_update , store_id  | payment : payment_id , staff_id , payment_date , rental_id , customer_id , last_update , amount  | city : city , city_id , country_id , last_update  | payment_amount : max_amount , min_amount , sum_amount , avg_amount  | address : city_id , district , address , address_id , address2 , phone , last_update , postal_code  | film_text : title , description , film_id  | language : name , last_update , language_id  | staff : first_name , address_id , email , store_id , staff_id , username , picture , active , last_update , password , last_name  | film_category : last_update , film_id , category_id  | category : last_update , name , category_id ",
        "schema_with_content": "inventory : store_id (1, 2), last_update (\"2006-02-15 05:09:17\"), inventory_id (2238, 373, 4497), film_id (245, 167, 261) | customer : email (\"PHILLIP.HOLM@sakilacustomer.org\", \"EDDIE.TOMLIN@sakilacustomer.org\", \"MAUREEN.LITTLE@sakilacustomer.org\"), create_date (\"2006-02-14 22:04:36\", \"2006-02-14 22:04:37\"), address_id (586, 135, 561), active (1, 0), last_update (\"2006-02-15 04:57:20\"), last_name (\"SEWARD\", \"LANE\", \"NOE\"), customer_id (373, 428, 572), first_name (\"THELMA\", \"IVAN\", \"DENISE\"), store_id (1, 2) | actor : first_name (\"ADAM\", \"CAMERON\", \"JIM\"), last_name (\"WITHERSPOON\", \"JOLIE\", \"TANDY\"), actor_id (61, 166, 121), last_update (\"2006-02-15 04:34:33\") | rental : last_update (\"2006-02-15 21:30:53\", \"2006-02-23 04:12:08\"), rental_date (\"2005-08-21 04:37:56\", \"2005-07-30 11:21:56\", \"2005-08-20 18:58:23\"), inventory_id (1265, 4531, 3762), rental_id (14742, 1536, 12287), return_date (\"2005-07-08 09:11:15\", \"2005-08-23 10:46:21\", \"2005-07-13 15:02:38\"), staff_id (1, 2), customer_id (280, 161, 481) | film : rental_duration (5, 3, 6), original_language_id (None), film_id (682, 165, 533), language_id (1), length (70, 83, 63), rental_rate (0.99, 4.99, 2.99), replacement_cost (17.99, 16.99, 26.99), title (\"IRON MOON\", \"ALI FOREVER\", \"TIMBERLAND SKY\"), description (\"A Amazing Tale of a Crocodile And a Squirrel who must Discover a Composer in Australia\", \"A Unbelieveable Epistle of a Sumo Wrestler And a Hunter who must Chase a Forensic Psychologist in A Baloon\", \"A Lacklusture Panorama of a Dentist And a Forensic Psychologist who must Outrace a Pioneer in A U-Boat\"), release_year (2006), special_features (\"Trailers,Commentaries,Behind the Scenes\", \"Trailers,Deleted Scenes\", \"Deleted Scenes\"), rating (\"R\", \"PG\", \"PG-13\"), last_update (\"2006-02-15 05:03:42\") | film_actor : last_update (\"2006-02-15 05:05:03\"), film_id (930, 495, 770), actor_id (182, 92, 38) | country : country (\"Senegal\", \"Tuvalu\", \"Colombia\"), last_update (\"2006-02-15 04:44:00\"), country_id (43, 92, 41) | store : address_id (), manager_staff_id (), last_update (), store_id () | payment : payment_id (9774, 682, 2894), staff_id (1, 2), payment_date (\"2005-08-23 19:27:04\", \"2005-07-31 06:02:14\", \"2005-08-18 08:26:48\"), rental_id (3086, 15627, 11393), customer_id (98, 292, 599), last_update (\"2006-02-15 22:22:44\", \"2006-02-15 22:15:02\", \"2006-02-15 22:14:12\"), amount (3.99, 2.99, 11.99) | city : city (\"Dongying\", \"Xintai\", \"San Miguel de Tucumn\"), city_id (419, 455, 352), country_id (53, 33, 6), last_update (\"2006-02-15 04:45:25\") | payment_amount : max_amount (9.99, 11.99, 0), min_amount (9.98, 0.99, 7.99), sum_amount (7.98, 0.99, 7.99), avg_amount (11.99, 4.99, 9.99) | address : city_id (472, 155, 590), district (\"Masqat\", \"Central Serbia\", \"Hanoi\"), address (\"1322 Mosul Parkway\", \"1338 Zalantun Lane\", \"1883 Maikop Lane\"), address_id (434, 315, 209), address2 (None, \"\"), phone (\"266798132374\", \"717566026669\", \"103602195112\"), last_update (\"2006-02-15 04:45:30\"), postal_code (\"75933\", \"4166\", \"35156\") | film_text : title (), description (), film_id () | language : name (), last_update (), language_id () | staff : first_name (), address_id (), email (), store_id (), staff_id (), username (), picture (), active (), last_update (), password (), last_name () | film_category : last_update (\"2006-02-15 05:07:09\"), film_id (439, 727, 507), category_id (11, 1, 16) | category : last_update (\"2006-02-15 04:46:27\"), name (\"Drama\", \"Family\", \"Games\"), category_id (1, 2, 4)",
        "ambiguous_queries": [
            "select sum(amount) from payment",
            "select sum_amount from payment_amount"
        ],
        "gold_ambiguity": {
            "match": "{\"sum\": [{\"payment\": [\"amount\"]}, {\"payment_amount\": [\"sum_amount\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"sum\" refers to the schema \"payment_amount\".\"sum_amount\"",
        "clear_ambiguity": "{\"sum\": {\"payment_amount\": [\"sum_amount\"]}}",
        "gold_query": "select sum_amount from payment_amount"
    },
    {
        "index": 651,
        "db_id": "music_4",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_4/music_4.sqlite",
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "schema_without_content": "artist : artist , famous_title \", \"Transmutation\", \"Imperivm\", age , artist_id , famous_release_date  | volume : volume_issue , artist_id , issue_date , weeks_on_top , song  \", \"Looking for a New Love\", \"  Died in Your Arms \", volume_id  | volume_weeks_on_top : sum_weeks_on_top , min_weeks_on_top , max_weeks_on_top , avg_weeks_on_top  | music_festival : music_festival , id , date_of_ceremony , result , category , volume ",
        "schema_with_content": "artist : artist (\"Triumfall\", \"Black Flame\", \"Triumfall\"), famous_title (\"Unholy Metal Way (re-release)\", \"Transmutation\", \"Imperivm\"), age (35, 34, 34), artist_id (1, 2, 2), famous_release_date (\"2009\", \"June 15, 2009\", \"June 23, 2008\") | volume : volume_issue (\"45:15\", \"46:9\", \"46:14-15\"), artist_id (4, 4, 4), issue_date (\"25 July\", \"24 January\", \"28 February - 7 March\"), weeks_on_top (3.0, 1.0, 2.0), song (\" Touch Me (I Want Your Body) \", \"Looking for a New Love\", \" (I Just) Died in Your Arms \"), volume_id (8, 4, 8) | volume_weeks_on_top : sum_weeks_on_top (3.0, 1.0, 2.0), min_weeks_on_top (3.0, 1.0, 2.0), max_weeks_on_top (3.0, 1.0, 2.0), avg_weeks_on_top (3.0, 1.0, 2.0) | music_festival : music_festival (\"34th European Academy Prize\", \"35th China Academy Prize\", \"40th Japan Academy Prize\"), id (4, 2, 9), date_of_ceremony (\"18 February 2011\"), result (\"Nominated\", \"Awarded\"), category (\"Best Song\", \"Best Lyrics\", \"Best Sound Song\"), volume (9, 1, 1)",
        "ambiguous_queries": [
            "select max(weeks_on_top), min(weeks_on_top) from volume",
            "select max_weeks_on_top, min_weeks_on_top from volume_weeks_on_top"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"volume\": [\"weeks_on_top\"]}, {\"volume_weeks_on_top\": [\"max_weeks_on_top\"]}], \"minimum\": [{\"volume\": [\"weeks_on_top\"]}, {\"volume_weeks_on_top\": [\"min_weeks_on_top\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"volume_weeks_on_top\".\"max_weeks_on_top\", \"minimum\" refers to the schema \"volume_weeks_on_top\".\"min_weeks_on_top\"",
        "clear_ambiguity": "{\"maximum\": {\"volume_weeks_on_top\": [\"max_weeks_on_top\"]}, \"minimum\": {\"volume_weeks_on_top\": [\"min_weeks_on_top\"]}}",
        "gold_query": "select max_weeks_on_top, min_weeks_on_top from volume_weeks_on_top"
    },
    {
        "index": 652,
        "db_id": "college_3",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_3/college_3.sqlite",
        "question": "What are the maximum and minumum grade points?",
        "schema_without_content": "course : credits , dno , hours , instructor , cname , cid , days  | enrolled_in : stuid , grade , cid  | minor_in : dno , stuid  | faculty : sex , room , lname , rank , building , phone , facid , fname  | student : lname , major , stuid , fname , age , city_code , advisor , sex  | gradeconversion_gradepoint : avg_gradepoint , min_gradepoint , sum_gradepoint , max_gradepoint  | department : dno , dphone , dname , building , division , room  | member_of : appt_type , facid , dno  | gradeconversion : lettergrade , gradepoint ",
        "schema_with_content": "course : credits (2, 4, 3), dno (520, 50, 600), hours (\"1\", \"10\", \"11:30-12:45\"), instructor (8122, 8918, 6330), cname (\"BUSINESS LAW I\", \"COMPUTATIONAL MODELS\", \"COMP. MODELS OF SENTENCE PROCESSING\"), cid (\"600.337\", \"520.353\", \"550.310\"), days (\"MTW\", \"MT\", \"TW\") | enrolled_in : stuid (1031, 1011, 1027), grade (\"A\", \"D-\", \"B-\"), cid (\"600.461\", \"600.415\", \"550.681\") | minor_in : dno (190, 530, 550), stuid (1004, 1005, 1006) | faculty : sex (\"M\", \"F\"), room (\"220\", \"219\", \"328\"), lname (\"Jelinek\", \"Goutsias\", \"Joseph\"), rank (\"AsstProf\", \"Instructor\", \"Professor\"), building (\"NEB\", \"Barton\", \"Krieger\"), phone (2672, 8335, 3550), facid (1172, 6191, 6191), fname (\"Michael\", \"Luigi\", \"William\") | student : lname (\"Rugh\", \"Schwartz\", \"Cheng\"), major (540, 600, 550), stuid (1015, 1009, 1008), fname (\"Shiela\", \"David\", \"Bruce\"), age (22, 19, 17), city_code (\"HOU\", \"SFO\", \"PIT\"), advisor (7792, 2311, 5718), sex (\"F\", \"M\") | gradeconversion_gradepoint : avg_gradepoint (0.7, 2.0, 0.0), min_gradepoint (1.0, 1.3, 0.7), sum_gradepoint (2.7, 0.0, 2.7), max_gradepoint (3.3, 2.7, 1.0) | department : dno (90, 540, 530), dphone (7033, 7556, 7195), dname (\"Philosophy\", \"Biology\", \"German\"), building (\"NEB\", \"Ames\", \"Maryland\"), division (\"AS\", \"EN\"), room (\"122\", \"121\", \"122\") | member_of : appt_type (\"Primary\", \"Secondary\"), facid (1121, 8122, 8423), dno (50, 550, 50) | gradeconversion : lettergrade (\"D-\", \"A+\", \"B+\"), gradepoint (1.3, 2.3, 0.0)",
        "ambiguous_queries": [
            "select max(gradepoint), min(gradepoint) from gradeconversion",
            "select max_gradepoint, min_gradepoint from gradeconversion_gradepoint"
        ],
        "gold_ambiguity": {
            "match": "{\"minumum\": [{\"gradeconversion\": [\"gradepoint\"]}, {\"gradeconversion_gradepoint\": [\"min_gradepoint\"]}], \"maximum\": [{\"gradeconversion\": [\"gradepoint\"]}, {\"gradeconversion_gradepoint\": [\"max_gradepoint\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"minumum\" refers to the schema \"gradeconversion_gradepoint\".\"min_gradepoint\", \"maximum\" refers to the schema \"gradeconversion_gradepoint\".\"max_gradepoint\"",
        "clear_ambiguity": "{\"minumum\": {\"gradeconversion_gradepoint\": [\"min_gradepoint\"]}, \"maximum\": {\"gradeconversion_gradepoint\": [\"max_gradepoint\"]}}",
        "gold_query": "select max_gradepoint, min_gradepoint from gradeconversion_gradepoint"
    },
    {
        "index": 653,
        "db_id": "concert_singer",
        "ambig_type": "aggregate",
        "db_file": "aggregate/concert_singer/concert_singer.sqlite",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "schema_without_content": "singer : name , song_name , country , is_male , singer_id , age , song_release_year  | concert : concert_id , concert_name , year , stadium_id , theme  | singer_age : min_age , avg_age , max_age , sum_age  | stadium : name , location , stadium_id , highest , capacity , lowest , average  | singer_in_concert : concert_id , singer_id ",
        "schema_with_content": "singer : name (\"Timbaland\", \"Timbaland\", \"Justin Brown\"), song_name (\"Hey Oh\", \"Dangerous\", \"Hey Oh\"), country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), singer_id (1, 2, 5), age (41, 52, 52), song_release_year (\"2014\", \"2016\", \"2013\") | concert : concert_id (3, 3, 4), concert_name (\"Week 1\", \"Home Visits\", \"Home Visits\"), year (\"2014\", \"2015\"), stadium_id (\"1\", \"1\", \"1\"), theme (\"Bleeding Love\", \"Free choice 2\", \"Free choice 2\") | singer_age : min_age (25, 52, 52), avg_age (25, 32, 29), max_age (25, 32, 41), sum_age (41, 43, 25) | stadium : name (\"Bayview Stadium\", \"Recreation Park\", \"Stark's Park\"), location (\"Ayr United\", \"Ayr United\", \"Peterhead\"), stadium_id (5, 9, 9), highest (1763, 1980, 4812), capacity (4000, 3100, 3100), lowest (1294, 1294, 1294), average (1477, 1477, 1477) | singer_in_concert : concert_id (6, 1, 1), singer_id (\"4\", \"3\", \"2\")",
        "ambiguous_queries": [
            "select avg(age), min(age), max(age) from singer where country = 'France'",
            "select avg_age, min_age, max_age from singer_age where country = 'France'"
        ],
        "gold_ambiguity": {
            "match": "{\"France\": [{\"singer\": [\"country\"]}, {\"singer_age\": [\"country\"]}], \"average\": [{\"singer\": [\"age\"]}, {\"singer_age\": [\"avg_age\"]}], \"maximum\": [{\"singer\": [\"age\"]}, {\"singer_age\": [\"max_age\"]}], \"minimum\": [{\"singer\": [\"age\"]}, {\"singer_age\": [\"min_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"France\" refers to the schema \"singer_age\".\"country\", \"average\" refers to the schema \"singer_age\".\"avg_age\", \"maximum\" refers to the schema \"singer_age\".\"max_age\", \"minimum\" refers to the schema \"singer_age\".\"min_age\"",
        "clear_ambiguity": "{\"France\": {\"singer_age\": [\"country\"]}, \"average\": {\"singer_age\": [\"avg_age\"]}, \"maximum\": {\"singer_age\": [\"max_age\"]}, \"minimum\": {\"singer_age\": [\"min_age\"]}}",
        "gold_query": "select avg_age, min_age, max_age from singer_age where country = 'France'"
    },
    {
        "index": 654,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What is the average rating of songs produced by female artists?",
        "schema_without_content": "genre : g_name , most_popular_in , rating  | files : formats , file_size , artist_name , f_id , duration  | artist : artist_name , country , preferred_genre , gender  | artist_song_rating : min_rating , sum_rating , max_rating , gender , avg_rating  | song : genre_is , resolution , artist_name , rating , languages , f_id , country , song_name , releasedate ",
        "schema_with_content": "genre : g_name (\"nazrul\", \"modern\", \"modern\"), most_popular_in (\"Canada\", \"America\", \"Sylhet,Chittagong,Kustia\"), rating (\"8\", \"7\", \"9\") | files : formats (\"mp4\", \"mp3\"), file_size (\"4.10 MB\", \"4.12 MB\", \"5.10 MB\"), artist_name (\"Michel\", \"Farida\", \"Shrikanta\"), f_id (6, 1, 3), duration (\"5:23\", \"4:34\", \"2:56\") | artist : artist_name (\"Enrique\", \"Enrique\", \"Enrique\"), country (\"USA\", \"UK\", \"India\"), preferred_genre (\"folk\", \"pop\", \"tagore\"), gender (\"Male\", \"Female\") | artist_song_rating : min_rating (10, 6, 8), sum_rating (7, 10, 8), max_rating (5, 6, 8), gender (\"Male\", \"Female\"), avg_rating (10, 5, 8) | song : genre_is (\"pop\", \"blues\", \"pop\"), resolution (512, 512, 1080), artist_name (\"Enrique\", \"Enrique\", \"Topu\"), rating (5, 5, 10), languages (\"bangla\", \"english\"), f_id (5, 5, 6), country (\"Bangladesh\", \"India\", \"India\"), song_name (\"Aj ei akash\", \"Just beat it\", \"My love\"), releasedate (\"24-JAN-2007\", \"21-SEP-1997\", \"27-MAR-2004\")",
        "ambiguous_queries": [
            "select avg(t2.rating) from artist as t1 join song as t2 on t1.artist_name = t2.artist_name where t1.gender = 'Female'",
            "select avg_rating from artist_song_rating where gender = 'Female'"
        ],
        "gold_ambiguity": {
            "match": "{\"female\": [{\"artist\": [\"gender\"]}, {\"artist_song_rating\": [\"gender\"]}], \"average rating\": [{\"artist_song_rating\": [\"avg_rating\"]}, {\"song\": [\"rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"female\" refers to the schema \"artist\".\"gender\", \"average rating\" refers to the schema \"song\".\"rating\"",
        "clear_ambiguity": "{\"female\": {\"artist\": [\"gender\"]}, \"average rating\": {\"song\": [\"rating\"]}}",
        "gold_query": "select avg(t2.rating) from artist as t1 join song as t2 on t1.artist_name = t2.artist_name where t1.gender = 'Female'"
    },
    {
        "index": 655,
        "db_id": "battle_death",
        "ambig_type": "aggregate",
        "db_file": "aggregate/battle_death/battle_death.sqlite",
        "question": "What is the average number of injuries caused each time?",
        "schema_without_content": "ship : disposition_of_ship , id , location , lost_in_battle , ship_type , name , tonnage  | death : id , note , killed , injured , caused_by_ship_id  | death_injured : max_injured , min_injured , avg_injured , sum_injured  | battle : bulgarian_commander , id , name , result , date , latin_commander ",
        "schema_with_content": "ship : disposition_of_ship (\"Sank\", \"Scuttled\", \"Scuttled\"), id (2, 1, 6), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), lost_in_battle (4, 6, 6), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), name (\"Mary\", \"HMS Avon\", \"Lettice\"), tonnage (\"t\", \"391\", \"225\") | death : id (2, 12, 1), note (\"Dantewada, Chhattisgarh\", \"WestMidnapore, West Bengal\", \"Kanker, Chhattisgarh\"), killed (29, 8, 29), injured (0, 9, 5), caused_by_ship_id (3, 6, 3) | death_injured : max_injured (0, 9, 5), min_injured (0, 9, 5), avg_injured (0, 9, 5), sum_injured (0, 9, 5) | battle : bulgarian_commander (\"Kaloyan\", \"Ivan Asen II\", \"Boril\"), id (3, 1, 4), name (\"Battle of Serres\", \"Battle of Messinopolis\", \"Battle of Philippopolis\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), date (\"31 June 1208\", \"31 June 1208\", \"1235\"), latin_commander (\"Thierry de Termond\", \"John of Brienne\", \"Henry I\")",
        "ambiguous_queries": [
            "select avg(injured) from death",
            "select avg_injured from death_injured"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of injuries\": [{\"death\": [\"injured\"]}, {\"death_injured\": [\"avg_injured\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of injuries\" refers to the schema \"death_injured\".\"avg_injured\"",
        "clear_ambiguity": "{\"average number of injuries\": {\"death_injured\": [\"avg_injured\"]}}",
        "gold_query": "select avg_injured from death_injured"
    },
    {
        "index": 656,
        "db_id": "driving_school",
        "ambig_type": "aggregate",
        "db_file": "aggregate/driving_school/driving_school.sqlite",
        "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "schema_without_content": "customer_payments : payment_method_code , customer_id , datetime_payment , amount_payment  | customers : date_became_customer , last_name , customer_id , cell_mobile_phone_number 964-2426\", \"081-097-3684\", \"200.830.8723\", customer_address_id , date_of_birth , customer_status_code , first_name , amount_outstanding , phone_number 2351480248\", email_address  | vehicles : vehicle_details , vehicle_id  | lessons_staff_price : max_price , avg_price , last_name , first_name , sum_price , min_price  | lessons : lesson_id , lesson_time , customer_id , staff_id , vehicle_id , lesson_status_code , lesson_date , price  | staff : last_name , middle_name , staff_address_id , staff_id , nickname , date_joined_staff , date_left_staff , first_name , date_of_birth  | addresses : address_id , city , zip_postcode , state_province_county , country , line_1_number_building ",
        "schema_with_content": "customer_payments : payment_method_code (\"Direct Debit\", \"Credit Card\"), customer_id (13, 12, 11), datetime_payment (\"2018-03-12 08:41:47\", \"2018-03-06 21:36:41\", \"2018-02-01 06:15:31\"), amount_payment (7440.34, 8180.26, 7440.34) | customers : date_became_customer (\"2017-11-25 01:42:26\", \"2017-11-12 04:34:44\", \"2017-11-25 01:42:26\"), last_name (\"Tromp\", \"Mertz\", \"Koelpin\"), customer_id (1, 3, 14), cell_mobile_phone_number (\"(630)964-2426\", \"081-097-3684\", \"200.830.8723\"), customer_address_id (10, 13, 2), date_of_birth (\"1993-02-07 05:40:26\", \"1993-07-09 11:11:36\", \"1996-08-30 06:17:50\"), customer_status_code (\"Bad Customer\", \"Good Customer\"), first_name (\"Sigrid\", \"Rylan\", \"Amya\"), amount_outstanding (7256.0, 2255.0, 7256.0), phone_number (\"206-054-0689x05861\", \"07278206718\", \"+14(5)2351480248\"), email_address (\"kozey.citlalli@example.org\", \"everette.goyette@example.org\", \"everette.goyette@example.org\") | vehicles : vehicle_details (\"Van\", \"Truck\", \"Car\"), vehicle_id (1, 2, 3) | lessons_staff_price : max_price (295.0, 306.0, 277.0), avg_price (352.0, 446.0, 352.0), last_name (\"Rogahn\", \"Carroll\", \"Kuphal\"), first_name (\"Kaitlin\", \"Winnifred\", \"Simeon\"), sum_price (352.0, 495.0, 277.0), min_price (352.0, 231.0, 199.0) | lessons : lesson_id (8, 1, 2), lesson_time (\"5\", \"3\", \"5\"), customer_id (10, 9, 6), staff_id (4, 14, 14), vehicle_id (3, 2, 1), lesson_status_code (\"Cancelled\", \"Completed\"), lesson_date (\"2018-03-21 06:48:45\", \"2018-02-26 02:36:35\", \"2018-03-06 21:48:51\"), price (340.0, 352.0, 352.0) | staff : last_name (\"Jast\", \"Hermann\", \"Rogahn\"), middle_name (\"Stephania\", \"Icie\", \"Amara\"), staff_address_id (1, 12, 7), staff_id (2, 3, 1), nickname (\"bkunze\", \"sbrown\", \"weldon.kling\"), date_joined_staff (\"2017-12-22 03:06:32\", \"2016-11-13 20:44:23\", \"2016-05-01 02:22:45\"), date_left_staff (\"2018-03-08 04:23:14\", \"2018-02-28 08:26:10\", \"2018-03-08 12:31:16\"), first_name (\"Rebekah\", \"Winnifred\", \"Jaleel\"), date_of_birth (\"1998-04-27 12:55:05\", \"2000-06-13 18:09:11\", \"2003-01-16 06:29:11\") | addresses : address_id (10, 14, 10), city (\"New Bernieceburgh\", \"Powlowskichester\", \"Buckridgehaven\"), zip_postcode (\"38197\", \"63768\", \"00005\"), state_province_county (\"Idaho\", \"Oregon\", \"WestVirginia\"), country (\"USA\"), line_1_number_building (\"484 O'Hara Drive\", \"3904 Stroman Passage\", \"4834 Schaefer Light Suite 947\")",
        "ambiguous_queries": [
            "select avg(price) from lessons as t1 join staff as t2 on t1.staff_id = t2.staff_id where t2.first_name = 'Janessa' and t2.last_name = 'Sawayn'",
            "select avg_price from lessons_staff_price where first_name = 'Janessa' and last_name = 'Sawayn'"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"lessons_staff_price\": [\"first_name\"]}, {\"staff\": [\"first_name\"]}], \"last name\": [{\"lessons_staff_price\": [\"last_name\"]}, {\"staff\": [\"last_name\"]}], \"average lesson price\": [{\"lessons_staff_price\": [\"avg_price\"]}, {\"staff\": [\"price\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"staff\".\"first_name\", \"last name\" refers to the schema \"staff\".\"last_name\", \"average lesson price\" refers to the schema \"staff\".\"price\"",
        "clear_ambiguity": "{\"first name\": {\"staff\": [\"first_name\"]}, \"last name\": {\"staff\": [\"last_name\"]}, \"average lesson price\": {\"staff\": [\"price\"]}}",
        "gold_query": "select avg(price) from lessons as t1 join staff as t2 on t1.staff_id = t2.staff_id where t2.first_name = 'Janessa' and t2.last_name = 'Sawayn'"
    },
    {
        "index": 657,
        "db_id": "baseball_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/baseball_1/baseball_1.sqlite",
        "question": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "schema_without_content": "player : birth_month , death_month , name_last , height , retro_id , name_first , birth_country , name_given , birth_state , death_year , death_day , bbref_id , death_city , weight , birth_day , throws , birth_city , final_game , player_id , debut , death_state , birth_year , bats , death_country  | salary : year , salary , player_id , team_id , league_id  | postseason : wins , round , team_id_winner , year , league_id_winner , losses , ties , league_id_loser , team_id_loser  | college : state , college_id , name_full , country , city  | pitching_postseason : w , er , hr , bk , h , bfp , era , bb , baopp , sv , league_id , sf , wp , l , sho , cg , round , gf , hbp , sh , so , r , team_id , ipouts , ibb , player_id , year , gs , g_idp , g  | manager_half : rank , g , w , half , team_id , l , inseason , year , player_id , league_id  | team : rank , sf , lg_win , triple , bb , soa , w , league_id , year , e , hbp , ra , wc_win , bpf , div_win , g , er , hra , name , ab , ghome , bba , fp , sv , l , cg , h , div_id , sb , cs , hr , ws_win , park , so , franchise_id , ppf , team_id_retro , team_id_lahman45 , era , sho , team_id , ipouts , dp , r , double , ha , team_id_br , attendance  | pitching : h , bb , player_id , w , gf , cg , hr , so , er , league_id , sh , hbp , gs , sv , wp , r , sf , g , bfp , ipouts , g_idp , ibb , team_id , era , stint , year , bk , l , baopp , sho  | hall_of_fame : category , yearid , ballots , needed_note , votes , inducted , votedby , player_id , needed  | batting_postseason : sh , triple , cs , hbp , ab , hr , r , team_id , double , h , year , league_id , bb , ibb , g , rbi , round , sb , player_id , sf , g_idp , so  | all_star : gp , team_id , starting_pos , year , game_id , league_id , player_id , game_num  | batting : double , ibb , stint , bb , hr , sh , so , triple , year , g_idp , r , rbi , player_id , ab , league_id , sf , cs , g , sb , team_id , hbp , h  | player_award_vote : award_id , year , votes_first , points_max , league_id , player_id , points_won  | salary_team_salary : max_salary , name , sum_salary , min_salary , avg_salary  | park : park_id , park_alias , city , park_name , country , state  | fielding_outfield : grf , gcf , glf , player_id , year , stint  | manager_award_vote : year , player_id , award_id , league_id , votes_first , points_won , points_max  | home_game : attendance , games , span_last , openings , league_id , team_id , year , span_first , park_id  | appearances : g_of , g_defense , player_id , g_dh , g_batting , gs , team_id , g_lf , league_id , g_pr , g_p , g_cf , g_ph , g_c , g_2b , g_rf , g_3b , g_all , year , g_ss , g_1b  | player_college : player_id , college_id , year  | fielding_postseason : pb , tp , inn_outs , round , pos , cs , league_id , year , gs , po , team_id , a , g , player_id , sb , e , dp  | fielding : po , inn_outs , zr , wp , stint , team_id , pos , cs , sb , pb , a , league_id , e , player_id , dp , year , g , gs  | manager : l , year , league_id , inseason , team_id , player_id , w , rank , g , plyr_mgr  | team_franchise : franchise_id , active , na_assoc , franchise_name  | player_award : notes , award_id , year , league_id , player_id , tie  | team_half : year , half , g , rank , league_id , div_win , team_id , l , w , div_id  | manager_award : player_id , league_id , tie , year , award_id , notes ",
        "schema_with_content": "player : birth_month (5, 3, 10), death_month (7, 4, 12), name_last (\"Osburn\", \"Kircher\", \"Halliday\"), height (70, 73, 82), retro_id (\"duffc001\", \"neemc101\", \"herrw101\"), name_first (\"Ubaldo\", \"Josh\", \"J. P.\"), birth_country (\"Mexico\", \"Finland\", \"D.R.\"), name_given (\"Franklin Thomas\", \"Claude\", \"Clement Lambert\"), birth_state (\"Antrim\", \"Yaracuy\", \"WY\"), death_year (1889, 1948, 1991), death_day (23, \"\", 15), bbref_id (\"peppedo01\", \"blaehge01\", \"worthri01\"), death_city (\"Lucedale\", \"Charleroi\", \"Bethany\"), weight (170, 149, 225), birth_day (5, 5, 8), throws (\"R\", \"L\", \"\"), birth_city (\"Perkins\", \"Youngsville\", \"Wright Patterson AFB\"), final_game (\"1925-06-10\", \"1924-09-02\", \"1915-09-27\"), player_id (\"corriph01\", \"brookma01\", \"maloned01\"), debut (\"1937-10-02\", \"1993-08-12\", \"1967-09-29\"), death_state (\"San Luis Potosi\", \"Tamaulipas\", \"AB\"), birth_year (1887, 1944, 1842), bats (\"B\", \"R\", \"R\"), death_country (\"United Kingdom\", \"Taiwan\", \"Austria\") | salary : year (1990, 1988, 2012), salary (182500, 365300, 3752625), player_id (\"tollesh01\", \"ordonre01\", \"manueba01\"), team_id (\"TOR\", \"COL\", \"LAN\"), league_id (\"NL\", \"AL\") | postseason : wins (3, 10, 5), round (\"NLCS\", \"NLDS1\", \"NLDS2\"), team_id_winner (\"ML1\", \"NYA\", \"LAN\"), year (1892, 1973, 1920), league_id_winner (\"NL\", \"AA\", \"AL\"), losses (1, 1, 2), ties (0, 1), league_id_loser (\"AA\", \"NL\", \"AL\"), team_id_loser (\"BRO\", \"PHI\", \"SEA\") | college : state (\"SC\", \"DC\", \"WA\"), college_id (\"mamassa\", \"ladelga\", \"casjdjc\"), name_full (\"State University of New York at Brockport\", \"University of Indianapolis\", \"DeAnza College\"), country (\"USA\"), city (\"Holland\", \"Twin Falls\", \"Muskogee\") | pitching_postseason : w (3, 4, 3), er (14, 14, 14), hr (4, 2, 4), bk (\"\", 0, 1), h (17, 25, 18), bfp (37, 52, 41), era (36, 1.83, 2.65), bb (5, 3, 16), baopp (\"0.62\", \"0.28\", \"0.149\"), sv (4, 4, 2), league_id (\"AA\", \"NL\", \"AL\"), sf (0, 4, \"\"), wp (2, \"\", 1), l (2, 3, 1), sho (0, 1, 0), cg (5, 6, 6), round (\"ALDS1\", \"AEDIV\", \"NWDIV\"), gf (3, 1, 5), hbp (1, 3, 2), sh (7, 4, 2), so (0, 31, 13), r (23, 22, 18), team_id (\"CHA\", \"SFN\", \"ATL\"), ipouts (44, 43, 61), ibb (1, \"\", \"\"), player_id (\"worreti01\", \"mooneji01\", \"harpeha01\"), year (1991, 1919, 1911), gs (8, 8, 1), g_idp (0, 4, \"\"), g (6, 7, 3) | manager_half : rank (9, 9, 10), g (33, 56, 34), w (6, 39, 34), half (1, 2), team_id (\"BRO\", \"CHA\", \"ML4\"), l (6, 14, 23), inseason (3, 3, 2), year (1892, 1981), player_id (\"howarfr01\", \"rodgebu01\", \"mcnamjo99\"), league_id (\"NL\", \"AL\") | team : rank (13, 7, 6), sf (62, 41, 37), lg_win (\"N\", \"Y\", \"\"), triple (0, 106, 104), bb (345, 666, 354), soa (1258, 1276, 952), w (13, 4, 22), league_id (\"FL\", \"\", \"AA\"), year (1990, 2001, 1946), e (312, 193, 205), hbp (\"\", 34, 56), ra (682, 787, 1090), wc_win (\"\", \"N\", \"Y\"), bpf (123, 86, 102), div_win (\"\", \"Y\", \"N\"), g (126, 59, 143), er (230, 866, 572), hra (15, 165, 81), name (\"Washington Blue Legs\", \"Miami Marlins\", \"Philadelphia Centennials\"), ab (1281, 5486, 5517), ghome (67, 75, 64), bba (636, 702, 564), fp (0.78, 0.87, 0.978), sv (50, 20, 8), l (82, 79, 83), cg (20, 135, 13), h (1198, 1500, 1577), div_id (\"\", \"C\", \"\"), sb (466, 217, 43), cs (157, 65, \"\"), hr (160, 83, 21), ws_win (\"\", \"N\", \"Y\"), park (\"The Ballpark at Arlington\", \"Petco Park\", \"Culver Field I\"), so (739, 1188, 622), franchise_id (\"PBB\", \"MLG\", \"CNR\"), ppf (102, 93, 103), team_id_retro (\"CL2\", \"PHN\", \"MLN\"), team_id_lahman45 (\"BFN\", \"ARI\", \"TOR\"), era (3.12, 5.26, 4.58), sho (1, 24, 24), team_id (\"MLA\", \"CIN\", \"RIC\"), ipouts (3699, 2520, 3078), dp (144, 96, 156), r (421, 935, 574), double (96, 338, 185), ha (1310, 1385, 1539), team_id_br (\"KCA\", \"BRG\", \"TBR\"), attendance (1690869, 1143257, 3758545) | pitching : h (20, 316, 45), bb (135, 171, 166), player_id (\"bradlfo01\", \"yelloch01\", \"malasma01\"), w (14, 42, 29), gf (62, 16, 55), cg (17, 2, 60), hr (3, 34, 13), so (186, 305, 66), er (129, 221, 68), league_id (\"NL\", \"UA\", \"NL\"), sh (13, 3, 1), hbp (8, \"\", 3), gs (3, 31, 25), sv (29, 11, 47), wp (38, 16, 3), r (255, 3, 153), sf (1, 11, 4), g (68, 7, 64), bfp (1275, 1017, 1848), ipouts (730, 685, 815), g_idp (0, 3, 0), ibb (7, 5, 11), team_id (\"CN1\", \"CL1\", \"ALT\"), era (1.32, 12.46, 9.53), stint (1, 4, 1), year (1895, 1897, 1928), bk (15, 5, 13), l (11, 11, 22), baopp (0.24600000000000002, 0.207, 0.431), sho (6, 2, 12) | hall_of_fame : category (\"Player\", \"Manager\", \"Pioneer/Executive\"), yearid (1992, 1966, 1981), ballots (252, 264, 292), needed_note (\"\", \"Top 20\", \"1st\"), votes (111, 421, 491), inducted (\"Y\", \"N\"), votedby (\"Special Election\", \"Final Ballot\", \"Veterans\"), player_id (\"crowlte01\", \"higgipi01\", \"stottto01\"), needed (59, 289, 145) | batting_postseason : sh (\"\", 2, 4), triple (3, 1, 3), cs (0, 1, 0), hbp (2, 4, 3), ab (24, 7, 34), hr (5, 0, 4), r (5, 3, 2), team_id (\"PHI\", \"TBA\", \"OAK\"), double (1, 1, 4), h (15, 12, 1), year (1916, 1884, 1909), league_id (\"AA\", \"NL\", \"AL\"), bb (7, 0, 9), ibb (0, 6, 1), g (11, 2, 10), rbi (4, 4, 13), round (\"NLDS1\", \"NEDIV\", \"NEDIV\"), sb (4, 2, 3), player_id (\"blancjo01\", \"cairomi01\", \"carutbo01\"), sf (\"\", \"\", 1), g_idp (5, 3, 1), so (10, 2, 3) | all_star : gp (1, 0, \"\"), team_id (\"SFG\", \"SEA\", \"LAN\"), starting_pos (1, 9, 10), year (1944, 1985, 1974), game_id (\"NLS201307160\", \"NLS201507143\", \"NLS198607150\"), league_id (\"AL\", \"NL\"), player_id (\"mesorde01\", \"harpeto01\", \"buhlbo01\"), game_num (0, 2, 1) | batting : double (1, 33, 14), ibb (18, 19, 30), stint (3, 3, 3), bb (53, 115, 101), hr (21, 40, 40), sh (50, 9, 4), so (6, 150, 122), triple (6, 18, 28), year (1874, 1981, 1899), g_idp (26, 20, 14), r (81, 76, 126), rbi (143, 97, 183), player_id (\"sewelri01\", \"bellro01\", \"ulricge01\"), ab (47, 107, 569), league_id (\"AA\", \"\", \"FL\"), sf (10, 0, 4), cs (17, 10, 9), g (131, 90, 163), sb (11, 4, 62), team_id (\"ML2\", \"CAL\", \"WS5\"), hbp (13, 5, 11), h (234, 156, 6) | player_award_vote : award_id (\"Cy Young\", \"MVP\", \"Rookie of the Year\"), year (1994, 1927, 1951), votes_first (16, 30, 23.5), points_max (140, 18, 150), league_id (\"ML\", \"AL\", \"NL\"), player_id (\"polloaj01\", \"beckro01\", \"finlech01\"), points_won (128, 359, 317) | salary_team_salary : max_salary (6025000, 12125000, 1575000), name (\"St. Louis Cardinals\", \"Brooklyn Ward's Wonders\", \"Philadelphia Whites\"), sum_salary (1365000, 588853, 1071429), min_salary (410600, 5900000, 10500000), avg_salary (533000, 2055000, 3187500) | park : park_id (\"RIC02\", \"WAS11\", \"WAS07\"), park_alias (\"Connie Mack Stadium\", \"3Com Park\", \"The Ballpark in Arlington; Ameriquest Field\"), city (\"Baltimore\", \"San Diego\", \"Collinwood\"), park_name (\"Union Park\", \"Agricultural County Fair Grounds I\", \"Ontario Beach Grounds\"), country (\"JP\", \"US\", \"AU\"), state (\"ON\", \"MD\", \"IN\") | fielding_outfield : grf (127, 105, 95), gcf (81, 128, 80), glf (113, 49, 42), player_id (\"hugheja01\", \"chippwa01\", \"wallaja02\"), year (1946, 1898, 1955), stint (1, 3, 5) | manager_award_vote : year (1986, 2002, 1994), player_id (\"martibi02\", \"mcraeha01\", \"hinchaj01\"), award_id (\"Mgr of the year\", \"Mgr of the Year\"), league_id (\"AL\", \"NL\"), votes_first (23, 19, 18), points_won (11, 11, 86), points_max (160, 28, 150) | home_game : attendance (663765, 1437446, 2655459), games (23, 68, 80), span_last (\"1880-10-01\", \"1875-10-09\", \"1883-09-03\"), openings (16, 72, 17), league_id (\"UA\", \"NL\", \"NL\"), team_id (\"PHA\", \"SLU\", \"ARI\"), year (1972, 1928, 2013), span_first (\"1982-04-12\", \"2013-04-01\", \"1985-04-12\"), park_id (\"NYC21\", \"CLE06\", \"GEA01\") | appearances : g_of (88, 20, 161), g_defense (42, 18, 75), player_id (\"geiseda01\", \"mccleza01\", \"mcglyst01\"), g_dh (137, 44, 55), g_batting (67, 5, 100), gs (105, 158, 51), team_id (\"BS1\", \"RC1\", \"PRO\"), g_lf (101, 114, 8), league_id (\"UA\", \"UA\", \"PL\"), g_pr (11, 92, 74), g_p (12, 67, 22), g_cf (121, 9, 58), g_ph (74, 40, 6), g_c (148, 140, 62), g_2b (156, 97, 108), g_rf (97, 137, 95), g_3b (40, 153, 70), g_all (65, 9, 90), year (1950, 1932, 1873), g_ss (124, 37, 89), g_1b (63, 58, 45) | player_college : player_id (\"cottedi01\", \"ernagfr01\", \"hannaja01\"), college_id (\"camodes\", \"iowast\", \"stcloudst\"), year (1926, 1929, 1939) | fielding_postseason : pb (0, 3, 3), tp (0, 1), inn_outs (175, 157, 123), round (\"AEDIV\", \"NLDS1\", \"NLWC\"), pos (\"LF\", \"CF\", \"P\"), cs (6, 10, 5), league_id (\"AL\", \"NL\"), year (2011, 1955, 1998), gs (8, \"\", 2), po (17, 8, 20), team_id (\"TOR\", \"MIN\", \"TOR\"), a (19, 32, 2), g (5, 1, 11), player_id (\"gazelmi01\", \"antonjo02\", \"hawksbl01\"), sb (12, 7, 1), e (4, 5, 2), dp (9, 4, 1) | fielding : po (1523, 1234, 1503), inn_outs (159, 2908, 3320), zr (9, 0, 8), wp (34, 26, 37), stint (2, 2, 2), team_id (\"BFN\", \"NYN\", \"PT1\"), pos (\"LF\", \"3B\", \"3B\"), cs (\"\", 12, 64), sb (27, 87, 97), pb (73, 68, 71), a (2, 34, 208), league_id (\"PL\", \"FL\", \"UA\"), e (83, 12, 31), player_id (\"johnske01\", \"haislji01\", \"vanpoto01\"), dp (22, 118, 28), year (1915, 1900, 1960), g (151, 112, 133), gs (76, 109, 11) | manager : l (68, 104, 67), year (1991, 1961, 1954), league_id (\"PL\", \"\", \"NL\"), inseason (7, 3, 8), team_id (\"HAR\", \"BL3\", \"KCN\"), player_id (\"lucchfr99\", \"mortoch01\", \"campaco01\"), w (9, 39, 12), rank (12, 8, 8), g (51, 149, 63), plyr_mgr (\"Y\", \"N\") | team_franchise : franchise_id (\"CIN\", \"SBS\", \"MLG\"), active (\"N\", \"Y\", \"\"), na_assoc (\"\", \"PNA\", \"CHC\"), franchise_name (\"Los Angeles Dodgers\", \"Toledo Maumees\", \"Minnesota Twins\") | player_award : notes (\"1B\", \"P4\", \"OF\"), award_id (\"Babe Ruth Award\", \"Lou Gehrig Memorial Award\", \"Lou Gehrig Memorial Award\"), year (1958, 1970, 1935), league_id (\"AA\", \"ML\", \"ML\"), player_id (\"archeji01\", \"langsma01\", \"beltrca01\"), tie (\"\", \"Y\") | team_half : year (1981), half (1, 2), g (55, 48, 57), rank (7, 2, 7), league_id (\"NL\", \"AL\"), div_win (\"N\"), team_id (\"ATL\", \"NYA\", \"HOU\"), l (37, 26, 36), w (18, 15, 23), div_id (\"W\", \"E\") | manager_award : player_id (\"molitpa01\", \"ozarkda99\", \"coxbo01\"), league_id (\"AL\", \"NL\", \"ML\"), tie (\"\", \"Y\"), year (1945, 1975, 2009), award_id (\"BBWAA Manager of the year\", \"TSN Manager of the Year\"), notes (\"\")",
        "ambiguous_queries": [
            "select avg(t1.salary) from salary as t1 join team as t2 on t1.team_id = t2.team_id_br where t2.name = 'Boston Red Stockings'",
            "select avg_salary from salary_team_salary where name = 'Boston Red Stockings'"
        ],
        "gold_ambiguity": {
            "match": "{\"named\": [{\"salary_team_salary\": [\"name\"]}, {\"team\": [\"name\"]}], \"average salary\": [{\"salary\": [\"salary\"]}, {\"salary_team_salary\": [\"avg_salary\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"named\" refers to the schema \"team\".\"name\", \"average salary\" refers to the schema \"salary\".\"salary\"",
        "clear_ambiguity": "{\"named\": {\"team\": [\"name\"]}, \"average salary\": {\"salary\": [\"salary\"]}}",
        "gold_query": "select avg(t1.salary) from salary as t1 join team as t2 on t1.team_id = t2.team_id_br where t2.name = 'Boston Red Stockings'"
    },
    {
        "index": 658,
        "db_id": "tracking_share_transactions",
        "ambig_type": "aggregate",
        "db_file": "aggregate/tracking_share_transactions/tracking_share_transactions.sqlite",
        "question": "Show the average share count of transactions for different investors.",
        "schema_without_content": "transactions : transaction_id , other_details , investor_id , share_count , transaction_type_code , amount_of_transaction , date_of_transaction  | ref_transaction_types : transaction_type_code , transaction_type_description  | lots : investor_id , lot_id , lot_details  | transactions_lots : transaction_id , lot_id  | investors : investor_details , investor_id  | transactions_share_count : investor_id , max_share_count , min_share_count , sum_share_count , avg_share_count  | purchases : purchase_transaction_id , purchase_details  | sales : sales_transaction_id , sales_details ",
        "schema_with_content": "transactions : transaction_id (10, 5, 14), other_details (None), investor_id (17, 3, 20), share_count (\"1654756\", \"9\", \"96178\"), transaction_type_code (\"SALE\", \"PUR\"), amount_of_transaction (1, 1, 302507.6996), date_of_transaction (\"2002-04-07 20:28:37\", \"2002-09-13 03:04:56\", \"2002-04-07 20:28:37\") | ref_transaction_types : transaction_type_code (\"PUR\", \"SALE\"), transaction_type_description (\"Sale\", \"Purchase\") | lots : investor_id (19, 7, 20), lot_id (4, 9, 5), lot_details (\"m\", \"m\", \"x\") | transactions_lots : transaction_id (6, 2, 7), lot_id (14, 14, 1) | investors : investor_details (\"t\", \"r\", \"r\"), investor_id (1, 1, 17) | transactions_share_count : investor_id (14, 3, 6), max_share_count (\"2751\", \"2751\", \"930\"), min_share_count (\"96178\", \"9\", \"93191\"), sum_share_count (\"8718572\", \"1654756\", \"2751\"), avg_share_count (\"93191\", \"8718572\", \"8040\") | purchases : purchase_transaction_id (2, 14, 14), purchase_details (\"z\", \"o\", \"h\") | sales : sales_transaction_id (9, 11, 7), sales_details (\"y\", \"o\", \"s\")",
        "ambiguous_queries": [
            "select investor_id, avg(share_count) from transactions group by investor_id",
            "select investor_id, avg_share_count from transactions_share_count"
        ],
        "gold_ambiguity": {
            "match": "{\"average share count\": [{\"transactions\": [\"share_count\"]}, {\"transactions_share_count\": [\"avg_share_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average share count\" refers to the schema \"transactions\".\"share_count\"",
        "clear_ambiguity": "{\"average share count\": {\"transactions\": [\"share_count\"]}}",
        "gold_query": "select investor_id, avg(share_count) from transactions group by investor_id"
    },
    {
        "index": 659,
        "db_id": "loan_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/loan_1/loan_1.sqlite",
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "schema_without_content": "loan : branch_id , loan_id , amount , cust_id , loan_type  | customer : cust_name , acc_type , credit_score , no_of_loans , branch_id , cust_id , acc_bal , state  | bank : state , bname , no_of_customers , city , branch_id  | bank_loan_amount : min_amount , state , max_amount , avg_amount , sum_amount ",
        "schema_with_content": "loan : branch_id (\"1\", \"2\", \"3\"), loan_id (\"1\", \"2\", \"3\"), amount (2050, 3000, 5000), cust_id (\"1\", \"3\"), loan_type (\"Mortgages\", \"Auto\", \"Business\") | customer : cust_name (\"Mary\", \"Jack\", \"Owen\"), acc_type (\"saving\", \"checking\"), credit_score (30, 20, 210), no_of_loans (2, 1, 0), branch_id (2, 1, 3), cust_id (\"1\", \"2\", \"3\"), acc_bal (2000, 1000, 800000), state (\"Utah\", \"Texas\", \"New York\") | bank : state (\"New York\", \"Utah\", \"Texas\"), bname (\"downtown\", \"morningside\", \"broadway\"), no_of_customers (123, 203, 203), city (\"New York City\", \"Salt Lake City\", \"Austin\"), branch_id (4, 1, 4) | bank_loan_amount : min_amount (2050, 3000, 5000), state (\"New York\", \"Utah\", \"Texas\"), max_amount (2050, 3000, 5000), avg_amount (2050, 3000, 5000), sum_amount (2050, 3000, 5000)",
        "ambiguous_queries": [
            "select sum(t2.amount) from bank as t1 join loan as t2 on t1.branch_id = t2.branch_id where t1.state = 'New York'",
            "select sum_amount from bank_loan_amount where state = 'New York'"
        ],
        "gold_ambiguity": {
            "match": "{\"total amount \": [{\"bank_loan_amount\": [\"sum_amount\"]}, {\"loan\": [\"amount\"]}], \"state\": [{\"bank\": [\"state\"]}, {\"bank_loan_amount\": [\"state\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total amount \" refers to the schema \"bank_loan_amount\".\"sum_amount\", \"state\" refers to the schema \"bank_loan_amount\".\"state\"",
        "clear_ambiguity": "{\"total amount \": {\"bank_loan_amount\": [\"sum_amount\"]}, \"state\": {\"bank_loan_amount\": [\"state\"]}}",
        "gold_query": "select sum_amount from bank_loan_amount where state = 'New York'"
    },
    {
        "index": 660,
        "db_id": "orchestra",
        "ambig_type": "aggregate",
        "db_file": "aggregate/orchestra/orchestra.sqlite",
        "question": "Return the average attendance across all shows.",
        "schema_without_content": "orchestra : conductor_id , major_record_format , orchestra_id , orchestra , year_of_founded , record_company  | conductor : age , nationality , year_of_work , conductor_id , name  | show_attendance : avg_attendance , min_attendance , sum_attendance , max_attendance  | performance : share , performance_id , orchestra_id , official_ratings_ , date , type , weekly_rank  | show : if_first_show , result , attendance , show_id , performance_id ",
        "schema_with_content": "orchestra : conductor_id (1, 11, 8), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra_id (7, 5, 4), orchestra (\"Detroit Symphony Orchestra\", \"Columbia Symphony Orchestra\", \"Royal Danish Orchestra\"), year_of_founded (2002.0, 2003.0, 2007.0), record_company (\"Deutsche Grammophon\", \"EMI\", \"Kultur\") | conductor : age (42, 42, 43), nationality (\"USA\", \"UK\", \"France\"), year_of_work (21, 6, 10), conductor_id (5, 10, 7), name (\"Valeri Gergiev\", \"Colin Davis\", \"Antal Brown\") | show_attendance : avg_attendance (2431.0, 1026.0, 1925.0), min_attendance (695.0, 1026.0, 555.0), sum_attendance (1925.0, 1026.0, 555.0), max_attendance (2431.0, 1925.0, 1026.0) | performance : share (\"28.0%\", \"28.0%\", \"28.0%\"), performance_id (3, 11, 2), orchestra_id (4, 6, 5), official_ratings_(millions) (9.28, 5.2, 8.36), date (\"2007\", \"14 June\", \"9 June\"), type (\"Auditions 2\", \"Live final results\", \"Auditions 1\"), weekly_rank (\"7\", \"TBC\", \"11\") | show : if_first_show (\"Fir Park\", \"Glebe Park\", \"Glebe Park\"), result (\"T\", \"F\"), attendance (1026.0, 1026.0, 2431.0), show_id (5, 2, 5), performance_id (3, 4, 5)",
        "ambiguous_queries": [
            "select avg(attendance) from show",
            "select avg_attendance from show_attendance"
        ],
        "gold_ambiguity": {
            "match": "{\"average attendance\": [{\"show\": [\"attendance\"]}, {\"show_attendance\": [\"avg_attendance\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average attendance\" refers to the schema \"show_attendance\".\"avg_attendance\"",
        "clear_ambiguity": "{\"average attendance\": {\"show_attendance\": [\"avg_attendance\"]}}",
        "gold_query": "select avg_attendance from show_attendance"
    },
    {
        "index": 661,
        "db_id": "college_3",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_3/college_3.sqlite",
        "question": "What is the average gradepoint for students with the last name Smith?",
        "schema_without_content": "member_of : appt_type , dno , facid  | enrolled_in : stuid , cid , grade  | enrolled_in_gradeconversion_student_gradepoint : max_gradepoint , min_gradepoint , lname , sum_gradepoint , avg_gradepoint  | minor_in : dno , stuid  | course : credits , instructor , days , dno , hours , cname , cid  | faculty : facid , lname , building , room , fname , sex , rank , phone  | student : major , lname , city_code , fname , advisor , age , stuid , sex  | gradeconversion : lettergrade , gradepoint  | department : dname , dno , division , dphone , building , room ",
        "schema_with_content": "member_of : appt_type (\"Primary\", \"Secondary\"), dno (600, 550, 50), facid (2291, 6925, 7506) | enrolled_in : stuid (1005, 1022, 1025), cid (\"050.325\", \"550.681\", \"600.113\"), grade (\"D\", \"D+\", \"C-\") | enrolled_in_gradeconversion_student_gradepoint : max_gradepoint (3.3, 0.7, 2.3), min_gradepoint (1.7, 1.7, 1.0), lname (\"Jones\", \"Norris\", \"Davis\"), sum_gradepoint (3.3, 3.7, 4.0), avg_gradepoint (3.7, 0.0, 1.0) | minor_in : dno (530, 520, 190), stuid (1031, 1007, 1004) | course : credits (4, 2, 4), instructor (7712, 6182, 8791), days (\"MT\", \"MT\", \"Tu\"), dno (600, 520, 50), hours (\"11\", \"4\", \"10-12\"), cname (\"INTRO TO NATURAL LANGUAGE PROCESSING\", \"COMPUTER LITERACY\", \"STATISTICAL ANALYSIS\"), cid (\"550.471\", \"550.721\", \"550.631\") | faculty : facid (1177, 9643, 7271), lname (\"Taylor\", \"Awerbuch\", \"James\"), building (\"NEB\", \"Barton\", \"Krieger\"), room (\"119\", \"324A\", \"224\"), fname (\"Lancelot\", \"Jacob\", \"Gert\"), sex (\"M\", \"F\"), rank (\"Instructor\", \"Professor\", \"AsstProf\"), phone (2184, 5427, 2424) | student : major (600, 600, 50), lname (\"Schwartz\", \"Lee\", \"Andreou\"), city_code (\"PIT\", \"PEK\", \"HKG\"), fname (\"Shiela\", \"Michael\", \"Tracy\"), advisor (1148, 7792, 1148), age (16, 16, 18), stuid (1019, 1005, 1002), sex (\"F\", \"M\") | gradeconversion : lettergrade (\"A\", \"D\", \"A\"), gradepoint (3.3, 1.7, 1.0) | department : dname (\"Mathematics\", \"History of Art\", \"Mathematical Sciences\"), dno (180, 60, 40), division (\"AS\", \"EN\"), dphone (8577, 7347, 7033), building (\"NEB\", \"Mergenthaler\", \"NEB\"), room (\"221\", \"312\", \"221\")",
        "ambiguous_queries": [
            "select avg(t2.gradepoint) from enrolled_in as t1 join gradeconversion as t2 join student as t3 on t1.grade = t2.lettergrade and t1.stuid = t3.stuid where t3.lname = 'Smith'",
            "select avg_gradepoint from enrolled_in_gradeconversion_student_gradepoint where lname = 'Smith'"
        ],
        "gold_ambiguity": {
            "match": "{\"average gradepoint\": [{\"enrolled_in_gradeconversion_student_gradepoint\": [\"avg_gradepoint\"]}, {\"gradeconversion\": [\"gradepoint\"]}], \"last name\": [{\"enrolled_in_gradeconversion_student_gradepoint\": [\"lname\"]}, {\"student\": [\"lname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average gradepoint\" refers to the schema \"enrolled_in_gradeconversion_student_gradepoint\".\"avg_gradepoint\", \"last name\" refers to the schema \"enrolled_in_gradeconversion_student_gradepoint\".\"lname\"",
        "clear_ambiguity": "{\"average gradepoint\": {\"enrolled_in_gradeconversion_student_gradepoint\": [\"avg_gradepoint\"]}, \"last name\": {\"enrolled_in_gradeconversion_student_gradepoint\": [\"lname\"]}}",
        "gold_query": "select avg_gradepoint from enrolled_in_gradeconversion_student_gradepoint where lname = 'Smith'"
    },
    {
        "index": 662,
        "db_id": "entertainment_awards",
        "ambig_type": "aggregate",
        "db_file": "aggregate/entertainment_awards/entertainment_awards.sqlite",
        "question": "What is the average number of audience for festivals?",
        "schema_without_content": "festival_detail_num_of_audience : avg_num_of_audience , min_num_of_audience , sum_num_of_audience , max_num_of_audience  | nomination : result , artwork_id , festival_id  | festival_detail : year , location , festival_name , chair_name , festival_id , num_of_audience  | artwork : artwork_id , type , name ",
        "schema_with_content": "festival_detail_num_of_audience : avg_num_of_audience (160, 161, 152), min_num_of_audience (155, 155, 160), sum_num_of_audience (160, 152, 155), max_num_of_audience (155, 155, 155) | nomination : result (\"Nominated\", \"Won\"), artwork_id (9, 9, 3), festival_id (2, 1, 5) | festival_detail : year (2010, 2008, 2006), location (\"United States\"), festival_name (\"LA Awards\", \"LA Awards\", \"Flower Awards\"), chair_name (\"Lucy Lu\", \"Doug Ford\", \"Lucy Lu\"), festival_id (3, 1, 4), num_of_audience (161, 160, 155) | artwork : artwork_id (4, 6, 1), type (\"Program Music/Variety Show\", \"Program Talent Show\", \"Program Talent Show\"), name (\"Martin\", \"Daniel Mananta\", \"Loving you\")",
        "ambiguous_queries": [
            "select avg(num_of_audience) from festival_detail",
            "select avg_num_of_audience from festival_detail_num_of_audience"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of audience\": [{\"festival_detail\": [\"num_of_audience\"]}, {\"festival_detail_num_of_audience\": [\"avg_num_of_audience\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of audience\" refers to the schema \"festival_detail_num_of_audience\".\"avg_num_of_audience\"",
        "clear_ambiguity": "{\"average number of audience\": {\"festival_detail_num_of_audience\": [\"avg_num_of_audience\"]}}",
        "gold_query": "select avg_num_of_audience from festival_detail_num_of_audience"
    },
    {
        "index": 663,
        "db_id": "college_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_1/college_1.sqlite",
        "question": "What is the name and the average gpa of department whose students have the highest average gpa?",
        "schema_without_content": "employee : emp_fname , emp_jobcode , emp_num , emp_initial , emp_dob , emp_lname , emp_hiredate  | student : dept_code , stu_lname , stu_fname , stu_class , stu_transfer , stu_gpa , stu_num , stu_init , prof_num , stu_dob , stu_hrs , stu_phone  | student_department_stu_gpa : avg_stu_gpa , min_stu_gpa , dept_name , max_stu_gpa , sum_stu_gpa  | enroll : stu_num , enroll_grade , class_code  | department : dept_code , dept_name , school_code , dept_extension , emp_num , dept_address  | class : class_room , class_time , crs_code , class_section , class_code , prof_num  | course : crs_description , crs_credit , crs_code , dept_code  | professor : prof_high_degree , prof_extension , emp_num , dept_code , prof_office ",
        "schema_with_content": "employee : emp_fname (\"Doreen\", \"Jill\", \"James\"), emp_jobcode (\"PROF\", \"CUST\", \"PROF\"), emp_num (228, 425, 299), emp_initial (\"H\", \"B\", \"O\"), emp_dob (\"1941-3-4\", \"1945-3-15\", \"1950-7-4\"), emp_lname (\"Smithson\", \"Dexter\", \"Graztevski\"), emp_hiredate (\"1994-2-21\", \"1985-6-24\", \"1988-8-1\") | student : dept_code (\"ENGL\", \"EDU\", \"CIS\"), stu_lname (\"Bowser\", \"Brewer\", \"Smithson\"), stu_fname (\"William\", \"Anne\", \"Raphael\"), stu_class (\"Sr\", \"Sr\", \"Jr\"), stu_transfer (0, 1), stu_gpa (3.27, 3.27, 2.11), stu_num (324299, 324257, 324274), stu_init (\"D\", \"C\", \"P\"), prof_num (228, 228, 311), stu_dob (\"1973-4-8\", \"1973-4-8\", \"1979-10-21\"), stu_hrs (114, 114, 36), stu_phone (\"2267\", \"2256\", \"2134\") | student_department_stu_gpa : avg_stu_gpa (3.09, 3.87, 3.09), min_stu_gpa (3.87, 2.84, 2.92), dept_name (\"Marketing/Management\", \"History\", \"Marketing/Management\"), max_stu_gpa (3.27, 2.11, 2.11), sum_stu_gpa (3.15, 2.92, 3.27) | enroll : stu_num (321452, 324257), enroll_grade (\"C\", \"B\", \"A\"), class_code (\"10014\", \"10018\", \"10021\") | department : dept_code (\"ECON/FIN\", \"MKT/MGT\", \"PSYCH\"), dept_name (\"Psychology\", \"Economics/Finance\", \"Accounting\"), school_code (\"BUS\", \"A&SCI\"), dept_extension (\"2278\", \"1867\", \"4117\"), emp_num (299, 387, 160), dept_address (\"AAK 194, Box 422\", \"KLR 211, Box 52\", \"KLR 126, Box 55\") | class : class_room (\"BUS200\", \"BUS252\", \"KLR211\"), class_time (\"MWF 9:00-9:50 a.m.\", \"TTh 1:00-2:15 p.m.\", \"MWF 8:00-8:50 a.m.\"), crs_code (\"CIS-220\", \"CIS-420\", \"ACCT-211\"), class_section (\"1\", \"2\", \"3\"), class_code (\"10017\", \"10017\", \"10016\"), prof_num (105, 228, 162) | course : crs_description (\"Accounting II\", \"Accounting II\", \"Intro. to Statistics\"), crs_credit (3.0, 4.0), crs_code (\"ACCT-211\", \"CIS-420\", \"QM-362\"), dept_code (\"ACCT\", \"CIS\") | professor : prof_high_degree (\"MBA\", \"MBA\", \"DBA\"), prof_extension (\"8665\", \"2000\", \"3899\"), emp_num (160, 106, 297), dept_code (\"ACCT\", \"ART\", \"ENG\"), prof_office (\"KLR 211\", \"KLR 300\", \"KLR 211\")",
        "ambiguous_queries": [
            "select t2.dept_name, avg(t1.stu_gpa) from student as t1 join department as t2 on t1.dept_code = t2.dept_code group by t1.dept_code order by avg(t1.stu_gpa) desc limit 1",
            "select dept_name, avg_stu_gpa from student_department_stu_gpa"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"department\": [\"dept_name\"]}, {\"student_department_stu_gpa\": [\"dept_name\"]}], \"average gpa\": [{\"student\": [\"stu_gpa\"]}, {\"student_department_stu_gpa\": [\"avg_stu_gpa\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"student_department_stu_gpa\".\"dept_name\", \"average gpa\" refers to the schema \"student_department_stu_gpa\".\"avg_stu_gpa\"",
        "clear_ambiguity": "{\"name\": {\"student_department_stu_gpa\": [\"dept_name\"]}, \"average gpa\": {\"student_department_stu_gpa\": [\"avg_stu_gpa\"]}}",
        "gold_query": "select dept_name, avg_stu_gpa from student_department_stu_gpa"
    },
    {
        "index": 664,
        "db_id": "university_basketball",
        "ambig_type": "aggregate",
        "db_file": "aggregate/university_basketball/university_basketball.sqlite",
        "question": "What are the total enrollments of universities of each affiliation type?",
        "schema_without_content": "university : school_id , primary_conference \", \"Atlantic 10 Conference \", \"American Athletic Conference \", affiliation , nickname , founded , enrollment , location , school  | basketball_match : all_road , all_games , acc_percent , school_id , acc_road , acc_home , acc_regular_season , all_home , team_name , all_games_percent , team_id , all_neutral  | university_enrollment : sum_enrollment , min_enrollment , affiliation , max_enrollment , avg_enrollment ",
        "schema_with_content": "university : school_id (3, 4, 5), primary_conference (\"America East Conference ( D-I )\", \"Atlantic 10 Conference ( D-I )\", \"American Athletic Conference ( D-I )\"), affiliation (\"Public\", \"Private/Methodist\"), nickname (\"Flying Dutchmen\", \"Fightin' Blue Hens\", \"Fightin' Blue Hens\"), founded (1766.0, 1766.0, 1957.0), enrollment (2100.0, 19067.0, 2100.0), location (\"Annville, PA\", \"Kingston, RI\", \"Kingston, RI\"), school (\"Rutgers University\", \"Lebanon Valley College\", \"University of Delaware\") | basketball_match : all_road (\"6â5\", \"8â2\", \"8â2\"), all_games (\"21â14\", \"24â10\", \"21â14\"), acc_percent (\".625\", \".563\", \".875\"), school_id (4, 4, 2), acc_road (\"8â0\", \"6â2\", \"3â5\"), acc_home (\"6â2\", \"7â1\"), acc_regular_season (\"13â3\", \"9â7\", \"14â2\"), all_home (\"14â2\", \"15â1\", \"14â3\"), team_name (\"North Carolina\", \"Duke\", \"Virginia Tech\"), all_games_percent (0.824, 0.824, 0.706), team_id (4, 2, 2), all_neutral (\"5â3\", \"5â3\", \"4â3\") | university_enrollment : sum_enrollment (23997.0, 19067.0, 2100.0), min_enrollment (19067.0, 19095.0, 56868.0), affiliation (\"Public\", \"Private/Methodist\"), max_enrollment (19067.0, 2100.0, 19095.0), avg_enrollment (56868.0, 19067.0, 2100.0)",
        "ambiguous_queries": [
            "select sum(enrollment), affiliation from university group by affiliation",
            "select sum_enrollment, affiliation from university_enrollment"
        ],
        "gold_ambiguity": {
            "match": "{\"affiliation\": [{\"university\": [\"affiliation\"]}, {\"university_enrollment\": [\"affiliation\"]}], \"total enrollments\": [{\"university\": [\"enrollment\"]}, {\"university_enrollment\": [\"sum_enrollment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"affiliation\" refers to the schema \"university_enrollment\".\"affiliation\", \"total enrollments\" refers to the schema \"university_enrollment\".\"sum_enrollment\"",
        "clear_ambiguity": "{\"affiliation\": {\"university_enrollment\": [\"affiliation\"]}, \"total enrollments\": {\"university_enrollment\": [\"sum_enrollment\"]}}",
        "gold_query": "select sum_enrollment, affiliation from university_enrollment"
    },
    {
        "index": 665,
        "db_id": "customers_and_products_contacts",
        "ambig_type": "aggregate",
        "db_file": "aggregate/customers_and_products_contacts/customers_and_products_contacts.sqlite",
        "question": "Show the product name and total order quantity for each product.",
        "schema_without_content": "products_order_items_order_quantity : product_name , min_order_quantity , sum_order_quantity , max_order_quantity , avg_order_quantity  | customers : customer_address , customer_id , customer_number , customer_name , customer_phone 5279161988\", \"387.053.1225\", \"1-271-345-4681x1131\", customer_email , payment_method_code  | customer_orders : order_status_code , order_id , order_date , customer_id  | contacts : contact_id , gender , contact_phone 1807022818\", \"00414184198\", last_name , first_name , customer_id  | products : product_price , product_type_code , product_id , product_name  | customer_address_history : date_to , customer_id , address_id , date_from  | order_items : order_quantity , order_item_id , product_id , order_id  | addresses : country , line_1_number_building , zip_postcode , address_id , city , state_province_county ",
        "schema_with_content": "products_order_items_order_quantity : product_name (\"Apple\", \"gucci\", \"gucci\"), min_order_quantity (\"9\", \"7\", \"2\"), sum_order_quantity (\"3\", \"4\", \"4\"), max_order_quantity (\"male\", \"2\", \"3\"), avg_order_quantity (\"male\", \"5\", \"7\") | customers : customer_address (\"4098 Kreiger Knoll Suite 758\", \"91702 Hilpert Pines Suite 177\", \"650 Spencer Way Apt. 584\"), customer_id (15, 12, 7), customer_number (\"525\", \"525\", \"795\"), customer_name (\"Ottilie\", \"Orion\", \"Cecelia\"), customer_phone (\"+87(9)5279161988\", \"387.053.1225\", \"1-271-345-4681x1131\"), customer_email (\"caesar.lemke@example.net\", \"macy.huel@example.org\", \"kip.abernathy@example.com\"), payment_method_code (\"Credit Card\", \"Direct Debit\") | customer_orders : order_status_code (\"Completed\", \"Part\"), order_id (10, 5, 4), order_date (\"1972-03-17 21:42:29\", \"1972-03-17 21:42:29\", \"1976-05-28 15:02:44\"), customer_id (2, 3, 2) | contacts : contact_id (8, 11, 5), gender (\"male\", \"female\"), contact_phone (\"136.724.5322\", \"+96(5)1807022818\", \"00414184198\"), last_name (\"Little\", \"Streich\", \"Buckridge\"), first_name (\"Skye\", \"Shyann\", \"Danika\"), customer_id (15, 8, 14) | products : product_price (5927021.8748021, 622.79275984494, 22956668.699482), product_type_code (\"Hardware\", \"Clothes\"), product_id (14, 1, 10), product_name (\"jcrew\", \"jcrew\", \"Sony\") | customer_address_history : date_to (\"2018-02-27 07:31:19\", \"2018-03-08 23:31:30\", \"2018-03-08 23:31:30\"), customer_id (6, 11, 2), address_id (9, 15, 12), date_from (\"2009-05-22 04:42:28\", \"2009-05-22 04:42:28\", \"2014-11-17 15:11:26\") | order_items : order_quantity (\"8\", \"3\", \"3\"), order_item_id (4, 8, 9), product_id (5, 11, 5), order_id (9, 7, 7) | addresses : country (\"USA\"), line_1_number_building (\"494 Bruen Radial Apt. 723\", \"9590 Rogahn Point Apt. 466\", \"65854 McKenzie Tunnel\"), zip_postcode (\"505\", \"564\", \"282\"), address_id (2, 9, 5), city (\"Gilbertmouth\", \"East Rickey\", \"West Muriel\"), state_province_county (\"Oklahoma\", \"Virginia\", \"Idaho\")",
        "ambiguous_queries": [
            "select t1.product_name, sum(t2.order_quantity) from products as t1 join order_items as t2 on t1.product_id = t2.product_id group by t1.product_id",
            "select product_name, sum_order_quantity from products_order_items_order_quantity"
        ],
        "gold_ambiguity": {
            "match": "{\"total order quantity\": [{\"order_items\": [\"order_quantity\"]}, {\"products_order_items_order_quantity\": [\"sum_order_quantity\"]}], \"product name\": [{\"products\": [\"product_name\"]}, {\"products_order_items_order_quantity\": [\"product_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total order quantity\" refers to the schema \"products_order_items_order_quantity\".\"sum_order_quantity\", \"product name\" refers to the schema \"products_order_items_order_quantity\".\"product_name\"",
        "clear_ambiguity": "{\"total order quantity\": {\"products_order_items_order_quantity\": [\"sum_order_quantity\"]}, \"product name\": {\"products_order_items_order_quantity\": [\"product_name\"]}}",
        "gold_query": "select product_name, sum_order_quantity from products_order_items_order_quantity"
    },
    {
        "index": 666,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?",
        "schema_without_content": "files_song_duration_rating : avg_duration , sum_duration , avg_rating , sum_rating , genre_is , max_duration , min_rating , max_rating , min_duration  | artist : gender , preferred_genre , artist_name , country  | song : song_name , genre_is , artist_name , rating , country , resolution , f_id , releasedate , languages  | files : formats , artist_name , file_size , duration , f_id  | genre : rating , g_name , most_popular_in ",
        "schema_with_content": "files_song_duration_rating : avg_duration (\"2:56\", \"3:45\", \"3:45\"), sum_duration (\"5:23\", \"3:45\", \"4:34\"), avg_rating (6, 7, 8), sum_rating (6, 10, 5), genre_is (\"pop\", \"blues\", \"nazrul\"), max_duration (\"2:56\", \"5:23\", \"4:34\"), min_rating (10, 5, 5), max_rating (10, 6, 8), min_duration (\"5:23\", \"4:30\", \"4:30\") | artist : gender (\"Male\", \"Female\"), preferred_genre (\"blues\", \"pop\", \"modern\"), artist_name (\"Shrikanta\", \"Farida\", \"Shrikanta\"), country (\"USA\", \"UK\", \"UK\") | song : song_name (\"Aj ei akash\", \"Tumi robe nirobe\", \"Ami opar hoye\"), genre_is (\"folk\", \"pop\", \"tagore\"), artist_name (\"Farida\", \"Enrique\", \"Shrikanta\"), rating (8, 10, 5), country (\"UK\", \"USA\", \"USA\"), resolution (320, 320, 1080), f_id (4, 2, 2), releasedate (\"24-JAN-2007\", \"17-MAR-2002\", \"7-APR-2001\"), languages (\"bangla\", \"english\") | files : formats (\"mp4\", \"mp3\"), artist_name (\"Topu\", \"Enrique\", \"Farida\"), file_size (\"3.78 MB\", \"3.69 MB\", \"5.10 MB\"), duration (\"4:34\", \"4:12\", \"4:34\"), f_id (6, 2, 1) | genre : rating (\"8\", \"7\", \"9\"), g_name (\"pop\", \"folk\", \"nazrul\"), most_popular_in (\"Canada\", \"Sylhet,Chittagong,Kustia\", \"Canada\")",
        "ambiguous_queries": [
            "select min(t1.duration), min(t2.rating), t2.genre_is from files as t1 join song as t2 on t1.f_id = t2.f_id group by t2.genre_is order by t2.genre_is",
            "select min_duration, min_rating, genre_is from files_song_duration_rating"
        ],
        "gold_ambiguity": {
            "match": "{\"genre\": [{\"files_song_duration_rating\": [\"genre_is\"]}, {\"song\": [\"genre_is\"]}], \"shortest\": [{\"files\": [\"duration\"]}, {\"files_song_duration_rating\": [\"min_duration\"]}], \"most poorly rated\": [{\"files\": [\"rating\"]}, {\"files_song_duration_rating\": [\"min_rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"genre\" refers to the schema \"song\".\"genre_is\", \"shortest\" refers to the schema \"files\".\"duration\", \"most poorly rated\" refers to the schema \"files\".\"rating\"",
        "clear_ambiguity": "{\"genre\": {\"song\": [\"genre_is\"]}, \"shortest\": {\"files\": [\"duration\"]}, \"most poorly rated\": {\"files\": [\"rating\"]}}",
        "gold_query": "select min(t1.duration), min(t2.rating), t2.genre_is from files as t1 join song as t2 on t1.f_id = t2.f_id group by t2.genre_is order by t2.genre_is"
    },
    {
        "index": 667,
        "db_id": "store_product",
        "ambig_type": "aggregate",
        "db_file": "aggregate/store_product/store_product.sqlite",
        "question": "What is the total number of residents for the districts with the 3 largest areas?",
        "schema_without_content": "store_product : product_id , store_id  | district_city_population : max_city_population , sum_city_population , avg_city_population , min_city_population  | product : dpi , interface , max_page_size , product_id , pages_per_minute_color , dimensions , product  | store_district : store_id , district_id  | store : store_id , area_size , ranking , store_name , type , number_of_product_category  | district : city_population , district_name , city_area , district_id , headquartered_city ",
        "schema_with_content": "store_product : product_id (2, 2, 1), store_id (2, 1, 1) | district_city_population : max_city_population (165038.0, 113524.0, 365198.0), sum_city_population (165936.0, 165038.0, 365198.0), avg_city_population (328512.0, 2793721.0, 328512.0), min_city_population (314617.0, 365198.0, 94620.0) | product : dpi (600.0), interface (\"USB 2.0\"), max_page_size (\"A4\", \"216mm x 356mm\", \"216mm x 355mm\"), product_id (4, 5, 2), pages_per_minute_color (28.0, 10.0, 3.0), dimensions (\"300 x 50 x 45\", \"303 x 94 x 60\", \"280 x 95 x 40\"), product (\"Plustek MobileOffice D28 Corporate\", \"Xerox Travel Scanner 100\", \"Xerox Travel Scanner 100\") | store_district : store_id (2, 4, 2), district_id (11, 15, 11) | store : store_id (2, 3, 2), area_size (7.23, 28.74, 7.23), ranking (10, 9, 2), store_name (\"Neguac\", \"Miramichi\", \"Neguac\"), type (\"City Mall\", \"Village Store\"), number_of_product_category (17811.0, 990.0, 1678.0) | district : city_population (94620.0, 165936.0, 1526168.0), district_name (\"Gujrat District\", \"Hafizabad District\", \"Jhelum District\"), city_area (18.0, 25.0, 20.0), district_id (4, 3, 1), headquartered_city (\"Gujrat City\", \"Gujrat City\", \"Gujranwala City\")",
        "ambiguous_queries": [
            "select sum(city_population) from district order by city_area desc limit 3",
            "select sum_city_population from district_city_population"
        ],
        "gold_ambiguity": {
            "match": "{\"total number of residents\": [{\"district\": [\"city_population\"]}, {\"district_city_population\": [\"sum_city_population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total number of residents\" refers to the schema \"district\".\"city_population\"",
        "clear_ambiguity": "{\"total number of residents\": {\"district\": [\"city_population\"]}}",
        "gold_query": "select sum(city_population) from district order by city_area desc limit 3"
    },
    {
        "index": 668,
        "db_id": "medicine_enzyme_interaction",
        "ambig_type": "aggregate",
        "db_file": "aggregate/medicine_enzyme_interaction/medicine_enzyme_interaction.sqlite",
        "question": "What is the maximum OMIM value in the database?",
        "schema_without_content": "medicine : fda_approved , name , id , trade_name  | enzyme_omim : avg_omim , min_omim , max_omim , sum_omim  | medicine_enzyme_interaction : medicine_id , interaction_type , enzyme_id  | enzyme : id , porphyria , name , product , chromosome , omim , location ",
        "schema_with_content": "medicine : fda_approved (\"No\", \"Yes\"), name (\"Amisulpride\", \"Melperone\", \"Perospirone\"), id (19, 2, 16), trade_name (\"Prazinil\", \"Seroquel\", \"Saphris\") | enzyme_omim : avg_omim (600923, 125270, 125270), min_omim (125270, 176100, 125270), max_omim (176100, 121300, 125290), sum_omim (600923, 125270, 177000) | medicine_enzyme_interaction : medicine_id (8, 8, 19), interaction_type (\"inhibitor\", \"activitor\"), enzyme_id (6, 5, 4) | enzyme : id (5, 5, 3), porphyria (\"coproporphyria\", \"coproporphyria\", \"ALA-Dehydratase deficiency\"), name (\"PBG deaminase\", \"PBG deaminase\", \"Coproporphyrinogen III oxidase\"), product (\"Uroporphyrinogen III\", \"Coproporphyrinogen III\", \"Coproporphyrinogen III\"), chromosome (\"11q23.3\", \"10q25.2-q26.3\", \"3q12\"), omim (125290, 121300, 121300), location (\"Mitochondrion\", \"Cytosol\")",
        "ambiguous_queries": [
            "select max(omim) from enzyme",
            "select max_omim from enzyme_omim"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum OMIM\": [{\"enzyme\": [\"omim\"]}, {\"enzyme_omim\": [\"max_omim\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum OMIM\" refers to the schema \"enzyme_omim\".\"max_omim\"",
        "clear_ambiguity": "{\"maximum OMIM\": {\"enzyme_omim\": [\"max_omim\"]}}",
        "gold_query": "select max_omim from enzyme_omim"
    },
    {
        "index": 669,
        "db_id": "customers_and_invoices",
        "ambig_type": "aggregate",
        "db_file": "aggregate/customers_and_invoices/customers_and_invoices.sqlite",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "schema_without_content": "order_items : product_id , product_quantity , order_item_id , other_order_item_details , order_id  | financial_transactions : other_transaction_details , transaction_date , transaction_comment , transaction_amount , invoice_number , transaction_type , account_id , transaction_id  | invoices : invoice_number , invoice_date , order_id  | customers : login_password , customer_first_name , email_address , phone_number 046-6255x98627\", country , customer_middle_initial , town_city , customer_id , login_name , customer_last_name , gender , state_county_province  | accounts : account_id , other_account_details , customer_id , date_account_opened , account_name  | products : parent_product_id , product_id , production_type_code , product_name , unit_price , product_color , product_size  | product_categories : product_type_description , vat_rating , production_type_code  | orders : date_order_placed , customer_id , order_details , order_id  | order_items_products_product_quantity : min_product_quantity , avg_product_quantity , sum_product_quantity , max_product_quantity , product_name  | invoice_line_items : invoice_number , order_item_id , derived_total_cost , derived_vat_payable , product_title , product_price , derived_product_cost , product_quantity , product_id ",
        "schema_with_content": "order_items : product_id (12, 10, 12), product_quantity (\"4\", \"2\", \"5\"), order_item_id (13, 9, 3), other_order_item_details (None), order_id (2, 14, 1) | financial_transactions : other_transaction_details (None), transaction_date (\"2018-03-03 01:50:25\", \"2018-03-05 19:55:23\", \"2018-03-14 19:09:07\"), transaction_comment (None), transaction_amount (1903.41, 1585.03, 540.73), invoice_number (15, 2, 3), transaction_type (\"Payment\", \"Refund\"), account_id (9, 12, 11), transaction_id (6, 3, 14) | invoices : invoice_number (1, 14, 3), invoice_date (\"2018-03-05 08:47:33\", \"2018-03-15 21:24:13\", \"2018-03-05 08:47:33\"), order_id (13, 5, 12) | customers : login_password (\"e67856613cd71f1b2884\", \"d7629de5171fe29106c8\", \"5fe7c12dc3176ddf67c4\"), customer_first_name (\"Devin\", \"Zita\", \"Devin\"), email_address (\"homenick.ambrose@example.net\", \"roosevelt.collier@example.org\", \"homenick.ambrose@example.net\"), phone_number (\"241.796.1219x37862\", \"197-955-3766\", \"(157)046-6255x98627\"), country (\"USA\"), customer_middle_initial (\"M\", \"E\", \"K\"), town_city (\"Ellaburgh\", \"Bruenchester\", \"West Khaliltown\"), customer_id (8, 4, 6), login_name (\"ypowlowski\", \"dubuque.gina\", \"rubye.padberg\"), customer_last_name (\"Auer\", \"Schaefer\", \"Keeling\"), gender (\"1\", \"0\"), state_county_province (\"Kansas\", \"Colorado\", \"Arkansas\") | accounts : account_id (10, 15, 5), other_account_details (\"Regular\", \"VIP\"), customer_id (13, 3, 3), date_account_opened (\"2008-05-04 22:15:56\", \"2015-02-02 09:47:08\", \"2017-05-29 16:45:17\"), account_name (\"323\", \"390\", \"337\") | products : parent_product_id (1, 2, 5), product_id (9, 8, 4), production_type_code (\"DVDs\", \"Food\", \"Food\"), product_name (\"TV\", \"Arts\", \"Art History\"), unit_price (469.87, 639.76, 682.06), product_color (\"Red\", \"Yellow\", \"Black\"), product_size (\"Medium\", \"Small\", \"Large\") | product_categories : product_type_description (\"Dvd products\", \"Food\", \"Food\"), vat_rating (11.4, 13.95, 13.95), production_type_code (\"Books\", \"Electronics\", \"Books\") | orders : date_order_placed (\"2010-10-22 06:45:16\", \"2015-11-25 22:55:41\", \"2017-11-27 21:50:58\"), customer_id (8, 1, 14), order_details (None), order_id (14, 14, 3) | order_items_products_product_quantity : min_product_quantity (\"1\", \"9\", \"6\"), avg_product_quantity (\"3\", \"3\", \"3\"), sum_product_quantity (\"5\", \"9\", \"9\"), max_product_quantity (\"1\", \"3\", \"7\"), product_name (\"Coffee Bean\", \"Harry Potter 3\", \"TV\") | invoice_line_items : invoice_number (10, 5, 14), order_item_id (11, 10, 6), derived_total_cost (78.26, 78.26, 82.77), derived_vat_payable (None), product_title (\"prod_name\"), product_price (556.36, 429.05, 942.99), derived_product_cost (66, 254.08, 89.16), product_quantity (\"4\", \"6\", \"6\"), product_id (9, 9, 3)",
        "ambiguous_queries": [
            "select t2.product_name, sum(t1.product_quantity) from order_items as t1 join products as t2 on t1.product_id = t2.product_id group by t2.product_name",
            "select product_name, sum_product_quantity from order_items_products_product_quantity"
        ],
        "gold_ambiguity": {
            "match": "{\"product name\": [{\"order_items_products_product_quantity\": [\"product_name\"]}, {\"products\": [\"product_name\"]}], \"total quantity\": [{\"order_items\": [\"product_quantity\"]}, {\"order_items_products_product_quantity\": [\"sum_product_quantity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"product name\" refers to the schema \"order_items_products_product_quantity\".\"product_name\", \"total quantity\" refers to the schema \"order_items_products_product_quantity\".\"sum_product_quantity\"",
        "clear_ambiguity": "{\"product name\": {\"order_items_products_product_quantity\": [\"product_name\"]}, \"total quantity\": {\"order_items_products_product_quantity\": [\"sum_product_quantity\"]}}",
        "gold_query": "select product_name, sum_product_quantity from order_items_products_product_quantity"
    },
    {
        "index": 670,
        "db_id": "candidate_poll",
        "ambig_type": "aggregate",
        "db_file": "aggregate/candidate_poll/candidate_poll.sqlite",
        "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "schema_without_content": "people : people_id , weight , date_of_birth , sex , name , height  | people_candidate_oppose_rate : max_oppose_rate , name , sex , sum_oppose_rate , min_oppose_rate , avg_oppose_rate  | candidate : consider_rate , candidate_id , date , support_rate , unsure_rate , people_id , poll_source , oppose_rate ",
        "schema_with_content": "people : people_id (9, 8, 5), weight (94.0, 85.0, 89.0), date_of_birth (\"06.10.1976\", \"10.03.1976\", \"03.02.1976\"), sex (\"M\", \"F\"), name (\"LoÃ¯c De Kergret\", \"StÃ©phane Antiga\", \"Guillaume Samica\"), height (202.0, 202.0, 193.0) | people_candidate_oppose_rate : max_oppose_rate (0.45, 0.43, 0.44), name (\"Philippe BarÃ§a-Cysique\", \"StÃ©phane Antiga\", \"Philippe BarÃ§a-Cysique\"), sex (\"M\", \"F\"), sum_oppose_rate (0.32, 0.45, 0.32), min_oppose_rate (0.44, 0.32, 0.43), avg_oppose_rate (0.45, 0.43, 0.43) | candidate : consider_rate (0.2, 0.2, 0.3), candidate_id (1, 3, 6), date (\"Feb 12â15, 2007\", \"Feb 13â14, 2007\", \"Nov 9â10, 2006\"), support_rate (0.17, 0.17, 0.33), unsure_rate (0.2, 0.3, 0.9), people_id (7, 6, 1), poll_source (\"WNBC/Marist Poll\", \"FOX News/Opinion Dynamics Poll\", \"Newsweek Poll\"), oppose_rate (0.32, 0.32, 0.32)",
        "ambiguous_queries": [
            "select t1.name, t1.sex, min(oppose_rate) from people as t1 join candidate as t2 on t1.people_id = t2.people_id group by t1.sex",
            "select name, sex, min_oppose_rate from people_candidate_oppose_rate"
        ],
        "gold_ambiguity": {
            "match": "{\"lowest\": [{\"people\": [\"oppose_rate\"]}, {\"people_candidate_oppose_rate\": [\"min_oppose_rate\"]}], \"name\": [{\"people\": [\"name\"]}, {\"people_candidate_oppose_rate\": [\"name\"]}], \"sex\": [{\"people\": [\"sex\"]}, {\"people_candidate_oppose_rate\": [\"sex\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"lowest\" refers to the schema \"people\".\"oppose_rate\", \"name\" refers to the schema \"people\".\"name\", \"sex\" refers to the schema \"people\".\"sex\"",
        "clear_ambiguity": "{\"lowest\": {\"people\": [\"oppose_rate\"]}, \"name\": {\"people\": [\"name\"]}, \"sex\": {\"people\": [\"sex\"]}}",
        "gold_query": "select t1.name, t1.sex, min(oppose_rate) from people as t1 join candidate as t2 on t1.people_id = t2.people_id group by t1.sex"
    },
    {
        "index": 671,
        "db_id": "gas_company",
        "ambig_type": "aggregate",
        "db_file": "aggregate/gas_company/gas_company.sqlite",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "schema_without_content": "company_market_value : avg_market_value , max_market_value , min_market_value , sum_market_value  | station_company : company_id , station_id , rank_of_the_year  | gas_station : location , vice_manager_name , manager_name , open_year , station_id , representative_name  | company : main_industry , profits_billion , company_id , rank , sales_billion , assets_billion , headquarters , company , market_value ",
        "schema_with_content": "company_market_value : avg_market_value (213.7, 294.7, 294.7), max_market_value (202.2, 294.7, 213.7), min_market_value (227.6, 213.7, 180.0), sum_market_value (202.2, 164.3, 147.4) | station_company : company_id (6, 10, 3), station_id (4, 7, 1), rank_of_the_year (2, 1, 4) | gas_station : location (\"Herne Ave\", \"Hennry Hill\", \"Herne St\"), vice_manager_name (\"Simon Gaywood\", \"Russell Denman\", \"James Holland-Leader\"), manager_name (\"Bryan Taylor\", \"Bryan Taylor\", \"Jon Rowe\"), open_year (2000, 1999, 2000), station_id (2, 1, 11), representative_name (\"Simon Gaywood\", \"Simon Gaywood\", \"Clive Burr\") | company : main_industry (\"Oil and gas\", \"Conglomerate\", \"Banking\"), profits_billion (20.1, 25.1, 25.7), company_id (3, 3, 8), rank (8, 8, 3), sales_billion (147.3, 145.9, 147.3), assets_billion (292.5, 392.6, 717.2), headquarters (\"China\", \"UK\", \"Brazil\"), company (\"PetroChina\", \"ExxonMobil\", \"ExxonMobil\"), market_value (227.6, 237.4, 202.2)",
        "ambiguous_queries": [
            "select min(market_value), max(market_value), avg(market_value) from company",
            "select min_market_value, max_market_value, avg_market_value from company_market_value"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"company\": [\"market_value\"]}, {\"company_market_value\": [\"avg_market_value\"]}], \"maximum\": [{\"company\": [\"market_value\"]}, {\"company_market_value\": [\"max_market_value\"]}], \"minimum\": [{\"company\": [\"market_value\"]}, {\"company_market_value\": [\"min_market_value\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"company_market_value\".\"avg_market_value\", \"maximum\" refers to the schema \"company_market_value\".\"max_market_value\", \"minimum\" refers to the schema \"company_market_value\".\"min_market_value\"",
        "clear_ambiguity": "{\"average\": {\"company_market_value\": [\"avg_market_value\"]}, \"maximum\": {\"company_market_value\": [\"max_market_value\"]}, \"minimum\": {\"company_market_value\": [\"min_market_value\"]}}",
        "gold_query": "select min_market_value, max_market_value, avg_market_value from company_market_value"
    },
    {
        "index": 672,
        "db_id": "game_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/game_1/game_1.sqlite",
        "question": "Show total hours per week and number of games played for student David Shieber.",
        "schema_without_content": "student : city_code , major , fname , lname , stuid , advisor , sex , age  | sportsinfo : hoursperweek , gamesplayed , onscholarship , stuid , sportname  | sportsinfo_student_hoursperweek_gamesplayed : avg_gamesplayed , avg_hoursperweek , max_gamesplayed , sum_hoursperweek , lname , max_hoursperweek , min_gamesplayed , min_hoursperweek , sum_gamesplayed , fname  | video_games : gname , gameid , gtype  | plays_games : gameid , stuid , hours_played ",
        "schema_with_content": "student : city_code (\"NYC\", \"LOS\", \"PIT\"), major (540, 50, 550), fname (\"Derek\", \"Paul\", \"Sarah\"), lname (\"Davis\", \"Prater\", \"Schultz\"), stuid (1001, 1023, 1026), advisor (2311, 8772, 2311), sex (\"F\", \"M\"), age (20, 20, 27) | sportsinfo : hoursperweek (39, 25, 1), gamesplayed (16, 37, 31), onscholarship (\"N\", \"Y\"), stuid (1033, 1035, 1005), sportname (\"Swimming\", \"Athletics\", \"Athletics\") | sportsinfo_student_hoursperweek_gamesplayed : avg_gamesplayed (94, 16, 5), avg_hoursperweek (8, 2, 39), max_gamesplayed (18, 5, 20), sum_hoursperweek (45, 1, 39), lname (\"Han\", \"Tai\", \"Davis\"), max_hoursperweek (1, 19, 14), min_gamesplayed (25, 37, 25), min_hoursperweek (19, 23, 23), sum_gamesplayed (16, 37, 16), fname (\"Paul\", \"Andy\", \"Jandy\") | video_games : gname (\"Europe is the Universe\", \"Works of Widenius\", \"RNG Stone\"), gameid (3, 4, 4), gtype (\"Role-playing game\", \"Massively multiplayer online game\", \"Grand strategy\") | plays_games : gameid (6, 6, 3), stuid (1032, 1010, 1007), hours_played (1337, 1000, 1)",
        "ambiguous_queries": [
            "select sum(hoursperweek), sum(gamesplayed) from sportsinfo as t1 join student as t2 on t1.stuid = t2.stuid where t2.fname = 'David' and t2.lname = 'Shieber'",
            "select sum_hoursperweek, sum_gamesplayed from sportsinfo_student_hoursperweek_gamesplayed where fname = 'David' and lname = 'Shieber'"
        ],
        "gold_ambiguity": {
            "match": "{\"number of games played\": [{\"sportsinfo\": [\"gamesplayed\"]}, {\"sportsinfo_student_hoursperweek_gamesplayed\": [\"sum_gamesplayed\"]}], \"total hours per week\": [{\"sportsinfo\": [\"hoursperweek\"]}, {\"sportsinfo_student_hoursperweek_gamesplayed\": [\"sum_hoursperweek\"]}], \"David\": [{\"sportsinfo_student_hoursperweek_gamesplayed\": [\"fname\"]}, {\"student\": [\"fname\"]}], \"Shieber\": [{\"sportsinfo_student_hoursperweek_gamesplayed\": [\"lname\"]}, {\"student\": [\"lname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"number of games played\" refers to the schema \"sportsinfo\".\"gamesplayed\", \"total hours per week\" refers to the schema \"sportsinfo\".\"hoursperweek\", \"David\" refers to the schema \"student\".\"fname\", \"Shieber\" refers to the schema \"student\".\"lname\"",
        "clear_ambiguity": "{\"number of games played\": {\"sportsinfo\": [\"gamesplayed\"]}, \"total hours per week\": {\"sportsinfo\": [\"hoursperweek\"]}, \"David\": {\"student\": [\"fname\"]}, \"Shieber\": {\"student\": [\"lname\"]}}",
        "gold_query": "select sum(hoursperweek), sum(gamesplayed) from sportsinfo as t1 join student as t2 on t1.stuid = t2.stuid where t2.fname = 'David' and t2.lname = 'Shieber'"
    },
    {
        "index": 673,
        "db_id": "poker_player",
        "ambig_type": "aggregate",
        "db_file": "aggregate/poker_player/poker_player.sqlite",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "schema_without_content": "people : name , height , birth_date , nationality , people_id  | people_poker_player_earnings : height , min_earnings , avg_earnings , max_earnings , sum_earnings  | poker_player : final_table_made , poker_player_id , people_id , money_rank , best_finish , earnings ",
        "schema_with_content": "people : name (\"Semen Poltavskiy\", \"Roman Bragin\", \"Semen Poltavskiy\"), height (196.0, 194.0, 196.0), birth_date (\"January 22, 1987\", \"January 22, 1987\", \"May 26, 1986\"), nationality (\"Russia\", \"Bulgaria\"), people_id (6, 7, 5) | people_poker_player_earnings : height (194.0, 205.0, 187.0), min_earnings (476090.0, 104871.0, 104871.0), avg_earnings (189233.0, 476090.0, 476090.0), max_earnings (104871.0, 189233.0, 104871.0), sum_earnings (104871.0, 104871.0, 104871.0) | poker_player : final_table_made (10.0, 26.0, 10.0), poker_player_id (1, 1, 3), people_id (2, 6, 7), money_rank (141.0, 58.0, 58.0), best_finish (1.0, 2.0, 3.0), earnings (476090.0, 596462.0, 596462.0)",
        "ambiguous_queries": [
            "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200",
            "select avg_earnings from people_poker_player_earnings where height > 200"
        ],
        "gold_ambiguity": {
            "match": "{\"average earnings\": [{\"people_poker_player_earnings\": [\"avg_earnings\"]}, {\"poker_player\": [\"earnings\"]}], \"height\": [{\"people\": [\"height\"]}, {\"people_poker_player_earnings\": [\"height\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average earnings\" refers to the schema \"poker_player\".\"earnings\", \"height\" refers to the schema \"people\".\"height\"",
        "clear_ambiguity": "{\"average earnings\": {\"poker_player\": [\"earnings\"]}, \"height\": {\"people\": [\"height\"]}}",
        "gold_query": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200"
    },
    {
        "index": 674,
        "db_id": "entrepreneur",
        "ambig_type": "aggregate",
        "db_file": "aggregate/entrepreneur/entrepreneur.sqlite",
        "question": "Return the average money requested across all entrepreneurs.",
        "schema_without_content": "people : date_of_birth , weight , people_id , name , height  | entrepreneur_money_requested : min_money_requested , max_money_requested , sum_money_requested , avg_money_requested  | entrepreneur : entrepreneur_id , people_id , company , investor , money_requested ",
        "schema_with_content": "people : date_of_birth (\"1971-08-05\", \"1974-09-28\", \"1977-04-28\"), weight (58.0, 67.0, 57.0), people_id (1, 1, 6), name (\"Leonardo Binchi\", \"Alberto Angelini\", \"Alberto Angelini\"), height (1.95, 1.75, 1.82) | entrepreneur_money_requested : min_money_requested (50000.0, 50000.0, 54000.0), max_money_requested (50000.0, 120000.0, 54000.0), sum_money_requested (110000.0, 75000.0, 120000.0), avg_money_requested (110000.0, 110000.0, 50000.0) | entrepreneur : entrepreneur_id (5, 5, 3), people_id (8, 6, 3), company (\"Le Beanock\", \"Elizabeth Galton Ltd\", \"Grails Ltd\"), investor (\"Doug Richard\", \"Peter Jones\", \"Rachel Elnaugh\"), money_requested (75000.0, 110000.0, 75000.0)",
        "ambiguous_queries": [
            "select avg(money_requested) from entrepreneur",
            "select avg_money_requested from entrepreneur_money_requested"
        ],
        "gold_ambiguity": {
            "match": "{\"average money\": [{\"entrepreneur\": [\"money_requested\"]}, {\"entrepreneur_money_requested\": [\"avg_money_requested\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average money\" refers to the schema \"entrepreneur\".\"money_requested\"",
        "clear_ambiguity": "{\"average money\": {\"entrepreneur\": [\"money_requested\"]}}",
        "gold_query": "select avg(money_requested) from entrepreneur"
    },
    {
        "index": 675,
        "db_id": "device",
        "ambig_type": "aggregate",
        "db_file": "aggregate/device/device.sqlite",
        "question": "What is the average quantity of stocks?",
        "schema_without_content": "shop : shop_name , shop_id , location , open_year , open_date  | stock_quantity : min_quantity , avg_quantity , max_quantity , sum_quantity  | device : device , applications , device_id , software_platform , package_version , carrier  | stock : quantity , device_id , shop_id ",
        "schema_with_content": "shop : shop_name (\"Ferndale\", \"Dinas Device\", \"Gelli repair\"), shop_id (5, 1, 3), location (\"Wattstown\", \"Penygraig\", \"Dinas\"), open_year (2017, 2007, 2009), open_date (\"15 July\", \"15 July\", \"1 January\") | stock_quantity : min_quantity (124, 110, 56), avg_quantity (134, 110, 56), max_quantity (112, 100, 112), sum_quantity (56, 112, 56) | device : device (\"Huawei\", \"Xiaomi\", \"Xiaomi\"), applications (\"4.7.0.151\", \"5.0.0.328\", \"5.0.0.419\"), device_id (6, 6, 6), software_platform (\"Android\", \"iOS\"), package_version (\"5.0.0.419\", \"5.0.0.328\", \"5.0.0.419\"), carrier (\"MTS Mobility\", \"Telus Mobility\", \"MTS Mobility\") | stock : quantity (124, 56, 51), device_id (4, 6), shop_id (11, 2, 9)",
        "ambiguous_queries": [
            "select avg(quantity) from stock",
            "select avg_quantity from stock_quantity"
        ],
        "gold_ambiguity": {
            "match": "{\"average quantity\": [{\"stock\": [\"quantity\"]}, {\"stock_quantity\": [\"avg_quantity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average quantity\" refers to the schema \"stock\".\"quantity\"",
        "clear_ambiguity": "{\"average quantity\": {\"stock\": [\"quantity\"]}}",
        "gold_query": "select avg(quantity) from stock"
    },
    {
        "index": 676,
        "db_id": "soccer_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/soccer_2/soccer_2.sqlite",
        "question": "What is average number of students enrolled in Florida colleges?",
        "schema_without_content": "player : pid , ycard , hs , pname  | college_enr : min_enr , sum_enr , avg_enr , max_enr  | college : enr , cname , state  | tryout : pid , cname , ppos , decision ",
        "schema_with_content": "player : pid (50005, 50005, 10001), ycard (\"no\", \"yes\"), hs (600, 300, 600), pname (\"David\", \"Eddie\", \"Charles\") | college_enr : min_enr (12000, 22000, 12000), sum_enr (18000, 12000, 19000), avg_enr (22000, 22000, 19000), max_enr (22000, 18000, 22000) | college : enr (19000, 12000, 22000), cname (\"ASU\", \"OU\", \"ASU\"), state (\"LA\", \"FL\", \"OK\") | tryout : pid (30003, 10001, 20002), cname (\"LSU\", \"LSU\", \"FSU\"), ppos (\"goalie\", \"striker\", \"mid\"), decision (\"no\", \"yes\")",
        "ambiguous_queries": [
            "select avg(enr) from college where state = 'FL'",
            "select avg_enr from college_enr where state = 'FL'"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"colleges\": [{\"college\": [\"state\"]}, {\"college_enr\": [\"state\"]}]}"
        },
        "clarification_context": "\"colleges\" refers to the schema \"college_enr\".\"state\"",
        "clear_ambiguity": "{\"colleges\": {\"college_enr\": [\"state\"]}}",
        "gold_query": "select avg_enr from college_enr where state = 'FL'"
    },
    {
        "index": 677,
        "db_id": "student_transcripts_tracking",
        "ambig_type": "aggregate",
        "db_file": "aggregate/student_transcripts_tracking/student_transcripts_tracking.sqlite",
        "question": "On average, when were the transcripts printed?",
        "schema_without_content": "transcript_contents : student_course_id , transcript_id  | student_enrolment : other_details , student_id , student_enrolment_id , degree_program_id , semester_id  | addresses : city , state_province_county , zip_postcode , line_3 , address_id , country , line_1 , other_address_details , line_2  | students : email_address , permanent_address_id , ssn , date_left , cell_mobile_number , last_name , current_address_id , other_student_details , date_first_registered , middle_name , student_id , first_name  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts_transcript_date : max_transcript_date , avg_transcript_date , sum_transcript_date , min_transcript_date  | sections : course_id , other_details , section_description , section_id , section_name  | degree_programs : degree_summary_name , department_id , degree_summary_description , other_details , degree_program_id  | transcripts : other_details , transcript_date , transcript_id  | courses : course_description , course_id , course_name , other_details  | departments : department_name , department_description , other_details , department_id  | semesters : other_details , semester_id , semester_name , semester_description ",
        "schema_with_content": "transcript_contents : student_course_id (28982908, 28982908, 96), transcript_id (15, 4, 13) | student_enrolment : other_details (None), student_id (7, 14, 4), student_enrolment_id (13, 4, 8), degree_program_id (10, 4, 2), semester_id (6, 4, 6) | addresses : city (\"Prohaskafort\", \"Rutherfordtown\", \"Port Oceane\"), state_province_county (\"Florida\", \"Kentucky\", \"SouthDakota\"), zip_postcode (\"400\", \"777\", \"777\"), line_3 (None), address_id (3, 11, 12), country (\"Norfolk Island\", \"Norfolk Island\", \"Burundi\"), line_1 (\"67942 Carlotta Ferry Apt. 686\", \"202 Hessel Views Apt. 468\", \"16998 Mraz Lodge\"), other_address_details (None), line_2 (\"Apt. 335\", \"Suite 865\", \"Apt. 388\") | students : email_address (\"beth42@example.org\", \"lhartmann@example.org\", \"gracie29@example.com\"), permanent_address_id (15, 11, 5), ssn (\"43\", \"668\", \"39\"), date_left (\"1999-08-24 00:07:10\", \"1982-06-11 00:25:39\", \"2016-04-09 12:27:04\"), cell_mobile_number (\"677.401.9382\", \"07661787471\", \"03174364122\"), last_name (\"Balistreri\", \"Mohr\", \"Schuppe\"), current_address_id (7, 1, 7), other_student_details (\"dolorum\", \"omnis\", \"et\"), date_first_registered (\"1982-06-19 13:15:18\", \"1976-10-26 02:33:06\", \"2018-03-13 09:56:22\"), middle_name (\"Brooklyn\", \"Lorenz\", \"Aaliyah\"), student_id (10, 14, 8), first_name (\"Milton\", \"Orrin\", \"Reva\") | student_enrolment_courses : course_id (6, 11, 3), student_enrolment_id (4, 4, 13), student_course_id (438800, 70882679, 1) | transcripts_transcript_date : max_transcript_date (\"1975-05-20 18:31:21\", \"1999-01-06 20:06:46\", \"1975-10-28 15:16:51\"), avg_transcript_date (\"2013-06-30 13:01:40\", \"1984-01-18 23:07:07\", \"1975-05-20 18:31:21\"), sum_transcript_date (\"2013-06-30 13:01:40\", \"1988-04-30 01:19:47\", \"1999-01-06 20:06:46\"), min_transcript_date (\"1999-01-06 20:06:46\", \"1975-10-28 15:16:51\", \"1990-03-05 11:59:41\") | sections : course_id (8, 12, 7), other_details (None), section_description (\"voluptatem\", \"provident\", \"facilis\"), section_id (4, 8, 9), section_name (\"u\", \"e\", \"f\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (13, 11, 3), degree_summary_description (\"qui\", \"et\", \"aperiam\"), other_details (None), degree_program_id (10, 5, 12) | transcripts : other_details (None), transcript_date (\"1999-01-06 20:06:46\", \"1975-10-28 15:16:51\", \"1984-01-18 23:07:07\"), transcript_id (8, 7, 7) | courses : course_description (\"b\", \"b\", \"v\"), course_id (2, 5, 15), course_name (\"ai\", \"la\", \"ds\"), other_details (None) | departments : department_name (\"art\", \"art\", \"medical\"), department_description (\"nihil\", \"non\", \"ea\"), other_details (None), department_id (5, 8, 3) | semesters : other_details (None), semester_id (9, 1, 14), semester_name (\"spring 2014\", \"spring 2019\", \"spring 2017\"), semester_description (\"x\", \"o\", \"c\")",
        "ambiguous_queries": [
            "select avg(transcript_date) from transcripts",
            "select avg_transcript_date from transcripts_transcript_date"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"transcripts\": [\"transcript_date\"]}, {\"transcripts_transcript_date\": [\"avg_transcript_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"transcripts\".\"transcript_date\"",
        "clear_ambiguity": "{\"average\": {\"transcripts\": [\"transcript_date\"]}}",
        "gold_query": "select avg(transcript_date) from transcripts"
    },
    {
        "index": 678,
        "db_id": "store_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/store_1/store_1.sqlite",
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "schema_without_content": "invoice_lines : invoice_id , track_id , quantity , unit_price , id  | sqlite_sequence : seq , name  | playlist_tracks : track_id , playlist_id  | customers : support_rep_id , company , state , address , fax  221-4679\", \"+1  253-0000\", \"+55  3033-4564\", city , first_name , phone  522-1333\", \"+91 080 22289999\", country , email , postal_code , last_name , id  | employees : reports_to , address , first_name , country , hire_date , phone  262-3443\", \"+1  456-9986\", \"+1  456-9986\", last_name , postal_code , email , birth_date , fax  467-8772\", \"+1  263-4289\", \"+1  246-9899\", state , city , id , title  | genres : name , id  | artists : name , id  | playlists : name , id  | customers_invoices_total : first_name , sum_total , last_name , avg_total , min_total , max_total  | tracks : id , milliseconds , composer , genre_id , album_id , unit_price , media_type_id , bytes , name \" | albums : id , title , artist_id  | media_types : name , id  | invoices : total , id , customer_id , billing_address , billing_postal_code , billing_country , billing_state , billing_city , invoice_date ",
        "schema_with_content": "invoice_lines : invoice_id (220, 61, 195), track_id (2550, 2508, 3355), quantity (1), unit_price (0.99, 1.99), id (1726, 617, 1945) | sqlite_sequence : seq (18, 25, 5), name (\"invoices\", \"invoice_lines\", \"invoice_lines\") | playlist_tracks : track_id (2101, 2012, 820), playlist_id (16, 13, 17) | customers : support_rep_id (3, 4, 5), company (None, \"Google Inc.\", \"Google Inc.\"), state (\"WI\", None, \"WA\"), address (\"113 Lupus St\", \"BarbarossastraÃe 19\", \"Theodor-Heuss-StraÃe 34\"), fax (\"+1 (212) 221-4679\", \"+1 (650) 253-0000\", \"+55 (11) 3033-4564\"), city (\"Prague\", \"Paris\", \"Dijon\"), first_name (\"Leonie\", \"Jennifer\", \"Dan\"), phone (\"+33 01 47 42 71 71\", \"+1 (617) 522-1333\", \"+91 080 22289999\"), country (\"Netherlands\", \"Germany\", \"United Kingdom\"), email (\"aaronmitchell@yahoo.ca\", \"diego.gutierrez@yahoo.ar\", \"wyatt.girard@yahoo.fr\"), postal_code (\"10779\", \"53703\", \"10789\"), last_name (\"Gray\", \"Chase\", \"WÃ³jcik\"), id (36, 9, 43) | employees : reports_to (6, 6, 1), address (\"683 10 Street SW\", \"923 7 ST NW\", \"1111 6 Ave SW\"), first_name (\"Andrew\", \"Michael\", \"Michael\"), country (\"Canada\"), hire_date (\"2002-04-01 00:00:00\", \"2003-05-03 00:00:00\", \"2004-03-04 00:00:00\"), phone (\"+1 (403) 262-3443\", \"+1 (403) 456-9986\", \"+1 (403) 456-9986\"), last_name (\"Peacock\", \"Mitchell\", \"Peacock\"), postal_code (\"T3B 1Y7\", \"T1H 1Y8\", \"T5K 2N1\"), email (\"nancy@chinookcorp.com\", \"jane@chinookcorp.com\", \"laura@chinookcorp.com\"), birth_date (\"1962-02-18 00:00:00\", \"1958-12-08 00:00:00\", \"1958-12-08 00:00:00\"), fax (\"+1 (403) 467-8772\", \"+1 (403) 263-4289\", \"+1 (403) 246-9899\"), state (\"AB\"), city (\"Edmonton\", \"Calgary\", \"Lethbridge\"), id (4, 1, 4), title (\"IT Staff\", \"General Manager\", \"IT Manager\") | genres : name (\"Drama\", \"Classical\", \"Blues\"), id (18, 4, 7) | artists : name (\"Green Day\", \"Bruce Dickinson\", \"Karsh Kale\"), id (128, 253, 96) | playlists : name (\"TV Shows\", \"Audiobooks\", \"On-The-Go 1\"), id (17, 5, 16) | customers_invoices_total : first_name (\"Diego\", \"Leonie\", \"Astrid\"), sum_total (8.94, 18.86, 8.91), last_name (\"KovÃ¡cs\", \"Dubois\", \"Goyer\"), avg_total (9.91, 7.96, 18.86), min_total (0.99, 17.91, 18.86), max_total (2.98, 6.94, 23.86) | tracks : id (143, 1889, 2126), milliseconds (424960, 290664, 602880), composer (\"Jimmy and Vella Cameron\", \"Clapton/Gordon\", \"Maxton Gig Beesley Jnr.\"), genre_id (9, 11, 4), album_id (4, 150, 76), unit_price (0.99, 1.99), media_type_id (2, 1, 2), bytes (7130830, 8455132, 11946327), name (\"Tanto Tempo\", \"Scar Tissue\", \"War (The Process)\") | albums : id (273, 304, 239), title (\"From The Muddy Banks Of The Wishkah live\", \"The Cream Of Clapton\", \"Californication\"), artist_id (273, 206, 24) | media_types : name (\"Purchased AAC audio file\", \"Protected AAC audio file\", \"Purchased AAC audio file\"), id (3, 2, 4) | invoices : total (0.99, 18.86, 21.86), id (249, 274, 307), customer_id (43, 19, 39), billing_address (\"11, Place Bellecour\", \"Av. Brigadeiro Faria Lima, 2170\", \"9, Place Louis Barthou\"), billing_postal_code (\"M6J 1V1\", \"X1A 1N6\", \"R3L 2B9\"), billing_country (\"Chile\", \"India\", \"France\"), billing_state (\"MB\", \"BC\", \"WA\"), billing_city (\"Rome\", \"Ottawa\", \"Porto\"), invoice_date (\"2011-10-08 00:00:00\", \"2009-12-31 00:00:00\", \"2008-06-12 00:00:00\")",
        "ambiguous_queries": [
            "select t1.first_name, t1.last_name, sum(t2.total) from customers as t1 join invoices as t2 on t2.customer_id = t1.id group by t1.id order by sum(t2.total) desc limit 10",
            "select first_name, last_name, sum_total from customers_invoices_total"
        ],
        "gold_ambiguity": {
            "match": "{\"last name\": [{\"customers\": [\"last_name\"]}, {\"customers_invoices_total\": [\"last_name\"]}], \"first\": [{\"customers\": [\"first_name\"]}, {\"customers_invoices_total\": [\"first_name\"]}], \"total gross sales\": [{\"customers_invoices_total\": [\"sum_total\"]}, {\"invoices\": [\"total\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last name\" refers to the schema \"customers_invoices_total\".\"last_name\", \"first\" refers to the schema \"customers_invoices_total\".\"first_name\", \"total gross sales\" refers to the schema \"customers_invoices_total\".\"sum_total\"",
        "clear_ambiguity": "{\"last name\": {\"customers_invoices_total\": [\"last_name\"]}, \"first\": {\"customers_invoices_total\": [\"first_name\"]}, \"total gross sales\": {\"customers_invoices_total\": [\"sum_total\"]}}",
        "gold_query": "select first_name, last_name, sum_total from customers_invoices_total"
    },
    {
        "index": 679,
        "db_id": "film_rank",
        "ambig_type": "aggregate",
        "db_file": "aggregate/film_rank/film_rank.sqlite",
        "question": "Return the maximum and minimum number of cities across all markets.",
        "schema_without_content": "market_number_cities : avg_number_cities , sum_number_cities , min_number_cities , max_number_cities  | film : film_id , director , studio , title , gross_in_dollar  | market : number_cities , country , market_id  | film_market_estimation : low_estimate , type , market_id , high_estimate , year , estimation_id , film_id ",
        "schema_with_content": "market_number_cities : avg_number_cities (212, 231, 700), sum_number_cities (209, 212, 231), min_number_cities (212, 540, 209), max_number_cities (453, 540, 700) | film : film_id (11, 2, 13), director (\"Walter Hill\", \"Richard Attenborough\", \"Nicholas Meyer\"), studio (\"Paramount\", \"MGM\", \"20th Century Fox\"), title (\"First Blood\", \"Star Trek II: The Wrath of Khan\", \"The Best Little Whorehouse in Texas\"), gross_in_dollar (177200000, 78868508, 78868508) | market : number_cities (700, 700, 700), country (\"France\", \"USA\", \"Japan\"), market_id (1, 2, 2) | film_market_estimation : low_estimate (960.0, 39.0, 53.0), type (\"Mass suicide murder\", \"Mass suicide\", \"Mass human sacrifice\"), market_id (1, 2, 3), high_estimate (16.0, 1000.0, 16.0), year (1944, 2000, 2000), estimation_id (1, 9, 2), film_id (1, 4, 3)",
        "ambiguous_queries": [
            "select max(number_cities), min(number_cities) from market",
            "select max_number_cities, min_number_cities from market_number_cities"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"market\": [\"number_cities\"]}, {\"market_number_cities\": [\"max_number_cities\"]}], \"minimum\": [{\"market\": [\"number_cities\"]}, {\"market_number_cities\": [\"min_number_cities\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"market_number_cities\".\"max_number_cities\", \"minimum\" refers to the schema \"market_number_cities\".\"min_number_cities\"",
        "clear_ambiguity": "{\"maximum\": {\"market_number_cities\": [\"max_number_cities\"]}, \"minimum\": {\"market_number_cities\": [\"min_number_cities\"]}}",
        "gold_query": "select max_number_cities, min_number_cities from market_number_cities"
    },
    {
        "index": 680,
        "db_id": "election",
        "ambig_type": "aggregate",
        "db_file": "aggregate/election/election.sqlite",
        "question": "On average how large is the population of the counties?",
        "schema_without_content": "election : delegate , first_elected , election_id , district , committee \", \"Environmental Matters\", counties_represented , party  | county_population : min_population , max_population , sum_population , avg_population  | county : population , zip_code , county_id , county_name  | party : party , attorney_general , comptroller , governor , party_id , us_senate \", \"Hillary Rodham Clinton\", year , lieutenant_governor ",
        "schema_with_content": "election : delegate (\"Guzzone, Guy Guy Guzzone\", \"Pendergrass, Shane E. Shane Pendergrass\", \"Turner, Frank S. Frank S. Turner\"), first_elected (2006.0, 2006.0, 2003.0), election_id (7, 2, 4), district (2, 1, 1), committee (\"Environmental Matters\", \"Environmental Matters (Vice-Chair)\", \"Environmental Matters\"), counties_represented (\"09.1 9A\", \"12.2 12B\", \"12.2 12B\"), party (1, 1, 4) | county_population : min_population (87200.0, 13300.0, 87200.0), max_population (13300.0, 87200.0, 90000.0), sum_population (87200.0, 90000.0, 90000.0), avg_population (90000.0, 13300.0, 79000.0) | county : population (79000.0, 90000.0, 90000.0), zip_code (\"D08\", \"D21\", \"D09\"), county_id (5, 4, 4), county_name (\"Manning\", \"Howard\", \"Mansfield\") | party : party (\"Independence\", \"Liberal\", \"Working Families\"), attorney_general (\"Eliot Spitzer\", \"Andrew Cuomo\", \"Jeanine Pirro\"), comptroller (\"Carl McCall\", \"Alan Hevesi\", \"John Faso\"), governor (\"Eliot Spitzer\", \"Carl McCall\", \"Carl McCall\"), party_id (2, 7, 4), us_senate (\"Charles Schumer\", \"(no election)\", \"Hillary Rodham Clinton\"), year (1998.0, 2002.0, 2006.0), lieutenant_governor (\"Mary Donohue\", \"Jonathan Reiter\", \"David Paterson\")",
        "ambiguous_queries": [
            "select avg(population) from county",
            "select avg_population from county_population"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"county\": [\"population\"]}, {\"county_population\": [\"avg_population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"county\".\"population\"",
        "clear_ambiguity": "{\"average\": {\"county\": [\"population\"]}}",
        "gold_query": "select avg(population) from county"
    },
    {
        "index": 681,
        "db_id": "manufactory_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/manufactory_1/manufactory_1.sqlite",
        "question": "What are the average, maximum and total revenues of all companies?",
        "schema_without_content": "manufacturers : name , headquarter , founder , revenue , code  | products : name , manufacturer , price , code  | manufacturers_revenue : avg_revenue , sum_revenue , min_revenue , max_revenue ",
        "schema_with_content": "manufacturers : name (\"Creative Labs\", \"Sony\", \"Winchester\"), headquarter (\"Austin\", \"Paris\", \"Tokyo\"), founder (\"Owen\", \"Robert\", \"Andy\"), revenue (130.0, 120.0, 50.0), code (2, 2, 3) | products : name (\"Toner cartridge\", \"DVD burner\", \"Toner cartridge\"), manufacturer (6, 6, 2), price (150, 120, 240), code (2, 8, 1) | manufacturers_revenue : avg_revenue (30.0, 50.0, 130.0), sum_revenue (200.0, 130.0, 100.0), min_revenue (100.0, 30.0, 120.0), max_revenue (30.0, 50.0, 120.0)",
        "ambiguous_queries": [
            "select avg(revenue), max(revenue), sum(revenue) from manufacturers",
            "select avg_revenue, max_revenue, sum_revenue from manufacturers_revenue"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"manufacturers\": [\"revenue\"]}, {\"manufacturers_revenue\": [\"avg_revenue\"]}], \"maximum\": [{\"manufacturers\": [\"revenue\"]}, {\"manufacturers_revenue\": [\"max_revenue\"]}], \"total\": [{\"manufacturers\": [\"revenue\"]}, {\"manufacturers_revenue\": [\"sum_revenue\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"manufacturers\".\"revenue\", \"maximum\" refers to the schema \"manufacturers\".\"revenue\", \"total\" refers to the schema \"manufacturers\".\"revenue\"",
        "clear_ambiguity": "{\"average\": {\"manufacturers\": [\"revenue\"]}, \"maximum\": {\"manufacturers\": [\"revenue\"]}, \"total\": {\"manufacturers\": [\"revenue\"]}}",
        "gold_query": "select avg(revenue), max(revenue), sum(revenue) from manufacturers"
    },
    {
        "index": 682,
        "db_id": "apartment_rentals",
        "ambig_type": "aggregate",
        "db_file": "aggregate/apartment_rentals/apartment_rentals.sqlite",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "schema_without_content": "apartment_buildings_apartments_room_count : max_room_count , sum_room_count , min_room_count , avg_room_count , building_short_name  | apartment_bookings : apt_id , booking_start_date , booking_status_code , guest_id , booking_end_date , apt_booking_id  | apartment_facilities : apt_id , facility_code  | view_unit_status : apt_id , apt_booking_id , available_yn , status_date  | apartment_buildings : building_address , building_id , building_short_name , building_description , building_phone 411-6406\", \"086-5221x3455\", building_full_name , building_manager  | guests : date_of_birth , guest_id , guest_first_name , gender_code , guest_last_name  | apartments : building_id , apt_number , apt_id , bathroom_count , room_count , apt_type_code , bedroom_count ",
        "schema_with_content": "apartment_buildings_apartments_room_count : max_room_count (\"3\", \"7\", \"7\"), sum_room_count (\"7\", \"9\", \"7\"), min_room_count (\"7\", \"9\", \"6\"), avg_room_count (\"3\", \"5\", \"9\"), building_short_name (\"Stuyvesant Town\", \"Stuyvesant Town\", \"Stuyvesant Town\") | apartment_bookings : apt_id (7, 7, 7), booking_start_date (\"2017-03-13 16:20:14\", \"2016-08-04 10:33:00\", \"2016-09-28 05:00:50\"), booking_status_code (\"Provisional\", \"Confirmed\"), guest_id (7, 4, 3), booking_end_date (\"2017-10-25 11:08:42\", \"2017-09-30 18:41:04\", \"2017-10-25 11:08:42\"), apt_booking_id (920, 920, 623) | apartment_facilities : apt_id (1, 5, 2), facility_code (\"Boardband\", \"Gym\", \"Boardband\") | view_unit_status : apt_id (14, 13, 15), apt_booking_id (279, 889, 258), available_yn (1, 0), status_date (\"2003-07-25 10:13:48\", \"1978-12-28 11:53:34\", \"1985-11-05 11:46:35\") | apartment_buildings : building_address (\"71537 Gorczany Inlet\nWisozkburgh, AL 08256\", \"1844 Armstrong Stravenue Suite 853\nMyrnatown, CT 13528\", \"959 Ethel Viaduct\nWest Efrainburgh, DE 40074\"), building_id (968, 191, 133), building_short_name (\"Biltmore Plaza\", \"Biltmore Plaza\", \"Mercedes House\"), building_description (\"Studio\", \"Flat\", \"Duplex\"), building_phone (\"1-605-511-1973x25011\", \"(145)411-6406\", \"(909)086-5221x3455\"), building_full_name (\"Normandie Court\", \"Windsor Court\", \"Normandie Court\"), building_manager (\"Kyle\", \"Brenden\", \"Ewald\") | guests : date_of_birth (\"2001-06-18 20:05:55\", \"2001-06-18 20:05:55\", \"2003-07-29 22:08:15\"), guest_id (3, 2, 7), guest_first_name (\"Keith\", \"Louvenia\", \"Keon\"), gender_code (\"Male\", \"Unknown\", \"Female\"), guest_last_name (\"Runolfsson\", \"Lehner\", \"Jerde\") | apartments : building_id (153, 225, 673), apt_number (\"Suite 749\", \"Apt. 794\", \"Suite 645\"), apt_id (9, 4, 4), bathroom_count (1, 2, 3), room_count (\"3\", \"9\", \"9\"), apt_type_code (\"Flat\", \"Studio\", \"Duplex\"), bedroom_count (6, 5, 6)",
        "ambiguous_queries": [
            "select sum(t2.room_count) from apartment_buildings as t1 join apartments as t2 on t1.building_id = t2.building_id where t1.building_short_name = 'Columbus Square'",
            "select sum_room_count from apartment_buildings_apartments_room_count where building_short_name = 'Columbus Square'"
        ],
        "gold_ambiguity": {
            "match": "{\"rooms in total\": [{\"apartment_buildings_apartments_room_count\": [\"sum_room_count\"]}, {\"apartments\": [\"room_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"rooms in total\" refers to the schema \"apartments\".\"room_count\"",
        "clear_ambiguity": "{\"rooms in total\": {\"apartments\": [\"room_count\"]}}",
        "gold_query": "select sum(t2.room_count) from apartment_buildings as t1 join apartments as t2 on t1.building_id = t2.building_id where t1.building_short_name = 'Columbus Square'"
    },
    {
        "index": 683,
        "db_id": "flight_company",
        "ambig_type": "aggregate",
        "db_file": "aggregate/flight_company/flight_company.sqlite",
        "question": "What is maximum group equity shareholding of the companies?",
        "schema_without_content": "operate_company_group_equity_shareholding : min_group_equity_shareholding , avg_group_equity_shareholding , max_group_equity_shareholding , sum_group_equity_shareholding  | airport : iata , city , name , icao , country , id  | operate_company : name  Limited\", \"VN/CX Catering Services Limited\", \"Air China Cargo\", group_equity_shareholding , principal_activities , id , type , incorporated_in  | flight : velocity , date , id , vehicle_flight_number , company_id , pilot , altitude , airport_id ",
        "schema_with_content": "operate_company_group_equity_shareholding : min_group_equity_shareholding (40.0, 40.0, 45.0), avg_group_equity_shareholding (45.0, 60.0, 49.0), max_group_equity_shareholding (40.0, 100.0, 18.77), sum_group_equity_shareholding (18.77, 30.0, 100.0) | airport : iata (\"AEY\", \"ANC\", \"BRU\"), city (\"Billund\", \"Akureyri\", \"Anchorage\"), name (\"Billund Airport\", \"National Airport\", \"Bergen Airport\"), icao (\"ENBR\", \"EBBR\", \"EKBI\"), country (\"Norway\", \"Iceland\", \"Iceland\"), id (3, 9, 9) | operate_company : name (\"Cathay Pacific Catering Services (HK) Limited\", \"VN/CX Catering Services Limited\", \"Air China Cargo\"), group_equity_shareholding (45.0, 30.0, 60.0), principal_activities (\"Travel agency\", \"Cargo airline\", \"Ground handling\"), id (8, 5, 3), type (\"Corporate\", \"Joint Venture\", \"Subsidiary\"), incorporated_in (\"Canada\", \"China\", \"Canada\") | flight : velocity (135.0, 240.0), date (\"August 16, 1963\", \"March 28, 1966\", \"July 16, 1965\"), id (4, 8, 8), vehicle_flight_number (\"M2-F1 #0\", \"M2-F1 #64\", \"M2-F1 #6\"), company_id (5, 13, 5), pilot (\"Thompson\", \"Peterson\"), altitude (0.0, 3650.0), airport_id (4, 1, 5)",
        "ambiguous_queries": [
            "select max(group_equity_shareholding) from operate_company",
            "select max_group_equity_shareholding from operate_company_group_equity_shareholding"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum group equity shareholding\": [{\"operate_company\": [\"group_equity_shareholding\"]}, {\"operate_company_group_equity_shareholding\": [\"max_group_equity_shareholding\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum group equity shareholding\" refers to the schema \"operate_company_group_equity_shareholding\".\"max_group_equity_shareholding\"",
        "clear_ambiguity": "{\"maximum group equity shareholding\": {\"operate_company_group_equity_shareholding\": [\"max_group_equity_shareholding\"]}}",
        "gold_query": "select max_group_equity_shareholding from operate_company_group_equity_shareholding"
    },
    {
        "index": 684,
        "db_id": "company_office",
        "ambig_type": "aggregate",
        "db_file": "aggregate/company_office/company_office.sqlite",
        "question": "What are the average profits of companies?",
        "schema_without_content": "office_locations : move_in_year , company_id , building_id  | companies : id , name , sales_billion , market_value_billion , profits_billion , assets_billion , industry , headquarters  | companies_profits_billion : sum_profits_billion , min_profits_billion , max_profits_billion , avg_profits_billion  | buildings : id , name , status , height , city , stories ",
        "schema_with_content": "office_locations : move_in_year (2021, 2025, 2027), company_id (3, 2, 1), building_id (3, 10, 7) | companies : id (13, 1, 13), name (\"JPMorgan Chase\", \"Gazprom\", \"Gazprom\"), sales_billion (156.2, 124.3, 69.2), market_value_billion (\"239.5\", \"224.8\", \"239.5\"), profits_billion (15.6, 10.6, 19.9), assets_billion (275.9, 1913.9, 302.5), industry (\"Banking\", \"Telecommunications\", \"Retailing\"), headquarters (\"UK\", \"USA\", \"Netherlands\") | companies_profits_billion : sum_profits_billion (25.7, 19.0, 13.0), min_profits_billion (12.8, 21.2, 17.4), max_profits_billion (21.2, 25.7, 18.8), avg_profits_billion (10.6, 15.6, 12.4) | buildings : id (3, 11, 3), name (\"Torre KOI\", \"Reforma 432\", \"Corporativo BBVA Bancomer\"), status (\"under construction\", \"proposed\", \"on-hold\"), height (330, 210, 220), city (\"Monterrey\", \"Mexico City\"), stories (34, 20, 42)",
        "ambiguous_queries": [
            "select avg(profits_billion) from companies",
            "select avg_profits_billion from companies_profits_billion"
        ],
        "gold_ambiguity": {
            "match": "{\"average profits\": [{\"companies\": [\"profits_billion\"]}, {\"companies_profits_billion\": [\"avg_profits_billion\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average profits\" refers to the schema \"companies\".\"profits_billion\"",
        "clear_ambiguity": "{\"average profits\": {\"companies\": [\"profits_billion\"]}}",
        "gold_query": "select avg(profits_billion) from companies"
    },
    {
        "index": 685,
        "db_id": "wta_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/wta_1/wta_1.sqlite",
        "question": "How many total tours were there for each ranking date?",
        "schema_without_content": "players : birth_date , country_code , first_name , hand , player_id , last_name  | matches : year , loser_id , loser_rank_points , best_of , winner_ioc , winner_ht , winner_hand , minutes , loser_entry , loser_ioc , winner_seed , loser_rank , round , tourney_date , match_num , winner_rank , winner_id , score  6-3\", \"6-2 6-7 6-3\", \"7-6 6-3\", winner_name , winner_rank_points , loser_name , loser_hand , winner_entry , loser_age , tourney_level , surface , loser_ht , loser_seed , winner_age , tourney_name , draw_size , tourney_id  | rankings : ranking , player_id , tours , ranking_points , ranking_date  | rankings_tours : min_tours , avg_tours , sum_tours , ranking_date , max_tours ",
        "schema_with_content": "players : birth_date (19991225, 19780106, 19950322), country_code (\"TTO\", \"SVK\", \"SRB\"), first_name (\"Viktoryia\", \"Elitza\", \"Vandana\"), hand (\"\", \"U\", \"U\"), player_id (207683, 215701, 206770), last_name (\"Mandlik\", \"Van Der Linden\", \"Munch Soegaard\") | matches : year (2013, 2016, 2017), loser_id (201527, 201506, 201596), loser_rank_points (8300, 2695, 5481), best_of (3), winner_ioc (\"DEN\", \"GER\", \"JPN\"), winner_ht (179, 178, 159), winner_hand (\"R\", \"L\"), minutes (79, 176, 120), loser_entry (\"\"), loser_ioc (\"RUS\", \"RUS\", \"ESP\"), winner_seed (11, 22, 10), loser_rank (5, 11, 17), round (\"SF\", \"RR\", \"RR\"), tourney_date (20170814, 20170501, 20160307), match_num (287, 212, 215), winner_rank (34, 30, 48), winner_id (201520, 202428, 201593), score (\"7-6(0) 6-3\", \"6-2 6-7(3) 6-3\", \"7-6(2) 6-3\"), winner_name (\"Yanina Wickmayer\", \"Jelena Jankovic\", \"Karolina Pliskova\"), winner_rank_points (2240, 3485, 8235), loser_name (\"Sara Errani\", \"Timea Babos\", \"Victoria Azarenka\"), loser_hand (\"R\", \"L\"), winner_entry (\"\"), loser_age (31.613963039, 28.4353182752, 26.6529774127), tourney_level (\"G\", \"P\", \"I\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ht (181, 182, 182), loser_seed (4, 6, 6), winner_age (24.041067761799997, 23.961670089000002, 27.635865845300003), tourney_name (\"Rabat\", \"Rabat\", \"Budapest\"), draw_size (64, 8, 8), tourney_id (\"2016-0528\", \"2017-540\", \"2016-0528\") | rankings : ranking (769, 910, 1358), player_id (211725, 206130, 202473), tours (24, 16, 4), ranking_points (1757, 2352, 1539), ranking_date (20030113, 19891002, 19951002) | rankings_tours : min_tours (0, 16, 2), avg_tours (2, 20, 1), sum_tours (9, 23, 27), ranking_date (20131014, 20061113, 19921123), max_tours (30, 27, 36)",
        "ambiguous_queries": [
            "select sum(tours), ranking_date from rankings group by ranking_date",
            "select sum_tours, ranking_date from rankings_tours"
        ],
        "gold_ambiguity": {
            "match": "{\"ranking date\": [{\"rankings\": [\"ranking_date\"]}, {\"rankings_tours\": [\"ranking_date\"]}], \"total tours\": [{\"rankings\": [\"tours\"]}, {\"rankings_tours\": [\"sum_tours\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ranking date\" refers to the schema \"rankings\".\"ranking_date\", \"total tours\" refers to the schema \"rankings\".\"tours\"",
        "clear_ambiguity": "{\"ranking date\": {\"rankings\": [\"ranking_date\"]}, \"total tours\": {\"rankings\": [\"tours\"]}}",
        "gold_query": "select sum(tours), ranking_date from rankings group by ranking_date"
    },
    {
        "index": 686,
        "db_id": "chinook_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/chinook_1/chinook_1.sqlite",
        "question": "Find the average unit price for a track.",
        "schema_without_content": "mediatype : mediatypeid , name  | artist : name , artistid  | playlisttrack : playlistid , trackid  | invoice : invoiceid , billingaddress , invoicedate , total , billingstate , customerid , billingcity , billingcountry , billingpostalcode  | employee : address , reportsto , employeeid , postalcode , hiredate , city , email , fax  262-6712\", \"+1  262-6712\", \"+1  246-9899\", birthdate , firstname , country , lastname , title , state , phone  428-9482\", \"+1  456-9986\", \"+1  428-9482\" | genre : name , genreid  | track_unitprice : max_unitprice , sum_unitprice , min_unitprice , avg_unitprice  | invoiceline : invoicelineid , trackid , quantity , unitprice , invoiceid  | playlist : playlistid , name  | album : title , artistid , albumid  | customer : postalcode , state , phone 2 635 4444\", \"+56 2 635 4444\", \"+1  924-7272\", email , supportrepid , lastname , firstname , address , customerid , company , country , fax  434-5565\", \"+1  996-1011\", \"+1  688-8756\", city  | track : trackid , mediatypeid , albumid , name , bytes , composer , genreid , unitprice , milliseconds ",
        "schema_with_content": "mediatype : mediatypeid (2, 2, 3), name (\"MPEG audio file\", \"AAC audio file\", \"MPEG audio file\") | artist : name (\"Felix Schmidt, London Symphony Orchestra & Rafael FrÃ¼hbeck de Burgos\", \"Skank\", \"Marillion\"), artistid (108, 134, 94) | playlisttrack : playlistid (12, 8, 1), trackid (1444, 1919, 1180) | invoice : invoiceid (282, 204, 342), billingaddress (\"ErzsÃ©bet krt. 58.\", \"RilskÃ¡ 3174/6\", \"302 S 700 E\"), invoicedate (\"2013-05-03 00:00:00\", \"2011-11-08 00:00:00\", \"2009-11-12 00:00:00\"), total (18.86, 3.98, 14.91), billingstate (\"Dublin\", \"BC\", \"WA\"), customerid (18, 1, 36), billingcity (\"Mountain View\", \"Edmonton\", \"Orlando\"), billingcountry (\"Portugal\", \"Germany\", \"Sweden\"), billingpostalcode (\"11230\", \"1016\", \"M6J 1V1\") | employee : address (\"923 7 ST NW\", \"923 7 ST NW\", \"825 8 Ave SW\"), reportsto (2, None, 2), employeeid (3, 8, 1), postalcode (\"T5K 2N1\", \"T3B 1Y7\", \"T3B 1Y7\"), hiredate (\"2003-10-17 00:00:00\", \"2003-05-03 00:00:00\", \"2003-10-17 00:00:00\"), city (\"Edmonton\", \"Calgary\", \"Lethbridge\"), email (\"michael@chinookcorp.com\", \"margaret@chinookcorp.com\", \"steve@chinookcorp.com\"), fax (\"+1 (403) 262-6712\", \"+1 (403) 262-6712\", \"+1 (403) 246-9899\"), birthdate (\"1965-03-03 00:00:00\", \"1958-12-08 00:00:00\", \"1973-08-29 00:00:00\"), firstname (\"Margaret\", \"Laura\", \"Laura\"), country (\"Canada\"), lastname (\"Mitchell\", \"Johnson\", \"Mitchell\"), title (\"IT Staff\", \"Sales Manager\", \"IT Manager\"), state (\"AB\"), phone (\"+1 (780) 428-9482\", \"+1 (403) 456-9986\", \"+1 (780) 428-9482\") | genre : name (\"Soundtrack\", \"Soundtrack\", \"Comedy\"), genreid (24, 17, 8) | track_unitprice : max_unitprice (0.99, 1.99), sum_unitprice (0.99, 1.99), min_unitprice (0.99, 1.99), avg_unitprice (0.99, 1.99) | invoiceline : invoicelineid (920, 1694, 1071), trackid (3369, 590, 944), quantity (1), unitprice (0.99, 1.99), invoiceid (144, 162, 375) | playlist : playlistid (13, 3, 1), name (\"Audiobooks\", \"Music Videos\", \"On-The-Go 1\") | album : title (\"As CanÃ§Ãµes de Eu Tu Eles\", \"Respighi:Pines of Rome\", \"Up An' Atom\"), artistid (101, 24, 212), albumid (262, 335, 115) | customer : postalcode (\"01007-010\", \"00530\", \"V6C 1G8\"), state (\"TX\", \"SP\", \"UT\"), phone (\"+56 (0)2 635 4444\", \"+56 (0)2 635 4444\", \"+1 (817) 924-7272\"), email (\"roberto.almeida@riotur.gov.br\", \"phil.hughes@gmail.com\", \"eduardo@woodstock.com.br\"), supportrepid (3, 4, 5), lastname (\"Ralston\", \"Harris\", \"Johansson\"), firstname (\"Phil\", \"Jack\", \"Dan\"), address (\"Theodor-Heuss-StraÃe 34\", \"Lijnbaansgracht 120bg\", \"Celsiusg. 9\"), customerid (28, 17, 58), company (None, \"Riotur\", \"Banco do Brasil S.A.\"), country (\"Argentina\", \"France\", \"Czech Republic\"), fax (\"+1 (780) 434-5565\", \"+1 (408) 996-1011\", \"+1 (604) 688-8756\"), city (\"Chicago\", \"Redmond\", \"Lisbon\") | track : trackid (1884, 1386, 3087), mediatypeid (2, 1, 5), albumid (100, 215, 106), name (\"Lemon\", \"Free Speech For The Dumb\", \"Good Golly Miss Molly\"), bytes (9552829, 20326528, 5489787), composer (\"Augusto/Craig Negoescu/Rocco Filho/Saara, Ze Carlos Da\", \"John Brim\", \"Douglas/Neves, Vicente Das/Silva, Gilmar L./Toninho Gentil/Wantuir\"), genreid (3, 18, 23), unitprice (0.99, 1.99), milliseconds (181995, 293590, 2590382)",
        "ambiguous_queries": [
            "select avg(unitprice) from track",
            "select avg_unitprice from track_unitprice"
        ],
        "gold_ambiguity": {
            "match": "{\"average unit\": [{\"track\": [\"unitprice\"]}, {\"track_unitprice\": [\"avg_unitprice\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average unit\" refers to the schema \"track\".\"unitprice\"",
        "clear_ambiguity": "{\"average unit\": {\"track\": [\"unitprice\"]}}",
        "gold_query": "select avg(unitprice) from track"
    },
    {
        "index": 687,
        "db_id": "bike_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/bike_1/bike_1.sqlite",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "schema_without_content": "status : station_id , bikes_available , docks_available , time  | station : lat , dock_count , city , installation_date , long , name , id  | trip_duration : sum_duration , max_duration , avg_duration , min_duration  | trip : end_station_name , duration , start_station_name \", \"Market at 10th\", \"California Ave Caltrain Station\", id , start_station_id , end_station_id , bike_id , zip_code , subscription_type , start_date , end_date  | weather : max_sea_level_pressure_inches , max_dew_point_f , max_temperature_f , events , date , mean_humidity , mean_visibility_miles , wind_dir_degrees , max_visibility_miles , precipitation_inches , mean_temperature_f , mean_sea_level_pressure_inches , max_humidity , min_visibility_miles , mean_wind_speed_mph , min_sea_level_pressure_inches , min_humidity , max_wind_speed_mph , mean_dew_point_f , min_dew_point_f , cloud_cover , zip_code , min_temperature_f , max_gust_speed_mph ",
        "schema_with_content": "status : station_id (34, 29, 82), bikes_available (9, 5, 11), docks_available (23, 19, 18), time (\"2015-06-02 13:39:02\", \"2015-06-02 14:00:02\", \"2015-06-02 13:38:02\") | station : lat (37.339301, 37.786305, 37.783871000000005), dock_count (11, 25, 23), city (\"San Jose\", \"San Francisco\", \"San Francisco\"), installation_date (\"8/6/2013\", \"8/25/2013\", \"8/21/2013\"), long (-121.877349, -122.227424, -121.88694299999999), name (\"San Pedro Square\", \"Stanford in Redwood City\", \"St James Park\"), id (57, 26, 83) | trip_duration : sum_duration (1253, 512, 869), max_duration (3426, 1100, 1161), avg_duration (1081, 2756, 379), min_duration (396, 251, 277) | trip : end_station_name (\"Embarcadero at Bryant\", \"Market at Sansome\", \"California Ave Caltrain Station\"), duration (1540, 7542, 984), start_station_name (\"Harry Bridges Plaza (Ferry Building)\", \"Market at 10th\", \"California Ave Caltrain Station\"), id (904127, 901853, 909610), start_station_id (7, 36, 64), end_station_id (23, 39, 31), bike_id (507, 95, 477), zip_code (94122, 81, 5411), subscription_type (\"Subscriber\", \"Customer\"), start_date (\"8/31/2015 13:56\", \"8/24/2015 17:33\", \"8/22/2015 16:55\"), end_date (\"8/23/2015 8:13\", \"8/28/2015 18:47\", \"8/25/2015 6:32\") | weather : max_sea_level_pressure_inches (29.75, 29.93, 30.28), max_dew_point_f (62, 64, 45), max_temperature_f (72, 84, 83), events (\"Rain\", \"rain\", \"rain\"), date (\"2/14/2014\", \"9/19/2013\", \"8/14/2014\"), mean_humidity (43, 54, 94), mean_visibility_miles (11, \"\", 5), wind_dir_degrees (277, 257, 278), max_visibility_miles (7, 19, 8), precipitation_inches (1.06, 0.24, 0.29), mean_temperature_f (44, 72, 66), mean_sea_level_pressure_inches (30.35, 30.26, 29.69), max_humidity (68, 70, 88), min_visibility_miles (0, 10, 8), mean_wind_speed_mph (15, 20, 16), min_sea_level_pressure_inches (30.16, 29.51, 29.74), min_humidity (21, 82, 30), max_wind_speed_mph (7, 0, 25), mean_dew_point_f (47, 29, 52), min_dew_point_f (40, 5, 45), cloud_cover (1, \"\", 2), zip_code (94107, 94063, 94107), min_temperature_f (46, 40, 30), max_gust_speed_mph (38, 24, 29)",
        "ambiguous_queries": [
            "select sum(duration), max(duration) from trip where bike_id = 636",
            "select sum_duration, max_duration from trip_duration where bike_id = 636"
        ],
        "gold_ambiguity": {
            "match": "{\"total\": [{\"trip\": [\"duration\"]}, {\"trip_duration\": [\"sum_duration\"]}], \"maximum\": [{\"trip\": [\"duration\"]}, {\"trip_duration\": [\"max_duration\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total\" refers to the schema \"trip\".\"duration\", \"maximum\" refers to the schema \"trip\".\"duration\"",
        "clear_ambiguity": "{\"total\": {\"trip\": [\"duration\"]}, \"maximum\": {\"trip\": [\"duration\"]}}",
        "gold_query": "select sum(duration), max(duration) from trip where bike_id = 636"
    },
    {
        "index": 688,
        "db_id": "gymnast",
        "ambig_type": "aggregate",
        "db_file": "aggregate/gymnast/gymnast.sqlite",
        "question": "Return the average horizontal bar points across all gymnasts.",
        "schema_without_content": "gymnast : gymnast_id , vault_points , parallel_bars_points , total_points , pommel_horse_points , rings_points , floor_exercise_points , horizontal_bar_points  | gymnast_horizontal_bar_points : min_horizontal_bar_points , max_horizontal_bar_points , avg_horizontal_bar_points , sum_horizontal_bar_points  | people : people_id , name , age , hometown , height ",
        "schema_with_content": "gymnast : gymnast_id (8, 10, 4), vault_points (9.637, 9.55, 9.575), parallel_bars_points (9.562, 9.587, 9.5), total_points (57.424, 57.374, 57.398), pommel_horse_points (9.625, 9.737, 9.737), rings_points (9.75, 9.3, 9.512), floor_exercise_points (9.687, 9.762, 9.762), horizontal_bar_points (9.75, 9.412, 9.55) | gymnast_horizontal_bar_points : min_horizontal_bar_points (9.737, 9.55, 9.55), max_horizontal_bar_points (9.737, 9.412, 9.725), avg_horizontal_bar_points (9.725, 9.55, 9.75), sum_horizontal_bar_points (9.5, 9.725, 9.725) | people : people_id (10, 5, 3), name (\"Elizabeth QuiÃ±Ã³nez Aroyo\", \"Paul Hamm\", \"Eve Tatiana Cruz Oviedo\"), age (23.0, 19.0, 19.0), hometown (\"Miami\", \"Los Alcarrizos\", \"Santo Domingo\"), height (1.76, 1.7, 1.71)",
        "ambiguous_queries": [
            "select avg(horizontal_bar_points) from gymnast",
            "select avg_horizontal_bar_points from gymnast_horizontal_bar_points"
        ],
        "gold_ambiguity": {
            "match": "{\"average horizontal bar points\": [{\"gymnast\": [\"horizontal_bar_points\"]}, {\"gymnast_horizontal_bar_points\": [\"avg_horizontal_bar_points\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average horizontal bar points\" refers to the schema \"gymnast_horizontal_bar_points\".\"avg_horizontal_bar_points\"",
        "clear_ambiguity": "{\"average horizontal bar points\": {\"gymnast_horizontal_bar_points\": [\"avg_horizontal_bar_points\"]}}",
        "gold_query": "select avg_horizontal_bar_points from gymnast_horizontal_bar_points"
    },
    {
        "index": 689,
        "db_id": "movie_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/movie_1/movie_1.sqlite",
        "question": "What is the maximum and mininum number of stars a rating can receive?",
        "schema_without_content": "movie : mid , year , director , title  | rating_stars : max_stars , sum_stars , min_stars , avg_stars  | reviewer : rid , name  | rating : mid , ratingdate , rid , stars ",
        "schema_with_content": "movie : mid (107, 108, 105), year (1937, 1977, 1982), director (\"George Lucas\", \"George Lucas\", \"James Cameron\"), title (\"Gone with the Wind\", \"Titanic\", \"Raiders of the Lost Ark\") | rating_stars : max_stars (2, 3, 3), sum_stars (2, 4, 4), min_stars (4, 5, 5), avg_stars (4, 5, 3) | reviewer : rid (203, 201, 203), name (\"Brittany Harris\", \"Brittany Harris\", \"Brittany Harris\") | rating : mid (101, 103, 108), ratingdate (None, \"2011-01-19\", \"2011-01-19\"), rid (205, 207, 205), stars (2, 5, 2)",
        "ambiguous_queries": [
            "select max(stars), min(stars) from rating",
            "select max_stars, min_stars from rating_stars"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"rating\": [\"stars\"]}, {\"rating_stars\": [\"max_stars\"]}], \"mininum\": [{\"rating\": [\"stars\"]}, {\"rating_stars\": [\"min_stars\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"rating\".\"stars\", \"mininum\" refers to the schema \"rating\".\"stars\"",
        "clear_ambiguity": "{\"maximum\": {\"rating\": [\"stars\"]}, \"mininum\": {\"rating\": [\"stars\"]}}",
        "gold_query": "select max(stars), min(stars) from rating"
    },
    {
        "index": 690,
        "db_id": "department_store",
        "ambig_type": "aggregate",
        "db_file": "aggregate/department_store/department_store.sqlite",
        "question": "Find the average price of all product clothes.",
        "schema_without_content": "suppliers : supplier_id , supplier_phone , supplier_name  | department_stores : dept_store_id , store_address , store_name , store_email , dept_store_chain_id , store_phone  | customer_addresses : customer_id , date_to , date_from , address_id  | order_items : product_id , order_id , order_item_id  | department_store_chain : dept_store_chain_id , dept_store_chain_name  | supplier_addresses : address_id , date_from , date_to , supplier_id  | customer_orders : customer_id , order_id , order_date , order_status_code  | products_product_price : max_product_price , sum_product_price , min_product_price , avg_product_price  | staff : staff_id , staff_gender , staff_name  | staff_department_assignments : department_id , job_title_code , date_assigned_to , date_assigned_from , staff_id  | addresses : address_details , address_id  | products : product_type_code , product_name , product_price , product_id  | product_suppliers : supplier_id , date_supplied_to , total_value_purchased , total_amount_purchased , date_supplied_from , product_id  | departments : dept_store_id , department_id , department_name  | customers : customer_email , payment_method_code , customer_phone , customer_name , customer_code , customer_id , customer_address ",
        "schema_with_content": "suppliers : supplier_id (4, 1, 2), supplier_phone (\"1-432-960-2402x1734\", \"1-483-283-4742\", \"287-071-1153x254\"), supplier_name (\"Lidl\", \"Audi\", \"Lidl\") | department_stores : dept_store_id (6, 1, 9), store_address (\"994 Travis Plains\nNorth Wadeton, WV 27575-3951\", \"41924 Alfredo Cliff\nNew Eviestad, NY 17573\", \"16650 Lysanne River Apt. 281\nNorth Garettton, AL 84756-4375\"), store_name (\"store_name\"), store_email (\"selmer.stiedemann@example.org\", \"bryon24@example.org\", \"freda.toy@example.org\"), dept_store_chain_id (1, 1, 4), store_phone (\"1-216-312-0375\", \"1-764-126-7567x0795\", \"670-466-6367\") | customer_addresses : customer_id (6, 2, 4), date_to (\"2018-03-02 17:46:11\", \"2018-02-27 20:08:33\", \"2018-03-13 21:49:51\"), date_from (\"2017-10-07 23:00:26\", \"2017-12-14 07:40:08\", \"2017-11-01 04:21:41\"), address_id (13, 13, 8) | order_items : product_id (3, 13, 12), order_id (12, 13, 7), order_item_id (5, 1, 13) | department_store_chain : dept_store_chain_id (1, 2, 2), dept_store_chain_name (\"North\", \"West\", \"East\") | supplier_addresses : address_id (2, 9, 9), date_from (\"2015-03-16 19:30:29\", \"2008-11-22 12:01:25\", \"2015-03-16 19:30:29\"), date_to (\"2018-03-24 00:14:45\", \"2018-03-02 19:50:22\", \"2018-03-14 20:06:37\"), supplier_id (2, 3, 4) | customer_orders : customer_id (15, 6, 10), order_id (11, 9, 9), order_date (\"2018-02-15 02:25:32\", \"2018-02-16 19:42:39\", \"2018-03-16 22:42:46\"), order_status_code (\"New\", \"New\", \"Cancelled\") | products_product_price : max_product_price (918.41, 918.41, 918.41), sum_product_price (408.82, 944.96, 916.53), min_product_price (813.76, 803.74, 408.82), avg_product_price (534.52, 687.23, 534.52) | staff : staff_id (5, 8, 4), staff_gender (\"1\", \"0\"), staff_name (\"Sabrina\", \"Melody\", \"Vanessa\") | staff_department_assignments : department_id (1, 5, 3), job_title_code (\"Department Manager\", \"Clerical Staff\", \"Administration\"), date_assigned_to (\"2018-03-25 15:34:31\", \"2018-03-24 02:36:57\", \"2018-03-23 20:25:24\"), date_assigned_from (\"2017-11-14 04:38:44\", \"2017-12-26 06:34:20\", \"2016-09-15 11:00:41\"), staff_id (12, 9, 12) | addresses : address_details (\"4062 Mante Place\nWest Lindsey, DE 76199-8015\", \"4062 Mante Place\nWest Lindsey, DE 76199-8015\", \"195 Mara Rue\nJenkinsmouth, OK 22345\"), address_id (2, 1, 1) | products : product_type_code (\"Clothes\", \"Hardware\"), product_name (\"black jeans\", \"mouse\", \"blue jeans\"), product_price (971.44, 629.89, 803.74), product_id (5, 15, 12) | product_suppliers : supplier_id (1, 2, 3), date_supplied_to (\"2018-03-24 05:22:36\", \"2018-03-23 19:21:12\", \"2018-03-24 12:27:13\"), total_value_purchased (98086.8, 36274.56, 29836.26), total_amount_purchased (\"20689.78\", \"32881.38\", \"20447.99\"), date_supplied_from (\"2017-08-09 21:26:38\", \"2017-11-17 08:23:16\", \"2017-07-13 15:02:24\"), product_id (11, 5, 6) | departments : dept_store_id (5, 11, 4), department_id (4, 2, 4), department_name (\"managing\", \"purchasing\", \"managing\") | customers : customer_email (\"kathlyn24@example.org\", \"qstokes@example.org\", \"qstokes@example.org\"), payment_method_code (\"Credit Card\", \"Direct Debit\"), customer_phone (\"197-417-3557\", \"08023680831\", \"1-472-036-0434\"), customer_name (\"Lukas\", \"Kenya\", \"Darron\"), customer_code (\"844\", \"589\", \"980\"), customer_id (1, 5, 13), customer_address (\"7308 Joan Lake Suite 346\nLizethtown, DE 56522\", \"8327 Christiansen Lakes Suite 409\nSchneiderland, IA 93624\", \"75099 Tremblay Port Apt. 163\nSouth Norrisland, SC 80546\")",
        "ambiguous_queries": [
            "select avg(product_price) from products where product_type_code = 'Clothes'",
            "select avg_product_price from products_product_price where product_type_code = 'Clothes'"
        ],
        "gold_ambiguity": {
            "match": "{\"average price\": [{\"products\": [\"product_price\"]}, {\"products_product_price\": [\"avg_product_price\"]}], \"clothes\": [{\"products\": [\"product_type_code\"]}, {\"products_product_price\": [\"product_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average price\" refers to the schema \"products_product_price\".\"avg_product_price\", \"clothes\" refers to the schema \"products_product_price\".\"product_type_code\"",
        "clear_ambiguity": "{\"average price\": {\"products_product_price\": [\"avg_product_price\"]}, \"clothes\": {\"products_product_price\": [\"product_type_code\"]}}",
        "gold_query": "select avg_product_price from products_product_price where product_type_code = 'Clothes'"
    },
    {
        "index": 691,
        "db_id": "bike_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/bike_1/bike_1.sqlite",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "schema_without_content": "station : city , dock_count , id , lat , long , name , installation_date  | weather : max_gust_speed_mph , mean_humidity , min_sea_level_pressure_inches , mean_temperature_f , zip_code , cloud_cover , max_humidity , max_sea_level_pressure_inches , precipitation_inches , max_visibility_miles , min_humidity , events , mean_dew_point_f , mean_visibility_miles , mean_wind_speed_mph , min_dew_point_f , max_dew_point_f , date , max_temperature_f , min_temperature_f , min_visibility_miles , max_wind_speed_mph , wind_dir_degrees , mean_sea_level_pressure_inches  | status : station_id , bikes_available , docks_available , time  | trip : id , subscription_type , duration , start_station_name \", \"SJSU 4th at San Carlos\", \"Cowper at University\", bike_id , end_station_name , zip_code , start_station_id , end_date , end_station_id , start_date  | station_lat_long : min_long , avg_long , max_long , min_lat , sum_long , max_lat , sum_lat , avg_lat ",
        "schema_with_content": "station : city (\"Palo Alto\", \"Mountain View\", \"Mountain View\"), dock_count (27, 27, 27), id (68, 31, 60), lat (37.781332, 37.484219, 37.795392), long (-122.16309299999999, -122.083678, -122.394434), name (\"Rengstorff Avenue / California Street\", \"San Pedro Square\", \"Castro Street and El Camino Real\"), installation_date (\"8/22/2013\", \"1/22/2014\", \"8/5/2013\") | weather : max_gust_speed_mph (22, 20, 23), mean_humidity (37, 73, 69), min_sea_level_pressure_inches (29.63, 30.34, 29.73), mean_temperature_f (81, 82, 66), zip_code (94301, 94063, 94041), cloud_cover (5, 0, 7), max_humidity (67, 100, 88), max_sea_level_pressure_inches (30.43, 29.96, 30.15), precipitation_inches (1.09, 0.68, 3.36), max_visibility_miles (20, \"\", 7), min_humidity (57, 66, 39), events (\"Fog-Rain\", \"Fog\", \"\"), mean_dew_point_f (63, 20, 36), mean_visibility_miles (13, 13, 12), mean_wind_speed_mph (12, 12, 21), min_dew_point_f (40, 58, 56), max_dew_point_f (50, 62, 20), date (\"8/9/2015\", \"6/14/2015\", \"7/2/2014\"), max_temperature_f (49, 79, 74), min_temperature_f (69, 75, 59), min_visibility_miles (9, 7, 6), max_wind_speed_mph (11, 17, 28), wind_dir_degrees (351, 38, 186), mean_sea_level_pressure_inches (29.97, 29.8, 30.24) | status : station_id (65, 39, 10), bikes_available (16, 15, 14), docks_available (4, 3, 4), time (\"2015-06-02 13:14:03\", \"2015-06-02 14:09:02\", \"2015-06-02 14:01:02\") | trip : id (907768, 904687, 903812), subscription_type (\"Subscriber\", \"Customer\"), duration (3578, 2813, 1539), start_station_name (\"Mechanics Plaza (Market at Battery)\", \"SJSU 4th at San Carlos\", \"Cowper at University\"), bike_id (301, 558, 378), end_station_name (\"Post at Kearny\", \"Ryland Park\", \"Embarcadero at Folsom\"), zip_code (94104, 8860, 84092), start_station_id (74, 61, 49), end_date (\"8/22/2015 17:36\", \"8/31/2015 18:06\", \"8/29/2015 19:32\"), end_station_id (60, 39, 83), start_date (\"8/27/2015 16:21\", \"8/22/2015 18:54\", \"8/26/2015 10:34\") | station_lat_long : min_long (-122.399051, -121.900084, -121.888979), avg_long (-122.229951, -122.10833799999999, -122.07671299999998), max_long (-122.40101399999999, -122.226904, -122.13777749999998), min_lat (37.79728, 37.333954999999996, 37.798522), sum_long (-121.90178200000001, -122.13777749999998, -122.227424), max_lat (37.80477, 37.781752000000004, 37.333954999999996), sum_lat (37.484219, 37.791464000000005, 37.795001), avg_lat (37.389218, 37.342725, 37.444521)",
        "ambiguous_queries": [
            "select avg(lat), avg(long) from station where city = 'San Jose'",
            "select avg_lat, avg_long from station_lat_long where city = 'San Jose'"
        ],
        "gold_ambiguity": {
            "match": "{\"city\": [{\"station\": [\"city\"]}, {\"station_lat_long\": [\"city\"]}], \"latitude\": [{\"station\": [\"lat\"]}, {\"station_lat_long\": [\"avg_lat\"]}], \"longitude\": [{\"station\": [\"long\"]}, {\"station_lat_long\": [\"avg_long\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"city\" refers to the schema \"station_lat_long\".\"city\", \"latitude\" refers to the schema \"station_lat_long\".\"avg_lat\", \"longitude\" refers to the schema \"station_lat_long\".\"avg_long\"",
        "clear_ambiguity": "{\"city\": {\"station_lat_long\": [\"city\"]}, \"latitude\": {\"station_lat_long\": [\"avg_lat\"]}, \"longitude\": {\"station_lat_long\": [\"avg_long\"]}}",
        "gold_query": "select avg_lat, avg_long from station_lat_long where city = 'San Jose'"
    },
    {
        "index": 692,
        "db_id": "station_weather",
        "ambig_type": "aggregate",
        "db_file": "aggregate/station_weather/station_weather.sqlite",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "schema_without_content": "route : station_id , train_id  | station : local_authority , services , network_name , id  | train : destination , id , name , origin , interval , time , train_number  | weekly_weather : wind_speed_mph , low_temperature , day_of_week , station_id , precipitation , high_temperature  | weekly_weather_low_temperature_wind_speed_mph : sum_wind_speed_mph , min_low_temperature , min_wind_speed_mph , avg_wind_speed_mph , sum_low_temperature , max_low_temperature , max_wind_speed_mph , avg_low_temperature ",
        "schema_with_content": "route : station_id (8, 9, 2), train_id (1, 8, 10) | station : local_authority (\"Chiltern\", \"Brentwood\", \"Chiltern\"), services (\"London Overground\", \"Metropolitan line\", \"London Overground\"), network_name (\"Chorleywood\", \"Amersham\", \"Chafford Hundred\"), id (5, 2, 10) | train : destination (\"Quilon Junction\", \"Trivandrum\", \"Guruvayur\"), id (1, 7, 7), name (\"Island Express\", \"Ananthapuri Express\", \"Madurai Fast Passenger\"), origin (\"Mumbai\", \"Madurai\", \"Quilon\"), interval (\"Daily\"), time (\"21:49\", \"06:30\", \"16:59\"), train_number (16525, 16381, 16650) | weekly_weather : wind_speed_mph (9, 17, 9), low_temperature (49, 49, 56), day_of_week (\"Friday\", \"Saturday\", \"Sunday\"), station_id (1, 4, 1), precipitation (60.0, 70.0, 50.0), high_temperature (59, 49, 54) | weekly_weather_low_temperature_wind_speed_mph : sum_wind_speed_mph (12, 17, 14), min_low_temperature (50, 52, 46), min_wind_speed_mph (7, 24, 23), avg_wind_speed_mph (24, 13, 13), sum_low_temperature (52, 49, 49), max_low_temperature (50, 52, 46), max_wind_speed_mph (22, 13, 22), avg_low_temperature (54, 46, 46)",
        "ambiguous_queries": [
            "select min(low_temperature), max(wind_speed_mph) from weekly_weather",
            "select min_low_temperature, max_wind_speed_mph from weekly_weather_low_temperature_wind_speed_mph"
        ],
        "gold_ambiguity": {
            "match": "{\"low temperature\": [{\"weekly_weather\": [\"low_temperature\"]}, {\"weekly_weather_low_temperature_wind_speed_mph\": [\"min_low_temperature\"]}], \"highest wind\": [{\"weekly_weather\": [\"wind_speed_mph\"]}, {\"weekly_weather_low_temperature_wind_speed_mph\": [\"max_wind_speed_mph\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"low temperature\" refers to the schema \"weekly_weather_low_temperature_wind_speed_mph\".\"min_low_temperature\", \"highest wind\" refers to the schema \"weekly_weather_low_temperature_wind_speed_mph\".\"max_wind_speed_mph\"",
        "clear_ambiguity": "{\"low temperature\": {\"weekly_weather_low_temperature_wind_speed_mph\": [\"min_low_temperature\"]}, \"highest wind\": {\"weekly_weather_low_temperature_wind_speed_mph\": [\"max_wind_speed_mph\"]}}",
        "gold_query": "select min_low_temperature, max_wind_speed_mph from weekly_weather_low_temperature_wind_speed_mph"
    },
    {
        "index": 693,
        "db_id": "election",
        "ambig_type": "aggregate",
        "db_file": "aggregate/election/election.sqlite",
        "question": "What are the maximum and minimum population of the counties?",
        "schema_without_content": "county : zip_code , county_id , population , county_name  | county_population : min_population , sum_population , avg_population , max_population  | party : party_id , lieutenant_governor , year , governor , us_senate \", \"Hillary Rodham Clinton\", comptroller , party , attorney_general  | election : counties_represented , district , party , first_elected , committee , delegate , election_id ",
        "schema_with_content": "county : zip_code (\"D11\", \"D09\", \"D09\"), county_id (1, 2, 1), population (21000.0, 21000.0, 79000.0), county_name (\"Baltimore County\", \"Colony\", \"Baltimore County\") | county_population : min_population (87200.0, 79000.0, 21000.0), sum_population (87200.0, 87200.0, 79000.0), avg_population (87200.0, 87200.0, 21000.0), max_population (87200.0, 87200.0, 90000.0) | party : party_id (4, 7, 6), lieutenant_governor (\"Sandra Frankel\", \"Jonathan Reiter\", \"David Paterson\"), year (1998.0, 2002.0, 2006.0), governor (\"Carl McCall\", \"Betsy McCaughey Ross\", \"Betsy McCaughey Ross\"), us_senate (\"Charles Schumer\", \"(no election)\", \"Hillary Rodham Clinton\"), comptroller (\"Carl McCall\", \"Alan Hevesi\", \"John Faso\"), party (\"Working Families\", \"Democratic\", \"Democratic\"), attorney_general (\"Eliot Spitzer\", \"Andrew Cuomo\", \"Jeanine Pirro\") | election : counties_represented (\"12.1 12A\", \"09.1 9A\", \"12.2 12B\"), district (1, 4, 1), party (4, 1, 3), first_elected (1994.0, 2006.0, 2002.0), committee (\"Environmental Matters\", \"Ways and Means\", \"Economic Matters\"), delegate (\"DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.\", \"Malone, James E. Jr. James E. Malone, Jr.\", \"Malone, James E. Jr. James E. Malone, Jr.\"), election_id (2, 6, 8)",
        "ambiguous_queries": [
            "select max(population), min(population) from county",
            "select max_population, min_population from county_population"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"county\": [\"population\"]}, {\"county_population\": [\"max_population\"]}], \"minimum\": [{\"county\": [\"population\"]}, {\"county_population\": [\"min_population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"county_population\".\"max_population\", \"minimum\" refers to the schema \"county_population\".\"min_population\"",
        "clear_ambiguity": "{\"maximum\": {\"county_population\": [\"max_population\"]}, \"minimum\": {\"county_population\": [\"min_population\"]}}",
        "gold_query": "select max_population, min_population from county_population"
    },
    {
        "index": 694,
        "db_id": "college_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_2/college_2.sqlite",
        "question": "Find the total credits of courses provided by different department.",
        "schema_without_content": "prereq : course_id , prereq_id  | time_slot : end_hr , end_min , day , start_min , start_hr , time_slot_id  | teaches : year , semester , course_id , sec_id , id  | instructor : dept_name , name , salary , id  | advisor : i_id , s_id  | department : dept_name , building , budget  | course : credits , dept_name , title , course_id  | course_credits : dept_name , min_credits , avg_credits , sum_credits , max_credits  | student : tot_cred , dept_name , id , name  | section : course_id , building , room_number , semester , year , sec_id , time_slot_id  | classroom : building , room_number , capacity  | takes : course_id , semester , year , grade , id , sec_id ",
        "schema_with_content": "prereq : course_id (\"618\", \"359\", \"820\"), prereq_id (\"731\", \"345\", \"791\") | time_slot : end_hr (8, 12, 8), end_min (50, 45, 30), day (\"T\", \"M\", \"R\"), start_min (0, 30), start_hr (10, 8, 10), time_slot_id (\"B\", \"A\", \"H\") | teaches : year (2007, 2001, 2010), semester (\"Spring\", \"Fall\"), course_id (\"545\", \"304\", \"349\"), sec_id (\"1\", \"2\", \"3\"), id (\"63287\", \"25946\", \"42782\") | instructor : dept_name (\"Cybernetics\", \"Geology\", \"English\"), name (\"Lembr\", \"Dale\", \"Bertolino\"), salary (61387.56, 43770.36, 98333.65), id (\"42782\", \"4034\", \"28097\") | advisor : i_id (\"65931\", \"16807\", \"14365\"), s_id (\"89051\", \"48247\", \"37284\") | department : dept_name (\"Elec. Eng.\", \"Civil Eng.\", \"Pol. Sci.\"), building (\"Linderman\", \"Main\", \"Mercer\"), budget (395051.74, 866831.75, 406557.93) | course : credits (4, 3), dept_name (\"Civil Eng.\", \"Mech. Eng.\", \"Geology\"), title (\"Accounting\", \"Elastic Structures\", \"Mobile Computing\"), course_id (\"808\", \"830\", \"805\") | course_credits : dept_name (\"Mech. Eng.\", \"English\", \"Physics\"), min_credits (4, 3), avg_credits (4, 3), sum_credits (4, 3), max_credits (4, 3) | student : tot_cred (64, 118, 99), dept_name (\"Marketing\", \"Athletics\", \"English\"), id (\"24865\", \"81876\", \"75116\"), name (\"Bumbau\", \"Hadzilacos\", \"Tassel\") | section : course_id (\"486\", \"893\", \"408\"), building (\"Stabler\", \"Rathbone\", \"Whitman\"), room_number (\"314\", \"119\", \"314\"), semester (\"Fall\", \"Spring\"), year (2005, 2010, 2001), sec_id (\"1\", \"2\", \"3\"), time_slot_id (\"H\", \"B\", \"H\") | classroom : building (\"Garfield\", \"Lambeau\", \"Lambeau\"), room_number (\"314\", \"804\", \"700\"), capacity (59, 65, 109) | takes : course_id (\"338\", \"415\", \"443\"), semester (\"Fall\", \"Spring\"), year (2001, 2010, 2010), grade (\"B \", \"C+\", \"A+\"), id (\"57962\", \"69307\", \"24201\"), sec_id (\"1\", \"2\", \"3\")",
        "ambiguous_queries": [
            "select sum(credits), dept_name from course group by dept_name",
            "select sum_credits, dept_name from course_credits"
        ],
        "gold_ambiguity": {
            "match": "{\"total credits\": [{\"course\": [\"credits\"]}, {\"course_credits\": [\"sum_credits\"]}], \"department\": [{\"course\": [\"dept_name\"]}, {\"course_credits\": [\"dept_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total credits\" refers to the schema \"course_credits\".\"sum_credits\", \"department\" refers to the schema \"course_credits\".\"dept_name\"",
        "clear_ambiguity": "{\"total credits\": {\"course_credits\": [\"sum_credits\"]}, \"department\": {\"course_credits\": [\"dept_name\"]}}",
        "gold_query": "select sum_credits, dept_name from course_credits"
    },
    {
        "index": 695,
        "db_id": "film_rank",
        "ambig_type": "aggregate",
        "db_file": "aggregate/film_rank/film_rank.sqlite",
        "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
        "schema_without_content": "market : market_id , number_cities , country  | film : gross_in_dollar , director , studio , film_id , title  | film_market_estimation : estimation_id , film_id , market_id , type , year , low_estimate , high_estimate  | film_market_estimation_market_number_cities : avg_number_cities , max_number_cities , sum_number_cities , min_number_cities , low_estimate ",
        "schema_with_content": "market : market_id (1, 6, 2), number_cities (453, 540, 700), country (\"Poland\", \"China\", \"Russia\") | film : gross_in_dollar (57059003, 52767889, 76606280), director (\"Walter Hill\", \"John Huston\", \"Sydney Pollack\"), studio (\"Paramount\", \"United Artists\", \"Columbia\"), film_id (1, 7, 2), title (\"Tootsie\", \"Star Trek II: The Wrath of Khan\", \"Rocky III\") | film_market_estimation : estimation_id (4, 2, 4), film_id (2, 2, 3), market_id (1, 2, 3), type (\"Mass suicide murder\", \"Mass suicide\", \"Mass human sacrifice\"), year (2000, 1997, 1997), low_estimate (53.0, 8000.0, 80000.0), high_estimate (80400.0, 960.0, 913.0) | film_market_estimation_market_number_cities : avg_number_cities (231, 453, 231), max_number_cities (453, 453, 453), sum_number_cities (540, 231, 540), min_number_cities (700, 540, 212), low_estimate (39.0, 39.0, 16.0)",
        "ambiguous_queries": [
            "select avg(t2.number_cities) from film_market_estimation as t1 join market as t2 on t1.market_id = t2.market_id where t1.low_estimate > 10000",
            "select avg_number_cities from film_market_estimation_market_number_cities where low_estimate > 10000"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of cities\": [{\"film_market_estimation_market_number_cities\": [\"avg_number_cities\"]}, {\"market\": [\"number_cities\"]}], \"low film market estimate\": [{\"film_market_estimation\": [\"low_estimate\"]}, {\"film_market_estimation_market_number_cities\": [\"low_estimate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of cities\" refers to the schema \"film_market_estimation_market_number_cities\".\"avg_number_cities\", \"low film market estimate\" refers to the schema \"film_market_estimation_market_number_cities\".\"low_estimate\"",
        "clear_ambiguity": "{\"average number of cities\": {\"film_market_estimation_market_number_cities\": [\"avg_number_cities\"]}, \"low film market estimate\": {\"film_market_estimation_market_number_cities\": [\"low_estimate\"]}}",
        "gold_query": "select avg_number_cities from film_market_estimation_market_number_cities where low_estimate > 10000"
    },
    {
        "index": 696,
        "db_id": "device",
        "ambig_type": "aggregate",
        "db_file": "aggregate/device/device.sqlite",
        "question": "Give the average quantity of stocks.",
        "schema_without_content": "stock : device_id , shop_id , quantity  | shop : shop_name , shop_id , location , open_date , open_year  | stock_quantity : avg_quantity , max_quantity , sum_quantity , min_quantity  | device : carrier , package_version , device , device_id , software_platform , applications ",
        "schema_with_content": "stock : device_id (4, 6), shop_id (2, 1, 4), quantity (200, 200, 110) | shop : shop_name (\"Gelli repair\", \"Naval's shop\", \"Best Buy\"), shop_id (1, 10, 1), location (\"Cymmer\", \"Penygraig\", \"Wattstown\"), open_date (\"8 November\", \"10 June\", \"23â24 December\"), open_year (2010, 2007, 2010) | stock_quantity : avg_quantity (200, 110, 134), max_quantity (56, 56, 112), sum_quantity (112, 110, 110), min_quantity (200, 112, 124) | device : carrier (\"Iusacell\", \"Vodafone AU\", \"Bell Mobility\"), package_version (\"4.7.0.208\", \"4.7.0.208\", \"5.0.0.808\"), device (\"BlackBerry Storm 9530\", \"BlackBerry Storm 9530\", \"Apple\"), device_id (5, 4, 3), software_platform (\"Android\", \"iOS\"), applications (\"5.0.0.451\", \"5.0.0.328\", \"5.0.0.328\")",
        "ambiguous_queries": [
            "select avg(quantity) from stock",
            "select avg_quantity from stock_quantity"
        ],
        "gold_ambiguity": {
            "match": "{\"average quantity\": [{\"stock\": [\"quantity\"]}, {\"stock_quantity\": [\"avg_quantity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average quantity\" refers to the schema \"stock_quantity\".\"avg_quantity\"",
        "clear_ambiguity": "{\"average quantity\": {\"stock_quantity\": [\"avg_quantity\"]}}",
        "gold_query": "select avg_quantity from stock_quantity"
    },
    {
        "index": 697,
        "db_id": "college_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_1/college_1.sqlite",
        "question": "What is the total credit does each department offer?",
        "schema_without_content": "class : class_room , crs_code , class_code , class_section , prof_num , class_time  | professor : prof_extension , prof_high_degree , emp_num , prof_office , dept_code  | course_crs_credit : avg_crs_credit , max_crs_credit , sum_crs_credit , dept_code , min_crs_credit  | course : dept_code , crs_credit , crs_description , crs_code  | employee : emp_initial , emp_num , emp_dob , emp_fname , emp_hiredate , emp_jobcode , emp_lname  | department : dept_code , dept_address , dept_extension , school_code , emp_num , dept_name  | enroll : stu_num , enroll_grade , class_code  | student : prof_num , stu_gpa , stu_num , dept_code , stu_class , stu_init , stu_fname , stu_phone , stu_transfer , stu_hrs , stu_lname , stu_dob ",
        "schema_with_content": "class : class_room (\"KLR200\", \"BUS252\", \"KLR211\"), crs_code (\"CIS-220\", \"QM-362\", \"CIS-420\"), class_code (\"10018\", \"10016\", \"10014\"), class_section (\"1\", \"2\", \"3\"), prof_num (162, 162, 162), class_time (\"MWF 10:00-10:50 a.m.\", \"MWF 8:00-8:50 a.m.\", \"Th 6:00-8:40 p.m.\") | professor : prof_extension (\"5561\", \"4016\", \"2359\"), prof_high_degree (\"DBA\", \"Ph.D.\", \"Ph.D.\"), emp_num (162, 401, 155), prof_office (\"AAK 201\", \"KLR 409B\", \"AAK 230\"), dept_code (\"MATH\", \"HIST\", \"ART\") | course_crs_credit : avg_crs_credit (3.0, 4.0), max_crs_credit (3.0, 4.0), sum_crs_credit (3.0, 4.0), dept_code (\"ACCT\", \"CIS\"), min_crs_credit (3.0, 4.0) | course : dept_code (\"ACCT\", \"CIS\"), crs_credit (3.0, 4.0), crs_description (\"Accounting II\", \"Intro. to Microcomputing\", \"Database Design and Implementation\"), crs_code (\"CIS-220\", \"QM-261\", \"CIS-420\") | employee : emp_initial (\"W\", \"E\", \"A\"), emp_num (165, 191, 228), emp_dob (\"1953-7-3\", \"1953-5-17\", \"1973-12-2\"), emp_fname (\"Gerald\", \"Jill\", \"Weston\"), emp_hiredate (\"1983-10-18\", \"1994-1-5\", \"1976-8-1\"), emp_jobcode (\"TECH\", \"CLRK\", \"PROF\"), emp_lname (\"Ardano\", \"Smithson\", \"Teng\") | department : dept_code (\"CIS\", \"ACCT\", \"ECON/FIN\"), dept_address (\"AAK 297, Box 438\", \"AAK 230, Box 415\", \"AAK 194, Box 422\"), dept_extension (\"3342\", \"4117\", \"4234\"), school_code (\"BUS\", \"A&SCI\"), emp_num (195, 299, 209), dept_name (\"Fine Arts\", \"English\", \"Sociology\") | enroll : stu_num (321452, 324257), enroll_grade (\"C\", \"B\", \"A\"), class_code (\"10014\", \"10018\", \"10021\") | student : prof_num (222, 222, 222), stu_gpa (3.87, 3.27, 2.84), stu_num (324274, 324291, 321452), dept_code (\"CIS\", \"BIOL\", \"EDU\"), stu_class (\"Jr\", \"Sr\", \"Jr\"), stu_init (\"B\", \"B\", \"C\"), stu_fname (\"Raphael\", \"Raphael\", \"Gerald\"), stu_phone (\"2231\", \"2134\", \"2231\"), stu_transfer (0, 1), stu_hrs (36, 42, 36), stu_lname (\"Robertson\", \"Smithson\", \"Smith\"), stu_dob (\"1958-12-30\", \"1976-9-16\", \"1976-9-16\")",
        "ambiguous_queries": [
            "select sum(crs_credit), dept_code from course group by dept_code",
            "select sum_crs_credit, dept_code from course_crs_credit"
        ],
        "gold_ambiguity": {
            "match": "{\"total credit\": [{\"course\": [\"crs_credit\"]}, {\"course_crs_credit\": [\"sum_crs_credit\"]}], \"department\": [{\"course\": [\"dept_code\"]}, {\"course_crs_credit\": [\"dept_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total credit\" refers to the schema \"course\".\"crs_credit\", \"department\" refers to the schema \"course\".\"dept_code\"",
        "clear_ambiguity": "{\"total credit\": {\"course\": [\"crs_credit\"]}, \"department\": {\"course\": [\"dept_code\"]}}",
        "gold_query": "select sum(crs_credit), dept_code from course group by dept_code"
    },
    {
        "index": 698,
        "db_id": "customers_and_invoices",
        "ambig_type": "aggregate",
        "db_file": "aggregate/customers_and_invoices/customers_and_invoices.sqlite",
        "question": "Show the transaction types and the total amount of transactions.",
        "schema_without_content": "financial_transactions_transaction_amount : min_transaction_amount , transaction_type , sum_transaction_amount , avg_transaction_amount , max_transaction_amount  | order_items : product_id , order_item_id , product_quantity , order_id , other_order_item_details  | invoices : invoice_number , invoice_date , order_id  | customers : login_password , country , town_city , state_county_province , gender , customer_last_name , email_address , customer_first_name , customer_middle_initial , customer_id , phone_number 046-6255x98627\", \"06015518212\", \"1-904-787-7320\", login_name  | product_categories : production_type_code , product_type_description , vat_rating  | accounts : customer_id , account_id , account_name , other_account_details , date_account_opened  | financial_transactions : invoice_number , other_transaction_details , transaction_comment , transaction_amount , transaction_date , transaction_type , transaction_id , account_id  | orders : order_id , customer_id , date_order_placed , order_details  | products : parent_product_id , product_color , product_size , product_name , product_id , unit_price , production_type_code  | invoice_line_items : derived_vat_payable , invoice_number , product_id , product_title , product_price , derived_product_cost , product_quantity , derived_total_cost , order_item_id ",
        "schema_with_content": "financial_transactions_transaction_amount : min_transaction_amount (1462.62, 1462.62, 1903.41), transaction_type (\"Payment\", \"Refund\"), sum_transaction_amount (1781.24, 1425.41, 1979.66), avg_transaction_amount (1214.22, 1567.64, 1585.03), max_transaction_amount (1585.03, 1598.25, 1979.66) | order_items : product_id (14, 3, 14), order_item_id (8, 5, 1), product_quantity (\"7\", \"4\", \"7\"), order_id (4, 14, 2), other_order_item_details (None) | invoices : invoice_number (4, 13, 4), invoice_date (\"2018-02-28 19:01:06\", \"2018-03-03 20:44:06\", \"2018-03-01 16:40:48\"), order_id (8, 5, 10) | customers : login_password (\"eb32d2933362d38faff7\", \"a6c7a7064c36b038d402\", \"180a37476c537e78d3de\"), country (\"USA\"), town_city (\"Carleefort\", \"North Devonte\", \"North Devonte\"), state_county_province (\"Arkansas\", \"Florida\", \"SouthDakota\"), gender (\"1\", \"0\"), customer_last_name (\"Keeling\", \"Keeling\", \"Hauck\"), email_address (\"anastacio45@example.org\", \"jacobi.shanon@example.org\", \"udeckow@example.com\"), customer_first_name (\"Dangelo\", \"Zita\", \"Kieran\"), customer_middle_initial (\"B\", \"K\", \"G\"), customer_id (11, 14, 2), phone_number (\"(157)046-6255x98627\", \"06015518212\", \"1-904-787-7320\"), login_name (\"dubuque.gina\", \"lowe.wilber\", \"dubuque.gina\") | product_categories : production_type_code (\"DVDs\", \"DVDs\", \"Books\"), product_type_description (\"Food\", \"Food\", \"Books\"), vat_rating (15.84, 17.9, 11.4) | accounts : customer_id (13, 3, 3), account_id (11, 4, 8), account_name (\"398\", \"861\", \"710\"), other_account_details (\"Regular\", \"VIP\"), date_account_opened (\"2015-02-02 09:47:08\", \"2014-12-28 07:29:42\", \"2014-05-30 12:16:52\") | financial_transactions : invoice_number (6, 12, 1), other_transaction_details (None), transaction_comment (None), transaction_amount (1477.57, 1477.57, 1585.03), transaction_date (\"2018-03-24 12:05:11\", \"2018-03-07 04:32:54\", \"2018-03-12 22:51:05\"), transaction_type (\"Payment\", \"Refund\"), transaction_id (10, 6, 15), account_id (14, 13, 9) | orders : order_id (5, 11, 2), customer_id (8, 2, 10), date_order_placed (\"2015-05-17 03:05:32\", \"2017-05-24 19:26:44\", \"2015-08-06 22:40:40\"), order_details (None) | products : parent_product_id (2, 2, 4), product_color (\"Red\", \"Yellow\", \"Black\"), product_size (\"Medium\", \"Small\", \"Large\"), product_name (\"Fans\", \"Fans\", \"Arts\"), product_id (6, 7, 7), unit_price (49.62, 985.78, 985.78), production_type_code (\"DVDs\", \"Food\", \"DVDs\") | invoice_line_items : derived_vat_payable (None), invoice_number (10, 10, 5), product_id (14, 9, 11), product_title (\"prod_name\"), product_price (597.28, 559.95, 749.6), derived_product_cost (176.29, 256.84, 89.16), product_quantity (\"2\", \"8\", \"1\"), derived_total_cost (69.82, 53.53, 98.77), order_item_id (7, 14, 8)",
        "ambiguous_queries": [
            "select transaction_type, sum(transaction_amount) from financial_transactions group by transaction_type",
            "select transaction_type, sum_transaction_amount from financial_transactions_transaction_amount"
        ],
        "gold_ambiguity": {
            "match": "{\"total amount of transactions\": [{\"financial_transactions\": [\"transaction_amount\"]}, {\"financial_transactions_transaction_amount\": [\"sum_transaction_amount\"]}], \"transaction types\": [{\"financial_transactions\": [\"transaction_type\"]}, {\"financial_transactions_transaction_amount\": [\"transaction_type\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total amount of transactions\" refers to the schema \"financial_transactions\".\"transaction_amount\", \"transaction types\" refers to the schema \"financial_transactions\".\"transaction_type\"",
        "clear_ambiguity": "{\"total amount of transactions\": {\"financial_transactions\": [\"transaction_amount\"]}, \"transaction types\": {\"financial_transactions\": [\"transaction_type\"]}}",
        "gold_query": "select transaction_type, sum(transaction_amount) from financial_transactions group by transaction_type"
    },
    {
        "index": 699,
        "db_id": "apartment_rentals",
        "ambig_type": "aggregate",
        "db_file": "aggregate/apartment_rentals/apartment_rentals.sqlite",
        "question": "Find the average room count of the apartments that have the \"Studio\" type code.",
        "schema_without_content": "view_unit_status : apt_booking_id , apt_id , status_date , available_yn  | apartment_facilities : apt_id , facility_code  | apartment_buildings : building_description , building_short_name , building_phone 946-0491\", \"040-1064x387\", \"086-5221x3455\", building_address , building_id , building_manager , building_full_name  | guests : guest_id , date_of_birth , guest_first_name , guest_last_name , gender_code  | apartment_bookings : booking_start_date , guest_id , apt_booking_id , booking_end_date , apt_id , booking_status_code  | apartments_room_count : min_room_count , avg_room_count , max_room_count , sum_room_count  | apartments : bedroom_count , apt_type_code , room_count , bathroom_count , apt_number , building_id , apt_id ",
        "schema_with_content": "view_unit_status : apt_booking_id (623, 401, 279), apt_id (13, 13, 9), status_date (\"2011-11-06 22:08:42\", \"1990-11-04 17:57:50\", \"1978-12-28 11:53:34\"), available_yn (1, 0) | apartment_facilities : apt_id (2, 1, 15), facility_code (\"Cable TV\", \"Boardband\", \"Swimming Pool\") | apartment_buildings : building_description (\"Studio\", \"Flat\", \"Duplex\"), building_short_name (\"Barclay Tower\", \"Stuyvesant Town\", \"Windsor Court\"), building_phone (\"(609)946-0491\", \"(948)040-1064x387\", \"(909)086-5221x3455\"), building_address (\"012 Arnoldo Mountain\nGerholdland, ID 23342\", \"861 Narciso Glens Suite 392\nEast Ottis, ND 73970\", \"489 Josh Orchard Apt. 998\nSipesview, DE 69053\"), building_id (133, 133, 133), building_manager (\"Albert\", \"Kathlyn\", \"Juvenal\"), building_full_name (\"VIA 57 WEST\", \"The Clinton\", \"Windsor Court\") | guests : guest_id (13, 5, 15), date_of_birth (\"1980-06-20 18:15:39\", \"2013-02-22 11:26:22\", \"1997-01-20 17:11:31\"), guest_first_name (\"Gregoria\", \"Crystal\", \"Kip\"), guest_last_name (\"Toy\", \"Grady\", \"Schowalter\"), gender_code (\"Male\", \"Unknown\", \"Female\") | apartment_bookings : booking_start_date (\"2017-02-11 14:34:14\", \"2016-08-04 10:33:00\", \"2017-07-03 14:15:56\"), guest_id (7, 12, 7), apt_booking_id (365, 889, 279), booking_end_date (\"2017-10-07 20:47:19\", \"2017-10-06 11:15:58\", \"2017-09-30 18:41:04\"), apt_id (4, 12, 10), booking_status_code (\"Provisional\", \"Confirmed\") | apartments_room_count : min_room_count (\"8\", \"9\", \"9\"), avg_room_count (\"7\", \"3\", \"8\"), max_room_count (\"7\", \"6\", \"8\"), sum_room_count (\"5\", \"7\", \"9\") | apartments : bedroom_count (5, 3, 6), apt_type_code (\"Flat\", \"Studio\", \"Duplex\"), room_count (\"3\", \"6\", \"6\"), bathroom_count (1, 2, 3), apt_number (\"Apt. 859\", \"Suite 749\", \"Apt. 908\"), building_id (225, 153, 624), apt_id (9, 14, 4)",
        "ambiguous_queries": [
            "select avg(room_count) from apartments where apt_type_code = 'Studio'",
            "select avg_room_count from apartments_room_count where apt_type_code = 'Studio'"
        ],
        "gold_ambiguity": {
            "match": "{\"type code\": [{\"apartments\": [\"apt_type_code\"]}, {\"apartments_room_count\": [\"apt_type_code\"]}], \"average room count\": [{\"apartments\": [\"room_count\"]}, {\"apartments_room_count\": [\"avg_room_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type code\" refers to the schema \"apartments_room_count\".\"apt_type_code\", \"average room count\" refers to the schema \"apartments_room_count\".\"avg_room_count\"",
        "clear_ambiguity": "{\"type code\": {\"apartments_room_count\": [\"apt_type_code\"]}, \"average room count\": {\"apartments_room_count\": [\"avg_room_count\"]}}",
        "gold_query": "select avg_room_count from apartments_room_count where apt_type_code = 'Studio'"
    },
    {
        "index": 700,
        "db_id": "climbing",
        "ambig_type": "aggregate",
        "db_file": "aggregate/climbing/climbing.sqlite",
        "question": "What is the maximum point for climbers whose country is United Kingdom?",
        "schema_without_content": "climber_points : min_points , sum_points , max_points , avg_points  | climber : mountain_id , points , name , country , time , climber_id  | mountain : range , name \", \"Mawenzi \", \"Ngaliema / Mt Stanley \", prominence , country , mountain_id , height ",
        "schema_with_content": "climber_points : min_points (1.0, 2.0, 1.0), sum_points (6.0, 1.0, 10.0), max_points (15.0, 2.0, 5.0), avg_points (3.0, 2.0, 8.0) | climber : mountain_id (5, 7, 3), points (4.0, 2.0, 3.0), name (\"Klaus Enders\", \"Georg Auerbacher\", \"Georg Auerbacher\"), country (\"West Germany\", \"Switzerland\", \"United Kingdom\"), time (\"1:25.40.6\", \"1:17.16.0\", \"1:27.28.8\"), climber_id (7, 10, 4) | mountain : range (\"Kilimanjaro\", \"Mount Kenya\", \"Rwenzori\"), name (\"Mount Kenya (Batian)\", \"Mawenzi (Hans Meyer Pk)\", \"Ngaliema / Mt Stanley (Savoia Pk)\"), prominence (5885.0, 3951.0, 720.0), country (\"Kenya\", \"Uganda\", \"Kenya\"), mountain_id (2, 1, 5), height (5895.0, 5895.0, 5148.0)",
        "ambiguous_queries": [
            "select max(points) from climber where country = 'United Kingdom'",
            "select max_points from climber_points where country = 'United Kingdom'"
        ],
        "gold_ambiguity": {
            "match": "{\"country\": [{\"climber\": [\"country\"]}, {\"climber_points\": [\"country\"]}], \"maximum point\": [{\"climber\": [\"points\"]}, {\"climber_points\": [\"max_points\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"country\" refers to the schema \"climber\".\"country\", \"maximum point\" refers to the schema \"climber\".\"points\"",
        "clear_ambiguity": "{\"country\": {\"climber\": [\"country\"]}, \"maximum point\": {\"climber\": [\"points\"]}}",
        "gold_query": "select max(points) from climber where country = 'United Kingdom'"
    },
    {
        "index": 701,
        "db_id": "loan_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/loan_1/loan_1.sqlite",
        "question": "What is the average number of bank customers?",
        "schema_without_content": "customer : acc_bal , branch_id , cust_name , credit_score , acc_type , no_of_loans , state , cust_id  | bank : no_of_customers , state , city , bname , branch_id  | bank_no_of_customers : avg_no_of_customers , sum_no_of_customers , min_no_of_customers , max_no_of_customers  | loan : branch_id , loan_type , amount , loan_id , cust_id ",
        "schema_with_content": "customer : acc_bal (2000, 1000, 800000), branch_id (2, 1, 3), cust_name (\"Mary\", \"Jack\", \"Owen\"), credit_score (30, 20, 210), acc_type (\"saving\", \"checking\"), no_of_loans (2, 1, 0), state (\"Utah\", \"Texas\", \"New York\"), cust_id (\"1\", \"2\", \"3\") | bank : no_of_customers (123, 453, 203), state (\"New York\", \"Utah\", \"Texas\"), city (\"New York City\", \"Salt Lake City\", \"Austin\"), bname (\"broadway\", \"downtown\", \"morningside\"), branch_id (3, 4, 1) | bank_no_of_customers : avg_no_of_customers (123, 453, 203), sum_no_of_customers (203, 203, 123), min_no_of_customers (367, 453, 367), max_no_of_customers (203, 453, 123) | loan : branch_id (\"1\", \"2\", \"3\"), loan_type (\"Mortgages\", \"Auto\", \"Business\"), amount (2050, 3000, 5000), loan_id (\"1\", \"2\", \"3\"), cust_id (\"1\", \"3\")",
        "ambiguous_queries": [
            "select avg(no_of_customers) from bank",
            "select avg_no_of_customers from bank_no_of_customers"
        ],
        "gold_ambiguity": {
            "match": "{\"average number\": [{\"bank\": [\"no_of_customers\"]}, {\"bank_no_of_customers\": [\"avg_no_of_customers\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number\" refers to the schema \"bank_no_of_customers\".\"avg_no_of_customers\"",
        "clear_ambiguity": "{\"average number\": {\"bank_no_of_customers\": [\"avg_no_of_customers\"]}}",
        "gold_query": "select avg_no_of_customers from bank_no_of_customers"
    },
    {
        "index": 702,
        "db_id": "employee_hire_evaluation",
        "ambig_type": "aggregate",
        "db_file": "aggregate/employee_hire_evaluation/employee_hire_evaluation.sqlite",
        "question": "What is total bonus given in all evaluations?",
        "schema_without_content": "hiring : is_full_time , shop_id , employee_id , start_from  | evaluation : bonus , year_awarded , employee_id  | shop : location , manager_name , name , shop_id , number_products , district  | evaluation_bonus : sum_bonus , min_bonus , max_bonus , avg_bonus  | employee : name , city , employee_id , age ",
        "schema_with_content": "hiring : is_full_time (\"T\", \"F\"), shop_id (1, 8, 5), employee_id (4, 7, 6), start_from (\"2011\", \"2009\", \"2003\") | evaluation : bonus (3200.0, 4000.0, 3000.0), year_awarded (\"2018\", \"2015\", \"2015\"), employee_id (\"4\", \"4\", \"10\") | shop : location (\"Mariehamn\", \"Mariehamn\", \"Mariehamn\"), manager_name (\"Job Dragtsma\", \"Tommi Kautonen\", \"Mika Lehkosuo\"), name (\"FC Inter\", \"KuPS\", \"FC Honka\"), shop_id (1, 7, 5), number_products (1600, 4780, 5000), district (\"Jakobstads Centralplan\", \"WiklÃ¶f Holding Arena\", \"Lahden Stadion\") | evaluation_bonus : sum_bonus (2900.0, 2900.0, 3200.0), min_bonus (4000.0, 2900.0, 2900.0), max_bonus (3200.0, 2900.0, 2900.0), avg_bonus (2900.0, 3200.0, 3000.0) | employee : name (\"Jason Hobson\", \"George Chuter\", \"Phil Vickery\"), city (\"Bristol\", \"Bristol\", \"Wasps\"), employee_id (5, 6, 7), age (36, 30, 32)",
        "ambiguous_queries": [
            "select sum(bonus) from evaluation",
            "select sum_bonus from evaluation_bonus"
        ],
        "gold_ambiguity": {
            "match": "{\"total bonus\": [{\"evaluation\": [\"bonus\"]}, {\"evaluation_bonus\": [\"sum_bonus\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total bonus\" refers to the schema \"evaluation_bonus\".\"sum_bonus\"",
        "clear_ambiguity": "{\"total bonus\": {\"evaluation_bonus\": [\"sum_bonus\"]}}",
        "gold_query": "select sum_bonus from evaluation_bonus"
    },
    {
        "index": 703,
        "db_id": "inn_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/inn_1/inn_1.sqlite",
        "question": "How many king beds are there?",
        "schema_without_content": "rooms_beds : sum_beds , avg_beds , min_beds , max_beds  | reservations : rate , kids , checkout , code , adults , firstname , checkin , room , lastname  | rooms : beds , maxoccupancy , roomid , baseprice , decor , bedtype , roomname ",
        "schema_with_content": "rooms_beds : sum_beds (1, 2), avg_beds (1, 2), min_beds (1, 2), max_beds (1, 2) | reservations : rate (63.75, 218.75, 135.0), kids (3, 0, 1), checkout (\"05-MAY-10\", \"22-JUN-10\", \"12-MAR-10\"), code (67200, 87949, 20463), adults (1, 4, 2), firstname (\"BURTON\", \"DOT\", \"LEIGHANN\"), checkin (\"15-MAY-10\", \"15-JAN-10\", \"11-JUL-10\"), room (\"MWC\", \"FNA\", \"IBD\"), lastname (\"SCHWEITZ\", \"GLASGLOW\", \"MANARD\") | rooms : beds (1, 2), maxoccupancy (2, 4), roomid (\"RTE\", \"HBB\", \"TAA\"), baseprice (125, 175, 150), decor (\"modern\", \"traditional\", \"rustic\"), bedtype (\"King\", \"Queen\", \"Double\"), roomname (\"Interim but salutary\", \"Riddle to exculpate\", \"Mendicant with cryptic\")",
        "ambiguous_queries": [
            "select sum(beds) from rooms where bedtype = 'King'",
            "select sum_beds from rooms_beds where bedtype = 'King'"
        ],
        "gold_ambiguity": {
            "match": "{\"king beds\": [{\"rooms\": [\"bedtype\"]}, {\"rooms_beds\": [\"bedtype\"]}], \"How many\": [{\"rooms\": [\"beds\"]}, {\"rooms_beds\": [\"sum_beds\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"king beds\" refers to the schema \"rooms_beds\".\"bedtype\", \"How many\" refers to the schema \"rooms_beds\".\"sum_beds\"",
        "clear_ambiguity": "{\"king beds\": {\"rooms_beds\": [\"bedtype\"]}, \"How many\": {\"rooms_beds\": [\"sum_beds\"]}}",
        "gold_query": "select sum_beds from rooms_beds where bedtype = 'King'"
    },
    {
        "index": 704,
        "db_id": "soccer_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/soccer_2/soccer_2.sqlite",
        "question": "What is the name of state that has the smallest enrollment?",
        "schema_without_content": "college : cname , enr , state  | player : pname , hs , pid , ycard  | college_enr : max_enr , state , cname , avg_enr , sum_enr , min_enr  | tryout : ppos , cname , pid , decision ",
        "schema_with_content": "college : cname (\"OU\", \"LSU\", \"FSU\"), enr (18000, 18000, 18000), state (\"AZ\", \"FL\", \"FL\") | player : pname (\"Drago\", \"Andrew\", \"Eddie\"), hs (300, 300, 600), pid (30003, 40002, 40004), ycard (\"no\", \"yes\") | college_enr : max_enr (18000, 18000, 18000), state (\"LA\", \"AZ\", \"LA\"), cname (\"FSU\", \"FSU\", \"ASU\"), avg_enr (12000, 18000, 18000), sum_enr (19000, 22000, 19000), min_enr (12000, 19000, 18000) | tryout : ppos (\"goalie\", \"striker\", \"mid\"), cname (\"ASU\", \"ASU\", \"FSU\"), pid (20002, 50005, 30003), decision (\"no\", \"yes\")",
        "ambiguous_queries": [
            "select state, min(enr) from college group by state",
            "select state, min_enr from college_enr"
        ],
        "gold_ambiguity": {
            "match": "{\"state\": [{\"college\": [\"state\"]}, {\"college_enr\": [\"state\"]}], \"smallest enrollment\": [{\"college\": [\"enr\"]}, {\"college_enr\": [\"min_enr\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"state\" refers to the schema \"college_enr\".\"state\", \"smallest enrollment\" refers to the schema \"college_enr\".\"min_enr\"",
        "clear_ambiguity": "{\"state\": {\"college_enr\": [\"state\"]}, \"smallest enrollment\": {\"college_enr\": [\"min_enr\"]}}",
        "gold_query": "select state, min_enr from college_enr"
    },
    {
        "index": 705,
        "db_id": "pets_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/pets_1/pets_1.sqlite",
        "question": "What is the average weight for each type of pet?",
        "schema_without_content": "pets : petid , weight , pettype , pet_age  | pets_weight : sum_weight , max_weight , avg_weight , min_weight , pettype  | has_pet : petid , stuid  | student : stuid , sex , age , advisor , fname , lname , city_code , major ",
        "schema_with_content": "pets : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1) | pets_weight : sum_weight (12.0, 13.4, 9.3), max_weight (12.0, 13.4, 9.3), avg_weight (12.0, 13.4, 9.3), min_weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | student : stuid (1033, 1011, 1001), sex (\"F\", \"M\"), age (18, 17, 26), advisor (8721, 9172, 8721), fname (\"Stacy\", \"Jandy\", \"Eric\"), lname (\"Tai\", \"Wilson\", \"Tai\"), city_code (\"DET\", \"WAS\", \"YYZ\"), major (540, 50, 520)",
        "ambiguous_queries": [
            "select avg(weight), pettype from pets group by pettype",
            "select avg_weight, pettype from pets_weight"
        ],
        "gold_ambiguity": {
            "match": "{\"type\": [{\"pets\": [\"pettype\"]}, {\"pets_weight\": [\"pettype\"]}], \"average weight\": [{\"pets\": [\"weight\"]}, {\"pets_weight\": [\"avg_weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type\" refers to the schema \"pets\".\"pettype\", \"average weight\" refers to the schema \"pets\".\"weight\"",
        "clear_ambiguity": "{\"type\": {\"pets\": [\"pettype\"]}, \"average weight\": {\"pets\": [\"weight\"]}}",
        "gold_query": "select avg(weight), pettype from pets group by pettype"
    },
    {
        "index": 706,
        "db_id": "body_builder",
        "ambig_type": "aggregate",
        "db_file": "aggregate/body_builder/body_builder.sqlite",
        "question": "What is the average total score of body builders with height bigger than 200?",
        "schema_without_content": "people : birth_date , people_id , height , name , weight , birth_place  | body_builder_people_total : max_total , height , min_total , avg_total , sum_total  | body_builder : clean_jerk , body_builder_id , total , people_id , snatch ",
        "schema_with_content": "people : birth_date (\"March 30, 1976\", \"February 13, 1985\", \"July 4, 1990\"), people_id (5, 4, 5), height (182.0, 195.0, 195.0), name (\"Jack Campbell\", \"Ty Conklin\", \"Ty Conklin\"), weight (102.0, 80.0, 89.0), birth_place (\"Nashua, New Hampshire\", \"Anchorage, Alaska\", \"Minnetonka, Minnesota\") | body_builder_people_total : max_total (292.5, 317.5, 292.5), height (215.0, 215.0, 192.0), min_total (315.0, 312.5, 317.5), avg_total (315.0, 317.5, 315.0), sum_total (315.0, 312.5, 312.5) | body_builder : clean_jerk (175.0, 177.5, 162.5), body_builder_id (3, 4, 4), total (317.5, 317.5, 317.5), people_id (1, 2, 3), snatch (137.5, 142.5, 142.5)",
        "ambiguous_queries": [
            "select avg(t1.total) from body_builder as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
            "select avg_total from body_builder_people_total where height > 200"
        ],
        "gold_ambiguity": {
            "match": "{\"average total score\": [{\"body_builder\": [\"total\"]}, {\"body_builder_people_total\": [\"avg_total\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average total score\" refers to the schema \"body_builder_people_total\".\"avg_total\"",
        "clear_ambiguity": "{\"average total score\": {\"body_builder_people_total\": [\"avg_total\"]}}",
        "gold_query": "select avg_total from body_builder_people_total where height > 200"
    },
    {
        "index": 707,
        "db_id": "college_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_1/college_1.sqlite",
        "question": "Find the max, average, and minimum gpa of all students in each department.",
        "schema_without_content": "professor : prof_office , emp_num , dept_code , prof_high_degree , prof_extension  | class : prof_num , class_code , class_room , crs_code , class_time , class_section  | student : stu_fname , stu_phone , prof_num , stu_class , dept_code , stu_num , stu_hrs , stu_dob , stu_gpa , stu_transfer , stu_lname , stu_init  | enroll : class_code , stu_num , enroll_grade  | student_stu_gpa : min_stu_gpa , avg_stu_gpa , max_stu_gpa , sum_stu_gpa , dept_code  | course : crs_credit , crs_description , dept_code , crs_code  | department : emp_num , dept_code , dept_address , school_code , dept_extension , dept_name  | employee : emp_dob , emp_hiredate , emp_initial , emp_jobcode , emp_lname , emp_fname , emp_num ",
        "schema_with_content": "professor : prof_office (\"KLR 211\", \"AAK 230\", \"DRE 102\"), emp_num (228, 103, 335), dept_code (\"ECON/FIN\", \"ENG\", \"ECON/FIN\"), prof_high_degree (\"Ph.D.\", \"Ph.D.\", \"DBA\"), prof_extension (\"4436\", \"5514\", \"3550\") | class : prof_num (228, 162, 342), class_code (\"10019\", \"10013\", \"10015\"), class_room (\"KLR200\", \"BUS252\", \"BUS311\"), crs_code (\"ACCT-212\", \"ACCT-211\", \"ACCT-212\"), class_time (\"TTh 2:30-3:45 p.m.\", \"TTh 1:00-2:15 p.m.\", \"MWF 8:00-8:50 a.m.\"), class_section (\"1\", \"2\", \"3\") | student : stu_fname (\"William\", \"John\", \"Raphael\"), stu_phone (\"2267\", \"2114\", \"2114\"), prof_num (228, 222, 199), stu_class (\"So\", \"Sr\", \"Sr\"), dept_code (\"ENGL\", \"BIOL\", \"EDU\"), stu_num (324274, 324299, 324257), stu_hrs (120, 15, 66), stu_dob (\"1969-8-23\", \"1986-11-30\", \"1979-10-21\"), stu_gpa (2.11, 2.84, 2.92), stu_transfer (0, 1), stu_lname (\"Brewer\", \"Robertson\", \"Oblonski\"), stu_init (\"C\", \"B\", \"K\") | enroll : class_code (\"10014\", \"10018\", \"10021\"), stu_num (321452, 324257), enroll_grade (\"C\", \"B\", \"A\") | student_stu_gpa : min_stu_gpa (3.27, 3.87, 3.09), avg_stu_gpa (3.15, 2.84, 2.84), max_stu_gpa (2.92, 2.26, 3.87), sum_stu_gpa (2.26, 3.27, 3.15), dept_code (\"BIOL\", \"ACCT\", \"BIOL\") | course : crs_credit (3.0, 4.0), crs_description (\"Intro. to Microcomputing\", \"Intro. to Statistics\", \"Intro. to Microcomputing\"), dept_code (\"ACCT\", \"CIS\"), crs_code (\"QM-261\", \"QM-362\", \"CIS-220\") | department : emp_num (342, 106, 114), dept_code (\"PSYCH\", \"PSYCH\", \"ECON/FIN\"), dept_address (\"KLR 126, Box 55\", \"KLR 284, Box 63\", \"KLR 126, Box 55\"), school_code (\"BUS\", \"A&SCI\"), dept_extension (\"1867\", \"2008\", \"1867\"), dept_name (\"English\", \"Sociology\", \"Computer Info. Systems\") | employee : emp_dob (\"1960-4-25\", \"1967-12-30\", \"1941-3-4\"), emp_hiredate (\"1987-7-1\", \"1992-5-1\", \"1987-7-1\"), emp_initial (\"O\", \"K\", \"W\"), emp_jobcode (\"TECH\", \"PROF\", \"CUST\"), emp_lname (\"Edwards\", \"Worley\", \"Washington\"), emp_fname (\"Van\", \"Annelise\", \"Jill\"), emp_num (425, 102, 342)",
        "ambiguous_queries": [
            "select max(stu_gpa), avg(stu_gpa), min(stu_gpa), dept_code from student group by dept_code",
            "select max_stu_gpa, avg_stu_gpa, min_stu_gpa, dept_code from student_stu_gpa"
        ],
        "gold_ambiguity": {
            "match": "{\"department\": [{\"student\": [\"dept_code\"]}, {\"student_stu_gpa\": [\"dept_code\"]}], \"max\": [{\"student\": [\"stu_gpa\"]}, {\"student_stu_gpa\": [\"max_stu_gpa\"]}], \"average\": [{\"student\": [\"stu_gpa\"]}, {\"student_stu_gpa\": [\"avg_stu_gpa\"]}], \"minimum\": [{\"student\": [\"stu_gpa\"]}, {\"student_stu_gpa\": [\"min_stu_gpa\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"department\" refers to the schema \"student\".\"dept_code\", \"max\" refers to the schema \"student\".\"stu_gpa\", \"average\" refers to the schema \"student\".\"stu_gpa\", \"minimum\" refers to the schema \"student\".\"stu_gpa\"",
        "clear_ambiguity": "{\"department\": {\"student\": [\"dept_code\"]}, \"max\": {\"student\": [\"stu_gpa\"]}, \"average\": {\"student\": [\"stu_gpa\"]}, \"minimum\": {\"student\": [\"stu_gpa\"]}}",
        "gold_query": "select max(stu_gpa), avg(stu_gpa), min(stu_gpa), dept_code from student group by dept_code"
    },
    {
        "index": 708,
        "db_id": "document_management",
        "ambig_type": "aggregate",
        "db_file": "aggregate/document_management/document_management.sqlite",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "schema_without_content": "images : image_id , image_name , image_alt_text , image_url  | documents_document_functional_areas_functional_areas_access_count : min_access_count , max_access_count , sum_access_count , avg_access_count , functional_area_description  | document_sections_images : image_id , section_id  | documents : document_code , document_structure_code , document_name , document_type_code , access_count  | roles : role_description , role_code  | document_structures : document_structure_code , parent_document_structure_code , document_structure_description  | users : password , user_name , user_login , role_code , user_id  | document_functional_areas : document_code , functional_area_code  | document_sections : section_id , section_title , document_code , section_sequence , section_code  | functional_areas : parent_functional_area_code , functional_area_code , functional_area_description ",
        "schema_with_content": "images : image_id (3, 2, 7), image_name (\"chapter4\", \"chapter3\", \"top4\"), image_alt_text (\"Jeanette\", \"Jeanette\", \"Jeanette\"), image_url (\"http://www.hermann.com/1.jpg\", \"http://www.hellerreinger.com/1.jpg\", \"http://connellykertzmann.org/1.jpg\") | documents_document_functional_areas_functional_areas_access_count : min_access_count (9948, 2910, 1864), max_access_count (3479, 2910, 7509), sum_access_count (3769, 7509, 8208), avg_access_count (8623, 3479, 6345), functional_area_description (\"Signature\", \"Acknowledgement\", \"Keep blank\") | document_sections_images : image_id (13, 4, 5), section_id (21, 19, 27) | documents : document_code (\"706\", \"675\", \"714\"), document_structure_code (\"6\", \"1\", \"9\"), document_name (\"Learning Database\", \"Life about Claude Monet\", \"David CV\"), document_type_code (\"Book\", \"Book\", \"Paper\"), access_count (3769, 8623, 8208) | roles : role_description (\"Database Administrator\", \"Project Manager\"), role_code (\"DBA\", \"PROJ-MGR\") | document_structures : document_structure_code (\"6\", \"1\", \"9\"), parent_document_structure_code (\"1\", \"6\", \"8\"), document_structure_description (\"Bib\", \"Image section\", \"Bib\") | users : password (\"1fb26eea854962d41512827bf90a5b7ce4b359d8\", \"3d478d7056d6417966f6b1676f6ec81b3094f44f\", \"da383455a05a824606c54e99f671c4d6a2ddae26\"), user_name (\"dickens.elta\", \"amelie53\", \"glenna.simonis\"), user_login (\"0\", \"1\"), role_code (\"PROJ-MGR\", \"DBA\"), user_id (12, 3, 9) | document_functional_areas : document_code (\"217\", \"675\", \"349\"), functional_area_code (\"9\", \"1\", \"8\") | document_sections : section_id (21, 93, 38), section_title (\"after\", \"before\"), document_code (\"465\", \"621\", \"675\"), section_sequence (4794, 4433, 6521), section_code (\"16\", \"90\", \"60\") | functional_areas : parent_functional_area_code (\"8\"), functional_area_code (\"1\", \"8\", \"9\"), functional_area_description (\"Signature\", \"Acknowledgement\", \"Keep blank\")",
        "ambiguous_queries": [
            "select avg(t1.access_count) from documents as t1 join document_functional_areas as t2 on t1.document_code = t2.document_code join functional_areas as t3 on t2.functional_area_code = t3.functional_area_code where t3.functional_area_description = 'Acknowledgement'",
            "select avg_access_count from documents_document_functional_areas_functional_areas_access_count where functional_area_description = 'Acknowledgement'"
        ],
        "gold_ambiguity": {
            "match": "{\"average access counts\": [{\"documents\": [\"access_count\"]}, {\"documents_document_functional_areas_functional_areas_access_count\": [\"avg_access_count\"]}], \"functional area\": [{\"documents_document_functional_areas_functional_areas_access_count\": [\"functional_area_description\"]}, {\"functional_areas\": [\"functional_area_description\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average access counts\" refers to the schema \"documents\".\"access_count\", \"functional area\" refers to the schema \"functional_areas\".\"functional_area_description\"",
        "clear_ambiguity": "{\"average access counts\": {\"documents\": [\"access_count\"]}, \"functional area\": {\"functional_areas\": [\"functional_area_description\"]}}",
        "gold_query": "select avg(t1.access_count) from documents as t1 join document_functional_areas as t2 on t1.document_code = t2.document_code join functional_areas as t3 on t2.functional_area_code = t3.functional_area_code where t3.functional_area_description = 'Acknowledgement'"
    },
    {
        "index": 709,
        "db_id": "network_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/network_2/network_2.sqlite",
        "question": "How old is the average person for each job?",
        "schema_without_content": "person_age : max_age , min_age , job , sum_age , avg_age  | personfriend : year , friend , name  | person : job , gender , name , city , age ",
        "schema_with_content": "person_age : max_age (35, 26, 25), min_age (25, 35, 25), job (\"student\", \"engineer\", \"doctor\"), sum_age (35, 26, 25), avg_age (25, 35, 26) | personfriend : year (12, 10, 12), friend (\"Zach\", \"Zach\", \"Bob\"), name (\"Alice\", \"Zach\", \"Bob\") | person : job (\"student\", \"engineer\", \"doctor\"), gender (\"female\", \"male\"), name (\"Alice\", \"Dan\", \"Bob\"), city (\"new york city\", \"salt lake city\", \"new york city\"), age (26, 45, 26)",
        "ambiguous_queries": [
            "select avg(age), job from person group by job",
            "select avg_age, job from person_age"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"person\": [\"age\"]}, {\"person_age\": [\"avg_age\"]}], \"job\": [{\"person\": [\"job\"]}, {\"person_age\": [\"job\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"person\".\"age\", \"job\" refers to the schema \"person\".\"job\"",
        "clear_ambiguity": "{\"average\": {\"person\": [\"age\"]}, \"job\": {\"person\": [\"job\"]}}",
        "gold_query": "select avg(age), job from person group by job"
    },
    {
        "index": 710,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What is the average rating of songs for each language?",
        "schema_without_content": "artist : artist_name , gender , country , preferred_genre  | genre : g_name , most_popular_in , rating  | song_rating : avg_rating , sum_rating , languages , min_rating , max_rating  | song : languages , rating , resolution , song_name , f_id , artist_name , country , releasedate , genre_is  | files : artist_name , f_id , duration , formats , file_size ",
        "schema_with_content": "artist : artist_name (\"Michel\", \"Topu\", \"Enrique\"), gender (\"Male\", \"Female\"), country (\"USA\", \"India\", \"Bangladesh\"), preferred_genre (\"tagore\", \"blues\", \"nazrul\") | genre : g_name (\"modern\", \"tagore\", \"pop\"), most_popular_in (\"America\", \"America\", \"America\"), rating (\"8\", \"7\", \"9\") | song_rating : avg_rating (10, 7, 5), sum_rating (8, 8, 6), languages (\"bangla\", \"english\"), min_rating (7, 8, 8), max_rating (8, 8, 5) | song : languages (\"bangla\", \"english\"), rating (5, 10, 6), resolution (320, 512, 1080), song_name (\"Aj ei akash\", \"Shukno patar nupur pae\", \"Shukno patar nupur pae\"), f_id (2, 3, 6), artist_name (\"Farida\", \"Topu\", \"Shrikanta\"), country (\"India\", \"India\", \"UK\"), releasedate (\"7-APR-2001\", \"17-MAR-2002\", \"21-SEP-1997\"), genre_is (\"pop\", \"nazrul\", \"pop\") | files : artist_name (\"Shrikanta\", \"Shrikanta\", \"Prity\"), f_id (3, 6, 2), duration (\"3:45\", \"4:30\", \"4:30\"), formats (\"mp4\", \"mp3\"), file_size (\"4.58 MB\", \"5.10 MB\", \"3.78 MB\")",
        "ambiguous_queries": [
            "select avg(rating), languages from song group by languages",
            "select avg_rating, languages from song_rating"
        ],
        "gold_ambiguity": {
            "match": "{\"language\": [{\"song\": [\"languages\"]}, {\"song_rating\": [\"languages\"]}], \"average rating\": [{\"song\": [\"rating\"]}, {\"song_rating\": [\"avg_rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"language\" refers to the schema \"song\".\"languages\", \"average rating\" refers to the schema \"song\".\"rating\"",
        "clear_ambiguity": "{\"language\": {\"song\": [\"languages\"]}, \"average rating\": {\"song\": [\"rating\"]}}",
        "gold_query": "select avg(rating), languages from song group by languages"
    },
    {
        "index": 711,
        "db_id": "college_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_2/college_2.sqlite",
        "question": "Find the maximum and average capacity among rooms in each building.",
        "schema_without_content": "student : id , name , dept_name , tot_cred  | advisor : i_id , s_id  | classroom : capacity , room_number , building  | section : time_slot_id , room_number , sec_id , semester , course_id , building , year  | prereq : course_id , prereq_id  | classroom_capacity : sum_capacity , avg_capacity , building , max_capacity , min_capacity  | time_slot : day , start_hr , time_slot_id , start_min , end_hr , end_min  | instructor : salary , id , name , dept_name  | teaches : course_id , id , year , semester , sec_id  | course : dept_name , course_id , title , credits  | takes : year , sec_id , course_id , id , grade , semester  | department : budget , dept_name , building ",
        "schema_with_content": "student : id (\"32881\", \"43495\", \"77588\"), name (\"Voss\", \"Holland\", \"Mingoz\"), dept_name (\"Mech. Eng.\", \"Languages\", \"English\"), tot_cred (26, 117, 28) | advisor : i_id (\"37687\", \"16807\", \"81991\"), s_id (\"5144\", \"76953\", \"30341\") | classroom : capacity (115, 11, 22), room_number (\"261\", \"707\", \"105\"), building (\"Rathbone\", \"Drown\", \"Bronfman\") | section : time_slot_id (\"G\", \"M\", \"L\"), room_number (\"183\", \"812\", \"119\"), sec_id (\"1\", \"2\", \"3\"), semester (\"Fall\", \"Spring\"), course_id (\"239\", \"421\", \"581\"), building (\"Saucon\", \"Rathbone\", \"Alumni\"), year (2002, 2001, 2002) | prereq : course_id (\"242\", \"239\", \"224\"), prereq_id (\"875\", \"267\", \"401\") | classroom_capacity : sum_capacity (60, 71, 51), avg_capacity (120, 10, 59), building (\"Alumni\", \"Whitman\", \"Whitman\"), max_capacity (18, 97, 92), min_capacity (15, 15, 10) | time_slot : day (\"M\", \"T\", \"T\"), start_hr (13, 9, 16), time_slot_id (\"H\", \"F\", \"H\"), start_min (0, 30), end_hr (16, 9, 9), end_min (50, 45, 30) | instructor : salary (45310.53, 119921.41, 46397.59), id (\"63287\", \"65931\", \"35579\"), name (\"Levine\", \"Konstantinides\", \"Voronina\"), dept_name (\"Languages\", \"Cybernetics\", \"Biology\") | teaches : course_id (\"949\", \"349\", \"445\"), id (\"43779\", \"36897\", \"14365\"), year (2002, 2004, 2009), semester (\"Spring\", \"Fall\"), sec_id (\"1\", \"2\", \"3\") | course : dept_name (\"Comp. Sci.\", \"History\", \"Physics\"), course_id (\"334\", \"493\", \"394\"), title (\"The Renaissance\", \"Music of the 50s\", \"Drama\"), credits (4, 3) | takes : year (2004, 2003, 2001), sec_id (\"1\", \"2\", \"3\"), course_id (\"561\", \"603\", \"192\"), id (\"41988\", \"67340\", \"21337\"), grade (\"A \", \"B-\", \"C \"), semester (\"Fall\", \"Spring\") | department : budget (734550.7, 441840.92, 777605.11), dept_name (\"Accounting\", \"Accounting\", \"Civil Eng.\"), building (\"Saucon\", \"Whitman\", \"Brodhead\")",
        "ambiguous_queries": [
            "select max(capacity), avg(capacity), building from classroom group by building",
            "select max_capacity, avg_capacity, building from classroom_capacity"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"classroom\": [\"capacity\"]}, {\"classroom_capacity\": [\"avg_capacity\"]}], \"building\": [{\"classroom\": [\"building\"]}, {\"classroom_capacity\": [\"building\"]}], \"maximum\": [{\"classroom\": [\"capacity\"]}, {\"classroom_capacity\": [\"max_capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"classroom\".\"capacity\", \"building\" refers to the schema \"classroom\".\"building\", \"maximum\" refers to the schema \"classroom\".\"capacity\"",
        "clear_ambiguity": "{\"average\": {\"classroom\": [\"capacity\"]}, \"building\": {\"classroom\": [\"building\"]}, \"maximum\": {\"classroom\": [\"capacity\"]}}",
        "gold_query": "select max(capacity), avg(capacity), building from classroom group by building"
    },
    {
        "index": 712,
        "db_id": "flight_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/flight_1/flight_1.sqlite",
        "question": "What is average and maximum salary of all employees.",
        "schema_without_content": "flight : price , distance , flno , arrival_date , origin , destination , aid , departure_date  | employee : eid , salary , name  | employee_salary : max_salary , sum_salary , min_salary , avg_salary  | certificate : aid , eid  | aircraft : name , aid , distance ",
        "schema_with_content": "flight : price (202.45, 235.98, 182), distance (802, 1749, 2606), flno (34, 7, 387), arrival_date (\"04/12/2005 03:18\", \"04/12/2005 09:40\", \"04/12/2005 11:10\"), origin (\"Los Angeles\", \"Chicago\"), destination (\"Washington D.C.\", \"Tokyo\", \"Sydney\"), aid (5, 6, 2), departure_date (\"04/12/2005 12:45\", \"04/12/2005 08:45\", \"04/12/2005 08:45\") | employee : eid (550156548, 287321212, 348121549), salary (105743, 178345, 114323), name (\"Patricia Jones\", \"Robert Brown\", \"Haywood Kelly\") | employee_salary : max_salary (33546, 54921, 48250), sum_salary (20, 256481, 212156), min_salary (114323, 33546, 44740), avg_salary (289950, 32021, 101745) | certificate : aid (15, 9, 10), eid (390487451, 269734834, 390487451) | aircraft : name (\"SAAB 340\", \"Airbus A320\", \"Boeing 737-800\"), aid (13, 13, 11), distance (1530, 1530, 1530)",
        "ambiguous_queries": [
            "select avg(salary), max(salary) from employee",
            "select avg_salary, max_salary from employee_salary"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"employee\": [\"salary\"]}, {\"employee_salary\": [\"max_salary\"]}], \"average\": [{\"employee\": [\"salary\"]}, {\"employee_salary\": [\"avg_salary\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"employee\".\"salary\", \"average\" refers to the schema \"employee\".\"salary\"",
        "clear_ambiguity": "{\"maximum\": {\"employee\": [\"salary\"]}, \"average\": {\"employee\": [\"salary\"]}}",
        "gold_query": "select avg(salary), max(salary) from employee"
    },
    {
        "index": 713,
        "db_id": "bike_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/bike_1/bike_1.sqlite",
        "question": "What is the average latitude and longitude of all starting stations for the trips?",
        "schema_without_content": "station_trip_lat_long : sum_lat , max_lat , max_long , avg_long , avg_lat , sum_long , min_lat , min_long  | status : station_id , bikes_available , docks_available , time  | trip : subscription_type , end_date , start_date , end_station_name , end_station_id , start_station_name \", \"Redwood City Public Library\", bike_id , id , duration , zip_code , start_station_id  | weather : max_visibility_miles , max_sea_level_pressure_inches , mean_visibility_miles , mean_wind_speed_mph , mean_dew_point_f , mean_sea_level_pressure_inches , max_humidity , mean_humidity , max_gust_speed_mph , max_temperature_f , mean_temperature_f , events , date , zip_code , min_dew_point_f , wind_dir_degrees , min_temperature_f , min_sea_level_pressure_inches , min_visibility_miles , max_dew_point_f , precipitation_inches , max_wind_speed_mph , cloud_cover , min_humidity  | station : name , long , lat , installation_date , city , dock_count , id ",
        "schema_with_content": "station_trip_lat_long : sum_lat (37.781752000000004, 37.443988, 37.789756), max_lat (37.385956, 37.389218, 37.780526), max_long (-121.90178200000001, -122.39623600000002, -122.066553), avg_long (-122.398436, -122.10833799999999, -122.39546999999999), avg_lat (37.77865, 37.385956, 37.444521), sum_long (-122.226904, -122.411748, -122.40512700000001), min_lat (37.481758, 37.787152, 37.780526), min_long (-122.164759, -122.39526000000001, -122.39546999999999) | status : station_id (71, 51, 61), bikes_available (8, 12, 2), docks_available (20, 2, 21), time (\"2015-06-02 14:09:02\", \"2015-06-02 13:35:02\", \"2015-06-02 14:28:02\") | trip : subscription_type (\"Subscriber\", \"Customer\"), end_date (\"8/29/2015 12:00\", \"8/26/2015 8:43\", \"8/29/2015 19:48\"), start_date (\"8/27/2015 16:40\", \"8/27/2015 20:49\", \"8/28/2015 8:31\"), end_station_name (\"SJSU 4th at San Carlos\", \"Santa Clara County Civic Center\", \"Commercial at Montgomery\"), end_station_id (31, 67, 37), start_station_name (\"2nd at Folsom\", \"Mechanics Plaza (Market at Battery)\", \"Redwood City Public Library\"), bike_id (492, 511, 364), id (910697, 909086, 905451), duration (2524, 1774, 14880), zip_code (95973, 94595, 94042), start_station_id (75, 14, 51) | weather : max_visibility_miles (5, 19, 16), max_sea_level_pressure_inches (30.32, 30.45, 30.47), mean_visibility_miles (15, 6, \"\"), mean_wind_speed_mph (19, 8, 22), mean_dew_point_f (60, 40, 28), mean_sea_level_pressure_inches (30.08, 29.43, 30.09), max_humidity (66, 56, 90), mean_humidity (88, 66, 57), max_gust_speed_mph (\"\", 29, 21), max_temperature_f (64, 72, 81), mean_temperature_f (66, 72, 81), events (\"Fog-Rain\", \"rain\", \"Rain-Thunderstorm\"), date (\"5/15/2015\", \"8/5/2014\", \"8/23/2014\"), zip_code (94107, 95113, 95113), min_dew_point_f (35, 23, 14), wind_dir_degrees (291, 109, 226), min_temperature_f (63, 68, \"\"), min_sea_level_pressure_inches (30.16, 30.3, 30.2), min_visibility_miles (6, 2, 15), max_dew_point_f (66, 40, 56), precipitation_inches (1.85, 0.6, 0.28), max_wind_speed_mph (30, 38, 36), cloud_cover (3, \"\", 2), min_humidity (47, 60, 60) | station : name (\"Howard at 2nd\", \"Redwood City Medical Center\", \"Rengstorff Avenue / California Street\"), long (-121.88694299999999, -122.392738, -122.099076), lat (37.781332, 37.781039, 37.789756), installation_date (\"1/22/2014\", \"8/7/2013\", \"8/6/2013\"), city (\"San Francisco\", \"San Francisco\", \"Redwood City\"), dock_count (11, 11, 27), id (3, 42, 2)",
        "ambiguous_queries": [
            "select avg(t1.lat), avg(t1.long) from station as t1 join trip as t2 on t1.id = t2.start_station_id",
            "select avg_lat, avg_long from station_trip_lat_long"
        ],
        "gold_ambiguity": {
            "match": "{\"latitude\": [{\"station\": [\"lat\"]}, {\"station_trip_lat_long\": [\"avg_lat\"]}], \"longitude\": [{\"station\": [\"long\"]}, {\"station_trip_lat_long\": [\"avg_long\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"latitude\" refers to the schema \"station\".\"lat\", \"longitude\" refers to the schema \"station\".\"long\"",
        "clear_ambiguity": "{\"latitude\": {\"station\": [\"lat\"]}, \"longitude\": {\"station\": [\"long\"]}}",
        "gold_query": "select avg(t1.lat), avg(t1.long) from station as t1 join trip as t2 on t1.id = t2.start_station_id"
    },
    {
        "index": 714,
        "db_id": "insurance_policies",
        "ambig_type": "aggregate",
        "db_file": "aggregate/insurance_policies/insurance_policies.sqlite",
        "question": "Compute the total amount of settlement across all the settlements.",
        "schema_without_content": "claims : date_claim_settled , date_claim_made , amount_claimed , policy_id , amount_settled , claim_id  | settlements : date_claim_settled , amount_settled , amount_claimed , date_claim_made , settlement_id , customer_policy_id , claim_id  | customer_policies : policy_id , policy_type_code , end_date , start_date , customer_id  | customers : customer_details , customer_id  | settlements_amount_settled : avg_amount_settled , max_amount_settled , sum_amount_settled , min_amount_settled  | payments : payment_id , settlement_id , payment_method_code , amount_payment , date_payment_made ",
        "schema_with_content": "claims : date_claim_settled (\"2017-11-03\", \"2017-11-22\", \"2017-11-19\"), date_claim_made (\"2017-10-21\", \"2016-08-02\", \"2018-07-15\"), amount_claimed (10209, 41078, 83703), policy_id (552, 744, 744), amount_settled (1091, 1638, 1091), claim_id (957, 761, 621) | settlements : date_claim_settled (\"2018-01-27\", \"2018-03-02\", \"2018-02-15\"), amount_settled (1737, 1293, 1805), amount_claimed (25078, 3864, 82506), date_claim_made (\"2016-09-05\", \"2016-07-19\", \"2017-08-27\"), settlement_id (512, 564, 983), customer_policy_id (839, 564, 536), claim_id (571, 761, 761) | customer_policies : policy_id (218, 738, 396), policy_type_code (\"Life\", \"Property\", \"Car\"), end_date (\"2017-10-09\", \"2017-12-15\", \"2018-01-05\"), start_date (\"2017-08-21\", \"2016-12-25\", \"2017-08-21\"), customer_id (7, 1, 8) | customers : customer_details (\"Mr. Randal Lynch III\", \"Lauriane Ferry PhD\", \"Selena Gerhold\"), customer_id (6, 9, 15) | settlements_amount_settled : avg_amount_settled (930, 930, 1676), max_amount_settled (1181, 1427, 1885), sum_amount_settled (1042, 1767, 1737), min_amount_settled (1042, 930, 1805) | payments : payment_id (886, 384, 774), settlement_id (648, 527, 983), payment_method_code (\"American Express\", \"American Express\", \"American Express\"), amount_payment (235893, 7343, 407235), date_payment_made (\"2017-05-04\", \"2017-05-28\", \"2017-08-06\")",
        "ambiguous_queries": [
            "select sum(amount_settled) from settlements",
            "select sum_amount_settled from settlements_amount_settled"
        ],
        "gold_ambiguity": {
            "match": "{\"total amount of settlement\": [{\"settlements\": [\"amount_settled\"]}, {\"settlements_amount_settled\": [\"sum_amount_settled\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total amount of settlement\" refers to the schema \"settlements_amount_settled\".\"sum_amount_settled\"",
        "clear_ambiguity": "{\"total amount of settlement\": {\"settlements_amount_settled\": [\"sum_amount_settled\"]}}",
        "gold_query": "select sum_amount_settled from settlements_amount_settled"
    },
    {
        "index": 715,
        "db_id": "soccer_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/soccer_2/soccer_2.sqlite",
        "question": "What is the average, maximum, and minimum for the number of hours spent training?",
        "schema_without_content": "tryout : decision , cname , pid , ppos  | player_hs : max_hs , min_hs , avg_hs , sum_hs  | player : pname , pid , ycard , hs  | college : cname , state , enr ",
        "schema_with_content": "tryout : decision (\"no\", \"yes\"), cname (\"ASU\", \"ASU\", \"ASU\"), pid (10001, 50005, 40004), ppos (\"goalie\", \"striker\", \"mid\") | player_hs : max_hs (1200, 1200, 600), min_hs (1200, 1600, 600), avg_hs (1200, 1600, 1600), sum_hs (1200, 300, 1200) | player : pname (\"Blake\", \"Charles\", \"Blake\"), pid (40002, 40004, 40002), ycard (\"no\", \"yes\"), hs (300, 600, 1200) | college : cname (\"LSU\", \"LSU\", \"OU\"), state (\"OK\", \"LA\", \"FL\"), enr (12000, 12000, 19000)",
        "ambiguous_queries": [
            "select avg(hs), max(hs), min(hs) from player",
            "select avg_hs, max_hs, min_hs from player_hs"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"player\": [\"hs\"]}, {\"player_hs\": [\"avg_hs\"]}], \"maximum\": [{\"player\": [\"hs\"]}, {\"player_hs\": [\"max_hs\"]}], \"minimum\": [{\"player\": [\"hs\"]}, {\"player_hs\": [\"min_hs\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"player_hs\".\"avg_hs\", \"maximum\" refers to the schema \"player_hs\".\"max_hs\", \"minimum\" refers to the schema \"player_hs\".\"min_hs\"",
        "clear_ambiguity": "{\"average\": {\"player_hs\": [\"avg_hs\"]}, \"maximum\": {\"player_hs\": [\"max_hs\"]}, \"minimum\": {\"player_hs\": [\"min_hs\"]}}",
        "gold_query": "select avg_hs, max_hs, min_hs from player_hs"
    },
    {
        "index": 716,
        "db_id": "cre_Drama_Workshop_Groups",
        "ambig_type": "aggregate",
        "db_file": "aggregate/cre_Drama_Workshop_Groups/cre_Drama_Workshop_Groups.sqlite",
        "question": "What are the total order quantities of photo products?",
        "schema_without_content": "performers : address_id , performer_id , customer_phone , customer_name , customer_email_address , other_details  | order_items_products_order_quantity : min_order_quantity , sum_order_quantity , product_name , max_order_quantity , avg_order_quantity  | customer_orders : planned_delivery_date , order_id , order_date , actual_delivery_date , other_order_details , customer_id , store_id  | ref_service_types : parent_service_type_code , service_type_code , service_type_description  | drama_workshop_groups : store_email_address , other_details , address_id , store_phone 958-9909x0087\", \"1-351-773-1587x95545\", currency_code , marketing_region_code , store_name , workshop_group_id  | customers : customer_phone 7576252034\", \"727-6065x6351\", \"313-1839x94608\", other_details , address_id , customer_email_address , customer_id , customer_name  | stores : other_details , marketing_region_code , store_email_address , store_phone , store_name , store_id , address_id  | services : service_id , workshop_group_id , service_type_code , product_price , product_description , other_product_service_details , product_name  | marketing_regions : marketing_region_code , marketing_region_descriptrion , other_details , marketing_region_name  | addresses : address_id , line_2 , line_1 , city_town , state_county , other_details  | clients : customer_email_address , address_id , customer_name , other_details , client_id , customer_phone 818-8559x747\", \"+638897932425\" | bookings_services : order_id , product_id  | invoices : order_id , order_item_id , order_quantity , product_id , other_item_details , invoice_id , payment_method_code  | ref_payment_methods : payment_method_description , payment_method_code  | products : product_name , product_id , product_description , product_price , other_product_service_details  | bookings : order_date , workshop_group_id , status_code , other_order_details , actual_delivery_date , booking_id , customer_id , store_id , planned_delivery_date  | performers_in_bookings : performer_id , order_id  | order_items : order_item_id , order_quantity , other_item_details , product_id , order_id  | invoice_items : product_id , other_item_details , invoice_id , order_quantity , order_item_id , invoice_item_id , order_id ",
        "schema_with_content": "performers : address_id (362, 110, 374), performer_id (808, 882, 656), customer_phone (\"472.072.6649x4161\", \"08639382978\", \"1-856-024-7910x2017\"), customer_name (\"Keanu\", \"Tyrique\", \"Trudie\"), customer_email_address (\"ianderson@example.com\", \"ianderson@example.com\", \"jennyfer81@example.com\"), other_details (None, \"Did not pay\", \"Pay good tips\") | order_items_products_order_quantity : min_order_quantity (\"1\", \"2\"), sum_order_quantity (\"1\", \"2\"), product_name (\"photo\", \"film\", \"dinning\"), max_order_quantity (\"1\", \"2\"), avg_order_quantity (\"1\", \"2\") | customer_orders : planned_delivery_date (\"2012-05-19 00:38:52\", \"1996-05-17 09:10:57\", \"1973-08-20 08:52:39\"), order_id (15, 9, 15), order_date (\"1985-05-29 01:20:18\", \"2011-01-05 08:01:07\", \"1979-09-01 06:29:01\"), actual_delivery_date (\"1998-08-22 17:57:32\", \"2016-10-18 16:11:20\", \"2011-04-23 06:39:09\"), other_order_details (None), customer_id (556, 556, 516), store_id (512, 518, 150) | ref_service_types : parent_service_type_code (\"1\"), service_type_code (\"1\", \"2\", \"1\"), service_type_description (\"provide dinning service\", \"provide filming service\", \"provide photo service\") | drama_workshop_groups : store_email_address (\"kole.torp@example.org\", \"roosevelt61@example.com\", \"kole.torp@example.org\"), other_details (None, \"Good\", \"Bad\"), address_id (124, 124, 201), store_phone (\"1-351-773-1587x95545\", \"(904)958-9909x0087\", \"1-351-773-1587x95545\"), currency_code (\"EU\", \"USD\"), marketing_region_code (\"RU\", \"PT\", \"US\"), store_name (\"Queen Art\", \"Orn News\", \"Bednar Film\"), workshop_group_id (382, 470, 838) | customers : customer_phone (\"+46(5)7576252034\", \"(191)727-6065x6351\", \"(941)313-1839x94608\"), other_details (None, \"VIP\"), address_id (148, 201, 148), customer_email_address (\"dalton75@example.com\", \"keanu70@example.net\", \"cassin.cielo@example.org\"), customer_id (\"267\", \"633\", \"518\"), customer_name (\"Ephraim\", \"Federico\", \"Samson\") | stores : other_details (None, \"4 stars\", \"4 stars\"), marketing_region_code (\"CN\", \"ES\", \"CN\"), store_email_address (\"adams.miles@example.net\", \"adams.miles@example.net\", \"adams.miles@example.net\"), store_phone (\"127.870.0753x54565\", \"086-705-8793\", \"1-678-902-9434x1148\"), store_name (\"FJA Filming\", \"FK Filming\", \"Carmol Photo\"), store_id (\"512\", \"150\", \"236\"), address_id (369, 230, 230) | services : service_id (840, 640, 191), workshop_group_id (954, 838, 431), service_type_code (\"4\", \"3\", \"3\"), product_price (31862.0853, 187358.6469, 827055.7309), product_description (None), other_product_service_details (None), product_name (\"film\", \"dinning\", \"photo\") | marketing_regions : marketing_region_code (\"CN\", \"CN\", \"CA\"), marketing_region_descriptrion (\"Our target market\", \"Our main market\", \"Our main market\"), other_details (None), marketing_region_name (\"India\", \"United States\", \"Canada\") | addresses : address_id (\"207\", \"39\", \"374\"), line_2 (\"Suite 714\", \"Apt. 107\", \"Apt. 741\"), line_1 (\"2082 Runolfsson Cliffs\", \"8682 Boyle Glen\", \"956 Aliyah Cape\"), city_town (\"New Jaquelinmouth\", \"Cronaborough\", \"Monahanshire\"), state_county (\"WestVirginia\", \"WestVirginia\", \"SouthCarolina\"), other_details (None) | clients : customer_email_address (\"boyer.carleton@example.com\", \"boyer.carleton@example.com\", \"dina.gutmann@example.net\"), address_id (74, 369, 362), customer_name (\"Malcolm\", \"Tevin\", \"Horace\"), other_details (\"VIP\", None, \"Super VIP\"), client_id (768, 527, 776), customer_phone (\"1-048-214-4640x64380\", \"(745)818-8559x747\", \"+63(3)8897932425\") | bookings_services : order_id (14, 14, 8), product_id (640, 414, 640) | invoices : order_id (8, 4, 13), order_item_id (7, 9, 4), order_quantity (\"2\", \"1\"), product_id (2, 3, 6), other_item_details (None), invoice_id (162, 162, 612), payment_method_code (\"MasterCard\", \"Visa\", \"American E\") | ref_payment_methods : payment_method_description (\"credit\", \"debit\", \"Visa\"), payment_method_code (\"American E\", \"MasterCard\", \"Visa\") | products : product_name (\"photo\", \"film\", \"dinning\"), product_id (\"83\", \"83\", \"232\"), product_description (None), product_price (50828, 30625, 49097627), other_product_service_details (None) | bookings : order_date (\"1992-05-11 23:22:41\", \"1992-05-11 23:22:41\", \"2007-08-05 15:46:29\"), workshop_group_id (\"708\", \"140\", \"176\"), status_code (\"good\", \"stop\"), other_order_details (None), actual_delivery_date (\"1986-10-04 13:31:10\", \"2016-04-30 11:45:39\", \"1985-09-02 11:34:39\"), booking_id (4, 6, 6), customer_id (605, 868, 938), store_id (9, 2, 6), planned_delivery_date (\"1989-01-05 19:24:45\", \"1973-04-02 03:10:21\", \"2008-07-18 18:15:40\") | performers_in_bookings : performer_id (656, 808, 153), order_id (1, 4, 3) | order_items : order_item_id (15, 12, 2), order_quantity (\"1\", \"2\"), other_item_details (None), product_id (46, 46, 46), order_id (1, 12, 12) | invoice_items : product_id (396, 191), other_item_details (None, \"Good quality\"), invoice_id (128, 162), order_quantity (2, 6), order_item_id (5, 6), invoice_item_id (1, 2), order_id (1, 4)",
        "ambiguous_queries": [
            "select sum(t1.order_quantity) from order_items as t1 join products as t2 on t1.product_id = t2.product_id where t2.product_name = 'photo'",
            "select sum_order_quantity from order_items_products_order_quantity where product_name = 'photo'"
        ],
        "gold_ambiguity": {
            "match": "{\"total order quantities\": [{\"order_items\": [\"order_quantity\"]}, {\"order_items_products_order_quantity\": [\"sum_order_quantity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total order quantities\" refers to the schema \"order_items\".\"order_quantity\"",
        "clear_ambiguity": "{\"total order quantities\": {\"order_items\": [\"order_quantity\"]}}",
        "gold_query": "select sum(t1.order_quantity) from order_items as t1 join products as t2 on t1.product_id = t2.product_id where t2.product_name = 'photo'"
    },
    {
        "index": 717,
        "db_id": "small_bank_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/small_bank_1/small_bank_1.sqlite",
        "question": "What is the total checking balance in all accounts?",
        "schema_without_content": "checking : balance , custid  | savings : balance , custid  | checking_balance : sum_balance , max_balance , avg_balance , min_balance  | accounts : name , custid ",
        "schema_with_content": "checking : balance (7000.0, 10000.0, 77.0), custid (3, 1, 5) | savings : balance (80000.0, 60.0, 999999999.0), custid (2, 1, 6) | checking_balance : sum_balance (10000.0, 7.0, 7000.0), max_balance (77.0, 10000.0, 7.0), avg_balance (3000.0, 7000.0, 3000.0), min_balance (2000.0, 2000.0, 10000.0) | accounts : name (\"Porter\", \"Brown\", \"Granger\"), custid (7, 7, 6)",
        "ambiguous_queries": [
            "select sum(balance) from checking",
            "select sum_balance from checking_balance"
        ],
        "gold_ambiguity": {
            "match": "{\"total checking balance\": [{\"checking\": [\"balance\"]}, {\"checking_balance\": [\"sum_balance\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total checking balance\" refers to the schema \"checking\".\"balance\"",
        "clear_ambiguity": "{\"total checking balance\": {\"checking\": [\"balance\"]}}",
        "gold_query": "select sum(balance) from checking"
    },
    {
        "index": 718,
        "db_id": "race_track",
        "ambig_type": "aggregate",
        "db_file": "aggregate/race_track/race_track.sqlite",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "schema_without_content": "race : name , track_id , race_id , class , date  | track : seating , name , year_opened , location , track_id  | track_seating : max_seating , min_seating , avg_seating , sum_seating ",
        "schema_with_content": "race : name (\"RumBum.com 250\", \"Sahlen's Six Hours of the Glen\", \"RumBum.com 250\"), track_id (\"7\", \"4\", \"2\"), race_id (6, 4, 5), class (\"DP/GT\", \"GT\"), date (\"April 19\", \"January 26 January 27\", \"June 7\") | track : seating (81687.0, 168000.0, 92000.0), name (\"Michigan International Speedway\", \"Daytona International Speedway\", \"Phoenix International Raceway\"), year_opened (1947.0, 1947.0, 1995.0), location (\"Avondale, AZ\", \"Darlington, SC\", \"Kansas City, KS\"), track_id (2, 1, 4) | track_seating : max_seating (76812.0, 76812.0, 168000.0), min_seating (137243.0, 75000.0, 76812.0), avg_seating (65000.0, 75000.0, 76812.0), sum_seating (63000.0, 63000.0, 92000.0)",
        "ambiguous_queries": [
            "select min(seating), max(seating), avg(seating) from track",
            "select min_seating, max_seating, avg_seating from track_seating"
        ],
        "gold_ambiguity": {
            "match": "{\"minimum\": [{\"track\": [\"seating\"]}, {\"track_seating\": [\"min_seating\"]}], \"maximum\": [{\"track\": [\"seating\"]}, {\"track_seating\": [\"max_seating\"]}], \"average\": [{\"track\": [\"seating\"]}, {\"track_seating\": [\"avg_seating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"minimum\" refers to the schema \"track_seating\".\"min_seating\", \"maximum\" refers to the schema \"track_seating\".\"max_seating\", \"average\" refers to the schema \"track_seating\".\"avg_seating\"",
        "clear_ambiguity": "{\"minimum\": {\"track_seating\": [\"min_seating\"]}, \"maximum\": {\"track_seating\": [\"max_seating\"]}, \"average\": {\"track_seating\": [\"avg_seating\"]}}",
        "gold_query": "select min_seating, max_seating, avg_seating from track_seating"
    },
    {
        "index": 719,
        "db_id": "election",
        "ambig_type": "aggregate",
        "db_file": "aggregate/election/election.sqlite",
        "question": "Return the maximum and minimum population among all counties.",
        "schema_without_content": "county_population : max_population , avg_population , min_population , sum_population  | election : election_id , delegate , district , party , first_elected , counties_represented , committee \", \"Environmental Matters \", \"Environmental Matters\" | party : lieutenant_governor , party_id , party , us_senate \", \"Hillary Rodham Clinton\", year , attorney_general , comptroller , governor  | county : county_id , zip_code , population , county_name ",
        "schema_with_content": "county_population : max_population (21000.0, 21000.0, 21000.0), avg_population (13300.0, 90000.0, 90000.0), min_population (87200.0, 13300.0, 13300.0), sum_population (79000.0, 21000.0, 87200.0) | election : election_id (4, 4, 3), delegate (\"DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.\", \"Bates, Gail H. Gail H. Bates\", \"Pendergrass, Shane E. Shane Pendergrass\"), district (2, 3, 3), party (7, 3, 2), first_elected (2006.0, 2002.0, 2003.0), counties_represented (\"13\", \"12.2 12B\", \"12.1 12A\"), committee (\"Environmental Matters (Vice-Chair)\", \"Environmental Matters (Vice-Chair)\", \"Environmental Matters\") | party : lieutenant_governor (\"Mary Donohue\", \"Dennis Mehiel\", \"Jonathan Reiter\"), party_id (7, 6, 7), party (\"Independence\", \"Democratic\", \"Working Families\"), us_senate (\"Charles Schumer\", \"(no election)\", \"Hillary Rodham Clinton\"), year (1998.0, 2002.0, 2006.0), attorney_general (\"Eliot Spitzer\", \"Andrew Cuomo\", \"Jeanine Pirro\"), comptroller (\"Carl McCall\", \"Alan Hevesi\", \"John Faso\"), governor (\"Carl McCall\", \"Tom Golisano\", \"Peter Vallone\") | county : county_id (3, 4, 5), zip_code (\"D11\", \"D11\", \"D11\"), population (90000.0, 87200.0, 79000.0), county_name (\"Howard\", \"Mansfield\", \"Manning\")",
        "ambiguous_queries": [
            "select max(population), min(population) from county",
            "select max_population, min_population from county_population"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"county\": [\"population\"]}, {\"county_population\": [\"max_population\"]}], \"minimum\": [{\"county\": [\"population\"]}, {\"county_population\": [\"min_population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"county\".\"population\", \"minimum\" refers to the schema \"county\".\"population\"",
        "clear_ambiguity": "{\"maximum\": {\"county\": [\"population\"]}, \"minimum\": {\"county\": [\"population\"]}}",
        "gold_query": "select max(population), min(population) from county"
    },
    {
        "index": 720,
        "db_id": "allergy_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/allergy_1/allergy_1.sqlite",
        "question": "What are the average ages for male and female students?",
        "schema_without_content": "student : city_code , age , stuid , sex , fname , advisor , lname , major  | student_age : min_age , max_age , sum_age , sex , avg_age  | allergy_type : allergytype , allergy  | has_allergy : stuid , allergy ",
        "schema_with_content": "student : city_code (\"WAS\", \"PIT\", \"PEK\"), age (18, 21, 19), stuid (1019, 1009, 1019), sex (\"F\", \"M\"), fname (\"Lisa\", \"Sarah\", \"Andy\"), advisor (8423, 9172, 7134), lname (\"Apap\", \"Woods\", \"Andreou\"), major (540, 50, 100) | student_age : min_age (17, 27, 22), max_age (19, 17, 27), sum_age (20, 16, 19), sex (\"F\", \"M\"), avg_age (17, 21, 27) | allergy_type : allergytype (\"food\", \"environmental\", \"animal\"), allergy (\"Ragweed\", \"Bee Stings\", \"Milk\") | has_allergy : stuid (1009, 1017, 1002), allergy (\"Grass Pollen\", \"Anchovies\", \"Anchovies\")",
        "ambiguous_queries": [
            "select avg(age), sex from student group by sex",
            "select avg_age, sex from student_age"
        ],
        "gold_ambiguity": {
            "match": "{\"average ages\": [{\"student\": [\"age\"]}, {\"student_age\": [\"avg_age\"]}], \"male and female\": [{\"student\": [\"sex\"]}, {\"student_age\": [\"sex\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average ages\" refers to the schema \"student\".\"age\", \"male and female\" refers to the schema \"student\".\"sex\"",
        "clear_ambiguity": "{\"average ages\": {\"student\": [\"age\"]}, \"male and female\": {\"student\": [\"sex\"]}}",
        "gold_query": "select avg(age), sex from student group by sex"
    },
    {
        "index": 721,
        "db_id": "mountain_photos",
        "ambig_type": "aggregate",
        "db_file": "aggregate/mountain_photos/mountain_photos.sqlite",
        "question": "What are the maximum and average height of the mountains?",
        "schema_without_content": "mountain : prominence , name , country , range , height , id  | camera_lens : max_aperture , id , focal_length_mm , name , brand  | mountain_height : min_height , sum_height , avg_height , max_height  | photos : id , color , mountain_id , camera_lens_id , name ",
        "schema_with_content": "mountain : prominence (2225.0, 3755.0, 1605.0), name (\"Dubbai\", \"Oldoinyo Lesatima\", \"Dubbai\"), country (\"Morocco\", \"Rwanda Uganda\", \"Ethiopia\"), range (\"Kollo Massif\", \"Toubkal Atlas\", \"Semien Mountains\"), height (3950.0, 4193.0, 4127.0), id (15, 22, 9) | camera_lens : max_aperture (1.2, 2.8, 8.0), id (7, 9, 11), focal_length_mm (42.5, 14.0, 45.0), name (\"Schneider Kreuznach Super Angulon 14mm f /2.0\", \"Sigma 30mm f2.8 DN\", \"Olympus M.Zuiko Digital ED 75mm f/1.8\"), brand (\"Panasonic\", \"Sigma\", \"Olympus\") | mountain_height : min_height (4088.0, 4127.0, 4030.0), sum_height (4260.0, 4088.0, 4127.0), avg_height (4088.0, 4071.0, 4120.0), max_height (4100.0, 4100.0, 3950.0) | photos : id (6, 9, 8), color (\"RBG\", \"Black/White\"), mountain_id (1, 12, 10), camera_lens_id (1, 1, 7), name (\"grass\", \"wolfs\", \"life\")",
        "ambiguous_queries": [
            "select max(height), avg(height) from mountain",
            "select max_height, avg_height from mountain_height"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"mountain\": [\"height\"]}, {\"mountain_height\": [\"avg_height\"]}], \"average\": [{\"mountain\": [\"height\"]}, {\"mountain_height\": [\"avg_height\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"mountain\".\"height\", \"average\" refers to the schema \"mountain\".\"height\"",
        "clear_ambiguity": "{\"maximum\": {\"mountain\": [\"height\"]}, \"average\": {\"mountain\": [\"height\"]}}",
        "gold_query": "select max(height), avg(height) from mountain"
    },
    {
        "index": 722,
        "db_id": "gymnast",
        "ambig_type": "aggregate",
        "db_file": "aggregate/gymnast/gymnast.sqlite",
        "question": "Return the average age across all gymnasts.",
        "schema_without_content": "people : age , height , hometown , name , people_id  | gymnast : pommel_horse_points , rings_points , horizontal_bar_points , gymnast_id , total_points , floor_exercise_points , parallel_bars_points , vault_points  | gymnast_people_age : sum_age , avg_age , min_age , max_age ",
        "schema_with_content": "people : age (22.0, 23.0, 21.0), height (1.71, 1.75, 1.72), hometown (\"Santo Domingo\", \"Los Alcarrizos\", \"Miami\"), name (\"Ashley PÃ©rez Cabrera\", \"Paul Hamm\", \"Rosa Clarissa OrtÃ­z Melo\"), people_id (10, 3, 9) | gymnast : pommel_horse_points (9.325, 9.737, 9.75), rings_points (9.75, 9.3, 9.3), horizontal_bar_points (9.5, 9.412, 9.412), gymnast_id (7, 1, 8), total_points (57.436, 57.374, 57.436), floor_exercise_points (9.725, 9.687, 8.987), parallel_bars_points (9.5, 9.762, 9.625), vault_points (9.55, 9.65, 9.637) | gymnast_people_age : sum_age (24.0, 23.0, 24.0), avg_age (19.0, 24.0, 20.0), min_age (20.0, 24.0, 23.0), max_age (19.0, 24.0, 19.0)",
        "ambiguous_queries": [
            "select avg(t2.age) from gymnast as t1 join people as t2 on t1.gymnast_id = t2.people_id",
            "select avg_age from gymnast_people_age"
        ],
        "gold_ambiguity": {
            "match": "{\"average age\": [{\"gymnast_people_age\": [\"avg_age\"]}, {\"people\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average age\" refers to the schema \"people\".\"age\"",
        "clear_ambiguity": "{\"average age\": {\"people\": [\"age\"]}}",
        "gold_query": "select avg(t2.age) from gymnast as t1 join people as t2 on t1.gymnast_id = t2.people_id"
    },
    {
        "index": 723,
        "db_id": "movie_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/movie_1/movie_1.sqlite",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "schema_without_content": "reviewer : rid , name  | movie : director , mid , year , title  | rating : ratingdate , mid , stars , rid  | rating_reviewer_stars : name , max_stars , min_stars , avg_stars , sum_stars ",
        "schema_with_content": "reviewer : rid (207, 208, 204), name (\"Sarah Martinez\", \"Chris Jackson\", \"James Cameron\") | movie : director (\"George Lucas\", \"James Cameron\", \"George Lucas\"), mid (108, 105, 106), year (1939, 1982, 1977), title (\"The Sound of Music\", \"Titanic\", \"Raiders of the Lost Ark\") | rating : ratingdate (None, \"2011-01-09\", \"2011-01-09\"), mid (108, 106, 104), stars (5, 2, 5), rid (205, 202, 202) | rating_reviewer_stars : name (\"James Cameron\", \"Sarah Martinez\", \"Sarah Martinez\"), max_stars (3, 4, 5), min_stars (2, 3, 2), avg_stars (2, 3, 3), sum_stars (3, 3, 5)",
        "ambiguous_queries": [
            "select t2.name, avg(t1.stars) from rating as t1 join reviewer as t2 on t1.rid = t2.rid group by t2.name",
            "select name, avg_stars from rating_reviewer_stars"
        ],
        "gold_ambiguity": {
            "match": "{\"reviewer\": [{\"rating_reviewer_stars\": [\"name\"]}, {\"reviewer\": [\"name\"]}], \"average number of stars\": [{\"rating\": [\"stars\"]}, {\"rating_reviewer_stars\": [\"avg_stars\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"reviewer\" refers to the schema \"rating_reviewer_stars\".\"name\", \"average number of stars\" refers to the schema \"rating_reviewer_stars\".\"avg_stars\"",
        "clear_ambiguity": "{\"reviewer\": {\"rating_reviewer_stars\": [\"name\"]}, \"average number of stars\": {\"rating_reviewer_stars\": [\"avg_stars\"]}}",
        "gold_query": "select name, avg_stars from rating_reviewer_stars"
    },
    {
        "index": 724,
        "db_id": "farm",
        "ambig_type": "aggregate",
        "db_file": "aggregate/farm/farm.sqlite",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "schema_without_content": "farm : total_horses , oxen , cows , total_cattle , working_horses , pigs , year , farm_id , sheep_and_goats , bulls  | city : area_km_2 , population , status , census_ranking , official_name , city_id  | farm_competition : year , theme , hosts , host_city_id , competition_id  | competition_record : rank , farm_id , competition_id  | farm_working_horses : min_working_horses , avg_working_horses , max_working_horses , sum_working_horses ",
        "schema_with_content": "farm : total_horses (5308.2, 4781.3, 4781.3), oxen (895.3, 105.2, 113.8), cows (2518.0, 2518.0, 2518.0), total_cattle (5277.5, 8604.8, 7611.0), working_horses (3711.6, 3721.6, 4198.8), pigs (4161.2, 3373.3, 2089.2), year (1928, 1930, 1932), farm_id (4, 4, 8), sheep_and_goats (2197.1, 2004.7, 2197.1), bulls (32.8, 32.8, 26.9) | city : area_km_2 (8.91, 3.09, 3.09), population (1778.0, 5706.0, 1778.0), status (\"Town\", \"Village\"), census_ranking (\"3460 of 5008\", \"636 of 5008\", \"1936 of 5,008\"), official_name (\"Drummond\", \"Aroostook\", \"Plaster Rock\"), city_id (2, 1, 3) | farm_competition : year (2002, 2002, 2004), theme (\"Valentine's Day\", \"MTV Cube\", \"Carnival M is back!\"), hosts (\"Mandy Moore and Ronan Keating\", \"Miley Cyrus Jared Leto and Karen Mok\", \"Shaggy and Coco Lee\"), host_city_id (1, 2, 4), competition_id (2, 3, 4) | competition_record : rank (1, 3, 4), farm_id (3, 7, 1), competition_id (2, 5, 1) | farm_working_horses : min_working_horses (3900.1, 3900.1, 4090.5), avg_working_horses (3711.2, 4198.8, 4198.8), max_working_horses (3711.6, 3900.1, 3900.1), sum_working_horses (4090.5, 3721.6, 3900.1)",
        "ambiguous_queries": [
            "select avg(working_horses) from farm where total_horses > 5000",
            "select avg_working_horses from farm_working_horses where total_horses > 5000"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of working horses\": [{\"farm\": [\"working_horses\"]}, {\"farm_working_horses\": [\"avg_working_horses\"]}], \"total number of horses\": [{\"farm\": [\"total_horses\"]}, {\"farm_working_horses\": [\"total_horses\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of working horses\" refers to the schema \"farm\".\"working_horses\", \"total number of horses\" refers to the schema \"farm\".\"total_horses\"",
        "clear_ambiguity": "{\"average number of working horses\": {\"farm\": [\"working_horses\"]}, \"total number of horses\": {\"farm\": [\"total_horses\"]}}",
        "gold_query": "select avg(working_horses) from farm where total_horses > 5000"
    },
    {
        "index": 725,
        "db_id": "insurance_policies",
        "ambig_type": "aggregate",
        "db_file": "aggregate/insurance_policies/insurance_policies.sqlite",
        "question": "Compute the total amount of payment processed.",
        "schema_without_content": "settlements : amount_settled , claim_id , settlement_id , date_claim_settled , customer_policy_id , date_claim_made , amount_claimed  | claims : amount_settled , policy_id , date_claim_made , date_claim_settled , amount_claimed , claim_id  | customers : customer_details , customer_id  | payments : date_payment_made , settlement_id , payment_id , amount_payment , payment_method_code  | customer_policies : customer_id , policy_id , policy_type_code , start_date , end_date  | payments_amount_payment : min_amount_payment , avg_amount_payment , max_amount_payment , sum_amount_payment ",
        "schema_with_content": "settlements : amount_settled (1427, 1042, 1737), claim_id (569, 801, 486), settlement_id (983, 558, 558), date_claim_settled (\"2018-01-16\", \"2017-11-15\", \"2018-02-15\"), customer_policy_id (678, 617, 419), date_claim_made (\"2017-07-31\", \"2017-03-29\", \"2017-08-27\"), amount_claimed (57669, 25078, 8634) | claims : amount_settled (1353, 930, 1639), policy_id (738, 141, 119), date_claim_made (\"2018-07-13\", \"2017-10-21\", \"2017-02-24\"), date_claim_settled (\"2017-12-20\", \"2017-11-19\", \"2018-01-05\"), amount_claimed (69696, 35824, 83703), claim_id (563, 442, 546) | customers : customer_details (\"Ellsworth Paucek\", \"America Jaskolski\", \"Dayana Robel\"), customer_id (14, 8, 1) | payments : date_payment_made (\"2017-10-07\", \"2018-01-10\", \"2017-07-31\"), settlement_id (682, 527, 564), payment_id (559, 739, 498), amount_payment (448613, 319142, 177130), payment_method_code (\"MasterCard\", \"Visa\", \"MasterCard\") | customer_policies : customer_id (6, 1, 3), policy_id (738, 218, 264), policy_type_code (\"Life\", \"Travel\", \"Travel\"), start_date (\"2017-08-21\", \"2017-01-20\", \"2017-03-23\"), end_date (\"2018-02-11\", \"2017-12-09\", \"2017-11-05\") | payments_amount_payment : min_amount_payment (407235, 407235, 423154), avg_amount_payment (456098, 71246, 423154), max_amount_payment (177130, 155654, 448613), sum_amount_payment (448613, 7343, 7343)",
        "ambiguous_queries": [
            "select sum(amount_payment) from payments",
            "select sum_amount_payment from payments_amount_payment"
        ],
        "gold_ambiguity": {
            "match": "{\"total amount of payment\": [{\"payments\": [\"amount_payment\"]}, {\"payments_amount_payment\": [\"sum_amount_payment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total amount of payment\" refers to the schema \"payments_amount_payment\".\"sum_amount_payment\"",
        "clear_ambiguity": "{\"total amount of payment\": {\"payments_amount_payment\": [\"sum_amount_payment\"]}}",
        "gold_query": "select sum_amount_payment from payments_amount_payment"
    },
    {
        "index": 726,
        "db_id": "twitter_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/twitter_1/twitter_1.sqlite",
        "question": "Find the maximum and total number of followers of all users.",
        "schema_without_content": "user_profiles_followers : avg_followers , sum_followers , max_followers , min_followers  | user_profiles : email , uid , name , followers , partitionid  | follows : f2 , f1  | tweets : uid , id , createdate , text ",
        "schema_with_content": "user_profiles_followers : avg_followers (890, 890, 6662425), sum_followers (94375428, 99999998, 35425845), max_followers (35425845, 6662425, 35425845), min_followers (94375428, 23927492, 890) | user_profiles : email (\"cd@superstar.com\", \"np@superstar.com\", \"bw@superhero.com\"), uid (4, 2, 4), name (\"Black Widow\n\", \"Natalie Portman\", \"Tyler Swift\"), followers (23927492, 94375428, 6662425), partitionid (1, 10, 10) | follows : f2 (2, 5, 4), f1 (2, 3, 5) | tweets : uid (6, 6, 1), id (8, 5, 9), createdate (\"2018-03-09 20:00:14\", \"2018-03-09 20:01:02\", \"2018-03-12 02:30:30\"), text (\"Hello I'm Tony Stark.\", \"Today I have went shopping at Laffayette.\", \"I love my new boyfriend.\")",
        "ambiguous_queries": [
            "select max(followers), sum(followers) from user_profiles",
            "select max_followers, sum_followers from user_profiles_followers"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"user_profiles\": [\"followers\"]}, {\"user_profiles_followers\": [\"max_followers\"]}], \"total\": [{\"user_profiles\": [\"followers\"]}, {\"user_profiles_followers\": [\"sum_followers\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"user_profiles_followers\".\"max_followers\", \"total\" refers to the schema \"user_profiles_followers\".\"sum_followers\"",
        "clear_ambiguity": "{\"maximum\": {\"user_profiles_followers\": [\"max_followers\"]}, \"total\": {\"user_profiles_followers\": [\"sum_followers\"]}}",
        "gold_query": "select max_followers, sum_followers from user_profiles_followers"
    },
    {
        "index": 727,
        "db_id": "music_4",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_4/music_4.sqlite",
        "question": "What is the average age of all artists?",
        "schema_without_content": "artist_age : max_age , avg_age , min_age , sum_age  | artist : age , artist_id , famous_release_date , artist , famous_title \", \"Bergen 1996\", \"Antievangelistical Process \" | music_festival : volume , id , result , music_festival , date_of_ceremony , category  | volume : weeks_on_top , volume_id , issue_date , artist_id , song , volume_issue ",
        "schema_with_content": "artist_age : max_age (18, 34, 22), avg_age (22, 27, 18), min_age (49, 27, 49), sum_age (27, 49, 27) | artist : age (22, 49, 27), artist_id (5, 7, 7), famous_release_date (\"June 15, 2009\", \"November 2007\", \"2009\"), artist (\"Ophiolatry\", \"Tangorodrim\", \"Black Flame\"), famous_title (\"Unholy Metal Way (re-release)\", \"Bergen 1996\", \"Antievangelistical Process (re-release)\") | music_festival : volume (5, 7, 9), id (2, 3, 5), result (\"Nominated\", \"Awarded\"), music_festival (\"37th Sweden Academy Prize\", \"34th USA Academy Prize\", \"36th Japan Academy Prize\"), date_of_ceremony (\"18 February 2011\"), category (\"Best Song\", \"Best Lyrics\", \"Best Sound Song\") | volume : weeks_on_top (3.0, 1.0, 2.0), volume_id (4, 10, 6), issue_date (\"16 May - 30 May\", \"28 February - 7 March\", \"28 February - 7 March\"), artist_id (5, 6, 2), song (\" The Way\", \"Head to Toe \", \" With or Without You \"), volume_issue (\"46:14-15\", \"46:14-15\", \"46:10\")",
        "ambiguous_queries": [
            "select avg(age) from artist",
            "select avg_age from artist_age"
        ],
        "gold_ambiguity": {
            "match": "{\"average age\": [{\"artist\": [\"age\"]}, {\"artist_age\": [\"avg_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average age\" refers to the schema \"artist_age\".\"avg_age\"",
        "clear_ambiguity": "{\"average age\": {\"artist_age\": [\"avg_age\"]}}",
        "gold_query": "select avg_age from artist_age"
    },
    {
        "index": 728,
        "db_id": "insurance_policies",
        "ambig_type": "aggregate",
        "db_file": "aggregate/insurance_policies/insurance_policies.sqlite",
        "question": "What is the total amount of payment?",
        "schema_without_content": "customers : customer_details , customer_id  | settlements : amount_settled , amount_claimed , date_claim_made , settlement_id , claim_id , date_claim_settled , customer_policy_id  | payments : date_payment_made , payment_method_code , settlement_id , payment_id , amount_payment  | claims : date_claim_made , amount_settled , policy_id , claim_id , amount_claimed , date_claim_settled  | customer_policies : customer_id , policy_type_code , end_date , policy_id , start_date  | payments_amount_payment : max_amount_payment , avg_amount_payment , min_amount_payment , sum_amount_payment ",
        "schema_with_content": "customers : customer_details (\"Sydnie Friesen\", \"Augustine Kerluke\", \"Dr. Diana Rath\"), customer_id (11, 6, 5) | settlements : amount_settled (1885, 930, 1042), amount_claimed (62680, 3864, 37302), date_claim_made (\"2016-07-19\", \"2018-11-10\", \"2017-09-22\"), settlement_id (682, 682, 512), claim_id (957, 486, 486), date_claim_settled (\"2018-03-02\", \"2018-02-11\", \"2017-12-24\"), customer_policy_id (678, 536, 359) | payments : date_payment_made (\"2017-12-16\", \"2018-02-18\", \"2018-02-16\"), payment_method_code (\"Visa\", \"American Express\", \"MasterCard\"), settlement_id (527, 512, 512), payment_id (678, 542, 384), amount_payment (319142, 319142, 177130) | claims : date_claim_made (\"2017-08-03\", \"2018-06-14\", \"2017-10-14\"), amount_settled (1636, 1652, 1570), policy_id (858, 473, 858), claim_id (486, 486, 143), amount_claimed (89632, 38280, 89632), date_claim_settled (\"2018-01-21\", \"2018-01-11\", \"2017-12-20\") | customer_policies : customer_id (1, 6, 1), policy_type_code (\"Travel\", \"Property\", \"Property\"), end_date (\"2017-11-23\", \"2017-11-05\", \"2017-12-14\"), policy_id (587, 858, 264), start_date (\"2016-05-30\", \"2017-01-20\", \"2016-05-23\") | payments_amount_payment : max_amount_payment (423154, 423154, 319142), avg_amount_payment (423154, 319142, 235893), min_amount_payment (155654, 319142, 235893), sum_amount_payment (456098, 235893, 319142)",
        "ambiguous_queries": [
            "select sum(amount_payment) from payments",
            "select sum_amount_payment from payments_amount_payment"
        ],
        "gold_ambiguity": {
            "match": "{\"total amount\": [{\"payments\": [\"amount_payment\"]}, {\"payments_amount_payment\": [\"sum_amount_payment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total amount\" refers to the schema \"payments\".\"amount_payment\"",
        "clear_ambiguity": "{\"total amount\": {\"payments\": [\"amount_payment\"]}}",
        "gold_query": "select sum(amount_payment) from payments"
    },
    {
        "index": 729,
        "db_id": "document_management",
        "ambig_type": "aggregate",
        "db_file": "aggregate/document_management/document_management.sqlite",
        "question": "Find the total access count of all documents in the most popular document type.",
        "schema_without_content": "roles : role_code , role_description  | users : user_name , user_login , user_id , password , role_code  | documents_access_count : avg_access_count , max_access_count , sum_access_count , min_access_count  | images : image_url , image_id , image_alt_text , image_name  | functional_areas : functional_area_description , parent_functional_area_code , functional_area_code  | document_sections : section_code , document_code , section_sequence , section_title , section_id  | document_functional_areas : functional_area_code , document_code  | documents : document_code , document_type_code , document_name , access_count , document_structure_code  | document_structures : document_structure_description , document_structure_code , parent_document_structure_code  | document_sections_images : image_id , section_id ",
        "schema_with_content": "roles : role_code (\"DBA\", \"PROJ-MGR\"), role_description (\"Database Administrator\", \"Project Manager\") | users : user_name (\"lynn.haley\", \"faye30\", \"glenna.simonis\"), user_login (\"0\", \"1\"), user_id (14, 4, 3), password (\"a0fe5434a5f4c218e37b0082f2408b357feb0fa6\", \"11af7569a5c1e8b455add5755e18131be2ac8636\", \"9bc25a040d5647ced5ec32e1a455e90fafc10bcb\"), role_code (\"PROJ-MGR\", \"DBA\") | documents_access_count : avg_access_count (8623, 6345, 2294), max_access_count (3769, 8208, 5924), sum_access_count (9948, 6345, 7509), min_access_count (2045, 3479, 1864) | images : image_url (\"http://haleychamplin.net/1.jpg\", \"http://www.rempelnader.com/1.jpg\", \"http://www.beahan.biz/1.jpg\"), image_id (10, 4, 3), image_alt_text (\"Miller\", \"Miller\", \"Trycia\"), image_name (\"data3\", \"top2\", \"data6\") | functional_areas : functional_area_description (\"Signature\", \"Acknowledgement\", \"Keep blank\"), parent_functional_area_code (\"8\"), functional_area_code (\"1\", \"8\", \"9\") | document_sections : section_code (\"90\", \"22\", \"16\"), document_code (\"566\", \"989\", \"621\"), section_sequence (7236, 8805, 8805), section_title (\"after\", \"before\"), section_id (62, 40, 15) | document_functional_areas : functional_area_code (\"9\", \"1\", \"8\"), document_code (\"465\", \"217\", \"989\") | documents : document_code (\"958\", \"465\", \"958\"), document_type_code (\"CV\", \"Book\", \"Paper\"), document_name (\"Relationships between History and Arts\", \"Spring Sails\", \"Learning Database\"), access_count (6661, 6661, 3289), document_structure_code (\"9\", \"5\", \"8\") | document_structures : document_structure_description (\"Header\", \"Author section\", \"Header\"), document_structure_code (\"6\", \"5\", \"8\"), parent_document_structure_code (\"1\", \"6\", \"8\") | document_sections_images : image_id (4, 3, 13), section_id (38, 93, 15)",
        "ambiguous_queries": [
            "select sum(access_count) from documents group by document_type_code order by count(*) desc limit 1",
            "select sum_access_count from documents_access_count"
        ],
        "gold_ambiguity": {
            "match": "{\"total access count\": [{\"documents\": [\"access_count\"]}, {\"documents_access_count\": [\"sum_access_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total access count\" refers to the schema \"documents\".\"access_count\"",
        "clear_ambiguity": "{\"total access count\": {\"documents\": [\"access_count\"]}}",
        "gold_query": "select sum(access_count) from documents group by document_type_code order by count(*) desc limit 1"
    },
    {
        "index": 730,
        "db_id": "hr_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/hr_1/hr_1.sqlite",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "schema_without_content": "departments : department_name , location_id , department_id , manager_id  | job_history_end_date : sum_end_date , min_end_date , employee_id , avg_end_date , max_end_date  | jobs : min_salary , job_title , max_salary , job_id  | employees : hire_date , commission_pct , phone_number , salary , manager_id , email , employee_id , first_name , department_id , last_name , job_id  | countries : country_name , country_id , region_id  | locations : location_id , country_id , city , street_address , state_province , postal_code  | regions : region_id , region_name  | job_history : job_id , department_id , start_date , employee_id , end_date ",
        "schema_with_content": "departments : department_name (\"Manufacturing\", \"Public Relations\", \"Human Resources\"), location_id (1700, 1400, 2700), department_id (180, 220, 160), manager_id (108, 205, 205) | job_history_end_date : sum_end_date (\"1997-03-15\", \"1993-10-27\", \"0000-00-00\"), min_end_date (\"1998-12-31\", \"1993-10-27\", \"1998-12-31\"), employee_id (102, 101, 102), avg_end_date (\"1998-07-24\", \"0000-00-00\", \"1993-10-27\"), max_end_date (\"1998-12-31\", \"1999-12-19\", \"1998-07-24\") | jobs : min_salary (4000, 8200, 4000), job_title (\"Administration Vice President\", \"Purchasing Manager\", \"Administration Assistant\"), max_salary (16000, 8500, 16000), job_id (\"FI_MGR\", \"IT_PROG\", \"HR_REP\") | employees : hire_date (\"1987-07-10\", \"1987-07-20\", \"1987-09-01\"), commission_pct (0, 0, 0.35), phone_number (\"650.124.1334\", \"650.121.1234\", \"011.44.1344.467268\"), salary (2500, 6900, 7900), manager_id (100, 114, 124), email (\"JCHEN\", \"DGRANT\", \"AKHOO\"), employee_id (192, 154, 180), first_name (\"Jennifer\", \"Valli\", \"Kelly\"), department_id (30, 40, 10), last_name (\"Dellinger\", \"Faviet\", \"Hutton\"), job_id (\"PR_REP\", \"AC_ACCOUNT\", \"AD_VP\") | countries : country_name (\"United Kingdom\", \"Germany\", \"HongKong\"), country_id (\"FR\", \"BR\", \"KW\"), region_id (3, 4, 4) | locations : location_id (2500, 2700, 1700), country_id (\"Ox\", \"BR\", \"SG\"), city (\"Bern\", \"Singapore\", \"Munich\"), street_address (\"147 Spadina Ave\", \"2004 Charade Rd\", \"198 Clementi North\"), state_province (\"Sao Paulo\", \"Maharashtra\", \"Ontario\"), postal_code (\"10934\", \"989\", \"1730\") | regions : region_id (2, 4, 1), region_name (\"Asia\\r\", \"Asia\\r\", \"Americas\\r\") | job_history : job_id (\"SA_MAN\", \"\", \"SA_REP\"), department_id (60, 20, 20), start_date (\"1993-10-28\", \"1993-10-28\", \"1993-10-28\"), employee_id (200, 0, 201), end_date (\"1993-06-17\", \"1998-07-24\", \"1997-03-15\")",
        "ambiguous_queries": [
            "select employee_id, max(end_date) from job_history group by employee_id",
            "select employee_id, max_end_date from job_history_end_date"
        ],
        "gold_ambiguity": {
            "match": "{\"final dates\": [{\"job_history\": [\"end_date\"]}, {\"job_history_end_date\": [\"max_end_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"final dates\" refers to the schema \"job_history_end_date\".\"max_end_date\"",
        "clear_ambiguity": "{\"final dates\": {\"job_history_end_date\": [\"max_end_date\"]}}",
        "gold_query": "select employee_id, max_end_date from job_history_end_date"
    },
    {
        "index": 731,
        "db_id": "voter_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/voter_2/voter_2.sqlite",
        "question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?",
        "schema_without_content": "student_voting_record_age : sum_age , city_code , election_cycle , max_age , min_age , avg_age  | voting_record : registration_date , vice_president_vote , president_vote , stuid , treasurer_vote , election_cycle , class_senator_vote , class_president_vote , secretary_vote  | student : lname , advisor , city_code , sex , major , age , stuid , fname ",
        "schema_with_content": "student_voting_record_age : sum_age (21, 18, 16), city_code (\"DAL\", \"PHL\", \"NAR\"), election_cycle (\"Spring\", \"Fall\"), max_age (19, 26, 16), min_age (21, 16, 17), avg_age (20, 16, 21) | voting_record : registration_date (\"08/30/2015\", \"08/30/2014\", \"08/30/2015\"), vice_president_vote (1007, 1017), president_vote (1004, 1014, 1024), stuid (1004, 1003, 1005), treasurer_vote (1035, 1025), election_cycle (\"Spring\", \"Fall\"), class_senator_vote (1028, 1018), class_president_vote (1031, 1021, 1001), secretary_vote (1010, 1020, 1030) | student : lname (\"Tai\", \"Woods\", \"Rugh\"), advisor (7271, 1121, 7271), city_code (\"WAS\", \"CHI\", \"DAL\"), sex (\"F\", \"M\"), major (540, 520, 520), age (19, 27, 21), stuid (1004, 1031, 1033), fname (\"Stacy\", \"Linda\", \"Sarah\")",
        "ambiguous_queries": [
            "select avg(t1.age) from student as t1 join voting_record as t2 on t1.stuid = secretary_vote where t1.city_code = 'NYC' and t2.election_cycle = 'Spring'",
            "select avg_age from student_voting_record_age where city_code = 'NYC' and election_cycle = 'Spring'"
        ],
        "gold_ambiguity": {
            "match": "{\"average age\": [{\"student\": [\"age\"]}, {\"student_voting_record_age\": [\"avg_age\"]}], \"city code\": [{\"student\": [\"city_code\"]}, {\"student_voting_record_age\": [\"city_code\"]}], \"election cycle\": [{\"student_voting_record_age\": [\"election_cycle\"]}, {\"voting_record\": [\"election_cycle\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average age\" refers to the schema \"student_voting_record_age\".\"avg_age\", \"city code\" refers to the schema \"student_voting_record_age\".\"city_code\", \"election cycle\" refers to the schema \"student_voting_record_age\".\"election_cycle\"",
        "clear_ambiguity": "{\"average age\": {\"student_voting_record_age\": [\"avg_age\"]}, \"city code\": {\"student_voting_record_age\": [\"city_code\"]}, \"election cycle\": {\"student_voting_record_age\": [\"election_cycle\"]}}",
        "gold_query": "select avg_age from student_voting_record_age where city_code = 'NYC' and election_cycle = 'Spring'"
    },
    {
        "index": 732,
        "db_id": "sports_competition",
        "ambig_type": "aggregate",
        "db_file": "aggregate/sports_competition/sports_competition.sqlite",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "schema_without_content": "club : region , club_id , start_year , name  | competition : country , competition_id , year , competition_type  | club_rank_silver : sum_silver , max_silver , avg_silver , min_silver  | club_rank : club_id , silver , total , gold , bronze , rank  | player : name \", \"Matt Cook\", apps , goals , club_id , player_id , position , tries , points  | competition_result : club_id_2 , competition_id , score , club_id_1 ",
        "schema_with_content": "club : region (\"UK\", \"UK\", \"Japan\"), club_id (3, 2, 2), start_year (\"2011\", \"2011\", \"2011\"), name (\"AIB\", \"AIB\", \"HGS2\") | competition : country (\"Spain\", \"Ireland\", \"Slovenia\"), competition_id (3, 4, 2), year (2006.0, 2007.0), competition_type (\"Friendly\", \"Tournament\") | club_rank_silver : sum_silver (1.0, 2.0, 3.0), max_silver (3.0, 7.0, 4.0), avg_silver (4.0, 3.0, 2.0), min_silver (2.0, 7.0, 11.0) | club_rank : club_id (6, 6, 4), silver (3.0, 4.0, 2.0), total (31.0, 21.0, 12.0), gold (8.0, 2.0, 7.0), bronze (0.0, 0.0, 9.0), rank (3.0, 3.0, 5.0) | player : name (\"James Evans\", \"Paul Deacon (c)\", \"Matt Cook\"), apps (14.0, 13.0, 14.0), goals (\"90/106\", \"0\", \"90/106\"), club_id (2, 1, 3), player_id (15, 11, 15), position (\"Hooker\", \"Second Row\", \"Loose Forward\"), tries (2.0, 1.0, 3.0), points (36.0, 188.0, 36.0) | competition_result : club_id_2 (2, 4, 6), competition_id (10, 10, 5), score (\"10:3\", \"11:10\", \"25:2\"), club_id_1 (1, 3, 4)",
        "ambiguous_queries": [
            "select max(silver), min(silver) from club_rank",
            "select max_silver, min_silver from club_rank_silver"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"club_rank\": [\"silver\"]}, {\"club_rank_silver\": [\"max_silver\"]}], \"minimum\": [{\"club_rank\": [\"silver\"]}, {\"club_rank_silver\": [\"min_silver\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"club_rank\".\"silver\", \"minimum\" refers to the schema \"club_rank\".\"silver\"",
        "clear_ambiguity": "{\"maximum\": {\"club_rank\": [\"silver\"]}, \"minimum\": {\"club_rank\": [\"silver\"]}}",
        "gold_query": "select max(silver), min(silver) from club_rank"
    },
    {
        "index": 733,
        "db_id": "document_management",
        "ambig_type": "aggregate",
        "db_file": "aggregate/document_management/document_management.sqlite",
        "question": "What is the total access count of documents that are of the most common document type?",
        "schema_without_content": "images : image_name , image_id , image_url , image_alt_text  | document_functional_areas : document_code , functional_area_code  | document_structures : parent_document_structure_code , document_structure_description , document_structure_code  | functional_areas : parent_functional_area_code , functional_area_description , functional_area_code  | roles : role_description , role_code  | document_sections : section_title , document_code , section_sequence , section_id , section_code  | documents_access_count : avg_access_count , min_access_count , sum_access_count , max_access_count  | documents : document_code , document_name , document_type_code , access_count , document_structure_code  | users : password , role_code , user_id , user_login , user_name  | document_sections_images : image_id , section_id ",
        "schema_with_content": "images : image_name (\"data1\", \"top3\", \"top4\"), image_id (9, 1, 6), image_url (\"http://abernathyboehm.com/1.jpg\", \"http://sauer.com/1.jpg\", \"http://faycummerata.net/1.jpg\"), image_alt_text (\"Ashtyn\", \"Trycia\", \"Mohamed\") | document_functional_areas : document_code (\"706\", \"989\", \"958\"), functional_area_code (\"9\", \"1\", \"8\") | document_structures : parent_document_structure_code (\"1\", \"6\", \"8\"), document_structure_description (\"Header\", \"Bib\", \"Image section\"), document_structure_code (\"5\", \"9\", \"5\") | functional_areas : parent_functional_area_code (\"8\"), functional_area_description (\"Signature\", \"Acknowledgement\", \"Keep blank\"), functional_area_code (\"1\", \"8\", \"9\") | roles : role_description (\"Database Administrator\", \"Project Manager\"), role_code (\"DBA\", \"PROJ-MGR\") | document_sections : section_title (\"after\", \"before\"), document_code (\"217\", \"675\", \"217\"), section_sequence (8805, 6349, 6521), section_id (54, 89, 86), section_code (\"58\", \"93\", \"34\") | documents_access_count : avg_access_count (8208, 8208, 3289), min_access_count (8208, 2294, 1864), sum_access_count (3769, 6661, 2910), max_access_count (9948, 6661, 6661) | documents : document_code (\"217\", \"349\", \"217\"), document_name (\"Humanity: a fact\", \"Fall Sails\", \"Learning Database\"), document_type_code (\"Book\", \"CV\", \"Advertisement\"), access_count (7509, 9948, 3769), document_structure_code (\"5\", \"8\", \"9\") | users : password (\"95f489fc0921bbb3e7d661a550ae208b88d9b11a\", \"da383455a05a824606c54e99f671c4d6a2ddae26\", \"9bc25a040d5647ced5ec32e1a455e90fafc10bcb\"), role_code (\"PROJ-MGR\", \"DBA\"), user_id (13, 4, 9), user_login (\"0\", \"1\"), user_name (\"larson.vesta\", \"jacklyn.schmitt\", \"larson.vesta\") | document_sections_images : image_id (12, 6, 3), section_id (62, 27, 38)",
        "ambiguous_queries": [
            "select sum(access_count) from documents group by document_type_code order by count(*) desc limit 1",
            "select sum_access_count from documents_access_count"
        ],
        "gold_ambiguity": {
            "match": "{\"total access count\": [{\"documents\": [\"access_count\"]}, {\"documents_access_count\": [\"sum_access_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total access count\" refers to the schema \"documents\".\"access_count\"",
        "clear_ambiguity": "{\"total access count\": {\"documents\": [\"access_count\"]}}",
        "gold_query": "select sum(access_count) from documents group by document_type_code order by count(*) desc limit 1"
    },
    {
        "index": 734,
        "db_id": "inn_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/inn_1/inn_1.sqlite",
        "question": "What is the average and minimum price of the rooms for each different decor.",
        "schema_without_content": "rooms_baseprice : sum_baseprice , avg_baseprice , decor , max_baseprice , min_baseprice  | rooms : bedtype , maxoccupancy , decor , roomid , roomname , beds , baseprice  | reservations : checkin , code , checkout , room , lastname , adults , kids , firstname , rate ",
        "schema_with_content": "rooms_baseprice : sum_baseprice (125, 250, 100), avg_baseprice (100, 175, 175), decor (\"modern\", \"traditional\", \"rustic\"), max_baseprice (250, 175, 100), min_baseprice (75, 75, 125) | rooms : bedtype (\"King\", \"Queen\", \"Double\"), maxoccupancy (2, 4), decor (\"modern\", \"traditional\", \"rustic\"), roomid (\"MWC\", \"RTE\", \"RND\"), roomname (\"Riddle to exculpate\", \"Mendicant with cryptic\", \"Immutable before decorum\"), beds (1, 2), baseprice (75, 125, 125) | reservations : checkin (\"07-MAY-10\", \"06-APR-10\", \"20-DEC-10\"), code (45022, 48113, 77032), checkout (\"09-JUL-10\", \"16-OCT-10\", \"23-APR-10\"), room (\"RND\", \"FNA\", \"FNA\"), lastname (\"RISHA\", \"HARTFORD\", \"CASAGRANDA\"), adults (1, 2, 2), kids (3, 1, 2), firstname (\"HUNG\", \"ERICH\", \"NEWTON\"), rate (212.5, 115.0, 212.5)",
        "ambiguous_queries": [
            "select decor, avg(baseprice), min(baseprice) from rooms group by decor",
            "select decor, avg_baseprice, min_baseprice from rooms_baseprice"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"rooms\": [\"baseprice\"]}, {\"rooms_baseprice\": [\"avg_baseprice\"]}], \"decor\": [{\"rooms\": [\"decor\"]}, {\"rooms_baseprice\": [\"decor\"]}], \"minimum\": [{\"rooms\": [\"baseprice\"]}, {\"rooms_baseprice\": [\"min_baseprice\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"rooms_baseprice\".\"avg_baseprice\", \"decor\" refers to the schema \"rooms_baseprice\".\"decor\", \"minimum\" refers to the schema \"rooms_baseprice\".\"min_baseprice\"",
        "clear_ambiguity": "{\"average\": {\"rooms_baseprice\": [\"avg_baseprice\"]}, \"decor\": {\"rooms_baseprice\": [\"decor\"]}, \"minimum\": {\"rooms_baseprice\": [\"min_baseprice\"]}}",
        "gold_query": "select decor, avg_baseprice, min_baseprice from rooms_baseprice"
    },
    {
        "index": 735,
        "db_id": "flight_company",
        "ambig_type": "aggregate",
        "db_file": "aggregate/flight_company/flight_company.sqlite",
        "question": "What is the average velocity of the pilot named 'Thompson'?",
        "schema_without_content": "flight : pilot , altitude , id , company_id , airport_id , velocity , date , vehicle_flight_number  | airport : iata , icao , name , city , country , id  | flight_velocity : avg_velocity , max_velocity , min_velocity , sum_velocity  | operate_company : incorporated_in , id , group_equity_shareholding , name , type , principal_activities ",
        "schema_with_content": "flight : pilot (\"Thompson\", \"Peterson\"), altitude (0.0, 3650.0), id (9, 3, 9), company_id (4, 2, 1), airport_id (5, 1, 8), velocity (135.0, 240.0), date (\"August 16, 1963\", \"July 16, 1965\", \"October 8, 1965\"), vehicle_flight_number (\"M2-F1 #70\", \"M2-F1 #73\", \"M2-F1 #1\") | airport : iata (\"BRU\", \"BWI\", \"ANC\"), icao (\"LEBL\", \"LEBL\", \"EHAM\"), name (\"Ted Stevens Airport\", \"Ted Stevens Airport\", \"Baltimore-Washington Airport\"), city (\"Barcelona\", \"Billund\", \"Billund\"), country (\"Belgium\", \"Netherlands\", \"United States\"), id (7, 9, 1) | flight_velocity : avg_velocity (135.0, 240.0), max_velocity (135.0, 240.0), min_velocity (135.0, 240.0), sum_velocity (135.0, 240.0) | operate_company : incorporated_in (\"Hong Kong\", \"Vietnam\", \"China\"), id (9, 14, 8), group_equity_shareholding (49.0, 100.0, 100.0), name (\"Cathay Pacific Services Limited\", \"VN/CX Catering Services Limited\", \"CLS Catering Services Limited\"), type (\"Corporate\", \"Joint Venture\", \"Subsidiary\"), principal_activities (\"Cargo\", \"Catering services\", \"Catering services\")",
        "ambiguous_queries": [
            "select avg(velocity) from flight where pilot = 'Thompson'",
            "select avg_velocity from flight_velocity where pilot = 'Thompson'"
        ],
        "gold_ambiguity": {
            "match": "{\"named\": [{\"flight\": [\"pilot\"]}, {\"flight_velocity\": [\"pilot\"]}], \"average velocity\": [{\"flight\": [\"velocity\"]}, {\"flight_velocity\": [\"avg_velocity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"named\" refers to the schema \"flight\".\"pilot\", \"average velocity\" refers to the schema \"flight\".\"velocity\"",
        "clear_ambiguity": "{\"named\": {\"flight\": [\"pilot\"]}, \"average velocity\": {\"flight\": [\"velocity\"]}}",
        "gold_query": "select avg(velocity) from flight where pilot = 'Thompson'"
    },
    {
        "index": 736,
        "db_id": "phone_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/phone_1/phone_1.sqlite",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "schema_without_content": "chip_model : ram_mib , wifi , rom_mib , bluetooth , slots , model_name , launch_year  | screen_mode_used_kb : avg_used_kb , sum_used_kb , max_used_kb , min_used_kb  | screen_mode : pixels , char_cells , graphics_mode , hardware_colours , type , used_kb , map  | phone : hardware_model_name , date \", \"Approved \", \"Approved \", chip_model , accreditation_level , accreditation_type , screen_mode , company_name ",
        "schema_with_content": "chip_model : ram_mib (32.0, 64.0), wifi (\"No\", \"802.11b\"), rom_mib (48.0, 256.0, 64.0), bluetooth (\"Yes\", \"1.1\", \"Yes\"), slots (\"1CFII,1SD\", \"1SD\"), model_name (\"X50 Advanced\", \"X51v\", \"X50 Standard\"), launch_year (2002.0, 2003.0, 2003.0) | screen_mode_used_kb : avg_used_kb (10.0, 16.0, 20.0), sum_used_kb (8.0, 16.0, 20.0), max_used_kb (8.0, 20.0, 16.0), min_used_kb (8.0, 10.0, 8.0) | screen_mode : pixels (\"640 Ã 200\", \"160 Ã 256\", \"320 Ã 256\"), char_cells (\"80 Ã 25\", \"80 Ã 25\", \"80 Ã 25\"), graphics_mode (2.0, 2.0, 0.0), hardware_colours (2.0, 4.0, 8.0), type (\"Graphics\", \"Text\"), used_kb (8.0, 20.0, 20.0), map (\"6000â7FFF\", \"6000â7FFF\", \"6000â7FFF\") | phone : hardware_model_name (\"LG-P760\", \"Z520e\", \"GT-I9300\"), date (\"Approved (awarded 19.11.12)\", \"Approved (valid until 03.05.13)\", \"Approved (awarded 23.10.12)\"), chip_model (\"X50 Advanced\", \"X50 Standard\", \"X50 Standard\"), accreditation_level (\"joyn Hot Fixes\", \"joyn\"), accreditation_type (\"Full\", \"Provisional\"), screen_mode (\"1\", \"2\", \"4\"), company_name (\"Samsung Electronics Co Ltd\", \"HTC Corporation\", \"LG Electronics\")",
        "ambiguous_queries": [
            "select max(used_kb), min(used_kb), avg(used_kb) from screen_mode",
            "select max_used_kb, min_used_kb, avg_used_kb from screen_mode_used_kb"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"screen_mode\": [\"used_kb\"]}, {\"screen_mode_used_kb\": [\"max_used_kb\"]}], \"average\": [{\"screen_mode\": [\"used_kb\"]}, {\"screen_mode_used_kb\": [\"avg_used_kb\"]}], \"minimum\": [{\"screen_mode\": [\"used_kb\"]}, {\"screen_mode_used_kb\": [\"min_used_kb\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"screen_mode\".\"used_kb\", \"average\" refers to the schema \"screen_mode\".\"used_kb\", \"minimum\" refers to the schema \"screen_mode\".\"used_kb\"",
        "clear_ambiguity": "{\"maximum\": {\"screen_mode\": [\"used_kb\"]}, \"average\": {\"screen_mode\": [\"used_kb\"]}, \"minimum\": {\"screen_mode\": [\"used_kb\"]}}",
        "gold_query": "select max(used_kb), min(used_kb), avg(used_kb) from screen_mode"
    },
    {
        "index": 737,
        "db_id": "tvshow",
        "ambig_type": "aggregate",
        "db_file": "aggregate/tvshow/tvshow.sqlite",
        "question": "What is the maximum and minimum share for the TV series?",
        "schema_without_content": "tv_channel : language , package_option , pay_per_view_ppv , pixel_aspect_ratio_par , id , hight_definition_tv , series_name , country , content  | tv_series_share : sum_share , max_share , avg_share , min_share  | cartoon : channel , id , production_code , title , written_by , original_air_date , directed_by  | tv_series : rating , 18_49_rating_share , air_date , channel , episode , share , weekly_rank , viewers_m , id ",
        "schema_with_content": "tv_channel : language (\"Italian\", \"English\"), package_option (\"Option\", \"Option\", \"Sky Famiglia + Sky HD\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"728\", \"709\", \"713\"), hight_definition_tv (\"no\", \"yes\"), series_name (\"MTV Rocks\", \"MTV Rocks\", \"MTV Hits\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\") | tv_series_share : sum_share (6.0, 9.0, 9.0), max_share (9.0, 7.0, 6.0), avg_share (7.0, 5.0, 7.0), min_share (9.0, 9.0, 9.0) | cartoon : channel (\"728\", \"704\", \"708\"), id (3.0, 5.0, 8.0), production_code (106.0, 111.0, 103.0), title (\"Enter the Outsiders!\", \"Enter the Outsiders!\", \"The Rise of the Blue Beetle!\"), written_by (\"Joseph Kuhr\", \"Michael Jelenic\", \"J. M. DeMatteis\"), original_air_date (\"January30,2009\", \"January2,2009\", \"February27,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\") | tv_series : rating (\"4.0\", \"3.8\", \"4.0\"), 18_49_rating_share (\"3.5/9\", \"1.5/4\", \"2.7/7\"), air_date (\"September 24, 2007\", \"December 10, 2007\", \"October 8, 2007\"), channel (\"717\", \"701\", \"719\"), episode (\"Emily\", \"A Love of a Lifetime\", \"Winterland\"), share (9.0, 5.0, 5.0), weekly_rank (70.0, 68.0, 65.0), viewers_m (\"5.13\", \"5.75\", \"6.05\"), id (12.0, 7.0, 4.0)",
        "ambiguous_queries": [
            "select max(share), min(share) from tv_series",
            "select max_share, min_share from tv_series_share"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"tv_series\": [\"share\"]}, {\"tv_series_share\": [\"max_share\"]}], \"minimum\": [{\"tv_series\": [\"share\"]}, {\"tv_series_share\": [\"min_share\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"tv_series\".\"share\", \"minimum\" refers to the schema \"tv_series\".\"share\"",
        "clear_ambiguity": "{\"maximum\": {\"tv_series\": [\"share\"]}, \"minimum\": {\"tv_series\": [\"share\"]}}",
        "gold_query": "select max(share), min(share) from tv_series"
    },
    {
        "index": 738,
        "db_id": "film_rank",
        "ambig_type": "aggregate",
        "db_file": "aggregate/film_rank/film_rank.sqlite",
        "question": "What is the average ticket sales gross in dollars of films?",
        "schema_without_content": "film_market_estimation : film_id , low_estimate , market_id , high_estimate , type , estimation_id , year  | market : country , number_cities , market_id  | film : director , title , gross_in_dollar , film_id , studio  | film_gross_in_dollar : max_gross_in_dollar , sum_gross_in_dollar , avg_gross_in_dollar , min_gross_in_dollar ",
        "schema_with_content": "film_market_estimation : film_id (1, 4, 1), low_estimate (8000.0, 16.0, 3000.0), market_id (1, 2, 3), high_estimate (16.0, 53.0, 960.0), type (\"Mass suicide murder\", \"Mass suicide\", \"Mass human sacrifice\"), estimation_id (2, 1, 8), year (1973, 1944, 1487) | market : country (\"France\", \"China\", \"Russia\"), number_cities (700, 540, 212), market_id (3, 1, 4) | film : director (\"Sidney Lumet\", \"Steven Spielberg\", \"Richard Attenborough\"), title (\"First Blood\", \"Porky's\", \"An Officer and a Gentleman\"), gross_in_dollar (177200000, 435110554, 47212904), film_id (10, 11, 13), studio (\"20th Century Fox\", \"Universal / RKO\", \"Universal / RKO\") | film_gross_in_dollar : max_gross_in_dollar (53977250, 177200000, 47212904), sum_gross_in_dollar (47212904, 76606280, 79912963), avg_gross_in_dollar (129795554, 109492484, 435110554), min_gross_in_dollar (69701637, 435110554, 125049125)",
        "ambiguous_queries": [
            "select avg(gross_in_dollar) from film",
            "select avg_gross_in_dollar from film_gross_in_dollar"
        ],
        "gold_ambiguity": {
            "match": "{\"average ticket sales\": [{\"film\": [\"gross_in_dollar\"]}, {\"film_gross_in_dollar\": [\"avg_gross_in_dollar\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average ticket sales\" refers to the schema \"film\".\"gross_in_dollar\"",
        "clear_ambiguity": "{\"average ticket sales\": {\"film\": [\"gross_in_dollar\"]}}",
        "gold_query": "select avg(gross_in_dollar) from film"
    },
    {
        "index": 739,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?",
        "schema_without_content": "files_song_duration_resolution : min_duration , avg_duration , sum_duration , max_resolution , min_resolution , avg_resolution , sum_resolution , languages , max_duration  | files : f_id , artist_name , file_size , duration , formats  | song : country , resolution , f_id , releasedate , languages , artist_name , song_name , rating , genre_is  | genre : most_popular_in , rating , g_name  | artist : country , preferred_genre , artist_name , gender ",
        "schema_with_content": "files_song_duration_resolution : min_duration (\"3:45\", \"4:12\", \"5:23\"), avg_duration (\"4:12\", \"4:12\", \"5:23\"), sum_duration (\"4:30\", \"4:34\", \"5:23\"), max_resolution (320, 720, 1080), min_resolution (720, 1080, 720), avg_resolution (720, 320, 320), sum_resolution (512, 320, 1080), languages (\"bangla\", \"english\"), max_duration (\"4:34\", \"4:30\", \"4:34\") | files : f_id (5, 4, 5), artist_name (\"Topu\", \"Enrique\", \"Farida\"), file_size (\"5.10 MB\", \"4.10 MB\", \"4.12 MB\"), duration (\"4:34\", \"4:34\", \"4:30\"), formats (\"mp4\", \"mp3\") | song : country (\"USA\", \"India\", \"India\"), resolution (720, 1080, 320), f_id (1, 2, 6), releasedate (\"7-APR-2001\", \"27-MAR-2004\", \"27-MAR-2004\"), languages (\"bangla\", \"english\"), artist_name (\"Prity\", \"Prity\", \"Topu\"), song_name (\"Tumi robe nirobe\", \"Shukno patar nupur pae\", \"Just beat it\"), rating (10, 7, 10), genre_is (\"blues\", \"modern\", \"blues\") | genre : most_popular_in (\"Sylhet,Chittagong,Kustia\", \"Canada\", \"Canada\"), rating (\"8\", \"7\", \"9\"), g_name (\"tagore\", \"blues\", \"blues\") | artist : country (\"UK\", \"Bangladesh\", \"India\"), preferred_genre (\"nazrul\", \"tagore\", \"blues\"), artist_name (\"Michel\", \"Prity\", \"Enrique\"), gender (\"Male\", \"Female\")",
        "ambiguous_queries": [
            "select max(t1.duration), max(t2.resolution), t2.languages from files as t1 join song as t2 on t1.f_id = t2.f_id group by t2.languages order by t2.languages",
            "select max_duration, max_resolution, languages from files_song_duration_resolution"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum duration\": [{\"files\": [\"duration\"]}, {\"files_song_duration_resolution\": [\"max_duration\"]}], \"language\": [{\"files_song_duration_resolution\": [\"languages\"]}, {\"song\": [\"languages\"]}], \"resolution\": [{\"files_song_duration_resolution\": [\"max_resolution\"]}, {\"song\": [\"resolution\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum duration\" refers to the schema \"files_song_duration_resolution\".\"max_duration\", \"language\" refers to the schema \"files_song_duration_resolution\".\"languages\", \"resolution\" refers to the schema \"files_song_duration_resolution\".\"max_resolution\"",
        "clear_ambiguity": "{\"maximum duration\": {\"files_song_duration_resolution\": [\"max_duration\"]}, \"language\": {\"files_song_duration_resolution\": [\"languages\"]}, \"resolution\": {\"files_song_duration_resolution\": [\"max_resolution\"]}}",
        "gold_query": "select max_duration, max_resolution, languages from files_song_duration_resolution"
    },
    {
        "index": 740,
        "db_id": "store_product",
        "ambig_type": "aggregate",
        "db_file": "aggregate/store_product/store_product.sqlite",
        "question": "What is the average pages per minute color?",
        "schema_without_content": "store_product : store_id , product_id  | store : store_id , type , ranking , number_of_product_category , area_size , store_name  | district : city_population , district_name , city_area , district_id , headquartered_city  | product : interface , dpi , product_id , pages_per_minute_color , product , max_page_size , dimensions  | product_pages_per_minute_color : avg_pages_per_minute_color , max_pages_per_minute_color , sum_pages_per_minute_color , min_pages_per_minute_color  | store_district : district_id , store_id ",
        "schema_with_content": "store_product : store_id (3, 3, 1), product_id (4, 4, 3) | store : store_id (4, 3, 2), type (\"City Mall\", \"Village Store\"), ranking (2, 9, 1), number_of_product_category (1170.0, 1170.0, 990.0), area_size (7.23, 28.74, 179.84), store_name (\"Neguac\", \"Neguac\", \"Rogersville\") | district : city_population (165936.0, 219254.0, 328512.0), district_name (\"Gujranwala District\", \"Chiniot District\", \"Gujranwala District\"), city_area (20.0, 25.0, 10.0), district_id (13, 15, 1), headquartered_city (\"Gujranwala City\", \"Bhakkar City\", \"Bahawalnagar City\") | product : interface (\"USB 2.0\"), dpi (600.0), product_id (2, 2, 3), pages_per_minute_color (28.0, 10.0, 10.0), product (\"Canon DR-2080C\", \"Fujitsu fi-6130 A4 Series Scanner\", \"Fujitsu fi-6130 A4 Series Scanner\"), max_page_size (\"A4\", \"216mm x 356mm\", \"216mm x 355mm\"), dimensions (\"303 x 94 x 60\", \"298 x 209 x 99\", \"289 x 51 x 38\") | product_pages_per_minute_color : avg_pages_per_minute_color (30.0, 30.0, 28.0), max_pages_per_minute_color (10.0, 30.0, 10.0), sum_pages_per_minute_color (3.0, 10.0, 4.0), min_pages_per_minute_color (30.0, 28.0, 36.0) | store_district : district_id (3, 4, 11), store_id (5, 2, 5)",
        "ambiguous_queries": [
            "select avg(pages_per_minute_color) from product",
            "select avg_pages_per_minute_color from product_pages_per_minute_color"
        ],
        "gold_ambiguity": {
            "match": "{\"average pages\": [{\"product\": [\"pages_per_minute_color\"]}, {\"product_pages_per_minute_color\": [\"avg_pages_per_minute_color\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average pages\" refers to the schema \"product_pages_per_minute_color\".\"avg_pages_per_minute_color\"",
        "clear_ambiguity": "{\"average pages\": {\"product_pages_per_minute_color\": [\"avg_pages_per_minute_color\"]}}",
        "gold_query": "select avg_pages_per_minute_color from product_pages_per_minute_color"
    },
    {
        "index": 741,
        "db_id": "perpetrator",
        "ambig_type": "aggregate",
        "db_file": "aggregate/perpetrator/perpetrator.sqlite",
        "question": "In which year did the most recent crime happen?",
        "schema_without_content": "people : weight , home town , people_id , name , height  | perpetrator_year : avg_year , sum_year , max_year , min_year  | perpetrator : people_id , perpetrator_id , date , injured , country , year , killed , location ",
        "schema_with_content": "people : weight (160.0, 170.0, 185.0), home town (\"Austin, TX\", \"Placentia, CA\", \"Indianapolis, IN\"), people_id (7, 11, 9), name (\"Tyrone Brayan\", \"Ovie Dotson\", \"Ovie Dotson\"), height (6.1, 6.4, 6.6) | perpetrator_year : avg_year (1938.0, 1995.0, 1994.0), sum_year (1982.0, 1994.0, 1938.0), max_year (1982.0, 1994.0, 1982.0), min_year (1982.0, 1950.0, 1994.0) | perpetrator : people_id (3, 8, 6), perpetrator_id (2, 2, 3), date (\"04.00 April\", \"11.18 Nov. 18\", \"04.26 April 26/27\"), injured (16, 80, 16), country (\"India\", \"Japan\", \"India\"), year (1994.0, 1995.0, 1938.0), killed (22, 56, 56), location (\"Kaio\", \"Kaio\", \"Nainital\")",
        "ambiguous_queries": [
            "select max(year) from perpetrator",
            "select max_year from perpetrator_year"
        ],
        "gold_ambiguity": {
            "match": "{\"year\": [{\"perpetrator\": [\"year\"]}, {\"perpetrator_year\": [\"max_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"year\" refers to the schema \"perpetrator_year\".\"max_year\"",
        "clear_ambiguity": "{\"year\": {\"perpetrator_year\": [\"max_year\"]}}",
        "gold_query": "select max_year from perpetrator_year"
    },
    {
        "index": 742,
        "db_id": "college_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_1/college_1.sqlite",
        "question": "What is the highest, lowest, and average student GPA for every department?",
        "schema_without_content": "employee : emp_dob , emp_fname , emp_jobcode , emp_initial , emp_num , emp_hiredate , emp_lname  | class : crs_code , class_time , prof_num , class_section , class_room , class_code  | student : stu_class , stu_phone , stu_gpa , stu_hrs , stu_transfer , stu_dob , stu_num , dept_code , stu_fname , prof_num , stu_init , stu_lname  | course : crs_code , dept_code , crs_description , crs_credit  | professor : prof_extension , dept_code , prof_office , prof_high_degree , emp_num  | enroll : stu_num , enroll_grade , class_code  | student_stu_gpa : min_stu_gpa , max_stu_gpa , dept_code , avg_stu_gpa , sum_stu_gpa  | department : dept_extension , dept_code , dept_address , school_code , emp_num , dept_name ",
        "schema_with_content": "employee : emp_dob (\"1973-12-2\", \"1953-7-3\", \"1941-3-4\"), emp_fname (\"Gerald\", \"Hermine\", \"Doreen\"), emp_jobcode (\"TECH\", \"PROF\", \"TECH\"), emp_initial (\"B\", \"S\", \"N\"), emp_num (435, 333, 333), emp_hiredate (\"1991-4-23\", \"1990-7-23\", \"1984-8-1\"), emp_lname (\"Ardano\", \"Yukon\", \"Washington\") | class : crs_code (\"ACCT-212\", \"ACCT-212\", \"QM-362\"), class_time (\"TTh 1:00-2:15 p.m.\", \"MWF 10:00-10:50 a.m.\", \"MWF 8:00-8:50 a.m.\"), prof_num (342, 114, 228), class_section (\"1\", \"2\", \"3\"), class_room (\"BUS252\", \"BUS200\", \"KLR211\"), class_code (\"10015\", \"10012\", \"10016\") | student : stu_class (\"Sr\", \"So\", \"Jr\"), stu_phone (\"2231\", \"2134\", \"2267\"), stu_gpa (2.92, 2.26, 2.92), stu_hrs (81, 36, 81), stu_transfer (0, 1), stu_dob (\"1986-11-30\", \"1981-11-15\", \"1975-2-12\"), stu_num (324258, 321452, 324257), dept_code (\"BIOL\", \"EDU\", \"BIOL\"), stu_fname (\"William\", \"Raphael\", \"Walter\"), prof_num (311, 228, 222), stu_init (\"B\", \"P\", \"T\"), stu_lname (\"Brewer\", \"Brewer\", \"Smithson\") | course : crs_code (\"ACCT-212\", \"ACCT-211\", \"ACCT-212\"), dept_code (\"ACCT\", \"CIS\"), crs_description (\"Statistical Applications\", \"Accounting II\", \"Intro. to Microcomputing\"), crs_credit (3.0, 4.0) | professor : prof_extension (\"4440\", \"4436\", \"5514\"), dept_code (\"MATH\", \"ACCT\", \"ENG\"), prof_office (\"AAK 160\", \"AAK 230\", \"KLR 229D\"), prof_high_degree (\"MA\", \"MBA\", \"MA\"), emp_num (155, 209, 301) | enroll : stu_num (321452, 324257), enroll_grade (\"C\", \"B\", \"A\"), class_code (\"10014\", \"10018\", \"10021\") | student_stu_gpa : min_stu_gpa (3.27, 2.11, 2.11), max_stu_gpa (2.26, 3.09, 2.84), dept_code (\"BIOL\", \"ENGL\", \"ENGL\"), avg_stu_gpa (2.11, 2.84, 2.84), sum_stu_gpa (2.84, 3.09, 3.09) | department : dept_extension (\"2278\", \"4234\", \"1867\"), dept_code (\"ACCT\", \"ENG\", \"ECON/FIN\"), dept_address (\"KLR 211, Box 52\", \"DRE 156, Box 284\", \"KLR 284, Box 63\"), school_code (\"BUS\", \"A&SCI\"), emp_num (209, 103, 103), dept_name (\"Biology\", \"Mathematics\", \"Marketing/Management\")",
        "ambiguous_queries": [
            "select max(stu_gpa), avg(stu_gpa), min(stu_gpa), dept_code from student group by dept_code",
            "select max_stu_gpa, avg_stu_gpa, min_stu_gpa, dept_code from student_stu_gpa"
        ],
        "gold_ambiguity": {
            "match": "{\"highest\": [{\"student\": [\"stu_gpa\"]}, {\"student_stu_gpa\": [\"max_stu_gpa\"]}], \"lowest\": [{\"student\": [\"stu_gpa\"]}, {\"student_stu_gpa\": [\"avg_stu_gpa\"]}], \"average\": [{\"student\": [\"stu_gpa\"]}, {\"student_stu_gpa\": [\"min_stu_gpa\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"highest\" refers to the schema \"student_stu_gpa\".\"max_stu_gpa\", \"lowest\" refers to the schema \"student_stu_gpa\".\"avg_stu_gpa\", \"average\" refers to the schema \"student_stu_gpa\".\"min_stu_gpa\"",
        "clear_ambiguity": "{\"highest\": {\"student_stu_gpa\": [\"max_stu_gpa\"]}, \"lowest\": {\"student_stu_gpa\": [\"avg_stu_gpa\"]}, \"average\": {\"student_stu_gpa\": [\"min_stu_gpa\"]}}",
        "gold_query": "select max_stu_gpa, avg_stu_gpa, min_stu_gpa, dept_code from student_stu_gpa"
    },
    {
        "index": 743,
        "db_id": "school_finance",
        "ambig_type": "aggregate",
        "db_file": "aggregate/school_finance/school_finance.sqlite",
        "question": "Show the average, maximum, minimum enrollment of all schools.",
        "schema_without_content": "endowment : donator_name , amount , endowment_id , school_id  | school : mascot , ihsaa_football_class , county , ihsaa_class , school_name , school_id , location , enrollment  | school_enrollment : sum_enrollment , min_enrollment , max_enrollment , avg_enrollment  | budget : total_budget_percent_budgeted , year , invested , budget_invested_percent , total_budget_percent_invested , budgeted , school_id ",
        "schema_with_content": "endowment : donator_name (\"Com. Dom. En Estados Unidos\", \"San CristÃ³bal\", \"San JosÃ© de Ocoa\"), amount (9.73, 8.82, 8.85), endowment_id (8, 4, 8), school_id (1, 2, 2) | school : mascot (\"Trojans\", \"Cougars\", \"Cavaliers\"), ihsaa_football_class (\"AAAA\", \"AAA\", \"AA\"), county (\"71 St. Joseph\", \"71 St. Joseph\", \"46 LaPorte 71 St. Joseph\"), ihsaa_class (\"AA\", \"A\", \"AAA\"), school_name (\"Culver Community\", \"Jimtown\", \"Jimtown\"), school_id (\"7\", \"4\", \"1\"), location (\"Bremen\", \"Knox\", \"Lakeville\"), enrollment (601, 605, 620) | school_enrollment : sum_enrollment (287, 495, 620), min_enrollment (601, 620, 605), max_enrollment (620, 852, 379), avg_enrollment (316, 316, 601) | budget : total_budget_percent_budgeted (2.0, 2.4, 1.3), year (2006, 1999, 2000), invested (95542, 95542, 146102), budget_invested_percent (\"71.3\", \"42.9\", \"228.8\"), total_budget_percent_invested (2.0, 2.2, 2.7), budgeted (74849, 61283, 74849), school_id (1, 3, 1)",
        "ambiguous_queries": [
            "select avg(enrollment), max(enrollment), min(enrollment) from school",
            "select avg_enrollment, max_enrollment, min_enrollment from school_enrollment"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"school\": [\"enrollment\"]}, {\"school_enrollment\": [\"avg_enrollment\"]}], \"maximum\": [{\"school\": [\"enrollment\"]}, {\"school_enrollment\": [\"max_enrollment\"]}], \"minimum\": [{\"school\": [\"enrollment\"]}, {\"school_enrollment\": [\"min_enrollment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"school_enrollment\".\"avg_enrollment\", \"maximum\" refers to the schema \"school_enrollment\".\"max_enrollment\", \"minimum\" refers to the schema \"school_enrollment\".\"min_enrollment\"",
        "clear_ambiguity": "{\"average\": {\"school_enrollment\": [\"avg_enrollment\"]}, \"maximum\": {\"school_enrollment\": [\"max_enrollment\"]}, \"minimum\": {\"school_enrollment\": [\"min_enrollment\"]}}",
        "gold_query": "select avg_enrollment, max_enrollment, min_enrollment from school_enrollment"
    },
    {
        "index": 744,
        "db_id": "pets_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/pets_1/pets_1.sqlite",
        "question": "Find the average weight for each pet type.",
        "schema_without_content": "has_pet : stuid , petid  | pets_weight : min_weight , sum_weight , max_weight , avg_weight , pettype  | pets : pettype , petid , weight , pet_age  | student : lname , major , fname , stuid , age , advisor , sex , city_code ",
        "schema_with_content": "has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets_weight : min_weight (12.0, 13.4, 9.3), sum_weight (12.0, 13.4, 9.3), max_weight (12.0, 13.4, 9.3), avg_weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\") | pets : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1) | student : lname (\"Brody\", \"Cheng\", \"Adams\"), major (520, 100, 520), fname (\"Linda\", \"Charles\", \"Derek\"), stuid (1033, 1006, 1001), age (18, 20, 21), advisor (8741, 8918, 8772), sex (\"F\", \"M\"), city_code (\"PEK\", \"WAS\", \"ROC\")",
        "ambiguous_queries": [
            "select avg(weight), pettype from pets group by pettype",
            "select avg_weight, pettype from pets_weight"
        ],
        "gold_ambiguity": {
            "match": "{\"pet\": [{\"pets\": [\"pettype\"]}, {\"pets_weight\": [\"pettype\"]}], \"average weight\": [{\"pets\": [\"weight\"]}, {\"pets_weight\": [\"avg_weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"pet\" refers to the schema \"pets\".\"pettype\", \"average weight\" refers to the schema \"pets\".\"weight\"",
        "clear_ambiguity": "{\"pet\": {\"pets\": [\"pettype\"]}, \"average weight\": {\"pets\": [\"weight\"]}}",
        "gold_query": "select avg(weight), pettype from pets group by pettype"
    },
    {
        "index": 745,
        "db_id": "school_player",
        "ambig_type": "aggregate",
        "db_file": "aggregate/school_player/school_player.sqlite",
        "question": "What is the average enrollment of schools?",
        "schema_without_content": "school_enrollment : min_enrollment , max_enrollment , avg_enrollment , sum_enrollment  | school : location , denomination , enrollment , school_id , day_or_boarding , founded , school_colors , school , boys_or_girls , year_entered_competition  | player : player_id , team , school_id , age , position , player  | school_performance : school_year , school_id , class_aa , class_a  | school_details : colors , class , division , league , nickname , school_id ",
        "schema_with_content": "school_enrollment : min_enrollment (1200.0, 2300.0, 1000.0), max_enrollment (1200.0, 2200.0, 1000.0), avg_enrollment (1200.0, 1000.0, 1000.0), sum_enrollment (1850.0, 1850.0, 2200.0) | school : location (\"Summer Hill\", \"Waverley\", \"Waverley\"), denomination (\"Catholic\", \"Anglican\", \"Uniting Church\"), enrollment (2200.0, 1430.0, 1000.0), school_id (5, 4, 6), day_or_boarding (\"Day\", \"Day & Boarding\"), founded (1879.0, 1913.0, 1879.0), school_colors (\"Red & Blue\", \"Red, White & Blue\", \"Red & Blue\"), school (\"Waverley College\", \"Cranbrook School\", \"Trinity Grammar School\"), boys_or_girls (\"Boys\", \"Boys only to Yr 9 Co-ed Year 10 to 12\"), year_entered_competition (1929.0, 1944.0) | player : player_id (8, 6, 22), team (\"San Francisco Giants\", \"Seattle Mariners\", \"Chicago White Sox\"), school_id (5, 1, 1), age (15, 17, 17), position (\"Shortstop\", \"Catcher\", \"Second baseman\"), player (\"Yonder Alonso\", \"Ike Davis\", \"Yonder Alonso\") | school_performance : school_year (\"1996-97\", \"2006-07\", \"2008-09\"), school_id (3, 3, 2), class_aa (\"Clarendon\", \"Henrietta\", \"Bishop\"), class_a (\"Happy\", \"Santa Anna\", \"Santa Anna\") | school_details : colors (\"Blue and Yellow\", \"Garnet and White\", \"Garnet and White\"), class (\"Flight A\", \"Flight B\", \"Fight A\"), division (\"Division 1\", \"Division 3\", \"Division 2\"), league (\"DSHA\"), nickname (\"Auks\", \"Auks\", \"Auks\"), school_id (3, 1, 5)",
        "ambiguous_queries": [
            "select avg(enrollment) from school",
            "select avg_enrollment from school_enrollment"
        ],
        "gold_ambiguity": {
            "match": "{\"average enrollment\": [{\"school\": [\"enrollment\"]}, {\"school_enrollment\": [\"avg_enrollment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average enrollment\" refers to the schema \"school\".\"enrollment\"",
        "clear_ambiguity": "{\"average enrollment\": {\"school\": [\"enrollment\"]}}",
        "gold_query": "select avg(enrollment) from school"
    },
    {
        "index": 746,
        "db_id": "cinema",
        "ambig_type": "aggregate",
        "db_file": "aggregate/cinema/cinema.sqlite",
        "question": "Give me the title and highest price for each film.",
        "schema_without_content": "schedule_film_price : title , min_price , avg_price , sum_price , max_price  | film : film_id , directed_by , original_air_date , production_code , number_in_season , title , rank_in_series  | cinema : cinema_id , name , location , openning_year , capacity  | schedule : date , film_id , price , cinema_id , show_times_per_day ",
        "schema_with_content": "schedule_film_price : title (\"The Case: Off the Record\", \"The Case of the Piggy Banker\", \"The Case: Off the Record\"), min_price (12.99, 15.99, 15.99), avg_price (15.99, 15.99, 12.99), sum_price (8.99, 8.99, 9.99), max_price (15.99, 9.99, 8.99) | film : film_id (4, 5, 3), directed_by (\"Bill Schreiner\", \"Jesus Salvador TreviÃ±o\"), original_air_date (\"October 12â16, 1992\", \"September 21â25, 1992\", \"September 21â25, 1992\"), production_code (\"50021â50025\", \"50011â50015\", \"50241â50245\"), number_in_season (4, 2, 3), title (\"The Case of the Smart Dummy\", \"The Case of the Mystery Weekend\", \"The Case of the Bermuda Triangle\"), rank_in_series (27, 28, 30) | cinema : cinema_id (4, 4, 3), name (\"Grouse Lodge\", \"Gortahile\", \"Glenough\"), location (\"County Tipperary\", \"County Cork\", \"County Dublin\"), openning_year (2015, 2013, 2012), capacity (203, 908, 325) | schedule : date (\"2 Aug\", \"21 May\", \"11 July\"), film_id (3, 3, 2), price (12.99, 12.99, 9.99), cinema_id (6, 1, 6), show_times_per_day (5, 2, 5)",
        "ambiguous_queries": [
            "select t2.title, max(t1.price) from schedule as t1 join film as t2 on t1.film_id = t2.film_id group by t1.film_id",
            "select title, max_price from schedule_film_price"
        ],
        "gold_ambiguity": {
            "match": "{\"highest\": [{\"schedule\": [\"price\"]}, {\"schedule_film_price\": [\"max_price\"]}], \"title\": [{\"film\": [\"title\"]}, {\"schedule_film_price\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"highest\" refers to the schema \"schedule_film_price\".\"max_price\", \"title\" refers to the schema \"schedule_film_price\".\"title\"",
        "clear_ambiguity": "{\"highest\": {\"schedule_film_price\": [\"max_price\"]}, \"title\": {\"schedule_film_price\": [\"title\"]}}",
        "gold_query": "select title, max_price from schedule_film_price"
    },
    {
        "index": 747,
        "db_id": "game_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/game_1/game_1.sqlite",
        "question": "What is the total number of games played?",
        "schema_without_content": "video_games : gameid , gname , gtype  | sportsinfo_gamesplayed : max_gamesplayed , min_gamesplayed , avg_gamesplayed , sum_gamesplayed  | plays_games : gameid , hours_played , stuid  | sportsinfo : gamesplayed , sportname , hoursperweek , onscholarship , stuid  | student : lname , city_code , age , stuid , sex , advisor , fname , major ",
        "schema_with_content": "video_games : gameid (5, 4, 1), gname (\"The Vanishing of Eric Calder\", \"Europe is the Universe\", \"Call of Destiny\"), gtype (\"Grand strategy\", \"Collectible card game\", \"Walking Simulator\") | sportsinfo_gamesplayed : max_gamesplayed (18, 18, 94), min_gamesplayed (56, 56, 37), avg_gamesplayed (56, 41, 18), sum_gamesplayed (56, 45, 16) | plays_games : gameid (3, 1, 1), hours_played (1000, 1000, 10), stuid (1032, 1032, 1001) | sportsinfo : gamesplayed (37, 25, 31), sportname (\"Swimming\", \"Curling\", \"Basketball\"), hoursperweek (7, 1, 45), onscholarship (\"N\", \"Y\"), stuid (1035, 1015, 1019) | student : lname (\"Kumar\", \"Andreou\", \"Woods\"), city_code (\"YYZ\", \"DAL\", \"WAS\"), age (22, 22, 18), stuid (1016, 1005, 1029), sex (\"F\", \"M\"), advisor (5718, 1121, 8918), fname (\"Stacy\", \"Bruce\", \"Jun\"), major (600, 50, 100)",
        "ambiguous_queries": [
            "select sum(gamesplayed) from sportsinfo",
            "select sum_gamesplayed from sportsinfo_gamesplayed"
        ],
        "gold_ambiguity": {
            "match": "{\"total number of games played\": [{\"sportsinfo\": [\"gamesplayed\"]}, {\"sportsinfo_gamesplayed\": [\"sum_gamesplayed\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total number of games played\" refers to the schema \"sportsinfo_gamesplayed\".\"sum_gamesplayed\"",
        "clear_ambiguity": "{\"total number of games played\": {\"sportsinfo_gamesplayed\": [\"sum_gamesplayed\"]}}",
        "gold_query": "select sum_gamesplayed from sportsinfo_gamesplayed"
    },
    {
        "index": 748,
        "db_id": "small_bank_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/small_bank_1/small_bank_1.sqlite",
        "question": "Find the average checking balance.",
        "schema_without_content": "accounts : name , custid  | checking_balance : sum_balance , min_balance , max_balance , avg_balance  | savings : custid , balance  | checking : balance , custid ",
        "schema_with_content": "accounts : name (\"Weeks\", \"Granger\", \"Granger\"), custid (5, 4, 4) | checking_balance : sum_balance (7000.0, 7000.0, 7000.0), min_balance (7000.0, 10000.0, 3000.0), max_balance (10000.0, 7000.0, 7000.0), avg_balance (2000.0, 3000.0, 7.0) | savings : custid (5, 6, 1), balance (80000.0, 200000.0, 60.0) | checking : balance (7.0, 10000.0, 7000.0), custid (7, 7, 1)",
        "ambiguous_queries": [
            "select avg(balance) from checking",
            "select avg_balance from checking_balance"
        ],
        "gold_ambiguity": {
            "match": "{\"average checking balance\": [{\"checking\": [\"balance\"]}, {\"checking_balance\": [\"avg_balance\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average checking balance\" refers to the schema \"checking\".\"balance\"",
        "clear_ambiguity": "{\"average checking balance\": {\"checking\": [\"balance\"]}}",
        "gold_query": "select avg(balance) from checking"
    },
    {
        "index": 749,
        "db_id": "company_employee",
        "ambig_type": "aggregate",
        "db_file": "aggregate/company_employee/company_employee.sqlite",
        "question": "What is the maximum and minimum market value of companies?",
        "schema_without_content": "company : market_value_in_billion , sales_in_billion , name , assets_in_billion , company_id , headquarters , profits_in_billion , industry  | employment : company_id , people_id , year_working  | company_market_value_in_billion : sum_market_value_in_billion , avg_market_value_in_billion , min_market_value_in_billion , max_market_value_in_billion  | people : age , name , nationality , graduation_college , people_id ",
        "schema_with_content": "company : market_value_in_billion (147.4, 202.2, 202.2), sales_in_billion (147.3, 62.4, 117.6), name (\"Petrobras\", \"JPMorgan Chase\", \"Industrial and Commercial Bank of China\"), assets_in_billion (2550.0, 1563.9, 2550.0), company_id (15.0, 18.0, 1.0), headquarters (\"China\", \"UK\", \"Brazil\"), profits_in_billion (19.0, 26.9, 15.7), industry (\"Automotive\", \"Oil and gas\", \"Conglomerate\") | employment : company_id (11, 7, 7), people_id (2, 1, 2), year_working (2, 3, 3) | company_market_value_in_billion : sum_market_value_in_billion (227.6, 178.7, 407.4), avg_market_value_in_billion (202.2, 218.0, 201.9), min_market_value_in_billion (407.4, 227.6, 164.3), max_market_value_in_billion (294.7, 154.8, 213.7) | people : age (27, 30, 34), name (\"David Butler\", \"Brad Lohaus\", \"Darryl Kennedy\"), nationality (\"United States\", \"United Kindom\"), graduation_college (\"Virginia\", \"Iowa\", \"WisconsinâStevens Point\"), people_id (6, 2, 5)",
        "ambiguous_queries": [
            "select max(market_value_in_billion), min(market_value_in_billion) from company",
            "select max_market_value_in_billion, min_market_value_in_billion from company_market_value_in_billion"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"company\": [\"market_value_in_billion\"]}, {\"company_market_value_in_billion\": [\"max_market_value_in_billion\"]}], \"minimum\": [{\"company\": [\"market_value_in_billion\"]}, {\"company_market_value_in_billion\": [\"min_market_value_in_billion\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"company_market_value_in_billion\".\"max_market_value_in_billion\", \"minimum\" refers to the schema \"company_market_value_in_billion\".\"min_market_value_in_billion\"",
        "clear_ambiguity": "{\"maximum\": {\"company_market_value_in_billion\": [\"max_market_value_in_billion\"]}, \"minimum\": {\"company_market_value_in_billion\": [\"min_market_value_in_billion\"]}}",
        "gold_query": "select max_market_value_in_billion, min_market_value_in_billion from company_market_value_in_billion"
    },
    {
        "index": 750,
        "db_id": "world_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/world_1/world_1.sqlite",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "schema_without_content": "country : headofstate , indepyear , name , gnpold , code2 , governmentform , capital , code , lifeexpectancy , localname , gnp , continent , region , surfacearea , population  | city : name , id , district , population , countrycode  | country_population_lifeexpectancy : continent , sum_population , max_lifeexpectancy , sum_lifeexpectancy , max_population , min_lifeexpectancy , min_population , avg_population , avg_lifeexpectancy  | sqlite_sequence : seq , name  | countrylanguage : percentage , isofficial , countrycode , language ",
        "schema_with_content": "country : headofstate (\"Ãmile Lahoud\", \"Norodom Sihanouk\", \"Carl XVI Gustaf\"), indepyear (1993, 1966, 1828), name (\"Brunei\", \"Mozambique\", \"Denmark\"), gnpold (52037.0, 119833.0, 227757.0), code2 (\"CI\", \"HR\", \"GU\"), governmentform (\"Islamic Republic\", \"Islamic Emirate\", \"Socialistic State\"), capital (2698, 69, 1365), code (\"RUS\", \"FJI\", \"GRL\"), lifeexpectancy (77.8, 66.0, 48.8), localname (\"Guyane franÃ§aise\", \"TÃ¼rkiye\", \"HaÃ¯ti/Dayti\"), gnp (13714.0, 97.0, 6648.0), continent (\"Africa\", \"North America\", \"Antarctica\"), region (\"Southern and Central Asia\", \"Eastern Europe\", \"Eastern Africa\"), surfacearea (96.0, 91982.0, 91982.0), population (23930000, 12646000, 8495000) | city : name (\"Mahabad\", \"Munich [MÃ¼nchen]\", \"Bridgeport\"), id (1443, 3415, 2121), district (\"Katsina\", \"Ningxia\", \"Samara\"), population (127801, 146262, 111500), countrycode (\"PLW\", \"BRN\", \"FSM\") | country_population_lifeexpectancy : continent (\"Oceania\", \"Oceania\", \"Europe\"), sum_population (8091800, 190000, 77000), max_lifeexpectancy (37.5, 66.0, 77.8), sum_lifeexpectancy (37.5, 68.9, 53.2), max_population (38653600, 38653600, 1226000), min_lifeexpectancy (66.0, 70.3, 74.5), min_population (10925000, 5605000, 270000), avg_population (5433000, 25662000, 33517000), avg_lifeexpectancy (76.5, None, 68.7) | sqlite_sequence : seq (4079), name (\"city\") | countrylanguage : percentage (34.8, 46.0, 3.1), isofficial (\"T\", \"F\"), countrycode (\"AND\", \"NGA\", \"BGR\"), language (\"Khoekhoe\", \"Hebrew\", \"Santhali\")",
        "ambiguous_queries": [
            "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
            "select sum_population, avg_lifeexpectancy, continent from country_population_lifeexpectancy where avg_lifeexpectancy < 72"
        ],
        "gold_ambiguity": {
            "match": "{\"continents\": [{\"country\": [\"continent\"]}, {\"country_population_lifeexpectancy\": [\"continent\"]}], \"total popuation\": [{\"country\": [\"population\"]}, {\"country_population_lifeexpectancy\": [\"sum_population\"]}], \" average life expectancy\": [{\"country\": [\"lifeexpectancy\"]}, {\"country_population_lifeexpectancy\": [\"avg_lifeexpectancy\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"continents\" refers to the schema \"country\".\"continent\", \"total popuation\" refers to the schema \"country\".\"population\", \" average life expectancy\" refers to the schema \"country\".\"lifeexpectancy\"",
        "clear_ambiguity": "{\"continents\": {\"country\": [\"continent\"]}, \"total popuation\": {\"country\": [\"population\"]}, \" average life expectancy\": {\"country\": [\"lifeexpectancy\"]}}",
        "gold_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72"
    },
    {
        "index": 751,
        "db_id": "phone_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/phone_1/phone_1.sqlite",
        "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "schema_without_content": "chip_model : slots , model_name , rom_mib , wifi , launch_year , ram_mib , bluetooth  | chip_model_phone_rom_mib : sum_rom_mib , avg_rom_mib , company_name , min_rom_mib , max_rom_mib  | phone : screen_mode , hardware_model_name , chip_model , accreditation_level , date \", \"Approved \", \"Approved \", company_name , accreditation_type  | screen_mode : hardware_colours , map , graphics_mode , type , used_kb , pixels , char_cells ",
        "schema_with_content": "chip_model : slots (\"1CFII,1SD\", \"1SD\"), model_name (\"X3 Advanced\", \"X30 low-end\", \"X30 low-end\"), rom_mib (48.0, 32.0, 128.0), wifi (\"No\", \"802.11b\"), launch_year (2002.0, 2002.0, 2003.0), ram_mib (32.0, 64.0), bluetooth (\"1.1\", \"1.2\", \"No\") | chip_model_phone_rom_mib : sum_rom_mib (128.0, 128.0, 64.0), avg_rom_mib (128.0, 256.0, 48.0), company_name (\"HTC Corporation\", \"Samsung Electronics Co Ltd\", \"Huawei Technologies Co.Ltd.\"), min_rom_mib (128.0, 64.0, 256.0), max_rom_mib (48.0, 256.0, 128.0) | phone : screen_mode (\"2\", \"2\", \"3\"), hardware_model_name (\"GT-I9300\", \"LG-P760\", \"Z520e\"), chip_model (\"X51v\", \"X50 Standard\", \"X3i\"), accreditation_level (\"joyn Hot Fixes\", \"joyn\"), date (\"Approved (awarded 19.11.12)\", \"Approved (awarded 19.11.12)\", \"Approved (valid until 03.05.13)\"), company_name (\"Huawei Technologies Co.Ltd.\", \"Samsung Electronics Co Ltd\", \"Huawei Technologies Co.Ltd.\"), accreditation_type (\"Full\", \"Provisional\") | screen_mode : hardware_colours (2.0, 4.0, 8.0), map (\"6000â7FFF\", \"6000â7FFF\", \"4000â7FFF\"), graphics_mode (6.0, 6.0, 5.0), type (\"Graphics\", \"Text\"), used_kb (16.0, 10.0, 10.0), pixels (\"640 Ã 256\", \"320 Ã 256\", \"160 Ã 256\"), char_cells (\"20 Ã 32\", \"40 Ã 32\", \"80 Ã 25\")",
        "ambiguous_queries": [
            "select avg(t1.rom_mib) from chip_model as t1 join phone as t2 on t1.model_name = t2.chip_model where t2.company_name = 'Nokia Corporation'",
            "select avg_rom_mib from chip_model_phone_rom_mib where company_name = 'Nokia Corporation'"
        ],
        "gold_ambiguity": {
            "match": "{\"average ROM size\": [{\"chip_model\": [\"rom_mib\"]}, {\"chip_model_phone_rom_mib\": [\"avg_rom_mib\"]}], \"company named\": [{\"chip_model_phone_rom_mib\": [\"company_name\"]}, {\"phone\": [\"company_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average ROM size\" refers to the schema \"chip_model\".\"rom_mib\", \"company named\" refers to the schema \"phone\".\"company_name\"",
        "clear_ambiguity": "{\"average ROM size\": {\"chip_model\": [\"rom_mib\"]}, \"company named\": {\"phone\": [\"company_name\"]}}",
        "gold_query": "select avg(t1.rom_mib) from chip_model as t1 join phone as t2 on t1.model_name = t2.chip_model where t2.company_name = 'Nokia Corporation'"
    },
    {
        "index": 752,
        "db_id": "protein_institute",
        "ambig_type": "aggregate",
        "db_file": "aggregate/protein_institute/protein_institute.sqlite",
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "schema_without_content": "building_floors : sum_floors , avg_floors , min_floors , max_floors  | protein : protein_name , institution_id , divergence_from_human_lineage , common_name , sequence_identity_to_human_protein , sequence_length , accession_number  | institution : enrollment , building_id , primary_conference , team , founded , institution_id , type , location , institution  | building : height_feet , name , street_address , building_id , years_as_tallest , floors ",
        "schema_with_content": "building_floors : sum_floors (22, 42, 17), avg_floors (12, 39, 12), min_floors (36, 42, 42), max_floors (12, 39, 12) | protein : protein_name (\"Centromeric protein E, putative\", \"uncharacterized protein C20orf117-like\", \"uncharacterized protein LOC578090\"), institution_id (\"5\", \"9\", \"9\"), divergence_from_human_lineage (937.5, 742.9, 782.7), common_name (\"Tropical Clawed Frog\", \"porkworm\", \"purple sea urchin\"), sequence_identity_to_human_protein (\"30%\", \"39%\", \"47%\"), sequence_length (2086.0, 1587.0, 2086.0), accession_number (\"XP_002429877.1\", \"XP_003380263.1\", \"XP_003380263.1\") | institution : enrollment (967, 2600, 800), building_id (\"4\", \"1\", \"0\"), primary_conference (\"none\", \"AAC\", \"The Sun\"), team (\"Tigers\", \"Warriors\", \"Lynx\"), founded (1998.0, 1883.0, 1881.0), institution_id (\"1\", \"1\", \"6\"), type (\"Private\", \"Public\", \"Tribal\"), location (\"Ave Maria, Florida\", \"West Point, Georgia\", \"Jacksonville, Florida\"), institution (\"Ave Maria University\", \"Point University\", \"Ave Maria University\") | building : height_feet (577, 537, 204), name (\"Tampa City Hall\", \"Park Tower\", \"One Tampa City Center\"), street_address (\"701 North Franklin Street\", \"400 North Tampa Street\", \"101 East Kennedy Boulevard\"), building_id (\"0\", \"6\", \"6\"), years_as_tallest (\"1986â1992\", \"1986â1992\", \"1986â1992\"), floors (17, 42, 17)",
        "ambiguous_queries": [
            "select avg(floors), max(floors), min(floors) from building",
            "select avg_floors, max_floors, min_floors from building_floors"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"building\": [\"floors\"]}, {\"building_floors\": [\"avg_floors\"]}], \"maximum\": [{\"building\": [\"floors\"]}, {\"building_floors\": [\"max_floors\"]}], \"minimum\": [{\"building\": [\"floors\"]}, {\"building_floors\": [\"min_floors\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"building\".\"floors\", \"maximum\" refers to the schema \"building\".\"floors\", \"minimum\" refers to the schema \"building\".\"floors\"",
        "clear_ambiguity": "{\"average\": {\"building\": [\"floors\"]}, \"maximum\": {\"building\": [\"floors\"]}, \"minimum\": {\"building\": [\"floors\"]}}",
        "gold_query": "select avg(floors), max(floors), min(floors) from building"
    },
    {
        "index": 753,
        "db_id": "world_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/world_1/world_1.sqlite",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "schema_without_content": "city : id , countrycode , district , name , population  | country : indepyear , gnp , lifeexpectancy , population , gnpold , headofstate , capital , name , region , code2 , surfacearea , governmentform , code , localname , continent  | sqlite_sequence : seq , name  | countrylanguage : isofficial , percentage , countrycode , language  | country_gnp_population : sum_gnp , avg_gnp , min_population , min_gnp , max_population , sum_population , avg_population , max_gnp ",
        "schema_with_content": "city : id (417, 1662, 2068), countrycode (\"GUF\", \"NIU\", \"BHS\"), district (\"Toyama\", \"Basra\", \"Aksaray\"), name (\"Shivapuri\", \"Irvine\", \"Gillingham\"), population (113428, 195400, 125341) | country : indepyear (1806, 1945, 1956), gnp (19008.0, 722.0, 121914.0), lifeexpectancy (73.3, 78.1, 73.2), population (2583000, 56000, 428000), gnpold (10169.0, 325.0, 7388.0), headofstate (\"Sellapan Rama Nathan\", \"Ãlafur Ragnar GrÃ­msson\", \"Mswati III\"), capital (2437, 3209, 2452), name (\"Mauritius\", \"Zimbabwe\", \"Zimbabwe\"), region (\"Western Europe\", \"Australia and New Zealand\", \"Micronesia\"), code2 (\"VE\", \"BB\", \"MU\"), surfacearea (357022.0, 48511.0, 6.0), governmentform (\"Parlementary Monarchy\", \"US Territory\", \"Nonmetropolitan Territory of New Zealand\"), code (\"GUF\", \"TKM\", \"PAK\"), localname (\"Bosna i Hercegovina\", \"Uruguay\", \"Iran\"), continent (\"Antarctica\", \"Asia\", \"Antarctica\") | sqlite_sequence : seq (4079), name (\"city\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (95.6, 91.5, 3.5), countrycode (\"NER\", \"DMA\", \"IRQ\"), language (\"Ful\", \"Punjabi\", \"Kanem-bornu\") | country_gnp_population : sum_gnp (14194.0, 3563.0, 17000.0), avg_gnp (3459.0, 36124.0, 102896.0), min_population (34000, 3615000, 75967000), min_gnp (65107.0, 3527.0, 4127.0), max_population (6188000, 22244000, 3615000), sum_population (2583000, 45611000, 10925000), avg_population (754700, 8861400, 8000), max_gnp (195746.0, 12178.0, 746.0)",
        "ambiguous_queries": [
            "select avg(gnp), sum(population) from country where governmentform = 'US Territory'",
            "select avg_gnp, sum_population from country_gnp_population where governmentform = 'US Territory'"
        ],
        "gold_ambiguity": {
            "match": "{\"average GNP\": [{\"country\": [\"gnp\"]}, {\"country_gnp_population\": [\"avg_gnp\"]}], \"government\": [{\"country\": [\"governmentform\"]}, {\"country_gnp_population\": [\"governmentform\"]}], \"total population\": [{\"country\": [\"population\"]}, {\"country_gnp_population\": [\"sum_population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average GNP\" refers to the schema \"country\".\"gnp\", \"government\" refers to the schema \"country\".\"governmentform\", \"total population\" refers to the schema \"country\".\"population\"",
        "clear_ambiguity": "{\"average GNP\": {\"country\": [\"gnp\"]}, \"government\": {\"country\": [\"governmentform\"]}, \"total population\": {\"country\": [\"population\"]}}",
        "gold_query": "select avg(gnp), sum(population) from country where governmentform = 'US Territory'"
    },
    {
        "index": 754,
        "db_id": "club_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/club_1/club_1.sqlite",
        "question": "Find the average age of the members in the club \"Bootup Baltimore\".",
        "schema_without_content": "club_member_of_club_student_age : avg_age , sum_age , clubname , min_age , max_age  | member_of_club : clubid , stuid , position  | club : clublocation , clubid , clubname , clubdesc  | student : city_code , lname , fname , major , sex , stuid , advisor , age ",
        "schema_with_content": "club_member_of_club_student_age : avg_age (22, 16, 19), sum_age (18, 21, 20), clubname (\"Pen and Paper Gaming\", \"Bootup Baltimore\", \"Tennis Club\"), min_age (20, 16, 22), max_age (21, 17, 17) | member_of_club : clubid (1, 4, 2), stuid (1008, 1007, 1007), position (\"President\", \"Vice-President\", \"CTO\") | club : clublocation (\"AKW\", \"HHH\"), clubid (4, 3, 2), clubname (\"Hopkins Student Enterprises\", \"Hopkins Student Enterprises\", \"Hopkins Student Enterprises\"), clubdesc (\"Play pen and paper games on campus.\", \"A competitive tennis club.\", \"Venture capital fund for student business.\") | student : city_code (\"BAL\", \"WAS\", \"HKG\"), lname (\"Cheng\", \"Schmidt\", \"Davis\"), fname (\"Linda\", \"David\", \"Eric\"), major (550, 600, 100), sex (\"F\", \"M\"), stuid (1020, 1029, 1034), advisor (7723, 7792, 1148), age (19, 27, 16)",
        "ambiguous_queries": [
            "select avg(t3.age) from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t1.clubname = 'Bootup Baltimore'",
            "select avg_age from club_member_of_club_student_age where clubname = 'Bootup Baltimore'"
        ],
        "gold_ambiguity": {
            "match": "{\"average age\": [{\"club_member_of_club_student_age\": [\"avg_age\"]}, {\"student\": [\"age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average age\" refers to the schema \"club_member_of_club_student_age\".\"avg_age\"",
        "clear_ambiguity": "{\"average age\": {\"club_member_of_club_student_age\": [\"avg_age\"]}}",
        "gold_query": "select avg_age from club_member_of_club_student_age where clubname = 'Bootup Baltimore'"
    },
    {
        "index": 755,
        "db_id": "college_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_2/college_2.sqlite",
        "question": "What are the greatest and average capacity for rooms in each building?",
        "schema_without_content": "prereq : prereq_id , course_id  | course : title , dept_name , course_id , credits  | classroom_capacity : min_capacity , building , max_capacity , sum_capacity , avg_capacity  | teaches : id , semester , sec_id , year , course_id  | time_slot : day , end_min , time_slot_id , end_hr , start_min , start_hr  | classroom : building , room_number , capacity  | department : building , budget , dept_name  | takes : sec_id , semester , grade , course_id , id , year  | section : year , room_number , building , time_slot_id , semester , sec_id , course_id  | advisor : s_id , i_id  | student : name , dept_name , tot_cred , id  | instructor : name , salary , dept_name , id ",
        "schema_with_content": "prereq : prereq_id (\"399\", \"137\", \"818\"), course_id (\"353\", \"958\", \"902\") | course : title (\"Hydraulics\", \"Optics\", \"Corporate Law\"), dept_name (\"Pol. Sci.\", \"Geology\", \"Statistics\"), course_id (\"353\", \"897\", \"396\"), credits (4, 3) | classroom_capacity : min_capacity (27, 113, 65), building (\"Taylor\", \"Lamberton\", \"Gates\"), max_capacity (22, 27, 18), sum_capacity (60, 51, 15), avg_capacity (30, 32, 26) | teaches : id (\"28097\", \"25946\", \"73623\"), semester (\"Spring\", \"Fall\"), sec_id (\"1\", \"2\", \"3\"), year (2002, 2005, 2006), course_id (\"864\", \"345\", \"642\") | time_slot : day (\"T\", \"W\", \"T\"), end_min (50, 45, 30), time_slot_id (\"F\", \"F\", \"G\"), end_hr (15, 13, 11), start_min (0, 30), start_hr (9, 14, 8) | classroom : building (\"Whitman\", \"Chandler\", \"Grace\"), room_number (\"134\", \"700\", \"113\"), capacity (15, 120, 60) | department : building (\"Candlestick\", \"Brodhead\", \"Lambeau\"), budget (395051.74, 210627.58, 734550.7), dept_name (\"Civil Eng.\", \"Physics\", \"Marketing\") | takes : sec_id (\"1\", \"2\", \"3\"), semester (\"Fall\", \"Spring\"), grade (\"C \", \"C \", \"A+\"), course_id (\"461\", \"735\", \"304\"), id (\"56849\", \"39619\", \"22057\"), year (2007, 2010, 2006) | section : year (2003, 2001, 2010), room_number (\"105\", \"812\", \"105\"), building (\"Alumni\", \"Fairchild\", \"Nassau\"), time_slot_id (\"J\", \"P\", \"D\"), semester (\"Fall\", \"Spring\"), sec_id (\"1\", \"2\", \"3\"), course_id (\"760\", \"959\", \"443\") | advisor : s_id (\"77415\", \"36379\", \"99463\"), i_id (\"74426\", \"34175\", \"4034\") | student : name (\"Maity\", \"Dawson\", \"Masamura\"), dept_name (\"Cybernetics\", \"English\", \"Biology\"), tot_cred (28, 86, 65), id (\"12173\", \"27898\", \"89246\") | instructor : name (\"Mingoz\", \"Lembr\", \"Gustafsson\"), salary (66143.25, 82534.37, 106554.73), dept_name (\"Elec. Eng.\", \"Athletics\", \"English\"), id (\"78699\", \"95030\", \"97302\")",
        "ambiguous_queries": [
            "select max(capacity), avg(capacity), building from classroom group by building",
            "select max_capacity, avg_capacity, building from classroom_capacity"
        ],
        "gold_ambiguity": {
            "match": "{\"building\": [{\"classroom\": [\"building\"]}, {\"classroom_capacity\": [\"building\"]}], \"greatest\": [{\"classroom\": [\"capacity\"]}, {\"classroom_capacity\": [\"max_capacity\"]}], \"average\": [{\"classroom\": [\"capacity\"]}, {\"classroom_capacity\": [\"avg_capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"building\" refers to the schema \"classroom_capacity\".\"building\", \"greatest\" refers to the schema \"classroom_capacity\".\"max_capacity\", \"average\" refers to the schema \"classroom_capacity\".\"avg_capacity\"",
        "clear_ambiguity": "{\"building\": {\"classroom_capacity\": [\"building\"]}, \"greatest\": {\"classroom_capacity\": [\"max_capacity\"]}, \"average\": {\"classroom_capacity\": [\"avg_capacity\"]}}",
        "gold_query": "select max_capacity, avg_capacity, building from classroom_capacity"
    },
    {
        "index": 756,
        "db_id": "cre_Drama_Workshop_Groups",
        "ambig_type": "aggregate",
        "db_file": "aggregate/cre_Drama_Workshop_Groups/cre_Drama_Workshop_Groups.sqlite",
        "question": "Compute the total order quantities of the product \"photo\".",
        "schema_without_content": "ref_service_types : parent_service_type_code , service_type_code , service_type_description  | stores : store_email_address , store_phone 444-7666x7089\", \"1-678-902-9434x1148\", store_id , other_details , store_name , address_id , marketing_region_code  | clients : other_details , customer_phone 964-6385\", \"1-121-643-1101\", \"818-8559x747\", customer_name , client_id , customer_email_address , address_id  | ref_payment_methods : payment_method_description , payment_method_code  | customers : customer_id , customer_name , customer_phone 727-6065x6351\", \"347.178.3326\", \"347.178.3326\", other_details , address_id , customer_email_address  | drama_workshop_groups : store_name , other_details , address_id , store_phone 705-5633\", currency_code , marketing_region_code , store_email_address , workshop_group_id  | invoice_items : invoice_id , product_id , other_item_details , order_id , order_item_id , order_quantity , invoice_item_id  | order_items : other_item_details , product_id , order_quantity , order_item_id , order_id  | customer_orders : other_order_details , customer_id , actual_delivery_date , planned_delivery_date , store_id , order_id , order_date  | services : service_type_code , product_name , other_product_service_details , product_description , service_id , product_price , workshop_group_id  | invoices : order_item_id , order_id , order_quantity , invoice_id , other_item_details , product_id , payment_method_code  | addresses : state_county , other_details , line_2 , address_id , city_town , line_1  | bookings : status_code , booking_id , store_id , order_date , workshop_group_id , planned_delivery_date , actual_delivery_date , customer_id , other_order_details  | performers : other_details , customer_email_address , performer_id , customer_name , address_id , customer_phone  | order_items_products_order_quantity : product_name , avg_order_quantity , max_order_quantity , min_order_quantity , sum_order_quantity  | products : other_product_service_details , product_description , product_id , product_name , product_price  | performers_in_bookings : performer_id , order_id  | marketing_regions : marketing_region_descriptrion , marketing_region_code , marketing_region_name , other_details  | bookings_services : order_id , product_id ",
        "schema_with_content": "ref_service_types : parent_service_type_code (\"1\"), service_type_code (\"3\", \"1\", \"2\"), service_type_description (\"provide photo service\", \"provide filming service\", \"provide photo service\") | stores : store_email_address (\"rborer@example.org\", \"frederik37@example.org\", \"shirley07@example.net\"), store_phone (\"1-678-902-9434x1148\", \"(941)444-7666x7089\", \"1-678-902-9434x1148\"), store_id (\"344\", \"344\", \"512\"), other_details (\"5 stars\", None, \"4 stars\"), store_name (\"Ewi Filming\", \"Ewi Filming\", \"FK Filming\"), address_id (192, 230, 74), marketing_region_code (\"FR\", \"CN\", \"CA\") | clients : other_details (\"VIP\", None, \"Super VIP\"), customer_phone (\"(995)964-6385\", \"1-121-643-1101\", \"(745)818-8559x747\"), customer_name (\"Tevin\", \"Urban\", \"Genesis\"), client_id (735, 426, 605), customer_email_address (\"jklocko@example.net\", \"conn.josiane@example.com\", \"vparker@example.net\"), address_id (201, 15, 74) | ref_payment_methods : payment_method_description (\"credit\", \"debit\", \"Visa\"), payment_method_code (\"American E\", \"MasterCard\", \"Visa\") | customers : customer_id (\"998\", \"998\", \"418\"), customer_name (\"Adelbert\", \"Jacques\", \"Elwyn\"), customer_phone (\"(191)727-6065x6351\", \"347.178.3326\", \"347.178.3326\"), other_details (None, \"VIP\"), address_id (383, 19, 98), customer_email_address (\"eleannon@example.org\", \"keanu70@example.net\", \"gage.johns@example.org\") | drama_workshop_groups : store_name (\"Welch Flower\", \"Kling Workshop\", \"Roo Place\"), other_details (None, \"Good\", \"Bad\"), address_id (286, 383, 180), store_phone (\"492-463-5967\", \"499-032-2149\", \"(422)705-5633\"), currency_code (\"EU\", \"USD\"), marketing_region_code (\"FR\", \"DE\", \"ES\"), store_email_address (\"kole.torp@example.org\", \"harry.nicolas@example.org\", \"katherine.kling@example.org\"), workshop_group_id (838, 382, 685) | invoice_items : invoice_id (128, 162), product_id (396, 191), other_item_details (None, \"Good quality\"), order_id (1, 4), order_item_id (5, 6), order_quantity (2, 6), invoice_item_id (1, 2) | order_items : other_item_details (None), product_id (273, 81, 179), order_quantity (\"1\", \"2\"), order_item_id (3, 9, 6), order_id (7, 6, 5) | customer_orders : other_order_details (None), customer_id (240, 546, 304), actual_delivery_date (\"1996-02-16 04:20:17\", \"2011-04-23 06:39:09\", \"2015-06-20 20:51:17\"), planned_delivery_date (\"1977-03-11 03:58:19\", \"1977-07-08 16:35:46\", \"2014-06-18 09:42:23\"), store_id (231, 512, 291), order_id (7, 15, 11), order_date (\"1985-05-29 01:20:18\", \"2000-07-03 21:41:50\", \"1999-11-20 18:48:05\") | services : service_type_code (\"2\", \"2\", \"4\"), product_name (\"film\", \"dinning\", \"photo\"), other_product_service_details (None), product_description (None), service_id (630, 421, 640), product_price (58932775.8822, 7299.6747, 213.9459), workshop_group_id (382, 708, 382) | invoices : order_item_id (5, 8, 8), order_id (12, 11, 4), order_quantity (\"2\", \"1\"), invoice_id (162, 548, 587), other_item_details (None), product_id (8, 7, 4), payment_method_code (\"MasterCard\", \"Visa\", \"American E\") | addresses : state_county (\"Pennsylvania\", \"Ohio\", \"Delaware\"), other_details (None), line_2 (\"Apt. 460\", \"Apt. 460\", \"Suite 184\"), address_id (\"124\", \"74\", \"374\"), city_town (\"Schadenville\", \"Monahanshire\", \"North Antonina\"), line_1 (\"545 Lula Mission\", \"2082 Runolfsson Cliffs\", \"391 Vandervort Fall Apt. 446\") | bookings : status_code (\"good\", \"stop\"), booking_id (1, 15, 2), store_id (4, 2, 4), order_date (\"1984-12-17 12:53:51\", \"2007-08-05 15:46:29\", \"1992-11-26 18:11:10\"), workshop_group_id (\"954\", \"405\", \"685\"), planned_delivery_date (\"1979-07-19 19:44:01\", \"2014-06-05 10:19:46\", \"2017-04-27 00:16:00\"), actual_delivery_date (\"1990-03-16 19:38:47\", \"2016-04-30 11:45:39\", \"1983-10-09 10:48:48\"), customer_id (938, 953, 605), other_order_details (None) | performers : other_details (None, \"Did not pay\", \"Pay good tips\"), customer_email_address (\"cokuneva@example.com\", \"ferry.carolina@example.net\", \"clotilde04@example.net\"), performer_id (433, 832, 976), customer_name (\"Fritz\", \"Vernon\", \"Oren\"), address_id (314, 110, 207), customer_phone (\"664.495.1939\", \"08639382978\", \"782-118-0067\") | order_items_products_order_quantity : product_name (\"photo\", \"film\", \"dinning\"), avg_order_quantity (\"1\", \"2\"), max_order_quantity (\"1\", \"2\"), min_order_quantity (\"1\", \"2\"), sum_order_quantity (\"1\", \"2\") | products : other_product_service_details (None), product_description (None), product_id (\"179\", \"154\", \"21\"), product_name (\"photo\", \"film\", \"dinning\"), product_price (2302, 900, 157216) | performers_in_bookings : performer_id (882, 882, 360), order_id (9, 3, 2) | marketing_regions : marketing_region_descriptrion (\"Our largest market\", \"Our largest market\", \"\"), marketing_region_code (\"ES\", \"CN\", \"ES\"), marketing_region_name (\"United States\", \"India\", \"Russia\"), other_details (None) | bookings_services : order_id (7, 9, 1), product_id (779, 191, 191)",
        "ambiguous_queries": [
            "select sum(t1.order_quantity) from order_items as t1 join products as t2 on t1.product_id = t2.product_id where t2.product_name = 'photo'",
            "select sum_order_quantity from order_items_products_order_quantity where product_name = 'photo'"
        ],
        "gold_ambiguity": {
            "match": "{\"total order quantities\": [{\"order_items\": [\"order_quantity\"]}, {\"order_items_products_order_quantity\": [\"sum_order_quantity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total order quantities\" refers to the schema \"order_items\".\"order_quantity\"",
        "clear_ambiguity": "{\"total order quantities\": {\"order_items\": [\"order_quantity\"]}}",
        "gold_query": "select sum(t1.order_quantity) from order_items as t1 join products as t2 on t1.product_id = t2.product_id where t2.product_name = 'photo'"
    },
    {
        "index": 757,
        "db_id": "soccer_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/soccer_2/soccer_2.sqlite",
        "question": "What is average enrollment of colleges in the state FL?",
        "schema_without_content": "player : ycard , hs , pname , pid  | college_enr : sum_enr , max_enr , avg_enr , min_enr  | tryout : pid , cname , decision , ppos  | college : cname , enr , state ",
        "schema_with_content": "player : ycard (\"no\", \"yes\"), hs (1600, 300, 1600), pname (\"David\", \"Drago\", \"Eddie\"), pid (30003, 10001, 40004) | college_enr : sum_enr (22000, 18000, 19000), max_enr (19000, 19000, 22000), avg_enr (19000, 18000, 22000), min_enr (18000, 12000, 12000) | tryout : pid (20002, 20002, 50005), cname (\"LSU\", \"OU\", \"OU\"), decision (\"no\", \"yes\"), ppos (\"goalie\", \"striker\", \"mid\") | college : cname (\"FSU\", \"OU\", \"OU\"), enr (22000, 18000, 19000), state (\"OK\", \"AZ\", \"LA\")",
        "ambiguous_queries": [
            "select avg(enr) from college where state = 'FL'",
            "select avg_enr from college_enr where state = 'FL'"
        ],
        "gold_ambiguity": {
            "match": "{\"average enrollment\": [{\"college\": [\"enr\"]}, {\"college_enr\": [\"avg_enr\"]}], \"state\": [{\"college\": [\"state\"]}, {\"college_enr\": [\"state\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average enrollment\" refers to the schema \"college\".\"enr\", \"state\" refers to the schema \"college\".\"state\"",
        "clear_ambiguity": "{\"average enrollment\": {\"college\": [\"enr\"]}, \"state\": {\"college\": [\"state\"]}}",
        "gold_query": "select avg(enr) from college where state = 'FL'"
    },
    {
        "index": 758,
        "db_id": "flight_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/flight_1/flight_1.sqlite",
        "question": "What is the average distance and price for all flights from LA?",
        "schema_without_content": "certificate : aid , eid  | flight_distance_price : max_distance , sum_distance , max_price , sum_price , min_price , avg_price , avg_distance , min_distance  | flight : flno , departure_date , arrival_date , destination , aid , distance , price , origin  | aircraft : distance , aid , name  | employee : eid , salary , name ",
        "schema_with_content": "certificate : aid (7, 2, 14), eid (269734834, 573284895, 552455318) | flight_distance_price : max_distance (802, 1749, 2606), sum_distance (2308, 2308, 7487), max_price (780.99, 202.45, 220.98), sum_price (261.56, 202.45, 278.56), min_price (261.56, 220.98, 235.98), avg_price (182, 182, 202.45), avg_distance (5478, 1251, 2606), min_distance (1749, 1251, 2551) | flight : flno (346, 387, 2), departure_date (\"04/12/2005 12:45\", \"04/12/2005 11:50\", \"04/12/2005 07:03\"), arrival_date (\"04/12/2005 07:05\", \"04/12/2005 09:40\", \"04/12/2005 03:18\"), destination (\"Honolulu\", \"Washington D.C.\", \"Dallas\"), aid (2, 2, 2), distance (5478, 5478, 2606), price (202.45, 235.98, 235.98), origin (\"Los Angeles\", \"Chicago\") | aircraft : distance (7120, 1805, 520), aid (15, 7, 14), name (\"Airbus A340-300\", \"SAAB 340\", \"British Aerospace Jetstream 41\") | employee : eid (567354612, 552455318, 573284895), salary (32021, 114323, 43001), name (\"William Moore\", \"Joseph Thompson\", \"William Jones\")",
        "ambiguous_queries": [
            "select avg(distance), avg(price) from flight where origin = 'Los Angeles'",
            "select avg_distance, avg_price from flight_distance_price where origin = 'Los Angeles'"
        ],
        "gold_ambiguity": {
            "match": "{\"average distance\": [{\"flight\": [\"distance\"]}, {\"flight_distance_price\": [\"avg_distance\"]}], \"from LA\": [{\"flight\": [\"origin\"]}, {\"flight_distance_price\": [\"origin\"]}], \"price\": [{\"flight\": [\"price\"]}, {\"flight_distance_price\": [\"avg_price\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average distance\" refers to the schema \"flight_distance_price\".\"avg_distance\", \"from LA\" refers to the schema \"flight_distance_price\".\"origin\", \"price\" refers to the schema \"flight_distance_price\".\"avg_price\"",
        "clear_ambiguity": "{\"average distance\": {\"flight_distance_price\": [\"avg_distance\"]}, \"from LA\": {\"flight_distance_price\": [\"origin\"]}, \"price\": {\"flight_distance_price\": [\"avg_price\"]}}",
        "gold_query": "select avg_distance, avg_price from flight_distance_price where origin = 'Los Angeles'"
    },
    {
        "index": 759,
        "db_id": "ship_mission",
        "ambig_type": "aggregate",
        "db_file": "aggregate/ship_mission/ship_mission.sqlite",
        "question": "Show different types of ships and the average tonnage of ships of each type.",
        "schema_without_content": "ship_tonnage : max_tonnage , sum_tonnage , avg_tonnage , min_tonnage , type  | mission : speed_knots , fate  1933\", \"Lost  1931\", launched_year , ship_id , mission_id , code , location  | ship : tonnage , type , name , nationality , ship_id ",
        "schema_with_content": "ship_tonnage : max_tonnage (3608, 3608, 7781), sum_tonnage (3035, 7781, 3608), avg_tonnage (3035, 7781, 3035), min_tonnage (3608, 3146, 3687), type (\"Cargo ship\", \"Battle ship\") | mission : speed_knots (25, 23, 16), fate (\"Decommissioned 1950\", \"Lost (burned and sunk) 1933\", \"Lost (burned) 1931\"), launched_year (1931, 1931, 1932), ship_id (5, 3, 5), mission_id (5, 5, 2), code (\"VMV-6\", \"VMV-3\", \"VMV-7\"), location (\"Germany\", \"Norway\", \"Germany\") | ship : tonnage (3496, 7781, 3035), type (\"Cargo ship\", \"Battle ship\"), name (\"Trader\", \"Dromonby\", \"Trader\"), nationality (\"United Kingdom\", \"United States\"), ship_id (6, 1, 1)",
        "ambiguous_queries": [
            "select type, avg(tonnage) from ship group by type",
            "select type, avg_tonnage from ship_tonnage"
        ],
        "gold_ambiguity": {
            "match": "{\"average tonnage\": [{\"ship\": [\"tonnage\"]}, {\"ship_tonnage\": [\"avg_tonnage\"]}], \"type\": [{\"ship\": [\"type\"]}, {\"ship_tonnage\": [\"type\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average tonnage\" refers to the schema \"ship_tonnage\".\"avg_tonnage\", \"type\" refers to the schema \"ship_tonnage\".\"type\"",
        "clear_ambiguity": "{\"average tonnage\": {\"ship_tonnage\": [\"avg_tonnage\"]}, \"type\": {\"ship_tonnage\": [\"type\"]}}",
        "gold_query": "select type, avg_tonnage from ship_tonnage"
    },
    {
        "index": 760,
        "db_id": "local_govt_and_lot",
        "ambig_type": "aggregate",
        "db_file": "aggregate/local_govt_and_lot/local_govt_and_lot.sqlite",
        "question": "When is the last day any resident moved in?",
        "schema_without_content": "things : service_details , service_type_code , organization_id , thing_id , type_of_thing_code  | organizations : organization_details , organization_id , parent_organization_id  | customer_events : customer_id , resident_id , thing_id , property_id , customer_event_id , date_moved_in  | customers : customer_id , customer_details  | timed_status_of_things : thing_id , status_of_thing_code , date_and_date  | timed_locations_of_things : location_code , thing_id , date_and_time  | residents_services : date_requested , resident_id , other_details , property_id , date_moved_in , service_id , date_provided  | residents_date_moved_in : avg_date_moved_in , sum_date_moved_in , min_date_moved_in , max_date_moved_in  | properties : property_id , property_type_code , property_address , other_details  | services : service_type_code , organization_id , service_id , service_details  | customer_event_notes : date_moved_in , resident_id , property_id , customer_event_note_id , service_type_code , customer_event_id  | residents : property_id , other_details , date_moved_in , resident_id , date_moved_out ",
        "schema_with_content": "things : service_details (\"Unsatisfied\", \"Satisfied\"), service_type_code (\"Check\", \"Cleanning\"), organization_id (8, 10, 7), thing_id (10, 26, 45), type_of_thing_code (\"Electronics\", \"Commen\", \"Furniture\") | organizations : organization_details (\"Reinger, Hudson and Nolan Group\", \"Denesik and Sons Party\", \"Robel-Schulist Group\"), organization_id (7, 8, 10), parent_organization_id (7, 8) | customer_events : customer_id (5, 79, 91), resident_id (58, 43, 83), thing_id (68, 46, 2), property_id (629, 748, 108), customer_event_id (226, 817, 226), date_moved_in (\"2015-03-27 12:00:00\", \"2016-09-27 12:00:00\") | customers : customer_id (4, 41, 31), customer_details (\"Elva Boehm\", \"Mackenzie Hettinger V\", \"Elva Boehm\") | timed_status_of_things : thing_id (26, 80, 84), status_of_thing_code (\"Open\", \"Close\", \"In Progress\"), date_and_date (\"2017-06-19 02:59:21\", \"2017-08-05 02:10:02\", \"2017-12-28 16:05:08\") | timed_locations_of_things : location_code (\"1537 Schmeler G\", \"288 Lang Ferry\", \"288 Lang Ferry\"), thing_id (26, 2, 14), date_and_time (\"2017-03-19 13:57:49\", \"2017-03-19 13:57:49\", \"2017-04-22 00:37:48\") | residents_services : date_requested (\"2016-04-13 05:09:24\", \"2016-11-27 15:37:02\", \"2017-06-14 14:04:50\"), resident_id (90, 45, 87), other_details (\"Satisfied\", \"Unsatisfied\"), property_id (748, 373, 669), date_moved_in (\"2017-06-17 15:43:33\", \"2015-03-27 12:00:00\", \"2016-09-27 12:00:00\"), service_id (11, 11, 29), date_provided (\"2017-08-14 08:06:43\", \"2018-01-30 09:58:57\", \"2018-01-30 09:58:57\") | residents_date_moved_in : avg_date_moved_in (\"2017-06-17 15:43:33\", \"2015-03-27 12:00:00\", \"2016-09-27 12:00:00\"), sum_date_moved_in (\"2017-06-17 15:43:33\", \"2015-03-27 12:00:00\", \"2016-09-27 12:00:00\"), min_date_moved_in (\"2017-06-17 15:43:33\", \"2015-03-27 12:00:00\", \"2016-09-27 12:00:00\"), max_date_moved_in (\"2017-06-17 15:43:33\", \"2015-03-27 12:00:00\", \"2016-09-27 12:00:00\") | properties : property_id (108, 605, 629), property_type_code (\"apartment\", \"house\", \"flat\"), property_address (\"72659 Frank Locks\", \"5384 Sipes Land Apt. 344\", \"830 Jayne Points Suite 290\"), other_details (\"USA\") | services : service_type_code (\"Pay bills\", \"Check\", \"Moving Out\"), organization_id (10, 7, 8), service_id (36, 22, 29), service_details (\"Satisfied\", \"Unsatisfied\") | customer_event_notes : date_moved_in (\"2016-10-28 01:43:42\", \"2016-05-14 15:58:33\", \"2016-08-08 07:58:26\"), resident_id (43, 67, 45), property_id (373, 669, 791), customer_event_note_id (18, 49, 18), service_type_code (\"Cleanning\", \"Check\"), customer_event_id (70, 216, 70) | residents : property_id (605, 629, 120), other_details (\"Loy Walter\", \"Mrs. Raphaelle Fisher\", \"Tomasa Hoeger\"), date_moved_in (\"2017-06-17 15:43:33\", \"2015-03-27 12:00:00\", \"2016-09-27 12:00:00\"), resident_id (47, 67, 90), date_moved_out (\"2018-01-28 13:19:54\", \"2018-02-03 11:30:20\", \"2018-02-03 11:30:20\")",
        "ambiguous_queries": [
            "select max(date_moved_in) from residents",
            "select max_date_moved_in from residents_date_moved_in"
        ],
        "gold_ambiguity": {
            "match": "{\"last day\": [{\"residents\": [\"date_moved_in\"]}, {\"residents_date_moved_in\": [\"max_date_moved_in\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"last day\" refers to the schema \"residents_date_moved_in\".\"max_date_moved_in\"",
        "clear_ambiguity": "{\"last day\": {\"residents_date_moved_in\": [\"max_date_moved_in\"]}}",
        "gold_query": "select max_date_moved_in from residents_date_moved_in"
    },
    {
        "index": 761,
        "db_id": "baseball_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/baseball_1/baseball_1.sqlite",
        "question": "Compute the average salary of the players in the team called 'Boston Red Stockings'.",
        "schema_without_content": "team_franchise : franchise_id , franchise_name , active , na_assoc  | college : name_full , state , country , city , college_id  | pitching : sho , sv , bk , g , league_id , era , player_id , hbp , team_id , sh , baopp , cg , bfp , hr , sf , er , so , gs , year , bb , ipouts , h , wp , r , w , ibb , g_idp , stint , gf , l  | player_award_vote : player_id , points_max , votes_first , year , points_won , league_id , award_id  | fielding : a , g , league_id , pb , player_id , wp , e , po , stint , inn_outs , sb , pos , dp , year , team_id , gs , cs , zr  | postseason : year , league_id_winner , league_id_loser , losses , wins , ties , team_id_winner , round , team_id_loser  | player : retro_id , final_game , birth_year , death_day , death_state , throws , bats , bbref_id , name_last , player_id , birth_month , name_first , name_given , height , birth_country , birth_state , death_city , death_year , birth_city , death_country , birth_day , death_month , weight , debut  | fielding_outfield : grf , year , gcf , glf , player_id , stint  | player_college : college_id , player_id , year  | manager : inseason , league_id , team_id , plyr_mgr , g , rank , w , l , year , player_id  | salary : player_id , salary , league_id , team_id , year  | batting_postseason : r , bb , league_id , year , sb , cs , rbi , team_id , player_id , hbp , ab , ibb , double , g , so , triple , round , h , sf , hr , g_idp , sh  | all_star : team_id , player_id , gp , game_id , game_num , league_id , year , starting_pos  | hall_of_fame : needed_note , category , yearid , player_id , needed , votes , inducted , votedby , ballots  | fielding_postseason : league_id , g , sb , po , year , team_id , a , round , e , gs , pos , inn_outs , tp , player_id , pb , cs , dp  | team_half : w , year , div_win , div_id , l , g , league_id , team_id , half , rank  | team : ra , er , double , so , year , fp , soa , name , w , bpf , dp , rank , era , ppf , sb , attendance , wc_win , ab , park , hra , r , franchise_id , g , league_id , ipouts , team_id , triple , team_id_retro , ws_win , sv , hr , team_id_br , team_id_lahman45 , ha , l , hbp , div_id , ghome , sf , div_win , cs , cg , e , sho , bba , lg_win , bb , h  | manager_award_vote : year , award_id , points_won , league_id , player_id , points_max , votes_first  | batting : rbi , league_id , g , ibb , sh , r , bb , stint , year , h , double , so , hr , team_id , ab , sf , cs , player_id , g_idp , sb , triple , hbp  | pitching_postseason : team_id , ipouts , l , player_id , wp , er , sho , hbp , gf , league_id , sv , round , hr , bk , g , gs , sf , bb , r , cg , baopp , bfp , h , era , so , sh , ibb , g_idp , w , year  | manager_award : award_id , league_id , notes , player_id , tie , year  | park : park_id , park_name , park_alias , country , state , city  | manager_half : rank , g , half , league_id , player_id , team_id , inseason , year , w , l  | appearances : g_of , g_defense , g_ph , g_rf , g_ss , g_pr , year , g_3b , g_dh , league_id , g_c , gs , g_2b , g_p , g_cf , g_lf , team_id , g_batting , player_id , g_all , g_1b  | player_award : year , notes , player_id , tie , league_id , award_id  | home_game : year , span_last , park_id , team_id , league_id , games , attendance , span_first , openings  | salary_team_salary : sum_salary , avg_salary , min_salary , name , max_salary ",
        "schema_with_content": "team_franchise : franchise_id (\"SDP\", \"MIN\", \"BRS\"), franchise_name (\"Indianapolis Hoosiers\", \"Washington Nationals\", \"Philadelphia Centennials\"), active (\"N\", \"Y\", \"\"), na_assoc (\"BNA\", \"CNA\", \"SNA\") | college : name_full (\"Lincoln Memorial University\", \"Bluefield College\", \"California Polytechnic State University, Pomona\"), state (\"IA\", \"WV\", \"SD\"), country (\"USA\"), city (\"Vernon\", \"Fayette\", \"Potsdam\"), college_id (\"inhanov\", \"stcloudst\", \"mioakla\") | pitching : sho (16, 7, 9), sv (39, 45, 32), bk (12, 5, 5), g (49, 79, 78), league_id (\"PL\", \"AL\", \"AA\"), era (1.6, 8.34, 2.09), player_id (\"joinero01\", \"sutheda01\", \"bakersc01\"), hbp (27, 35, 5), team_id (\"BUF\", \"CIN\", \"KCF\"), sh (0, 3, \"\"), baopp (0.688, 0.18600000000000003, 0.28), cg (72, 21, 51), bfp (401, 1149, 731), hr (27, 11, 4), sf (7, 8, 13), er (158, 162, 238), so (33, 274, 203), gs (56, 14, 26), year (1919, 1990, 1929), bb (168, 73, 74), ipouts (142, 150, 765), h (415, 544, 129), wp (7, 0, 51), r (127, 42, 248), w (18, 34, 23), ibb (2, 8, 9), g_idp (2, 16, 23), stint (1, 4, 4), gf (52, 56, 32), l (5, 25, 25) | player_award_vote : player_id (\"griffke02\", \"uhlege01\", \"hayesch01\"), points_max (64, 16, 120), votes_first (28, 13, 31), year (1961, 1994, 1989), points_won (118, 88, 3), league_id (\"ML\", \"AL\", \"NL\"), award_id (\"Cy Young\", \"MVP\", \"Rookie of the Year\") | fielding : a (69, 266, 294), g (73, 124, 72), league_id (\"FL\", \"PL\", \"FL\"), pb (30, 70, 56), player_id (\"merulle01\", \"defatto01\", \"beltrom01\"), wp (13, 2, 39), e (84, 7, 25), po (1057, 782, 746), stint (4, 1, 3), inn_outs (3266, 4164, 3224), sb (101, 20, 7), pos (\"CF\", \"OF\", \"3B\"), dp (154, 192, 42), year (1883, 1966, 1917), team_id (\"SL3\", \"PHP\", \"WS6\"), gs (92, 137, 37), cs (26, 9, 25), zr (12, 15, 6) | postseason : year (1913, 1886, 1935), league_id_winner (\"NL\", \"AA\", \"AL\"), league_id_loser (\"AA\", \"NL\", \"AL\"), losses (4, 5, 2), wins (4, 6, 10), ties (0, 1), team_id_winner (\"HOU\", \"MIN\", \"SEA\"), round (\"ALWC\", \"NLDS1\", \"AEDIV\"), team_id_loser (\"ML4\", \"PHA\", \"WS1\") | player : retro_id (\"hickj103\", \"gastm101\", \"hootb001\"), final_game (\"2012-07-14\", \"1921-07-26\", \"2013-08-09\"), birth_year (1984, 1858, 1970), death_day (14, 6, 12), death_state (\"Campeche\", \"KY\", \"AZ\"), throws (\"R\", \"L\", \"\"), bats (\"L\", \"B\", \"\"), bbref_id (\"dreyfba99\", \"puhljo01\", \"lamerpe01\"), name_last (\"Bracken\", \"Berly\", \"Ireland\"), player_id (\"walketo01\", \"chounch01\", \"vondech99\"), birth_month (4, 6, 8), name_first (\"Scotti\", \"Harl\", \"Rommie\"), name_given (\"Blaine M.\", \"Preston Meyer\", \"Victor Raymond\"), height (43, 82, 75), birth_country (\"Cuba\", \"Indonesia\", \"Belize\"), birth_state (\"IL\", \"Stirling\", \"Falcon\"), death_city (\"Northwood\", \"West Alexandria\", \"Caborca\"), death_year (1880, 1901, 2014), birth_city (\"Kinston\", \"Tularosa\", \"Rhems\"), death_country (\"P.R.\", \"\", \"Venezuela\"), birth_day (3, 27, 23), death_month (6, 1, 2), weight (257, 193, 245), debut (\"1882-05-11\", \"1886-08-24\", \"1920-09-17\") | fielding_outfield : grf (89, 65, 124), year (1899, 1887, 1930), gcf (84, 38, 18), glf (0, 68, 41), player_id (\"hamilto01\", \"denneto01\", \"sundabi01\"), stint (4, 1, 2) | player_college : college_id (\"longwoodva\", \"richmond\", \"wabelle\"), player_id (\"killebi01\", \"krukomi01\", \"alvarrj01\"), year (1924, 1956, 1908) | manager : inseason (5, 7, 4), league_id (\"PL\", \"UA\", \"FL\"), team_id (\"WS8\", \"CHA\", \"BS1\"), plyr_mgr (\"Y\", \"N\"), g (95, 70, 67), rank (3, 2, 9), w (49, 13, 61), l (113, 49, 101), year (1940, 1934, 1996), player_id (\"myershe01\", \"sisledi01\", \"johnsro01\") | salary : player_id (\"aokino01\", \"hendeji01\", \"nolteer01\"), salary (474000, 1102946, 10875000), league_id (\"NL\", \"AL\"), team_id (\"NYN\", \"NYA\", \"TOR\"), year (1998, 2015, 1994) | batting_postseason : r (3, 3, 2), bb (11, 1, 11), league_id (\"AA\", \"NL\", \"AL\"), year (1973, 1957, 2014), sb (7, 0, 10), cs (4, 1, 0), rbi (1, 3, 6), team_id (\"BAL\", \"BOS\", \"DET\"), player_id (\"martest01\", \"mcmilno01\", \"radinsc01\"), hbp (0, 2, 4), ab (12, 33, 33), ibb (0, 5, 3), double (2, 0, 4), g (7, 1, 9), so (1, 8, 13), triple (0, 3, 0), round (\"CS\", \"NLDS1\", \"NLDS2\"), h (5, 0, 4), sf (3, 0, 3), hr (0, 6, 4), g_idp (1, 2, 5), sh (\"\", 2, 2) | all_star : team_id (\"WAS\", \"WS2\", \"PIT\"), player_id (\"burnsbr01\", \"knowlda01\", \"goodmiv01\"), gp (1, 0, \"\"), game_id (\"NLS201307160\", \"NLS200907140\", \"ALS199707080\"), game_num (0, 2, 1), league_id (\"AL\", \"NL\"), year (1972, 1969, 1951), starting_pos (1, 9, 3) | hall_of_fame : needed_note (\"\", \"Top 20\", \"1st\"), category (\"Pioneer/Executive\", \"Umpire\", \"Umpire\"), yearid (1948, 1937, 1968), player_id (\"lucasre01\", \"womacto01\", \"bondsba01\"), needed (301, 225, 225), votes (189, 166, 433), inducted (\"Y\", \"N\"), votedby (\"Negro League\", \"Nominating Vote\", \"Veterans\"), ballots (571, 247, 251) | fielding_postseason : league_id (\"AL\", \"NL\"), g (9, 8, 6), sb (2, 13, 6), po (46, 79, 42), year (1926, 1940, 1922), team_id (\"WAS\", \"SLA\", \"TEX\"), a (6, 5, 19), round (\"NWDIV\", \"AWDIV\", \"AWDIV\"), e (6, 1, 8), gs (1, 5, 8), pos (\"C\", \"CF\", \"DH\"), inn_outs (48, 49, 106), tp (0, 1), player_id (\"krukjo01\", \"aceveal01\", \"contrjo01\"), pb (2, 3, 2), cs (0, 2, 0), dp (4, 11, 13) | team_half : w (31, 20, 23), year (1981), div_win (\"N\"), div_id (\"W\", \"E\"), l (28, 32, 42), g (52, 48, 55), league_id (\"NL\", \"AL\"), team_id (\"CAL\", \"CHN\", \"CLE\"), half (1, 2), rank (4, 4, 2) | team : ra (920, 790, 744), er (389, 629, 789), double (294, 300, 229), so (1005, 501, 818), year (1904, 1946, 1956), fp (0.84, 0.978, 0.976), soa (656, 543, 909), name (\"Tampa Bay Devil Rays\", \"St. Louis Red Stockings\", \"Kansas City Packers\"), w (53, 114, 72), bpf (94, 91, 129), dp (153, 155, 152), rank (9, 5, 12), era (3.19, 2.21, 4.49), ppf (118, 124, 114), sb (192, 342, 283), attendance (305420, 177796, 1697142), wc_win (\"\", \"N\", \"Y\"), ab (4093, 3507, 5469), park (\"Nationals Park\", \"AT&T Park\", \"Kingdome / Safeco Field\"), hra (22, 8, 180), r (624, 704, 1028), franchise_id (\"COR\", \"SLM\", \"ROC\"), g (152, 116, 6), league_id (\"NL\", \"AA\", \"FL\"), ipouts (2967, 3576, 336), team_id (\"SLN\", \"BL1\", \"CL2\"), triple (15, 123, 87), team_id_retro (\"NY1\", \"WS8\", \"OAK\"), ws_win (\"\", \"N\", \"Y\"), sv (38, 12, 22), hr (139, 162, 211), team_id_br (\"HAR\", \"CHW\", \"MAR\"), team_id_lahman45 (\"PH2\", \"RIC\", \"IND\"), ha (955, 1512, 836), l (90, 58, 96), hbp (89, 29, 33), div_id (\"W\", \"\", \"C\"), ghome (75, 70, 81), sf (43, 48, 57), div_win (\"\", \"Y\", \"N\"), cs (123, 124, 87), cg (146, 84, 125), e (347, 107, 293), sho (30, 25, 18), bba (307, 475, 729), lg_win (\"N\", \"Y\", \"\"), bb (728, 765, 144), h (1473, 1213, 1026) | manager_award_vote : year (1988, 1985, 2003), award_id (\"Mgr of the year\", \"Mgr of the Year\"), points_won (9, 99, 77), league_id (\"AL\", \"NL\"), player_id (\"mcnamjo99\", \"rigglji99\", \"corrapa01\"), points_max (28, 150, 28), votes_first (29, 27, 3) | batting : rbi (40, 54, 117), league_id (\"FL\", \"FL\", \"UA\"), g (65, 80, 34), ibb (68, 25, 15), sh (27, 1, 67), r (62, 38, 80), bb (92, 146, 28), stint (1, 3, 3), year (2009, 1933, 1912), h (186, 129, 200), double (\"\", 28, 1), so (190, 143, 190), hr (61, 26, 0), team_id (\"KC1\", \"SPU\", \"PHN\"), ab (266, 503, 196), sf (0, 16, 4), cs (5, 4, 4), player_id (\"allisda01\", \"sewared01\", \"smithch07\"), g_idp (4, 7, 11), sb (66, 118, 23), triple (16, 12, 16), hbp (34, 5, 39) | pitching_postseason : team_id (\"ARI\", \"MON\", \"TOR\"), ipouts (18, 213, 41), l (3, 4, 1), player_id (\"gulledo01\", \"gentrga01\", \"willivi01\"), wp (\"\", 1, 1), er (9, 13, 16), sho (3, 1, 2), hbp (3, \"\", \"\"), gf (0, 1, 0), league_id (\"AA\", \"NL\", \"AL\"), sv (3, 1, 4), round (\"AEDIV\", \"ALDS1\", \"AEDIV\"), hr (0, 2, 0), bk (\"\", 0, 1), g (6, 1, 7), gs (3, 0, 6), sf (4, 4, 3), bb (18, 16, 5), r (13, 16, 22), cg (2, 8, 1), baopp (\"0.288\", \"0.6\", \"0.268\"), bfp (60, 1, 91), h (52, 5, 26), era (5.27, 10.45, 3.48), so (9, 13, 15), sh (4, 3, 6), ibb (0, \"\", 0), g_idp (1, 2, 4), w (2, 3, 2), year (1917, 1931, 1910) | manager_award : award_id (\"BBWAA Manager of the year\", \"TSN Manager of the Year\"), league_id (\"AL\", \"NL\", \"ML\"), notes (\"\"), player_id (\"maddojo01\", \"showabu99\", \"bakerdu01\"), tie (\"\", \"Y\"), year (2000, 2005, 1952) | park : park_id (\"SEA01\", \"HOU03\", \"PHI10\"), park_name (\"Union Park\", \"Oriole Park IV\", \"Lloyd Street Grounds\"), park_alias (\"San Diego/Jack Murphy Stadium\", \"Redland Field\", \"Walpole Street Grounds\"), country (\"MX\", \"PR\", \"PR\"), state (\"ON\", \"MN\", \"MN\"), city (\"Rockford\", \"Sydney\", \"Dayton\") | manager_half : rank (5, 2, 7), g (26, 29, 75), half (1, 2), league_id (\"NL\", \"AL\"), player_id (\"torrejo01\", \"herzowh01\", \"torrejo01\"), team_id (\"HOU\", \"NYA\", \"LAN\"), inseason (2, 5, 2), year (1892, 1981), w (44, 40, 34), l (32, 32, 4) | appearances : g_of (153, 162, 64), g_defense (149, 46, 131), g_ph (28, 50, 1), g_rf (111, 110, 96), g_ss (60, 113, 46), g_pr (15, 23, 31), year (1897, 1890, 1962), g_3b (22, 109, 84), g_dh (116, 140, 0), league_id (\"AL\", \"\", \"\"), g_c (108, 24, 95), gs (46, 23, 52), g_2b (124, 108, 98), g_p (91, 40, 73), g_cf (76, 118, 116), g_lf (52, 110, 15), team_id (\"BUF\", \"MIN\", \"MLU\"), g_batting (8, 29, 99), player_id (\"stricbi01\", \"fultobi01\", \"mertzji01\"), g_all (96, 141, 161), g_1b (140, 5, 109) | player_award : year (1977, 1969, 1956), notes (\"1B\", \"2B\", \"2nd Game\"), player_id (\"hugheto04\", \"edwarbr01\", \"hershor01\"), tie (\"\", \"Y\"), league_id (\"AA\", \"AL\", \"ML\"), award_id (\"Babe Ruth Award\", \"TSN Guide MVP\", \"ALCS MVP\") | home_game : year (1940, 1946, 1977), span_last (\"1872-07-23\", \"1872-06-06\", \"1907-09-18\"), park_id (\"WAS01\", \"PHI12\", \"MNT01\"), team_id (\"PH2\", \"KCU\", \"KC2\"), league_id (\"FL\", \"\", \"\"), games (35, 62, 82), attendance (631416, 2644233, 1095361), span_first (\"1889-04-29\", \"1903-04-20\", \"1982-04-16\"), openings (74, 38, 64) | salary_team_salary : sum_salary (11166666, 266000, 400750), avg_salary (5071506, 488200, 410000), min_salary (4333000, 1875000, 1983333), name (\"Troy Trojans\", \"Louisville Colonels\", \"Pittsburg Alleghenys\"), max_salary (518200, 514000, 88000)",
        "ambiguous_queries": [
            "select avg(t1.salary) from salary as t1 join team as t2 on t1.team_id = t2.team_id_br where t2.name = 'Boston Red Stockings'",
            "select avg_salary from salary_team_salary where name = 'Boston Red Stockings'"
        ],
        "gold_ambiguity": {
            "match": "{\"average salary\": [{\"salary\": [\"salary\"]}, {\"salary_team_salary\": [\"avg_salary\"]}], \"team called\": [{\"salary_team_salary\": [\"name\"]}, {\"team\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average salary\" refers to the schema \"salary\".\"salary\", \"team called\" refers to the schema \"team\".\"name\"",
        "clear_ambiguity": "{\"average salary\": {\"salary\": [\"salary\"]}, \"team called\": {\"team\": [\"name\"]}}",
        "gold_query": "select avg(t1.salary) from salary as t1 join team as t2 on t1.team_id = t2.team_id_br where t2.name = 'Boston Red Stockings'"
    },
    {
        "index": 762,
        "db_id": "phone_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/phone_1/phone_1.sqlite",
        "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "schema_without_content": "chip_model : slots , ram_mib , wifi , bluetooth , model_name , launch_year , rom_mib  | screen_mode : char_cells , type , map , pixels , hardware_colours , graphics_mode , used_kb  | chip_model_phone_ram_mib : avg_ram_mib , min_ram_mib , max_ram_mib , sum_ram_mib , company_name  | phone : company_name , accreditation_type , screen_mode , chip_model , accreditation_level , date \", \"Approved \", \"Approved \", hardware_model_name ",
        "schema_with_content": "chip_model : slots (\"1CFII,1SD\", \"1SD\"), ram_mib (32.0, 64.0), wifi (\"No\", \"802.11b\"), bluetooth (\"1.1\", \"1.1\", \"Yes\"), model_name (\"X51v\", \"X30 high-end\", \"X51v\"), launch_year (2002.0, 2002.0, 2004.0), rom_mib (64.0, 128.0, 256.0) | screen_mode : char_cells (\"40 Ã 32\", \"80 Ã 25\", \"20 Ã 32\"), type (\"Graphics\", \"Text\"), map (\"6000â7FFF\", \"3000â7FFF\", \"5800â7FFF\"), pixels (\"320 Ã 200\", \"160 Ã 256\", \"320 Ã 200\"), hardware_colours (2.0, 4.0, 8.0), graphics_mode (3.0, 4.0, 3.0), used_kb (16.0, 8.0, 10.0) | chip_model_phone_ram_mib : avg_ram_mib (32.0, 64.0), min_ram_mib (32.0, 64.0), max_ram_mib (32.0, 64.0), sum_ram_mib (32.0, 64.0), company_name (\"Nokia Corporation\", \"Sony Mobile Communications\", \"LG Electronics\") | phone : company_name (\"Nokia Corporation\", \"HTC Corporation\", \"Nokia Corporation\"), accreditation_type (\"Full\", \"Provisional\"), screen_mode (\"1\", \"6\", \"1\"), chip_model (\"X50 Standard\", \"X5\", \"X5\"), accreditation_level (\"joyn Hot Fixes\", \"joyn\"), date (\"Approved (awarded 05.12.12)\", \"Approved (valid until 03.05.13)\", \"Approved (valid until 06.04.13)\"), hardware_model_name (\"LG-P760\", \"LG-P760\", \"GT-I9100\")",
        "ambiguous_queries": [
            "select max(t1.ram_mib), min(t1.ram_mib) from chip_model as t1 join phone as t2 on t1.model_name = t2.chip_model where t2.company_name = 'Nokia Corporation'",
            "select max_ram_mib, min_ram_mib from chip_model_phone_ram_mib where company_name = 'Nokia Corporation'"
        ],
        "gold_ambiguity": {
            "match": "{\"company name\": [{\"chip_model_phone_ram_mib\": [\"company_name\"]}, {\"phone\": [\"company_name\"]}], \"maximum\": [{\"chip_model\": [\"ram_mib\"]}, {\"chip_model_phone_ram_mib\": [\"max_ram_mib\"]}], \"minimum\": [{\"chip_model\": [\"ram_mib\"]}, {\"chip_model_phone_ram_mib\": [\"min_ram_mib\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"company name\" refers to the schema \"phone\".\"company_name\", \"maximum\" refers to the schema \"chip_model\".\"ram_mib\", \"minimum\" refers to the schema \"chip_model\".\"ram_mib\"",
        "clear_ambiguity": "{\"company name\": {\"phone\": [\"company_name\"]}, \"maximum\": {\"chip_model\": [\"ram_mib\"]}, \"minimum\": {\"chip_model\": [\"ram_mib\"]}}",
        "gold_query": "select max(t1.ram_mib), min(t1.ram_mib) from chip_model as t1 join phone as t2 on t1.model_name = t2.chip_model where t2.company_name = 'Nokia Corporation'"
    },
    {
        "index": 763,
        "db_id": "county_public_safety",
        "ambig_type": "aggregate",
        "db_file": "aggregate/county_public_safety/county_public_safety.sqlite",
        "question": "What are the minimum and maximum crime rate of counties?",
        "schema_without_content": "county_public_safety_crime_rate : min_crime_rate , max_crime_rate , avg_crime_rate , sum_crime_rate  | county_public_safety : residents_per_officer , police_officers , crime_rate , county_id , location , name , population , police_force , case_burden  | city : black , city_id , white , hispanic , name , asian , county_id , multiracial , amerindian ",
        "schema_with_content": "county_public_safety_crime_rate : min_crime_rate (150.0, 123.0, 123.0), max_crime_rate (178.0, 174.0, 178.0), avg_crime_rate (178.0, 123.0, 150.0), sum_crime_rate (178.0, 174.0, 178.0) | county_public_safety : residents_per_officer (770, 801, 770), police_officers (91, 187, 91), crime_rate (123.0, 118.0, 150.0), county_id (5, 2, 1), location (\"East\", \"West\", \"North\"), name (\"Campbell River\", \"Chilliwack\", \"Central Saanich\"), population (16821, 30810, 73066), police_force (\"Abbotsford Police Department\", \"RCMP\", \"Central Saanich Police\"), case_burden (140, 140, 100) | city : black (32.5, 32.5, 6.1), city_id (6, 14, 5), white (78.3, 78.3, 70.7), hispanic (99.1, 98.5, 98.5), name (\"Caguas\", \"Aguas Buenas\", \"Barceloneta\"), asian (0.2, 0.4, 0.0), county_id (2, 5, 2), multiracial (7.7, 8.2, 7.9), amerindian (0.2, 0.3, 0.9)",
        "ambiguous_queries": [
            "select min(crime_rate), max(crime_rate) from county_public_safety",
            "select min_crime_rate, max_crime_rate from county_public_safety_crime_rate"
        ],
        "gold_ambiguity": {
            "match": "{\"minimum\": [{\"county_public_safety\": [\"crime_rate\"]}, {\"county_public_safety_crime_rate\": [\"min_crime_rate\"]}], \"maximum\": [{\"county_public_safety\": [\"crime_rate\"]}, {\"county_public_safety_crime_rate\": [\"max_crime_rate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"minimum\" refers to the schema \"county_public_safety_crime_rate\".\"min_crime_rate\", \"maximum\" refers to the schema \"county_public_safety_crime_rate\".\"max_crime_rate\"",
        "clear_ambiguity": "{\"minimum\": {\"county_public_safety_crime_rate\": [\"min_crime_rate\"]}, \"maximum\": {\"county_public_safety_crime_rate\": [\"max_crime_rate\"]}}",
        "gold_query": "select min_crime_rate, max_crime_rate from county_public_safety_crime_rate"
    },
    {
        "index": 764,
        "db_id": "insurance_policies",
        "ambig_type": "aggregate",
        "db_file": "aggregate/insurance_policies/insurance_policies.sqlite",
        "question": "What is the total amount of settlement made for all the settlements?",
        "schema_without_content": "customers : customer_details , customer_id  | claims : amount_settled , policy_id , claim_id , date_claim_made , date_claim_settled , amount_claimed  | customer_policies : customer_id , start_date , policy_type_code , policy_id , end_date  | payments : amount_payment , date_payment_made , payment_method_code , payment_id , settlement_id  | settlements_amount_settled : sum_amount_settled , avg_amount_settled , max_amount_settled , min_amount_settled  | settlements : date_claim_made , customer_policy_id , date_claim_settled , amount_settled , settlement_id , amount_claimed , claim_id ",
        "schema_with_content": "customers : customer_details (\"Miss Felicita Reichel\", \"Mr. Edwardo Blanda I\", \"Sydnie Friesen\"), customer_id (5, 6, 9) | claims : amount_settled (1636, 1091, 1636), policy_id (738, 473, 858), claim_id (569, 843, 563), date_claim_made (\"2017-10-14\", \"2017-02-24\", \"2017-08-03\"), date_claim_settled (\"2017-09-04\", \"2017-12-20\", \"2018-02-20\"), amount_claimed (3326, 79134, 41078) | customer_policies : customer_id (5, 7, 5), start_date (\"2017-12-01\", \"2016-07-17\", \"2016-05-23\"), policy_type_code (\"Car\", \"Life\", \"Car\"), policy_id (270, 119, 900), end_date (\"2017-12-04\", \"2017-12-04\", \"2017-12-14\") | payments : amount_payment (38324, 448613, 241730), date_payment_made (\"2018-01-10\", \"2018-01-19\", \"2017-10-07\"), payment_method_code (\"American Express\", \"American Express\", \"Visa\"), payment_id (791, 779, 542), settlement_id (476, 476, 597) | settlements_amount_settled : sum_amount_settled (1427, 1042, 1508), avg_amount_settled (1767, 1676, 1737), max_amount_settled (1042, 1262, 1767), min_amount_settled (930, 1427, 1181) | settlements : date_claim_made (\"2017-05-19\", \"2016-05-18\", \"2017-03-04\"), customer_policy_id (638, 515, 133), date_claim_settled (\"2017-10-06\", \"2018-02-11\", \"2018-02-11\"), amount_settled (1293, 1181, 1293), settlement_id (983, 516, 648), amount_claimed (24055, 8634, 82506), claim_id (957, 563, 569)",
        "ambiguous_queries": [
            "select sum(amount_settled) from settlements",
            "select sum_amount_settled from settlements_amount_settled"
        ],
        "gold_ambiguity": {
            "match": "{\"total amount\": [{\"settlements\": [\"amount_settled\"]}, {\"settlements_amount_settled\": [\"sum_amount_settled\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total amount\" refers to the schema \"settlements\".\"amount_settled\"",
        "clear_ambiguity": "{\"total amount\": {\"settlements\": [\"amount_settled\"]}}",
        "gold_query": "select sum(amount_settled) from settlements"
    },
    {
        "index": 765,
        "db_id": "manufacturer",
        "ambig_type": "aggregate",
        "db_file": "aggregate/manufacturer/manufacturer.sqlite",
        "question": "How many furniture components are there in total?",
        "schema_without_content": "furniture_num_of_component : avg_num_of_component , max_num_of_component , sum_num_of_component , min_num_of_component  | manufacturer : manufacturer_id , num_of_factories , open_year , num_of_shops , name  | furniture_manufacte : manufacturer_id , price_in_dollar , furniture_id  | furniture : furniture_id , num_of_component , name , market_rate ",
        "schema_with_content": "furniture_num_of_component : avg_num_of_component (12, 6, 4), max_num_of_component (6, 5, 12), sum_num_of_component (6, 3, 12), min_num_of_component (6, 12, 3) | manufacturer : manufacturer_id (1, 6, 4), num_of_factories (12, 36, 36), open_year (1980.0, 2000.0, 1980.0), num_of_shops (4, 4, 4), name (\"Jiaju\", \"Chevrolet House\", \"IKEA\") | furniture_manufacte : manufacturer_id (7, 4, 1), price_in_dollar (2124.0, 1234.0, 450.0), furniture_id (7, 1, 7) | furniture : furniture_id (1, 6, 7), num_of_component (5, 12, 5), name (\"Billiard table\", \"Bookcase\", \"Four-poster bed\"), market_rate (1.0, 3.5, 0.5)",
        "ambiguous_queries": [
            "select sum(num_of_component) from furniture",
            "select sum_num_of_component from furniture_num_of_component"
        ],
        "gold_ambiguity": {
            "match": "{\"total\": [{\"furniture\": [\"num_of_component\"]}, {\"furniture_num_of_component\": [\"sum_num_of_component\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total\" refers to the schema \"furniture_num_of_component\".\"sum_num_of_component\"",
        "clear_ambiguity": "{\"total\": {\"furniture_num_of_component\": [\"sum_num_of_component\"]}}",
        "gold_query": "select sum_num_of_component from furniture_num_of_component"
    },
    {
        "index": 766,
        "db_id": "party_host",
        "ambig_type": "aggregate",
        "db_file": "aggregate/party_host/party_host.sqlite",
        "question": "What is the average number of hosts for parties?",
        "schema_without_content": "party : party_id , last_year , first_year , location , party_theme , number_of_hosts  | party_number_of_hosts : min_number_of_hosts , max_number_of_hosts , avg_number_of_hosts , sum_number_of_hosts  | party_host : host_id , is_main_in_charge , party_id  | host : nationality , age , host_id , name ",
        "schema_with_content": "party : party_id (3, 5, 5), last_year (\"2010\", \"2001\", \"2007\"), first_year (\"2002\", \"2004\", \"1999\"), location (\"Various locations\", \"RAI Amsterdam\", \"RAI Amsterdam\"), party_theme (\"Club Q-BASE\", \"Houseqlassics\", \"Houseqlassics\"), number_of_hosts (23, 31, 18) | party_number_of_hosts : min_number_of_hosts (18, 18, 31), max_number_of_hosts (23, 5, 31), avg_number_of_hosts (7, 5, 5), sum_number_of_hosts (5, 7, 31) | party_host : host_id (5, 3, 10), is_main_in_charge (\"T\", \"F\"), party_id (2, 4, 1) | host : nationality (\"United States\", \"Hungary\", \"Argentina\"), age (\"43\", \"45\", \"37\"), host_id (6, 9, 7), name (\"Carlos Delfino\", \"Hubert Davis\", \"Ed Davis\")",
        "ambiguous_queries": [
            "select avg(number_of_hosts) from party",
            "select avg_number_of_hosts from party_number_of_hosts"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of hosts\": [{\"party\": [\"number_of_hosts\"]}, {\"party_number_of_hosts\": [\"avg_number_of_hosts\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of hosts\" refers to the schema \"party_number_of_hosts\".\"avg_number_of_hosts\"",
        "clear_ambiguity": "{\"average number of hosts\": {\"party_number_of_hosts\": [\"avg_number_of_hosts\"]}}",
        "gold_query": "select avg_number_of_hosts from party_number_of_hosts"
    },
    {
        "index": 767,
        "db_id": "college_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_1/college_1.sqlite",
        "question": "What are the total number of credits offered by each department?",
        "schema_without_content": "student : stu_lname , stu_transfer , stu_hrs , stu_fname , dept_code , stu_phone , stu_init , stu_num , stu_dob , stu_class , stu_gpa , prof_num  | class : class_room , class_time , crs_code , class_code , prof_num , class_section  | course_class_crs_credit : max_crs_credit , min_crs_credit , avg_crs_credit , dept_code , sum_crs_credit  | course : crs_code , dept_code , crs_description , crs_credit  | enroll : class_code , stu_num , enroll_grade  | employee : emp_hiredate , emp_jobcode , emp_num , emp_fname , emp_lname , emp_initial , emp_dob  | department : dept_extension , dept_code , emp_num , dept_address , school_code , dept_name  | professor : prof_office , dept_code , emp_num , prof_high_degree , prof_extension ",
        "schema_with_content": "student : stu_lname (\"Smithson\", \"Smithson\", \"Oblonski\"), stu_transfer (0, 1), stu_hrs (42, 81, 66), stu_fname (\"Walter\", \"Gerald\", \"William\"), dept_code (\"ACCT\", \"ACCT\", \"EDU\"), stu_phone (\"2315\", \"2114\", \"2267\"), stu_init (\"\", \"T\", \"D\"), stu_num (324299, 321452, 324269), stu_dob (\"1969-8-23\", \"1958-12-30\", \"1976-9-16\"), stu_class (\"Fr\", \"So\", \"Fr\"), stu_gpa (2.92, 3.09, 3.15), prof_num (311, 205, 311) | class : class_room (\"KLR200\", \"KLR209\", \"KLR209\"), class_time (\"TTh 1:00-2:15 p.m.\", \"TTh 2:30-3:45 p.m.\", \"MWF 9:00-9:50 a.m.\"), crs_code (\"QM-261\", \"QM-261\", \"ACCT-211\"), class_code (\"10013\", \"10019\", \"10014\"), prof_num (162, 301, 342), class_section (\"1\", \"2\", \"3\") | course_class_crs_credit : max_crs_credit (3.0, 4.0), min_crs_credit (3.0, 4.0), avg_crs_credit (3.0, 4.0), dept_code (\"ACCT\", \"CIS\"), sum_crs_credit (3.0, 4.0) | course : crs_code (\"ACCT-212\", \"QM-261\", \"ACCT-212\"), dept_code (\"ACCT\", \"CIS\"), crs_description (\"Accounting II\", \"Statistical Applications\", \"Accounting I\"), crs_credit (3.0, 4.0) | enroll : class_code (\"10014\", \"10018\", \"10021\"), stu_num (321452, 324257), enroll_grade (\"C\", \"B\", \"A\") | employee : emp_hiredate (\"1994-2-21\", \"1991-4-23\", \"1984-8-1\"), emp_jobcode (\"CLRK\", \"CLRK\", \"TECH\"), emp_num (166, 102, 122), emp_fname (\"Doreen\", \"Arnelle\", \"Weston\"), emp_lname (\"Ritula\", \"Graztevski\", \"Smithson\"), emp_initial (\"D\", \"B\", \"S\"), emp_dob (\"1962-10-2\", \"1949-5-16\", \"1963-10-2\") | department : dept_extension (\"1004\", \"1867\", \"1004\"), dept_code (\"ACCT\", \"MKT/MGT\", \"CIS\"), emp_num (114, 103, 209), dept_address (\"KLR 333, Box 56\", \"BBG 208, Box 132\", \"AAK 230, Box 415\"), school_code (\"BUS\", \"A&SCI\"), dept_name (\"Marketing/Management\", \"Computer Info. Systems\", \"Computer Info. Systems\") | professor : prof_office (\"KLR 300\", \"AAK 297\", \"AAK 194\"), dept_code (\"HIST\", \"MKT/MGT\", \"MKT/MGT\"), emp_num (162, 342, 105), prof_high_degree (\"MBA\", \"MA\", \"MA\"), prof_extension (\"2000\", \"2851\", \"3412\")",
        "ambiguous_queries": [
            "select sum(t1.crs_credit), t1.dept_code from course as t1 join class as t2 on t1.crs_code = t2.crs_code group by t1.dept_code",
            "select sum_crs_credit, dept_code from course_class_crs_credit"
        ],
        "gold_ambiguity": {
            "match": "{\"total number of credits\": [{\"course\": [\"crs_credit\"]}, {\"course_class_crs_credit\": [\"sum_crs_credit\"]}], \"department\": [{\"course\": [\"dept_code\"]}, {\"course_class_crs_credit\": [\"dept_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total number of credits\" refers to the schema \"course_class_crs_credit\".\"sum_crs_credit\", \"department\" refers to the schema \"course_class_crs_credit\".\"dept_code\"",
        "clear_ambiguity": "{\"total number of credits\": {\"course_class_crs_credit\": [\"sum_crs_credit\"]}, \"department\": {\"course_class_crs_credit\": [\"dept_code\"]}}",
        "gold_query": "select sum_crs_credit, dept_code from course_class_crs_credit"
    },
    {
        "index": 768,
        "db_id": "candidate_poll",
        "ambig_type": "aggregate",
        "db_file": "aggregate/candidate_poll/candidate_poll.sqlite",
        "question": "Find the average and minimum weight for each gender.",
        "schema_without_content": "candidate : oppose_rate , poll_source , people_id , consider_rate , unsure_rate , support_rate , candidate_id , date  | people_weight : max_weight , avg_weight , sum_weight , min_weight , sex  | people : weight , name , date_of_birth , sex , people_id , height ",
        "schema_with_content": "candidate : oppose_rate (0.44, 0.45, 0.32), poll_source (\"WNBC/Marist Poll\", \"FOX News/Opinion Dynamics Poll\", \"Newsweek Poll\"), people_id (7, 4, 4), consider_rate (0.3, 0.34, 0.27), unsure_rate (0.2, 0.9, 0.2), support_rate (0.25, 0.24, 0.18), candidate_id (3, 3, 6), date (\"Feb 12â15, 2007\", \"Feb 13â14, 2007\", \"Nov 9â10, 2006\") | people_weight : max_weight (82.0, 90.0, 83.0), avg_weight (94.0, 88.0, 88.0), sum_weight (94.0, 90.0, 82.0), min_weight (82.0, 82.0, 92.0), sex (\"M\", \"F\") | people : weight (94.0, 88.0, 90.0), name (\"StÃ©phane Antiga\", \"Philippe BarÃ§a-Cysique\", \"Frantz Granvorka\"), date_of_birth (\"01.09.1977\", \"20.08.1970\", \"20.08.1970\"), sex (\"M\", \"F\"), people_id (2, 5, 8), height (196.0, 197.0, 197.0)",
        "ambiguous_queries": [
            "select avg(weight), min(weight), sex from people group by sex",
            "select avg_weight, min_weight, sex from people_weight"
        ],
        "gold_ambiguity": {
            "match": "{\"gender\": [{\"people\": [\"sex\"]}, {\"people_weight\": [\"sex\"]}], \"minimum\": [{\"people\": [\"weight\"]}, {\"people_weight\": [\"min_weight\"]}], \"average\": [{\"people\": [\"weight\"]}, {\"people_weight\": [\"avg_weight\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"gender\" refers to the schema \"people\".\"sex\", \"minimum\" refers to the schema \"people\".\"weight\", \"average\" refers to the schema \"people\".\"weight\"",
        "clear_ambiguity": "{\"gender\": {\"people\": [\"sex\"]}, \"minimum\": {\"people\": [\"weight\"]}, \"average\": {\"people\": [\"weight\"]}}",
        "gold_query": "select avg(weight), min(weight), sex from people group by sex"
    },
    {
        "index": 769,
        "db_id": "world_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/world_1/world_1.sqlite",
        "question": "What is the total population of Gelderland district?",
        "schema_without_content": "sqlite_sequence : name , seq  | city_population : sum_population , max_population , avg_population , min_population  | city : district , population , name , id , countrycode  | country : governmentform \", capital , code , gnp , surfacearea , headofstate , population , continent , name , indepyear , region , gnpold , localname , code2 , lifeexpectancy  | countrylanguage : language , countrycode , isofficial , percentage ",
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | city_population : sum_population (309010, 95311, 164092), max_population (586300, 101000, 117539), avg_population (179000, 134355, 141700), min_population (133859, 115171, 100079) | city : district (\"Idaho\", \"ParÃ¡\", \"San Miguelito\"), population (149473, 101792, 288100), name (\"Sariwon\", \"Chang-won\", \"Rawalpindi\"), id (3727, 2468, 2488), countrycode (\"MWI\", \"HND\", \"CHL\") | country : governmentform (\"Commonwealth of the US\", \"Islamic Emirate\", \"Constitutional Monarchy (Emirate)\"), capital (3017, 538, 2486), code (\"SWE\", \"ZMB\", \"CIV\"), gnp (612.0, 75921.0, 195746.0), surfacearea (193.0, 751.0, 637657.0), headofstate (\"Norodom Sihanouk\", \"kenraali Than Shwe\", \"HeydÃ¤r Ãliyev\"), population (18827000, 217000, 31147000), continent (\"North America\", \"North America\", \"Asia\"), name (\"Singapore\", \"Finland\", \"Germany\"), indepyear (1955, 1983, 1946), region (\"Micronesia\", \"Southeast Asia\", \"Melanesia\"), gnpold (430572.0, 173610.0, 2383.0), localname (\"ToÃ§ikiston\", \"Qatar\", \"Al-Maghrib\"), code2 (\"SY\", \"SB\", \"GE\"), lifeexpectancy (63.1, 69.1, 69.9) | countrylanguage : language (\"Tadzhik\", \"Cakchiquel\", \"Dagara\"), countrycode (\"ISL\", \"MSR\", \"LAO\"), isofficial (\"T\", \"F\"), percentage (5.1, 16.1, 28.8)",
        "ambiguous_queries": [
            "select sum(population) from city where district = 'Gelderland'",
            "select sum_population from city_population where district = 'Gelderland'"
        ],
        "gold_ambiguity": {
            "match": "{\"district\": [{\"city\": [\"district\"]}, {\"city_population\": [\"district\"]}], \"total population\": [{\"city\": [\"population\"]}, {\"city_population\": [\"sum_population\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"district\" refers to the schema \"city_population\".\"district\", \"total population\" refers to the schema \"city_population\".\"sum_population\"",
        "clear_ambiguity": "{\"district\": {\"city_population\": [\"district\"]}, \"total population\": {\"city_population\": [\"sum_population\"]}}",
        "gold_query": "select sum_population from city_population where district = 'Gelderland'"
    },
    {
        "index": 770,
        "db_id": "program_share",
        "ambig_type": "aggregate",
        "db_file": "aggregate/program_share/program_share.sqlite",
        "question": "What is the total rating of channel for each channel owner?",
        "schema_without_content": "channel : share_in_percent , owner , name , channel_id , rating_in_percent  | channel_rating_in_percent : min_rating_in_percent , max_rating_in_percent , owner , avg_rating_in_percent , sum_rating_in_percent  | program : owner \", \"Shanghai Media Group \", \"Southern Media Corporation \", program_id , launch , origin , name  | broadcast : time_of_day , program_id , channel_id  | broadcast_share : program_id , date , channel_id , share_in_percent ",
        "schema_with_content": "channel : share_in_percent (2.33, 3.76, 2.33), owner (\"HBS\", \"HBS\", \"HBS\"), name (\"Anhui Satellite TV\", \"CCTV-8\", \"CCTV-1\"), channel_id (2, 6, 7), rating_in_percent (0.54, 0.32, 0.53) | channel_rating_in_percent : min_rating_in_percent (0.19, 0.3, 0.32), max_rating_in_percent (0.29, 0.29, 0.31), owner (\"CCTV\", \"Anhui Television\", \"Anhui Television\"), avg_rating_in_percent (0.53, 0.53, 0.19), sum_rating_in_percent (0.2, 0.2, 0.53) | program : owner (\"Beijing Television (BTV)\", \"Shanghai Media Group (SMG)\", \"Southern Media Corporation (SMC)\"), program_id (2, 1, 5), launch (2004.0, 2005.0, 2007.0), origin (\"Guangdong\", \"Shanghai\", \"Guangdong\"), name (\"Youman\", \"Aniworld\", \"Toonmax\") | broadcast : time_of_day (\"Morning\", \"Night\", \"Noon\"), program_id (1, 2, 2), channel_id (7, 5, 8) | broadcast_share : program_id (4, 1, 2), date (\"10,Jun\", \"01,May\", \"13,May\"), channel_id (9, 6, 5), share_in_percent (3.1, 1.9, 1.9)",
        "ambiguous_queries": [
            "select sum(rating_in_percent), owner from channel group by owner",
            "select sum_rating_in_percent, owner from channel_rating_in_percent"
        ],
        "gold_ambiguity": {
            "match": "{\"total rating\": [{\"channel\": [\"rating_in_percent\"]}, {\"channel_rating_in_percent\": [\"sum_rating_in_percent\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total rating\" refers to the schema \"channel_rating_in_percent\".\"sum_rating_in_percent\"",
        "clear_ambiguity": "{\"total rating\": {\"channel_rating_in_percent\": [\"sum_rating_in_percent\"]}}",
        "gold_query": "select sum_rating_in_percent, owner from channel_rating_in_percent"
    },
    {
        "index": 771,
        "db_id": "college_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_1/college_1.sqlite",
        "question": "How many hours do the students spend studying in each department?",
        "schema_without_content": "enroll : enroll_grade , stu_num , class_code  | employee : emp_dob , emp_lname , emp_jobcode , emp_fname , emp_initial , emp_num , emp_hiredate  | class : class_room , class_section , crs_code , class_time , class_code , prof_num  | student : stu_class , stu_phone , prof_num , stu_fname , stu_transfer , stu_lname , stu_num , stu_gpa , stu_hrs , dept_code , stu_init , stu_dob  | professor : prof_high_degree , dept_code , prof_extension , emp_num , prof_office  | student_stu_hrs : max_stu_hrs , min_stu_hrs , avg_stu_hrs , dept_code , sum_stu_hrs  | course : crs_description , dept_code , crs_code , crs_credit  | department : dept_extension , dept_address , dept_name , emp_num , dept_code , school_code ",
        "schema_with_content": "enroll : enroll_grade (\"C\", \"B\", \"A\"), stu_num (321452, 324257), class_code (\"10014\", \"10018\", \"10021\") | employee : emp_dob (\"1960-4-25\", \"1950-6-12\", \"1941-3-4\"), emp_lname (\"Wilson\", \"Donelly\", \"Jones\"), emp_jobcode (\"TECH\", \"PROF\", \"PROF\"), emp_fname (\"Willa\", \"Ross\", \"Herman\"), emp_initial (\"F\", \"T\", \"A\"), emp_num (105, 110, 333), emp_hiredate (\"1989-8-1\", \"1983-8-1\", \"1994-11-15\") | class : class_room (\"KLR200\", \"BUS311\", \"BUS311\"), class_section (\"1\", \"2\", \"3\"), crs_code (\"QM-261\", \"ACCT-211\", \"QM-362\"), class_time (\"W 6:00-8:40 p.m.\", \"MWF 8:00-8:50 a.m.\", \"TTh 2:30-3:45 p.m.\"), class_code (\"10018\", \"10014\", \"10018\"), prof_num (105, 301, 228) | student : stu_class (\"Sr\", \"Jr\", \"Jr\"), stu_phone (\"2231\", \"2256\", \"2256\"), prof_num (222, 311, 205), stu_fname (\"Gerald\", \"Juliette\", \"Walter\"), stu_transfer (0, 1), stu_lname (\"Bowser\", \"Katinga\", \"Smithson\"), stu_num (324274, 324299, 321452), stu_gpa (3.27, 2.84, 3.87), stu_hrs (81, 120, 81), dept_code (\"ACCT\", \"BIOL\", \"ACCT\"), stu_init (\"D\", \"B\", \"B\"), stu_dob (\"1975-2-12\", \"1979-10-21\", \"1975-2-12\") | professor : prof_high_degree (\"MA\", \"DBA\", \"DBA\"), dept_code (\"ART\", \"CIS\", \"HIST\"), prof_extension (\"2000\", \"2278\", \"5561\"), emp_num (155, 401, 114), prof_office (\"KLR 284\", \"KLR 126\", \"KLR 229D\") | student_stu_hrs : max_stu_hrs (81, 114, 120), min_stu_hrs (42, 66, 120), avg_stu_hrs (120, 102, 114), dept_code (\"CIS\", \"ENGL\", \"ENGL\"), sum_stu_hrs (102, 120, 66) | course : crs_description (\"Database Design and Implementation\", \"Statistical Applications\", \"Intro. to Statistics\"), dept_code (\"ACCT\", \"CIS\"), crs_code (\"ACCT-212\", \"CIS-420\", \"ACCT-211\"), crs_credit (3.0, 4.0) | department : dept_extension (\"1867\", \"4234\", \"2008\"), dept_address (\"AAK 297, Box 438\", \"KLR 284, Box 63\", \"AAK 297, Box 438\"), dept_name (\"Sociology\", \"Psychology\", \"Biology\"), emp_num (209, 195, 435), dept_code (\"ECON/FIN\", \"BIOL\", \"CIS\"), school_code (\"BUS\", \"A&SCI\")",
        "ambiguous_queries": [
            "select sum(stu_hrs), dept_code from student group by dept_code",
            "select sum_stu_hrs, dept_code from student_stu_hrs"
        ],
        "gold_ambiguity": {
            "match": "{\"department\": [{\"student\": [\"dept_code\"]}, {\"student_stu_hrs\": [\"dept_code\"]}], \"How many hours\": [{\"student\": [\"stu_hrs\"]}, {\"student_stu_hrs\": [\"sum_stu_hrs\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"department\" refers to the schema \"student\".\"dept_code\", \"How many hours\" refers to the schema \"student\".\"stu_hrs\"",
        "clear_ambiguity": "{\"department\": {\"student\": [\"dept_code\"]}, \"How many hours\": {\"student\": [\"stu_hrs\"]}}",
        "gold_query": "select sum(stu_hrs), dept_code from student group by dept_code"
    },
    {
        "index": 772,
        "db_id": "candidate_poll",
        "ambig_type": "aggregate",
        "db_file": "aggregate/candidate_poll/candidate_poll.sqlite",
        "question": "For each sex, what is the name and sex of the candidate with the minimum oppose rate for their sex?",
        "schema_without_content": "people_candidate_oppose_rate : name , sum_oppose_rate , min_oppose_rate , max_oppose_rate , sex , avg_oppose_rate  | candidate : consider_rate , date , poll_source , oppose_rate , support_rate , people_id , unsure_rate , candidate_id  | people : date_of_birth , name , sex , height , people_id , weight ",
        "schema_with_content": "people_candidate_oppose_rate : name (\"Frantz Granvorka\", \"Philippe BarÃ§a-Cysique\", \"StÃ©phane Antiga\"), sum_oppose_rate (0.44, 0.45, 0.32), min_oppose_rate (0.32, 0.43, 0.32), max_oppose_rate (0.32, 0.43, 0.44), sex (\"M\", \"F\"), avg_oppose_rate (0.32, 0.44, 0.45) | candidate : consider_rate (0.3, 0.27, 0.34), date (\"Feb 12â15, 2007\", \"Feb 13â14, 2007\", \"Nov 9â10, 2006\"), poll_source (\"WNBC/Marist Poll\", \"FOX News/Opinion Dynamics Poll\", \"Newsweek Poll\"), oppose_rate (0.32, 0.44, 0.32), support_rate (0.17, 0.17, 0.17), people_id (7, 4, 6), unsure_rate (0.9, 0.9, 0.3), candidate_id (2, 3, 3) | people : date_of_birth (\"05.05.1972\", \"03.02.1976\", \"05.05.1972\"), name (\"StÃ©phane Antiga\", \"LoÃ¯c De Kergret\", \"Dominique Daquin\"), sex (\"M\", \"F\"), height (194.0, 196.0, 200.0), people_id (3, 7, 9), weight (88.0, 83.0, 88.0)",
        "ambiguous_queries": [
            "select t1.name, t1.sex, min(oppose_rate) from people as t1 join candidate as t2 on t1.people_id = t2.people_id group by t1.sex",
            "select name, sex, min_oppose_rate from people_candidate_oppose_rate"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"people\": [\"name\"]}, {\"people_candidate_oppose_rate\": [\"name\"]}], \"minimum oppose rate\": [{\"people\": [\"oppose_rate\"]}, {\"people_candidate_oppose_rate\": [\"min_oppose_rate\"]}], \"sex\": [{\"people\": [\"sex\"]}, {\"people_candidate_oppose_rate\": [\"sex\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"people_candidate_oppose_rate\".\"name\", \"minimum oppose rate\" refers to the schema \"people_candidate_oppose_rate\".\"min_oppose_rate\", \"sex\" refers to the schema \"people_candidate_oppose_rate\".\"sex\"",
        "clear_ambiguity": "{\"name\": {\"people_candidate_oppose_rate\": [\"name\"]}, \"minimum oppose rate\": {\"people_candidate_oppose_rate\": [\"min_oppose_rate\"]}, \"sex\": {\"people_candidate_oppose_rate\": [\"sex\"]}}",
        "gold_query": "select name, sex, min_oppose_rate from people_candidate_oppose_rate"
    },
    {
        "index": 773,
        "db_id": "performance_attendance",
        "ambig_type": "aggregate",
        "db_file": "aggregate/performance_attendance/performance_attendance.sqlite",
        "question": "What is the average number of attendees for performances?",
        "schema_without_content": "performance : performance_id , attendance , host , location , date  | performance_attendance : max_attendance , avg_attendance , sum_attendance , min_attendance  | member : member_id , nationality , name , role  | member_attendance : performance_id , num_of_pieces , member_id ",
        "schema_with_content": "performance : performance_id (2.0, 6.0, 6.0), attendance (2173, 2173, 1878), host (\"New York Rangers\", \"New York Rangers\", \"Ottawa Senators\"), location (\"Madison Square Garden\", \"Verizon Center\", \"Madison Square Garden\"), date (\"February 10\", \"February 2\", \"February 4\") | performance_attendance : max_attendance (1982, 2173, 1878), avg_attendance (2173, 1820, 1982), sum_attendance (1982, 165, 165), min_attendance (2173, 1982, 1982) | member : member_id (\"9\", \"3\", \"6\"), nationality (\"Uruguay\", \"Argentina\", \"United States\"), name (\"Charlie Burke\", \"Juan Espil\", \"Luis GonzÃ¡lez\"), role (\"Viola\", \"Violin\", \"Cello\") | member_attendance : performance_id (2, 3, 1), num_of_pieces (3, 1, 3), member_id (2, 4, 2)",
        "ambiguous_queries": [
            "select avg(attendance) from performance",
            "select avg_attendance from performance_attendance"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of attendees\": [{\"performance\": [\"attendance\"]}, {\"performance_attendance\": [\"avg_attendance\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of attendees\" refers to the schema \"performance_attendance\".\"avg_attendance\"",
        "clear_ambiguity": "{\"average number of attendees\": {\"performance_attendance\": [\"avg_attendance\"]}}",
        "gold_query": "select avg_attendance from performance_attendance"
    },
    {
        "index": 774,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
        "schema_without_content": "files : f_id , artist_name , formats , file_size , duration  | files_song_resolution : avg_resolution , sum_resolution , min_resolution , duration , max_resolution  | genre : g_name , rating , most_popular_in  | song : song_name , artist_name , languages , f_id , releasedate , country , genre_is , resolution , rating  | artist : gender , preferred_genre , country , artist_name ",
        "schema_with_content": "files : f_id (6, 6, 2), artist_name (\"Michel\", \"Enrique\", \"Prity\"), formats (\"mp4\", \"mp3\"), file_size (\"4.12 MB\", \"3.78 MB\", \"3.69 MB\"), duration (\"3:45\", \"2:56\", \"4:34\") | files_song_resolution : avg_resolution (720, 320, 320), sum_resolution (320, 720, 720), min_resolution (320, 1080, 320), duration (\"5:23\", \"4:34\", \"4:34\"), max_resolution (720, 1080, 720) | genre : g_name (\"tagore\", \"nazrul\", \"nazrul\"), rating (\"8\", \"7\", \"9\"), most_popular_in (\"America\", \"Canada\", \"Canada\") | song : song_name (\"My love\", \"Just beat it\", \"Ami opar hoye\"), artist_name (\"Prity\", \"Shrikanta\", \"Topu\"), languages (\"bangla\", \"english\"), f_id (2, 3, 5), releasedate (\"27-MAR-2004\", \"21-SEP-1997\", \"27-MAR-2004\"), country (\"Bangladesh\", \"Bangladesh\", \"Bangladesh\"), genre_is (\"modern\", \"folk\", \"tagore\"), resolution (1080, 512, 1080), rating (5, 8, 8) | artist : gender (\"Male\", \"Female\"), preferred_genre (\"tagore\", \"pop\", \"folk\"), country (\"USA\", \"India\", \"India\"), artist_name (\"Shrikanta\", \"Topu\", \"Enrique\")",
        "ambiguous_queries": [
            "select max(t2.resolution), min(t2.resolution) from files as t1 join song as t2 on t1.f_id = t2.f_id where t1.duration like '3:%'",
            "select max_resolution, min_resolution from files_song_resolution where duration like '3:%'"
        ],
        "gold_ambiguity": {
            "match": "{\"minutes\": [{\"files\": [\"duration\"]}, {\"files_song_resolution\": [\"duration\"]}], \"maximum\": [{\"files_song_resolution\": [\"max_resolution\"]}, {\"song\": [\"resolution\"]}], \"minimum\": [{\"files_song_resolution\": [\"min_resolution\"]}, {\"song\": [\"resolution\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"minutes\" refers to the schema \"files\".\"duration\", \"maximum\" refers to the schema \"song\".\"resolution\", \"minimum\" refers to the schema \"song\".\"resolution\"",
        "clear_ambiguity": "{\"minutes\": {\"files\": [\"duration\"]}, \"maximum\": {\"song\": [\"resolution\"]}, \"minimum\": {\"song\": [\"resolution\"]}}",
        "gold_query": "select max(t2.resolution), min(t2.resolution) from files as t1 join song as t2 on t1.f_id = t2.f_id where t1.duration like '3:%'"
    },
    {
        "index": 775,
        "db_id": "baseball_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/baseball_1/baseball_1.sqlite",
        "question": "What is the average height of the players from the college named 'Yale University'?",
        "schema_without_content": "fielding : dp , year , pos , po , wp , inn_outs , cs , player_id , zr , e , team_id , gs , sb , league_id , g , a , pb , stint  | manager_award_vote : points_won , league_id , votes_first , points_max , year , player_id , award_id  | player_award_vote : player_id , votes_first , league_id , year , award_id , points_won , points_max  | manager_half : g , rank , team_id , player_id , half , league_id , inseason , w , year , l  | player_player_college_college_height : avg_height , sum_height , name_full , max_height , min_height  | home_game : span_last , park_id , attendance , games , span_first , team_id , openings , league_id , year  | pitching_postseason : wp , gs , gf , sh , h , hbp , ipouts , baopp , er , l , bb , team_id , era , hr , so , sho , g_idp , cg , bfp , w , round , league_id , player_id , ibb , sv , year , sf , r , g , bk  | park : city , country , state , park_id , park_name , park_alias  | player_award : league_id , year , award_id , tie , notes , player_id  | hall_of_fame : category , needed , needed_note , votedby , votes , ballots , player_id , yearid , inducted  | fielding_outfield : gcf , year , player_id , glf , grf , stint  | player : name_last , birth_state , birth_country , death_month , death_day , birth_year , death_city , birth_month , bats , final_game , death_country , height , death_state , weight , throws , birth_city , name_given , bbref_id , death_year , debut , birth_day , player_id , retro_id , name_first  | college : name_full , state , college_id , city , country  | batting_postseason : rbi , sb , league_id , year , hbp , triple , so , g_idp , sh , team_id , ab , hr , sf , ibb , h , bb , round , g , player_id , cs , double , r  | appearances : g_pr , g_2b , g_of , g_ss , g_rf , g_all , league_id , g_cf , team_id , g_p , g_lf , g_3b , g_1b , g_ph , year , player_id , g_defense , gs , g_dh , g_batting , g_c  | manager_award : league_id , award_id , tie , notes , player_id , year  | manager : plyr_mgr , l , player_id , g , year , inseason , league_id , team_id , w , rank  | salary : team_id , salary , player_id , league_id , year  | player_college : college_id , year , player_id  | pitching : l , g_idp , sho , r , player_id , bfp , bb , era , wp , gf , stint , h , sf , cg , hbp , sv , year , er , bk , so , baopp , ibb , sh , w , league_id , hr , team_id , gs , g , ipouts  | fielding_postseason : e , team_id , gs , league_id , pos , inn_outs , pb , dp , sb , tp , po , g , year , a , round , player_id , cs  | batting : g , player_id , rbi , sf , bb , hbp , stint , triple , so , year , cs , sb , ab , league_id , h , ibb , r , team_id , g_idp , sh , hr , double  | team_franchise : franchise_name , na_assoc , active , franchise_id  | postseason : team_id_winner , wins , losses , ties , team_id_loser , year , league_id_winner , round , league_id_loser  | team : league_id , lg_win , sb , team_id_br , team_id_lahman45 , ipouts , park , sf , triple , rank , hbp , e , bba , w , bb , fp , er , cs , cg , ws_win , wc_win , dp , div_win , era , ppf , year , ghome , team_id_retro , franchise_id , div_id , bpf , sho , ha , r , ab , g , hra , double , sv , l , hr , soa , team_id , ra , attendance , h , so , name  | all_star : year , gp , team_id , league_id , player_id , starting_pos , game_id , game_num  | team_half : year , g , div_id , team_id , div_win , league_id , w , rank , half , l ",
        "schema_with_content": "fielding : dp (158, 87, 62), year (1910, 1921, 1950), pos (\"1B\", \"3B\", \"1B\"), po (122, 255, 728), wp (16, 0, 31), inn_outs (2172, 3690, 1359), cs (3, 38, 2), player_id (\"janesje01\", \"colpadi01\", \"lincoez01\"), zr (3, 6, \"\"), e (63, 50, 62), team_id (\"TBA\", \"ANA\", \"WOR\"), gs (128, 1, 120), sb (98, 20, 30), league_id (\"AL\", \"AA\", \"NL\"), g (63, 51, 108), a (258, 365, 513), pb (57, 56, 81), stint (1, 3, 2) | manager_award_vote : points_won (71, 24, 131), league_id (\"AL\", \"NL\"), votes_first (5, 14, 8), points_max (28, 120, 150), year (2002, 1988, 1990), player_id (\"washiro01\", \"lasorto01\", \"hargrmi01\"), award_id (\"Mgr of the year\", \"Mgr of the Year\") | player_award_vote : player_id (\"knighra01\", \"benitar01\", \"inciaen01\"), votes_first (11, 32, 10.5), league_id (\"ML\", \"AL\", \"NL\"), year (2008, 1960, 1950), award_id (\"Cy Young\", \"MVP\", \"Rookie of the Year\"), points_won (136, 112, 422), points_max (336, 28, 448) | manager_half : g (2, 59, 56), rank (11, 8, 1), team_id (\"LS3\", \"NYN\", \"PHI\"), player_id (\"virdobi01\", \"garcida99\", \"lemonbo01\"), half (1, 2), league_id (\"NL\", \"AL\"), inseason (4, 3, 1), w (38, 3, 2), year (1892, 1981), l (28, 14, 12) | player_player_college_college_height : avg_height (79, 75, 82), sum_height (69, 76, 43), name_full (\"University of Maryland\", \"Shoreline Community College\", \"Trinity College\"), max_height (63, 63, \"\"), min_height (74, 83, 65) | home_game : span_last (\"1912-09-26\", \"1902-09-07\", \"2002-09-26\"), park_id (\"COL02\", \"CLE06\", \"MIN04\"), attendance (1152161, 1502494, 2449537), games (50, 7, 64), span_first (\"2013-04-01\", \"1883-05-30\", \"1944-04-22\"), team_id (\"BLA\", \"BFN\", \"SL2\"), openings (56, 45, 78), league_id (\"FL\", \"AL\", \"\"), year (2011, 1998, 1928) | pitching_postseason : wp (1, 1, 1), gs (1, 0, 5), gf (4, 0, 0), sh (4, 2, 7), h (64, 26, 61), hbp (3, 3, \"\"), ipouts (63, 27, 174), baopp (\"20\", \"0.364\", \"0.385\"), er (14, 25, 9), l (1, 4, 1), bb (18, 9, 14), team_id (\"NY4\", \"NYA\", \"SFN\"), era (15, 4.42, 5.28), hr (1, 0, 1), so (12, 14, 21), sho (3, 1, 0), g_idp (\"\", 0, \"\"), cg (2, 2, 3), bfp (45, 65, 83), w (1, 2, 2), round (\"AEDIV\", \"AEDIV\", \"AEDIV\"), league_id (\"AA\", \"NL\", \"AL\"), player_id (\"mayru01\", \"pastofr01\", \"henrybi01\"), ibb (\"\", 1, 3), sv (2, 1, 3), year (1907, 1903, 1973), sf (2, \"\", 2), r (11, 1, 16), g (6, 1, 1), bk (\"\", 0, 1) | park : city (\"Jersey City\", \"New Haven\", \"Elmira\"), country (\"CA\", \"CA\", \"US\"), state (\"IN\", \"NV\", \"NV\"), park_id (\"LOS03\", \"LOU02\", \"BAL09\"), park_name (\"Forepaugh Park\", \"Congress Street Grounds\", \"Armory Park\"), park_alias (\"American League Park\", \"Enron Field; Astros Field\", \"Busch Stadium I\") | player_award : league_id (\"AL\", \"AA\", \"AA\"), year (1924, 1985, 1932), award_id (\"Rolaids Relief Man Award\", \"All-Star Game MVP\", \"Most Valuable Player\"), tie (\"\", \"Y\"), notes (\"SP\", \"C4\", \"LF\"), player_id (\"greensh01\", \"conceda01\", \"beltrca01\") | hall_of_fame : category (\"Pioneer/Executive\", \"Pioneer/Executive\", \"Player\"), needed (170, 310, 321), needed_note (\"\", \"Top 20\", \"1st\"), votedby (\"BBWAA\", \"Negro League\", \"Nominating Vote\"), votes (224, 349, 217), ballots (549, 545, 362), player_id (\"snowjt01\", \"womacto01\", \"fernato01\"), yearid (1987, 1976, 1944), inducted (\"Y\", \"N\") | fielding_outfield : gcf (150, 94, 153), year (1882, 1902, 1940), player_id (\"ostrojo01\", \"mulle01\", \"gleesji01\"), glf (127, 84, 73), grf (38, 73, 31), stint (4, 3, 3) | player : name_last (\"Sitton\", \"Kaat\", \"Mee\"), birth_state (\"Northamptonshire\", \"Tokushima\", \"Belfast\"), birth_country (\"Viet Nam\", \"China\", \"Taiwan\"), death_month (2, 1, 8), death_day (27, 14, 2), birth_year (1895, 1840, 1972), death_city (\"Mayville\", \"Fairfield Bay\", \"Atizapan de Zaragoza\"), birth_month (9, 11, 2), bats (\"B\", \"B\", \"L\"), final_game (\"1961-09-25\", \"1922-05-12\", \"1962-06-03\"), death_country (\"Mexico\", \"Austria\", \"V.I.\"), height (64, 83, 63), death_state (\"Chiapas\", \"Tamaulipas\", \"MN\"), weight (161, 275, 290), throws (\"R\", \"L\", \"\"), birth_city (\"Beaulieu\", \"Morganton\", \"Indian Island\"), name_given (\"Junior J.\", \"Gene\", \"Gene Taylor\"), bbref_id (\"bressed01\", \"mikloha01\", \"milleko01\"), death_year (1907, 1891, 1999), debut (\"2013-05-08\", \"1952-09-19\", \"1926-07-24\"), birth_day (20, 23, 30), player_id (\"mersoja01\", \"schusbi01\", \"valdeis01\"), retro_id (\"bokij101\", \"broam001\", \"reyna001\"), name_first (\"Paxton\", \"Ozzie\", \"Gregorio\") | college : name_full (\"University of Northern Colorado\", \"Johnson County Community College\", \"Ellsworth College\"), state (\"CT\", \"MO\", \"ME\"), college_id (\"txsajco\", \"fresnost\", \"ndstate\"), city (\"Elkins\", \"Santa Ana\", \"Tuskegee\"), country (\"USA\") | batting_postseason : rbi (7, 7, 10), sb (10, 8, 15), league_id (\"AA\", \"NL\", \"AL\"), year (2013, 1963, 1906), hbp (3, 3, 3), triple (2, 0, 2), so (5, 9, 7), g_idp (5, \"\", 0), sh (\"\", 3, \"\"), team_id (\"CIN\", \"SLN\", \"BRO\"), ab (59, 12, 24), hr (6, 1, 5), sf (3, 0, 2), ibb (5, 0, 3), h (13, 8, 0), bb (12, 5, 0), round (\"CS\", \"ALCS\", \"WS\"), g (7, 6, 7), player_id (\"abadfe01\", \"spoonka01\", \"pacioto01\"), cs (2, 4, 2), double (1, 0, 0), r (1, 10, 1) | appearances : g_pr (28, 45, 67), g_2b (121, 149, 31), g_of (26, 48, 133), g_ss (89, 84, 127), g_rf (14, 9, 138), g_all (145, 97, 84), league_id (\"\", \"NL\", \"FL\"), g_cf (79, 132, 106), team_id (\"IN3\", \"WS3\", \"BUF\"), g_p (32, 88, 6), g_lf (87, 32, 35), g_3b (149, 1, 55), g_1b (42, 77, 70), g_ph (34, 33, 51), year (1908, 1993, 1904), player_id (\"dominjo01\", \"shoreer01\", \"mccreed01\"), g_defense (13, 59, 61), gs (108, 78, \"\"), g_dh (89, 90, 55), g_batting (121, 40, 10), g_c (46, 150, 6) | manager_award : league_id (\"AL\", \"NL\", \"ML\"), award_id (\"BBWAA Manager of the year\", \"TSN Manager of the Year\"), tie (\"\", \"Y\"), notes (\"\"), player_id (\"hutchfr01\", \"torboje01\", \"bambege01\"), year (1989, 1970, 1979) | manager : plyr_mgr (\"Y\", \"N\"), l (26, 72, 16), player_id (\"hardeme01\", \"schuljo05\", \"dowdto01\"), g (110, 129, 72), year (2008, 1966, 1980), inseason (2, 2, 3), league_id (\"UA\", \"AL\", \"AL\"), team_id (\"NY3\", \"BSN\", \"WS4\"), w (8, 79, 33), rank (7, 6, 2) | salary : team_id (\"TBA\", \"CLE\", \"TBA\"), salary (12750000, 166000, 156000), player_id (\"winfida01\", \"motteja01\", \"dishmgl01\"), league_id (\"NL\", \"AL\"), year (1990, 1987, 1985) | player_college : college_id (\"emoryhenry\", \"campjco\", \"careedl\"), year (2011, 1875, 1951), player_id (\"fitzgbr01\", \"odonojo02\", \"reynodo01\") | pitching : l (22, 17, 0), g_idp (12, 0, 6), sho (13, 1, 9), r (334, 120, 207), player_id (\"malonji01\", \"baconed01\", \"pittito01\"), bfp (1465, 726, 884), bb (208, 100, 138), era (3.95, 1.44, 10.02), wp (42, 28, 10), gf (47, 54, 77), stint (3, 1, 1), h (320, 50, 132), sf (0, 10, 14), cg (58, 45, 18), hbp (26, 21, 8), sv (11, 1, 57), year (2011, 1931, 2013), er (214, 176, 24), bk (13, 1, 6), so (15, 126, 149), baopp (0.439, 0.45299999999999996, 0.335), ibb (15, 3, 19), sh (4, 19, 3), w (31, 44, 49), league_id (\"UA\", \"PL\", \"AL\"), hr (26, 19, 14), team_id (\"FLO\", \"BFN\", \"PHA\"), gs (41, 10, 18), g (27, 66, 69), ipouts (904, 268, 715) | fielding_postseason : e (4, 4, 8), team_id (\"BRO\", \"MON\", \"ARI\"), gs (0, 0, 4), league_id (\"AL\", \"NL\"), pos (\"P\", \"OF\", \"CF\"), inn_outs (44, 58, 13), pb (2, 3, \"\"), dp (10, 11, 13), sb (0, 13, 15), tp (0, 1), po (13, 28, 23), g (7, 11, 8), year (1977, 1916, 1921), a (0, 26, 11), round (\"NWDIV\", \"ALDS1\", \"NLCS\"), player_id (\"rosebjo01\", \"barmecl01\", \"sullibi04\"), cs (1, 10, 2) | batting : g (92, 109, 48), player_id (\"riverji01\", \"ozunama01\", \"learyja01\"), rbi (86, 155, 113), sf (9, 14, 1), bb (78, 137, 8), hbp (21, 22, 50), stint (2, 4, 5), triple (3, 8, 13), so (5, 116, 89), year (1875, 1968, 1886), cs (17, 29, 7), sb (108, 51, 55), ab (399, 202, 386), league_id (\"\", \"NL\", \"AL\"), h (160, 194, 159), ibb (40, 40, 23), r (86, 118, 95), team_id (\"MID\", \"NYA\", \"TL2\"), g_idp (16, 35, 24), sh (17, 47, 38), hr (29, 0, 39), double (7, 62, 26) | team_franchise : franchise_name (\"Rockford Forest Citys\", \"New York Metropolitans\", \"Detroit Wolverines\"), na_assoc (\"BNA\", \"PNA\", \"ATL\"), active (\"N\", \"Y\", \"\"), franchise_id (\"CLE\", \"KCN\", \"BLO\") | postseason : team_id_winner (\"TOR\", \"CHC\", \"PIT\"), wins (3, 6, 6), losses (3, 5, 4), ties (0, 1), team_id_loser (\"BRO\", \"LAA\", \"KCA\"), year (1996, 1970, 2015), league_id_winner (\"NL\", \"AA\", \"AL\"), round (\"NLWC\", \"NLCS\", \"NWDIV\"), league_id_loser (\"AA\", \"NL\", \"AL\") | team : league_id (\"PL\", \"PL\", \"NL\"), lg_win (\"N\", \"Y\", \"\"), sb (175, 251, 283), team_id_br (\"TBD\", \"WOR\", \"CHW\"), team_id_lahman45 (\"BRF\", \"SL1\", \"PH2\"), ipouts (3264, 426, 4311), park (\"Boundary Field\", \"Bank Street Grounds\", \"Hartford Ball Club Grounds\"), sf (47, 29, 41), triple (3, 48, 106), rank (3, 13, 5), hbp (65, 73, 68), e (214, 307, 519), bba (627, 418, 45), w (102, 49, 4), bb (27, 580, 652), fp (0.9890000000000001, 0.9790000000000001, 0.76), er (681, 321, 639), cs (36, 16, 88), cg (29, 8, 135), ws_win (\"\", \"N\", \"Y\"), wc_win (\"\", \"N\", \"Y\"), dp (64, 65, 65), div_win (\"\", \"Y\", \"N\"), era (5.49, 1.75, 3.12), ppf (86, 123, 125), year (1923, 1936, 1873), ghome (68, 52, 47), team_id_retro (\"CLP\", \"PHN\", \"WIL\"), franchise_id (\"TBD\", \"BLO\", \"NYM\"), div_id (\"\", \"E\", \"E\"), bpf (115, 88, 122), sho (11, 7, 13), ha (1657, 1387, 1208), r (371, 621, 692), ab (3521, 5413, 3114), g (25, 112, 114), hra (219, 113, 12), double (277, 304, 61), sv (51, 4, 25), l (95, 78, 8), hr (112, 121, 138), soa (1009, 1122, 964), team_id (\"WSU\", \"BR2\", \"BRF\"), ra (470, 535, 775), attendance (1607733, 1501122, 1075518), h (724, 1413, 689), so (543, 600, 361), name (\"Cleveland Indians\", \"Chicago White Stockings\", \"Oakland Athletics\") | all_star : year (1951, 1961, 1938), gp (1, 0, \"\"), team_id (\"TOR\", \"BAL\", \"ARI\"), league_id (\"AL\", \"NL\"), player_id (\"coneda01\", \"mitchke01\", \"luzingr01\"), starting_pos (2, 2, 6), game_id (\"ALS195107100\", \"ALS196007110\", \"ALS200107100\"), game_num (0, 2, 1) | team_half : year (1981), g (60, 56, 60), div_id (\"W\", \"E\"), team_id (\"DET\", \"KCA\", \"SDN\"), div_win (\"N\"), league_id (\"NL\", \"AL\"), w (23, 25, 27), rank (5, 3, 6), half (1, 2), l (36, 37, 24)",
        "ambiguous_queries": [
            "select avg(t1.height) from player as t1 join player_college as t2 on t1.player_id = t2.player_id join college as t3 on t3.college_id = t2.college_id where t3.name_full = 'Yale University'",
            "select avg_height from player_player_college_college_height where name_full = 'Yale University'"
        ],
        "gold_ambiguity": {
            "match": "{\"average height\": [{\"player\": [\"height\"]}, {\"player_player_college_college_height\": [\"avg_height\"]}], \"college named\": [{\"college\": [\"name_full\"]}, {\"player_player_college_college_height\": [\"name_full\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average height\" refers to the schema \"player\".\"height\", \"college named\" refers to the schema \"college\".\"name_full\"",
        "clear_ambiguity": "{\"average height\": {\"player\": [\"height\"]}, \"college named\": {\"college\": [\"name_full\"]}}",
        "gold_query": "select avg(t1.height) from player as t1 join player_college as t2 on t1.player_id = t2.player_id join college as t3 on t3.college_id = t2.college_id where t3.name_full = 'Yale University'"
    },
    {
        "index": 776,
        "db_id": "apartment_rentals",
        "ambig_type": "aggregate",
        "db_file": "aggregate/apartment_rentals/apartment_rentals.sqlite",
        "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "schema_without_content": "view_unit_status : apt_id , status_date , available_yn , apt_booking_id  | apartments_room_count : min_room_count , max_room_count , sum_room_count , avg_room_count  | guests : gender_code , date_of_birth , guest_id , guest_last_name , guest_first_name  | apartment_buildings : building_id , building_full_name , building_short_name , building_description , building_phone 411-6406\", building_address , building_manager  | apartments : apt_id , bedroom_count , apt_type_code , bathroom_count , apt_number , building_id , room_count  | apartment_bookings : guest_id , booking_start_date , booking_end_date , booking_status_code , apt_id , apt_booking_id  | apartment_facilities : apt_id , facility_code ",
        "schema_with_content": "view_unit_status : apt_id (13, 6, 10), status_date (\"2011-02-12 09:04:07\", \"2001-02-17 20:17:09\", \"1980-11-12 13:34:45\"), available_yn (1, 0), apt_booking_id (343, 575, 924) | apartments_room_count : min_room_count (\"5\", \"9\", \"8\"), max_room_count (\"9\", \"3\", \"3\"), sum_room_count (\"9\", \"3\", \"3\"), avg_room_count (\"9\", \"8\", \"6\") | guests : gender_code (\"Male\", \"Unknown\", \"Female\"), date_of_birth (\"1978-03-08 04:43:04\", \"2007-09-11 19:01:39\", \"1980-06-20 18:15:39\"), guest_id (9, 4, 11), guest_last_name (\"Treutel\", \"Crona\", \"Mante\"), guest_first_name (\"Tamia\", \"Josefina\", \"Gregoria\") | apartment_buildings : building_id (196, 153, 196), building_full_name (\"Stuyvesant Town\", \"Barclay Tower\", \"Windsor Court\"), building_short_name (\"The Anthem\", \"Barclay Tower\", \"Mercedes House\"), building_description (\"Studio\", \"Flat\", \"Duplex\"), building_phone (\"1-605-511-1973x25011\", \"318-398-8140\", \"(145)411-6406\"), building_address (\"1844 Armstrong Stravenue Suite 853\nMyrnatown, CT 13528\", \"54686 Christopher Circles Apt. 321\nDaytonland, ID 88081-3991\", \"71537 Gorczany Inlet\nWisozkburgh, AL 08256\"), building_manager (\"Albert\", \"Ewald\", \"Kathlyn\") | apartments : apt_id (4, 4, 5), bedroom_count (3, 3, 4), apt_type_code (\"Flat\", \"Studio\", \"Duplex\"), bathroom_count (1, 2, 3), apt_number (\"Apt. 477\", \"Apt. 794\", \"Suite 645\"), building_id (624, 153, 153), room_count (\"8\", \"8\", \"5\") | apartment_bookings : guest_id (4, 13, 5), booking_start_date (\"2016-09-26 17:13:49\", \"2016-09-26 17:13:49\", \"2016-11-26 05:04:31\"), booking_end_date (\"2018-02-25 15:15:37\", \"2018-02-06 16:57:05\", \"2017-10-03 01:56:21\"), booking_status_code (\"Provisional\", \"Confirmed\"), apt_id (10, 10, 6), apt_booking_id (920, 279, 365) | apartment_facilities : apt_id (5, 1, 2), facility_code (\"Swimming Pool\", \"Gym\", \"Gym\")",
        "ambiguous_queries": [
            "select avg(room_count) from apartments where apt_type_code = 'Studio'",
            "select avg_room_count from apartments_room_count where apt_type_code = 'Studio'"
        ],
        "gold_ambiguity": {
            "match": "{\"type code\": [{\"apartments\": [\"apt_type_code\"]}, {\"apartments_room_count\": [\"apt_type_code\"]}], \"average number of room\": [{\"apartments\": [\"room_count\"]}, {\"apartments_room_count\": [\"avg_room_count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"type code\" refers to the schema \"apartments_room_count\".\"apt_type_code\", \"average number of room\" refers to the schema \"apartments_room_count\".\"avg_room_count\"",
        "clear_ambiguity": "{\"type code\": {\"apartments_room_count\": [\"apt_type_code\"]}, \"average number of room\": {\"apartments_room_count\": [\"avg_room_count\"]}}",
        "gold_query": "select avg_room_count from apartments_room_count where apt_type_code = 'Studio'"
    },
    {
        "index": 777,
        "db_id": "journal_committee",
        "ambig_type": "aggregate",
        "db_file": "aggregate/journal_committee/journal_committee.sqlite",
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "schema_without_content": "editor : age , editor_id , name  | journal_committee : journal_id , editor_id , work_type  | journal : sales , journal_id , theme , date  | journal_journal_committee_sales : work_type , max_sales , avg_sales , min_sales , sum_sales ",
        "schema_with_content": "editor : age (43.0, 34.0, 35.0), editor_id (9, 7, 4), name (\"Maria GÃ³ralczyk\", \"Kamila Porczyk\", \"WÅadysÅaw Grzywna\") | journal_committee : journal_id (2, 17, 11), editor_id (4, 6, 1), work_type (\"Photo\", \"Article\", \"Title\") | journal : sales (7494, 6532, 4798), journal_id (8, 8, 12), theme (\"Tampa Bay Buccaneers\", \"Green Bay Packers\", \"at Oakland Raiders\"), date (\"October 21, 2001\", \"October 29, 2001\", \"January 6, 2002\") | journal_journal_committee_sales : work_type (\"Photo\", \"Article\", \"Title\"), max_sales (1934, 3421, 4271), avg_sales (1232, 3342, 3421), min_sales (798, 3342, 4271), sum_sales (4798, 5342, 3421)",
        "ambiguous_queries": [
            "select avg(t1.sales) from journal as t1 join journal_committee as t2 on t1.journal_id = t2.journal_id where t2.work_type = 'Photo'",
            "select avg_sales from journal_journal_committee_sales where work_type = 'Photo'"
        ],
        "gold_ambiguity": {
            "match": "{\"average sales\": [{\"journal\": [\"sales\"]}, {\"journal_journal_committee_sales\": [\"avg_sales\"]}], \"work type\": [{\"journal_committee\": [\"work_type\"]}, {\"journal_journal_committee_sales\": [\"work_type\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average sales\" refers to the schema \"journal\".\"sales\", \"work type\" refers to the schema \"journal_committee\".\"work_type\"",
        "clear_ambiguity": "{\"average sales\": {\"journal\": [\"sales\"]}, \"work type\": {\"journal_committee\": [\"work_type\"]}}",
        "gold_query": "select avg(t1.sales) from journal as t1 join journal_committee as t2 on t1.journal_id = t2.journal_id where t2.work_type = 'Photo'"
    },
    {
        "index": 778,
        "db_id": "customer_complaints",
        "ambig_type": "aggregate",
        "db_file": "aggregate/customer_complaints/customer_complaints.sqlite",
        "question": "Return the average price of products that have each category code.",
        "schema_without_content": "products_product_price : avg_product_price , product_category_code , min_product_price , sum_product_price , max_product_price  | complaints : staff_id , complaint_status_code , complaint_type_code , date_complaint_raised , product_id , complaint_outcome_code , complaint_id , customer_id , date_complaint_closed  | products : product_category_code , parent_product_id , product_price , date_product_discontinued , date_product_first_available , product_description , product_name , product_id  | customers : phone_number 9011433816\", \"+389011433816\", email_address , address_line_1 , town_city , address_line_2 , state , customer_id , customer_type_code  | staff : first_name , phone_number 553-1035x20399\", \"551-0838x146\", gender , email_address , staff_id , last_name ",
        "schema_with_content": "products_product_price : avg_product_price (23.35, 23.35, 109.99), product_category_code (\"Food\", \"Book\", \"Hardware\"), min_product_price (35, 35, 2.88), sum_product_price (2.88, 23.35, 2.88), max_product_price (109.99, 109.99, 23.35) | complaints : staff_id (115, 115, 115), complaint_status_code (\"Closed\", \"New\", \"Open\"), complaint_type_code (\"Product Failure\", \"Product Unusable\"), date_complaint_raised (\"1987-07-11 14:40:30\", \"2007-10-14 21:50:43\", \"1977-08-06 00:31:19\"), product_id (120, 120, 119), complaint_outcome_code (\"OK\"), complaint_id (4, 6, 12), customer_id (116, 115, 116), date_complaint_closed (\"1976-04-19 11:03:06\", \"1995-09-11 14:48:46\", \"1976-04-19 11:03:06\") | products : product_category_code (\"Food\", \"Book\", \"Hardware\"), parent_product_id (3, 4, 9), product_price (109.99, 23.35, 23.35), date_product_discontinued (\"1997-07-02 18:26:16\", \"1991-08-20 05:22:31\", \"1987-12-20 13:46:16\"), date_product_first_available (\"1988-09-29 17:54:50\", \"1988-09-29 17:54:50\", \"1994-12-18 15:13:19\"), product_description (\"Blue tooth mouse\", \"Designed for games\", \"Designed for games\"), product_name (\"Mouse\", \"Keyboard\", \"Mouse\"), product_id (119, 120, 118) | customers : phone_number (\"548.373.3603x59134\", \"+38(3)9011433816\", \"+38(3)9011433816\"), email_address (\"ubeier@example.org\", \"lavonne.frami@example.com\", \"hsteuber@example.org\"), address_line_1 (\"05355 Marcelle Radial\", \"05355 Marcelle Radial\", \"1566 Ramona Overpass Apt. 464\"), town_city (\"Sauerberg\", \"Sauerberg\", \"Port Joshuah\"), address_line_2 (\"Suite 151\", \"Suite 035\", \"Suite 035\"), state (\"Tennessee\", \"Colorado\", \"Pennsylvania\"), customer_id (113, 114, 115), customer_type_code (\"Good Credit Rating\", \"Defaults on payments\") | staff : first_name (\"Mikel\", \"Mikel\", \"Dagmar\"), phone_number (\"345-656-5571\", \"(383)553-1035x20399\", \"(379)551-0838x146\"), gender (\"0\", \"1\"), email_address (\"marcelle.ritchie@example.com\", \"marcelle.ritchie@example.com\", \"brett99@example.net\"), staff_id (117, 120, 120), last_name (\"Hahn\", \"Erdman\", \"Lowe\")",
        "ambiguous_queries": [
            "select avg(product_price), product_category_code from products group by product_category_code",
            "select avg_product_price, product_category_code from products_product_price"
        ],
        "gold_ambiguity": {
            "match": "{\"average price\": [{\"products\": [\"product_price\"]}, {\"products_product_price\": [\"avg_product_price\"]}], \"category code\": [{\"products\": [\"product_category_code\"]}, {\"products_product_price\": [\"product_category_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average price\" refers to the schema \"products\".\"product_price\", \"category code\" refers to the schema \"products\".\"product_category_code\"",
        "clear_ambiguity": "{\"average price\": {\"products\": [\"product_price\"]}, \"category code\": {\"products\": [\"product_category_code\"]}}",
        "gold_query": "select avg(product_price), product_category_code from products group by product_category_code"
    },
    {
        "index": 779,
        "db_id": "driving_school",
        "ambig_type": "aggregate",
        "db_file": "aggregate/driving_school/driving_school.sqlite",
        "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
        "schema_without_content": "customers : customer_id , amount_outstanding , email_address , first_name , date_became_customer , customer_address_id , last_name , date_of_birth , cell_mobile_phone_number 4872981083\", \"+454872981083\", \"1-197-686-2849x8761\", phone_number 122-0086\", customer_status_code  | customer_payments : amount_payment , customer_id , datetime_payment , payment_method_code  | customer_payments_customers_amount_payment : last_name , sum_amount_payment , avg_amount_payment , min_amount_payment , first_name , max_amount_payment  | lessons : customer_id , lesson_status_code , price , lesson_id , lesson_time , staff_id , lesson_date , vehicle_id  | addresses : zip_postcode , country , line_1_number_building , address_id , state_province_county , city  | vehicles : vehicle_id , vehicle_details  | staff : first_name , date_of_birth , date_joined_staff , last_name , staff_address_id , staff_id , nickname , date_left_staff , middle_name ",
        "schema_with_content": "customers : customer_id (10, 14, 13), amount_outstanding (7256.0, 9443.0, 9500.0), email_address (\"karina.carroll@example.net\", \"mariela28@example.org\", \"mariela28@example.org\"), first_name (\"Genevieve\", \"Amya\", \"Millie\"), date_became_customer (\"2016-05-13 07:38:23\", \"2016-05-13 07:38:23\", \"2015-09-25 13:59:21\"), customer_address_id (12, 8, 13), last_name (\"Trantow\", \"Terry\", \"Ortiz\"), date_of_birth (\"1996-08-30 06:17:50\", \"1993-02-07 05:40:26\", \"1998-12-15 13:24:40\"), cell_mobile_phone_number (\"+45(6)4872981083\", \"+45(6)4872981083\", \"1-197-686-2849x8761\"), phone_number (\"1-673-962-8158x7646\", \"1-618-535-9750\", \"(297)122-0086\"), customer_status_code (\"Bad Customer\", \"Good Customer\") | customer_payments : amount_payment (8180.26, 9886.62, 4610.26), customer_id (1, 6, 4), datetime_payment (\"2018-03-12 13:31:36\", \"2018-02-27 20:08:53\", \"2018-02-03 15:04:36\"), payment_method_code (\"Direct Debit\", \"Credit Card\") | customer_payments_customers_amount_payment : last_name (\"Schmeler\", \"Tromp\", \"Kohler\"), sum_amount_payment (3073.98, 8180.26, 6311.37), avg_amount_payment (8180.26, 6311.37, 4610.26), min_amount_payment (4773.16, 6311.37, 4610.26), first_name (\"Omer\", \"Genevieve\", \"Omer\"), max_amount_payment (5475.26, 4610.26, 1708.18) | lessons : customer_id (8, 10, 5), lesson_status_code (\"Cancelled\", \"Completed\"), price (492.0, 295.0, 456.0), lesson_id (9, 6, 3), lesson_time (\"2\", \"5\", \"9\"), staff_id (12, 11, 11), lesson_date (\"2018-03-05 20:05:33\", \"2018-03-07 22:03:49\", \"2018-03-12 00:41:59\"), vehicle_id (3, 2, 1) | addresses : zip_postcode (\"08938\", \"38197\", \"27559\"), country (\"USA\"), line_1_number_building (\"29085 Dejah Pine Suite 059\", \"4834 Schaefer Light Suite 947\", \"484 O'Hara Drive\"), address_id (14, 13, 3), state_province_county (\"Ohio\", \"Kentucky\", \"Georgia\"), city (\"Lake Rafaela\", \"Hagenesfurt\", \"Ericamouth\") | vehicles : vehicle_id (1, 2, 3), vehicle_details (\"Van\", \"Truck\", \"Car\") | staff : first_name (\"Rebekah\", \"Jedidiah\", \"Jaleel\"), date_of_birth (\"2005-05-02 06:23:36\", \"1998-04-27 12:55:05\", \"1996-03-09 08:19:49\"), date_joined_staff (\"2016-06-06 08:54:28\", \"2018-01-02 12:24:24\", \"2016-05-26 00:55:07\"), last_name (\"Kuphal\", \"Carroll\", \"Mraz\"), staff_address_id (1, 13, 13), staff_id (15, 11, 2), nickname (\"thompson.constantin\", \"norma73\", \"gabe21\"), date_left_staff (\"2018-03-05 18:30:12\", \"2018-03-01 17:10:03\", \"2018-03-06 23:17:41\"), middle_name (\"Ulices\", \"Dejon\", \"Mayra\")",
        "ambiguous_queries": [
            "select sum(t1.amount_payment) from customer_payments as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.first_name = 'Carole' and t2.last_name = 'Bernhard'",
            "select sum_amount_payment from customer_payments_customers_amount_payment where first_name = 'Carole' and last_name = 'Bernhard'"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"customer_payments_customers_amount_payment\": [\"first_name\"]}, {\"customers\": [\"first_name\"]}], \"last name\": [{\"customer_payments_customers_amount_payment\": [\"last_name\"]}, {\"customers\": [\"last_name\"]}], \"total\": [{\"customer_payments\": [\"amount_payment\"]}, {\"customer_payments_customers_amount_payment\": [\"sum_amount_payment\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"customers\".\"first_name\", \"last name\" refers to the schema \"customers\".\"last_name\", \"total\" refers to the schema \"customer_payments\".\"amount_payment\"",
        "clear_ambiguity": "{\"first name\": {\"customers\": [\"first_name\"]}, \"last name\": {\"customers\": [\"last_name\"]}, \"total\": {\"customer_payments\": [\"amount_payment\"]}}",
        "gold_query": "select sum(t1.amount_payment) from customer_payments as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.first_name = 'Carole' and t2.last_name = 'Bernhard'"
    },
    {
        "index": 780,
        "db_id": "farm",
        "ambig_type": "aggregate",
        "db_file": "aggregate/farm/farm.sqlite",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "schema_without_content": "farm_competition : hosts , competition_id , host_city_id , year , theme  | farm : sheep_and_goats , bulls , cows , oxen , pigs , working_horses , farm_id , year , total_cattle , total_horses  | farm_working_horses : avg_working_horses , min_working_horses , sum_working_horses , max_working_horses  | city : area_km_2 , population , official_name , city_id , census_ranking , status  | competition_record : farm_id , rank , competition_id ",
        "schema_with_content": "farm_competition : hosts (\"Vanness Wu and Michelle Branch\", \"Mandy Moore and Ronan Keating\", \"Vanness Wu and Michelle Branch\"), competition_id (3, 1, 2), host_city_id (2, 1, 1), year (2003, 2005, 2002), theme (\"Valentine's Day\", \"MTV Cube\", \"Aliens\") | farm : sheep_and_goats (7030.8, 8112.2, 7030.8), bulls (40.0, 46.7, 40.0), cows (3987.0, 3377.0, 3377.0), oxen (805.5, 116.9, 113.8), pigs (2623.7, 3373.3, 2089.2), working_horses (4198.8, 4090.5, 2197.3), farm_id (8, 3, 7), year (1929, 1929, 1932), total_cattle (4446.3, 5006.7, 8604.8), total_horses (5308.2, 2604.8, 3658.9) | farm_working_horses : avg_working_horses (3711.2, 3721.6, 4090.5), min_working_horses (3900.1, 4090.5, 3711.6), sum_working_horses (3721.6, 3721.6, 2197.3), max_working_horses (3711.2, 2197.3, 3711.2) | city : area_km_2 (2.24, 8.89, 8.91), population (1778.0, 5706.0, 1778.0), official_name (\"Aroostook\", \"Drummond\", \"Aroostook\"), city_id (3, 3, 4), census_ranking (\"1442 of 5,008\", \"636 of 5008\", \"636 of 5008\"), status (\"Town\", \"Village\") | competition_record : farm_id (5, 5, 3), rank (1, 1, 4), competition_id (4, 4, 4)",
        "ambiguous_queries": [
            "select avg(working_horses) from farm where total_horses > 5000",
            "select avg_working_horses from farm_working_horses where total_horses > 5000"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of working horses\": [{\"farm\": [\"working_horses\"]}, {\"farm_working_horses\": [\"avg_working_horses\"]}], \"total horses\": [{\"farm\": [\"total_horses\"]}, {\"farm_working_horses\": [\"total_horses\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of working horses\" refers to the schema \"farm\".\"working_horses\", \"total horses\" refers to the schema \"farm\".\"total_horses\"",
        "clear_ambiguity": "{\"average number of working horses\": {\"farm\": [\"working_horses\"]}, \"total horses\": {\"farm\": [\"total_horses\"]}}",
        "gold_query": "select avg(working_horses) from farm where total_horses > 5000"
    },
    {
        "index": 781,
        "db_id": "dorm_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/dorm_1/dorm_1.sqlite",
        "question": "Find the total capacity of all dorms.",
        "schema_without_content": "lives_in : dormid , room_number , stuid  | dorm_amenity : amenity_name , amenid  | has_amenity : dormid , amenid  | student : stuid , major , sex , lname , age , city_code , fname , advisor  | dorm_student_capacity : sum_student_capacity , max_student_capacity , avg_student_capacity , min_student_capacity  | dorm : student_capacity , dormid , dorm_name , gender ",
        "schema_with_content": "lives_in : dormid (140, 160, 117), room_number (211, 418, 418), stuid (1010, 1024, 1031) | dorm_amenity : amenity_name (\"Study Room\", \"TV Lounge\", \"Air Conditioning\"), amenid (932, 909, 950) | has_amenity : dormid (117, 110, 117), amenid (930, 900, 901) | student : stuid (1025, 1029, 1024), major (600, 540, 540), sex (\"F\", \"M\"), lname (\"Prater\", \"Wilson\", \"Nelson\"), age (16, 22, 27), city_code (\"HOU\", \"PHL\", \"WAS\"), fname (\"Jandy\", \"Linda\", \"Ian\"), advisor (8423, 7271, 8723) | dorm_student_capacity : sum_student_capacity (256, 256, 116), max_student_capacity (116, 116, 128), avg_student_capacity (116, 355, 256), min_student_capacity (355, 85, 256) | dorm : student_capacity (128, 400, 116), dormid (117, 117, 160), dorm_name (\"Grad Student Asylum\", \"Fawlty Towers\", \"Dorm-plex 2000\"), gender (\"X\", \"M\", \"F\")",
        "ambiguous_queries": [
            "select sum(student_capacity) from dorm",
            "select sum_student_capacity from dorm_student_capacity"
        ],
        "gold_ambiguity": {
            "match": "{\"total capacity\": [{\"dorm\": [\"student_capacity\"]}, {\"dorm_student_capacity\": [\"sum_student_capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total capacity\" refers to the schema \"dorm\".\"student_capacity\"",
        "clear_ambiguity": "{\"total capacity\": {\"dorm\": [\"student_capacity\"]}}",
        "gold_query": "select sum(student_capacity) from dorm"
    },
    {
        "index": 782,
        "db_id": "sports_competition",
        "ambig_type": "aggregate",
        "db_file": "aggregate/sports_competition/sports_competition.sqlite",
        "question": "What is the average number of gold medals for clubs?",
        "schema_without_content": "club_rank : total , silver , gold , club_id , rank , bronze  | competition_result : club_id_1 , score , competition_id , club_id_2  | club_rank_gold : max_gold , min_gold , sum_gold , avg_gold  | club : club_id , name , region , start_year  | competition : year , country , competition_type , competition_id  | player : tries , points , player_id , apps , goals , club_id , position , name \", \"Iestyn Harris\", \"Tame Tupou\"",
        "schema_with_content": "club_rank : total (21.0, 13.0, 13.0), silver (7.0, 1.0, 2.0), gold (4.0, 3.0, 3.0), club_id (2, 1, 1), rank (2.0, 6.0, 2.0), bronze (0.0, 9.0, 2.0) | competition_result : club_id_1 (1, 3, 4), score (\"10:3\", \"10:3\", \"25:2\"), competition_id (2, 6, 5), club_id_2 (2, 4, 6) | club_rank_gold : max_gold (4.0, 8.0, 2.0), min_gold (2.0, 7.0, 11.0), sum_gold (2.0, 11.0, 7.0), avg_gold (3.0, 4.0, 8.0) | club : club_id (4, 5, 3), name (\"IFG\", \"BK Slide\", \"HSBIF\"), region (\"Japan\", \"England\", \"USA\"), start_year (\"2009\", \"2009\", \"2001\") | competition : year (2006.0, 2007.0), country (\"Ireland\", \"Spain\", \"Ireland\"), competition_type (\"Friendly\", \"Tournament\"), competition_id (2, 8, 10) | player : tries (1.0, 4.0, 6.0), points (12.0, 24.0, 4.0), player_id (12, 13, 5), apps (30.0, 28.0, 28.0), goals (\"90/106\", \"0\", \"0\"), club_id (4, 5, 5), position (\"Scrum Half\", \"Right Centre\", \"Scrum Half\"), name (\"Glenn Morrison (vc)\", \"Iestyn Harris\", \"Tame Tupou\")",
        "ambiguous_queries": [
            "select avg(gold) from club_rank",
            "select avg_gold from club_rank_gold"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of gold medals\": [{\"club_rank\": [\"gold\"]}, {\"club_rank_gold\": [\"avg_gold\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of gold medals\" refers to the schema \"club_rank_gold\".\"avg_gold\"",
        "clear_ambiguity": "{\"average number of gold medals\": {\"club_rank_gold\": [\"avg_gold\"]}}",
        "gold_query": "select avg_gold from club_rank_gold"
    },
    {
        "index": 783,
        "db_id": "store_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/store_1/store_1.sqlite",
        "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "schema_without_content": "playlist_tracks : track_id , playlist_id  | sqlite_sequence : seq , name  | tracks : name \", \"Show Me How to Live\", id , bytes , composer , milliseconds , album_id , media_type_id , unit_price , genre_id  | media_types : name , id  | invoice_lines : id , unit_price , invoice_id , quantity , track_id  | artists : name , id  | invoices : total , billing_address , billing_country , invoice_date , billing_state , id , customer_id , billing_city , billing_postal_code  | invoices_total : min_total , billing_country , max_total , avg_total , sum_total  | employees : first_name , state , country , birth_date , last_name , phone  428-9482\", \"1  836-9987\", \"+1  467-3351\", city , postal_code , id , address , hire_date , title , fax  428-3457\", \"+1  262-3322\", \"+1  467-8772\", reports_to , email  | customers : id , state , email , postal_code , support_rep_id , fax  3055-8131\", \"+55  3055-8131\", \"+1  882-8081\", last_name , phone  3923-5555\", city , address , company , country , first_name  | playlists : name , id  | genres : name , id  | albums : title , artist_id , id ",
        "schema_with_content": "playlist_tracks : track_id (1445, 3017, 3118), playlist_id (15, 16, 5) | sqlite_sequence : seq (2240, 18, 347), name (\"employees\", \"playlists\", \"albums\") | tracks : name (\"Moon germs\", \"Divirta-Se (Saindo Da Sua)\", \"Show Me How to Live\"), id (469, 1466, 2755), bytes (6635187, 1299960, 4457283), composer (\"John Bonham\", \"Kretz/R. DeLeo/Weiland\", \"Chico Buarque\"), milliseconds (292466, 272561, 47333), album_id (257, 153, 336), media_type_id (4, 4, 2), unit_price (0.99, 1.99), genre_id (7, 20, 19) | media_types : name (\"Protected MPEG-4 video file\", \"Protected MPEG-4 video file\", \"AAC audio file\"), id (1, 5, 4) | invoice_lines : id (385, 678, 424), unit_price (0.99, 1.99), invoice_id (194, 309, 379), quantity (1), track_id (1449, 3499, 2525) | artists : name (\"Page & Plant\", \"Edson, DJ Marky & DJ Patife Featuring Fernanda Porto\", \"David Coverdale\"), id (254, 26, 6) | invoices : total (13.86, 8.94, 13.86), billing_address (\"C/ San Bernardo 85\", \"120 S Orange Ave\", \"RotenturmstraÃe 4, 1010 Innere Stadt\"), billing_country (\"Hungary\", \"Austria\", \"Czech Republic\"), invoice_date (\"2009-02-14 00:00:00\", \"2011-11-03 00:00:00\", \"2010-01-21 00:00:00\"), billing_state (\"QC\", \"IL\", \"TX\"), id (235, 366, 94), customer_id (26, 4, 59), billing_city (\"Delhi\", \"Copenhagen\", \"Warsaw\"), billing_postal_code (\"01310-200\", \"X1A 1N6\", \"10789\") | invoices_total : min_total (18.86, 6.94, 14.91), billing_country (\"Italy\", \"Argentina\", \"Chile\"), max_total (18.86, 1.99, 0.99), avg_total (21.86, 10.91, 0.99), sum_total (3.98, 2.98, 16.86) | employees : first_name (\"Steve\", \"Margaret\", \"Robert\"), state (\"AB\"), country (\"Canada\"), birth_date (\"1973-08-29 00:00:00\", \"1973-08-29 00:00:00\", \"1970-05-29 00:00:00\"), last_name (\"King\", \"Edwards\", \"Callahan\"), phone (\"+1 (780) 428-9482\", \"1 (780) 836-9987\", \"+1 (403) 467-3351\"), city (\"Edmonton\", \"Calgary\", \"Lethbridge\"), postal_code (\"T1K 5N8\", \"T2P 5G3\", \"T5K 2N1\"), id (5, 7, 6), address (\"7727B 41 Ave\", \"825 8 Ave SW\", \"683 10 Street SW\"), hire_date (\"2002-05-01 00:00:00\", \"2002-05-01 00:00:00\", \"2003-10-17 00:00:00\"), title (\"IT Manager\", \"IT Manager\", \"General Manager\"), fax (\"+1 (780) 428-3457\", \"+1 (403) 262-3322\", \"+1 (403) 467-8772\"), reports_to (None, 1, 6), email (\"steve@chinookcorp.com\", \"laura@chinookcorp.com\", \"michael@chinookcorp.com\") | customers : id (41, 14, 13), state (\"TX\", \"MA\", \"NT\"), email (\"dominiquelefebvre@gmail.com\", \"edfrancis@yachoo.ca\", \"johavanderberg@yahoo.nl\"), postal_code (\"10779\", \"14300\", \"75009\"), support_rep_id (3, 4, 5), fax (\"+55 (11) 3055-8131\", \"+55 (11) 3055-8131\", \"+1 (425) 882-8081\"), last_name (\"Ramos\", \"Murray\", \"Peeters\"), phone (\"+46 08-651 52 52\", \"+39 06 39733434\", \"+55 (12) 3923-5555\"), city (\"SÃ£o Paulo\", \"Fort Worth\", \"Vienne\"), address (\"5112 48 Street\", \"RilskÃ¡ 3174/6\", \"162 E Superior Street\"), company (\"Embraer - Empresa Brasileira de AeronÃ¡utica S.A.\", \"Rogers Canada\", \"Banco do Brasil S.A.\"), country (\"Canada\", \"USA\", \"Portugal\"), first_name (\"Niklas\", \"Fernanda\", \"Ellie\") | playlists : name (\"90âs Music\", \"Classical 101 - The Basics\", \"Movies\"), id (16, 15, 1) | genres : name (\"Science Fiction\", \"Latin\", \"Easy Listening\"), id (2, 6, 5) | albums : title (\"Great Recordings of the Century - Shubert: Schwanengesang, 4 Lieder\", \"The Office, Season 1\", \"Beyond Good And Evil\"), artist_id (135, 180, 242), id (300, 39, 196)",
        "ambiguous_queries": [
            "select billing_country, avg(total) from invoices group by billing_country order by avg(total) desc limit 10",
            "select billing_country, avg_total from invoices_total"
        ],
        "gold_ambiguity": {
            "match": "{\"average invoice size\": [{\"invoices\": [\"total\"]}, {\"invoices_total\": [\"avg_total\"]}], \"country name\": [{\"invoices\": [\"billing_country\"]}, {\"invoices_total\": [\"billing_country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average invoice size\" refers to the schema \"invoices_total\".\"avg_total\", \"country name\" refers to the schema \"invoices_total\".\"billing_country\"",
        "clear_ambiguity": "{\"average invoice size\": {\"invoices_total\": [\"avg_total\"]}, \"country name\": {\"invoices_total\": [\"billing_country\"]}}",
        "gold_query": "select billing_country, avg_total from invoices_total"
    },
    {
        "index": 784,
        "db_id": "inn_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/inn_1/inn_1.sqlite",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "schema_without_content": "rooms_maxoccupancy : max_maxoccupancy , sum_maxoccupancy , avg_maxoccupancy , min_maxoccupancy  | rooms : maxoccupancy , roomname , decor , baseprice , bedtype , beds , roomid  | reservations : code , checkin , rate , kids , checkout , room , firstname , lastname , adults ",
        "schema_with_content": "rooms_maxoccupancy : max_maxoccupancy (2, 4), sum_maxoccupancy (2, 4), avg_maxoccupancy (2, 4), min_maxoccupancy (2, 4) | rooms : maxoccupancy (2, 4), roomname (\"Recluse and defiance\", \"Riddle to exculpate\", \"Abscond or bolster\"), decor (\"modern\", \"traditional\", \"rustic\"), baseprice (100, 125, 100), bedtype (\"King\", \"Queen\", \"Double\"), beds (1, 2), roomid (\"TAA\", \"TAA\", \"AOB\") | reservations : code (37985, 55985, 29496), checkin (\"11-JAN-10\", \"19-JUN-10\", \"08-JUN-10\"), rate (175.0, 218.75, 106.25), kids (1, 1, 3), checkout (\"29-SEP-10\", \"27-JUN-10\", \"15-MAY-10\"), room (\"HBB\", \"RTE\", \"RND\"), firstname (\"CLAIR\", \"DOMINICK\", \"EMILIA\"), lastname (\"LELEUX\", \"MECHLING\", \"DUCHARME\"), adults (4, 4, 4)",
        "ambiguous_queries": [
            "select sum(maxoccupancy) from rooms where decor = 'modern'",
            "select sum_maxoccupancy from rooms_maxoccupancy where decor = 'modern'"
        ],
        "gold_ambiguity": {
            "match": "{\"people in total\": [{\"rooms\": [\"maxoccupancy\"]}, {\"rooms_maxoccupancy\": [\"sum_maxoccupancy\"]}], \"modern rooms\": [{\"rooms\": [\"decor\"]}, {\"rooms_maxoccupancy\": [\"decor\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"people in total\" refers to the schema \"rooms\".\"maxoccupancy\", \"modern rooms\" refers to the schema \"rooms\".\"decor\"",
        "clear_ambiguity": "{\"people in total\": {\"rooms\": [\"maxoccupancy\"]}, \"modern rooms\": {\"rooms\": [\"decor\"]}}",
        "gold_query": "select sum(maxoccupancy) from rooms where decor = 'modern'"
    },
    {
        "index": 785,
        "db_id": "store_product",
        "ambig_type": "aggregate",
        "db_file": "aggregate/store_product/store_product.sqlite",
        "question": "What is the average number of pages per minute color?",
        "schema_without_content": "store : type , store_id , ranking , number_of_product_category , store_name , area_size  | product_pages_per_minute_color : avg_pages_per_minute_color , sum_pages_per_minute_color , max_pages_per_minute_color , min_pages_per_minute_color  | store_district : district_id , store_id  | district : city_population , headquartered_city , city_area , district_id , district_name  | store_product : product_id , store_id  | product : interface , product , pages_per_minute_color , product_id , dimensions , max_page_size , dpi ",
        "schema_with_content": "store : type (\"City Mall\", \"Village Store\"), store_id (2, 2, 3), ranking (10, 9, 9), number_of_product_category (1170.0, 990.0, 990.0), store_name (\"Miramichi\", \"Blackville\", \"Neguac\"), area_size (26.69, 21.73, 21.73) | product_pages_per_minute_color : avg_pages_per_minute_color (30.0, 28.0, 4.0), sum_pages_per_minute_color (30.0, 30.0, 30.0), max_pages_per_minute_color (4.0, 4.0, 10.0), min_pages_per_minute_color (4.0, 30.0, 10.0) | store_district : district_id (3, 11, 3), store_id (4, 3, 3) | district : city_population (1526168.0, 530438.0, 314617.0), headquartered_city (\"Gujranwala City\", \"Hafizabad City\", \"Gujranwala City\"), city_area (18.0, 25.0, 20.0), district_id (11, 12, 8), district_name (\"Bahawalpur District\", \"Dera Ghazi Khan District\", \"Gujranwala District\") | store_product : product_id (4, 1, 3), store_id (2, 5, 3) | product : interface (\"USB 2.0\"), product (\"ScanShell 3000DN\", \"Canon imageFORMULA P-150\", \"Plustek MobileOffice D28 Corporate\"), pages_per_minute_color (3.0, 4.0, 28.0), product_id (5, 1, 1), dimensions (\"298 x 209 x 99\", \"301 x 160 x 158\", \"303 x 94 x 60\"), max_page_size (\"A4\", \"216mm x 356mm\", \"216mm x 355mm\"), dpi (600.0)",
        "ambiguous_queries": [
            "select avg(pages_per_minute_color) from product",
            "select avg_pages_per_minute_color from product_pages_per_minute_color"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of pages\": [{\"product\": [\"pages_per_minute_color\"]}, {\"product_pages_per_minute_color\": [\"avg_pages_per_minute_color\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of pages\" refers to the schema \"product\".\"pages_per_minute_color\"",
        "clear_ambiguity": "{\"average number of pages\": {\"product\": [\"pages_per_minute_color\"]}}",
        "gold_query": "select avg(pages_per_minute_color) from product"
    },
    {
        "index": 786,
        "db_id": "station_weather",
        "ambig_type": "aggregate",
        "db_file": "aggregate/station_weather/station_weather.sqlite",
        "question": "What is the average high temperature for each day of week?",
        "schema_without_content": "train : origin , name , interval , destination , id , train_number , time  | weekly_weather_high_temperature : day_of_week , avg_high_temperature , sum_high_temperature , min_high_temperature , max_high_temperature  | weekly_weather : station_id , day_of_week , low_temperature , wind_speed_mph , precipitation , high_temperature  | route : train_id , station_id  | station : id , network_name , local_authority , services ",
        "schema_with_content": "train : origin (\"Bangalore\", \"Madurai\", \"Bangalore\"), name (\"Guruvayur Express\", \"Madurai Fast Passenger\", \"Madurai Fast Passenger\"), interval (\"Daily\"), destination (\"Mumbai\", \"Mangalore\", \"Madurai\"), id (2, 11, 6), train_number (16723, 16723, 16381), time (\"21:49\", \"10:38\", \"04:55\") | weekly_weather_high_temperature : day_of_week (\"Friday\", \"Friday\", \"Friday\"), avg_high_temperature (57, 59, 49), sum_high_temperature (49, 49, 57), min_high_temperature (59, 66, 58), max_high_temperature (50, 60, 66) | weekly_weather : station_id (10, 3, 10), day_of_week (\"Wednesday\", \"Thursday\", \"Saturday\"), low_temperature (46, 52, 55), wind_speed_mph (14, 14, 20), precipitation (50.0, 60.0, 70.0), high_temperature (59, 49, 60) | route : train_id (6, 9, 4), station_id (9, 3, 7) | station : id (3, 1, 9), network_name (\"Chafford Hundred\", \"Broxbourne\", \"Amersham\"), local_authority (\"Watford\", \"Thurrock\", \"Watford\"), services (\"London Overground\", \"Metropolitan line\", \"Greater Anglia\")",
        "ambiguous_queries": [
            "select avg(high_temperature), day_of_week from weekly_weather group by day_of_week",
            "select avg_high_temperature, day_of_week from weekly_weather_high_temperature"
        ],
        "gold_ambiguity": {
            "match": "{\"day of week\": [{\"weekly_weather\": [\"day_of_week\"]}, {\"weekly_weather_high_temperature\": [\"day_of_week\"]}], \"average high temperature\": [{\"weekly_weather\": [\"high_temperature\"]}, {\"weekly_weather_high_temperature\": [\"avg_high_temperature\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"day of week\" refers to the schema \"weekly_weather\".\"day_of_week\", \"average high temperature\" refers to the schema \"weekly_weather\".\"high_temperature\"",
        "clear_ambiguity": "{\"day of week\": {\"weekly_weather\": [\"day_of_week\"]}, \"average high temperature\": {\"weekly_weather\": [\"high_temperature\"]}}",
        "gold_query": "select avg(high_temperature), day_of_week from weekly_weather group by day_of_week"
    },
    {
        "index": 787,
        "db_id": "film_rank",
        "ambig_type": "aggregate",
        "db_file": "aggregate/film_rank/film_rank.sqlite",
        "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
        "schema_without_content": "film_market_estimation : market_id , high_estimate , year , type , low_estimate , film_id , estimation_id  | market : market_id , country , number_cities  | film : title , studio , gross_in_dollar , director , film_id  | film_market_estimation_market_number_cities : sum_number_cities , avg_number_cities , min_number_cities , low_estimate , max_number_cities ",
        "schema_with_content": "film_market_estimation : market_id (1, 2, 3), high_estimate (913.0, 39.0, 913.0), year (1973, 1487, 1978), type (\"Mass suicide murder\", \"Mass suicide\", \"Mass human sacrifice\"), low_estimate (80000.0, 300.0, 53.0), film_id (2, 3, 4), estimation_id (1, 4, 4) | market : market_id (1, 6, 5), country (\"China\", \"France\", \"Russia\"), number_cities (209, 453, 209) | film : title (\"Gandhi\", \"48 Hrs\", \"An Officer and a Gentleman\"), studio (\"Orion / Carolco\", \"Orion / Carolco\", \"Columbia / Rastar\"), gross_in_dollar (47212904, 47212904, 69701637), director (\"Sydney Pollack\", \"Taylor Hackford\", \"Walter Hill\"), film_id (12, 3, 8) | film_market_estimation_market_number_cities : sum_number_cities (453, 231, 231), avg_number_cities (700, 540, 212), min_number_cities (540, 209, 700), low_estimate (80000.0, 16.0, 8000.0), max_number_cities (212, 700, 700)",
        "ambiguous_queries": [
            "select avg(t2.number_cities) from film_market_estimation as t1 join market as t2 on t1.market_id = t2.market_id where t1.low_estimate > 10000",
            "select avg_number_cities from film_market_estimation_market_number_cities where low_estimate > 10000"
        ],
        "gold_ambiguity": {
            "match": "{\"average number of cities\": [{\"film_market_estimation_market_number_cities\": [\"avg_number_cities\"]}, {\"market\": [\"number_cities\"]}], \"low market estimation\": [{\"film_market_estimation\": [\"low_estimate\"]}, {\"film_market_estimation_market_number_cities\": [\"low_estimate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average number of cities\" refers to the schema \"film_market_estimation_market_number_cities\".\"avg_number_cities\", \"low market estimation\" refers to the schema \"film_market_estimation_market_number_cities\".\"low_estimate\"",
        "clear_ambiguity": "{\"average number of cities\": {\"film_market_estimation_market_number_cities\": [\"avg_number_cities\"]}, \"low market estimation\": {\"film_market_estimation_market_number_cities\": [\"low_estimate\"]}}",
        "gold_query": "select avg_number_cities from film_market_estimation_market_number_cities where low_estimate > 10000"
    },
    {
        "index": 788,
        "db_id": "department_store",
        "ambig_type": "aggregate",
        "db_file": "aggregate/department_store/department_store.sqlite",
        "question": "Return the average price for each product type.",
        "schema_without_content": "customers : customer_code , customer_id , customer_address , customer_name , payment_method_code , customer_email , customer_phone  | staff : staff_id , staff_gender , staff_name  | order_items : product_id , order_id , order_item_id  | departments : dept_store_id , department_name , department_id  | customer_orders : order_status_code , order_date , order_id , customer_id  | addresses : address_id , address_details  | suppliers : supplier_id , supplier_phone 009-5928\", \"287-071-1153x254\", \"009-5928\", supplier_name  | product_suppliers : date_supplied_to , total_value_purchased , supplier_id , product_id , total_amount_purchased , date_supplied_from  | products_product_price : min_product_price , sum_product_price , product_type_code , avg_product_price , max_product_price  | staff_department_assignments : date_assigned_to , date_assigned_from , job_title_code , department_id , staff_id  | customer_addresses : customer_id , address_id , date_from , date_to  | department_stores : dept_store_id , store_name , store_email , dept_store_chain_id , store_phone 763-7031\", \"503-7086x356\", \"611-037-9309\", store_address  | supplier_addresses : address_id , date_from , date_to , supplier_id  | department_store_chain : dept_store_chain_id , dept_store_chain_name  | products : product_name , product_price , product_type_code , product_id ",
        "schema_with_content": "customers : customer_code (\"182\", \"848\", \"589\"), customer_id (2, 9, 10), customer_address (\"5065 Mraz Fields Apt. 041\nEast Chris, NH 41624\", \"9581 Will Flat Suite 272\nEast Cathryn, WY 30751-4404\", \"75099 Tremblay Port Apt. 163\nSouth Norrisland, SC 80546\"), customer_name (\"Karson\", \"Yasmeen\", \"Cordell\"), payment_method_code (\"Credit Card\", \"Direct Debit\"), customer_email (\"shawna.cummerata@example.net\", \"gwisozk@example.net\", \"nicholas44@example.com\"), customer_phone (\"07594320656\", \"117.822.3577\", \"1-064-498-6609x051\") | staff : staff_id (11, 1, 4), staff_gender (\"1\", \"0\"), staff_name (\"Melody\", \"Sabrina\", \"Sabrina\") | order_items : product_id (13, 5, 13), order_id (14, 1, 13), order_item_id (1, 11, 3) | departments : dept_store_id (5, 11, 4), department_name (\"marketing\", \"human resource\", \"marketing\"), department_id (1, 2, 1) | customer_orders : order_status_code (\"Completed\", \"Completed\", \"Pending\"), order_date (\"2018-03-06 16:35:51\", \"2018-03-07 16:55:17\", \"2018-03-16 22:42:46\"), order_id (9, 7, 7), customer_id (11, 13, 13) | addresses : address_id (7, 13, 13), address_details (\"8207 Morissette Lakes\nEast Rheaview, ID 47493\", \"28481 Crist Circle\nEast Burdettestad, IA 21232\", \"8207 Morissette Lakes\nEast Rheaview, ID 47493\") | suppliers : supplier_id (2, 1, 4), supplier_phone (\"(692)009-5928\", \"287-071-1153x254\", \"(692)009-5928\"), supplier_name (\"AB Store\", \"Audi\", \"Audi\") | product_suppliers : date_supplied_to (\"2018-03-24 02:29:44\", \"2018-03-24 02:38:31\", \"2018-03-24 09:17:15\"), total_value_purchased (67216.31, 76992.42, 29987.71), supplier_id (1, 4, 1), product_id (15, 8, 15), total_amount_purchased (\"32881.38\", \"22332.08\", \"20447.99\"), date_supplied_from (\"2017-11-17 08:23:16\", \"2017-11-17 08:23:16\", \"2017-06-25 14:59:40\") | products_product_price : min_product_price (604.86, 944.96, 695.16), sum_product_price (612.46, 939.57, 803.74), product_type_code (\"Clothes\", \"Hardware\"), avg_product_price (803.74, 939.57, 803.74), max_product_price (939.57, 629.89, 534.52) | staff_department_assignments : date_assigned_to (\"2018-03-25 02:59:19\", \"2018-03-25 02:29:08\", \"2018-03-24 02:36:57\"), date_assigned_from (\"2017-03-31 23:07:54\", \"2017-12-26 06:34:20\", \"2016-09-20 02:59:15\"), job_title_code (\"Department Manager\", \"Clerical Staff\", \"Clerical Staff\"), department_id (1, 2, 1), staff_id (12, 6, 9) | customer_addresses : customer_id (7, 6, 12), address_id (12, 4, 10), date_from (\"2017-08-06 20:57:36\", \"2017-12-11 05:00:22\", \"2018-01-15 12:05:39\"), date_to (\"2018-03-23 17:49:51\", \"2018-02-27 20:08:33\", \"2018-02-27 23:10:07\") | department_stores : dept_store_id (11, 14, 13), store_name (\"store_name\"), store_email (\"luisa57@example.org\", \"larissa10@example.org\", \"bmaggio@example.com\"), dept_store_chain_id (1, 3, 4), store_phone (\"(626)763-7031\", \"(723)503-7086x356\", \"611-037-9309\"), store_address (\"34894 Everett Road\nSouth Jeremiehaven, GA 08730\", \"93472 Mayert Shore Apt. 360\nMitchellton, TN 84209\", \"5288 Kaia Street\nDevonton, NJ 61782-9006\") | supplier_addresses : address_id (5, 2, 9), date_from (\"2008-11-22 12:01:25\", \"2015-03-16 19:30:29\", \"2016-09-22 16:41:31\"), date_to (\"2018-03-02 19:50:22\", \"2018-03-14 20:06:37\", \"2018-03-14 20:06:37\"), supplier_id (2, 3, 4) | department_store_chain : dept_store_chain_id (2, 4, 4), dept_store_chain_name (\"West\", \"West\", \"North\") | products : product_name (\"yellow jeans\", \"red topping\", \"mouse\"), product_price (408.82, 916.53, 803.74), product_type_code (\"Clothes\", \"Hardware\"), product_id (9, 9, 10)",
        "ambiguous_queries": [
            "select product_type_code, avg(product_price) from products group by product_type_code",
            "select product_type_code, avg_product_price from products_product_price"
        ],
        "gold_ambiguity": {
            "match": "{\"average price\": [{\"products\": [\"product_price\"]}, {\"products_product_price\": [\"avg_product_price\"]}], \"product type\": [{\"products\": [\"product_type_code\"]}, {\"products_product_price\": [\"product_type_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average price\" refers to the schema \"products\".\"product_price\", \"product type\" refers to the schema \"products\".\"product_type_code\"",
        "clear_ambiguity": "{\"average price\": {\"products\": [\"product_price\"]}, \"product type\": {\"products\": [\"product_type_code\"]}}",
        "gold_query": "select product_type_code, avg(product_price) from products group by product_type_code"
    },
    {
        "index": 789,
        "db_id": "voter_2",
        "ambig_type": "aggregate",
        "db_file": "aggregate/voter_2/voter_2.sqlite",
        "question": "Find the maximum age of all the students.",
        "schema_without_content": "student_age : min_age , avg_age , sum_age , max_age  | voting_record : secretary_vote , vice_president_vote , treasurer_vote , registration_date , president_vote , stuid , election_cycle , class_president_vote , class_senator_vote  | student : age , lname , major , stuid , advisor , city_code , sex , fname ",
        "schema_with_content": "student_age : min_age (21, 19, 26), avg_age (16, 21, 21), sum_age (22, 27, 16), max_age (16, 27, 19) | voting_record : secretary_vote (1010, 1020, 1030), vice_president_vote (1007, 1017), treasurer_vote (1035, 1025), registration_date (\"08/30/2015\", \"08/30/2012\", \"08/30/2015\"), president_vote (1004, 1014, 1024), stuid (1004, 1004, 1005), election_cycle (\"Spring\", \"Fall\"), class_president_vote (1011, 1021, 1001), class_senator_vote (1028, 1018) | student : age (16, 27, 26), lname (\"Apap\", \"Kim\", \"Cheng\"), major (50, 520, 550), stuid (1030, 1009, 1008), advisor (1121, 7712, 2311), city_code (\"YYZ\", \"NYC\", \"BOS\"), sex (\"F\", \"M\"), fname (\"William\", \"Ian\", \"Stacy\")",
        "ambiguous_queries": [
            "select max(age) from student",
            "select max_age from student_age"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum age\": [{\"student\": [\"age\"]}, {\"student_age\": [\"max_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum age\" refers to the schema \"student_age\".\"max_age\"",
        "clear_ambiguity": "{\"maximum age\": {\"student_age\": [\"max_age\"]}}",
        "gold_query": "select max_age from student_age"
    },
    {
        "index": 790,
        "db_id": "game_injury",
        "ambig_type": "aggregate",
        "db_file": "aggregate/game_injury/game_injury.sqlite",
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "schema_without_content": "game : competition , home_team , id , away_team , score \", \"1â3\", \"â\", season , stadium_id , date  | stadium_home_games : avg_home_games , max_home_games , min_home_games , sum_home_games  | stadium : average_attendance , total_attendance , home_games , id , capacity_percentage , name  | injury_accident : id , player , number_of_matches \", \"10\", \"7 \", injury , game_id , source ",
        "schema_with_content": "game : competition (\"League\", \"Cup\", \"Supercup\"), home_team (\"Quruvchi\", \"Pakhtakor\", \"Bunyodkor\"), id (7, 5, 3), away_team (\"Pakhtakor\", \"Quruvchi\", \"Bunyodkor\"), score (\"0â0 (7:6)\", \"1â3\", \"â\"), season (2013, 2013, 2011), stadium_id (11, 8, 6), date (\"8 August 2009\", \"14 March 2010\", \"12 July 2009\") | stadium_home_games : avg_home_games (8), max_home_games (8), min_home_games (8), sum_home_games (8) | stadium : average_attendance (70038.0, 70795.0, 71080.0), total_attendance (696377.0, 632156.0, 566362.0), home_games (8), id (11, 10, 12), capacity_percentage (98.4, 97.1, 98.4), name (\"FedExField\", \"Lincoln Financial Field\", \"New Meadowlands Stadium\") | injury_accident : id (13, 4, 7), player (\"Goran Pandev\", \"Davide Santon\", \"Thiago Motta\"), number_of_matches (\"7 (17)\", \"10\", \"7 (17)\"), injury (\"Slight thigh strain in right leg\", \"Slight thigh strain in right leg\", \"Post-traumatic pneumothrorax\"), game_id (9, 10, 4), source (\"inter.it\")",
        "ambiguous_queries": [
            "select max(home_games), min(home_games), avg(home_games) from stadium",
            "select max_home_games, min_home_games, avg_home_games from stadium_home_games"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"stadium\": [\"home_games\"]}, {\"stadium_home_games\": [\"max_home_games\"]}], \"minimum\": [{\"stadium\": [\"home_games\"]}, {\"stadium_home_games\": [\"min_home_games\"]}], \"average\": [{\"stadium\": [\"home_games\"]}, {\"stadium_home_games\": [\"avg_home_games\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"stadium_home_games\".\"max_home_games\", \"minimum\" refers to the schema \"stadium_home_games\".\"min_home_games\", \"average\" refers to the schema \"stadium_home_games\".\"avg_home_games\"",
        "clear_ambiguity": "{\"maximum\": {\"stadium_home_games\": [\"max_home_games\"]}, \"minimum\": {\"stadium_home_games\": [\"min_home_games\"]}, \"average\": {\"stadium_home_games\": [\"avg_home_games\"]}}",
        "gold_query": "select max_home_games, min_home_games, avg_home_games from stadium_home_games"
    },
    {
        "index": 791,
        "db_id": "swimming",
        "ambig_type": "aggregate",
        "db_file": "aggregate/swimming/swimming.sqlite",
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "schema_without_content": "event : stadium_id , id , year , name  | record : result , event_id , swimmer_id , id  | stadium : id , name , city , capacity , opening_year , country  | swimmer : meter_600 , meter_700 , meter_200 , meter_500 , meter_400 , nationality , meter_100 , name , meter_300 , time , id  | stadium_capacity : max_capacity , avg_capacity , sum_capacity , min_capacity ",
        "schema_with_content": "event : stadium_id (3, 8, 1), id (1, 3, 5), year (\"2014\", \"2012\", \"2012\"), name (\"World Junior\", \"IPC\", \"Pacific\") | record : result (\"NC\", \"Win\", \"Loss\"), event_id (3, 5, 1), swimmer_id (2, 1, 6), id (6, 1, 7) | stadium : id (6, 7, 7), name (\"Stade des LumiÃ¨res\", \"Fisht Olympic Stadium\", \"Fisht Olympic Stadium\"), city (\"Budapest\", \"Sochi\", \"Sochi\"), capacity (69501, 75000, 65000), opening_year (2006, 2005, 2007), country (\"Azerbaijan\", \"Hungary\", \"Hungary\") | swimmer : meter_600 (\"5:57.10\", \"5:57.10\", \"5:56.99\"), meter_700 (\"6:57.44\", \"6:57.44\", \"6:53.34\"), meter_200 (\"1:56.34\", \"1:56.34\", \"1:54.40\"), meter_500 (\"4:56.15\", \"4:56.15\", \"4:56.15\"), meter_400 (\"3:56.34\", \"3:55.37\", \"3:55.72\"), nationality (\"Tunisia\", \"Italy\", \"Italy\"), meter_100 (55.67, 55.67, 57.84), name (\"SÃ©bastien Rouault\", \"Oussama Mellouli\", \"Grant Hackett\"), meter_300 (\"2:57.10\", \"2:55.90\", \"2:56.95\"), time (\"7:55.39\", \"7:47.91\", \"7:53.43\"), id (8, 8, 2) | stadium_capacity : max_capacity (68000, 75000, 65000), avg_capacity (67500, 61556, 69501), sum_capacity (61556, 67500, 68000), min_capacity (56250, 67500, 69501)",
        "ambiguous_queries": [
            "select avg(capacity) from stadium where opening_year = 2005",
            "select avg_capacity from stadium_capacity where opening_year = 2005"
        ],
        "gold_ambiguity": {
            "match": "{\"average capacity\": [{\"stadium\": [\"capacity\"]}, {\"stadium_capacity\": [\"avg_capacity\"]}], \"year\": [{\"stadium\": [\"opening_year\"]}, {\"stadium_capacity\": [\"opening_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average capacity\" refers to the schema \"stadium_capacity\".\"avg_capacity\", \"year\" refers to the schema \"stadium_capacity\".\"opening_year\"",
        "clear_ambiguity": "{\"average capacity\": {\"stadium_capacity\": [\"avg_capacity\"]}, \"year\": {\"stadium_capacity\": [\"opening_year\"]}}",
        "gold_query": "select avg_capacity from stadium_capacity where opening_year = 2005"
    },
    {
        "index": 792,
        "db_id": "music_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/music_1/music_1.sqlite",
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "schema_without_content": "song : resolution , languages , releasedate , artist_name , country , rating , f_id , song_name , genre_is  | song_rating_resolution : sum_rating , min_rating , max_resolution , max_rating , sum_resolution , min_resolution , avg_rating , avg_resolution  | artist : country , gender , preferred_genre , artist_name  | files : duration , formats , f_id , artist_name , file_size  | genre : rating , g_name , most_popular_in ",
        "schema_with_content": "song : resolution (512, 720, 512), languages (\"bangla\", \"english\"), releasedate (\"27-MAR-2004\", \"28-AUG-2011\", \"24-JAN-2007\"), artist_name (\"Shrikanta\", \"Prity\", \"Michel\"), country (\"India\", \"Bangladesh\", \"UK\"), rating (10, 10, 7), f_id (6, 2, 5), song_name (\"My love\", \"Shukno patar nupur pae\", \"Shukno patar nupur pae\"), genre_is (\"tagore\", \"pop\", \"blues\") | song_rating_resolution : sum_rating (6, 10, 5), min_rating (10, 8, 10), max_resolution (1080, 720, 1080), max_rating (6, 10, 8), sum_resolution (320, 720, 720), min_resolution (512, 1080, 720), avg_rating (7, 5, 7), avg_resolution (512, 512, 512) | artist : country (\"UK\", \"USA\", \"UK\"), gender (\"Male\", \"Female\"), preferred_genre (\"folk\", \"tagore\", \"nazrul\"), artist_name (\"Farida\", \"Prity\", \"Michel\") | files : duration (\"4:30\", \"4:34\", \"4:34\"), formats (\"mp4\", \"mp3\"), f_id (5, 5, 4), artist_name (\"Shrikanta\", \"Topu\", \"Michel\"), file_size (\"4.10 MB\", \"4.12 MB\", \"3.78 MB\") | genre : rating (\"8\", \"7\", \"9\"), g_name (\"modern\", \"pop\", \"pop\"), most_popular_in (\"Canada\", \"Bangladesh\", \"Canada\")",
        "ambiguous_queries": [
            "select avg(rating), avg(resolution) from song where languages = 'bangla'",
            "select avg_rating, avg_resolution from song_rating_resolution where languages = 'bangla'"
        ],
        "gold_ambiguity": {
            "match": "{\"average rating\": [{\"song\": [\"rating\"]}, {\"song_rating_resolution\": [\"avg_rating\"]}], \"resolution\": [{\"song\": [\"resolution\"]}, {\"song_rating_resolution\": [\"avg_resolution\"]}], \"Bangla\": [{\"song\": [\"languages\"]}, {\"song_rating_resolution\": [\"languages\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average rating\" refers to the schema \"song\".\"rating\", \"resolution\" refers to the schema \"song\".\"resolution\", \"Bangla\" refers to the schema \"song\".\"languages\"",
        "clear_ambiguity": "{\"average rating\": {\"song\": [\"rating\"]}, \"resolution\": {\"song\": [\"resolution\"]}, \"Bangla\": {\"song\": [\"languages\"]}}",
        "gold_query": "select avg(rating), avg(resolution) from song where languages = 'bangla'"
    },
    {
        "index": 793,
        "db_id": "wta_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/wta_1/wta_1.sqlite",
        "question": "Find the average ranking for each player and their first name.",
        "schema_without_content": "matches : minutes , loser_entry , surface , tourney_id , score  7-6\", winner_name , winner_rank , loser_rank_points , winner_rank_points , tourney_name , loser_id , match_num , winner_seed , winner_ht , best_of , tourney_level , winner_hand , round , draw_size , winner_ioc , tourney_date , loser_rank , loser_hand , winner_id , year , loser_ht , winner_age , loser_age , loser_seed , loser_name , winner_entry , loser_ioc  | players_rankings_ranking : min_ranking , sum_ranking , first_name , max_ranking , avg_ranking  | rankings : ranking_date , ranking , player_id , tours , ranking_points  | players : hand , player_id , first_name , last_name , country_code , birth_date ",
        "schema_with_content": "matches : minutes (128, 130, 69), loser_entry (\"\"), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_id (\"2017-560\", \"2016-M010\", \"2016-540\"), score (\"4-6 6-3 1-0 RET\", \"6-1 2-6 6-4\", \"6-3 6-7(2) 7-6(5)\"), winner_name (\"Sara Errani\", \"Irina Camelia Begu\", \"Garbine Muguruza\"), winner_rank (34, 7, 6), loser_rank_points (1571, 3100, 2140), winner_rank_points (4975, 2720, 1736), tourney_name (\"Monterrey\", \"Eastbourne\", \"'S-Hertogenbosch\"), loser_id (201496, 201311, 201518), match_num (223, 289, 156), winner_seed (4, 22, 21), winner_ht (179, 176, 177), best_of (3), tourney_level (\"P\", \"P\", \"G\"), winner_hand (\"R\", \"L\"), round (\"F\", \"R32\", \"R16\"), draw_size (128, 12, 32), winner_ioc (\"POL\", \"AUS\", \"HUN\"), tourney_date (20160620, 20170320, 20170213), loser_rank (12, 22, 9), loser_hand (\"R\", \"L\"), winner_id (201347, 201499, 201518), year (2013, 2016, 2017), loser_ht (175, 184, 161), winner_age (21.9055441478, 24.4407939767, 28.574948665300003), loser_age (29.8480492813, 30.078028747399998, 33.106091718), loser_seed (14, 29, 30), loser_name (\"Annika Beck\", \"Lesia Tsurenko\", \"Ana Ivanovic\"), winner_entry (\"\"), loser_ioc (\"USA\", \"ESP\", \"BEL\") | players_rankings_ranking : min_ranking (973, 78, 1227), sum_ranking (1209, 568, 557), first_name (\"Deena Rose\", \"Farley\", \"Oxi\"), max_ranking (638, 735, 1125), avg_ranking (484, 408, 957) | rankings : ranking_date (19990201, 19920420, 19911014), ranking (719, 569, 968), player_id (215520, 213944, 206248), tours (23, 2, 14), ranking_points (11501, 929, 3080) | players : hand (\"R\", \"\", \"U\"), player_id (202812, 204598, 213072), first_name (\"Tajana\", \"Barbora\", \"Ioana Florentina\"), last_name (\"Vlak\", \"Kubicikova\", \"Vliegen\"), country_code (\"RHO\", \"AUS\", \"PHI\"), birth_date (19970115, 19590216, 19851121)",
        "ambiguous_queries": [
            "select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
            "select avg_ranking, first_name from players_rankings_ranking"
        ],
        "gold_ambiguity": {
            "match": "{\"first name\": [{\"players\": [\"first_name\"]}, {\"players_rankings_ranking\": [\"first_name\"]}], \"average ranking\": [{\"players_rankings_ranking\": [\"avg_ranking\"]}, {\"rankings\": [\"ranking\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"first name\" refers to the schema \"players_rankings_ranking\".\"first_name\", \"average ranking\" refers to the schema \"players_rankings_ranking\".\"avg_ranking\"",
        "clear_ambiguity": "{\"first name\": {\"players_rankings_ranking\": [\"first_name\"]}, \"average ranking\": {\"players_rankings_ranking\": [\"avg_ranking\"]}}",
        "gold_query": "select avg_ranking, first_name from players_rankings_ranking"
    },
    {
        "index": 794,
        "db_id": "train_station",
        "ambig_type": "aggregate",
        "db_file": "aggregate/train_station/train_station.sqlite",
        "question": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "schema_without_content": "station : location , annual_entry_exit , station_id , name , annual_interchanges , total_passengers , number_of_platforms , main_services  | station_number_of_platforms_total_passengers : avg_total_passengers , sum_number_of_platforms , max_number_of_platforms , location , sum_total_passengers , avg_number_of_platforms , min_total_passengers , max_total_passengers , min_number_of_platforms  | train_station : station_id , train_id  | train : name , service , train_id , time ",
        "schema_with_content": "station : location (\"London\", \"Birmingham\", \"Glasgow\"), annual_entry_exit (21.797, 21.797, 22.996), station_id (11, 2, 3), name (\"London King's Cross\", \"London Bridge\", \"London Charing Cross\"), annual_interchanges (5.118, 9.157, 5.118), total_passengers (26.672, 30.896, 103.534), number_of_platforms (6, 15, 19), main_services (\"South Western Main Line West of England Main Line\", \"Brighton Main Line Chatham Main Line\", \"South Western Main Line West of England Main Line\") | station_number_of_platforms_total_passengers : avg_total_passengers (26.672, 40.44, 26.892), sum_number_of_platforms (13, 19, 13), max_number_of_platforms (6, 13, 13), location (\"London\", \"Birmingham\", \"Glasgow\"), sum_total_passengers (26.892, 26.892, 40.44), avg_number_of_platforms (17, 12, 6), min_total_passengers (26.672, 26.892, 26.892), max_total_passengers (36.331, 85.38, 59.46), min_number_of_platforms (6, 17, 13) | train_station : station_id (10, 9, 1), train_id (8, 3, 1) | train : name (\"Jayanthi Janatha Express\", \"Parasuram Express\", \"Jayanthi Janatha Express\"), service (\"Daily\"), train_id (4, 7, 11), time (\"04:55\", \"11:35\", \"4:49\")",
        "ambiguous_queries": [
            "select location, sum(number_of_platforms), sum(total_passengers) from station group by location",
            "select location, sum_number_of_platforms, sum_total_passengers from station_number_of_platforms_total_passengers"
        ],
        "gold_ambiguity": {
            "match": "{\"location\": [{\"station\": [\"location\"]}, {\"station_number_of_platforms_total_passengers\": [\"location\"]}], \"total number of platforms\": [{\"station\": [\"number_of_platforms\"]}, {\"station_number_of_platforms_total_passengers\": [\"sum_number_of_platforms\"]}], \"passengers\": [{\"station\": [\"total_passengers\"]}, {\"station_number_of_platforms_total_passengers\": [\"sum_total_passengers\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"location\" refers to the schema \"station_number_of_platforms_total_passengers\".\"location\", \"total number of platforms\" refers to the schema \"station_number_of_platforms_total_passengers\".\"sum_number_of_platforms\", \"passengers\" refers to the schema \"station_number_of_platforms_total_passengers\".\"sum_total_passengers\"",
        "clear_ambiguity": "{\"location\": {\"station_number_of_platforms_total_passengers\": [\"location\"]}, \"total number of platforms\": {\"station_number_of_platforms_total_passengers\": [\"sum_number_of_platforms\"]}, \"passengers\": {\"station_number_of_platforms_total_passengers\": [\"sum_total_passengers\"]}}",
        "gold_query": "select location, sum_number_of_platforms, sum_total_passengers from station_number_of_platforms_total_passengers"
    },
    {
        "index": 795,
        "db_id": "concert_singer",
        "ambig_type": "aggregate",
        "db_file": "aggregate/concert_singer/concert_singer.sqlite",
        "question": "What is the average and maximum capacities for all stations?",
        "schema_without_content": "concert : year , concert_name , concert_id , stadium_id , theme  | stadium_capacity : max_capacity , sum_capacity , avg_capacity , min_capacity  | singer : country , singer_id , song_release_year , name , age , song_name , is_male  | singer_in_concert : concert_id , singer_id  | stadium : highest , stadium_id , name , average , location , capacity , lowest ",
        "schema_with_content": "concert : year (\"2014\", \"2015\"), concert_name (\"Super bootcamp\", \"Home Visits\", \"Home Visits\"), concert_id (3, 6, 1), stadium_id (\"7\", \"9\", \"10\"), theme (\"Free choice\", \"Free choice\", \"Free choice 2\") | stadium_capacity : max_capacity (4125, 3960, 3808), sum_capacity (3960, 52500, 10104), avg_capacity (11998, 4000, 4125), min_capacity (3960, 4000, 3960) | singer : country (\"Netherlands\", \"United States\", \"France\"), singer_id (4, 5, 2), song_release_year (\"2003\", \"2016\", \"2013\"), name (\"Joe Sharp\", \"Joe Sharp\", \"John Nizinik\"), age (52, 25, 25), song_name (\"Sun\", \"You\", \"Hey Oh\"), is_male (\"F\", \"T\") | singer_in_concert : concert_id (4, 1, 2), singer_id (\"2\", \"4\", \"6\") | stadium : highest (1125, 1057, 1057), stadium_id (4, 1, 1), name (\"Forthbank Stadium\", \"Bayview Stadium\", \"Recreation Park\"), average (637, 552, 615), location (\"Alloa Athletic\", \"Arbroath\", \"Alloa Athletic\"), capacity (3960, 2000, 3960), lowest (1057, 1057, 466)",
        "ambiguous_queries": [
            "select avg(capacity), max(capacity) from stadium",
            "select avg_capacity, max_capacity from stadium_capacity"
        ],
        "gold_ambiguity": {
            "match": "{\"average\": [{\"stadium\": [\"capacity\"]}, {\"stadium_capacity\": [\"avg_capacity\"]}], \"maximum\": [{\"stadium\": [\"capacity\"]}, {\"stadium_capacity\": [\"max_capacity\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average\" refers to the schema \"stadium\".\"capacity\", \"maximum\" refers to the schema \"stadium\".\"capacity\"",
        "clear_ambiguity": "{\"average\": {\"stadium\": [\"capacity\"]}, \"maximum\": {\"stadium\": [\"capacity\"]}}",
        "gold_query": "select avg(capacity), max(capacity) from stadium"
    },
    {
        "index": 796,
        "db_id": "college_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/college_1/college_1.sqlite",
        "question": "Find the total number of hours have done for all students in each department.",
        "schema_without_content": "student_stu_hrs : dept_code , avg_stu_hrs , sum_stu_hrs , min_stu_hrs , max_stu_hrs  | course : dept_code , crs_code , crs_credit , crs_description  | professor : prof_office , emp_num , dept_code , prof_extension , prof_high_degree  | student : stu_init , stu_phone , stu_transfer , stu_hrs , stu_num , stu_dob , dept_code , stu_class , stu_fname , stu_gpa , prof_num , stu_lname  | class : class_code , class_section , crs_code , prof_num , class_room , class_time  | department : school_code , dept_name , dept_code , emp_num , dept_address , dept_extension  | enroll : stu_num , class_code , enroll_grade  | employee : emp_dob , emp_hiredate , emp_jobcode , emp_lname , emp_fname , emp_initial , emp_num ",
        "schema_with_content": "student_stu_hrs : dept_code (\"EDU\", \"ENGL\", \"ACCT\"), avg_stu_hrs (102, 114, 81), sum_stu_hrs (36, 36, 66), min_stu_hrs (114, 66, 15), max_stu_hrs (102, 102, 42) | course : dept_code (\"ACCT\", \"CIS\"), crs_code (\"CIS-420\", \"CIS-220\", \"QM-362\"), crs_credit (3.0, 4.0), crs_description (\"Intro. to Statistics\", \"Accounting II\", \"Intro. to Statistics\") | professor : prof_office (\"BBG 185\", \"DRE 208\", \"KLR 300\"), emp_num (342, 301, 106), dept_code (\"MKT/MGT\", \"ENG\", \"PSYCH\"), prof_extension (\"3899\", \"3421\", \"2248\"), prof_high_degree (\"DBA\", \"DBA\", \"MA\") | student : stu_init (\"D\", \"H\", \"D\"), stu_phone (\"2256\", \"2256\", \"2134\"), stu_transfer (0, 1), stu_hrs (66, 102, 81), stu_num (324274, 324299, 324273), stu_dob (\"1981-11-15\", \"1979-10-21\", \"1981-11-15\"), dept_code (\"EDU\", \"ENGL\", \"CIS\"), stu_class (\"Fr\", \"Sr\", \"So\"), stu_fname (\"Raphael\", \"William\", \"Anne\"), stu_gpa (2.26, 3.15, 3.15), prof_num (228, 311, 222), stu_lname (\"Smith\", \"Brewer\", \"Smith\") | class : class_code (\"10013\", \"10017\", \"10013\"), class_section (\"1\", \"2\", \"3\"), crs_code (\"CIS-420\", \"CIS-420\", \"CIS-220\"), prof_num (114, 301, 105), class_room (\"BUS252\", \"KLR211\", \"BUS252\"), class_time (\"MWF 8:00-8:50 a.m.\", \"MWF 8:00-8:50 a.m.\", \"MWF 11:00-11:50 a.m.\") | department : school_code (\"BUS\", \"A&SCI\"), dept_name (\"Computer Info. Systems\", \"History\", \"Economics/Finance\"), dept_code (\"SOC\", \"MATH\", \"BIOL\"), emp_num (209, 387, 114), dept_address (\"DRE 102, Box 223\", \"DRE 156, Box 284\", \"KLR 284, Box 63\"), dept_extension (\"3119\", \"4110\", \"4117\") | enroll : stu_num (321452, 324257), class_code (\"10014\", \"10018\", \"10021\"), enroll_grade (\"C\", \"B\", \"A\") | employee : emp_dob (\"1963-10-2\", \"1952-10-2\", \"1957-5-24\"), emp_hiredate (\"1989-8-1\", \"1975-8-1\", \"1990-7-23\"), emp_jobcode (\"TECH\", \"CUST\", \"TECH\"), emp_lname (\"Doornberg\", \"Yukon\", \"Donelly\"), emp_fname (\"Anne\", \"Robert\", \"Suzanne\"), emp_initial (\"F\", \"M\", \"K\"), emp_num (425, 104, 165)",
        "ambiguous_queries": [
            "select sum(stu_hrs), dept_code from student group by dept_code",
            "select sum_stu_hrs, dept_code from student_stu_hrs"
        ],
        "gold_ambiguity": {
            "match": "{\"department\": [{\"student\": [\"dept_code\"]}, {\"student_stu_hrs\": [\"dept_code\"]}], \"total number of hours\": [{\"student\": [\"stu_hrs\"]}, {\"student_stu_hrs\": [\"sum_stu_hrs\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"department\" refers to the schema \"student_stu_hrs\".\"dept_code\", \"total number of hours\" refers to the schema \"student_stu_hrs\".\"sum_stu_hrs\"",
        "clear_ambiguity": "{\"department\": {\"student_stu_hrs\": [\"dept_code\"]}, \"total number of hours\": {\"student_stu_hrs\": [\"sum_stu_hrs\"]}}",
        "gold_query": "select sum_stu_hrs, dept_code from student_stu_hrs"
    },
    {
        "index": 797,
        "db_id": "voter_1",
        "ambig_type": "aggregate",
        "db_file": "aggregate/voter_1/voter_1.sqlite",
        "question": "What are the maximum and minimum values of area codes?",
        "schema_without_content": "area_code_state_area_code : sum_area_code , min_area_code , avg_area_code , max_area_code  | area_code_state : area_code , state  | votes : state , phone_number , vote_id , contestant_number , created  | contestants : contestant_name , contestant_number ",
        "schema_with_content": "area_code_state_area_code : sum_area_code (254, 903, 334), min_area_code (425, 717, 845), avg_area_code (320, 337, 424), max_area_code (907, 501, 513) | area_code_state : area_code (801, 415, 618), state (\"OR\", \"MO\", \"ME\") | votes : state (\"NY\", \"CA\", \"NJ\n\"), phone_number (7182887233, 6209222712, 5112677315), vote_id (5, 2, 5), contestant_number (2, 3, 5), created (\"2018-03-09 19:03:36\", \"2018-03-09 19:03:40\", \"2018-03-09 19:03:40\") | contestants : contestant_name (\"Ericka Dieter\", \"Jessie Alloway\", \"Jessie Eichman\"), contestant_number (2, 7, 11)",
        "ambiguous_queries": [
            "select max(area_code), min(area_code) from area_code_state",
            "select max_area_code, min_area_code from area_code_state_area_code"
        ],
        "gold_ambiguity": {
            "match": "{\"maximum\": [{\"area_code_state\": [\"area_code\"]}, {\"area_code_state_area_code\": [\"max_area_code\"]}], \"minimum\": [{\"area_code_state\": [\"area_code\"]}, {\"area_code_state_area_code\": [\"min_area_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"maximum\" refers to the schema \"area_code_state_area_code\".\"max_area_code\", \"minimum\" refers to the schema \"area_code_state_area_code\".\"min_area_code\"",
        "clear_ambiguity": "{\"maximum\": {\"area_code_state_area_code\": [\"max_area_code\"]}, \"minimum\": {\"area_code_state_area_code\": [\"min_area_code\"]}}",
        "gold_query": "select max_area_code, min_area_code from area_code_state_area_code"
    },
    {
        "index": 798,
        "db_id": "roller_coaster",
        "ambig_type": "aggregate",
        "db_file": "aggregate/roller_coaster/roller_coaster.sqlite",
        "question": "What is the average speed of roller coasters?",
        "schema_without_content": "roller_coaster_speed : sum_speed , avg_speed , min_speed , max_speed  | roller_coaster : status , length , opened , roller_coaster_id , country_id , park , height , name , speed  | country : population , country_id , languages , name , area ",
        "schema_with_content": "roller_coaster_speed : sum_speed (\"37.9\", \"67\", \"70\"), avg_speed (\"57\", \"37.9\", \"57\"), min_speed (\"70\", \"51\", \"57\"), max_speed (\"70\", \"57\", \"67\") | roller_coaster : status (\"Operating\"), length (3914.0, 1574.0, 2900.0), opened (\"August 31, 2007\", \"August 31, 2007\", \"May 14, 2005\"), roller_coaster_id (4, 2, 6), country_id (1, 2, 3), park (\"Happy Valley\", \"GrÃ¶na Lund\", \"Mt. Olympus\"), height (105.0, 120.0, 50.0), name (\"Boardwalk Bullet\", \"Ravine Flyer II\", \"Dauling Dragon\"), speed (\"55\", \"55\", \"67\") | country : population (8206524, 5261008, 9047752), country_id (1, 2, 3), languages (\"German\", \"Finnish Swedish\", \"Swedish\"), name (\"Austria\", \"Finland\", \"Sweden\"), area (83871, 338145, 449964)",
        "ambiguous_queries": [
            "select avg(speed) from roller_coaster",
            "select avg_speed from roller_coaster_speed"
        ],
        "gold_ambiguity": {
            "match": "{\"average speed\": [{\"roller_coaster\": [\"speed\"]}, {\"roller_coaster_speed\": [\"avg_speed\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average speed\" refers to the schema \"roller_coaster\".\"speed\"",
        "clear_ambiguity": "{\"average speed\": {\"roller_coaster\": [\"speed\"]}}",
        "gold_query": "select avg(speed) from roller_coaster"
    },
    {
        "index": 799,
        "db_id": "customers_and_invoices",
        "ambig_type": "aggregate",
        "db_file": "aggregate/customers_and_invoices/customers_and_invoices.sqlite",
        "question": "What are total transaction amounts for each transaction type?",
        "schema_without_content": "financial_transactions : invoice_number , transaction_date , other_transaction_details , transaction_id , transaction_type , account_id , transaction_amount , transaction_comment  | order_items : product_quantity , product_id , order_item_id , other_order_item_details , order_id  | orders : order_details , customer_id , date_order_placed , order_id  | financial_transactions_transaction_amount : min_transaction_amount , transaction_type , max_transaction_amount , avg_transaction_amount , sum_transaction_amount  | accounts : date_account_opened , account_name , other_account_details , customer_id , account_id  | invoice_line_items : invoice_number , derived_vat_payable , product_quantity , product_id , derived_product_cost , product_price , order_item_id , derived_total_cost , product_title  | customers : customer_first_name , state_county_province , login_name , email_address , country , customer_last_name , customer_middle_initial , town_city , phone_number 406-8761\", \"197-955-3766\", \"1-546-302-5676\", gender , login_password , customer_id  | products : product_size , unit_price , production_type_code , product_id , product_name , parent_product_id , product_color  | product_categories : production_type_code , vat_rating , product_type_description  | invoices : order_id , invoice_date , invoice_number ",
        "schema_with_content": "financial_transactions : invoice_number (14, 15, 6), transaction_date (\"2018-03-03 01:50:25\", \"2018-03-03 01:50:25\", \"2018-03-11 21:57:47\"), other_transaction_details (None), transaction_id (1, 9, 15), transaction_type (\"Payment\", \"Refund\"), account_id (4, 14, 11), transaction_amount (368.46, 1585.03, 1567.64), transaction_comment (None) | order_items : product_quantity (\"8\", \"9\", \"8\"), product_id (15, 3, 7), order_item_id (9, 8, 13), other_order_item_details (None), order_id (13, 15, 1) | orders : order_details (None), customer_id (11, 1, 12), date_order_placed (\"2015-05-17 03:05:32\", \"2012-08-25 07:51:54\", \"2017-05-24 19:26:44\"), order_id (11, 12, 12) | financial_transactions_transaction_amount : min_transaction_amount (613.96, 1477.57, 1903.41), transaction_type (\"Payment\", \"Refund\"), max_transaction_amount (899.87, 1903.41, 1517.77), avg_transaction_amount (1903.41, 368.46, 1903.41), sum_transaction_amount (1598.25, 1567.64, 613.96) | accounts : date_account_opened (\"2015-02-02 09:47:08\", \"2012-07-09 23:40:15\", \"2010-06-16 09:35:00\"), account_name (\"520\", \"323\", \"272\"), other_account_details (\"Regular\", \"VIP\"), customer_id (12, 8, 15), account_id (1, 5, 11) | invoice_line_items : invoice_number (11, 14, 12), derived_vat_payable (None), product_quantity (\"8\", \"2\", \"6\"), product_id (6, 14, 3), derived_product_cost (73.14, 88.43, 254.08), product_price (781.46, 559.95, 559.95), order_item_id (5, 4, 14), derived_total_cost (59.93, 53.53, 61), product_title (\"prod_name\") | customers : customer_first_name (\"Abbey\", \"Dee\", \"Murl\"), state_county_province (\"Kentucky\", \"Kansas\", \"Alabama\"), login_name (\"sophia97\", \"ahmad.hagenes\", \"feeney.lauriane\"), email_address (\"anastacio45@example.org\", \"jacobi.shanon@example.org\", \"pyundt@example.org\"), country (\"USA\"), customer_last_name (\"Leuschke\", \"Spinka\", \"Glover\"), customer_middle_initial (\"K\", \"K\", \"K\"), town_city (\"North Nellie\", \"Port Hollie\", \"Bruenchester\"), phone_number (\"(650)406-8761\", \"197-955-3766\", \"1-546-302-5676\"), gender (\"1\", \"0\"), login_password (\"035f2ba1e2a675c4f426\", \"035f2ba1e2a675c4f426\", \"180a37476c537e78d3de\"), customer_id (11, 6, 3) | products : product_size (\"Medium\", \"Small\", \"Large\"), unit_price (682.06, 563.58, 49.62), production_type_code (\"Books\", \"DVDs\", \"Electronics\"), product_id (4, 13, 13), product_name (\"Harry Potter 2\", \"Learning French\", \"Harry Potter 4\"), parent_product_id (6, 7, 2), product_color (\"Red\", \"Yellow\", \"Black\") | product_categories : production_type_code (\"Electronics\", \"Food\", \"Food\"), vat_rating (13.95, 13.95, 15.84), product_type_description (\"Dvd products\", \"Electrical devices\", \"Books\") | invoices : order_id (4, 12, 4), invoice_date (\"2018-03-16 21:57:43\", \"2018-03-16 21:57:43\", \"2018-03-19 22:38:10\"), invoice_number (14, 13, 11)",
        "ambiguous_queries": [
            "select transaction_type, sum(transaction_amount) from financial_transactions group by transaction_type",
            "select transaction_type, sum_transaction_amount from financial_transactions_transaction_amount"
        ],
        "gold_ambiguity": {
            "match": "{\"total transaction amounts\": [{\"financial_transactions\": [\"transaction_amount\"]}, {\"financial_transactions_transaction_amount\": [\"sum_transaction_amount\"]}], \"transaction type\": [{\"financial_transactions\": [\"transaction_type\"]}, {\"financial_transactions_transaction_amount\": [\"transaction_type\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"total transaction amounts\" refers to the schema \"financial_transactions_transaction_amount\".\"sum_transaction_amount\", \"transaction type\" refers to the schema \"financial_transactions_transaction_amount\".\"transaction_type\"",
        "clear_ambiguity": "{\"total transaction amounts\": {\"financial_transactions_transaction_amount\": [\"sum_transaction_amount\"]}, \"transaction type\": {\"financial_transactions_transaction_amount\": [\"transaction_type\"]}}",
        "gold_query": "select transaction_type, sum_transaction_amount from financial_transactions_transaction_amount"
    },
    {
        "index": 800,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
        "question": "What is the content type, title and premiere date where user rating is equal to 5",
        "schema_without_content": "Movies : id, title, genre, director, runtime, release_date | Series : id, title, genre, creator, episodeCount, premiereDate | Users : id, username, password, email, subscriptionType | Reviews : id, userId, contentId, rating, reviewText | Content : id, type, title, genre, creator, numEpisodesOrDuration, premiereMonth, premiereYear, season | Creators : id, name, birthYear",
        "schema_with_content": "Movies : id (2, 1), title ('The Godfather', 'The Shawshank Redemption'), genre ('Crime', 'Drama'), director ('Francis Ford Coppola', 'Frank Darabont'), runtime (175, 142), release_date ('1972-03-24', '1994-09-23') | Series : id (2, 1), title ('Game of Thrones', 'Breaking Bad'), genre ('Fantasy', 'Crime Drama'), creator ('Vince Gilligan', 'David Benioff and D.B. Weiss'), episodeCount (62, 60), premiereDate ('2011-04-17', '2008-01-20') | Users : id (2, 1), username ('user2', 'user1'), password ('password2', 'password1'), email ('user2@example.com', 'user1@example.com'), subscriptionType ('Premium', 'Standard') | Reviews : id (2, 1), userId (2, 1), contentId (2, 1), rating (5, 4), reviewText ('Awesome series with amazing characters.', 'Great movie with a powerful story.') | Content : id (1, 2), type ('Film', 'TV Series'), title ('Inception', 'Stranger Things'), genre ('Science Fiction', 'Action, Adventure, Sci-Fi'), creator ('The Duffer Brothers', 'Christopher Nolan'), numEpisodesOrDuration (8, 128), premiereMonth (7, 7), premiereYear (2010, 2016), season (1) | Creators : id (1, 2), name ('James Cameron', 'Quentin Tarantino'), birthYear (1963, 1954)",
        "ambiguous_queries": [
            "Select type, title, premiereMonth FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;",
            "Select type, title, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;",
            "Select type, title, premiereMonth, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
        ],
        "gold_ambiguity": {
            "match": "{\"premiere date\": [{\"Content\": [\"premiereMonth\"]}, {\"Content\": [\"premiereYear\"]}, {\"Content\": [\"premiereMonth\", \"premiereYear\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"premiere date\" refers to the schema \"Content\".\"premiereYear\"",
        "clear_ambiguity": "{\"premiere date\": {\"Content\": [\"premiereYear\"]}}",
        "gold_query": "Select type, title, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
    },
    {
        "index": 801,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2tabs_mortality_trends/vague_2tabs_mortality_trends.sqlite",
        "question": "show me the mortality trends and names of provinces with a population greater than 1,500,000",
        "schema_without_content": "Person : personID, name, dateofbirth | Disease : diseaseID, name, deathrate | Number_Of_Deaths : year, total_deaths | Crude_Death_Rate : year, rate | Province : provinceID, name, year, population",
        "schema_with_content": "Person : personID (3, 5, 4), name ('Alice Brown', 'Jane Smith', 'John Doe'), dateofbirth ('1978-12-12', '1980-01-02', '1975-03-15') | Disease : diseaseID (1, 4, 5), name ('Cancer', 'Respiratory diseases', 'Heart Disease'), deathrate (0.07, 0.32, 0.1) | Number_Of_Deaths : year (2002, 2001, 2000), total_deaths (51000, 53000, 52000) | Crude_Death_Rate : year (2001, 2000, 2003), rate (9.3, 9.4, 9.2) | Province : provinceID (2, 5, 4), name ('Texas', 'California', 'Florida'), year (2003, 2004, 2000), population (20000000, 10000000, 15000000)",
        "ambiguous_queries": [
            "SELECT Number_Of_Deaths.total_deaths, Province.name FROM Number_Of_Deaths JOIN Province ON Number_Of_Deaths.year = Province.year WHERE Province.population > 1500000",
            "SELECT Crude_Death_Rate.rate, Province.name FROM Crude_Death_Rate JOIN Province ON Crude_Death_Rate.year = Province.year WHERE Province.population > 1500000",
            "SELECT Number_Of_Deaths.total_deaths, Crude_Death_Rate.rate, Province.name FROM Number_Of_Deaths JOIN Province ON Number_Of_Deaths.year = Province.year JOIN Crude_Death_Rate ON Province.year = Crude_Death_Rate.year WHERE Province.population > 1500000"
        ],
        "gold_ambiguity": {
            "match": "{\"mortality trends\": [{\"Crude_Death_Rate\": [\"rate\"]}, {\"Number_Of_Deaths\": [\"total_deaths\"]}, {\"Crude_Death_Rate\": [\"rate\"], \"Number_Of_Deaths\": [\"total_deaths\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"mortality trends\" refers to the schema \"Number_Of_Deaths\".\"total_deaths\"",
        "clear_ambiguity": "{\"mortality trends\": {\"Number_Of_Deaths\": [\"total_deaths\"]}}",
        "gold_query": "SELECT Number_Of_Deaths.total_deaths, Crude_Death_Rate.rate, Province.name FROM Number_Of_Deaths JOIN Province ON Number_Of_Deaths.year = Province.year JOIN Crude_Death_Rate ON Province.year = Crude_Death_Rate.year WHERE Province.population > 1500000"
    },
    {
        "index": 802,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_aircraft_family/vague_2cols_aircraft_family.sqlite",
        "question": "List the flights with the corresponding airlines, aircraft families and pilots assigned to the flights.",
        "schema_without_content": "Airports : id, name, city, country | Airlines : id, airline_name, headquarters_city, headquarters_country | Planes : id, manufacturer_name, model_name, purpose, max_passenger_capacity, range_km | Routes : id, source_airport_id, destination_airport_id, airline_id, departure_time, arrival_time | Flights : id, route_id, plane_id, flight_number, departure_date, scheduled_departure_time, actual_departure_time | Pilots : id, license_number, rating_level, total_flight_hours, full_name | AssignsPilotToFlight : pilot_id, flight_id, assignment_date",
        "schema_with_content": "Airports : id (2, 4, 1), name ('Heathrow Airport', 'John F. Kennedy International', 'Los Angeles International'), city ('London', 'Dubai', 'Paris'), country ('UK', 'UAE', 'USA') | Airlines : id (5, 3, 1), airline_name ('Delta Air Lines', 'Emirates', 'Air France'), headquarters_city ('Atlanta', 'Dubai', 'London'), headquarters_country ('UAE', 'USA', 'France') | Planes : id (2, 4, 5), manufacturer_name ('Embraer Executive Jets', 'Gulfstream Aerospace', 'Airbus'), model_name ('Legacy 650', 'A350-1000', '787-9 Dreamliner'), purpose ('Business Jet', 'Passenger', 'Business Jet'), max_passenger_capacity (18, 12, 280), range_km (6000.0, 7700.0, 14800.0) | Routes : id (2, 1, 5), source_airport_id (1, 4, 1), destination_airport_id (2, 3, 2), airline_id (2, 3, 4), departure_time ('2022-01-01 10:00:00', '2022-01-01 16:00:00', '2022-01-01 14:00:00'), arrival_time ('2022-01-01 19:00:00', '2022-01-01 14:00:00', '2022-01-01 16:00:00') | Flights : id (3, 5, 4), route_id (2, 5, 4), plane_id (2, 2, 2), flight_number ('DL123', 'EK123', 'BA123'), departure_date ('2022-01-01', '2022-01-01', '2022-01-01'), scheduled_departure_time ('16:00:00', '12:00:00', '10:00:00'), actual_departure_time () | Pilots : id (4, 3, 5), license_number ('IJKL9012', 'PQRS7890', 'EFGH5678'), rating_level ('ATPL', 'ATPL', 'ATPL'), total_flight_hours (7000, 5000, 5500), full_name ('John Doe', 'Jane Smith', 'Michael Johnson') | AssignsPilotToFlight : pilot_id (5, 3, 4), flight_id (2, 3, 1), assignment_date ('2022-01-01', '2022-01-01', '2022-01-01')",
        "ambiguous_queries": [
            "SELECT Flights.flight_number, Airlines.airline_name, Planes.manufacturer_name, Pilots.full_name FROM Flights JOIN Routes ON Routes.id = Flights.route_id JOIN Planes ON Planes.id = Flights.plane_id JOIN AssignsPilotToFlight APTF ON APTF.flight_id = Flights.id JOIN Pilots ON Pilots.id = APTF.pilot_id JOIN Airlines ON Airlines.id = Routes.airline_id",
            "SELECT Flights.flight_number, Airlines.airline_name, Planes.model_name, Pilots.full_name FROM Flights JOIN Routes ON Routes.id = Flights.route_id JOIN Planes ON Planes.id = Flights.plane_id JOIN AssignsPilotToFlight APTF ON APTF.flight_id = Flights.id JOIN Pilots ON Pilots.id = APTF.pilot_id JOIN Airlines ON Airlines.id = Routes.airline_id",
            "SELECT Flights.flight_number, Airlines.airline_name, Planes.manufacturer_name, model_name, Pilots.full_name FROM Flights JOIN Routes ON Routes.id = Flights.route_id JOIN Planes ON Planes.id = Flights.plane_id JOIN AssignsPilotToFlight APTF ON APTF.flight_id = Flights.id JOIN Pilots ON Pilots.id = APTF.pilot_id JOIN Airlines ON Airlines.id = Routes.airline_id"
        ],
        "gold_ambiguity": {
            "match": "{\"pilots\": [{\"Planes\": [\"manufacturer_name\"]}, {\"Planes\": [\"model_name\"]}, {\"Planes\": [\"manufacturer_name\", \"model_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"pilots\" refers to the schema \"Planes\".\"manufacturer_name\" and \"Planes\".\"model_name\"",
        "clear_ambiguity": "{\"pilots\": {\"Planes\": [\"manufacturer_name\", \"model_name\"]}}",
        "gold_query": "SELECT Flights.flight_number, Airlines.airline_name, Planes.manufacturer_name, model_name, Pilots.full_name FROM Flights JOIN Routes ON Routes.id = Flights.route_id JOIN Planes ON Planes.id = Flights.plane_id JOIN AssignsPilotToFlight APTF ON APTF.flight_id = Flights.id JOIN Pilots ON Pilots.id = APTF.pilot_id JOIN Airlines ON Airlines.id = Routes.airline_id"
    },
    {
        "index": 803,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_release_timeframe1/vague_2cols_release_timeframe1.sqlite",
        "question": "When was the album with the shortest song released?",
        "schema_without_content": "Albums : id, Year, Month, AlbumName, Genre, ArtistId | Artists : id, Name, BirthDate, Country, MusicGenre | Songs : id, Title, Length, ReleaseDate, AlbumId | MovieActors : ActorID, FirstName, LastName, DateOfBirth, Nationality | Movies : MovieID, Title, Director, ReleaseDate, Genre, Runtime | Directors : DirectorName, Birthdate, Country, KnownFor | FilmRatings : RatingID, MovieID, Rating, Review",
        "schema_with_content": "Albums : id (1, 3, 4), Year (2017, 2020, 2019), Month ('January', 'May', 'April'), AlbumName ('Piano Sonata No. 14', 'Echoes of the Past', 'The Journey Home'), Genre ('Choral', 'Classical', 'Jazz'), ArtistId (4, 5, 2) | Artists : id (1, 5, 3), Name ('Anna White', 'Mark Green', 'Emily Johnson'), BirthDate ('1992-11-12', '1985-02-25', '1990-03-07'), Country ('Germany', 'USA', 'Australia'), MusicGenre ('Rock', 'Classical', 'Blues') | Songs : id (5, 3, 2), Title ('Nostalgic Night', 'Homeward Bound', 'Serenade'), Length ('3:20', '3:30', '2:55'), ReleaseDate ('2017-05-25', '2016-10-10', '2020-04-20'), AlbumId (3, 2, 5) | MovieActors : ActorID (2, 5, 1), FirstName ('Tom Hanks', 'Cate Blanchett', 'Christopher Walken'), LastName ('Versatile Star', 'Distinctive Actor', 'Hollywood Legend'), DateOfBirth ('1969-05-14', '1974-11-11', '1956-07-09'), Nationality ('American', 'Australian', 'English') | Movies : MovieID (4, 2, 3), Title ('Inception', 'Titanic', 'The Shawshank Redemption'), Director ('Christopher Nolan', 'Gabriele Muccino', 'Frank Darabont'), ReleaseDate ('1997-12-19', '2006-12-15', '2010-07-16'), Genre ('Disaster/Drama', 'Drama/Romance', 'Action/Science Fiction'), Runtime (111, 142, 150) | Directors : DirectorName ('Robert Zemeckis', 'James Cameron', 'Gabriele Muccino'), Birthdate ('1970-07-30', '1946-05-14', '1955-01-28'), Country ('America', 'America', 'England'), KnownFor ('Shawshank Redemption', 'Avatar', 'Pursuit of Happiness') | FilmRatings : RatingID (4, 3, 1), MovieID (5, 3, 2), Rating ('B+', 'A-', 'A'), Review ('Interesting concept but fell short on execution.', 'Beautiful film with amazing acting.', 'Good plot but could have been better.')",
        "ambiguous_queries": [
            "SELECT Year FROM Albums JOIN Songs ON Songs.AlbumId = Albums.id ORDER BY Length ASC LIMIT 1;",
            "SELECT Month FROM Albums JOIN Songs ON Songs.AlbumId = Albums.id ORDER BY Length ASC LIMIT 1;",
            "SELECT Year, Month FROM Albums JOIN Songs ON Songs.AlbumId = Albums.id ORDER BY Length ASC LIMIT 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"released\": [{\"Albums\": [\"Year\"]}, {\"Albums\": [\"Month\"]}, {\"Albums\": [\"Year\", \"Month\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"released\" refers to the schema \"Albums\".\"Month\"",
        "clear_ambiguity": "{\"released\": {\"Albums\": [\"Month\"]}}",
        "gold_query": "SELECT Month FROM Albums JOIN Songs ON Songs.AlbumId = Albums.id ORDER BY Length ASC LIMIT 1;"
    },
    {
        "index": 804,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_production/vague_2cols_production.sqlite",
        "question": "What were the comments split by movies and their productions?",
        "schema_without_content": "Studio : id, name, address_line1, address_line2, phone_number | Producer : id, email, birthdate, full_name | Movie : id, title, release_year, genre, studio_id, producer_id | Actor : id, first_name, last_name, date_of_birth, gender | Character : id, movie_id, actor_id, character_name | Review : id, movie_id, reviewer_id, rating, comments, review_date",
        "schema_with_content": "Studio : id (1, 2), name ('Disney Studios', 'Warner Bros.'), address_line1 ('500 S Buena Vista St', '108 W 9th St'), address_line2 (), phone_number ('+1-310-786-7711', '+1-818-560-1000') | Producer : id (1, 2), email ('jonathann@gmail.com', 'christophern@gmail.com'), birthdate ('1976-07-24', '1970-08-30'), full_name ('Christopher Nolan', 'Jonathan Nolan') | Movie : id (2, 1), title ('Inception', 'The Dark Knight Rises'), release_year (2012, 2010), genre ('Action/Adventure', 'Action/Thriller'), studio_id (1, 1), producer_id (1, 2) | Actor : id (2, 1), first_name ('Leonardo', 'Tom'), last_name ('Hardy', 'DiCaprio'), date_of_birth ('1977-09-15', '1974-11-11'), gender ('M', 'M') | Character : id (2, 1), movie_id (1, 1), actor_id (1, 2), character_name ('Cobb', 'Arthur') | Review : id (2, 1), movie_id (1, 1), reviewer_id (1, 2), rating (9, 8), comments ('Great movie!', 'Amazing visuals and storytelling'), review_date ('2021-12-16 12:00:00', '2021-12-15 12:00:00')",
        "ambiguous_queries": [
            "SELECT a.title, b.comments, c.name FROM Movie a JOIN Review b ON a.id = b.movie_id JOIN Studio c ON c.id = a.studio_id",
            "SELECT a.title, b.comments, c.Full_name FROM Movie a JOIN Review b ON a.id = b.movie_id JOIN Producer c ON c.id = a.producer_id",
            "SELECT a.title, b.comments, c.name, p.full_name FROM Movie a JOIN Review b ON a.id = b.movie_id JOIN Studio c ON c.id = a.studio_id JOIN Producer p ON p.id = a.producer_id"
        ],
        "gold_ambiguity": {
            "match": "{\"productions\": [{\"Producer\": [\"Full_name\"]}, {\"Studio\": [\"name\"]}, {\"Producer\": [\"Full_name\"], \"Studio\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"productions\" refers to the schema \"Producer\".\"Full_name\"",
        "clear_ambiguity": "{\"productions\": {\"Producer\": [\"Full_name\"]}}",
        "gold_query": "SELECT a.title, b.comments, c.Full_name FROM Movie a JOIN Review b ON a.id = b.movie_id JOIN Producer c ON c.id = a.producer_id"
    },
    {
        "index": 805,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_divorce_rate/vague_2cols_divorce_rate.sqlite",
        "question": "What is the divorce rate in villages with less than 300 people?",
        "schema_without_content": "VillageDemographics : id, Village, Divorced_Percentage, Divorced_Count, TotalPopulation, MaleCount, FemaleCount | AgeGroup : id, AgeRange, PopulationInThisAgeRange | GenderDemographics : id, Gender, Count | MaritalStatus : id, Status | EmploymentStatus : id, Status | EducationLevel : id, Level",
        "schema_with_content": "VillageDemographics : id (1, 2), Village ('Village1', 'Village2'), Divorced_Percentage (0.8, 0.7), Divorced_Count (20, 23), TotalPopulation (290, 300), MaleCount (160, 150), FemaleCount (140, 140) | AgeGroup : id (3, 1, 4), AgeRange ('51-65', '36-50', '65+'), PopulationInThisAgeRange (120, 30, 100) | GenderDemographics : id (2, 5, 3), Gender ('Other', 'Female', 'Nonbinary'), Count (2, 5, 3) | MaritalStatus : id (4, 1, 2), Status ('Divorced', 'Single', 'Separated') | EmploymentStatus : id (5, 1, 4), Status ('Retired', 'Employed full-time', 'Unemployed') | EducationLevel : id (3, 4, 1), Level ('No formal education', 'High school diploma', 'Secondary school')",
        "ambiguous_queries": [
            "SELECT Divorced_Percentage FROM VillageDemographics WHERE TotalPopulation < 300",
            "SELECT Divorced_Count FROM VillageDemographics WHERE TotalPopulation < 300",
            "SELECT Divorced_Percentage, Divorced_Count FROM VillageDemographics WHERE TotalPopulation < 300"
        ],
        "gold_ambiguity": {
            "match": "{\"divorce rate\": [{\"VillageDemographics\": [\"Divorced_Percentage\"]}, {\"VillageDemographics\": [\"Divorced_Count\"]}, {\"VillageDemographics\": [\"Divorced_Percentage\", \"Divorced_Count\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"divorce rate\" refers to the schema \"VillageDemographics\".\"Divorced_Count\"",
        "clear_ambiguity": "{\"divorce rate\": {\"VillageDemographics\": [\"Divorced_Count\"]}}",
        "gold_query": "SELECT Divorced_Count FROM VillageDemographics WHERE TotalPopulation < 300"
    },
    {
        "index": 806,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
        "question": "Display the airports and their runways in order of the number of runways they have",
        "schema_without_content": "Cities : Id, Name, Country | Airports : Id, CityId, Code, RunwayCount | Runways : Id, Length, Width, SurfaceType, AirportId | Flights : FlightId, DepartureAirportId, ArrivalAirportId, ScheduledDeparture, ActualDeparture, EstimatedArrival, Status, AircraftModel",
        "schema_with_content": "Cities : Id (2, 4, 1), Name ('Dubai', 'Tokyo', 'London'), Country ('France', 'USA', 'UAE') | Airports : Id (4, 1, 3), CityId (5, 3, 2), Code ('LHR', 'JFK', 'HND'), RunwayCount (2, 2, 3) | Runways : Id (2, 5, 3), Length (9000.0, 8800.0, 8000.0), Width (150.0, 180.0, 220.0), SurfaceType ('Tarmac', 'Asphalt', 'Grass'), AirportId (2, 4, 1) | Flights : FlightId (2, 3, 1), DepartureAirportId (3, 1, 5), ArrivalAirportId (5, 1, 3), ScheduledDeparture ('2023-03-25 21:00:00', '2023-03-26 02:00:00', '2023-03-25 15:00:00'), ActualDeparture ('2023-03-25 18:30:00', '2023-03-25 15:30:00', '2023-03-25 12:15:00'), EstimatedArrival ('2023-03-25 22:15:00', '2023-03-25 23:15:00', '2023-03-25 13:45:00'), Status ('On Time', 'On Time', 'Delayed'), AircraftModel ('Emirates A380', 'Airbus A380', 'Boeing 787')",
        "ambiguous_queries": [
            "select cities.name, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount",
            "select Airports.Code, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount",
            "select cities.name, Airports.Code, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount"
        ],
        "gold_ambiguity": {
            "match": "{\"airports\": [{\"Airports\": [\"Code\"]}, {\"Airports\": [\"Code\"], \"Cities\": [\"name\"]}, {\"Cities\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airports\" refers to the schema \"cities\".\"name\"",
        "clear_ambiguity": "{\"airports\": {\"Cities\": [\"name\"]}}",
        "gold_query": "select cities.name, Airports.Code, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount"
    },
    {
        "index": 807,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_location1/vague_2cols_location1.sqlite",
        "question": "Where is the branch run by David Black located?",
        "schema_without_content": "customers : id, first_name, last_name, email, phone, address_id | accounts : account_number, account_type, balance, customer_id | transactions : transaction_id, date, amount, description, account_id | loans : loan_number, loan_amount, interest_rate, term, due_date, customer_id | branches : branch_id, branch_manager, street_name, neighborhood, number_of_branches | employees : employee_id, first_name, last_name, position, hire_date, branch_id",
        "schema_with_content": "customers : id (3, 4, 1), first_name ('John', 'David', 'Jane'), last_name ('Doe', 'Smith', 'Black'), email ('david.black@example.com', 'jane.smith@example.com', 'alice.brown@example.com'), phone ('555-123-4567', '123-456-7890', '555-555-5555'), address_id (4, 3, 1) | accounts : account_number (1, 4, 2), account_type ('IRA', 'Savings', 'Money Market'), balance (5000.0, 1000.0, 15000.0), customer_id (2, 4, 5) | transactions : transaction_id (1, 3, 4), date ('2021-01-05 00:00:00', '2021-01-04 00:00:00', '2021-01-02 00:00:00'), amount (-50.0, -150.0, 200.0), description ('Rent Payment', 'Online Shopping', 'Paycheck Deposit'), account_id (1, 1, 1) | loans : loan_number (2, 3, 1), loan_amount (25000.0, 20000.0, 30000.0), interest_rate (4.5, 5.0, 6.0), term (48, 36, 72), due_date ('2027-01-01 00:00:00', '2024-01-01 00:00:00', '2026-01-01 00:00:00'), customer_id (2, 4, 1) | branches : branch_id (4, 1, 5), branch_manager ('John Smith', 'David Black', 'Jane Doe'), street_name ('1st Ave', 'Washington Blvd', 'Central Park West'), neighborhood ('Lower Manhattan', 'Upper West Side', 'Downtown'), number_of_branches (1, 6, 2) | employees : employee_id (3, 2, 1), first_name ('Charlie', 'David', 'Alice'), last_name ('Doe', 'Doe', 'Doe'), position ('Branch Manager', 'Head Teller', 'Customer Service Representative'), hire_date ('2021-01-01 00:00:00', '2021-05-01 00:00:00', '2021-02-01 00:00:00'), branch_id (1, 1, 3)",
        "ambiguous_queries": [
            "SELECT street_name FROM branches WHERE branch_manager = 'David Black'",
            "SELECT neighborhood FROM branches WHERE branch_manager = 'David Black'",
            "SELECT street_name, neighborhood FROM branches WHERE branch_manager = 'David Black'"
        ],
        "gold_ambiguity": {
            "match": "{\"branch\": [{\"branches\": [\"street_name\", \"neighborhood\"]}, {\"branches\": [\"street_name\"]}, {\"branches\": [\"neighborhood\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"branch\" refers to the schema \"branches\".\"neighborhood\"",
        "clear_ambiguity": "{\"branch\": {\"branches\": [\"neighborhood\"]}}",
        "gold_query": "SELECT neighborhood FROM branches WHERE branch_manager = 'David Black'"
    },
    {
        "index": 808,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_review/vague_2cols_review.sqlite",
        "question": "What was the review of the drama film?",
        "schema_without_content": "Film : ID, Title, Director, ReleaseDate, Genre, Rating | Actor : ID, Name, Birthdate, Nationality, RoleInFilm | Cinematography : ID, Technique, Equipment, ShotList, FilmID | ProductionDesign : ID, Style, Budget, Location, FilmID | SoundDesign : ID, Type, Effects, MixingLocation, FilmID | Reviews : ID, CriticName, Opinion, AudienceReviews, FilmId",
        "schema_with_content": "Film : ID (2, 1), Title ('The Shawshank Redemption', 'Pulp Fiction'), Director ('Frank Darabont', 'Quentin Tarantino'), ReleaseDate ('1994-09-23', '1994-10-14'), Genre ('Crime', 'Drama'), Rating (8.9, 8.7) | Actor : ID (1, 2), Name ('Morgan Freeman', 'Brad Pitt'), Birthdate ('1963-12-18', '1937-06-01'), Nationality ('American', 'American'), RoleInFilm ('James', 'Red') | Cinematography : ID (2, 1), Technique ('Dolly Zoom', 'Handheld'), Equipment ('Panavision Millennium XL2', 'ARRI Alexa Mini'), ShotList ('Scene 3: Close up on Andy and Red talking...', 'Scene 1: Establishing shot of prison...'), FilmID (1, 1) | ProductionDesign : ID (2, 1), Style ('Neo-noir', 'Minimalist'), Budget ('10 million', '5 million'), Location ('Prison in Ohio', 'Los Angeles streets'), FilmID (1, 2) | SoundDesign : ID (2, 1), Type ('Dialogue and Music', 'Sound effects'), Effects ('Car screeching, footsteps', 'Gunshots, screams'), MixingLocation ('Dolby Theatre', 'Dolby Theatre'), FilmID (1, 2) | Reviews : ID (2, 1), CriticName ('Roger Ebert', 'Pauline Kael'), Opinion ('Terrific acting.', 'A masterpiece.'), AudienceReviews ('Five stars!', 'Audience loved it!'), FilmId (1, 2)",
        "ambiguous_queries": [
            "SELECT Opinion FROM Reviews JOIN Film ON Film.ID = Reviews.FilmId WHERE Genre = 'Drama'",
            "SELECT AudienceReviews FROM Reviews JOIN Film ON Film.ID = Reviews.FilmId WHERE Genre = 'Drama'",
            "SELECT Opinion, AudienceReviews FROM Reviews JOIN Film ON Film.ID = Reviews.FilmId WHERE Genre = 'Drama'"
        ],
        "gold_ambiguity": {
            "match": "{\"review\": [{\"Reviews\": [\"Opinion\"]}, {\"Reviews\": [\"AudienceReviews\"]}, {\"Reviews\": [\"Opinion\", \"AudienceReviews\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"review\" refers to the schema \"Reviews\".\"Opinion\" and \"Reviews\".\"AudienceReviews\"",
        "clear_ambiguity": "{\"review\": {\"Reviews\": [\"Opinion\", \"AudienceReviews\"]}}",
        "gold_query": "SELECT Opinion, AudienceReviews FROM Reviews JOIN Film ON Film.ID = Reviews.FilmId WHERE Genre = 'Drama'"
    },
    {
        "index": 809,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2cols_awards/vague_2cols_awards.sqlite",
        "question": "What awards and for what films did Zack Snyder present?",
        "schema_without_content": "Award : id, Award_Name, Winning_Category, Film, Year, Presenter | Director : id, Name, Birthdate, Nationality | Actor : id, Name, Date_of_Birth, Ethnicity | Movie : id, Title, Release_Date, Runtime, Genre | Producer : id, Name, Production_Company, Number_Of_Productions | Viewership : id, Movie_ID, Total_Views, Peak_Concurrent_Streams, Platform",
        "schema_with_content": "Award : id (2, 3, 1), Award_Name ('Best Picture', 'Best Original Score', 'Best Supporting Actress'), Winning_Category ('Animation', 'Drama', 'Comedy'), Film ('The Irishman', 'Toy Story 4', 'It Chapter Two'), Year (2019, 2019, 2019), Presenter ('Robert De Niro', 'Zack Snyder', 'Tim Allen') | Director : id (5, 1, 3), Name ('Denis Villeneuve', 'Christopher Nolan', 'Guillermo del Toro'), Birthdate ('27/03/1963', '09/12/1964', '20/07/1970'), Nationality ('Mexican', 'American', 'American') | Actor : id (1, 3, 4), Name ('Brad Pitt', 'Cate Blanchett', 'Tom Hardy'), Date_of_Birth ('22/11/1984', '18/12/1963', '15/09/1977'), Ethnicity ('American', 'German-Irish-Italian', 'English') | Movie : id (1, 5, 3), Title ('Inception', 'Man of Steel', 'Dunkirk'), Release_Date ('14/06/2013', '21/07/2017', '31/08/2020'), Runtime (150, 143, 148), Genre ('Science Fiction', 'Action', 'Science Fiction') | Producer : id (2, 3, 5), Name ('Barbara Broccoli', 'Kevin Feige', 'Frank Marshall'), Production_Company ('Amblin Entertainment', 'Heyday Films', 'Brooksfilms'), Number_Of_Productions (50, 50, 50) | Viewership : id (2, 4, 3), Movie_ID (1, 5, 4), Total_Views (1000000, 750000, 300000), Peak_Concurrent_Streams (300000, 200000, 500000), Platform ('Hulu', 'Netflix', 'Apple TV+')",
        "ambiguous_queries": [
            "select Award_Name, film from award where presenter = 'Zack Snyder'",
            "select Winning_Category, film from award where presenter = 'Zack Snyder'",
            "select Award_Name, Winning_Category, film from award where presenter = 'Zack Snyder'"
        ],
        "gold_ambiguity": {
            "match": "{\"awards\": [{\"Award\": [\"Award_Name\", \"Winning_Category\"]}, {\"Award\": [\"Award_Name\"]}, {\"Award\": [\"Winning_Category\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"awards\" refers to the schema \"award\".\"Winning_Category\"",
        "clear_ambiguity": "{\"awards\": {\"Award\": [\"Winning_Category\"]}}",
        "gold_query": "select Winning_Category, film from award where presenter = 'Zack Snyder'"
    },
    {
        "index": 810,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
        "question": "Where will user2 go to the concert and who will perform?",
        "schema_without_content": "artists : id, name, genre | concerts : id, artistId, date, city, concertHall | venues : id, venueName, location, capacity | tickets : id, concertId, price, quantity, type | users : id, username, email, passwordHash | bookings : id, userId, ticketId, bookingDate, status",
        "schema_with_content": "artists : id (1, 3, 2), name ('Lady Gaga', 'Michael Jackson', 'The Beatles'), genre ('Pop', 'Pop', 'Classic Rock') | concerts : id (5, 2, 1), artistId (2, 1, 5), date ('2023-08-30', '2023-07-15', '2023-09-10'), city ('Dallas', 'New York', 'Chicago'), concertHall ('American Airlines Center', 'United Center', 'Madison Square Garden') | venues : id (4, 5, 3), venueName ('TD Garden', 'Staples Center', 'Madison Square Garden'), location ('Boston', 'New York', 'Los Angeles'), capacity (23000, 19000, 19000) | tickets : id (5, 3, 4), concertId (2, 1, 2), price (220, 120, 100), quantity (1000, 1000, 1000), type ('General Admission', 'VIP', 'VIP') | users : id (1, 5, 2), username ('user3', 'user1', 'user5'), email ('user4@example.com', 'user3@example.com', 'user5@example.com'), passwordHash ('passwordhash3', 'passwordhash4', 'passwordhash1') | bookings : id (4, 1, 3), userId (1, 4, 2), ticketId (4, 1, 3), bookingDate ('2024-02-19 13:13:50', '2024-02-19 13:13:50', '2024-02-19 13:13:50'), status ('Confirmed', 'Confirmed', 'Confirmed')",
        "ambiguous_queries": [
            "SELECT artists.name, concerts.city FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id JOIN users ON bookings.userId = users.id WHERE users.username = 'user2';",
            "SELECT artists.name, concerts.concertHall FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id JOIN users ON bookings.userId = users.id WHERE users.username = 'user2';",
            "SELECT artists.name, concerts.city, concertHall FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id JOIN users ON bookings.userId = users.id WHERE users.username = 'user2';"
        ],
        "gold_ambiguity": {
            "match": "{\"concert\": [{\"concerts\": [\"city\", \"concertHall\"]}, {\"concerts\": [\"city\"]}, {\"concerts\": [\"concertHall\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"concert\" refers to the schema \"concerts\".\"concertHall\"",
        "clear_ambiguity": "{\"concert\": {\"concerts\": [\"concertHall\"]}}",
        "gold_query": "SELECT artists.name, concerts.city, concertHall FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id JOIN users ON bookings.userId = users.id WHERE users.username = 'user2';"
    },
    {
        "index": 811,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_origin/vague_2tabs_origin.sqlite",
        "question": "Where did capoeira come from?",
        "schema_without_content": "Culture : id, name, description | Geographical_Area : id, region | Dance : id, dance_name, culture_id, geographical_area_id | Music : id, music_title, genre, cultural_influence | Movie : id, movie_title, release_year, director_id | Actor : id, actor_name, birthdate, nationality | Director : id, director_name, birthplace, known_for",
        "schema_with_content": "Culture : id (3, 5, 2), name ('Mexican', 'Irish', 'Spanish'), description ('Argentine culture reflects a unique fusion of European influences and indigenous traditions.', 'Brazilian culture is vibrant and diverse, reflecting a blend of indigenous, Portuguese, and African influences.', 'Mexican culture is a rich tapestry of indigenous and Spanish influences.') | Geographical_Area : id (5, 1, 4), region ('Europe', 'Africa', 'Latin America') | Dance : id (1, 2, 5), dance_name ('Ballet Folklorico', 'Flamenco', 'Irish Step Dance'), culture_id (5, 1, 2), geographical_area_id (4, 5, 3) | Music : id (3, 2, 4), music_title ('Bohemian Rhapsody', 'Despacito', 'Viva La Vida'), genre ('Jazz', 'Progressive Rock', 'Classical'), cultural_influence (10, 1, 8) | Movie : id (1, 5, 2), movie_title ('Forrest Gump', 'The Shawshank Redemption', \"Schindler's List\"), release_year (1994, 1993, 1994), director_id (5, 2, 4) | Actor : id (2, 5, 1), actor_name ('Kate Winslet', 'Leonardo DiCaprio', 'Morgan Freeman'), birthdate ('1975-10-05', '1956-10-04', '1937-06-01'), nationality ('German', 'American', 'American') | Director : id (4, 3, 2), director_name ('Frank Darabont', 'Steven Spielberg', 'Quentin Tarantino'), birthplace ('Chicago, USA', 'Cincinnati, USA', 'Louisville, USA'), known_for ('Forrest Gump', 'Good Will Hunting', \"Schindler's List\")",
        "ambiguous_queries": [
            "SELECT name FROM Culture JOIN Dance ON Dance.culture_id = Culture.id WHERE dance_name = 'Capoeira'",
            "SELECT region FROM Geographical_Area JOIN Dance ON Dance.Geographical_Area_id = Geographical_Area.id WHERE dance_name = 'Capoeira'",
            "SELECT name, region FROM Culture JOIN Dance ON Dance.culture_id = Culture.id JOIN Geographical_Area ON Dance.Geographical_Area_id = Geographical_Area.id WHERE dance_name = 'Capoeira'"
        ],
        "gold_ambiguity": {
            "match": "{\"come from\": [{\"Culture\": [\"name\"]}, {\"Culture\": [\"region\"]}, {\"Geographical_Area\": [\"region\"]}, {\"Culture\": [\"name\", \"region\"], \"Geographical_Area\": [\"region\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"come from\" refers to the schema \"Geographical_Area\".\"region\"",
        "clear_ambiguity": "{\"come from\": {\"Geographical_Area\": [\"region\"]}}",
        "gold_query": "SELECT region FROM Geographical_Area JOIN Dance ON Dance.Geographical_Area_id = Geographical_Area.id WHERE dance_name = 'Capoeira'"
    },
    {
        "index": 812,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
        "question": "What's the maintenance cost of the longest Project?",
        "schema_without_content": "Project : id, Name, StartDate, EndDate, Monetary_Value, Percentage_Of_Budget, Infrastructure | Worker : id, FirstName, LastName, JobTitle | Materials : id, MaterialName, Quantity, UnitCost | Equipment : id, EquipName, PurchasePrice, RentalRate, DailyUsage",
        "schema_with_content": "Project : id (2, 1), Name ('Project2', 'Project1'), StartDate ('2023-02-01', '2023-01-01'), EndDate ('2023-06-01', '2023-08-01'), Monetary_Value (500000.0, 900000.0), Percentage_Of_Budget (80.0, 75.0), Infrastructure ('Commercial Complex', 'Residential Building') | Worker : id (2, 1), FirstName ('Jane', 'John'), LastName ('Doe', 'Smith'), JobTitle ('Electrician', 'Carpenter') | Materials : id (2, 1), MaterialName ('Bricks', 'Concrete Blocks'), Quantity (300, 500), UnitCost (3.5, 5.0) | Equipment : id (1, 2), EquipName ('Excavator', 'Crane'), PurchasePrice (30000.0, 20000.0), RentalRate (1000.0, 1500.0), DailyUsage (8, 6)",
        "ambiguous_queries": [
            "SELECT Monetary_Value FROM Project WHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = ( SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate)) FROM Project )",
            "SELECT Percentage_Of_Budget FROM Project WHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = ( SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate)) FROM Project )",
            "SELECT Monetary_Value, Percentage_Of_Budget FROM Project WHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = ( SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate)) FROM Project )"
        ],
        "gold_ambiguity": {
            "match": "{\"cost\": [{\"Project\": [\"Monetary_Value\"]}, {\"Project\": [\"Percentage_Of_Budget\"]}, {\"Project\": [\"Monetary_Value\", \"Percentage_Of_Budget\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cost\" refers to the schema \"Project\".\"Percentage_Of_Budget\"",
        "clear_ambiguity": "{\"cost\": {\"Project\": [\"Percentage_Of_Budget\"]}}",
        "gold_query": "SELECT Percentage_Of_Budget FROM Project WHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = ( SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate)) FROM Project )"
    },
    {
        "index": 813,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_key_elements/vague_2tabs_key_elements.sqlite",
        "question": "Describe the different designs.",
        "schema_without_content": "Color_Palette : color_id, color_name | Fabric_Choice : fabric_id, fabric_type | Fashion_Design : design_id, design_name, color_id, fabric_id",
        "schema_with_content": "Color_Palette : color_id (3, 1, 4), color_name ('Yellow', 'White', 'Red') | Fabric_Choice : fabric_id (5, 2, 4), fabric_type ('Wool', 'Cotton', 'Silk') | Fashion_Design : design_id (5, 2, 1), design_name ('Denim Jacket', 'Classic Black Suit', 'Summer Dress'), color_id (1, 2, 3), fabric_id (2, 5, 4)",
        "ambiguous_queries": [
            "SELECT design_name, color_name FROM Color_Palette JOIN Fashion_Design ON Fashion_Design.color_id = Color_Palette.color_id;",
            "SELECT design_name, fabric_type FROM Fabric_Choice JOIN Fashion_Design ON Fashion_Design.fabric_id = Fabric_Choice.fabric_id;",
            "SELECT design_name, color_name, fabric_type FROM Color_Palette JOIN Fashion_Design ON Fashion_Design.color_id = Color_Palette.color_id JOIN Fabric_Choice ON Fashion_Design.fabric_id = Fabric_Choice.fabric_id;"
        ],
        "gold_ambiguity": {
            "match": "{\"designs\": [{\"Color_Palette\": [\"color_name\"]}, {\"Fabric_Choice\": [\"fabric_type\"]}, {\"Color_Palette\": [\"color_name\"], \"Fabric_Choice\": [\"fabric_type\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"designs\" refers to the schema \"Fabric_Choice\".\"fabric_type\"",
        "clear_ambiguity": "{\"designs\": {\"Fabric_Choice\": [\"fabric_type\"]}}",
        "gold_query": "SELECT design_name, color_name, fabric_type FROM Color_Palette JOIN Fashion_Design ON Fashion_Design.color_id = Color_Palette.color_id JOIN Fabric_Choice ON Fashion_Design.fabric_id = Fabric_Choice.fabric_id;"
    },
    {
        "index": 814,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_release_timeframe2/vague_2cols_release_timeframe2.sqlite",
        "question": "When was the earliest game released with a rating above 8.5?",
        "schema_without_content": "VideoGames : id, Release_Year, Release_Date, Name, Platform | Directors : id, FirstName, LastName, BirthDate | Actors : id, FullName, DateOfBirth | Movies : id, Title, YearReleased, DirectorId | MovieRoles : id, ActorId, MovieId, RoleType | GameReviews : id, ReviewText, Rating, GameId, ReviewerId",
        "schema_with_content": "VideoGames : id (5, 1, 4), Release_Year (2016, 2017, 2018), Release_Date ('2018-06-12', '2013-11-02', '2019-04-25'), Name ('Anthem', 'God of War', 'The Legend of Zelda: Breath of the Wild'), Platform ('Microsoft Windows', 'PlayStation 3', 'PlayStation 4') | Directors : id (4, 1, 5), FirstName ('Jane', 'Leonardo', 'Emma'), LastName ('Watson', 'Smith', 'Hanks'), BirthDate ('1956-07-09', '1990-04-15', '1985-03-22') | Actors : id (3, 4, 5), FullName ('Scarlett Johansson', 'Chris Hemsworth', 'Kate Winslet'), DateOfBirth ('1964-09-02', '1984-11-22', '1983-08-11') | Movies : id (4, 1, 3), Title ('Titanic', 'Interstellar', 'Fight Club'), YearReleased (2010, 1999, 1999), DirectorId (7, 2, 6) | MovieRoles : id (3, 2, 1), ActorId (1, 4, 3), MovieId (4, 5, 1), RoleType ('Leading Role', 'Supporting Role', 'Leading Role') | GameReviews : id (3, 2, 5), ReviewText ('An epic adventure worth playing.', 'Amazing graphics and immersive world.', 'A fantastic game that keeps you hooked.'), Rating (9, 10, 8), GameId (2, 3, 5), ReviewerId (3, 1, 4)",
        "ambiguous_queries": [
            "SELECT MIN(Release_Year) FROM VideoGames JOIN GameReviews ON GameReviews.GameId = VideoGames.id WHERE Rating > 8.5;",
            "SELECT MIN(Release_Date) FROM VideoGames JOIN GameReviews ON GameReviews.GameId = VideoGames.id WHERE Rating > 8.5;",
            "SELECT MIN(Release_Year, Release_Date) FROM VideoGames JOIN GameReviews ON GameReviews.GameId = VideoGames.id WHERE Rating > 8.5;"
        ],
        "gold_ambiguity": {
            "match": "{\"earliest\": [{\"VideoGames\": [\"Release_Year\"]}, {\"VideoGames\": [\"Release_Date\"]}, {\"VideoGames\": [\"Release_Year\", \"Release_Date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"earliest\" refers to the schema \"VideoGames\".\"Release_Year\"",
        "clear_ambiguity": "{\"earliest\": {\"VideoGames\": [\"Release_Year\"]}}",
        "gold_query": "SELECT MIN(Release_Year) FROM VideoGames JOIN GameReviews ON GameReviews.GameId = VideoGames.id WHERE Rating > 8.5;"
    },
    {
        "index": 815,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2tabs_production/vague_2tabs_production.sqlite",
        "question": "Display a list of movies and who produced them",
        "schema_without_content": "Studio : studio_id, name, location | Producer : producer_id, birthdate, full_name | Movies : movie_id, title, release_year, genre, studio_id, producer_id | Actor : actor_id, first_name, last_name, date_of_birth, gender | MovieActor : movie_actor_id, movie_id, actor_id, role | Director : director_id, first_name, last_name, birthdate | MovieDirector : movie_director_id, movie_id, director_id",
        "schema_with_content": "Studio : studio_id (2, 3, 1), name ('Universal Studios', 'Warner Bros', 'Disney Studios'), location ('Glendale, California', 'Universal City, California', 'Burbank, California') | Producer : producer_id (2, 1), birthdate ('1975-08-15', '1960-05-01'), full_name ('Jane Doe', 'John Smith') | Movies : movie_id (2, 1), title ('Minions', 'Inception'), release_year (2010, 2015), genre ('Action/Adventure', 'Animation'), studio_id (2, 1), producer_id (2, 1) | Actor : actor_id (1, 2), first_name ('Emma', 'Leonardo'), last_name ('DiCaprio', 'Watson'), date_of_birth ('1990-04-15', '1974-11-11'), gender ('M', 'F') | MovieActor : movie_actor_id (1, 2), movie_id (1, 1), actor_id (2, 1), role ('Cobb', 'Arthur') | Director : director_id (2, 1), first_name ('Pierre', 'Christopher'), last_name ('Perifel', 'Nolan'), birthdate ('1962-01-20', '1970-06-20') | MovieDirector : movie_director_id (1, 2), movie_id (2, 1), director_id (1, 2)",
        "ambiguous_queries": [
            "select Movies.title, Studio.name from Studio join Movies on Studio.studio_id=Movies.studio_id",
            "select Movies.title, Producer.Full_name from Producer join Movies on Producer.producer_id=Movies.studio_id",
            "select Movies.title, Studio.name, Producer.Full_name from Studio join Movies on Studio.studio_id=Movies.studio_id join Producer on Producer.producer_id=Movies.studio_id"
        ],
        "gold_ambiguity": {
            "match": "{\"who\": [{\"Producer\": [\"Full_name\"]}, {\"Studio\": [\"name\"]}, {\"Producer\": [\"Full_name\"], \"Studio\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"who\" refers to the schema \"Studio\".\"name\"",
        "clear_ambiguity": "{\"who\": {\"Studio\": [\"name\"]}}",
        "gold_query": "select Movies.title, Studio.name, Producer.Full_name from Studio join Movies on Studio.studio_id=Movies.studio_id join Producer on Producer.producer_id=Movies.studio_id"
    },
    {
        "index": 816,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2cols_funding/vague_2cols_funding.sqlite",
        "question": "For what project and how much funding did Contractor B get and from where?",
        "schema_without_content": "Projects : projectID, name, startDate, endDate, budget, contractorID | Contractors : contractorID, companyName, address, phoneNumber, employeeCount | Employees : employeeID, firstName, lastName, hireDate, salary, contractorID | Materials : materialID, description, quantity, unitCost, projectID | Payments : paymentID, amount, paymentDate, projectID, contractorID | Funding : id, governmentAgency, privateDonors, publicPark, fundsAmount, projectID",
        "schema_with_content": "Projects : projectID (), name (), startDate (), endDate (), budget (), contractorID () | Contractors : contractorID (5, 2, 1), companyName ('Contractor C', 'Contractor A', 'Contractor D'), address ('Address E', 'Address D', 'Address A'), phoneNumber ('345-678-9012', '567-890-1234', '456-789-0123'), employeeCount (20, 15, 10) | Employees : employeeID (3, 4, 2), firstName ('Emily', 'Jane', 'Tom'), lastName ('Smith', 'Doe', 'Johnson'), hireDate ('2022-01-03', '2022-01-04', '2022-01-01'), salary (65000.0, 55000.0, 50000.0), contractorID (1, 3, 2) | Materials : materialID (2, 5, 4), description ('Electrical Wiring', 'Concrete', 'Bricks'), quantity (20, 300, 50), unitCost (25.0, 15.0, 10.0), projectID (1, 2, 3) | Payments : paymentID (4, 2, 1), amount (30000, 10000, 20000), paymentDate ('2022-02-03', '2022-02-02', '2022-02-05'), projectID (2, 1, 1), contractorID (1, 1, 3) | Funding : id (5, 2, 3), governmentAgency ('Federal Grant Program', 'International Organization', 'State Department'), privateDonors ('', '', 'Private Foundations'), publicPark ('Yes', 'No', 'Yes'), fundsAmount (75000.0, 125000.0, 100000.0), projectID (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Funding.governmentAgency, Funding.fundsAmount FROM Funding JOIN Payments on Funding.projectID = Payments.projectID JOIN Contractors on Payments.contractorID = Contractors.contractorID WHERE Contractors.companyName = 'Contractor B'",
            "SELECT Funding.privateDonors, Funding.fundsAmount FROM Funding JOIN Payments on Funding.projectID = Payments.projectID JOIN Contractors on Payments.contractorID = Contractors.contractorID WHERE Contractors.companyName = 'Contractor B'",
            "SELECT Funding.governmentAgency,Funding.privateDonors, Funding.fundsAmount FROM Funding JOIN Payments on Funding.projectID = Payments.projectID JOIN Contractors on Payments.contractorID = Contractors.contractorID WHERE Contractors.companyName = 'Contractor B'"
        ],
        "gold_ambiguity": {
            "match": "{\"project\": [{\"Funding\": [\"governmentAgency\"]}, {\"Funding\": [\"privateDonors\"]}, {\"Funding\": [\"governmentAgency\", \"privateDonors\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"project\" refers to the schema \"Funding\".\"governmentAgency\" and \"Funding\".\"privateDonors\"",
        "clear_ambiguity": "{\"project\": {\"Funding\": [\"governmentAgency\", \"privateDonors\"]}}",
        "gold_query": "SELECT Funding.governmentAgency,Funding.privateDonors, Funding.fundsAmount FROM Funding JOIN Payments on Funding.projectID = Payments.projectID JOIN Contractors on Payments.contractorID = Contractors.contractorID WHERE Contractors.companyName = 'Contractor B'"
    },
    {
        "index": 817,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2tabs_curriculum_topics/vague_2tabs_curriculum_topics.sqlite",
        "question": "Which curriculum topics are associated with the highest grade?",
        "schema_without_content": "Students : id, name, age | Core_Concepts : concept_id, concept_name, description | Advanced_Topics : topic_id, topic_name, difficulty | School_Subjects : subject_id, subject_name, core_concept_id, advanced_topic_id | EnrolledStudents : enrollment_id, student_id, subject_id, grade",
        "schema_with_content": "Students : id (3, 1, 5), name ('Diana', 'Alice', 'Evan'), age (21, 23, 22) | Core_Concepts : concept_id (3, 1, 2), concept_name ('Calculus', 'Linear Algebra', 'Python Programming'), description ('A high-level programming language', 'The study of vector spaces and linear mappings between them', 'The study of change and motion') | Advanced_Topics : topic_id (1, 2, 3), topic_name ('Advanced Python', 'Multivariable Calculus', 'Tensor Analysis'), difficulty ('Advanced', 'Expert', 'Intermediate') | School_Subjects : subject_id (2, 3, 4), subject_name ('Introduction to Python', 'Linear Algebra Applications', 'Single Variable Calculus'), core_concept_id (2, 1, 3), advanced_topic_id (3, 2, 4) | EnrolledStudents : enrollment_id (1, 4, 5), student_id (2, 3, 4), subject_id (4, 3, 2), grade (98.5, 81.5, 79.3)",
        "ambiguous_queries": [
            "select c.concept_name from EnrolledStudents e inner join School_Subjects s on s.subject_id = e.subject_id inner join Core_Concepts c on s.core_concept_id = c.concept_id order by e.grade desc limit 1;",
            "select c.topic_name from EnrolledStudents e inner join School_Subjects s on s.subject_id = e.subject_id inner join Advanced_Topics c on s.Advanced_Topic_id = c.topic_id order by e.grade desc limit 1;",
            "select c.concept_name, at.topic_name from EnrolledStudents e inner join School_Subjects s on s.subject_id = e.subject_id inner join Core_Concepts c on s.core_concept_id = c.concept_id inner join Advanced_Topics at on s.Advanced_Topic_id = at.topic_id order by e.grade desc limit 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"topics\": [{\"Advanced_Topics\": [\"topic_name\"]}, {\"Core_Concepts\": [\"concept_name\"]}, {\"Advanced_Topics\": [\"topic_name\"], \"Core_Concepts\": [\"concept_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"topics\" refers to the schema \"Core_Concepts\".\"concept_name\"",
        "clear_ambiguity": "{\"topics\": {\"Core_Concepts\": [\"concept_name\"]}}",
        "gold_query": "select c.concept_name from EnrolledStudents e inner join School_Subjects s on s.subject_id = e.subject_id inner join Core_Concepts c on s.core_concept_id = c.concept_id order by e.grade desc limit 1;"
    },
    {
        "index": 818,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_grades/vague_2cols_grades.sqlite",
        "question": "Show me John Doe's course names and grades.",
        "schema_without_content": "Students : StudentID, fullname | Programs : ProgramID, Name | Enrollments : EnrollmentID, StudentID, ProgramID | Grades : GradeID, EnrollmentID, Gpa, Standardized_Test_Score, CourseName",
        "schema_with_content": "Students : StudentID (4, 5, 1), fullname ('Michael Johnson', 'John Doe', 'David Brown') | Programs : ProgramID (2, 4, 5), Name ('Biology', 'English Literature', 'Physical Education') | Enrollments : EnrollmentID (3, 4, 5), StudentID (1, 3, 2), ProgramID (6, 7, 9) | Grades : GradeID (5, 3, 4), EnrollmentID (5, 1, 3), Gpa (3.7, 3.5, 3.1), Standardized_Test_Score (1400, 1500, 1450), CourseName ('World History IV', 'Algebra I', 'Physical Education V')",
        "ambiguous_queries": [
            "SELECT Grades.CourseName, Grades.Gpa FROM Grades JOIN Enrollments ON Enrollments.EnrollmentID = Grades.EnrollmentID JOIN Students ON Students.StudentID = Enrollments. StudentID WHERE Students.fullname = 'John Doe';",
            "SELECT Grades.CourseName, Grades.Standardized_Test_Score FROM Grades JOIN Enrollments ON Enrollments.EnrollmentID = Grades.EnrollmentID JOIN Students ON Students.StudentID = Enrollments. StudentID WHERE Students.fullname = 'John Doe';",
            "SELECT Grades.CourseName, Grades.Gpa , Grades.Standardized_Test_Score FROM Grades JOIN Enrollments ON Enrollments.EnrollmentID = Grades.EnrollmentID JOIN Students ON Students.StudentID = Enrollments. StudentID WHERE Students.fullname = 'John Doe';"
        ],
        "gold_ambiguity": {
            "match": "{\"grades\": [{\"Grades\": [\"Gpa\"]}, {\"Grades\": [\"Standardized_Test_Score\"]}, {\"Grades\": [\"Gpa\", \"Standardized_Test_Score\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"grades\" refers to the schema \"Grades\".\"Gpa\" and \"Grades\".\"Standardized_Test_Score\"",
        "clear_ambiguity": "{\"grades\": {\"Grades\": [\"Gpa\", \"Standardized_Test_Score\"]}}",
        "gold_query": "SELECT Grades.CourseName, Grades.Gpa , Grades.Standardized_Test_Score FROM Grades JOIN Enrollments ON Enrollments.EnrollmentID = Grades.EnrollmentID JOIN Students ON Students.StudentID = Enrollments. StudentID WHERE Students.fullname = 'John Doe';"
    },
    {
        "index": 819,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_withdrawal_limit/vague_2cols_withdrawal_limit.sqlite",
        "question": "Show withdrawal limits by account",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, EmailAddress | Accounts : AccountNumber, AccountType, Balance, OpenDate, CustomerID | Limits : TransactionID, Daily_Limit, Transaction_Limit, Atms, AccountNumber | Transactions : TransactionID, Amount, DateAndTime, Description, AccountNumber | Overdrafts : OverdraftID, ApprovalStatus, LimitAmount, StartDate, EndDate, AccountNumber | Rewards : RewardID, Points, ExpiryDate, AccountNumber",
        "schema_with_content": "Customers : CustomerID (2, 1), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), EmailAddress ('jane.smith@example.com', 'john.doe@example.com') | Accounts : AccountNumber (2, 1), AccountType ('Savings', 'Checking'), Balance (5000.0, 1000.0), OpenDate ('2023-02-01', '2023-01-01'), CustomerID (2, 1) | Limits : TransactionID (1, 2), Daily_Limit (4000.0, 3000.0), Transaction_Limit (600.0, 800.0), Atms (3, 2), AccountNumber (1, 2) | Transactions : TransactionID (2, 1), Amount (200.0, -150.0), DateAndTime ('2023-03-02 14:15:00', '2023-03-01 10:30:00'), Description ('Groceries', 'ATM Withdrawal'), AccountNumber (1, 1) | Overdrafts : OverdraftID (1, 2), ApprovalStatus (0, 1), LimitAmount (500.0, 750.0), StartDate ('2023-04-01', '2023-05-01'), EndDate ('2023-05-01', '2023-06-01'), AccountNumber (1, 2) | Rewards : RewardID (2, 1), Points (200, 100), ExpiryDate ('2024-02-01', '2024-01-01'), AccountNumber (1, 2)",
        "ambiguous_queries": [
            "SELECT Accounts.AccountNumber , Limits.Daily_Limit FROM Limits JOIN Accounts ON Accounts.AccountNumber = Limits.AccountNumber",
            "SELECT Accounts.AccountNumber , Limits.Transaction_Limit FROM Limits JOIN Accounts ON Accounts.AccountNumber = Limits.AccountNumber",
            "SELECT Accounts.AccountNumber , Limits.Daily_Limit, Transaction_Limit FROM Limits JOIN Accounts ON Accounts.AccountNumber = Limits.AccountNumber"
        ],
        "gold_ambiguity": {
            "match": "{\"limits\": [{\"Limits\": [\"Daily_Limit\"]}, {\"Limits\": [\"Transaction_Limit\"]}, {\"Limits\": [\"Daily_Limit\", \"Transaction_Limit\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"limits\" refers to the schema \"Limits\".\"Transaction_Limit\"",
        "clear_ambiguity": "{\"limits\": {\"Limits\": [\"Transaction_Limit\"]}}",
        "gold_query": "SELECT Accounts.AccountNumber , Limits.Transaction_Limit FROM Limits JOIN Accounts ON Accounts.AccountNumber = Limits.AccountNumber"
    },
    {
        "index": 820,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_career_opportunities/vague_2cols_career_opportunities.sqlite",
        "question": "Show me the names of the students and their career options.",
        "schema_without_content": "Students : StudentID, BirthDate, fullname | Instructors : InstructorID, FirstName, LastName, Email | Courses : CourseID, Title, Description, JobRole, Industry, Major, EnrollmentLimit, CurrentEnrollment | Enrollments : EnrollmentID, StudentID, CourseID, Grade",
        "schema_with_content": "Students : StudentID (2, 1), BirthDate ('1986-02-05', '1993-07-15'), fullname ('Jane Smith', 'John Doe') | Instructors : InstructorID (2, 1), FirstName ('Tom', 'Emma'), LastName ('Brown', 'White'), Email ('tom.brown@email.com', 'emma.white@email.com') | Courses : CourseID (2, 1), Title ('Introduction to Programming', 'Data Structures & Algorithms'), Description ('Master data structures and algorithms with this course.', 'Learn how to code and build applications.'), JobRole ('Software Developer', 'Software Engineer'), Industry ('Technology', 'Technology'), Major ('Computer Science', 'Computer Science'), EnrollmentLimit (30, 30), CurrentEnrollment (0, 0) | Enrollments : EnrollmentID (2, 1), StudentID (1, 2), CourseID (1, 1), Grade ('B', 'A')",
        "ambiguous_queries": [
            "select s.fullname, c.JobRole from students as s join enrollments as e on s.studentid=e.studentid join courses as c on e.courseid=c.courseid",
            "select s.fullname, c.Industry from students as s join enrollments as e on s.studentid=e.studentid join courses as c on e.courseid=c.courseid",
            "select s.fullname, c.JobRole, Industry from students as s join enrollments as e on s.studentid=e.studentid join courses as c on e.courseid=c.courseid"
        ],
        "gold_ambiguity": {
            "match": "{\"career\": [{\"Courses\": [\"JobRole\", \"Industry\"]}, {\"Courses\": [\"JobRole\"]}, {\"Courses\": [\"Industry\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"career\" refers to the schema \"courses\".\"Industry\"",
        "clear_ambiguity": "{\"career\": {\"Courses\": [\"Industry\"]}}",
        "gold_query": "select s.fullname, c.JobRole, Industry from students as s join enrollments as e on s.studentid=e.studentid join courses as c on e.courseid=c.courseid"
    },
    {
        "index": 821,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_occupational_distribution/vague_2cols_occupational_distribution.sqlite",
        "question": "What is the percentage distribution of annual revenue per occupational category?",
        "schema_without_content": "Industries : IndustryID, Primary_Industry, Most_Common_Job, Region, NumberOfEmployees, AnnualRevenue | People : PersonID, FirstName, LastName, DateOfBirth, Gender, Race, Ethnicity, MaritalStatus, EducationLevel, Occupation | Regions : RegionID, Name, Population, AreaInSqKm, CapitalCity, Climate, MajorCities | Jobs : JobID, Title, Description, SkillsRequired, AverageSalary, GrowthProspects, RequiredEducation | EmploymentStats : Year, TotalNumberOfJobs, UnemployedCount, UnemploymentRate, MinimumWage, MaximumWage | HousingData : HouseID, Address, Type, Price, SizeInSquareFeet, Bedrooms, Bathrooms, Age, Neighborhood",
        "schema_with_content": "Industries : IndustryID (2, 1), Primary_Industry ('Construction', 'Technology'), Most_Common_Job ('Laborer', 'Software Developer'), Region ('Northeast', 'Southwest'), NumberOfEmployees (2000, 3000), AnnualRevenue (500000.0, 600000.0) | People : PersonID (2, 1), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), DateOfBirth ('1990-02-20', '1985-07-15'), Gender ('F', 'M'), Race ('Black', 'White'), Ethnicity ('Non-Hispanic', 'Hispanic'), MaritalStatus ('Single', 'Married'), EducationLevel (\"Master's Degree\", \"Bachelor's Degree\"), Occupation ('Teacher', 'Engineer') | Regions : RegionID (2, 1), Name ('Great Lakes', 'New England'), Population (16000000, 52000000), AreaInSqKm (250000.0, 89000.0), CapitalCity ('Chicago', 'Boston'), Climate ('Continental climate', 'Humid continental climate'), MajorCities ('Boston, Providence, Hartford', 'Chicago, Detroit, Cleveland') | Jobs : JobID (2, 1), Title ('Registered Nurse', 'Software Engineer'), Description ('Provide and coordinate patient care, educate patients and the public about various aspects of health', 'Design, develop, and maintain software applications.'), SkillsRequired ('Communication skills, critical thinking, empathy', 'Programming languages, problem solving skills, teamwork'), AverageSalary (70000.0, 80000.0), GrowthProspects ('Good', 'High'), RequiredEducation (\"Bachelor's degree in Computer Science\", 'Associate degree in Nursing') | EmploymentStats : Year (2020), TotalNumberOfJobs (150000000), UnemployedCount (10000000), UnemploymentRate (6.67), MinimumWage (7.25), MaximumWage (75000.0) | HousingData : HouseID (1, 2), Address ('123 Main St', '456 Elm St'), Type ('Single Family Home', 'Condo'), Price (250000.0, 500000.0), SizeInSquareFeet (2500, 1000), Bedrooms (4, 2), Bathrooms (2, 1), Age (5, 10), Neighborhood ('Uptown', 'Suburbia')",
        "ambiguous_queries": [
            "SELECT Primary_Industry, SUM(AnnualRevenue) AS RevenuePerOccupationalDistribution, (SUM(AnnualRevenue) * 100.0) / SUM(SUM(AnnualRevenue)) OVER () AS PercentageOfTotalAnnualRevenue FROM Industries GROUP BY Primary_Industry;",
            "SELECT Most_Common_Job, SUM(AnnualRevenue) AS RevenuePerOccupationalDistribution, (SUM(AnnualRevenue) * 100.0) / SUM(SUM(AnnualRevenue)) OVER () AS PercentageOfTotalAnnualRevenue FROM Industries GROUP BY Most_Common_Job;",
            "SELECT Primary_Industry, Most_Common_Job, SUM(AnnualRevenue) AS RevenuePerOccupationalDistribution, (SUM(AnnualRevenue) * 100.0) / SUM(SUM(AnnualRevenue)) OVER () AS PercentageOfTotalAnnualRevenue FROM Industries GROUP BY Primary_Industry, Most_Common_Job;"
        ],
        "gold_ambiguity": {
            "match": "{\"occupational category\": [{\"Industries\": [\"Primary_Industry\"]}, {\"Industries\": [\"Most_Common_Job\"]}, {\"Industries\": [\"Primary_Industry\", \"Most_Common_Job\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"occupational category\" refers to the schema \"Industries\".\"Primary_Industry\" and \"Industries\".\"Most_Common_Job\"",
        "clear_ambiguity": "{\"occupational category\": {\"Industries\": [\"Primary_Industry\", \"Most_Common_Job\"]}}",
        "gold_query": "SELECT Primary_Industry, Most_Common_Job, SUM(AnnualRevenue) AS RevenuePerOccupationalDistribution, (SUM(AnnualRevenue) * 100.0) / SUM(SUM(AnnualRevenue)) OVER () AS PercentageOfTotalAnnualRevenue FROM Industries GROUP BY Primary_Industry, Most_Common_Job;"
    },
    {
        "index": 822,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
        "question": "Who issued CD Special?",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, Email, PhoneNumber | Accounts : AccountID, CustomerID, AccountType, Balance | Loans : LoanID, CustomerID, Amount, InterestRate, TermYears | Deposits : DepositID, AccountID, Amount, Date | Transactions : TransactionID, AccountID, Type, Amount, Date | Bank : BankName, HeadquarterLocation, FoundedYear, TotalAssets, NumberOfBranches, WebsiteURL | Branch : BranchID, BankName, BranchName, Address, City, State, ZipCode | BankingProducts : ProductID, BankName, ProductName, Description, AnnualInterestRate, MinimumDepositAmount, MaximumDepositAmount, BranchName",
        "schema_with_content": "Customers : CustomerID (1, 2), FirstName ('John', 'Jane'), LastName ('Doe', 'Smith'), Email ('john.doe@example.com', 'jane.smith@example.com'), PhoneNumber ('+1234567890', '+0987654321') | Accounts : AccountID (2, 1), CustomerID (1, 2), AccountType ('Checking', 'Savings'), Balance (1000.0, 500.0) | Loans : LoanID (2, 1), CustomerID (2, 1), Amount (15000.0, 10000.0), InterestRate (6.0, 5.5), TermYears (3, 5) | Deposits : DepositID (1, 2), AccountID (2, 1), Amount (1000.0, 500.0), Date ('2024-02-19 14:31:33', '2024-02-19 14:31:33') | Transactions : TransactionID (2, 1), AccountID (1, 2), Type ('Withdrawal', 'Deposit'), Amount (500.0, 200.0), Date ('2024-02-19 14:31:33', '2024-02-19 14:31:33') | Bank : BankName ('Example Bank'), HeadquarterLocation ('New York'), FoundedYear (2000), TotalAssets (1000000.0), NumberOfBranches (50), WebsiteURL ('https://www.examplebank.com/') | Branch : BranchID (1, 2), BankName ('Example Bank', 'Example Bank'), BranchName ('East Side Branch', 'Main Branch'), Address ('456 East Ave', '123 Main St'), City ('New York', 'New York'), State ('NY', 'NY'), ZipCode ('10001', '10010') | BankingProducts : ProductID (1, 2), BankName ('Example Bank', 'Example Bank'), ProductName ('CD Special', 'High-Yield Savings'), Description ('A high interest rate savings account with no monthly fees.', 'Certificate of deposit offering a fixed annual percentage yield.'), AnnualInterestRate (1.0, 2.5), MinimumDepositAmount (1000.0, 1000.0), MaximumDepositAmount (1000000.0), BranchName ('2', '1')",
        "ambiguous_queries": [
            "SELECT Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID WHERE ProductName = 'CD Special'",
            "SELECT Bank.BankName FROM Bank JOIN BankingProducts ON BankingProducts.BankName = Bank.BankName WHERE ProductName = 'CD Special'",
            "SELECT Bank.BankName, Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID JOIN Bank ON BankingProducts.BankName = Bank.BankName WHERE ProductName = 'CD Special'"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Bank\": [\"BankName\"]}, {\"Branch\": [\"BranchName\"]}, {\"Bank\": [\"BankName\"], \"Branch\": [\"BranchName\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Bank\".\"BankName\"",
        "clear_ambiguity": "{\"Who\": {\"Bank\": [\"BankName\"]}}",
        "gold_query": "SELECT Bank.BankName FROM Bank JOIN BankingProducts ON BankingProducts.BankName = Bank.BankName WHERE ProductName = 'CD Special'"
    },
    {
        "index": 823,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
        "question": "Who has the highest number of tv seasons ordered by most to least",
        "schema_without_content": "TV_Shows : id, Title, Released_Seasons, Planned_Seasons, Series, GenreID, PlatformID, RatingID | Genre : id, Name | Platforms : id, Name | Ratings : id, RateValue | Users : id, Username, Email, Password | User_Reviews : id, UserID, ShowID, ReviewText, RatingID",
        "schema_with_content": "TV_Shows : id (5, 2, 4), Title ('Breaking Bad', 'Game of Thrones', 'Stranger Things'), Released_Seasons (6, 3, 3), Planned_Seasons (4, 4, 2), Series ('Drama', 'Adventure Fantasy', 'Fantasy Drama'), GenreID (2, 4, 1), PlatformID (4, 3, 4), RatingID (5, 4, 2) | Genre : id (1, 2, 4), Name ('Action', 'Comedy', 'Documentary') | Platforms : id (1, 2, 4), Name ('Disney+', 'Hulu', 'Amazon Prime Video') | Ratings : id (4, 5, 2), RateValue (8.6, 8.9, 9.0) | Users : id (5, 2, 3), Username ('user3', 'user1', 'user2'), Email ('user5@example.com', 'user3@example.com', 'user2@example.com'), Password ('password2', 'password5', 'password1') | User_Reviews : id (3, 4, 1), UserID (5, 4, 2), ShowID (5, 4, 2), ReviewText ('Great show!', 'Not a fan of this one.', 'Best series ever.'), RatingID (3, 2, 4)",
        "ambiguous_queries": [
            "Select * From TV_Shows Order by Released_Seasons DESC",
            "Select * From TV_Shows Order by Planned_Seasons DESC",
            "Select * From TV_Shows Order by Released_Seasons, Planned_Seasons DESC"
        ],
        "gold_ambiguity": {
            "match": "{\"tv seasons\": [{\"TV_Shows\": [\"Released_Seasons\"]}, {\"TV_Shows\": [\"Planned_Seasons\"]}, {\"TV_Shows\": [\"Released_Seasons\", \"Planned_Seasons\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"tv seasons\" refers to the schema \"TV_Shows\".\"Released_Seasons\" and \"TV_Shows\".\"Planned_Seasons\"",
        "clear_ambiguity": "{\"tv seasons\": {\"TV_Shows\": [\"Released_Seasons\", \"Planned_Seasons\"]}}",
        "gold_query": "Select * From TV_Shows Order by Released_Seasons, Planned_Seasons DESC"
    },
    {
        "index": 824,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
        "question": "Show all designers",
        "schema_without_content": "Architect : id, name, email | Firm : id, name, address | Building : id, building_name, firm_id, architect_id | Project : id, project_name, building_id, start_date, end_date | Material : id, material_type, cost | Employee : id, employee_name, position, firm_id",
        "schema_with_content": "Architect : id (1, 5, 3), name ('David Brown', 'John Smith', 'Mike Johnson'), email ('janedoe@example.com', 'davidbrown@example.com', 'mikejohnson@example.com') | Firm : id (3, 2, 1), name ('XYZ Builders', 'ABC Construction', 'PQR Contractors'), address ('123 Main St, Anytown, USA', '456 Elm St, Anycity, USA', '789 Oak St, Anothertown, USA') | Building : id (2, 4, 5), building_name ('Residential Complex', 'Highrise Tower', 'Hospital'), firm_id (2, 2, 1), architect_id (4, 2, 3) | Project : id (1, 4, 2), project_name ('Office Interior', 'Complex Framework', 'Tower Foundation'), building_id (3, 2, 1), start_date ('2022-02-01', '2022-01-01', '2022-04-01'), end_date ('2022-06-30', '2022-04-30', '2022-07-31') | Material : id (3, 4, 2), material_type ('Steel', 'Wood', 'Concrete'), cost (150.0, 100.0, 50.0) | Employee : id (5, 3, 4), employee_name ('Chris Jones', 'Susan Thompson', 'Tom Williams'), position ('Project Manager', 'Electrician', 'Architect'), firm_id (2, 3, 2)",
        "ambiguous_queries": [
            "SELECT name FROM Architect;",
            "SELECT name FROM Firm;",
            "SELECT Firm.name, Architect.name FROM Architect JOIN Building ON Building.architect_id = Architect.id JOIN Firm ON Building.firm_id = Firm.id;"
        ],
        "gold_ambiguity": {
            "match": "{\"designers\": [{\"Architect\": [\"name\"]}, {\"Firm\": [\"name\"]}, {\"Architect\": [\"name\"], \"Firm\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"designers\" refers to the schema \"Firm\".\"name\"",
        "clear_ambiguity": "{\"designers\": {\"Firm\": [\"name\"]}}",
        "gold_query": "SELECT Firm.name, Architect.name FROM Architect JOIN Building ON Building.architect_id = Architect.id JOIN Firm ON Building.firm_id = Firm.id;"
    },
    {
        "index": 825,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2tabs_location/vague_2tabs_location.sqlite",
        "question": "Show the top 3 locations by the total number of bank accounts.",
        "schema_without_content": "City : id, name, country_id | Country : id, name | Banks : id, bank_name, city_id, country_id | Accounts : account_number, balance, owner_id | Transactions : transaction_id, date, amount, debit_account_id, credit_account_id | Customers : customer_id, first_name, last_name, birth_date, address, phone, email",
        "schema_with_content": "City : id (3, 4, 5), name ('Mumbai', 'London', 'New York'), country_id (4, 3, 5) | Country : id (5, 1, 3), name ('UK', 'USA', 'India') | Banks : id (5, 1, 4), bank_name ('Bank D', 'Bank C', 'Bank A'), city_id (2, 4, 1), country_id (2, 4, 1) | Accounts : account_number (1, 5, 3), balance (800.0, 1200.0, 1000.0), owner_id (2, 1, 3) | Transactions : transaction_id (3, 1, 2), date ('2024-02-19 14:18:41', '2024-02-19 14:18:41', '2024-02-19 14:18:41'), amount (400.0, 200.0, 100.0), debit_account_id (3, 2, 1), credit_account_id (3, 4, 1) | Customers : customer_id (4, 2, 3), first_name ('Alice', 'Carol', 'Jane'), last_name ('Brown', 'Smith', 'Johnson'), birth_date ('1992-09-01', '1990-12-01', '1980-01-01'), address ('123 Main St', '135 Pine St', '246 Maple St'), phone ('555-9012', '555-1314', '555-1415'), email ('jane.smith@example.com', 'bob.johnson@example.com', 'john.doe@example.com')",
        "ambiguous_queries": [
            "SELECT l.name, COUNT(a.account_number) AS total_accounts FROM City l JOIN Banks b ON l.id = b.city_id JOIN Accounts a ON b.id = a.owner_id GROUP BY l.name ORDER BY total_accounts DESC LIMIT 3",
            "SELECT l.name, COUNT(a.account_number) AS total_accounts FROM Country l JOIN Banks b ON l.id = b.country_id JOIN Accounts a ON b.id = a.owner_id GROUP BY l.name ORDER BY total_accounts DESC LIMIT 3",
            "SELECT c.name, l.name, COUNT(a.account_number) AS total_accounts FROM City l JOIN Banks b ON l.id = b.city_id JOIN Accounts a ON b.id = a.owner_id JOIN Country c ON c.id = b.country_id GROUP BY l.name ORDER BY total_accounts DESC LIMIT 3"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"City\": [\"name\"]}, {\"Country\": [\"name\"]}, {\"City\": [\"name\"], \"Country\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"Country\".\"name\"",
        "clear_ambiguity": "{\"locations\": {\"Country\": [\"name\"]}}",
        "gold_query": "SELECT c.name, l.name, COUNT(a.account_number) AS total_accounts FROM City l JOIN Banks b ON l.id = b.city_id JOIN Accounts a ON b.id = a.owner_id JOIN Country c ON c.id = b.country_id GROUP BY l.name ORDER BY total_accounts DESC LIMIT 3"
    },
    {
        "index": 826,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2tabs_age/vague_2tabs_age.sqlite",
        "question": "Show me the ages of different generations in different countries in order from most populated to least populated",
        "schema_without_content": "Country : id, name | Region : id, region_name, country_id | Population_Group : id, group_name, population, median_age, age_range_id | Age_Range : id, start_age, end_age, country | Median_Age : id, age, country",
        "schema_with_content": "Country : id (2, 5, 4), name ('UK', 'Australia', 'Canada') | Region : id (13, 12, 11), region_name ('Northeast', 'Southwest', 'Tasmania'), country_id (3, 2, 3) | Population_Group : id (4, 5, 3), group_name ('Teenagers', 'Children', 'Adults'), population (1000000.0, 2000000.0, 500000.0), median_age (5, 3, 1), age_range_id (3, 2, 1) | Age_Range : id (5, 1, 3), start_age (23.0, 22.0, 25.0), end_age (37.0, 24.0, 34.0), country (4, 1, 3) | Median_Age : id (5, 2, 1), age (30.7, 32.6, 28.9), country (4, 1, 5)",
        "ambiguous_queries": [
            "SELECT group_name, age, name FROM Population_Group JOIN Median_Age ON Population_Group.median_age = Median_Age.id JOIN Country ON Country.id = Median_Age.country GROUP BY group_name ORDER BY population DESC;",
            "SELECT group_name, start_age, end_age, name FROM Population_Group JOIN Age_Range ON Population_Group.Age_Range_id = Age_Range.id JOIN Country ON Country.id = Age_Range.country GROUP BY group_name ORDER BY population DESC;",
            "SELECT group_name, age, start_age, end_age, name FROM Population_Group JOIN Median_Age ON Population_Group.median_age = Median_Age.id JOIN Age_Range ON Population_Group.Age_Range_id = Age_Range.id JOIN Country ON Country.id = Age_Range.country GROUP BY group_name ORDER BY population DESC;"
        ],
        "gold_ambiguity": {
            "match": "{\"ages\": [{\"Population_Group\": [\"age\"]}, {\"Population_Group\": [\"start_age\", \"end_age\"]}, {\"Population_Group\": [\"age\", \"start_age\", \"end_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ages\" refers to the schema \"Population_Group\".\"age\"",
        "clear_ambiguity": "{\"ages\": {\"Population_Group\": [\"age\"]}}",
        "gold_query": "SELECT group_name, age, name FROM Population_Group JOIN Median_Age ON Population_Group.median_age = Median_Age.id JOIN Country ON Country.id = Median_Age.country GROUP BY group_name ORDER BY population DESC;"
    },
    {
        "index": 827,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
        "question": "Show me accounts with balances above 700 and their stock allocation.",
        "schema_without_content": "Customers : CustomerID, Email, fullname | Accounts : AccountNumber, Balance, InterestRate, OpenDate, CustomerID | Stocks : StockSymbol, CompanyName, CurrentPrice | Investments : InvestmentID, AccountNumber, StockSymbol, Quantity, PurchaseDate | PortfolioPerformance : PerformanceID, InvestmentID, Stock_Percentage, Stock_Value, Investment_Portfolios | Transactions : TransactionID, AccountNumber, Amount, Type, Date",
        "schema_with_content": "Customers : CustomerID (2, 3, 5), Email ('michael.brown@example.com', 'david.jackson@example.com', 'jane.smith@example.com'), fullname ('Emma Wilson', 'David Jackson', 'Michael Brown') | Accounts : AccountNumber (3, 1, 5), Balance (1000.0, 600.0, 700.0), InterestRate (2.0, 1.0, 1.5), OpenDate ('2023-01-01', '2023-01-04', '2023-01-03'), CustomerID (1, 3, 2) | Stocks : StockSymbol ('MSFT', 'GOOG', 'TSLA'), CompanyName ('Tesla Inc.', 'Microsoft Corporation', 'Alphabet Inc.'), CurrentPrice (300.0, 2800.0, 150.0) | Investments : InvestmentID (2, 1, 3), AccountNumber (1, 2, 3), StockSymbol ('GOOG', 'AAPL', 'AMZN'), Quantity (10, 15, 20), PurchaseDate ('2023-01-01', '2023-01-02', '2023-01-02') | PortfolioPerformance : PerformanceID (2, 3, 4), InvestmentID (1, 2, 5), Stock_Percentage (0.6, 0.4, 0.3), Stock_Value (12000.0, 15000.0, 10000.0), Investment_Portfolios (2000.0, 4500.0, 8000.0) | Transactions : TransactionID (1, 5, 2), AccountNumber (1, 1, 2), Amount (-50.0, 200.0, 300.0), Type ('Withdrawal', 'Deposit', 'Deposit'), Date ('2023-01-05', '2023-01-04', '2023-01-03')",
        "ambiguous_queries": [
            "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Percentage FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700",
            "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700",
            "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Percentage, Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700"
        ],
        "gold_ambiguity": {
            "match": "{\"stock allocation\": [{\"PortfolioPerformance\": [\"Stock_Percentage\"]}, {\"PortfolioPerformance\": [\"Stock_Value\"]}, {\"PortfolioPerformance\": [\"Stock_Percentage\", \"Stock_Value\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"stock allocation\" refers to the schema \"PortfolioPerformance\".\"Stock_Percentage\"",
        "clear_ambiguity": "{\"stock allocation\": {\"PortfolioPerformance\": [\"Stock_Percentage\"]}}",
        "gold_query": "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Percentage FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700"
    },
    {
        "index": 828,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2tabs_topic/vague_2tabs_topic.sqlite",
        "question": "Show me the students along with their internship topics.",
        "schema_without_content": "Industry_Sector : id, name, description | Project_Name : id, project_name, start_date, end_date | Internship : id, student_id, industry_sector_id, project_id",
        "schema_with_content": "Industry_Sector : id (2, 5, 1), name ('Technology', 'Education', 'Finance'), description ('Includes companies involved in software development, hardware manufacturing and IT services.', 'Institutions focused on teaching, training and learning activities.', 'Businesses that sell goods and services directly to consumers.') | Project_Name : id (4, 1, 5), project_name ('Project Alpha', 'Project Epsilon', 'Project Gamma'), start_date ('2022-02-01', '2021-10-01', '2022-04-01'), end_date ('2022-03-31', '2022-01-31', '2021-11-30') | Internship : id (4, 3, 1), student_id (4, 5, 1), industry_sector_id (4, 5, 2), project_id (2, 1, 3)",
        "ambiguous_queries": [
            "SELECT Internship.student_id, Industry_Sector.name FROM Industry_Sector JOIN Internship ON Internship.industry_sector_id = Industry_Sector.id",
            "SELECT Internship.student_id, Project_Name.project_name FROM Project_Name JOIN Internship ON Internship.project_id = Project_Name.id",
            "SELECT Internship.student_id, Industry_Sector.name, Project_Name.project_name FROM Industry_Sector JOIN Internship ON Internship.industry_sector_id = Industry_Sector.id JOIN Project_Name ON Internship.project_id = Project_Name.id"
        ],
        "gold_ambiguity": {
            "match": "{\"internship topics\": [{\"Industry_Sector\": [\"name\"]}, {\"Project_Name\": [\"project_name\"]}, {\"Industry_Sector\": [\"name\"], \"Project_Name\": [\"project_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"internship topics\" refers to the schema \"Project_Name\".\"project_name\"",
        "clear_ambiguity": "{\"internship topics\": {\"Project_Name\": [\"project_name\"]}}",
        "gold_query": "SELECT Internship.student_id, Project_Name.project_name FROM Project_Name JOIN Internship ON Internship.project_id = Project_Name.id"
    },
    {
        "index": 829,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_leadership/vague_2cols_leadership.sqlite",
        "question": "Who runs the bank that receives the greatest monthly payments each month?",
        "schema_without_content": "Banks : id, name, location, Ceo, Management_Team | Customers : customerId, dob, phoneNumber, emailAddress, bankID, fullname | Accounts : accountNumber, balance, interestRate, customerId | Transactions : transactionId, amount, date, description, sourceAccountNumber, destinationAccountNumber | Loans : loanId, principalAmount, interestRate, termMonths, monthlyPayment, customerId",
        "schema_with_content": "Banks : id (1, 5, 4), name ('Bank D', 'Bank B', 'Bank C'), location ('New York', 'Miami', 'Chicago'), Ceo ('Steve Martin', 'Emma Jones', 'John Doe'), Management_Team ('Jane Smith, Mike Johnson', 'Paul King, Susan White', 'David Brown, Sarah Lee') | Customers : customerId (2, 3, 1), dob ('1988-06-27', '1992-10-12', '1980-07-23'), phoneNumber ('555-9012', '555-1357', '555-5678'), emailAddress ('carol@example.com', 'daniel@example.com', 'alice@example.com'), bankID (1, 2, 4), fullname ('Alice Smith', 'Bob Johnson', 'Daniel Davis') | Accounts : accountNumber (1, 5, 2), balance (8000.0, 3000.0, 2000.0), interestRate (0.01, 0.02, 0.05), customerId (5, 4, 1) | Transactions : transactionId (5, 3, 1), amount (200.0, 50.0, -200.0), date (), description ('Bill payment', 'Salary credit', 'ATM withdrawal'), sourceAccountNumber (7, 5, 6), destinationAccountNumber (6, 4, 5) | Loans : loanId (2, 1, 3), principalAmount (40000.0, 30000.0, 25000.0), interestRate (0.05, 0.05, 0.04), termMonths (36, 36, 60), monthlyPayment (500.0, 800.0, 550.0), customerId (3, 2, 5)",
        "ambiguous_queries": [
            "SELECT b.Ceo AS Bank_Leader FROM Banks b JOIN Customers c ON b.id = c.bankID JOIN Loans l ON c.customerId = l.customerId GROUP BY b.Ceo ORDER BY monthlyPayment DESC LIMIT 1;",
            "SELECT b.Management_Team AS Bank_Leader FROM Banks b JOIN Customers c ON b.id = c.bankID JOIN Loans l ON c.customerId = l.customerId GROUP BY b.Management_Team ORDER BY monthlyPayment DESC LIMIT 1;",
            "SELECT b.Ceo, Management_Team AS Bank_Leader FROM Banks b JOIN Customers c ON b.id = c.bankID JOIN Loans l ON c.customerId = l.customerId GROUP BY b.Ceo, Management_Team ORDER BY monthlyPayment DESC LIMIT 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Banks\": [\"Ceo\"]}, {\"Banks\": [\"Management_Team\"]}, {\"Banks\": [\"Ceo\", \"Management_Team\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Banks\".\"Ceo\"",
        "clear_ambiguity": "{\"Who\": {\"Banks\": [\"Ceo\"]}}",
        "gold_query": "SELECT b.Ceo AS Bank_Leader FROM Banks b JOIN Customers c ON b.id = c.bankID JOIN Loans l ON c.customerId = l.customerId GROUP BY b.Ceo ORDER BY monthlyPayment DESC LIMIT 1;"
    },
    {
        "index": 830,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_departure/vague_2cols_departure.sqlite",
        "question": "Where can I find my flight from DFW to PHX?",
        "schema_without_content": "airlines : airline_id, name, code | flights : flight_id, departure_time, arrival_time, distance, origin_airport_code, destination_airport_code, airline_id | terminals : terminal_number, capacity, location | boarding_areas : boarding_area_id, terminal_number, gate | flights_boarding_areas : flight_id, boarding_area_id",
        "schema_with_content": "airlines : airline_id (4, 2, 3), name ('American', 'United', 'Alaska'), code ('UA', 'AS', 'DL') | flights : flight_id (1, 4, 5), departure_time ('2022-10-01 08:00:00', '2022-10-01 12:00:00', '2022-10-01 19:00:00'), arrival_time ('2022-10-01 18:00:00', '2022-10-01 21:00:00', '2022-10-02 02:00:00'), distance (4500.0, 3000.0, 2200.0), origin_airport_code ('ORD', 'JFK', 'MIA'), destination_airport_code ('LAX', 'HNL', 'PHX'), airline_id (3, 2, 1) | terminals : terminal_number (3, 5, 2), capacity (30, 70, 50), location ('Terminal A', 'Terminal B', 'Terminal E') | boarding_areas : boarding_area_id (3, 5, 4), terminal_number (2, 1, 2), gate (16, 10, 18) | flights_boarding_areas : flight_id (1, 5, 3), boarding_area_id (3, 1, 4)",
        "ambiguous_queries": [
            "SELECT terminals.terminal_number FROM boarding_areas JOIN flights_boarding_areas ON flights_boarding_areas.boarding_area_id = boarding_areas.boarding_area_id JOIN flights ON flights.flight_id = flights_boarding_areas.flight_id JOIN terminals ON boarding_areas.terminal_number = terminals.terminal_number WHERE flights.origin_airport_code = 'DFW' AND flights.destination_airport_code = 'PHX'",
            "SELECT boarding_areas.gate FROM boarding_areas JOIN flights_boarding_areas ON flights_boarding_areas.boarding_area_id = boarding_areas.boarding_area_id JOIN flights ON flights.flight_id = flights_boarding_areas.flight_id WHERE flights.origin_airport_code = 'DFW' AND flights.destination_airport_code = 'PHX'",
            "SELECT terminals.terminal_number, boarding_areas.gate FROM boarding_areas JOIN flights_boarding_areas ON flights_boarding_areas.boarding_area_id = boarding_areas.boarding_area_id JOIN flights ON flights.flight_id = flights_boarding_areas.flight_id JOIN terminals ON boarding_areas.terminal_number = terminals.terminal_number WHERE flights.origin_airport_code = 'DFW' AND flights.destination_airport_code = 'PHX'"
        ],
        "gold_ambiguity": {
            "match": "{\"Where\": [{\"boarding_areas\": [\"gate\"], \"terminals\": [\"terminal_number\"]}, {\"boarding_areas\": [\"gate\"]}, {\"terminals\": [\"terminal_number\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Where\" refers to the schema \"terminals\".\"terminal_number\"",
        "clear_ambiguity": "{\"Where\": {\"terminals\": [\"terminal_number\"]}}",
        "gold_query": "SELECT terminals.terminal_number, boarding_areas.gate FROM boarding_areas JOIN flights_boarding_areas ON flights_boarding_areas.boarding_area_id = boarding_areas.boarding_area_id JOIN flights ON flights.flight_id = flights_boarding_areas.flight_id JOIN terminals ON boarding_areas.terminal_number = terminals.terminal_number WHERE flights.origin_airport_code = 'DFW' AND flights.destination_airport_code = 'PHX'"
    },
    {
        "index": 831,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_creator/vague_2tabs_creator.sqlite",
        "question": "show me the creator name and title of all documentaries released in 2020",
        "schema_without_content": "Producer : id, name, email | Director : id, name, birth_date | Category : id, category_name | Documentary : id, title, release_year, producer_id, director_id, category_id | Journalist : id, journalist_name, email, documentary_id, role",
        "schema_with_content": "Producer : id (3, 1, 2), name ('Jane Smith', 'Tom Johnson', 'John Doe'), email ('tomjohnson@example.com', 'johndoe@example.com', 'janesmith@example.com') | Director : id (1, 2, 3), name ('Bob White', 'Alice Brown', 'Carol Black'), birth_date ('1990-02-22', '1975-10-08', '1980-06-23') | Category : id (1, 4, 3), category_name ('Politics', 'Culture', 'Current Affairs') | Documentary : id (5, 2, 3), title ('Climate Change Crisis', 'Revolutionizing Technology', 'The Art of War'), release_year (2018, 2020, 2017), producer_id (1, 2, 3), director_id (3, 3, 1), category_id (3, 4, 5) | Journalist : id (2, 4, 5), journalist_name ('Rachel Thompson', 'Michael Lee', 'Kevin Wright'), email ('rthompson@example.com', 'dwilliams@example.com', 'edavis@example.com'), documentary_id (4, 3, 1), role ('Researcher', 'Interviewer', 'Production Assistant')",
        "ambiguous_queries": [
            "SELECT Producer.name, Documentary.title FROM Documentary JOIN Producer ON Documentary.producer_id = Producer.id WHERE Documentary.release_year = 2020",
            "SELECT Director.name, Documentary.title FROM Documentary JOIN Director ON Documentary.Director_id = Director.id WHERE Documentary.release_year = 2020",
            "SELECT Producer.name, Director.name, Documentary.title FROM Documentary JOIN Producer ON Documentary.producer_id = Producer.id JOIN Director ON Documentary.Director_id = Director.id WHERE Documentary.release_year = 2020"
        ],
        "gold_ambiguity": {
            "match": "{\"creator name\": [{\"Director\": [\"name\"]}, {\"Producer\": [\"name\"]}, {\"Director\": [\"name\"], \"Producer\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"creator name\" refers to the schema \"Producer\".\"name\"",
        "clear_ambiguity": "{\"creator name\": {\"Producer\": [\"name\"]}}",
        "gold_query": "SELECT Producer.name, Director.name, Documentary.title FROM Documentary JOIN Producer ON Documentary.producer_id = Producer.id JOIN Director ON Documentary.Director_id = Director.id WHERE Documentary.release_year = 2020"
    },
    {
        "index": 832,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
        "question": "Show me extra charges as % of the total amount",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, EmailAddress, PhoneNumber | Accounts : AccountID, CustomerID, AccountType, Balance, OpenDate | Transactions : TransactionID, FromAccountID, ToAccountID, Amount, Date, Fee_Amount, Commission_Percentage, Transactions | Loans : LoanID, CustomerID, LoanAmount, InterestRate, TermYears, ApprovalDate | Overdrafts : OverdraftID, AccountID, LimitAmount, InterestRate, Fees | Rewards : RewardID, AccountID, Points, RedemptionValue",
        "schema_with_content": "Customers : CustomerID (2, 1), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), EmailAddress ('john.doe@example.com', 'jane.smith@example.com'), PhoneNumber ('+1-503-789-5678', '+1-503-789-1234') | Accounts : AccountID (1, 2), CustomerID (1, 2), AccountType ('Checking', 'Savings'), Balance (500.0, 1000.0), OpenDate ('2021-01-01', '2021-01-02') | Transactions : TransactionID (2, 1), FromAccountID (1, 2), ToAccountID (3, 2), Amount (200.0, 100.0), Date ('2021-01-01', '2021-01-02'), Fee_Amount (4.0, 2.0), Commission_Percentage (0.3, 0.2), Transactions (1, 2) | Loans : LoanID (2, 1), CustomerID (1, 2), LoanAmount (10000.0, 5000.0), InterestRate (4, 3.5), TermYears (3, 5), ApprovalDate ('2021-01-01', '2021-01-02') | Overdrafts : OverdraftID (1, 2), AccountID (1, 2), LimitAmount (500.0, 1000.0), InterestRate (4.5, 4), Fees (0.15, 0.1) | Rewards : RewardID (1, 2), AccountID (1, 2), Points (50, 100), RedemptionValue (10.0, 5.0)",
        "ambiguous_queries": [
            "Select Fee_Amount / Amount * 100 as Percentage from Transactions",
            "Select Commission_Percentage / Amount * 100 as Percentage from Transactions",
            "Select Fee_Amount, Commission_Percentage / Amount * 100 as Percentage from Transactions"
        ],
        "gold_ambiguity": {
            "match": "{\"amount\": [{\"Transactions\": [\"Fee_Amount\"]}, {\"Transactions\": [\"Commission_Percentage\"]}, {\"Transactions\": [\"Fee_Amount\", \"Commission_Percentage\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"amount\" refers to the schema \"Transactions\".\"Fee_Amount\"",
        "clear_ambiguity": "{\"amount\": {\"Transactions\": [\"Fee_Amount\"]}}",
        "gold_query": "Select Fee_Amount / Amount * 100 as Percentage from Transactions"
    },
    {
        "index": 833,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
        "question": "What airport is East of the Prime Meridian?",
        "schema_without_content": "Flights : Flight_ID, Departure_Time, Arrival_Time, Aircraft_Type, Origin_Airport_Code, Destination_Airport_Code | Airports : Airport_Code, Airport_Name, Country, City, Elevation, Timezone, IATA_Code, Latitude, Longitude | Airlines : Airline_Code, Airline_Name, Headquarters_City, Website | Pilots : Pilot_ID, First_Name, Last_Name, Date_Of_Birth, License_Number, License_Issue_Date, Rating, Airline_Code | Planes : Plane_ID, Registration_Number, Model_Name, Manufacturer_Name, Year_Manufactured, Capacity, Pilot_ID | Maintenance_Records : Record_ID, Plane_ID, Work_Order_Description, Start_DateTime, End_DateTime, Total_Hours_Worked, Cost",
        "schema_with_content": "Flights : Flight_ID (), Departure_Time (), Arrival_Time (), Aircraft_Type (), Origin_Airport_Code (), Destination_Airport_Code () | Airports : Airport_Code ('DUB', 'YYZ', 'NRT'), Airport_Name ('John F. Kennedy International Airport', 'Los Angeles International Airport', 'Toronto Pearson International Airport'), Country ('Canada', 'Ireland', 'USA'), City ('Dublin', 'Toronto', 'Los Angeles'), Elevation (75, 13, 253), Timezone ('JST+09:00', '-05:00', '-05:00'), IATA_Code ('DUB', 'LAX', 'YYZ'), Latitude (55.6815, 53.3749, 35.6051), Longitude (-118.4052, -79.4536, -73.7789) | Airlines : Airline_Code ('LU', 'AA', 'BA'), Airline_Name ('United Airlines', 'American Airlines', 'British Airways'), Headquarters_City ('London', 'Fort Worth', 'Chicago'), Website ('https://www.united.com', 'https://www.britishairways.com', 'https://www.aa.com') | Pilots : Pilot_ID (2, 4, 1), First_Name ('Michael', 'John', 'Paul'), Last_Name ('Doe', 'Jackson', 'Smith'), Date_Of_Birth ('1990-01-01', '1992-02-02', '1991-03-03'), License_Number ('XYZWEE', 'LMNOPQ', 'ABCDEF'), License_Issue_Date ('2017-03-03', '1964-06-06', '2016-02-02'), Rating ('ATP', 'ATP', 'ATP'), Airline_Code ('AA', 'BA', 'DL') | Planes : Plane_ID (1, 3, 2), Registration_Number ('VY-BCR', 'SE-RML', 'EC-IXQ'), Model_Name ('Airbus A320neo', 'Airbus A380-800', 'Boeing 737-800'), Manufacturer_Name ('Airbus', 'Airbus', 'Bombardier'), Year_Manufactured (2015, 2012, 2008), Capacity (200, 88, 500), Pilot_ID (2, 1, 4) | Maintenance_Records : Record_ID (4, 3, 1), Plane_ID (2, 1, 4), Work_Order_Description ('Engine overhaul', 'Avionics upgrade', 'Landing gear repair'), Start_DateTime ('2021-03-01 08:00:00', '2021-04-01 08:00:00', '2021-05-01 08:00:00'), End_DateTime ('2021-01-02 18:00:00', '2021-03-05 18:00:00', '2021-04-03 18:00:00'), Total_Hours_Worked (12.0, 24.0, 8.0), Cost (5000.0, 8000.0, 15000.0)",
        "ambiguous_queries": [
            "SELECT Airport_Code FROM Airports WHERE Longitude >0",
            "SELECT Airport_Name FROM Airports WHERE Longitude >0",
            "SELECT Airport_Code, Airport_Name FROM Airports WHERE Longitude >0"
        ],
        "gold_ambiguity": {
            "match": "{\"airport\": [{\"Airports\": [\"Airport_Code\"]}, {\"Airports\": [\"Airport_Name\"]}, {\"Airports\": [\"Airport_Code\", \"Airport_Name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"airport\" refers to the schema \"Airports\".\"Airport_Code\"",
        "clear_ambiguity": "{\"airport\": {\"Airports\": [\"Airport_Code\"]}}",
        "gold_query": "SELECT Airport_Code FROM Airports WHERE Longitude >0"
    },
    {
        "index": 834,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2tabs_waste_management/vague_2tabs_waste_management.sqlite",
        "question": "What happens to waste in New York?",
        "schema_without_content": "Waste_Disposal_Method : id, method_name, description | Recycling_Program : id, program_name, description | Construction_Material : id, material_type, quantity | Construction_Site : site_id, site_name, location, waste_disposal_method_id, recycling_program_id | Site_Material : site_material_id, construction_site_id, construction_material_id, amount | Disposed_Waste : disposed_waste_id, site_material_id, waste_disposal_method_id, disposal_date",
        "schema_with_content": "Waste_Disposal_Method : id (3, 2, 5), method_name ('Incineration', 'Landfill', 'Composting'), description ('Disposing of waste by burying it in a designated area.', 'Processing waste materials to create new products.', 'Breaking down organic matter into nutrient-rich humus.') | Recycling_Program : id (3, 5, 4), program_name ('Corporate Recycling Program', 'Community Recycling Program', 'Construction Materials Recycling'), description ('An initiative by companies to recycle their waste.', 'A local initiative to encourage recycling among residents.', 'A program to handle and recycle hazardous waste.') | Construction_Material : id (4, 3, 5), material_type ('Bricks', 'Steel', 'Glass'), quantity (300.0, 100.0, 500.0) | Construction_Site : site_id (4, 1, 5), site_name ('Site E', 'Site C', 'Site A'), location ('Los Angeles', 'Dallas', 'Miami'), waste_disposal_method_id (2, 4, 5), recycling_program_id (1, 3, 2) | Site_Material : site_material_id (5, 2, 4), construction_site_id (2, 1, 2), construction_material_id (5, 3, 2), amount (90.0, 75.0, 50.0) | Disposed_Waste : disposed_waste_id (2, 3, 5), site_material_id (1, 2, 3), waste_disposal_method_id (1, 2, 3), disposal_date ('2022-01-03', '2022-01-05', '2022-01-02')",
        "ambiguous_queries": [
            "SELECT wm.method_name FROM Waste_Disposal_Method wm JOIN Construction_Site c ON wm.id =c.waste_disposal_method_id WHERE c.location = 'New York City'",
            "SELECT wm.program_name FROM Recycling_Program wm JOIN Construction_Site c ON wm.id =c.Recycling_Program_id WHERE c.location = 'New York City'",
            "SELECT wm.method_name, rp.program_name FROM Waste_Disposal_Method wm JOIN Construction_Site c ON wm.id =c.waste_disposal_method_id JOIN Recycling_Program rp ON rp.id =c.Recycling_Program_id WHERE c.location = 'New York City'"
        ],
        "gold_ambiguity": {
            "match": "{\"What\": [{\"Recycling_Program\": [\"program_name\"]}, {\"Waste_Disposal_Method\": [\"method_name\"]}, {\"Recycling_Program\": [\"program_name\"], \"Waste_Disposal_Method\": [\"method_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"What\" refers to the schema \"Recycling_Program\".\"program_name\"",
        "clear_ambiguity": "{\"What\": {\"Recycling_Program\": [\"program_name\"]}}",
        "gold_query": "SELECT wm.program_name FROM Recycling_Program wm JOIN Construction_Site c ON wm.id =c.Recycling_Program_id WHERE c.location = 'New York City'"
    },
    {
        "index": 835,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2cols_platform/vague_2cols_platform.sqlite",
        "question": "List all platforms along with article titles and categories and parent news agencies.",
        "schema_without_content": "NewsArticle : id, Title, Content, Website, Mobile_App, News_Agency | Author : id, Name, Email | Category : id, Name | ArticleCategoryRelationship : articleId, categoryId | Comments : id, content, authorEmail, articleId",
        "schema_with_content": "NewsArticle : id (2, 1), Title ('The Rise of Electric Vehicles', 'Climate Change and Its Impact on Agriculture'), Content ('In this article, we explore...', 'This article discusses...'), Website ('www.example.com', 'www.examplenews.com'), Mobile_App ('EVAPPS', 'APP123'), News_Agency ('EcoTimes', 'Global Times') | Author : id (1, 2), Name ('John Doe', 'Jane Smith'), Email ('johndoe@email.com', 'janesmith@email.com') | Category : id (1, 2), Name ('Environment', 'Technology') | ArticleCategoryRelationship : articleId (2, 1), categoryId (2, 1) | Comments : id (1, 2), content ('Great read!', 'Interesting insights.'), authorEmail ('commenter1@email.com', 'commenter2@email.com'), articleId (1, 2)",
        "ambiguous_queries": [
            "SELECT NewsArticle.Website, NewsArticle.Title, Category.Name, NewsArticle.News_Agency FROM NewsArticle JOIN ArticleCategoryRelationship ON ArticleCategoryRelationship.articleId = NewsArticle.id JOIN Category ON Category.id = ArticleCategoryRelationship.categoryID",
            "SELECT NewsArticle.Mobile_App, NewsArticle.Title, Category.Name, NewsArticle.News_Agency FROM NewsArticle JOIN ArticleCategoryRelationship ON ArticleCategoryRelationship.articleId = NewsArticle.id JOIN Category ON Category.id = ArticleCategoryRelationship.categoryID",
            "SELECT NewsArticle.Website, Mobile_App, NewsArticle.Title, Category.Name, NewsArticle.News_Agency FROM NewsArticle JOIN ArticleCategoryRelationship ON ArticleCategoryRelationship.articleId = NewsArticle.id JOIN Category ON Category.id = ArticleCategoryRelationship.categoryID"
        ],
        "gold_ambiguity": {
            "match": "{\"news agencies\": [{\"NewsArticle\": [\"Website\"]}, {\"NewsArticle\": [\"Mobile_App\"]}, {\"NewsArticle\": [\"Website\", \"Mobile_App\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"news agencies\" refers to the schema \"NewsArticle\".\"Website\"",
        "clear_ambiguity": "{\"news agencies\": {\"NewsArticle\": [\"Website\"]}}",
        "gold_query": "SELECT NewsArticle.Website, NewsArticle.Title, Category.Name, NewsArticle.News_Agency FROM NewsArticle JOIN ArticleCategoryRelationship ON ArticleCategoryRelationship.articleId = NewsArticle.id JOIN Category ON Category.id = ArticleCategoryRelationship.categoryID"
    },
    {
        "index": 836,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2tabs_leadership/vague_2tabs_leadership.sqlite",
        "question": "Who heads the bank with the largest withdrawal?",
        "schema_without_content": "Ceo : ceoID, fullname | Board_of_directors : boardID, ceoID, directorfullname | Banks : bankID, bankName, branchNumber, ceoID, boardID | Customers : customerID, customerName, accountNumber, bankID | Accounts : accountID, accountType, balance, customerID | Transactions : transactionID, amount, type, date, accountID",
        "schema_with_content": "Ceo : ceoID (4, 1, 2), fullname ('Jane Smith', 'Michael Johnson', 'John Doe') | Board_of_directors : boardID (1, 3, 4), ceoID (5, 3, 4), directorfullname ('Linda Taylor', 'Robert Martinez', 'Laura Garcia') | Banks : bankID (4, 5, 2), bankName ('Bank D', 'Bank E', 'Bank B'), branchNumber (200, 400, 100), ceoID (5, 4, 2), boardID (1, 5, 4) | Customers : customerID (2, 1, 3), customerName ('Customer B', 'Customer D', 'Customer E'), accountNumber (987654321, 888888888, 777777777), bankID (4, 1, 5) | Accounts : accountID (2, 3, 4), accountType ('Savings', 'IRA', 'Checking'), balance (2000.0, 10000.0, 5000.0), customerID (4, 1, 2) | Transactions : transactionID (5, 4, 2), amount (500.0, -400.0, 500.0), type ('Deposit', 'Withdrawal', 'Deposit'), date ('2024-02-19 14:16:12', '2024-02-19 14:16:12', '2024-02-19 14:16:12'), accountID (5, 2, 3)",
        "ambiguous_queries": [
            "select L.fullName from Ceo L inner join banks B on B.ceoId = L.ceoId inner join customers C on C.bankId = B.bankId inner join Accounts A on A.customerId = C.CustomerId inner join Transactions T on T.accountId = A.accountId where T.type = 'Withdrawal' order by T.amount desc limit 1",
            "select L.directorfullName from Board_of_directors L inner join banks B on B.boardID = L.boardID inner join customers C on C.bankId = B.bankId inner join Accounts A on A.customerId = C.CustomerId inner join Transactions T on T.accountId = A.accountId where T.type = 'Withdrawal' order by T.amount desc limit 1",
            "select L.fullName, D.directorfullName from Ceo L inner join banks B on B.ceoId = L.ceoId inner join customers C on C.bankId = B.bankId join Board_of_directors D on B.boardID = D.boardID inner join Accounts A on A.customerId = C.CustomerId inner join Transactions T on T.accountId = A.accountId where T.type = 'Withdrawal' order by T.amount desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Board_of_directors\": [\"directorfullName\"]}, {\"Ceo\": [\"fullName\"]}, {\"Board_of_directors\": [\"directorfullName\"], \"Ceo\": [\"fullName\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Ceo\".\"fullName\"",
        "clear_ambiguity": "{\"Who\": {\"Ceo\": [\"fullName\"]}}",
        "gold_query": "select L.fullName, D.directorfullName from Ceo L inner join banks B on B.ceoId = L.ceoId inner join customers C on C.bankId = B.bankId join Board_of_directors D on B.boardID = D.boardID inner join Accounts A on A.customerId = C.CustomerId inner join Transactions T on T.accountId = A.accountId where T.type = 'Withdrawal' order by T.amount desc limit 1"
    },
    {
        "index": 837,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2tabs_overseeing_company/vague_2tabs_overseeing_company.sqlite",
        "question": "show me all projects by company",
        "schema_without_content": "Real_Estate_Developer : id, name, contact_info | Contractor : id, name, specialty, license_number | Development_Project : id, project_name, developer_id, contractor_id | Project_Milestone : id, milestone_description, start_date, end_date, development_project_id | Materials : id, material_type, quantity, unit_price, contractor_id | Employee : id, first_name, last_name, position, contractor_id",
        "schema_with_content": "Real_Estate_Developer : id (2, 1), name ('Company B', 'Company A'), contact_info ('+987654321', '+123456789') | Contractor : id (1, 2), name ('Contractor Y', 'Contractor X'), specialty ('Plumbing', 'Concrete Work'), license_number ('LX001', 'LY002') | Development_Project : id (1, 2), project_name ('High Rise Building', 'Residential Complex'), developer_id (1, 2), contractor_id (1, 2) | Project_Milestone : id (1, 2), milestone_description ('Foundation Completed', 'Framing Started'), start_date ('2023-01-01', '2023-01-11'), end_date ('2023-01-10', '2023-01-20'), development_project_id (1, 1) | Materials : id (1, 2), material_type ('Reinforcement Bar', 'Pipes'), quantity (500, 300), unit_price (10, 8), contractor_id (2, 1) | Employee : id (1, 2), first_name ('Jane', 'John'), last_name ('Doe', 'Smith'), position ('Site Supervisor', 'Engineer'), contractor_id (2, 1)",
        "ambiguous_queries": [
            "SELECT dp.project_name AS Project_Name, oc.name AS Company_Name FROM Development_Project dp JOIN Real_Estate_Developer oc ON dp.developer_id = oc.id",
            "SELECT dp.project_name AS Project_Name, oc.name AS Company_Name FROM Development_Project dp JOIN Contractor oc ON dp.Contractor_id = oc.id",
            "SELECT dp.project_name AS Project_Name, oc.name, co.name FROM Development_Project dp JOIN Real_Estate_Developer oc ON dp.developer_id = oc.id JOIN Contractor co ON dp.Contractor_id = oc.id"
        ],
        "gold_ambiguity": {
            "match": "{\"company\": [{\"Contractor\": [\"name\"]}, {\"Real_Estate_Developer\": [\"name\"]}, {\"Contractor\": [\"name\"], \"Real_Estate_Developer\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"company\" refers to the schema \"Contractor\".\"name\"",
        "clear_ambiguity": "{\"company\": {\"Contractor\": [\"name\"]}}",
        "gold_query": "SELECT dp.project_name AS Project_Name, oc.name AS Company_Name FROM Development_Project dp JOIN Contractor oc ON dp.Contractor_id = oc.id"
    },
    {
        "index": 838,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_location/vague_2cols_location.sqlite",
        "question": "Show me the location of St. Mary's General",
        "schema_without_content": "Patients : patient_id, first_name, last_name, birthdate, city, state | Doctors : doctor_id, first_name, last_name, specialty, hospital_id | Hospitals : hospital_id, name, phone_number, city, state | Appointments : appointment_id, patient_id, doctor_id, date",
        "schema_with_content": "Patients : patient_id (4, 1, 3), first_name ('Michael', 'John', 'Jane'), last_name ('Black', 'Smith', 'Brown'), birthdate ('1992-03-17', '1995-06-25', '2000-08-30'), city ('Phoenix', 'Houston', 'Los Angeles'), state ('AZ', 'CA', 'IL') | Doctors : doctor_id (), first_name (), last_name (), specialty (), hospital_id () | Hospitals : hospital_id (1, 2, 5), name (\"St. Mary's General\", 'South Coast Community', 'Westside Medical Center'), phone_number ('123-456-7890', '111-222-3333', '987-654-3210'), city ('San Francisco', 'Long Beach', 'Boston'), state ('SF', 'OR', 'CA') | Appointments : appointment_id (), patient_id (), doctor_id (), date ()",
        "ambiguous_queries": [
            "SELECT city FROM Hospitals WHERE NAME = \"St. Mary's General\";",
            "SELECT state FROM Hospitals WHERE NAME = \"St. Mary's General\";",
            "SELECT city, state FROM Hospitals WHERE NAME = \"St. Mary's General\";"
        ],
        "gold_ambiguity": {
            "match": "{\"location\": [{\"Hospitals\": [\"city\"]}, {\"Hospitals\": [\"state\"]}, {\"Hospitals\": [\"city\", \"state\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"location\" refers to the schema \"Hospitals\".\"city\"",
        "clear_ambiguity": "{\"location\": {\"Hospitals\": [\"city\"]}}",
        "gold_query": "SELECT city FROM Hospitals WHERE NAME = \"St. Mary's General\";"
    },
    {
        "index": 839,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_grades/vague_2cols_grades.sqlite",
        "question": "Who got the lowest score and what was the score?",
        "schema_without_content": "Students : StudentID, fullname | Programs : ProgramID, Name | Enrollments : EnrollmentID, StudentID, ProgramID | Grades : GradeID, EnrollmentID, Gpa, Standardized_Test_Score, CourseName",
        "schema_with_content": "Students : StudentID (3, 4, 2), fullname ('Michael Johnson', 'David Brown', 'John Doe') | Programs : ProgramID (4, 3, 2), Name ('Biology', 'Physical Education', 'Mathematics') | Enrollments : EnrollmentID (3, 1, 5), StudentID (3, 2, 5), ProgramID (6, 9, 7) | Grades : GradeID (4, 2, 3), EnrollmentID (5, 2, 4), Gpa (3.2, 3.1, 3.5), Standardized_Test_Score (1500, 1300, 1400), CourseName ('Algebra I', 'Literature II', 'Physical Education V')",
        "ambiguous_queries": [
            "SELECT Grades.Gpa, Students.fullname FROM Students JOIN Enrollments ON Students.StudentID = Enrollments. StudentID JOIN Grades ON Enrollments.EnrollmentID = Grades.EnrollmentID ORDER BY Grades.Gpa ASC LIMIT 1",
            "SELECT Grades.Standardized_Test_Score, Students.fullname FROM Students JOIN Enrollments ON Students.StudentID = Enrollments. StudentID JOIN Grades ON Enrollments.EnrollmentID = Grades.EnrollmentID ORDER BY Grades.Standardized_Test_Score ASC LIMIT 1",
            "SELECT Grades.Gpa, Grades.Standardized_Test_Score, Students.fullname FROM Students JOIN Enrollments ON Students.StudentID = Enrollments. StudentID JOIN Grades ON Enrollments.EnrollmentID = Grades.EnrollmentID ORDER BY Grades.Gpa, Grades.Standardized_Test_Score ASC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"score\": [{\"Grades\": [\"Gpa\"]}, {\"Grades\": [\"Standardized_Test_Score\"]}, {\"Grades\": [\"Gpa\", \"Standardized_Test_Score\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"score\" refers to the schema \"Grades\".\"Gpa\"",
        "clear_ambiguity": "{\"score\": {\"Grades\": [\"Gpa\"]}}",
        "gold_query": "SELECT Grades.Gpa, Students.fullname FROM Students JOIN Enrollments ON Students.StudentID = Enrollments. StudentID JOIN Grades ON Enrollments.EnrollmentID = Grades.EnrollmentID ORDER BY Grades.Gpa ASC LIMIT 1"
    },
    {
        "index": 840,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_bank_size/vague_2cols_bank_size.sqlite",
        "question": "Display the position of the employee and the size of the bank that is called ABC Bank",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, Email | Accounts : AccountID, CustomerID, Balance | Loans : LoanID, CustomerID, Amount, InterestRate, StartDate, EndDate | Transactions : TransactionID, AccountID, Date, Type, Amount | Banks : BankID, Number_of_Branches, Countries_served, Bank | Employees : EmployeeID, FirstName, LastName, Position, Salary, BankID",
        "schema_with_content": "Customers : CustomerID (1, 2), FirstName ('Jane', 'John'), LastName ('Doe', 'Smith'), Email ('john.doe@example.com', 'jane.smith@example.com') | Accounts : AccountID (1, 2), CustomerID (1, 2), Balance (1000.0, 500.0) | Loans : LoanID (2, 1), CustomerID (2, 1), Amount (75000, 50000), InterestRate (3.5, 3), StartDate ('2023-01-01', '2023-02-01'), EndDate ('2028-01-31', '2026-12-31') | Transactions : TransactionID (2, 1), AccountID (2, 1), Date ('2024-02-19 15:10:48', '2024-02-19 15:10:48'), Type ('Deposit', 'Withdrawal'), Amount (-50.0, 100.0) | Banks : BankID (2, 1), Number_of_Branches (200, 100), Countries_served ('USA and Canada', 'Europe'), Bank ('ABC Bank', 'XYZ Bank') | Employees : EmployeeID (1, 2), FirstName ('Bob', 'Alice'), LastName ('Hanson', 'Wright'), Position ('Teller', 'Manager'), Salary (50000.0, 35000.0), BankID (1, 2)",
        "ambiguous_queries": [
            "select employees.position, banks.Number_of_Branches from employees join banks on employees.bankid = banks.bankid where Bank = 'ABC Bank'",
            "select employees.position, banks.Countries_served from employees join banks on employees.bankid = banks.bankid where Bank = 'ABC Bank'",
            "select employees.position, banks.Number_of_Branches, Countries_served from employees join banks on employees.bankid = banks.bankid where Bank = 'ABC Bank'"
        ],
        "gold_ambiguity": {
            "match": "{\"bank\": [{\"Banks\": [\"Number_of_Branches\", \"Countries_served\"]}, {\"Banks\": [\"Number_of_Branches\"]}, {\"Banks\": [\"Countries_served\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"bank\" refers to the schema \"banks\".\"Number_of_Branches\"",
        "clear_ambiguity": "{\"bank\": {\"Banks\": [\"Number_of_Branches\"]}}",
        "gold_query": "select employees.position, banks.Number_of_Branches from employees join banks on employees.bankid = banks.bankid where Bank = 'ABC Bank'"
    },
    {
        "index": 841,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
        "question": "List all student emails and indicate what they are studying.",
        "schema_without_content": "Students : ID, BirthDate, Field_Of_Study, Degree_Program, Email, fullname | Enrolments : ID, StudentID, CourseID, Semester | Courses : ID, Title, Description, Credit | Marks : ID, EnrollmentID, Grade, DateAssigned",
        "schema_with_content": "Students : ID (3, 2, 4), BirthDate ('1990-05-15', '1996-09-15', '1988-06-23'), Field_Of_Study ('Physics', 'Mathematics', 'Biology'), Degree_Program ('BSc', 'BSc', 'BA'), Email ('tom.williams@example.com', 'alice.johnson@example.com', 'jane.smith@example.com'), fullname ('John Doe', 'Emma Brown', 'Tom Williams') | Enrolments : ID (), StudentID (), CourseID (), Semester () | Courses : ID (5, 4, 3), Title ('Cellular Biology', 'Quantum Mechanics', 'Organic Chemistry'), Description ('A fundamental course on programming concepts.', 'Exploring various psychological disorders and their treatment.', 'An introductory course on quantum mechanics principles.'), Credit (3, 3, 3) | Marks : ID (), EnrollmentID (), Grade (), DateAssigned ()",
        "ambiguous_queries": [
            "SELECT Email, Field_Of_Study FROM Students",
            "SELECT Email, Degree_Program FROM Students",
            "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
        ],
        "gold_ambiguity": {
            "match": "{\"what\": [{\"Students\": [\"Field_Of_Study\"]}, {\"Students\": [\"Degree_Program\"]}, {\"Students\": [\"Field_Of_Study\", \"Degree_Program\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"what\" refers to the schema \"Students\".\"Field_Of_Study\" and \"Students\".\"Degree_Program\"",
        "clear_ambiguity": "{\"what\": {\"Students\": [\"Field_Of_Study\", \"Degree_Program\"]}}",
        "gold_query": "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
    },
    {
        "index": 842,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_focus/vague_2cols_focus.sqlite",
        "question": "What grade did John receive on their submission and what was the focus of that conference?",
        "schema_without_content": "Students : id, firstName, lastName, major, yearInSchool | Classes : classId, className, professorName, roomNumber, capacity, timeSlot | Enrollments : enrollmentId, studentId, classId, grade | Projects : projectId, title, description, dueDate, status | Theme_Tracks : themeTrackId, themeTrack, submissionTopic, conference, abstract, fullPaper | Submissions : submissionId, studentId, themeTrackId, projectId, dateOfSubmission, feedback, grade",
        "schema_with_content": "Students : id (1, 3, 2), firstName ('John', 'Alice', 'Jane'), lastName ('Smith', 'White', 'Doe'), major ('Aerospace Engineering', 'Computer Science', 'Mechanical Engineering'), yearInSchool (3, 3, 4) | Classes : classId (5, 4, 3), className ('Electronic Circuits', 'Fluid Mechanics', 'Introduction to Computer Science'), professorName ('Prof. White', 'Dr. Black', 'Dr. Brown'), roomNumber ('Room 505', 'Room 202', 'Room 303'), capacity (28, 27, 30), timeSlot ('2:00 PM - 4:00 PM', '11:30 AM - 1:30 PM', '9:00 AM - 11:00 AM') | Enrollments : enrollmentId (3, 4, 1), studentId (3, 5, 2), classId (5, 2, 1), grade ('B+', 'B', 'A') | Projects : projectId (5, 2, 1), title ('Renewable Energy Storage', 'Urban Transportation Systems', 'Nanotechnology Applications'), description ('Exploring energy storage solutions for renewable sources.', 'Research on improving sorting algorithms.', 'Designing efficient transportation systems for urban areas.'), dueDate ('2023-05-15', '2023-06-05', '2023-05-30'), status ('Not Started', 'In Progress', 'Pending Review') | Theme_Tracks : themeTrackId (5, 3, 1), themeTrack ('Machine Learning', 'Healthcare', 'Robotics'), submissionTopic ('Wearable devices for continuous glucose monitoring.', 'Swarm robotics for environmental monitoring.', 'Carbon capture and storage using machine learning.'), conference ('International Conference on Artificial Intelligence', 'Interplanetary Conference', 'World Health Congress'), abstract ('This paper explores recent breakthroughs in propulsion technology...', 'We propose an innovative swarm robotic system for monitoring...', 'This paper presents a novel approach to NLP...'), fullPaper ('https://example.com/fullpaper_robotics.pdf', 'https://example.com/fullpaper_green.pdf', 'The full paper can be found at https://example.com/fullpaper.pdf') | Submissions : submissionId (2, 5, 3), studentId (2, 4, 3), themeTrackId (5, 1, 2), projectId (5, 3, 4), dateOfSubmission ('2023-04-25 10:00:00', '2023-05-05 10:00:00', '2023-04-20 10:00:00'), feedback ('Needs improvement. Focus on addressing the problem statement more clearly.', 'Well done! Consider focusing more on practical implementation.', 'Great effort! The literature review could be improved further.'), grade ('A-', 'B', 'C')",
        "ambiguous_queries": [
            "SELECT a.themeTrack, b.grade FROM Theme_Tracks a JOIN Submissions b ON a.themeTrackID = b.themeTrackId JOIN Students c ON b.studentId = c.id where c.FirstName = 'John'",
            "SELECT a.submissionTopic, b.grade FROM Theme_Tracks a JOIN Submissions b ON a.themeTrackID = b.themeTrackId JOIN Students c ON b.studentId = c.id where c.FirstName = 'John'",
            "SELECT a.themeTrack, submissionTopic, b.grade FROM Theme_Tracks a JOIN Submissions b ON a.themeTrackID = b.themeTrackId JOIN Students c ON b.studentId = c.id where c.FirstName = 'John'"
        ],
        "gold_ambiguity": {
            "match": "{\"What grade\": [{\"Theme_Tracks\": [\"themeTrack\"]}, {\"Theme_Tracks\": [\"submissionTopic\"]}, {\"Theme_Tracks\": [\"themeTrack\", \"submissionTopic\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"What grade\" refers to the schema \"Theme_Tracks\".\"submissionTopic\"",
        "clear_ambiguity": "{\"What grade\": {\"Theme_Tracks\": [\"submissionTopic\"]}}",
        "gold_query": "SELECT a.submissionTopic, b.grade FROM Theme_Tracks a JOIN Submissions b ON a.themeTrackID = b.themeTrackId JOIN Students c ON b.studentId = c.id where c.FirstName = 'John'"
    },
    {
        "index": 843,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_location/vague_2tabs_location.sqlite",
        "question": "Where did Dua Lipa's concert take place?",
        "schema_without_content": "Country : id, name | City : id, name, country_id | Artist : id, name, city_id, country_id, genre | Concert : id, artist_name, artist_genre, concert_date, city_id, country_id",
        "schema_with_content": "Country : id (4, 3, 1), name ('Germany', 'Canada', 'Australia') | City : id (4, 5, 1), name ('Melbourne', 'London', 'Berlin'), country_id (1, 3, 2) | Artist : id (3, 2, 1), name ('Adele', 'David Bowie', 'The Weeknd'), city_id (1, 5, 3), country_id (3, 1, 4), genre ('R&B', 'Pop', 'Electronic Dance Music') | Concert : id (1, 5, 2), artist_name ('Dua Lipa', 'Beyonce', 'David Bowie'), artist_genre ('Rock', 'R&B', 'Jazz'), concert_date ('2022-10-15', '2022-09-01', '2022-07-01'), city_id (1, 2, 3), country_id (2, 1, 4)",
        "ambiguous_queries": [
            "SELECT l.name FROM 'Concert' c JOIN 'Artist' a ON c.artist_name = a.name JOIN 'City' l ON c.city_id = l.id WHERE a.name = 'Dua Lipa';",
            "SELECT l.name FROM 'Concert' c JOIN 'Artist' a ON c.artist_name = a.name JOIN 'Country' l ON c.country_id = l.id WHERE a.name = 'Dua Lipa';",
            "SELECT cn.name, l.name FROM 'Concert' c JOIN 'Artist' a ON c.artist_name = a.name JOIN 'City' l ON c.city_id = l.id JOIN 'Country' cn ON c.country_id = cn.id WHERE a.name = 'Dua Lipa';"
        ],
        "gold_ambiguity": {
            "match": "{\"Where\": [{\"City\": [\"name\"]}, {\"Country\": [\"name\"]}, {\"City\": [\"name\"], \"Country\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Where\" refers to the schema \"City\".\"n\" and \"City\".\"a\" and \"City\".\"m\" and \"City\".\"e\" and \"Country\".\"n\" and \"Country\".\"a\" and \"Country\".\"m\" and \"Country\".\"e\"",
        "clear_ambiguity": "{\"Where\": {\"City\": \"name\", \"Country\": \"name\"}}",
        "gold_query": "SELECT cn.name, l.name FROM 'Concert' c JOIN 'Artist' a ON c.artist_name = a.name JOIN 'City' l ON c.city_id = l.id JOIN 'Country' cn ON c.country_id = cn.id WHERE a.name = 'Dua Lipa';"
    },
    {
        "index": 844,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
        "question": "Can you list all airports, including their names, locations, contact numbers, and websites?",
        "schema_without_content": "Airports : id, Name, IATA_Code, ICAA_Code, Latitude, Longitude, Elevation, Timezone, Direction_Indicator, Surface_Area, Movement_Area, Runway_Length, City, State, Phone_Number, Website, Email, Year_Established | Flights : Flight_ID, Origin_Airport, Destination_Airport, Departure_Time, Arrival_Time, Carrier_Airlines, Aircraft_Type, Number_of_Passengers, Flight_Status, Gate_Number | Pilots : Pilot_Id, FirstName, LastName, License_Number, Date_Of_Birth, Total_Flight_Hours, Rating, Current_Assignment, Hire_Date | Passengers : Passenger_Id, FirstName, LastName, Date_Of_Birth, Nationality, Passport_Number, Contact_Phone_Number, Seat_Preference, Special_Assistance | Baggage : Bag_Id, Flight_Id, Owner_FirstName, Owner_LastName, Size_Inches, Weight_Kgs, Description, Status | Aircrafts : Aircraft_Id, Model_Name, Manufacturer, Registration_Mark, Type, Capacity, Range_Miles, Maximum_Speed, Cruise_Speed, Service_Ceiling, Operator_Id",
        "schema_with_content": "Airports : id (2, 1), Name ('Los Angeles International Airport', 'John F Kennedy International Airport'), IATA_Code ('LAX', 'JFK'), ICAA_Code ('LACI', 'N7988'), Latitude (-118.4053, -73.6954), Longitude (-40.6452, 33.9435), Elevation (279, 13), Timezone (-8, -5), Direction_Indicator ('W', 'R'), Surface_Area (2560.0, 1627.4), Movement_Area (1627.4, 2560.0), Runway_Length (3147.0, 9899.0), City ('New York', 'Los Angeles'), State ('Los Angeles County', 'Queens'), Phone_Number ('+1-855-463-5252', '+1-800-222-1222'), Website ('https://www.flylax.com/', 'https://www.jfkairport.com/'), Email ('information@flylax.com', 'info@jfkairport.com'), Year_Established (1943, 1937) | Flights : Flight_ID (1, 2), Origin_Airport ('Dallas/Fort Worth International Airport', 'JFK'), Destination_Airport ('LAX', 'Heathrow Airport'), Departure_Time ('2023-01-02 14:00:00', '2023-01-01 08:00:00'), Arrival_Time ('2023-01-01 11:00:00', '2023-01-02 19:00:00'), Carrier_Airlines ('American Airlines', 'British Airways'), Aircraft_Type ('Boeing 747 Jumbo Jet', 'Boeing 787 Dreamliner'), Number_of_Passengers (300, 250), Flight_Status ('On Time', 'On Time'), Gate_Number (10, 15) | Pilots : Pilot_Id (2, 1), FirstName ('Jane', 'John'), LastName ('Doe', 'Smith'), License_Number ('ABCD1234', 'EFGH5678'), Date_Of_Birth ('1990-09-20', '1985-06-15'), Total_Flight_Hours (4000, 5000), Rating ('ATP', 'ATP'), Current_Assignment ('Co-pilot', 'Captain'), Hire_Date ('2015-01-01', '2018-01-01') | Passengers : Passenger_Id (2, 1), FirstName ('Bob', 'Alice'), LastName ('Johnson', 'Williams'), Date_Of_Birth ('1985-07-25', '1990-03-10'), Nationality ('UK', 'USA'), Passport_Number ('GB987654321', 'US123456789'), Contact_Phone_Number ('+44-777-123-4567', '+1-555-123-4567'), Seat_Preference ('Window', 'Aisle'), Special_Assistance (1, 0) | Baggage : Bag_Id (2, 1), Flight_Id (2, 1), Owner_FirstName ('John', 'Jane'), Owner_LastName ('Smith', 'Doe'), Size_Inches ('21x14x9', '22x15x10'), Weight_Kgs (10.0, 8.0), Description ('Personal items and toiletries', 'Business suit and laptop'), Status ('Carry on', 'Checked') | Aircrafts : Aircraft_Id (1, 2), Model_Name ('Boeing 787-8', 'Airbus A320neo'), Manufacturer ('Airbus', 'Boeing'), Registration_Mark ('N123BA', 'F-HSEZ'), Type ('Passenger', 'Passenger'), Capacity (265, 180), Range_Miles ('7000', '3100'), Maximum_Speed (0.85, 0.85), Cruise_Speed (0.8, 0.8), Service_Ceiling (41000, 43000), Operator_Id (2, 1)",
        "ambiguous_queries": [
            "SELECT id, Name, City, Phone_Number, Website FROM Airports",
            "SELECT id, Name, State, Phone_Number, Website FROM Airports",
            "SELECT id, Name, City, State, Phone_Number, Website FROM Airports"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"Airports\": [\"City\"]}, {\"Airports\": [\"State\"]}, {\"Airports\": [\"City\", \"State\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"Airports\".\"State\"",
        "clear_ambiguity": "{\"locations\": {\"Airports\": [\"State\"]}}",
        "gold_query": "SELECT id, Name, State, Phone_Number, Website FROM Airports"
    },
    {
        "index": 845,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_developer/vague_2cols_developer.sqlite",
        "question": "Who made the cheapest device?",
        "schema_without_content": "Scientists : id, birthDate, fullname | Companies : id, name, location | MedicalDevices : id, deviceName, description, price | DeviceDevelopment : scientistId, companyId, medicalDeviceId, startDate, endDate | Patients : patientId, firstName, lastName, dateOfBirth, gender | Appointments : appointmentId, doctorId, patientId, date | Doctors : doctorId, firstName, lastName, specialty",
        "schema_with_content": "Scientists : id (2, 1), birthDate ('1970-01-01', '1980-02-02'), fullname ('Jane Doe', 'John Smith') | Companies : id (1, 2), name ('MedTech Inc.', 'Health Innovations Ltd.'), location ('London, UK', 'New York, USA') | MedicalDevices : id (2, 1), deviceName ('Glucose Monitor', 'Heart Rate Sensor'), description ('Monitors blood glucose levels', 'Measures heart rate'), price (99.99, 69.99) | DeviceDevelopment : scientistId (2, 1), companyId (2, 1), medicalDeviceId (2, 1), startDate ('2020-01-01', '2021-01-01'), endDate ('2020-12-31', '2021-12-31') | Patients : patientId (2, 1), firstName ('Emily', 'Michael'), lastName ('Johnson', 'Williams'), dateOfBirth ('1990-01-01', '1995-02-02'), gender ('M', 'F') | Appointments : appointmentId (1, 2), doctorId (1, 2), patientId (1, 2), date ('2022-01-01 10:00:00', '2022-02-02 14:00:00') | Doctors : doctorId (1, 2), firstName ('Dr. Alice', 'Dr. Charles'), lastName ('Brown', 'Green'), specialty ('Neurology', 'Cardiology')",
        "ambiguous_queries": [
            "SELECT Scientists.fullname FROM DeviceDevelopment JOIN Scientists ON Scientists.id = DeviceDevelopment.scientistId JOIN MedicalDevices ON MedicalDevices.id = DeviceDevelopment.medicalDeviceId ORDER BY price ASC LIMIT 1",
            "SELECT Companies.name FROM DeviceDevelopment JOIN Companies ON Companies.id = DeviceDevelopment.companyId JOIN MedicalDevices ON MedicalDevices.id = DeviceDevelopment.medicalDeviceId ORDER BY price ASC LIMIT 1",
            "SELECT Scientists.fullname, Companies.name FROM DeviceDevelopment JOIN Scientists ON Scientists.id = DeviceDevelopment.scientistId JOIN MedicalDevices ON MedicalDevices.id = DeviceDevelopment.medicalDeviceId JOIN Companies ON Companies.id = DeviceDevelopment.companyId ORDER BY price ASC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Companies\": [\"name\"]}, {\"Scientists\": [\"fullname\"]}, {\"Companies\": [\"name\"], \"Scientists\": [\"fullname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Companies\".\"name\"",
        "clear_ambiguity": "{\"Who\": {\"Companies\": [\"name\"]}}",
        "gold_query": "SELECT Companies.name FROM DeviceDevelopment JOIN Companies ON Companies.id = DeviceDevelopment.companyId JOIN MedicalDevices ON MedicalDevices.id = DeviceDevelopment.medicalDeviceId ORDER BY price ASC LIMIT 1"
    },
    {
        "index": 846,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_setting/vague_2cols_setting.sqlite",
        "question": "What is the title and setting of the opera composed by Mozart?",
        "schema_without_content": "Composers : composerId, name, birthYear | Operas : operaID, title, Historical_Era, Location, Duration, composerId | Venues : venueID, name, capacity | Performances : performanceId, date, startTime, venueId, operaId | CastMembers : castMemberId, name, roleInPerformance, performanceId",
        "schema_with_content": "Composers : composerId (2, 1), name ('George Frideric Handel', 'Wolfgang Amadeus Mozart'), birthYear (1756, 1685) | Operas : operaID (2, 1), title ('Messiah', 'The Marriage of Figaro'), Historical_Era ('Classical', 'Baroque'), Location ('Seville', 'Jerusalem'), Duration (220, 300), composerId (1, 2) | Venues : venueID (2, 1), name ('Metropolitan Opera House', 'Royal Opera House'), capacity (2100, 3938) | Performances : performanceId (1, 2), date ('2022-11-20', '2022-10-15'), startTime ('19:30', '18:00'), venueId (1, 2), operaId (2, 1) | CastMembers : castMemberId (2, 1), name ('John Smith', 'Jane Doe'), roleInPerformance ('Count Almaviva', 'Figaro'), performanceId (1, 1)",
        "ambiguous_queries": [
            "SELECT title, Historical_Era FROM Operas JOIN Composers ON Composers.composerId = Operas.composerId WHERE name like '%Mozart%';",
            "SELECT title, Location FROM Operas JOIN Composers ON Composers.composerId = Operas.composerId WHERE name like '%Mozart%';",
            "SELECT title, Historical_Era, Location FROM Operas JOIN Composers ON Composers.composerId = Operas.composerId WHERE name like '%Mozart%';"
        ],
        "gold_ambiguity": {
            "match": "{\"setting\": [{\"Composers\": [\"Location\"]}, {\"Operas\": [\"Historical_Era\"]}, {\"Composers\": [\"Location\"], \"Operas\": [\"Historical_Era\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"setting\" refers to the schema \"Operas\".\"Historical_Era\"",
        "clear_ambiguity": "{\"setting\": {\"Operas\": [\"Historical_Era\"]}}",
        "gold_query": "SELECT title, Historical_Era FROM Operas JOIN Composers ON Composers.composerId = Operas.composerId WHERE name like '%Mozart%';"
    },
    {
        "index": 847,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_timeframe/vague_2cols_timeframe.sqlite",
        "question": "For each singer, show me the album and its release timeframe and concert venue.",
        "schema_without_content": "Artists : ArtistID, ArtistName | Albums : AlbumID, Year, Month, AlbumName, Genre, ArtistID | Songs : SongID, SongTitle, Duration, AlbumID | MusicLabels : LabelID, LabelName, ArtistID | Concerts : ConcertID, Date, Venue, City, Country, HeadlinerID, OpeningActID | Tickets : TicketID, Quantity, Price, ConcertID",
        "schema_with_content": "Artists : ArtistID (5, 1, 2), ArtistName ('Beyonce', 'Justin Timberlake', 'Adele') | Albums : AlbumID (3, 4, 2), Year (2019, 2016, 2007), Month (11, 11, 4), AlbumName ('Lemonade', 'Captain Fantastic and The Brown Dirt Cowboy', 'To Be Loved'), Genre ('Pop', 'R&B/Hip Hop', 'R&B/Pop'), ArtistID (2, 3, 1) | Songs : SongID (1, 4, 2), SongTitle ('All of Me', 'Formation', 'Stronger'), Duration (182, 224, 214), AlbumID (2, 4, 3) | MusicLabels : LabelID (2, 3, 1), LabelName ('Republic Records', 'XL Recordings', 'Parkwood Entertainment'), ArtistID (2, 5, 1) | Concerts : ConcertID (3, 5, 1), Date ('2021-03-05', '2021-02-20', '2021-01-15'), Venue ('Sydney Opera House', 'O2 Arena', 'Madison Square Garden'), City ('Brooklyn', 'New York', 'Sydney'), Country ('USA', 'USA', 'UK'), HeadlinerID (2, 3, 4), OpeningActID () | Tickets : TicketID (4, 1, 2), Quantity (5000, 4000, 3000), Price (70, 60, 100), ConcertID (5, 1, 3)",
        "ambiguous_queries": [
            "SELECT artistname, AlbumName, Year, Venue FROM Albums JOIN Artists on Albums.ArtistID = Artists.ArtistID JOIN Concerts ON Concerts.HeadlinerID = Artists.ArtistID;",
            "SELECT artistname, AlbumName, Month, Venue FROM Albums JOIN Artists on Albums.ArtistID = Artists.ArtistID JOIN Concerts ON Concerts.HeadlinerID = Artists.ArtistID;",
            "SELECT artistname, AlbumName, Year, Month, Venue FROM Albums JOIN Artists on Albums.ArtistID = Artists.ArtistID JOIN Concerts ON Concerts.HeadlinerID = Artists.ArtistID;"
        ],
        "gold_ambiguity": {
            "match": "{\"release timeframe\": [{\"Albums\": [\"Year\"]}, {\"Albums\": [\"Month\"]}, {\"Albums\": [\"Year\", \"Month\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"release timeframe\" refers to the schema \"Albums\".\"Month\"",
        "clear_ambiguity": "{\"release timeframe\": {\"Albums\": [\"Month\"]}}",
        "gold_query": "SELECT artistname, AlbumName, Month, Venue FROM Albums JOIN Artists on Albums.ArtistID = Artists.ArtistID JOIN Concerts ON Concerts.HeadlinerID = Artists.ArtistID;"
    },
    {
        "index": 848,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2cols_capacity/vague_2cols_capacity.sqlite",
        "question": "show me the capacity of each stadium",
        "schema_without_content": "Stadiums : ID, Seating_Capacity, Maximum_Occupancy, Name, Location, Year_Built, Type_of_Stadium",
        "schema_with_content": "Stadiums : ID (1, 2, 3), Seating_Capacity (70000, 50000, 65000), Maximum_Occupancy (80000, 75000, 60000), Name ('Etihad Stadium', 'Wembley Stadium', 'Old Trafford'), Location ('Manchester', 'London', 'Manchester'), Year_Built (1910, 2003, 2003), Type_of_Stadium ('Football', 'Football', 'Football')",
        "ambiguous_queries": [
            "select name, Seating_Capacity from stadiums",
            "select name, Maximum_Occupancy from stadiums",
            "select name, Seating_Capacity, Maximum_Occupancy from stadiums"
        ],
        "gold_ambiguity": {
            "match": "{\"capacity\": [{\"Stadiums\": [\"Seating_Capacity\", \"Maximum_Occupancy\"]}, {\"Stadiums\": [\"Seating_Capacity\"]}, {\"Stadiums\": [\"Maximum_Occupancy\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"capacity\" refers to the schema \"stadiums\".\"Seating_Capacity\"",
        "clear_ambiguity": "{\"capacity\": {\"Stadiums\": [\"Seating_Capacity\"]}}",
        "gold_query": "select name, Seating_Capacity from stadiums"
    },
    {
        "index": 849,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
        "question": "Which loans met the approval status and what were the requirements",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, DateOfBirth, EmailAddress | Accounts : AccountNumber, Balance, InterestRate, OpenDate, Status, CustomerID | Loans : LoanID, Amount, Term, Rate, ApprovalDate, Status, CustomerID | EligibilityAndDocuments : ApplicationID, Eligibility_Criteria, Documentation_Requirements, Business_Loan_Application, LoanID | Transactions : TransactionID, Description, Type, Amount, Timestamp, AccountNumber | Employees : EmployeeID, FirstName, LastName, HireDate, Role, Salary, BranchID | Branches : BranchID, Name, Address, PhoneNumber, ManagerID",
        "schema_with_content": "Customers : CustomerID (2, 1), FirstName ('Jane Smith', 'John Doe'), LastName ('Doe', 'Smith'), DateOfBirth ('1998-03-27', '2000-01-01'), EmailAddress ('janesmith@email.com', 'johndoe@email.com') | Accounts : AccountNumber (2, 1), Balance (2000.0, 1000.0), InterestRate ('2.5%', '1.5%'), OpenDate ('2021-06-01', '2021-07-01'), Status ('Active', 'Inactive'), CustomerID (2, 1) | Loans : LoanID (1, 2), Amount (50000.0, 40000.0), Term (24, 36), Rate ('5.5%', '4.0%'), ApprovalDate ('2021-06-10', '2021-07-05'), Status ('Pending', 'Approved'), CustomerID (1, 2) | EligibilityAndDocuments : ApplicationID (2, 1), Eligibility_Criteria ('Excellent credit history.', 'Good credit history.'), Documentation_Requirements ('Bank statements, pay stubs.', 'Proof of income, tax returns.'), Business_Loan_Application (0, 1), LoanID (2, 1) | Transactions : TransactionID (2, 1), Description ('Utility payment', 'Salary deposit'), Type ('Debit', 'Credit'), Amount (-200.0, 3000.0), Timestamp ('2021-06-20', '2021-06-15'), AccountNumber (1, 1) | Employees : EmployeeID (2, 1), FirstName ('Michael Brown', 'Alice Johnson'), LastName ('Johnson', 'Brown'), HireDate ('2021-01-15', '2021-01-01'), Role ('Branch manager', 'Teller'), Salary (50000.0, 40000.0), BranchID (1, 1) | Branches : BranchID (2, 1), Name ('Main Street Branch', 'Southside Branch'), Address ('1 Main St, Anytown', '123 South Rd, Anycity'), PhoneNumber ('555-123-4567', '555-987-6543'), ManagerID (1)",
        "ambiguous_queries": [
            "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'",
            "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'",
            "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
        ],
        "gold_ambiguity": {
            "match": "{\"requirements\": [{\"EligibilityAndDocuments\": [\"Eligibility_Criteria\"]}, {\"EligibilityAndDocuments\": [\"Documentation_Requirements\"]}, {\"EligibilityAndDocuments\": [\"Eligibility_Criteria\", \"Documentation_Requirements\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"requirements\" refers to the schema \"EligibilityAndDocuments\".\"Eligibility_Criteria\"",
        "clear_ambiguity": "{\"requirements\": {\"EligibilityAndDocuments\": [\"Eligibility_Criteria\"]}}",
        "gold_query": "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
    },
    {
        "index": 850,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_timing/vague_2cols_timing.sqlite",
        "question": "When were the assignments with the best 2 grades submitted and what was the timing for these assignments?",
        "schema_without_content": "Students : id, first_name, last_name, email | Courses : course_id, course_name, instructor_name | Enrollments : enrollment_id, student_id, course_id | Assignments : assignment_id, date, time, description, grade | Submissions : submission_id, student_id, assignment_id, file_path, score, submitted_time | Grades : grade_id, student_id, course_id, final_grade, semester",
        "schema_with_content": "Students : id (2, 5, 1), first_name ('John', 'Jane', 'Emma'), last_name ('White', 'Doe', 'Green'), email ('alice.brown@example.com', 'jane.smith@example.com', 'michael.green@example.com') | Courses : course_id (5, 4, 1), course_name ('World History', 'Calculus I', 'English Literature'), instructor_name ('Professor Brown', 'Dr. Smith', 'Dr. Doe') | Enrollments : enrollment_id (5, 3, 2), student_id (4, 5, 3), course_id (2, 3, 5) | Assignments : assignment_id (4, 1, 2), date ('2023-02-08', '2023-02-22', '2023-03-28'), time ('2:00 PM', '2:00 PM', '3:00 PM'), description ('Write a paper on computer science history', 'Present biology lab report', 'Read and analyze two novels'), grade (9.5, 8.0, 9.0) | Submissions : submission_id (5, 1, 3), student_id (1, 4, 5), assignment_id (1, 4, 3), file_path ('/home/user/submission3.pdf', '/home/user/submission5.txt', '/home/user/submission4.pptx'), score (9.7, 8.2, 8.8), submitted_time ('2024-02-19 14:44:34', '2024-02-19 14:44:34', '2024-02-19 14:44:34') | Grades : grade_id (1, 4, 3), student_id (1, 2, 4), course_id (1, 3, 2), final_grade (7.9, 9.7, 8.8), semester ('Fall 2022', 'Winter 2023', 'Spring 2023')",
        "ambiguous_queries": [
            "SELECT date, submitted_time FROM Assignments JOIN Submissions ON Submissions.assignment_id = Assignments.assignment_id ORDER BY grade DESC LIMIT 2",
            "SELECT time, submitted_time FROM Assignments JOIN Submissions ON Submissions.assignment_id = Assignments.assignment_id ORDER BY grade DESC LIMIT 2",
            "SELECT date, time, submitted_time FROM Assignments JOIN Submissions ON Submissions.assignment_id = Assignments.assignment_id ORDER BY grade DESC LIMIT 2"
        ],
        "gold_ambiguity": {
            "match": "{\"When\": [{\"Assignments\": [\"date\"]}, {\"Assignments\": [\"time\"]}, {\"Assignments\": [\"date\", \"time\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"When\" refers to the schema \"Assignments\".\"date\" and \"Assignments\".\"time\"",
        "clear_ambiguity": "{\"When\": {\"Assignments\": [\"date\", \"time\"]}}",
        "gold_query": "SELECT date, time, submitted_time FROM Assignments JOIN Submissions ON Submissions.assignment_id = Assignments.assignment_id ORDER BY grade DESC LIMIT 2"
    },
    {
        "index": 851,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_location2/vague_2cols_location2.sqlite",
        "question": "Where is Human Biology studied?",
        "schema_without_content": "Students : StudentID, FirstName, LastName | Departments : DepartmentID, DepartmentName | Enrollments : EnrollmentID, CourseID, StudentID | Courses : CourseID, CourseTitle, RoomNumber, Building, StartTime, EndTime | Buildings : BuildingID, Name, Address | Rooms : RoomID, BuildingID, Capacity",
        "schema_with_content": "Students : StudentID (2, 1, 3), FirstName ('Michael', 'Alice', 'John'), LastName ('White', 'Smith', 'Green') | Departments : DepartmentID (2, 3, 1), DepartmentName ('Mathematics', 'Biology', 'Physics') | Enrollments : EnrollmentID (), CourseID (), StudentID () | Courses : CourseID (2, 4, 3), CourseTitle ('General Physics I', 'Human Biology', 'World History'), RoomNumber (501, 301, 201), Building ('Health Sciences', 'Science', 'Liberal Arts'), StartTime ('9AM', '2PM', '10AM'), EndTime ('5PM', '12PM', '1PM') | Buildings : BuildingID (4, 2, 3), Name ('Liberal Arts Building', 'Science Building', 'Health Sciences Building'), Address ('1 University Drive', '4 University Drive', '3 University Drive') | Rooms : RoomID (501, 401, 201), BuildingID (2, 1, 5), Capacity (100, 200, 150)",
        "ambiguous_queries": [
            "SELECT Building FROM Courses WHERE CourseTitle = 'Human Biology'",
            "SELECT RoomNumber FROM Courses WHERE CourseTitle = 'Human Biology'",
            "SELECT Building, RoomNumber FROM Courses WHERE CourseTitle = 'Human Biology'"
        ],
        "gold_ambiguity": {
            "match": "{\"Where\": [{\"Courses\": [\"Building\"]}, {\"Courses\": [\"RoomNumber\"]}, {\"Courses\": [\"Building\", \"RoomNumber\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Where\" refers to the schema \"Courses\".\"Building\"",
        "clear_ambiguity": "{\"Where\": {\"Courses\": [\"Building\"]}}",
        "gold_query": "SELECT Building FROM Courses WHERE CourseTitle = 'Human Biology'"
    },
    {
        "index": 852,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_production2/vague_2tabs_production2.sqlite",
        "question": "Who directed plays with ratings above 8.5?",
        "schema_without_content": "Theater_Company : id, name, address | Producer : id, name, email | Stage_Play : id, title, description, theater_company_id, producer_id | Actor : id, first_name, last_name | Play_Actor : play_id, actor_id, character_played | Review : id, rating, reviewer_email, stage_play_id",
        "schema_with_content": "Theater_Company : id (1, 2), name ('The Royal Theatre', 'Drama House'), address ('123 Main St', '456 Broadway') | Producer : id (1, 2), name ('John Doe', 'Jane Smith'), email ('johndoe@gmail.com', 'janesmith@yahoo.com') | Stage_Play : id (2, 1), title ('Hamlet', 'Othello'), description ('Another great work from Shakespeare.', 'A classic tragedy by William Shakespeare.'), theater_company_id (1, 1), producer_id (1, 1) | Actor : id (2, 1), first_name ('Tom', 'Matthew'), last_name ('McConaughey', 'Cruise') | Play_Actor : play_id (1, 2, 1), actor_id (2, 1, 1), character_played ('Iago', 'Othello', 'Laertes') | Review : id (2, 1), rating (8, 9), reviewer_email ('reviews@hotmail.com', 'reviews@outlook.com'), stage_play_id (2, 1)",
        "ambiguous_queries": [
            "SELECT name FROM Theater_Company JOIN Stage_Play ON Stage_Play.theater_company_id = Theater_Company.id JOIN Review ON Review.stage_play_id = Stage_Play.id WHERE rating > 8.5;",
            "SELECT name FROM Producer JOIN Stage_Play ON Stage_Play.Producer_id = Producer.id JOIN Review ON Review.stage_play_id = Stage_Play.id WHERE rating > 8.5;",
            "SELECT Producer.name, Theater_Company.name FROM Theater_Company JOIN Stage_Play ON Stage_Play.theater_company_id = Theater_Company.id JOIN Review ON Review.stage_play_id = Stage_Play.id JOIN Producer ON Stage_Play.Producer_id = Producer.id WHERE rating > 8.5;"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Producer\": [\"name\"]}, {\"Theater_Company\": [\"name\"]}, {\"Producer\": [\"name\"], \"Theater_Company\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Theater_Company\".\"name\"",
        "clear_ambiguity": "{\"Who\": {\"Theater_Company\": [\"name\"]}}",
        "gold_query": "SELECT Producer.name, Theater_Company.name FROM Theater_Company JOIN Stage_Play ON Stage_Play.theater_company_id = Theater_Company.id JOIN Review ON Review.stage_play_id = Stage_Play.id JOIN Producer ON Stage_Play.Producer_id = Producer.id WHERE rating > 8.5;"
    },
    {
        "index": 853,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_length/vague_2cols_length.sqlite",
        "question": "What are the titles, durations and release years of all comedy shows?",
        "schema_without_content": "Actor : actor_id, first_name, last_name, birthdate | Actress : actress_id, first_name, last_name, birthdate | Show : show_id, title, genre, Number_of_seasons, Number_of_episodes, release_year | Director : director_id, first_name, last_name, birthdate | Producer : producer_id, first_name, last_name, birthdate | Genre : genre_id, genre_name",
        "schema_with_content": "Actor : actor_id (1, 5, 2), first_name ('Emily', 'Robert', 'Michael'), last_name ('Brown', 'Doe', 'Black'), birthdate ('1998-07-30', '1995-03-25', '1991-09-09') | Actress : actress_id (3, 2, 1), first_name ('Eva', 'Betty', 'Denise'), last_name ('Yellow', 'Red', 'Purple'), birthdate ('1985-02-03', '1990-05-15', '1981-11-13') | Show : show_id (5, 2, 3), title ('The Big Bang Theory', 'Game of Thrones', 'Breaking Bad'), genre ('Fantasy Drama', 'Romantic Comedy', 'Comedy'), Number_of_seasons (5, 12, 8), Number_of_episodes (279, 60, 62), release_year (1994, 2016, 2007) | Director : director_id (2, 5, 3), first_name ('David', 'Steven', 'Martin'), last_name ('Gray', 'Tarantino', 'Nolan'), birthdate ('1968-06-10', '1942-11-17', '1963-03-27') | Producer : producer_id (5, 4, 3), first_name ('James', 'Kevin', 'Bryan'), last_name ('Feige', 'Cranston', 'Lee'), birthdate ('1973-06-19', '1961-08-03', '1950-01-15') | Genre : genre_id (4, 1, 5), genre_name ('Adventure', 'Drama', 'Action')",
        "ambiguous_queries": [
            "SELECT title, Number_of_seasons, release_year FROM Show WHERE genre = 'Comedy';",
            "SELECT title, Number_of_episodes, release_year FROM Show WHERE genre = 'Comedy';",
            "SELECT title, Number_of_seasons, Number_of_episodes, release_year FROM Show WHERE genre = 'Comedy';"
        ],
        "gold_ambiguity": {
            "match": "{\"durations\": [{\"Show\": [\"Number_of_seasons\"]}, {\"Show\": [\"Number_of_episodes\"]}, {\"Show\": [\"Number_of_seasons\", \"Number_of_episodes\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"durations\" refers to the schema \"Show\".\"Number_of_seasons\"",
        "clear_ambiguity": "{\"durations\": {\"Show\": [\"Number_of_seasons\"]}}",
        "gold_query": "SELECT title, Number_of_seasons, release_year FROM Show WHERE genre = 'Comedy';"
    },
    {
        "index": 854,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_fee1/vague_2cols_fee1.sqlite",
        "question": "List all customers with their account numbers and loan rate of interest with account fees.",
        "schema_without_content": "Customers : CustomerID, DateOfBirth, fullname | Accounts : AccountNumber, CustomerID, AccountType, OpenDate | Transactions : TransactionID, AccountNumber, Amount, TransactionDate | Fees : FeeID, AccountNumber, TransactionFee, MaintenanceFee, EffectiveFrom, EffectiveTo | Overdrafts : OverdraftID, AccountNumber, LimitAmount, InterestRate, ApprovalDate | Loans : LoanID, AccountNumber, PrincipalAmount, RateOfInterest, TenureMonths, StartDate, EndDate, RepaymentMethod",
        "schema_with_content": "Customers : CustomerID (1, 2), DateOfBirth ('1980-06-15', '1973-08-23'), fullname ('John Doe', 'Jane Smith') | Accounts : AccountNumber (1002, 1001), CustomerID (1, 1), AccountType ('Savings', 'Checking'), OpenDate ('2021-06-01', '2021-06-01') | Transactions : TransactionID (2, 1), AccountNumber (1001, 1001), Amount (150, -200), TransactionDate ('2021-06-01 09:00:00', '2021-06-01 08:00:00') | Fees : FeeID (1001, 1002), AccountNumber (1001, 1001), TransactionFee (2.5, 2), MaintenanceFee (5, 5), EffectiveFrom ('2022-06-01', '2021-06-01'), EffectiveTo ('2022-06-01', '2023-06-01') | Overdrafts : OverdraftID (1001, 1002), AccountNumber (1001, 1001), LimitAmount (800, 500), InterestRate (12, 10), ApprovalDate ('2021-06-01', '2021-06-01') | Loans : LoanID (1001, 1002), AccountNumber (1001, 1001), PrincipalAmount (800, 1000), RateOfInterest (7, 8), TenureMonths (12, 18), StartDate ('2021-06-01', '2021-06-01'), EndDate ('2023-06-01', '2023-06-01'), RepaymentMethod ('Weekly repayments', 'Equal monthly installments')",
        "ambiguous_queries": [
            "SELECT Accounts.AccountNumber, Customers.fullName, Loans.RateOfInterest, Fees.TransactionFee FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Loans ON Loans.AccountNumber = Accounts.AccountNumber JOIN Fees ON Fees.AccountNumber = Accounts.AccountNumber",
            "SELECT Accounts.AccountNumber, Customers.fullName, Loans.RateOfInterest, Fees.MaintenanceFee FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Loans ON Loans.AccountNumber = Accounts.AccountNumber JOIN Fees ON Fees.AccountNumber = Accounts.AccountNumber",
            "SELECT Accounts.AccountNumber, Customers.fullName, Loans.RateOfInterest, Fees.TransactionFee, Fees.MaintenanceFee FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Loans ON Loans.AccountNumber = Accounts.AccountNumber JOIN Fees ON Fees.AccountNumber = Accounts.AccountNumber"
        ],
        "gold_ambiguity": {
            "match": "{\"fees\": [{\"Fees\": [\"TransactionFee\"]}, {\"Fees\": [\"MaintenanceFee\"]}, {\"Fees\": [\"TransactionFee\", \"MaintenanceFee\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"fees\" refers to the schema \"Fees\".\"TransactionFee\" and \"Fees\".\"MaintenanceFee\"",
        "clear_ambiguity": "{\"fees\": {\"Fees\": [\"TransactionFee\", \"MaintenanceFee\"]}}",
        "gold_query": "SELECT Accounts.AccountNumber, Customers.fullName, Loans.RateOfInterest, Fees.TransactionFee, Fees.MaintenanceFee FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Loans ON Loans.AccountNumber = Accounts.AccountNumber JOIN Fees ON Fees.AccountNumber = Accounts.AccountNumber"
    },
    {
        "index": 855,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2tabs_composer/vague_2tabs_composer.sqlite",
        "question": "Who wrote the music for the music festival?",
        "schema_without_content": "Musician : id, name, birth_date | Band : id, name, genre | Soundtrack : id, title, release_date, band_id, musician_id | Song : id, title, duration, soundtrack_id | Performance : id, date, location, song_id | Fan : id, name, email",
        "schema_with_content": "Musician : id (2, 4, 3), name ('John Doe', 'Emily Davis', 'Michael Johnson'), birth_date ('1978-05-10', '1992-11-04', '1990-07-21') | Band : id (4, 5, 2), name ('Classic Melodies', 'Blues Brothers', \"Rockin' Vibes\"), genre ('Blues', 'Rock', 'Classical') | Soundtrack : id (4, 1, 2), title ('Blues Night', 'Orchestral Showcase', 'Music Festival'), release_date ('2022-10-05', '2022-09-01', '2022-06-25'), band_id (3, 5, 2), musician_id (4, 1, 5) | Song : id (2, 1, 4), title ('Symphony In C', 'Night Rider', 'Blue Groove'), duration ('3:45', '8:00', '4:00'), soundtrack_id (5, 1, 2) | Performance : id (4, 1, 3), date ('2022-07-10', '2022-06-20', '2022-10-03'), location ('Downtown Plaza', 'Amphitheater', 'Concert Hall'), song_id (5, 4, 2) | Fan : id (5, 1, 2), name ('Bob Smith', 'Alice Cooper', 'Elizabeth Thompson'), email ('david@example.com', 'alice@example.com', 'elizabeth@example.com')",
        "ambiguous_queries": [
            "SELECT Musician.name FROM Soundtrack JOIN Musician on Soundtrack.Musician_id=Musician.id WHERE Soundtrack.title= 'Music Festival'",
            "SELECT Band.name FROM Soundtrack JOIN Band on Soundtrack.Band_id=Band.id WHERE Soundtrack.title= 'Music Festival'",
            "SELECT Band.name, Musician.name FROM Soundtrack JOIN Musician on Soundtrack.id=Musician.id JOIN Band on Soundtrack.Band_id=Band.id WHERE Soundtrack.title= 'Music Festival'"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Band\": [\"name\"]}, {\"Musician\": [\"name\"]}, {\"Band\": [\"name\"], \"Musician\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Musician\".\"name\"",
        "clear_ambiguity": "{\"Who\": {\"Musician\": [\"name\"]}}",
        "gold_query": "SELECT Band.name, Musician.name FROM Soundtrack JOIN Musician on Soundtrack.id=Musician.id JOIN Band on Soundtrack.Band_id=Band.id WHERE Soundtrack.title= 'Music Festival'"
    },
    {
        "index": 856,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
        "question": "Where does the oldest immigrant come from?",
        "schema_without_content": "Countries : id, country_name | Regions : region_id, region_name | Immigrants : immigrant_id, country_of_origin, region_of_origin, age, gender | Occupations : occupation_id, occupation_title | Education_Levels : education_level_id, level_description | Employment : employment_id, immigrant_id, occupation_id, education_level_id, salary",
        "schema_with_content": "Countries : id (5, 1, 4), country_name ('UK', 'Canada', 'Mexico') | Regions : region_id (5, 4, 1), region_name ('Southwest', 'West', 'East') | Immigrants : immigrant_id (5, 3, 4), country_of_origin (5, 4, 3), region_of_origin (3, 5, 2), age (32, 29, 28), gender ('M', 'F', 'F') | Occupations : occupation_id (5, 4, 2), occupation_title ('Teacher', 'Software Engineer', 'Doctor') | Education_Levels : education_level_id (5, 2, 1), level_description ('Associate Degree', \"Bachelor's Degree\", 'High School Diploma') | Employment : employment_id (1, 4, 3), immigrant_id (4, 2, 3), occupation_id (4, 2, 5), education_level_id (1, 3, 4), salary (60000.0, 50000.0, 80000.0)",
        "ambiguous_queries": [
            "SELECT country_name FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id ORDER BY age ASC LIMIT 1",
            "SELECT region_name FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id ORDER BY age ASC LIMIT 1",
            "SELECT country_name, region_name FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id ORDER BY age ASC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"Where\": [{\"Immigrants\": [\"country_name\"]}, {\"Immigrants\": [\"region_name\"]}, {\"Immigrants\": [\"country_name\", \"region_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Where\" refers to the schema \"Immigrants\".\"region_name\"",
        "clear_ambiguity": "{\"Where\": {\"Immigrants\": [\"region_name\"]}}",
        "gold_query": "SELECT region_name FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id ORDER BY age ASC LIMIT 1"
    },
    {
        "index": 857,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
        "question": "What's the type, name, genre and premiere date of the content?",
        "schema_without_content": "Movies : id, title, genre, director, runtime, release_date | Series : id, title, genre, creator, episodeCount, premiereDate | Users : id, username, password, email, subscriptionType | Reviews : id, userId, contentId, rating, reviewText | Content : id, type, title, genre, creator, numEpisodesOrDuration, premiereMonth, premiereYear, season | Creators : id, name, birthYear",
        "schema_with_content": "Movies : id (1, 2), title ('The Shawshank Redemption', 'The Godfather'), genre ('Drama', 'Crime'), director ('Frank Darabont', 'Francis Ford Coppola'), runtime (175, 142), release_date ('1994-09-23', '1972-03-24') | Series : id (2, 1), title ('Breaking Bad', 'Game of Thrones'), genre ('Crime Drama', 'Fantasy'), creator ('Vince Gilligan', 'David Benioff and D.B. Weiss'), episodeCount (60, 62), premiereDate ('2011-04-17', '2008-01-20') | Users : id (1, 2), username ('user2', 'user1'), password ('password1', 'password2'), email ('user1@example.com', 'user2@example.com'), subscriptionType ('Standard', 'Premium') | Reviews : id (2, 1), userId (2, 1), contentId (1, 2), rating (5, 4), reviewText ('Awesome series with amazing characters.', 'Great movie with a powerful story.') | Content : id (2, 1), type ('Film', 'TV Series'), title ('Inception', 'Stranger Things'), genre ('Science Fiction', 'Action, Adventure, Sci-Fi'), creator ('The Duffer Brothers', 'Christopher Nolan'), numEpisodesOrDuration (8, 128), premiereMonth (7, 7), premiereYear (2010, 2016), season (1) | Creators : id (2, 1), name ('Quentin Tarantino', 'James Cameron'), birthYear (1963, 1954)",
        "ambiguous_queries": [
            "SELECT type, title, genre, premiereMonth FROM Content",
            "SELECT type, title, genre, premiereYear FROM Content",
            "SELECT type, title, genre, premiereMonth, premiereYear FROM Content"
        ],
        "gold_ambiguity": {
            "match": "{\"premiere date\": [{\"Content\": [\"premiereMonth\"]}, {\"Content\": [\"premiereYear\"]}, {\"Content\": [\"premiereMonth\", \"premiereYear\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"premiere date\" refers to the schema \"Content\".\"premiereMonth\" and \"Content\".\"premiereYear\"",
        "clear_ambiguity": "{\"premiere date\": {\"Content\": [\"premiereMonth\", \"premiereYear\"]}}",
        "gold_query": "SELECT type, title, genre, premiereMonth, premiereYear FROM Content"
    },
    {
        "index": 858,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_course_provider/vague_2cols_course_provider.sqlite",
        "question": "Show me course providers in alphabetical order",
        "schema_without_content": "Students : StudentID, FirstName, LastName | Platforms : PlatformID, PlatformName, University | Departments : DepartmentID, DepartmentName, Description | EnrolledStudents : EnrollmentID, StudentID, CourseID | Courses : CourseID, Title, DepartmentID, Semester, Year | Instructors : InstructorID, Name, Email",
        "schema_with_content": "Students : StudentID (2, 4, 3), FirstName ('John', 'Emma', 'Jane'), LastName ('Doe', 'Smith', 'Wilson') | Platforms : PlatformID (3, 1, 5), PlatformName ('Blackboard', 'Schoology', 'Canvas'), University ('GHI School', 'JKL Academy', 'DEF Institute') | Departments : DepartmentID (3, 4, 1), DepartmentName ('Biology', 'Mathematics', 'English'), Description ('This department offers courses in computer science.', 'The mathematics department provides a variety of math courses.', 'We offer a comprehensive curriculum in biology at all levels.') | EnrolledStudents : EnrollmentID (5, 1, 2), StudentID (3, 5, 4), CourseID (4, 5, 2) | Courses : CourseID (1, 2, 4), Title ('Calculus I', 'Composition and Rhetoric', 'Introduction to Computer Science'), DepartmentID (4, 2, 1), Semester ('Fall', 'Spring', 'Spring'), Year (2020, 2020, 2020) | Instructors : InstructorID (2, 1, 5), Name ('Assoc Prof Michael Brown', 'Professor Jane Smith', 'Dr. John Doe'), Email ('michaelbrown@definstitute.edu', 'johndoe@xyzuniversity.edu', 'chrisjackson@jkllacademy.edu')",
        "ambiguous_queries": [
            "SELECT PlatformName FROM Platforms ORDER BY PlatformName ASC",
            "SELECT University FROM Platforms ORDER BY University ASC",
            "SELECT PlatformName, University FROM Platforms ORDER BY PlatformName, University ASC"
        ],
        "gold_ambiguity": {
            "match": "{\"providers\": [{\"Platforms\": [\"PlatformName\"]}, {\"Platforms\": [\"University\"]}, {\"Platforms\": [\"PlatformName\", \"University\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"providers\" refers to the schema \"Platforms\".\"PlatformName\"",
        "clear_ambiguity": "{\"providers\": {\"Platforms\": [\"PlatformName\"]}}",
        "gold_query": "SELECT PlatformName FROM Platforms ORDER BY PlatformName ASC"
    },
    {
        "index": 859,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_technology/vague_2tabs_technology.sqlite",
        "question": "Show me the technology used by the Tech Today online platform",
        "schema_without_content": "Author : id, name, email | Category : id, name | Article : id, title, content, author_id, category_id | Content_Management_System : id, system_name, description | Web_Framework : id, framework_name, description | Online_News_Platform : id, platform_name, url, cms_id, web_framework_id",
        "schema_with_content": "Author : id (4, 3, 1), name ('Emily Davis', 'Michael Johnson', 'Jane Smith'), email ('john.doe@example.com', 'michael.johnson@example.com', 'emily.davis@example.com') | Category : id (3, 1, 4), name ('Politics', 'Health', 'Entertainment') | Article : id (4, 3, 1), title ('Online Learning Growth', 'AI Advancements', 'New Political Laws'), content ('Discussing a major breakthrough in vaccine development.', 'Coverage of an upcoming blockbuster movie release.', 'An article discussing new political laws.'), author_id (1, 2, 3), category_id (4, 2, 3) | Content_Management_System : id (3, 1, 2), system_name ('Typo3', 'WordPress', 'Drupal'), description ('A powerful open-source CMS known for its flexibility and security features.', 'A user-friendly CMS with numerous extensions and templates.', 'The most popular CMS for creating websites.') | Web_Framework : id (2, 3, 1), framework_name ('React', 'Vue.js', 'jQuery'), description ('A lightweight JavaScript framework for structuring client-side applications.', 'A fast, small, and feature-rich JavaScript library.', 'A progressive JavaScript framework for building user interfaces.') | Online_News_Platform : id (5, 1, 4), platform_name ('Edu World', 'Fun Times', 'Health Insider'), url ('https://eduworld.info', 'https://www.thedailynews.com', 'https://techtoday.net'), cms_id (4, 2, 3), web_framework_id (5, 2, 3)",
        "ambiguous_queries": [
            "Select system_name from Content_Management_System join online_news_platform on online_news_platform.cms_id = Content_Management_System.id where platform_name = 'Tech Today'",
            "Select framework_name from Web_Framework join online_news_platform on online_news_platform.web_framework_id = Web_Framework.id where platform_name = 'Tech Today'",
            "Select system_name, framework_name from Content_Management_System join online_news_platform on online_news_platform.cms_id = Content_Management_System.id join Web_Framework on online_news_platform.web_framework_id = Web_Framework.id where platform_name = 'Tech Today'"
        ],
        "gold_ambiguity": {
            "match": "{\"technology\": [{\"Content_Management_System\": [\"system_name\"]}, {\"Content_Management_System\": [\"framework_name\"]}, {\"Web_Framework\": [\"framework_name\"]}, {\"Content_Management_System\": [\"system_name\", \"framework_name\"], \"Web_Framework\": [\"framework_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"technology\" refers to the schema \"Web_Framework\".\"framework_name\"",
        "clear_ambiguity": "{\"technology\": {\"Web_Framework\": [\"framework_name\"]}}",
        "gold_query": "Select system_name, framework_name from Content_Management_System join online_news_platform on online_news_platform.cms_id = Content_Management_System.id join Web_Framework on online_news_platform.web_framework_id = Web_Framework.id where platform_name = 'Tech Today'"
    },
    {
        "index": 860,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2tabs_requirements/vague_2tabs_requirements.sqlite",
        "question": "What were the requirements for obtaining the largest loan",
        "schema_without_content": "Eligibility_Criteria : id, criteria, score | Documentation_Requirements : id, doc_type, requirement | Loans : id, name, amount, term, eligibility_criteria_id, documentation_requirement_id | Business_Loan_Applications : id, loan_name, application_date, annual_revenue, num_employees, loan_id",
        "schema_with_content": "Eligibility_Criteria : id (1, 2, 3), criteria ('Collateral available', 'No bankruptcy history', '2 years of business operation'), score (0.8, 0.9, 1.0) | Documentation_Requirements : id (5, 4, 1), doc_type ('Financial Statements', 'Identity Proof', 'Personal Guarantee'), requirement ('Passport', 'Detailed', 'Latest 2 Years') | Loans : id (4, 2, 1), name ('Equipment Financing Loan', 'Start-up Loan', 'Small Business Expansion Loan'), amount (75000.0, 50000.0, 50000.0), term (12, 36, 12), eligibility_criteria_id (4, 5, 1), documentation_requirement_id (4, 5, 1) | Business_Loan_Applications : id (3, 5, 1), loan_name ('Start-up Loan', 'Equipment Financing Loan', 'Commercial Real Estate Loan'), application_date ('2024-02-19 14:54:05', '2024-02-19 14:54:05', '2024-02-19 14:54:05'), annual_revenue (200000.0, 1000000.0, 120000.0), num_employees (30, 10, 25), loan_id (3, 1, 4)",
        "ambiguous_queries": [
            "SELECT Eligibility_Criteria.criteria, Eligibility_Criteria.score FROM Eligibility_Criteria JOIN Loans ON Loans.eligibility_criteria_id = Eligibility_Criteria.id WHERE amount = (SELECT MAX(amount) FROM Loans)",
            "SELECT Documentation_Requirements.doc_type, Documentation_Requirements.requirement FROM Documentation_Requirements JOIN Loans ON Loans.Documentation_Requirement_id = Documentation_Requirements.id WHERE amount = (SELECT MAX(amount) FROM Loans)",
            "SELECT Eligibility_Criteria.criteria, Eligibility_Criteria.score, Documentation_Requirements.doc_type, Documentation_Requirements.requirement FROM Eligibility_Criteria JOIN Loans ON Loans.eligibility_criteria_id = Eligibility_Criteria.id JOIN Documentation_Requirements ON Loans.Documentation_Requirement_id = Documentation_Requirements.id WHERE amount = (SELECT MAX(amount) FROM Loans)"
        ],
        "gold_ambiguity": {
            "match": "{\"requirements\": [{\"Documentation_Requirements\": [\"doc_type\", \"requirement\"]}, {\"Eligibility_Criteria\": [\"criteria\", \"score\"]}, {\"Documentation_Requirements\": [\"doc_type\", \"requirement\"], \"Eligibility_Criteria\": [\"criteria\", \"score\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"requirements\" refers to the schema \"Eligibility_Criteria\".\"criteria\" and \"Eligibility_Criteria\".\"score\"",
        "clear_ambiguity": "{\"requirements\": {\"Eligibility_Criteria\": [\"criteria\", \"score\"]}}",
        "gold_query": "SELECT Eligibility_Criteria.criteria, Eligibility_Criteria.score FROM Eligibility_Criteria JOIN Loans ON Loans.eligibility_criteria_id = Eligibility_Criteria.id WHERE amount = (SELECT MAX(amount) FROM Loans)"
    },
    {
        "index": 861,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2tabs_location/vague_2tabs_location.sqlite",
        "question": "What is the most populous location and its associated campus?",
        "schema_without_content": "City : id, name, population | State : id, full_name | Campus : id, campus_name, city_id, state_id | Teacher : id, firstName, lastName, email | teachesAt : teacherId, campusId, startDate, endDate | Student : id, firstName, lastName, email | enrolledIn : studentId, campusId, enrollmentStartDate",
        "schema_with_content": "City : id (2, 4, 5), name ('Houston', 'Phoenix', 'New York'), population (2697391, 3960215, 8398748) | State : id (4, 3, 2), full_name ('California', 'New York', 'Illinois') | Campus : id (3, 1, 5), campus_name ('University of Houston', 'Arizona State University', 'University of California Los Angeles'), city_id (2, 1, 3), state_id (3, 1, 5) | Teacher : id (5, 1, 3), firstName ('David', 'Alice', 'Michael'), lastName ('Doe', 'Johnson', 'Brown'), email ('john.doe@example.com', 'jane.smith@example.com', 'michael.brown@example.com') | teachesAt : teacherId (4, 5, 2), campusId (1, 3, 4), startDate ('2021-01-01', '2021-01-01', '2021-01-01'), endDate ('2021-12-31', '2021-12-31', '2021-12-31') | Student : id (4, 5, 1), firstName ('Alexander', 'Isabelle', 'William'), lastName ('Davis', 'Anderson', 'Jackson'), email ('alexander.martinez@example.com', 'olivia.garcia@example.com', 'emily.davis@example.com') | enrolledIn : studentId (2, 5, 3), campusId (5, 1, 4), enrollmentStartDate ('2021-01-01', '2021-01-01', '2021-01-01')",
        "ambiguous_queries": [
            "select L.Name, C.campus_name from City L inner join Campus C on C.city_id = L.id order by L.population LIMIT 1",
            "select L.full_name from State L inner join Campus C on C.state_id = L.id inner join City ct on C.city_id = ct.id order by ct.population LIMIT 1",
            "select S.full_name, L.Name, C.campus_name from City L inner join Campus C on C.city_id = L.id join State S on C.state_id = S.id order by L.population LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"location\": [{\"State\": [\"full_name\"]}, {\"Campus\": [\"campus_name\"], \"City\": [\"Name\"]}, {\"Campus\": [\"campus_name\"], \"City\": [\"Name\"], \"State\": [\"full_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"location\" refers to the schema \"Campus\".\"c\" and \"Campus\".\"a\" and \"Campus\".\"m\" and \"Campus\".\"p\" and \"Campus\".\"u\" and \"Campus\".\"s\" and \"Campus\".\"_\" and \"Campus\".\"n\" and \"Campus\".\"a\" and \"Campus\".\"m\" and \"Campus\".\"e\" and \"City\".\"N\" and \"City\".\"a\" and \"City\".\"m\" and \"City\".\"e\"",
        "clear_ambiguity": "{\"location\": {\"Campus\": \"campus_name\", \"City\": \"Name\"}}",
        "gold_query": "select L.Name, C.campus_name from City L inner join Campus C on C.city_id = L.id order by L.population LIMIT 1"
    },
    {
        "index": 862,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_exam_date/vague_2cols_exam_date.sqlite",
        "question": "What exams did John Doe take and when and what were his scores?",
        "schema_without_content": "Students : StudentID, FirstName, LastName | Addresses : AddressID, StreetAddress, City, State, ZipCode, StudentID | PhoneNumbers : PhoneNumberID, Number, Type, StudentID | EmailAddresses : EmailAddressID, Email, IsPrimary, StudentID | Enrollments : EnrollmentID, CourseID, Semester, Year, Grade, StudentID | ExamScores : ScoreID, Month, Day, ExamDescription, Score, StudentID",
        "schema_with_content": "Students : StudentID (5, 2, 1), FirstName ('Michael', 'Jane', 'David'), LastName ('Brown', 'Johnson', 'Williams') | Addresses : AddressID (5, 3, 4), StreetAddress ('456 Elm St', '101 Pine St', '111 Maple Ave'), City ('Anytown', 'Townville', 'Anytown'), State ('TX', 'NY', 'IL'), ZipCode ('90210', '10001', '07601'), StudentID (3, 5, 4) | PhoneNumbers : PhoneNumberID (4, 1, 2), Number ('(555) 987-6543', '(555) 765-4321', '(555) 123-4567'), Type ('Work', 'Mobile', 'Mobile'), StudentID (4, 2, 3) | EmailAddresses : EmailAddressID (5, 1, 3), Email ('michaeljohnson@example.edu', 'emilywilliams@example.net', 'davidbrown@example.org'), IsPrimary (1, 1, 0), StudentID (1, 1, 3) | Enrollments : EnrollmentID (4, 1, 5), CourseID (5, 4, 2), Semester ('Summer', 'Fall', 'Fall'), Year (2022, 2021, 2022), Grade ('A-', 'Incomplete', 'B+'), StudentID (1, 4, 5) | ExamScores : ScoreID (4, 3, 5), Month (3, 4, 10), Day (20, 10, 15), ExamDescription ('Final Exam', 'Quiz', 'Project'), Score (85, 90, 95), StudentID (1, 5, 2)",
        "ambiguous_queries": [
            "SELECT e.Month, e.ExamDescription, e.Score FROM ExamScores e JOIN Students s ON e.StudentID = s.StudentID AND s.FirstName = 'John' AND s.LastName = 'Doe';",
            "SELECT e.Day, e.ExamDescription, e.Score FROM ExamScores e JOIN Students s ON e.StudentID = s.StudentID AND s.FirstName = 'John' AND s.LastName = 'Doe';",
            "SELECT e.Month, Day, e.ExamDescription, e.Score FROM ExamScores e JOIN Students s ON e.StudentID = s.StudentID AND s.FirstName = 'John' AND s.LastName = 'Doe';"
        ],
        "gold_ambiguity": {
            "match": "{\"when\": [{\"ExamScores\": [\"Month\"]}, {\"ExamScores\": [\"Day\"]}, {\"ExamScores\": [\"Month\", \"Day\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"when\" refers to the schema \"ExamScores\".\"Month\" and \"ExamScores\".\"Day\"",
        "clear_ambiguity": "{\"when\": {\"ExamScores\": [\"Month\", \"Day\"]}}",
        "gold_query": "SELECT e.Month, Day, e.ExamDescription, e.Score FROM ExamScores e JOIN Students s ON e.StudentID = s.StudentID AND s.FirstName = 'John' AND s.LastName = 'Doe';"
    },
    {
        "index": 863,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2tabs_lifecycle/vague_2tabs_lifecycle.sqlite",
        "question": "What is the lifecycle of each project with an end date in 2023?",
        "schema_without_content": "Materials : material_id, name, cost | Projects : project_id, name, start_date, end_date, infrastructure_id | Infrastructure : infrastructure_id, description, service_life_expectancy_id, renewal_schedule_id | Workers : worker_id, first_name, last_name, skill_level | Tasks : task_id, description, assigned_to_worker_id, due_date, completed | Service_Life_Expectancy : service_life_expectancy_id, min_years, max_years | Renewal_Schedule : renewal_schedule_id, frequency",
        "schema_with_content": "Materials : material_id (2, 5, 1), name ('Cement', 'Steel Rebar', 'Bricks'), cost (15.0, 30.0, 20.0) | Projects : project_id (1, 4, 5), name ('Stadium Construction', 'Park Improvement', 'Building Foundation'), start_date ('2023-01-01', '2023-05-01', '2023-03-01'), end_date ('2024-02-28', '2023-09-30', '2023-12-31'), infrastructure_id (3, 5, 2) | Infrastructure : infrastructure_id (3, 1, 4), description ('Retaining Wall', 'Foundation Slab', 'Bridge Abutment'), service_life_expectancy_id (3, 2, 5), renewal_schedule_id (3, 1, 2) | Workers : worker_id (3, 4, 2), first_name ('John', 'Jane', 'David'), last_name ('Williams', 'Johnson', 'Doe'), skill_level (9, 7, 8) | Tasks : task_id (2, 5, 1), description ('Replace steel rebar', 'Paint bridge abutments', 'Install new drainage system'), assigned_to_worker_id (4, 1, 5), due_date ('2023-09-15', '2023-12-15', '2023-11-15'), completed (0, 0, 0) | Service_Life_Expectancy : service_life_expectancy_id (5, 4, 1), min_years (10, 5, 20), max_years (60, 40, 20) | Renewal_Schedule : renewal_schedule_id (2, 3, 1), frequency ('Monthly', 'Yearly', 'Quarterly')",
        "ambiguous_queries": [
            "SELECT name, min_years, max_years FROM Projects AS P LEFT JOIN Infrastructure AS I ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Service_Life_Expectancy AS L ON I.service_life_expectancy_id = L.service_life_expectancy_id WHERE P.end_date BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT name, frequency FROM Projects AS P LEFT JOIN Infrastructure AS I ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Renewal_Schedule AS L ON I.Renewal_Schedule_id = L.Renewal_Schedule_id WHERE P.end_date BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT name, min_years, max_years,frequency FROM Projects AS P LEFT JOIN Infrastructure AS I ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Service_Life_Expectancy AS L ON I.service_life_expectancy_id = L.service_life_expectancy_id LEFT JOIN Renewal_Schedule AS RS ON I.Renewal_Schedule_id = RS.Renewal_Schedule_id WHERE P.end_date BETWEEN '2023-01-01' AND '2023-12-31'"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"lifecycle\": [{\"Renewal_Schedule\": [\"frequency\"]}, {\"Service_Life_Expectancy\": [\"max_years\", \"min_years\"]}, {\"Service_Life_Expectancy\": [\"max_years\", \"min_years\"], \"Renewal_Schedule\": [\"frequency\"]}]}"
        },
        "clarification_context": "\"lifecycle\" refers to the schema \"Service_Life_Expectancy\".\"max_years\" and \"Service_Life_Expectancy\".\"min_years\"",
        "clear_ambiguity": "{\"lifecycle\": {\"Service_Life_Expectancy\": [\"max_years\", \"min_years\"]}}",
        "gold_query": "SELECT name, min_years, max_years FROM Projects AS P LEFT JOIN Infrastructure AS I ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Service_Life_Expectancy AS L ON I.service_life_expectancy_id = L.service_life_expectancy_id WHERE P.end_date BETWEEN '2023-01-01' AND '2023-12-31'"
    },
    {
        "index": 864,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2cols_recording_location/vague_2cols_recording_location.sqlite",
        "question": "Show the ids and recording locations of studios",
        "schema_without_content": "Studio : id, studio_name, address, podcast, genre, rating | SubscriptionPlan : plan_id, plan_name, monthly_price, annual_price, features | ContentLibrary : content_id, title, description, duration, release_date, category | Customer : customer_id, first_name, last_name, email, password, subscription_plan_id | PlayHistory : history_id, customer_id, content_id, play_date",
        "schema_with_content": "Studio : id (2, 1), studio_name ('Studio A', 'Studio B'), address ('123 Main St.', '456 Elm Rd.'), podcast ('Podcast XYZ', 'Podcast ABC'), genre ('Drama', 'Comedy'), rating (4.7, 4.8) | SubscriptionPlan : plan_id (1, 2), plan_name ('Basic Plan', 'Premium Plan'), monthly_price (9.99, 14.99), annual_price (99.0, 149.0), features ('Ad-free experience', 'Access to all shows') | ContentLibrary : content_id (2, 1), title ('TV Show B', 'Movie A'), description ('An exciting crime drama series', 'A thrilling action movie'), duration (120, 480), release_date ('2022-01-01', '2021-10-01'), category ('Action', 'Crime Drama') | Customer : customer_id (2, 1), first_name ('John', 'Jane'), last_name ('Smith', 'Doe'), email ('jane@example.com', 'john@example.com'), password ('password123', 'passwordabc'), subscription_plan_id (2, 1) | PlayHistory : history_id (2, 1), customer_id (2, 1), content_id (1, 2), play_date ('2022-01-03 15:30:00', '2022-01-02 12:00:00')",
        "ambiguous_queries": [
            "SELECT id, studio_name FROM Studio",
            "SELECT id, address FROM Studio",
            "SELECT id, studio_name, address FROM Studio"
        ],
        "gold_ambiguity": {
            "match": "{\"studios\": [{\"Studio\": [\"studio_name\"]}, {\"Studio\": [\"address\"]}, {\"Studio\": [\"studio_name\", \"address\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"studios\" refers to the schema \"Studio\".\"studio_name\" and \"Studio\".\"address\"",
        "clear_ambiguity": "{\"studios\": {\"Studio\": [\"studio_name\", \"address\"]}}",
        "gold_query": "SELECT id, studio_name, address FROM Studio"
    },
    {
        "index": 865,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2tabs_aircraft_family/vague_2tabs_aircraft_family.sqlite",
        "question": "What's the family of the plane that comes from the same country as \"Charles de Gaulle Airport\"?",
        "schema_without_content": "Manufacturer_Name : id, manufacturer_name, country | Model_Name : id, model_name, year_introduced, MAX_PASSENGERS | Plane : id, plane_model_id, manufacturer_id, registration_number, aircraft_type, current_location | Airport : id, airport_code, name, city, country | Runway : id, runway_length, runway_width, airport_id | Flight : id, flight_date, departure_airport_id, arrival_airport_id, plane_id",
        "schema_with_content": "Manufacturer_Name : id (4, 1, 5), manufacturer_name ('Airbus', 'Embraer', 'Comac'), country ('Canada', 'USA', 'France') | Model_Name : id (5, 4, 2), model_name ('737 Max', 'A320neo', 'ERJ-190'), year_introduced (2007, 2016, 2009), MAX_PASSENGERS (100, 90, 85) | Plane : id (5, 1, 4), plane_model_id (3, 4, 5), manufacturer_id (5, 4, 1), registration_number ('N123AB', 'PP-XXX', 'F-HSBN'), aircraft_type ('Regional Passenger', 'Business Jet', 'Passenger'), current_location ('Paris', 'São Paulo', 'Beijing') | Airport : id (1, 4, 2), airport_code ('CDG', 'PVG', 'PEK'), name ('Shanghai Pudong International Airport', 'Capital International Airport', 'Guarulhos–Governador André Franco Montoro International Airport'), city ('Los Angeles', 'Beijing', 'Paris'), country ('Brazil', 'USA', 'France') | Runway : id (1, 5, 2), runway_length (2800.0, 3000.0, 2400.0), runway_width (45.0, 45.0, 45.0), airport_id (5, 4, 1) | Flight : id (5, 1, 4), flight_date ('2022-01-01 16:00:00', '2022-01-01 12:00:00', '2022-01-01 08:00:00'), departure_airport_id (5, 3, 4), arrival_airport_id (5, 1, 4), plane_id (1, 2, 4)",
        "ambiguous_queries": [
            "SELECT Manufacturer_Name.MANUFACTURER_NAME FROM Manufacturer_Name JOIN Plane ON Plane.manufacturer_id = Manufacturer_Name.id JOIN Flight ON Plane.id = Flight.plane_id JOIN Airport ON Flight.departure_airport_id = Airport.id WHERE Airport.name='Charles de Gaulle Airport'",
            "SELECT Model_Name.Model_Name FROM Model_Name JOIN Plane ON Plane.plane_model_id = Model_Name.id JOIN Flight ON Plane.id = Flight.plane_id JOIN Airport ON Flight.departure_airport_id = Airport.id WHERE Airport.name='Charles de Gaulle Airport'",
            "SELECT Manufacturer_Name.MANUFACTURER_NAME, Model_Name.Model_Name FROM Model_Name JOIN Plane ON Plane.plane_model_id = Model_Name.id JOIN Manufacturer_Name ON Plane.manufacturer_id = Manufacturer_Name.id JOIN Flight ON Plane.id = Flight.plane_id JOIN Airport ON Flight.departure_airport_id = Airport.id WHERE Airport.name='Charles de Gaulle Airport'"
        ],
        "gold_ambiguity": {
            "match": "{\"plane\": [{\"Manufacturer_Name\": [\"MANUFACTURER_NAME\"]}, {\"Model_Name\": [\"Model_Name\"]}, {\"Manufacturer_Name\": [\"MANUFACTURER_NAME\"], \"Model_Name\": [\"Model_Name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"plane\" refers to the schema \"Model_Name\".\"Model_Name\"",
        "clear_ambiguity": "{\"plane\": {\"Model_Name\": [\"Model_Name\"]}}",
        "gold_query": "SELECT Manufacturer_Name.MANUFACTURER_NAME, Model_Name.Model_Name FROM Model_Name JOIN Plane ON Plane.plane_model_id = Model_Name.id JOIN Manufacturer_Name ON Plane.manufacturer_id = Manufacturer_Name.id JOIN Flight ON Plane.id = Flight.plane_id JOIN Airport ON Flight.departure_airport_id = Airport.id WHERE Airport.name='Charles de Gaulle Airport'"
    },
    {
        "index": 866,
        "db_id": "Job Postings",
        "ambig_type": "vague",
        "db_file": "vague/Job Postings/vague_2tabs_location/vague_2tabs_location.sqlite",
        "question": "Where's TechCorp's office for interns?",
        "schema_without_content": "Office_Address : id, address, postal_code | City : id, city_name, country | Company : id, company_name, industry | Internship : id, title, description, start_date, end_date, office_address_id, city_id | Department : id, department_name, company_id | Employee : id, first_name, last_name, email, phone_number, hire_date, department_id | Application : id, application_date, internship_id, employee_id, applicant_full_name",
        "schema_with_content": "Office_Address : id (1, 2), address ('456 Elm St', '123 Main St'), postal_code ('60601', '60602') | City : id (2, 1), city_name ('Chicago', 'New York'), country ('USA', 'USA') | Company : id (1, 2), company_name ('HealthCo', 'TechCorp'), industry ('Technology', 'Healthcare') | Internship : id (2, 1), title ('Data Analyst', 'Software Engineer'), description ('Develop and maintain software applications.', 'Analyze data to support business decisions.'), start_date ('2022-09-01', '2022-07-01'), end_date ('2023-08-31', '2023-12-31'), office_address_id (2, 1), city_id (2, 1) | Department : id (2, 1), department_name ('Engineering', 'Marketing'), company_id (1, 1) | Employee : id (1, 2), first_name ('John', 'Jane'), last_name ('Doe', 'Smith'), email ('jane.smith@example.com', 'john.doe@example.com'), phone_number ('555-1234', '555-5678'), hire_date ('2022-01-01', '2022-02-01'), department_id (2, 1) | Application : id (1, 2), application_date ('2024-02-19 12:32:36', '2024-02-19 12:32:36'), internship_id (1, 2), employee_id (1, 2), applicant_full_name ('Charlie Green', 'Alice Brown')",
        "ambiguous_queries": [
            "SELECT Office_Address.address, Office_Address.postal_code FROM Office_Address JOIN Internship ON Office_Address.id = Internship.office_address_id JOIN Application ON Application.internship_id = Internship.id JOIN Employee ON Employee.id = Application.employee_id JOIN Department ON Department.id = Employee.department_id JOIN Company ON Department.company_id= Company.id WHERE Company.company_name = 'TechCorp'",
            "SELECT City.city_name, City.country FROM City JOIN Internship ON City.id = Internship.city_id JOIN Application ON Application.internship_id = Internship.id JOIN Employee ON Employee.id = Application.employee_id JOIN Department ON Department.id = Employee.department_id JOIN Company ON Department.company_id= Company.id WHERE Company.company_name = 'TechCorp'",
            "SELECT City.city_name, City.country, Office_Address.address, Office_Address.postal_code FROM Office_Address JOIN Internship ON Office_Address.id = Internship.office_address_id JOIN Application ON Application.internship_id = Internship.id JOIN Employee ON Employee.id = Application.employee_id JOIN Department ON Department.id = Employee.department_id JOIN Company ON Department.company_id= Company.id JOIN City ON City.id = Internship.city_id WHERE Company.company_name = 'TechCorp'"
        ],
        "gold_ambiguity": {
            "match": "{\"Where's\": [{\"City\": [\"city_name\", \"country\"]}, {\"Office_Address\": [\"address\", \"postal_code\"]}, {\"City\": [\"city_name\", \"country\"], \"Office_Address\": [\"address\", \"postal_code\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Where's\" refers to the schema \"City\".\"city_name\" and \"City\".\"country\" and \"Office_Address\".\"address\" and \"Office_Address\".\"postal_code\"",
        "clear_ambiguity": "{\"Where's\": {\"City\": [\"city_name\", \"country\"], \"Office_Address\": [\"address\", \"postal_code\"]}}",
        "gold_query": "SELECT City.city_name, City.country, Office_Address.address, Office_Address.postal_code FROM Office_Address JOIN Internship ON Office_Address.id = Internship.office_address_id JOIN Application ON Application.internship_id = Internship.id JOIN Employee ON Employee.id = Application.employee_id JOIN Department ON Department.id = Employee.department_id JOIN Company ON Department.company_id= Company.id JOIN City ON City.id = Internship.city_id WHERE Company.company_name = 'TechCorp'"
    },
    {
        "index": 867,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_distribution_channels/vague_2cols_distribution_channels.sqlite",
        "question": "Show a list of distribution channels and movies that they are showing along with the release year.",
        "schema_without_content": "Directors : DirectorID, Name, BirthDate | Producers : ProducerID, Name, ContactNumber | Actors : ActorID, Name, DateOfBirth | Films : FilmID, Title, ReleaseYear, DirectorID, ProducerID | Roles : RoleID, FilmID, ActorID, CharacterName | StreamingDetails : DetailsID, Platforms, Countries, Movies, AvailableSince",
        "schema_with_content": "Directors : DirectorID (4, 3, 1), Name ('Steven Spielberg', 'Christopher Nolan', 'James Cameron'), BirthDate ('1946-12-18', '1942-01-30', '1970-07-30') | Producers : ProducerID (2, 1, 4), Name ('Amy Pascal', 'Harvey Weinstein', 'David Fincher'), ContactNumber (1567890134, 1456789012, 1234567890) | Actors : ActorID (4, 5, 2), Name ('Cate Blanchett', 'Leonardo DiCaprio', 'Scarlett Johansson'), DateOfBirth ('1984-11-22', '1965-04-04', '1974-11-11') | Films : FilmID (4, 3, 2), Title ('Inception', 'Titanic', 'Saving Private Ryan'), ReleaseYear (1997, 2010, 1998), DirectorID (4, 3, 1), ProducerID (4, 1, 6) | Roles : RoleID (2, 4, 1), FilmID (1, 3, 4), ActorID (2, 5, 1), CharacterName ('Captain Andrews', 'Cobb', 'Vincent Vega') | StreamingDetails : DetailsID (2, 5, 1), Platforms ('Netflix', 'Amazon Prime Video', 'Apple TV+'), Countries ('Germany, France', 'Canada, Australia', 'USA, UK'), Movies ('The Departed', 'Inception', 'Titanic'), AvailableSince ('2020-05-01', '2018-02-01', '2021-06-01')",
        "ambiguous_queries": [
            "SELECT StreamingDetails.Platforms, StreamingDetails.Movies, Films.ReleaseYear FROM StreamingDetails JOIN Films ON Films.Title = StreamingDetails.Movies",
            "SELECT StreamingDetails.Countries, StreamingDetails.Movies, Films.ReleaseYear FROM StreamingDetails JOIN Films ON Films.Title = StreamingDetails.Movies",
            "SELECT StreamingDetails.Platforms, Countries, StreamingDetails.Movies, Films.ReleaseYear FROM StreamingDetails JOIN Films ON Films.Title = StreamingDetails.Movies"
        ],
        "gold_ambiguity": {
            "match": "{\"channels\": [{\"StreamingDetails\": [\"Platforms\"]}, {\"StreamingDetails\": [\"Countries\"]}, {\"StreamingDetails\": [\"Platforms\", \"Countries\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"channels\" refers to the schema \"StreamingDetails\".\"Platforms\" and \"StreamingDetails\".\"Countries\"",
        "clear_ambiguity": "{\"channels\": {\"StreamingDetails\": [\"Platforms\", \"Countries\"]}}",
        "gold_query": "SELECT StreamingDetails.Platforms, Countries, StreamingDetails.Movies, Films.ReleaseYear FROM StreamingDetails JOIN Films ON Films.Title = StreamingDetails.Movies"
    },
    {
        "index": 868,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_level_of_prestige/vague_2cols_level_of_prestige.sqlite",
        "question": "what is the prestige level of a particular university",
        "schema_without_content": "Students : id, name, age, major | Universities : id, universityName, admissionRate, ranking, location | Departments : id, departmentName, universityId | Enrollments : studentID, courseID, semester, grade, enrollmentDate | Courses : id, courseCode, courseTitle, creditHours, departmentId",
        "schema_with_content": "Students : id (5, 2, 4), name ('Mike Johnson', 'Emily Davis', 'David Brown'), age (23, 19, 21), major ('Mathematics', 'Computer Science', 'Biology') | Universities : id (1, 3, 5), universityName ('Harvard University', 'Massachusetts Institute of Technology', 'California Institute of Technology'), admissionRate (0.89, 0.53, 0.51), ranking (2, 1, 3), location ('Cambridge', 'Los Angeles', 'Boston') | Departments : id (2, 3, 4), departmentName ('Department of Physics', 'Department of Biology', 'Department of Computer Science'), universityId (2, 4, 5) | Enrollments : studentID (5, 4, 3), courseID (1, 3, 5), semester ('Fall 2021', 'Fall 2022', 'Winter 2023'), grade ('A-', 'B+', 'A'), enrollmentDate ('2022-08-25', '2023-01-10', '2021-08-25') | Courses : id (3, 2, 1), courseCode ('BIOL101', 'CH101', 'PHYS101'), courseTitle ('General Biology', 'General Chemistry', 'Classical Mechanics'), creditHours (4, 4, 3), departmentId (2, 1, 5)",
        "ambiguous_queries": [
            "select universityname, admissionRate from universities",
            "select universityname, ranking from universities",
            "select universityname, admissionRate, ranking from universities"
        ],
        "gold_ambiguity": {
            "match": "{\"prestige level\": [{\"Universities\": [\"admissionRate\", \"ranking\"]}, {\"Universities\": [\"admissionRate\"]}, {\"Universities\": [\"ranking\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"prestige level\" refers to the schema \"universities\".\"admissionRate\"",
        "clear_ambiguity": "{\"prestige level\": {\"Universities\": [\"admissionRate\"]}}",
        "gold_query": "select universityname, admissionRate from universities"
    },
    {
        "index": 869,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
        "question": "Show me the origin of the most recent photo",
        "schema_without_content": "Photojournalists : id, Name, Birthdate | Events : id, Title, Location, Date | Photos : id, FilePath, Caption, TakenOn | Assignments : id, EventId, PhotojournalistId | PublishedPhotos : id, AssignmentId, PhotoId, PublicationDate",
        "schema_with_content": "Photojournalists : id (2, 3, 4), Name ('John Doe', 'Emily Davis', 'Jane Smith'), Birthdate ('1993-01-10', '1991-07-05', '1980-06-23') | Events : id (4, 1, 2), Title ('Election Day', 'Marathon', 'Concert'), Location ('Park', 'City Hall', 'Streets'), Date ('2022-01-01', '2022-04-10', '2022-10-20') | Photos : id (3, 1, 4), FilePath ('/path/to/photo4.jpg', '/path/to/photo2.jpg', '/path/to/photo3.jpg'), Caption ('Crowd enjoying music', 'Voters waiting to vote', 'Musician performing on stage'), TakenOn ('2022-07-15', '2022-11-08', '2022-10-20') | Assignments : id (4, 2, 3), EventId (4, 5, 3), PhotojournalistId (3, 1, 5) | PublishedPhotos : id (4, 1, 3), AssignmentId (4, 5, 1), PhotoId (3, 1, 2), PublicationDate ('2022-11-10', '2022-04-15', '2022-10-25')",
        "ambiguous_queries": [
            "SELECT Photojournalists.Name FROM Assignments JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id ORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1",
            "SELECT Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id ORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1",
            "SELECT Photojournalists.Name , Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID ORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"origin\": [{\"Events\": [\"Title\"]}, {\"Photojournalists\": [\"Name\"]}, {\"Events\": [\"Title\"], \"Photojournalists\": [\"Name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"origin\" refers to the schema \"Events\".\"Title\"",
        "clear_ambiguity": "{\"origin\": {\"Events\": [\"Title\"]}}",
        "gold_query": "SELECT Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id ORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
    },
    {
        "index": 870,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
        "question": "Who produced all the dramas?",
        "schema_without_content": "Actor : id, name, dateOfBirth, gender, role | Stage_Play : id, title, year_premiered, genre, theater_company, producer",
        "schema_with_content": "Actor : id (1, 2), name ('Cate Blanchett', 'Kevin Spacey'), dateOfBirth ('July 26, 1959', 'May 14, 1969'), gender ('Male', 'Female'), role ('Lady Macbeth', 'Richard III') | Stage_Play : id (1, 2), title ('The Glass Menagerie', 'Hamlet'), year_premiered (1990, 1945), genre ('Tragedy', 'Drama'), theater_company ('Broadway Theatre Group', 'The Royal Shakespeare Company'), producer ('Julia Roberts', 'Peter Brook')",
        "ambiguous_queries": [
            "SELECT theater_company FROM `Stage_Play` WHERE genre = 'Drama';",
            "SELECT producer FROM `Stage_Play` WHERE genre = 'Drama';",
            "SELECT theater_company, producer FROM 'Stage_Play' WHERE genre = 'Drama';"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Stage_Play\": [\"theater_company\"]}, {\"Stage_Play\": [\"producer\"]}, {\"Stage_Play\": [\"theater_company\", \"producer\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Stage_Play\".\"producer\"",
        "clear_ambiguity": "{\"Who\": {\"Stage_Play\": [\"producer\"]}}",
        "gold_query": "SELECT producer FROM `Stage_Play` WHERE genre = 'Drama';"
    },
    {
        "index": 871,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_pay_gap/vague_2cols_pay_gap.sqlite",
        "question": "Working in different sectors, what will be the salary and pay gap?",
        "schema_without_content": "People : id, firstName, lastName, dateOfBirth, occupation | SalaryData : personId, salary, hireDate | OccupationalStats : occupation, percentageGap, differenceInSalaries, jobSatisfactionIndex | EducationLevel : educationLevel, avgYearsOfEducation, avgAnnualIncome | LocationData : locationID, city, state, country, numPeople | CityPopulationByDemographics : locationID, ageRange, gender, ethnicity, population",
        "schema_with_content": "People : id (1, 2), firstName ('John', 'Jane'), lastName ('Smith', 'Doe'), dateOfBirth ('1970-06-01', '1983-08-15'), occupation ('Engineering', 'Teaching') | SalaryData : personId (2, 1), salary (60000, 90000), hireDate ('2012-05-01', '2010-01-01') | OccupationalStats : occupation ('Teaching', 'Engineering'), percentageGap (20.0, 10.0), differenceInSalaries (10000, 25000), jobSatisfactionIndex (80, 70) | EducationLevel : educationLevel ('PhD', 'Masters'), avgYearsOfEducation (8.0, 6.0), avgAnnualIncome (90000, 75000) | LocationData : locationID (2, 1), city ('Los Angeles', 'New York'), state ('CA', 'NY'), country ('USA', 'USA'), numPeople (3800000, 8000000) | CityPopulationByDemographics : locationID (1, 1), ageRange ('18-35', '36+'), gender ('Male', 'Female'), ethnicity ('White', 'Black'), population (4000000, 2500000)",
        "ambiguous_queries": [
            "SELECT OccupationalStats.occupation, OccupationalStats.percentageGap, SalaryData.salary FROM OccupationalStats JOIN People ON OccupationalStats.occupation = People. occupation JOIN SalaryData ON SalaryData.personId = People.id",
            "SELECT OccupationalStats.occupation, OccupationalStats.differenceInSalaries, SalaryData.salary FROM OccupationalStats JOIN People ON OccupationalStats.occupation = People. occupation JOIN SalaryData ON SalaryData.personId = People.id",
            "SELECT OccupationalStats.occupation, OccupationalStats.percentageGap, differenceInSalaries, SalaryData.salary FROM OccupationalStats JOIN People ON OccupationalStats.occupation = People. occupation JOIN SalaryData ON SalaryData.personId = People.id"
        ],
        "gold_ambiguity": {
            "match": "{\"pay gap\": [{\"OccupationalStats\": [\"percentageGap\"]}, {\"OccupationalStats\": [\"differenceInSalaries\"]}, {\"OccupationalStats\": [\"percentageGap\", \"differenceInSalaries\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"pay gap\" refers to the schema \"OccupationalStats\".\"differenceInSalaries\"",
        "clear_ambiguity": "{\"pay gap\": {\"OccupationalStats\": [\"differenceInSalaries\"]}}",
        "gold_query": "SELECT OccupationalStats.occupation, OccupationalStats.differenceInSalaries, SalaryData.salary FROM OccupationalStats JOIN People ON OccupationalStats.occupation = People. occupation JOIN SalaryData ON SalaryData.personId = People.id"
    },
    {
        "index": 872,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2tabs_lifecycle/vague_2tabs_lifecycle.sqlite",
        "question": "What is the lifecycle of the stadium construction project?",
        "schema_without_content": "Materials : material_id, name, cost | Projects : project_id, name, start_date, end_date, infrastructure_id | Infrastructure : infrastructure_id, description, service_life_expectancy_id, renewal_schedule_id | Workers : worker_id, first_name, last_name, skill_level | Tasks : task_id, description, assigned_to_worker_id, due_date, completed | Service_Life_Expectancy : service_life_expectancy_id, min_years, max_years | Renewal_Schedule : renewal_schedule_id, frequency",
        "schema_with_content": "Materials : material_id (2, 1, 3), name ('Cement', 'Concrete', 'Steel Rebar'), cost (45.0, 15.0, 30.0) | Projects : project_id (1, 3, 2), name ('Stadium Construction', 'Park Improvement', 'Building Foundation'), start_date ('2023-06-01', '2023-08-01', '2023-05-01'), end_date ('2023-10-31', '2023-09-30', '2024-02-28'), infrastructure_id (1, 5, 3) | Infrastructure : infrastructure_id (3, 2, 5), description ('Bridge Abutment', 'Drainage System', 'Retaining Wall'), service_life_expectancy_id (2, 4, 5), renewal_schedule_id (4, 2, 3) | Workers : worker_id (1, 5, 3), first_name ('Jane', 'Mike', 'Emily'), last_name ('Smith', 'Johnson', 'Williams'), skill_level (9, 8, 8) | Tasks : task_id (5, 4, 2), description ('Paint bridge abutments', 'Repair concrete cracks', 'Install new drainage system'), assigned_to_worker_id (3, 5, 2), due_date ('2023-10-01', '2023-09-15', '2023-11-15'), completed (0, 0, 0) | Service_Life_Expectancy : service_life_expectancy_id (2, 4, 5), min_years (10, 30, 20), max_years (30, 20, 15) | Renewal_Schedule : renewal_schedule_id (3, 4, 1), frequency ('Quarterly', 'Semiannually', 'Monthly')",
        "ambiguous_queries": [
            "SELECT min_years, max_years FROM Service_Life_Expectancy AS L LEFT JOIN Infrastructure AS I ON I.service_life_expectancy_id = L.service_life_expectancy_id LEFT JOIN Projects AS P ON P.infrastructure_id = I.infrastructure_id WHERE P.name = 'Stadium Construction'",
            "SELECT frequency FROM Renewal_Schedule AS L LEFT JOIN Infrastructure AS I ON I.Renewal_Schedule_id = L.Renewal_Schedule_id LEFT JOIN Projects AS P ON P.infrastructure_id = I.infrastructure_id WHERE P.name = 'Stadium Construction'",
            "SELECT min_years, max_years, frequency FROM Service_Life_Expectancy AS L LEFT JOIN Infrastructure AS I ON I.service_life_expectancy_id = L.service_life_expectancy_id LEFT JOIN Projects AS P ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Renewal_Schedule AS RS ON I.Renewal_Schedule_id = RS.Renewal_Schedule_id WHERE P.name = 'Stadium Construction'"
        ],
        "gold_ambiguity": {
            "match": "{\"lifecycle\": [{\"Renewal_Schedule\": [\"frequency\"]}, {\"Service_Life_Expectancy\": [\"min_years\", \"max_years\"]}, {\"Renewal_Schedule\": [\"frequency\"], \"Service_Life_Expectancy\": [\"min_years\", \"max_years\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"lifecycle\" refers to the schema \"Service_Life_Expectancy\".\"min_years\" and \"Service_Life_Expectancy\".\"max_years\"",
        "clear_ambiguity": "{\"lifecycle\": {\"Service_Life_Expectancy\": [\"min_years\", \"max_years\"]}}",
        "gold_query": "SELECT min_years, max_years FROM Service_Life_Expectancy AS L LEFT JOIN Infrastructure AS I ON I.service_life_expectancy_id = L.service_life_expectancy_id LEFT JOIN Projects AS P ON P.infrastructure_id = I.infrastructure_id WHERE P.name = 'Stadium Construction'"
    },
    {
        "index": 873,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2cols_debut_date/vague_2cols_debut_date.sqlite",
        "question": "When did the podcast that Bob subscribed to come out?",
        "schema_without_content": "Podcast : id, Debut_Day, Debut_Year, Title, Hosts, Duration | Episode : id, Podcast_id, Episode_Number, Release_Date, Length | Category : id, Name | Podcast_Category : Podcast_id, Category_id | Subscriber : id, Email, Password, Joined_Date | Subscription : Subscriber_id, Podcast_id, Start_Date, End_Date",
        "schema_with_content": "Podcast : id (5, 2, 4), Debut_Day ('Monday', 'Friday', 'Tuesday'), Debut_Year (2020, 2021, 2020), Title ('Cooking with Chef Mike', 'The Morning Show', 'Technology Today'), Hosts ('Jane Doe and John Smith', 'Mike Brown', 'Tom Harris'), Duration (35, 30, 60) | Episode : id (3, 5, 2), Podcast_id (4, 3, 2), Episode_Number (2, 1, 1), Release_Date ('2020-07-01', '2021-07-01', '2021-07-08'), Length (45, 35, 60) | Category : id (4, 5, 1), Name ('News', 'Food & Cooking', 'Technology') | Podcast_Category : Podcast_id (2, 1, 3), Category_id (3, 2, 1) | Subscriber : id (4, 2, 3), Email ('diana@example.com', 'bob@example.com', 'john@example.com'), Password ('abc789', 'xyz123', 'password123'), Joined_Date ('2021-06-15', '2021-07-15', '2021-07-01') | Subscription : Subscriber_id (1, 1, 3), Podcast_id (3, 1, 4), Start_Date ('2021-07-01', '2021-07-01', '2021-07-01'), End_Date ('2021-08-15', '2021-08-01', '2021-08-01')",
        "ambiguous_queries": [
            "SELECT Debut_Day FROM Podcast JOIN Subscription ON Subscription.Podcast_id = Podcast.id JOIN Subscriber ON Subscription.Subscriber_id = Subscriber.id WHERE email LIKE '%bob%'",
            "SELECT Debut_Year FROM Podcast JOIN Subscription ON Subscription.Podcast_id = Podcast.id JOIN Subscriber ON Subscription.Subscriber_id = Subscriber.id WHERE email LIKE '%bob%'",
            "SELECT Debut_Day, Debut_Year FROM Podcast JOIN Subscription ON Subscription.Podcast_id = Podcast.id JOIN Subscriber ON Subscription.Subscriber_id = Subscriber.id WHERE email LIKE '%bob%'"
        ],
        "gold_ambiguity": {
            "match": "{\"When\": [{\"Podcast\": [\"Debut_Day\"]}, {\"Podcast\": [\"Debut_Year\"]}, {\"Podcast\": [\"Debut_Day\", \"Debut_Year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"When\" refers to the schema \"Podcast\".\"Debut_Day\" and \"Podcast\".\"Debut_Year\"",
        "clear_ambiguity": "{\"When\": {\"Podcast\": [\"Debut_Day\", \"Debut_Year\"]}}",
        "gold_query": "SELECT Debut_Day, Debut_Year FROM Podcast JOIN Subscription ON Subscription.Podcast_id = Podcast.id JOIN Subscriber ON Subscription.Subscriber_id = Subscriber.id WHERE email LIKE '%bob%'"
    },
    {
        "index": 874,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2tabs_deadline/vague_2tabs_deadline.sqlite",
        "question": "Can you show me the description of each assignment along with its deadline?",
        "schema_without_content": "Students : id, first_name, last_name | Classes : class_id, course_title, instructor | Date : date_id, year, month, day | Time : time_id, hour, minute, second | Enrollment : enrollment_id, student_id, class_id | Assignments : assignment_id, due_date, due_time, description",
        "schema_with_content": "Students : id (2, 1, 5), first_name ('Michael', 'William', 'John'), last_name ('Smith', 'White', 'Doe') | Classes : class_id (4, 1, 5), course_title ('Introduction to Computer Science', 'English Literature', 'Chemistry'), instructor ('Prof. White', 'Dr. Brown', 'Ms. Thompson') | Date : date_id (3, 5, 2), year (2021, 2021, 2021), month (9, 10, 11), day (6, 18, 7) | Time : time_id (3, 5, 2), hour (11, 10, 9), minute (0, 0, 0), second (0, 0, 0) | Enrollment : enrollment_id (3, 4, 2), student_id (1, 5, 2), class_id (4, 5, 1) | Assignments : assignment_id (4, 3, 5), due_date (4, 5, 3), due_time (3, 5, 2), description ('Group presentation', 'Term paper', 'Final exam preparation')",
        "ambiguous_queries": [
            "SELECT a.Description, d.Year, d.Month, d.Day FROM Assignments a JOIN Date d ON a.Due_Date = d.Date_ID;",
            "SELECT a.Description, d.hour, d.minute, d.second FROM Assignments a JOIN Time d ON a.Due_time = d.time_ID;",
            "SELECT a.Description, d.Year, d.Month, d.Day, t.hour, t.minute, t.second FROM Assignments a JOIN Date d ON a.Due_Date = d.Date_ID JOIN Time t ON a.Due_time = t.time_ID;"
        ],
        "gold_ambiguity": {
            "match": "{\"deadline\": [{\"Date\": [\"Year\", \"Month\", \"Day\"]}, {\"Time\": [\"hour\", \"minute\", \"second\"]}, {\"Date\": [\"Year\", \"Month\", \"Day\"], \"Time\": [\"hour\", \"minute\", \"second\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"deadline\" refers to the schema \"Date\".\"Year\" and \"Date\".\"Month\" and \"Date\".\"Day\"",
        "clear_ambiguity": "{\"deadline\": {\"Date\": [\"Year\", \"Month\", \"Day\"]}}",
        "gold_query": "SELECT a.Description, d.Year, d.Month, d.Day FROM Assignments a JOIN Date d ON a.Due_Date = d.Date_ID;"
    },
    {
        "index": 875,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_pay_gap/vague_2cols_pay_gap.sqlite",
        "question": "What is the pay gap and job satisfaction across occupations, from lowest to highest satisfaction?",
        "schema_without_content": "People : id, firstName, lastName, dateOfBirth, occupation | SalaryData : personId, salary, hireDate | OccupationalStats : occupation, percentageGap, differenceInSalaries, jobSatisfactionIndex | EducationLevel : educationLevel, avgYearsOfEducation, avgAnnualIncome | LocationData : locationID, city, state, country, numPeople | CityPopulationByDemographics : locationID, ageRange, gender, ethnicity, population",
        "schema_with_content": "People : id (2, 1), firstName ('Jane', 'John'), lastName ('Doe', 'Smith'), dateOfBirth ('1983-08-15', '1970-06-01'), occupation ('Teaching', 'Engineering') | SalaryData : personId (1, 2), salary (60000, 90000), hireDate ('2010-01-01', '2012-05-01') | OccupationalStats : occupation ('Engineering', 'Teaching'), percentageGap (10.0, 20.0), differenceInSalaries (25000, 10000), jobSatisfactionIndex (80, 70) | EducationLevel : educationLevel ('PhD', 'Masters'), avgYearsOfEducation (6.0, 8.0), avgAnnualIncome (90000, 75000) | LocationData : locationID (1, 2), city ('New York', 'Los Angeles'), state ('CA', 'NY'), country ('USA', 'USA'), numPeople (8000000, 3800000) | CityPopulationByDemographics : locationID (1, 1), ageRange ('36+', '18-35'), gender ('Male', 'Female'), ethnicity ('Black', 'White'), population (4000000, 2500000)",
        "ambiguous_queries": [
            "SELECT occupation, percentageGap, jobSatisfactionIndex FROM OccupationalStats ORDER BY jobSatisfactionIndex ASC",
            "SELECT occupation, differenceInSalaries, jobSatisfactionIndex FROM OccupationalStats ORDER BY jobSatisfactionIndex ASC",
            "SELECT occupation, percentageGap, differenceInSalaries, jobSatisfactionIndex FROM OccupationalStats ORDER BY jobSatisfactionIndex ASC"
        ],
        "gold_ambiguity": {
            "match": "{\"pay gap\": [{\"OccupationalStats\": [\"percentageGap\"]}, {\"OccupationalStats\": [\"differenceInSalaries\"]}, {\"OccupationalStats\": [\"percentageGap\", \"differenceInSalaries\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"pay gap\" refers to the schema \"OccupationalStats\".\"differenceInSalaries\"",
        "clear_ambiguity": "{\"pay gap\": {\"OccupationalStats\": [\"differenceInSalaries\"]}}",
        "gold_query": "SELECT occupation, differenceInSalaries, jobSatisfactionIndex FROM OccupationalStats ORDER BY jobSatisfactionIndex ASC"
    },
    {
        "index": 876,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
        "question": "show me immigrants in each city",
        "schema_without_content": "Population : id, Total_Population, Foreign_born_Population, Naturalized_Citizens, Municipality | EducationLevel : id, Age_Group, Graduation_Rate, HighSchool_Diploma_or_Higher, College_Degree | EmploymentStatus : id, Age_Group, Unemployed, Employed, Labor_Force_Participation_Rate | HealthStatistics : id, Age_Group, Obesity_Rate, Smoking_Prevalence, LifeExpectancy | IncomeLevels : id, Age_Group, Median_Income, Poverty_Rate, Low_Income_Percentage",
        "schema_with_content": "Population : id (1, 5, 2), Total_Population (80000, 100000, 60000), Foreign_born_Population (2500, 1500, 2000), Naturalized_Citizens (3000, 2500, 1500), Municipality ('Houston', 'Chicago', 'Philadelphia') | EducationLevel : id (2, 4, 1), Age_Group ('Age Group 4', 'Age Group 3', 'Age Group 1'), Graduation_Rate (90, 85, 80), HighSchool_Diploma_or_Higher (4000, 7000, 6000), College_Degree (3000, 2500, 4000) | EmploymentStatus : id (3, 2, 1), Age_Group ('Age Group 2', 'Age Group 3', 'Age Group 1'), Unemployed (300, 100, 400), Employed (8000, 6500, 5000), Labor_Force_Participation_Rate (35, 30, 40) | HealthStatistics : id (1, 4, 3), Age_Group ('Age Group 5', 'Age Group 4', 'Age Group 2'), Obesity_Rate (25, 40, 30), Smoking_Prevalence (25, 30, 35), LifeExpectancy (72, 71, 73) | IncomeLevels : id (5, 1, 3), Age_Group ('Age Group 5', 'Age Group 1', 'Age Group 4'), Median_Income (90000, 50000, 60000), Poverty_Rate (18, 10, 12), Low_Income_Percentage (850, 900, 750)",
        "ambiguous_queries": [
            "select Foreign_born_Population, municipality from population",
            "select Naturalized_Citizens, municipality from population",
            "select Foreign_born_Population, Naturalized_Citizens, municipality from population"
        ],
        "gold_ambiguity": {
            "match": "{\"immigrants\": [{\"Population\": [\"Foreign_born_Population\", \"Naturalized_Citizens\"]}, {\"Population\": [\"Foreign_born_Population\"]}, {\"Population\": [\"Naturalized_Citizens\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"immigrants\" refers to the schema \"population\".\"Foreign_born_Population\"",
        "clear_ambiguity": "{\"immigrants\": {\"Population\": [\"Foreign_born_Population\"]}}",
        "gold_query": "select Foreign_born_Population, municipality from population"
    },
    {
        "index": 877,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_context/vague_2tabs_context.sqlite",
        "question": "Show me information about the context in which Hamlet was written.",
        "schema_without_content": "Epoch : id, name, description | Society : id, name, culture | Author : id, first_name, last_name | Genre : id, genre_type | Play : id, title, summary, year_of_creation, epoch_id, society_id, author_id, genre_id",
        "schema_with_content": "Epoch : id (5, 3, 2), name ('Renaissance Europe', 'Modern Times', 'Victorian Era'), description ('Characterized by rapid industrialization and social change.', 'A time of significant cultural shifts and technological advancements.', 'The current era marked by global interconnectedness and digital revolution.') | Society : id (5, 3, 4), name ('Florentine', 'Athenian', 'Global Digital'), culture ('Home to the Renaissance and a center for art and learning.', 'Known for the flourishing of significant developments in literature and the arts.', 'Known for democracy, philosophy, and literature.') | Author : id (5, 2, 4), first_name ('Fyodor', 'Ernest', 'William'), last_name ('Austen', 'Dostoevsky', 'Hemingway') | Genre : id (5, 1, 3), genre_type ('Romance', 'Science Fiction', 'Mystery') | Play : id (2, 1, 3), title ('Hamlet', 'Brave New World', 'Pride and Prejudice'), summary ('Follows Elizabeth Bennet as she navigates love and marriage.', 'A psychological thriller about a student who commits murder.', 'Set in a dystopian future where totalitarianism is rampant.'), year_of_creation (1932, 1603, 1866), epoch_id (4, 3, 4), society_id (3, 3, 4), author_id (2, 3, 1), genre_id (4, 6, 1)",
        "ambiguous_queries": [
            "SELECT name, description FROM Epoch JOIN Play ON Epoch.id = Play.epoch_id WHERE title = 'Hamlet';",
            "SELECT name, culture FROM Society JOIN Play ON Society.id = Play.Society_id WHERE title = 'Hamlet';",
            "SELECT Epoch.name, Epoch.description, Society.name, Society.culture FROM Epoch JOIN Play ON Epoch.id = Play.epoch_id JOIN Society ON Society.id = Play.Society_id WHERE title = 'Hamlet';"
        ],
        "gold_ambiguity": {
            "match": "{\"information\": [{\"Epoch\": [\"name\", \"description\"]}, {\"Society\": [\"name\", \"culture\"]}, {\"Epoch\": [\"name\", \"description\"], \"Society\": [\"name\", \"culture\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"information\" refers to the schema \"Epoch\".\"name\" and \"Epoch\".\"description\"",
        "clear_ambiguity": "{\"information\": {\"Epoch\": [\"name\", \"description\"]}}",
        "gold_query": "SELECT name, description FROM Epoch JOIN Play ON Epoch.id = Play.epoch_id WHERE title = 'Hamlet';"
    },
    {
        "index": 878,
        "db_id": "Hospitality",
        "ambig_type": "vague",
        "db_file": "vague/Hospitality/vague_2cols_chef/vague_2cols_chef.sqlite",
        "question": "Who is the chef at the restaurant where you can find a grilled steak with garlic butter on the menu?",
        "schema_without_content": "Reservations : reservation_id, customer_name, phone_number, date, time | Customers : customer_id, name, email, address, phone_number | MenuItems : item_id, restaurant_id, item_name, description, price | Restaurants : restaurant_id, name, location, executive_chef, sous_chef, cuisine | Reviews : review_id, customer_id, rating, comments | Employees : employee_id, first_name, last_name, position, hire_date, wage",
        "schema_with_content": "Reservations : reservation_id (2, 1), customer_name ('John Doe', 'Jane Smith'), phone_number ('+1-987-654-3210', '+1-123-456-7890'), date ('2023-01-01', '2023-01-02'), time ('19:00', '18:30') | Customers : customer_id (2, 1), name ('John Doe', 'Jane Smith'), email ('jane@example.com', 'john@example.com'), address ('456 Elm St, Anycity, USA', '123 Main St, Anytown, USA'), phone_number ('+1-987-654-3210', '+1-123-456-7890') | MenuItems : item_id (1, 2), restaurant_id (1, 1), item_name ('Steak', 'Seafood Platter'), description ('Assorted seafood with lemon herb sauce', 'Grilled steak with garlic butter'), price (29.99, 34.99) | Restaurants : restaurant_id (1), name ('Gourmet Grill'), location ('Downtown'), executive_chef ('Chef Johnson'), sous_chef ('Chef Brown'), cuisine ('Steaks & Seafood') | Reviews : review_id (1, 2), customer_id (2, 1), rating (5, 4), comments ('Great food and service!', 'Nice place but could use improvement on presentation.') | Employees : employee_id (1, 2), first_name ('Michael', 'Emily'), last_name ('Johnson', 'Smith'), position ('Server', 'Manager'), hire_date ('2022-05-01', '2022-06-01'), wage (25000, 50000)",
        "ambiguous_queries": [
            "SELECT r.executive_chef FROM Restaurants r, MenuItems m WHERE r.restaurant_id = m.restaurant_id AND m.item_name = 'Steak';",
            "SELECT r.sous_chef FROM Restaurants r, MenuItems m WHERE r.restaurant_id = m.restaurant_id AND m.item_name = 'Steak';",
            "SELECT r.executive_chef, sous_chef FROM Restaurants r, MenuItems m WHERE r.restaurant_id = m.restaurant_id AND m.item_name = 'Steak';"
        ],
        "gold_ambiguity": {
            "match": "{\"chef\": [{\"Restaurants\": [\"executive_chef\"]}, {\"Restaurants\": [\"sous_chef\"]}, {\"Restaurants\": [\"executive_chef\", \"sous_chef\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"chef\" refers to the schema \"Restaurants\".\"sous_chef\"",
        "clear_ambiguity": "{\"chef\": {\"Restaurants\": [\"sous_chef\"]}}",
        "gold_query": "SELECT r.sous_chef FROM Restaurants r, MenuItems m WHERE r.restaurant_id = m.restaurant_id AND m.item_name = 'Steak';"
    },
    {
        "index": 879,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_context1/vague_2cols_context1.sqlite",
        "question": "What's the name and background of the documentary created by the oldest filmmaker?",
        "schema_without_content": "Genre : GenreID, Name | Movie : MovieID, Title, ReleaseDate, Rating, GenreID | Actor : ActorID, FirstName, LastName, DateOfBirth, Nationality | Cast : CastID, MovieID, ActorID, Role | Documentary : DocumentaryID, Title, HistoricalEra, Event, DirectorID | Director : DirectorID, BirthYear, DeathYear, fullname",
        "schema_with_content": "Genre : GenreID (5, 3, 4), Name ('Horror', 'Comedy', 'Romance') | Movie : MovieID (1, 2, 5), Title ('The Matrix', 'Pulp Fiction', 'Forrest Gump'), ReleaseDate ('1994-07-06', '1994-09-22', '2010-07-16'), Rating (8.8, 8.7, 8.9), GenreID (1, 1, 1) | Actor : ActorID (1, 2, 5), FirstName ('John Travolta', 'Keanu', 'Robin Williams'), LastName ('Reeves', '1974-11-11', '1951-07-21'), DateOfBirth ('American', 'American', 'American'), Nationality ('American', 'American', 'American') | Cast : CastID (4, 1, 5), MovieID (1, 5, 3), ActorID (1), Role ('Cobb', 'Morpheus', 'Forrest Gump') | Documentary : DocumentaryID (3, 4, 5), Title ('Wild Africa', 'Blue Planet II', 'Apollo 11'), HistoricalEra ('Anthropocene', 'Holocene', 'Holocene'), Event ('Life on Earth', 'Apollo 11 Moon Landing', 'Manhunt of Osama bin Laden'), DirectorID (3, 1, 5) | Director : DirectorID (3, 5, 4), BirthYear (1959, 1945, 1970), DeathYear (), fullname ('Christopher Nolan', 'Frank Darabont', 'Robert Zemeckis')",
        "ambiguous_queries": [
            "SELECT Title, HistoricalEra FROM Documentary JOIN Director ON Documentary.DirectorID = Director.DirectorID ORDER BY BirthYear DESC LIMIT 1;",
            "SELECT Title, Event FROM Documentary JOIN Director ON Documentary.DirectorID = Director.DirectorID ORDER BY BirthYear DESC LIMIT 1;",
            "SELECT Title, HistoricalEra, Event FROM Documentary JOIN Director ON Documentary.DirectorID = Director.DirectorID ORDER BY BirthYear DESC LIMIT 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"background\": [{\"Documentary\": [\"HistoricalEra\"]}, {\"Documentary\": [\"Event\"]}, {\"Documentary\": [\"HistoricalEra\", \"Event\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"background\" refers to the schema \"Documentary\".\"Event\"",
        "clear_ambiguity": "{\"background\": {\"Documentary\": [\"Event\"]}}",
        "gold_query": "SELECT Title, Event FROM Documentary JOIN Director ON Documentary.DirectorID = Director.DirectorID ORDER BY BirthYear DESC LIMIT 1;"
    },
    {
        "index": 880,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_production/vague_2cols_production.sqlite",
        "question": "Who made each production? Split by movie",
        "schema_without_content": "Studio : id, name, address_line1, address_line2, phone_number | Producer : id, email, birthdate, full_name | Movie : id, title, release_year, genre, studio_id, producer_id | Actor : id, first_name, last_name, date_of_birth, gender | Character : id, movie_id, actor_id, character_name | Review : id, movie_id, reviewer_id, rating, comments, review_date",
        "schema_with_content": "Studio : id (2, 1), name ('Disney Studios', 'Warner Bros.'), address_line1 ('108 W 9th St', '500 S Buena Vista St'), address_line2 (), phone_number ('+1-818-560-1000', '+1-310-786-7711') | Producer : id (1, 2), email ('christophern@gmail.com', 'jonathann@gmail.com'), birthdate ('1976-07-24', '1970-08-30'), full_name ('Christopher Nolan', 'Jonathan Nolan') | Movie : id (1, 2), title ('The Dark Knight Rises', 'Inception'), release_year (2012, 2010), genre ('Action/Thriller', 'Action/Adventure'), studio_id (1, 1), producer_id (1, 2) | Actor : id (2, 1), first_name ('Leonardo', 'Tom'), last_name ('DiCaprio', 'Hardy'), date_of_birth ('1977-09-15', '1974-11-11'), gender ('M', 'M') | Character : id (1, 2), movie_id (1, 1), actor_id (1, 2), character_name ('Arthur', 'Cobb') | Review : id (2, 1), movie_id (1, 1), reviewer_id (2, 1), rating (9, 8), comments ('Great movie!', 'Amazing visuals and storytelling'), review_date ('2021-12-15 12:00:00', '2021-12-16 12:00:00')",
        "ambiguous_queries": [
            "SELECT a.title, b.name FROM Movie a JOIN Studio b ON a.studio_id = b.id",
            "SELECT a.title, c.Full_name FROM Movie a JOIN Producer c ON a.producer_id = c.id",
            "SELECT a.title, c.name, p.full_name FROM Movie a JOIN Studio c ON a.studio_id = c.id JOIN Producer p ON p.id = a.producer_id"
        ],
        "gold_ambiguity": {
            "match": "{\"production\": [{\"Producer\": [\"Full_name\"]}, {\"Studio\": [\"name\"]}, {\"Producer\": [\"Full_name\"], \"Studio\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"production\" refers to the schema \"Studio\".\"name\"",
        "clear_ambiguity": "{\"production\": {\"Studio\": [\"name\"]}}",
        "gold_query": "SELECT a.title, c.name, p.full_name FROM Movie a JOIN Studio c ON a.studio_id = c.id JOIN Producer p ON p.id = a.producer_id"
    },
    {
        "index": 881,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2cols_duration/vague_2cols_duration.sqlite",
        "question": "What is the average revenue per operation and when did this occur?",
        "schema_without_content": "Authors : AuthorID, FirstName, LastName, EmailAddress | Articles : ArticleID, Title, Content, PublishDate, ViewCount | Publications : PublisherID, Name, WebsiteURL, FoundedYear | Operations : OperationID, OperationYears, OperationMonths, MediaOutlet, Revenue, Expenses, ProfitMargin | Readers : ReaderID, FullName, EmailAddress, RegistrationDate | Subscriptions : SubscriptionID, ReaderID, PublisherID, StartDate, EndDate, Price",
        "schema_with_content": "Authors : AuthorID (1, 2), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), EmailAddress ('johndoe@example.com', 'janesmith@example.com') | Articles : ArticleID (1, 2), Title ('Article Two', 'Article One'), Content ('Content of article two goes here.', 'This is the content of article one.'), PublishDate ('2024-02-19 14:58:28', '2024-02-19 14:58:28'), ViewCount (80, 100) | Publications : PublisherID (2, 1), Name ('Publication B', 'Publication A'), WebsiteURL ('https://www.publicationa.com', 'https://www.publicationb.com'), FoundedYear (2000, 2001) | Operations : OperationID (1, 2), OperationYears (10, 5), OperationMonths (12, 6), MediaOutlet ('Radio Y', 'Newspaper X'), Revenue (50000.0, 100000.0), Expenses (75000.0, 30000.0), ProfitMargin (0.0, 0.0) | Readers : ReaderID (2, 1), FullName ('Alice Johnson', 'Bob Smith'), EmailAddress ('alicejohnson@example.com', 'bobsmit@example.net'), RegistrationDate ('2024-02-19 14:58:28', '2024-02-19 14:58:28') | Subscriptions : SubscriptionID (1, 2), ReaderID (1, 2), PublisherID (2, 1), StartDate ('2024-02-19 14:58:28', '2024-02-19 14:58:28'), EndDate (), Price (12.99, 9.99)",
        "ambiguous_queries": [
            "SELECT AVG(Revenue) AS AverageRevenuePerOperation, OperationYears FROM Operations",
            "SELECT AVG(Revenue) AS AverageRevenuePerOperation, OperationMonths FROM Operations",
            "SELECT AVG(Revenue) AS AverageRevenuePerOperation, OperationYears, OperationMonths FROM Operations"
        ],
        "gold_ambiguity": {
            "match": "{\"when\": [{\"Operations\": [\"OperationYears\"]}, {\"Operations\": [\"OperationMonths\"]}, {\"Operations\": [\"OperationYears\", \"OperationMonths\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"when\" refers to the schema \"Operations\".\"OperationMonths\"",
        "clear_ambiguity": "{\"when\": {\"Operations\": [\"OperationMonths\"]}}",
        "gold_query": "SELECT AVG(Revenue) AS AverageRevenuePerOperation, OperationMonths FROM Operations"
    },
    {
        "index": 882,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2tabs_owner_population/vague_2tabs_owner_population.sqlite",
        "question": "How many people owned homes in 2023?",
        "schema_without_content": "Person : ID, Name, Age | Address : ID, Street, City, PersonId | EmploymentStatus : ID, Status, PersonId | IncomeLevel : ID, Level, PersonId | OwnerPercentage : Year, Percentage, TotalPopulation | NumbersOfOwners : Year, NumberOfHouseholds",
        "schema_with_content": "Person : ID (1, 3, 2), Name ('Michael Johnson', 'Emily Davis', 'John Doe'), Age (26, 40, 30) | Address : ID (4, 3, 1), Street ('789 Oak St', '321 Pine St', '123 Main St'), City ('Miami', 'New York', 'Dallas'), PersonId (4, 3, 5) | EmploymentStatus : ID (1, 2, 4), Status ('Unemployed', 'Retired', 'Full Time'), PersonId (1, 2, 5) | IncomeLevel : ID (4, 1, 3), Level ('Ultra High', 'High', 'Low'), PersonId (4, 2, 1) | OwnerPercentage : Year (2021, 2025, 2023), Percentage (56.0, 57.0, 59.0), TotalPopulation (1000000, 1000000, 1000000) | NumbersOfOwners : Year (2025, 2024, 2022), NumberOfHouseholds (1550000, 1500000, 1650000)",
        "ambiguous_queries": [
            "SELECT O.Percentage * O.TotalPopulation / 100 FROM OwnerPercentage AS O WHERE O.Year = 2023",
            "SELECT O.NumberOfHouseholds FROM NumbersOfOwners AS O WHERE O.Year = 2023",
            "SELECT O.Percentage * O.TotalPopulation / 100, N.NumberOfHouseholds FROM OwnerPercentage AS O LEFT JOIN NumbersOfOwners AS N on O.Year = N.Year WHERE O.Year = 2023"
        ],
        "gold_ambiguity": {
            "match": "{\"How many\": [{\"NumbersOfOwners\": [\"NumberOfHouseholds\"]}, {\"OwnerPercentage\": [\"Percentage\", \"TotalPopulation\"]}, {\"NumbersOfOwners\": [\"NumberOfHouseholds\"], \"OwnerPercentage\": [\"Percentage\", \"TotalPopulation\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"How many\" refers to the schema \"OwnerPercentage\".\"Percentage\" and \"OwnerPercentage\".\"TotalPopulation\"",
        "clear_ambiguity": "{\"How many\": {\"OwnerPercentage\": [\"Percentage\", \"TotalPopulation\"]}}",
        "gold_query": "SELECT O.Percentage * O.TotalPopulation / 100, N.NumberOfHouseholds FROM OwnerPercentage AS O LEFT JOIN NumbersOfOwners AS N on O.Year = N.Year WHERE O.Year = 2023"
    },
    {
        "index": 883,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_technology/vague_2tabs_technology.sqlite",
        "question": "Show me the platform name and technology for all online news platforms containing the letter t",
        "schema_without_content": "Author : id, name, email | Category : id, name | Article : id, title, content, author_id, category_id | Content_Management_System : id, system_name, description | Web_Framework : id, framework_name, description | Online_News_Platform : id, platform_name, url, cms_id, web_framework_id",
        "schema_with_content": "Author : id (5, 2, 4), name ('Jane Smith', 'David Brown', 'John Doe'), email ('jane.smith@example.com', 'john.doe@example.com', 'emily.davis@example.com') | Category : id (4, 5, 3), name ('Politics', 'Health', 'Education') | Article : id (5, 2, 4), title ('Blockbuster Movie Release', 'Vaccine Breakthrough', 'New Political Laws'), content ('A piece covering recent AI advancements.', 'An article discussing new political laws.', 'Discussing a major breakthrough in vaccine development.'), author_id (1, 4, 3), category_id (5, 4, 2) | Content_Management_System : id (5, 4, 3), system_name ('Joomla!', 'Typo3', 'Drupal'), description ('A widely used enterprise CMS for large projects.', 'The most popular CMS for creating websites.', 'A user-friendly CMS with numerous extensions and templates.') | Web_Framework : id (3, 2, 4), framework_name ('React', 'Vue.js', 'jQuery'), description ('A lightweight JavaScript framework for structuring client-side applications.', 'A fast, small, and feature-rich JavaScript library.', 'A progressive JavaScript framework for building user interfaces.') | Online_News_Platform : id (1, 2, 3), platform_name ('Fun Times', 'Tech Today', 'Health Insider'), url ('https://healthinsider.org', 'https://funtimesmagazine.com', 'https://eduworld.info'), cms_id (2, 5, 4), web_framework_id (2, 3, 1)",
        "ambiguous_queries": [
            "SELECT platform_name, system_name FROM Online_News_Platform JOIN Content_Management_System ON Online_News_Platform.cms_id = Content_Management_System.id WHERE platform_name LIKE '%t%'",
            "SELECT platform_name, framework_name FROM Online_News_Platform JOIN Web_Framework ON Online_News_Platform.web_framework_id = Web_Framework.id WHERE platform_name LIKE '%t%'",
            "SELECT platform_name, system_name, framework_name FROM Online_News_Platform JOIN Content_Management_System ON Online_News_Platform.cms_id = Content_Management_System.id join Web_Framework on online_news_platform.web_framework_id = Web_Framework.id WHERE platform_name LIKE '%t%'"
        ],
        "gold_ambiguity": {
            "match": "{\"platform\": [{\"Online_News_Platform\": [\"system_name\"]}, {\"Online_News_Platform\": [\"framework_name\"]}, {\"Online_News_Platform\": [\"system_name\", \"framework_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"platform\" refers to the schema \"Online_News_Platform\".\"system_name\"",
        "clear_ambiguity": "{\"platform\": {\"Online_News_Platform\": [\"system_name\"]}}",
        "gold_query": "SELECT platform_name, system_name FROM Online_News_Platform JOIN Content_Management_System ON Online_News_Platform.cms_id = Content_Management_System.id WHERE platform_name LIKE '%t%'"
    },
    {
        "index": 884,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2cols_reporter/vague_2cols_reporter.sqlite",
        "question": "Who reported what story?",
        "schema_without_content": "journalists : id, name, email, phone | news_agencies : id, name, location, contact_email | stories : id, title, content, publish_date, journalist_id, news_agency_id | story_categories : id, category_name, description | assigned_stories : id, story_id, journalist_id, start_date, end_date",
        "schema_with_content": "journalists : id (2, 1), name ('John Doe', 'Jane Smith'), email ('janesmith@example.com', 'johndoe@example.com'), phone ('+0987654321', '+1234567890') | news_agencies : id (1, 2), name ('News Hub', 'Agencia Noticias'), location ('New York City, USA', 'Madrid, Spain'), contact_email ('contact@newshub.us', 'contact@noticias.es') | stories : id (1, 2), title ('US Election Results', 'European Economy Overview'), content ('An overview of European economies.', 'This is an article about recent election results.'), publish_date ('2024-02-19 15:13:19', '2024-02-19 15:13:19'), journalist_id (2, 1), news_agency_id (2, 1) | story_categories : id (2, 1), category_name ('Politics', 'Economy'), description ('Articles covering financial matters and economic trends.', 'Stories about government and political activities.') | assigned_stories : id (1, 2), story_id (1, 2), journalist_id (1, 2), start_date ('2022-09-02', '2022-09-01'), end_date ('2022-09-15', '2022-09-16')",
        "ambiguous_queries": [
            "SELECT j.name AS journalist_name, s.title AS story_title FROM stories s JOIN journalists j ON s.journalist_id = j.id;",
            "SELECT j.name AS news_agency_name, s.title AS story_title FROM stories s JOIN news_agencies j ON s.news_agency_id = j.id;",
            "SELECT j.name, na.name, s.title AS story_title FROM stories s JOIN journalists j ON s.journalist_id = j.id JOIN news_agencies na ON s.news_agency_id = na.id;"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"journalists\": [\"name\"], \"news_agencies\": [\"name\"]}, {\"journalists\": [\"name\"]}, {\"news_agencies\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"journalists\".\"name\"",
        "clear_ambiguity": "{\"Who\": {\"journalists\": [\"name\"]}}",
        "gold_query": "SELECT j.name AS journalist_name, s.title AS story_title FROM stories s JOIN journalists j ON s.journalist_id = j.id;"
    },
    {
        "index": 885,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_teaching_subjects/vague_2cols_teaching_subjects.sqlite",
        "question": "What did the youngest student study?",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth | Academics : CourseID, Discipline, GradeLevel, Teacher, RoomNumber, Capacity | Enrollments : EnrollmentID, StudentID, CourseID, EnrolDate, FinalGrade | Addresses : AddressID, StreetAddress, City, State, PostalCode, Country, PhoneNumber | Guardians : GuardianID, FirstName, LastName, Relationship, HomePhone, WorkPhone, Email | EmergencyContacts : ContactID, GuardianID, Name, Relationship, PhoneNumber",
        "schema_with_content": "Students : StudentID (2, 1, 3), FirstName ('John', 'Jane', 'Michael'), LastName ('Johnson', 'Smith', 'Doe'), DateOfBirth ('2004-09-07', '2003-06-18', '2002-11-22') | Academics : CourseID (2, 1, 3), Discipline ('English', 'History', 'Mathematics'), GradeLevel ('World History', 'Algebra I', 'Composition'), Teacher ('Mr. Brown', 'Mrs. Johnson', 'Ms. Smith'), RoomNumber (201, 101, 301), Capacity (30, 25, 35) | Enrollments : EnrollmentID (2, 3, 1), StudentID (2, 3, 1), CourseID (3, 2, 1), EnrolDate ('2021-09-01', '2021-09-01', '2021-09-01'), FinalGrade () | Addresses : AddressID (2, 1, 3), StreetAddress ('456 Elm St.', '789 Oak St.', '123 Main St.'), City ('Anytown', 'Nowhere', 'Othertown'), State ('CA', 'TX', 'NY'), PostalCode ('12345', '67890', '98765'), Country ('USA', 'USA', 'USA'), PhoneNumber ('555-5678', '555-9012', '555-1234') | Guardians : GuardianID (2, 1), FirstName ('John', 'Emily'), LastName ('Doe', 'Smith'), Relationship ('Aunt', 'Parent'), HomePhone ('555-1234', '555-5678'), WorkPhone ('', ''), Email ('emily.smith@example.com', 'john.doe@example.com') | EmergencyContacts : ContactID (2, 1), GuardianID (1, 2), Name ('Dr. Jones', 'Uncle Bob'), Relationship ('Uncle', 'Family Friend'), PhoneNumber ('555-9012', '555-1234')",
        "ambiguous_queries": [
            "SELECT Academics.Discipline FROM Academics JOIN Enrollments ON Enrollments.CourseID = Academics.CourseID JOIN Students ON Enrollments.StudentID = Students.StudentID ORDER BY DateOfBirth DESC LIMIT 1",
            "SELECT Academics.GradeLevel FROM Academics JOIN Enrollments ON Enrollments.CourseID = Academics.CourseID JOIN Students ON Enrollments.StudentID = Students.StudentID ORDER BY DateOfBirth DESC LIMIT 1",
            "SELECT Academics.Discipline, GradeLevel FROM Academics JOIN Enrollments ON Enrollments.CourseID = Academics.CourseID JOIN Students ON Enrollments.StudentID = Students.StudentID ORDER BY DateOfBirth DESC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"study\": [{\"Academics\": [\"Discipline\"]}, {\"Academics\": [\"GradeLevel\"]}, {\"Academics\": [\"Discipline\", \"GradeLevel\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"study\" refers to the schema \"Academics\".\"Discipline\" and \"Academics\".\"GradeLevel\"",
        "clear_ambiguity": "{\"study\": {\"Academics\": [\"Discipline\", \"GradeLevel\"]}}",
        "gold_query": "SELECT Academics.Discipline, GradeLevel FROM Academics JOIN Enrollments ON Enrollments.CourseID = Academics.CourseID JOIN Students ON Enrollments.StudentID = Students.StudentID ORDER BY DateOfBirth DESC LIMIT 1"
    },
    {
        "index": 886,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_immigrants/vague_2cols_immigrants.sqlite",
        "question": "Which country in North America had the most immigrants?",
        "schema_without_content": "Population : id, totalPopulation, year | AgeGroup : id, ageFrom, ageTo, population | Country : id, countryName, continent | ImmigrationStats : id, numberOfImmigrants, immigrantPercentage, countryId, year | Ethnicity : id, ethnicGroupName, population | EducationLevel : id, levelName, percentage",
        "schema_with_content": "Population : id (4, 1, 5), totalPopulation (32000000, 31000000, 34000000), year (2019, 2023, 2021) | AgeGroup : id (3, 4, 5), ageFrom (18, 65, 75), ageTo (84, 99, 74), population (1000000, 100000, 250000) | Country : id (1, 4, 5), countryName ('Mexico', 'Canada', 'Germany'), continent ('North America', 'Europe', 'North America') | ImmigrationStats : id (3, 4, 1), numberOfImmigrants (120000, 140000, 180000), immigrantPercentage (4.0, 5.0, 3.5), countryId (2, 1, 4), year (2023, 2021, 2019) | Ethnicity : id (3, 1, 5), ethnicGroupName ('White', 'Black', 'Other'), population (100000, 2000000, 400000) | EducationLevel : id (2, 3, 1), levelName ('Bachelor Degree', 'Doctorate', 'No College'), percentage (25.0, 15.0, 25.0)",
        "ambiguous_queries": [
            "select C.countryName from country C inner join ImmigrationStats on C.id = ImmigrationStats.countryId where C.continent = 'North America' order by ImmigrationStats.numberOfImmigrants desc limit 1",
            "select C.countryName from country C inner join ImmigrationStats on C.id = ImmigrationStats.countryId where C.continent = 'North America' order by ImmigrationStats.immigrantPercentage desc limit 1",
            "select C.countryName from country C inner join ImmigrationStats on C.id = ImmigrationStats.countryId where C.continent = 'North America' order by ImmigrationStats.numberOfImmigrants, ImmigrationStats.immigrantPercentage desc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"immigrants\": [{\"ImmigrationStats\": [\"numberOfImmigrants\"]}, {\"ImmigrationStats\": [\"immigrantPercentage\"]}, {\"ImmigrationStats\": [\"numberOfImmigrants\", \"immigrantPercentage\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"immigrants\" refers to the schema \"ImmigrationStats\".\"numberOfImmigrants\"",
        "clear_ambiguity": "{\"immigrants\": {\"ImmigrationStats\": [\"numberOfImmigrants\"]}}",
        "gold_query": "select C.countryName from country C inner join ImmigrationStats on C.id = ImmigrationStats.countryId where C.continent = 'North America' order by ImmigrationStats.numberOfImmigrants desc limit 1"
    },
    {
        "index": 887,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
        "question": "Rank the movies based on their ratings from highest to lowest.",
        "schema_without_content": "Genre : id, name | Director : id, firstName, lastName | Actor : id, firstName, lastName | Movie : id, title, releaseDate, genreId, directorId | Rating : movieId, ageRating, criticalRating, tvShow | Review : id, reviewText, rating, actorId, movieId",
        "schema_with_content": "Genre : id (2, 5, 3), name ('Drama', 'Horror', 'Romance') | Director : id (2, 3, 4), firstName ('Michael', 'Chris', 'Emma'), lastName ('Jackson', 'Doe', 'Evans') | Actor : id (5, 1, 3), firstName ('Scarlett', 'Angelina', 'Tom'), lastName ('Pitt', 'Hanks', 'Johansson') | Movie : id (5, 4, 3), title ('Inception', 'Titanic', 'The Dark Knight'), releaseDate ('2010-07-16', '2019-04-26', '1997-12-19'), genreId (3, 1, 4), directorId (1, 2, 5) | Rating : movieId (4, 1, 3), ageRating (15, 18, 12), criticalRating (7.0, 8.5, 9.0), tvShow (0, 0, 0) | Review : id (1, 3, 2), reviewText ('Great acting and a thrilling plot.', 'Too long and not as good as expected.', 'Amazing visuals but weak storyline.'), rating (5, 3, 2), actorId (4, 1, 3), movieId (4, 3, 2)",
        "ambiguous_queries": [
            "SELECT movieId, ageRating FROM 'Rating' JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating DESC;",
            "SELECT movieId, criticalRating FROM 'Rating' JOIN Movie ON Movie.id = Rating.movieId ORDER BY criticalRating DESC;",
            "SELECT movieId, ageRating, criticalRating FROM 'Rating' JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating, criticalRating DESC;"
        ],
        "gold_ambiguity": {
            "match": "{\"ratings\": [{\"Rating\": [\"ageRating\"]}, {\"Rating\": [\"criticalRating\"]}, {\"Rating\": [\"ageRating\", \"criticalRating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ratings\" refers to the schema \"Rating\".\"ageRating\" and \"Rating\".\"criticalRating\"",
        "clear_ambiguity": "{\"ratings\": {\"Rating\": [\"ageRating\", \"criticalRating\"]}}",
        "gold_query": "SELECT movieId, ageRating, criticalRating FROM 'Rating' JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating, criticalRating DESC;"
    },
    {
        "index": 888,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
        "question": "How many seasons are in mystery sci-fi?",
        "schema_without_content": "TV_Shows : id, Title, Released_Seasons, Planned_Seasons, Series, GenreID, PlatformID, RatingID | Genre : id, Name | Platforms : id, Name | Ratings : id, RateValue | Users : id, Username, Email, Password | User_Reviews : id, UserID, ShowID, ReviewText, RatingID",
        "schema_with_content": "TV_Shows : id (1, 2, 3), Title ('Game of Thrones', 'Ozark', 'The Witcher'), Released_Seasons (7, 1, 6), Planned_Seasons (4, 8, 2), Series ('Adventure Fantasy', 'Crime Drama', 'Drama'), GenreID (3, 4, 2), PlatformID (4, 3, 4), RatingID (3, 4, 5) | Genre : id (1, 3, 2), Name ('Horror', 'Action', 'Comedy') | Platforms : id (4, 1, 2), Name ('Amazon Prime Video', 'Netflix', 'Disney+') | Ratings : id (4, 1, 2), RateValue (9.0, 8.1, 8.4) | Users : id (3, 5, 4), Username ('user3', 'user2', 'user5'), Email ('user1@example.com', 'user3@example.com', 'user5@example.com'), Password ('password2', 'password4', 'password5') | User_Reviews : id (1, 4, 3), UserID (5, 4, 3), ShowID (4, 1, 3), ReviewText ('Not a fan of this one.', 'Great show!', 'Best series ever.'), RatingID (2, 1, 4)",
        "ambiguous_queries": [
            "Select Released_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'",
            "Select Planned_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'",
            "Select Released_Seasons, Planned_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'"
        ],
        "gold_ambiguity": {
            "match": "{\"seasons\": [{\"TV_Shows\": [\"Released_Seasons\"]}, {\"TV_Shows\": [\"Planned_Seasons\"]}, {\"TV_Shows\": [\"Released_Seasons\", \"Planned_Seasons\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"seasons\" refers to the schema \"TV_Shows\".\"Released_Seasons\" and \"TV_Shows\".\"Planned_Seasons\"",
        "clear_ambiguity": "{\"seasons\": {\"TV_Shows\": [\"Released_Seasons\", \"Planned_Seasons\"]}}",
        "gold_query": "Select Released_Seasons, Planned_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'"
    },
    {
        "index": 889,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
        "question": "What are the survival statistics and outcomes of these patients and what are their names?",
        "schema_without_content": "Patients : id, dateOfBirth, gender, contactNumber, address, fullname | Doctors : doctorID, firstName, lastName, specialty, yearsExperience | Illnesses : illnessID, name, description, fiveYearSurvivalRate, tenYearSurvivalRate, treatmentOption | Diagnoses : diagnosisID, patientId, illnessId, diagnosedDate | Prescriptions : prescriptionId, diagnosisId, medication, dosage, frequency, startDate, endDate | Appointments : appointmentId, patientId, doctorId, appointmentDate, reasonForAppointment, outcome",
        "schema_with_content": "Patients : id (1, 2), dateOfBirth ('1990-07-25', '1980-06-15'), gender ('F', 'M'), contactNumber ('+0987654321', '+1234567890'), address ('456 Elm St', '123 Main St'), fullname ('John Doe', 'Jane Smith') | Doctors : doctorID (1, 2), firstName ('Dr.', 'Dr.'), lastName ('Williams', 'Jones'), specialty ('Pediatrics', 'Cardiology'), yearsExperience (10, 15) | Illnesses : illnessID (1, 2), name ('Diabetes', 'Breast Cancer'), description ('A disease where malignant cells form in the breast tissue.', 'A chronic condition characterized by high blood sugar levels.'), fiveYearSurvivalRate (85.0, 85.0), tenYearSurvivalRate (75.0, 75.0), treatmentOption ('Chemotherapy and radiation therapy', 'Diet, exercise, and insulin therapy') | Diagnoses : diagnosisID (2, 1), patientId (1, 2), illnessId (1, 2), diagnosedDate ('2022-01-15', '2021-09-01') | Prescriptions : prescriptionId (1, 2), diagnosisId (2, 1), medication ('Tamoxifen', 'Metformin'), dosage ('500mg', '20mg'), frequency ('Once daily', 'Twice daily'), startDate ('2022-01-16', '2021-09-02'), endDate ('2022-08-31', '2022-12-31') | Appointments : appointmentId (1, 2), patientId (2, 1), doctorId (1, 2), appointmentDate ('2022-02-01 10:00:00', '2021-11-15 14:00:00'), reasonForAppointment ('Regular checkup', 'Flu symptoms'), outcome ('Recovering', 'Healthy')",
        "ambiguous_queries": [
            "SELECT ILLNESSES.fiveYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname FROM APPOINTMENTS JOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id JOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId JOIN ILLNESSES ON DIAGNOSES.illnessId = ILLNESSES.illnessID",
            "SELECT ILLNESSES.tenYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname FROM APPOINTMENTS JOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id JOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId JOIN ILLNESSES ON DIAGNOSES.illnessId = ILLNESSES.illnessID",
            "SELECT ILLNESSES.fiveYearSurvivalRate, tenYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname FROM APPOINTMENTS JOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id JOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId JOIN ILLNESSES ON DIAGNOSES.illnessId = ILLNESSES.illnessID"
        ],
        "gold_ambiguity": {
            "match": "{\"survival statistics\": [{\"Illnesses\": [\"fiveYearSurvivalRate\"]}, {\"Illnesses\": [\"tenYearSurvivalRate\"]}, {\"Illnesses\": [\"fiveYearSurvivalRate\", \"tenYearSurvivalRate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"survival statistics\" refers to the schema \"ILLNESSES\".\"fiveYearSurvivalRate\"",
        "clear_ambiguity": "{\"survival statistics\": {\"Illnesses\": [\"fiveYearSurvivalRate\"]}}",
        "gold_query": "SELECT ILLNESSES.fiveYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname FROM APPOINTMENTS JOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id JOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId JOIN ILLNESSES ON DIAGNOSES.illnessId = ILLNESSES.illnessID"
    },
    {
        "index": 890,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_collection_size/vague_2cols_collection_size.sqlite",
        "question": "Display a list of the libraries with their collection size that are accessible.",
        "schema_without_content": "Students : ID, FirstName, LastName, DateOfBirth, Email, PhoneNumber | Courses : CourseID, CourseTitle, Instructor, StartDate, EndDate | Enrollments : EnrollmentID, StudentID, CourseID, Semester, Year | Grades : GradeID, EnrollmentID, FinalGrade | Library : LibraryID, Number_Of_Volumes, Shelving_Space, Library, Accessible, OpeningHours",
        "schema_with_content": "Students : ID (1, 2), FirstName ('John', 'Jane'), LastName ('Doe', 'Smith'), DateOfBirth ('2003-06-18', '2002-05-20'), Email ('john.doe@example.com', 'jane.smith@example.com'), PhoneNumber ('+0987654321', '+1234567890') | Courses : CourseID (1, 2), CourseTitle ('Introduction to Programming', 'Advanced Database Management'), Instructor ('Dr. Jane Smith', 'Prof. John Doe'), StartDate ('2023-01-01', '2023-01-15'), EndDate ('2023-05-31', '2023-05-15') | Enrollments : EnrollmentID (1, 2), StudentID (1, 2), CourseID (1, 2), Semester ('Fall', 'Spring'), Year (2023, 2023) | Grades : GradeID (2, 1), EnrollmentID (2, 1), FinalGrade (88.5, 92.3) | Library : LibraryID (2, 1), Number_Of_Volumes (300, 500), Shelving_Space ('1000 sq ft', '750 sq ft'), Library ('Engineering Library', 'University Main Library'), Accessible ('No', 'Yes'), OpeningHours ('Monday - Thursday: 8am - 8pm, Friday: 8am - 6pm, Weekends: Closed', 'Monday - Friday: 8am - 6pm, Saturday: 10am - 2pm, Sunday: Closed')",
        "ambiguous_queries": [
            "SELECT Library, Number_Of_Volumes FROM Library WHERE Accessible = 'Yes'",
            "SELECT Library, Shelving_Space FROM Library WHERE Accessible = 'Yes'",
            "SELECT Library, Number_Of_Volumes, Shelving_Space FROM Library WHERE Accessible = 'Yes'"
        ],
        "gold_ambiguity": {
            "match": "{\"collection size\": [{\"Library\": [\"Number_Of_Volumes\"]}, {\"Library\": [\"Shelving_Space\"]}, {\"Library\": [\"Number_Of_Volumes\", \"Shelving_Space\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"collection size\" refers to the schema \"Library\".\"Shelving_Space\"",
        "clear_ambiguity": "{\"collection size\": {\"Library\": [\"Shelving_Space\"]}}",
        "gold_query": "SELECT Library, Shelving_Space FROM Library WHERE Accessible = 'Yes'"
    },
    {
        "index": 891,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2cols_supervisor/vague_2cols_supervisor.sqlite",
        "question": "Which supervisor has the highest budget?",
        "schema_without_content": "Projects : projectID, projectName, startDate, endDate, budget, Project_Manager, Construction_Manager, Edifice | Employees : employeeID, firstName, lastName, jobTitle, salary | Materials : materialID, name, quantity, unitCost | Tasks : taskID, description, status, startTime, completionTime, assignedEmployeeID | Equipment : equipmentID, type, make, model, purchasePrice | Suppliers : supplierID, companyName, contactName, phoneNumber, address",
        "schema_with_content": "Projects : projectID (3, 2, 1), projectName ('School Renovation', 'Warehouse Expansion', 'New Office Building'), startDate ('2023-02-01', '2023-01-01', '2023-03-01'), endDate ('2023-12-31', '2023-12-15', '2023-11-30'), budget (750000.0, 1000000.0, 800000.0), Project_Manager ('Mike Johnson', 'John Doe', 'Mark Williams'), Construction_Manager ('Karen Lee', 'Lisa Brown', 'Jane Smith'), Edifice ('High Rise', 'Elementary School', 'Industrial Park') | Employees : employeeID (2, 3, 1), firstName ('Eva', 'David', 'Charlie'), lastName ('Collins', 'Davis', 'Martin'), jobTitle ('Site Supervisor', 'Electrician', 'Carpenter'), salary (65000.0, 62000.0, 60000.0) | Materials : materialID (1, 3, 4), name ('Steel Rebars', 'Roofing Materials', 'Concrete'), quantity (100.0, 50.0, 75.0), unitCost (200.0, 60.0, 80.0) | Tasks : taskID (5, 4, 1), description ('Set up temporary office', 'Begin framing of building', 'Install plumbing'), status ('In Progress', 'In Progress', 'Not Started'), startTime ('2023-01-04 08:00:00', '2023-01-03 09:00:00', '2023-01-05 08:00:00'), completionTime ('2023-01-03 16:00:00', '2023-01-02 17:00:00', '2023-01-05 17:00:00'), assignedEmployeeID (2, 4, 1) | Equipment : equipmentID (1, 4, 2), type ('Crane', 'Truck', 'Forklift'), make ('Ford', 'Caterpillar', 'Hyster'), model ('F-350', 'Model 222', 'FT30-40'), purchasePrice (10000.0, 75000.0, 35000.0) | Suppliers : supplierID (4, 5, 2), companyName ('ABC Concrete', 'Door Makers Ltd.', 'Window Manufacturers Inc.'), contactName ('Samuel Harris', 'Jessica Thomas', 'George Wilson'), phoneNumber ('555-555-5555', '555-321-6540', '555-789-0123'), address ('987 Fifth St, Roofsville', '135 Fourth St, Doorway', '123 Main St, Concrete City')",
        "ambiguous_queries": [
            "Select Projects.Project_Manager, Projects.Budget From Projects ORDER BY budget DESC LIMIT 1",
            "Select Projects.Construction_Manager, Projects.Budget From Projects ORDER BY budget DESC LIMIT 1",
            "Select Projects.Project_Manager, Construction_Manager, Projects.Budget From Projects ORDER BY budget DESC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"supervisor\": [{\"Projects\": [\"Project_Manager\"]}, {\"Projects\": [\"Construction_Manager\"]}, {\"Projects\": [\"Project_Manager\", \"Construction_Manager\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"supervisor\" refers to the schema \"Projects\".\"Project_Manager\"",
        "clear_ambiguity": "{\"supervisor\": {\"Projects\": [\"Project_Manager\"]}}",
        "gold_query": "Select Projects.Project_Manager, Projects.Budget From Projects ORDER BY budget DESC LIMIT 1"
    },
    {
        "index": 892,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_rating/vague_2tabs_rating.sqlite",
        "question": "What is the minimum rating?",
        "schema_without_content": "Movie : id, title, releaseYear, directorId | Actor : id, firstName, lastName | Cast : movieId, actorId, role | Genre : id, genreText | Movie_Genre : movieId, genreId | Age_Rating : ratingId, ageMinimum | Critical_Rating : ratingId, score | Tv_Show : showId, title, network, premiereDate, ageRatingId, criticalScoreId",
        "schema_with_content": "Movie : id (2, 1), title ('Inception', 'Interstellar'), releaseYear (2014, 2010), directorId (2, 1) | Actor : id (1, 2), firstName ('Matthew', 'Christopher'), lastName ('McConaughey', 'Nolan') | Cast : movieId (1, 1), actorId (2, 1), role ('Cobb', 'Director') | Genre : id (2, 1), genreText ('Adventure', 'Action') | Movie_Genre : movieId (1, 2), genreId (1, 2) | Age_Rating : ratingId (2, 1), ageMinimum (18, 15) | Critical_Rating : ratingId (1, 2), score (92, 89) | Tv_Show : showId (2, 1), title ('Breaking Bad', 'Game of Thrones'), network ('AMC', 'HBO'), premiereDate ('2008-01-20', '2011-04-17'), ageRatingId (2, 1), criticalScoreId (1, 2)",
        "ambiguous_queries": [
            "SELECT MIN(ageMinimum) FROM Age_Rating;",
            "SELECT MIN(score) FROM Critical_Rating;",
            "SELECT MIN(ageMinimum) FROM Age_Rating UNION SELECT MIN(score) FROM Critical_Rating"
        ],
        "gold_ambiguity": {
            "match": "{\"rating\": [{\"Age_Rating\": [\"ageMinimum\"]}, {\"Critical_Rating\": [\"score\"]}, {\"Age_Rating\": [\"ageMinimum\"], \"Critical_Rating\": [\"score\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"rating\" refers to the schema \"Critical_Rating\".\"score\"",
        "clear_ambiguity": "{\"rating\": {\"Critical_Rating\": [\"score\"]}}",
        "gold_query": "SELECT MIN(score) FROM Critical_Rating;"
    },
    {
        "index": 893,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_story/vague_2cols_story.sqlite",
        "question": "What were 19th-century books about?",
        "schema_without_content": "Books : BookID, Title, Author, PublicationYear, Summary, Themes, Novel | Authors : AuthorID, FirstName, LastName, BirthDate, DeathDate, Biography | Publishers : PublisherID, Name, Address, PhoneNumber | Genres : GenreID, Name | Book_Authors : BookID, AuthorID | Book_Genres : BookID, GenreID",
        "schema_with_content": "Books : BookID (1, 2, 4), Title ('1984', 'Hamlet', 'Pride and Prejudice'), Author ('Jane Austen', 'George Orwell', 'William Shakespeare'), PublicationYear (1603, 1949, 1866), Summary ('In a dystopian future...', 'A psychological thriller that delves into the mind of Raskolnikov...', 'Set against the backdrop of slavery in mid-19th century America...'), Themes ('Love, Marriage', 'Race Relations, Adventure', 'Politics, Totalitarianism'), Novel (0, 0, 0) | Authors : AuthorID (2, 4, 3), FirstName ('Jane', 'George', 'William'), LastName ('Twain', 'Orwell', 'Austen'), BirthDate ('1835-11-30', '1564-04-26', '1775-04-16'), DeathDate ('1950-01-21', '1910-04-21', '1881-02-09'), Biography ('George Orwell was a British writer and journalist...', 'Fyodor Dostoevsky was a Russian author...', 'Jane Austen was an English novelist known primarily for her six major novels...') | Publishers : PublisherID (1, 3, 5), Name ('Hachette Book Group', 'HarperCollins', 'Penguin Random House'), Address ('New York City', 'New York City', 'New York City'), PhoneNumber ('+1-212-698-7000', '+1-212-207-7000', '+1-212-339-6000') | Genres : GenreID (3, 2, 1), Name ('Science Fiction', 'Historical Fiction', 'Mystery') | Book_Authors : BookID (), AuthorID () | Book_Genres : BookID (), GenreID ()",
        "ambiguous_queries": [
            "SELECT Summary FROM 'Books' WHERE PublicationYear BETWEEN 1800 AND 1899;",
            "SELECT Themes FROM 'Books' WHERE PublicationYear BETWEEN 1800 AND 1899;",
            "SELECT Summary, Themes FROM 'Books' WHERE PublicationYear BETWEEN 1800 AND 1899;"
        ],
        "gold_ambiguity": {
            "match": "{\"What\": [{\"Books\": [\"Summary\"]}, {\"Books\": [\"Themes\"]}, {\"Books\": [\"Summary\", \"Themes\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"What\" refers to the schema \"Books\".\"Summary\"",
        "clear_ambiguity": "{\"What\": {\"Books\": [\"Summary\"]}}",
        "gold_query": "SELECT Summary FROM 'Books' WHERE PublicationYear BETWEEN 1800 AND 1899;"
    },
    {
        "index": 894,
        "db_id": "Traffic",
        "ambig_type": "vague",
        "db_file": "vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
        "question": "Show all neighborhoods and their commute time where population is less than 10000.",
        "schema_without_content": "Neighborhood : id, name, population, mean_commute_time, median_commute_time | VehicleType : id, type_name, count_passing | DailyTrafficVolume : date, neighborhood_id, total_traffic | Accidents : accident_date, neighborhood_id, num_accident | WeatherConditions : condition_datetime, neighborhood_id, rainfall, temperature, windspeed | SpeedLimits : road_segment_id, street_name, neighborhood_id, start_point, end_point, max_limit, min_limit",
        "schema_with_content": "Neighborhood : id (1, 5, 4), name ('Midtown', 'Downtown', 'Southside'), population (8000, 12000, 11000), mean_commute_time (31.5, 29.8, 30.5), median_commute_time (25.3, 28.4, 27.6) | VehicleType : id (5, 4, 1), type_name ('Truck', 'Bicycle', 'Pedestrian'), count_passing (50, 20, 200) | DailyTrafficVolume : date ('2022-01-05', '2022-01-03', '2022-01-04'), neighborhood_id (3, 2, 4), total_traffic (6000, 3000, 4500) | Accidents : accident_date ('2022-01-02', '2022-01-04', '2022-01-01'), neighborhood_id (3, 4, 5), num_accident (4, 5, 3) | WeatherConditions : condition_datetime ('2022-01-01 12:00:00', '2022-01-02 08:00:00', '2022-01-01 16:00:00'), neighborhood_id (1, 1, 1), rainfall (0, 0, 0.2), temperature (8, 5, 10.8), windspeed (2, 5, 4) | SpeedLimits : road_segment_id (1, 3, 4), street_name ('Oak St.', 'Pine St.', 'Main St.'), neighborhood_id (3, 2, 1), start_point (-79.995, -79.987, -79.993), end_point (-79.986, -79.988, -79.994), max_limit (30, 30, 30), min_limit (20, 30, 20)",
        "ambiguous_queries": [
            "SELECT name, mean_commute_time FROM Neighborhood WHERE population < '10000'",
            "SELECT name, median_commute_time FROM Neighborhood WHERE population < '10000'",
            "SELECT name, mean_commute_time, median_commute_time FROM Neighborhood WHERE population < '10000'"
        ],
        "gold_ambiguity": {
            "match": "{\"commute time\": [{\"Neighborhood\": [\"mean_commute_time\"]}, {\"Neighborhood\": [\"median_commute_time\"]}, {\"Neighborhood\": [\"mean_commute_time\", \"median_commute_time\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"commute time\" refers to the schema \"Neighborhood\".\"median_commute_time\"",
        "clear_ambiguity": "{\"commute time\": {\"Neighborhood\": [\"median_commute_time\"]}}",
        "gold_query": "SELECT name, median_commute_time FROM Neighborhood WHERE population < '10000'"
    },
    {
        "index": 895,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_film_creator/vague_2cols_film_creator.sqlite",
        "question": "List all the films, genres, release years and the film creators who made them.",
        "schema_without_content": "Studio : id, name, location, year_founded | Director : id, name, birth_date, nationality | Movie : id, title, genre, release_year, studio_id, director_id | Actor : id, name, date_of_birth, gender | Role : movie_id, actor_id, character | Award : award_name, category",
        "schema_with_content": "Studio : id (3, 2, 1), name ('Universal Studios', 'Paramount Pictures', 'Columbia Pictures'), location ('Universal City, CA', 'Culver City, CA', 'Los Angeles, CA'), year_founded (1923, 1923, 1924) | Director : id (1, 5, 2), name ('Quentin Tarantino', 'Christopher Nolan', 'Steven Spielberg'), birth_date ('July 30, 1970', 'October 9, 1964', 'March 27, 1963'), nationality ('American', 'Mexican', 'American') | Movie : id (4, 1, 3), title ('Inception', 'Pulp Fiction', \"Schindler's List\"), genre ('Fantasy/Drama', 'Historical/Drama', 'Crime/Thriller'), release_year (2006, 2010, 1994), studio_id (2, 4, 3), director_id (2, 2, 1) | Actor : id (3, 1, 4), name ('Ken Watanabe', 'Marion Cotillard', 'Brad Pitt'), date_of_birth ('September 30, 1975', 'December 18, 1963', 'October 21, 1959'), gender ('Male', 'Female', 'Male') | Role : movie_id (2, 1, 4), actor_id (1, 4, 3), character ('Dom Cobb', 'Arthur', 'Ofelia') | Award : award_name ('Golden Globe Award', 'BAFTA Award', \"Palme d'Or\"), category ('Film', 'Direction', 'Film')",
        "ambiguous_queries": [
            "SELECT Movie.title, Movie.genre, Movie.release_year, Studio.name FROM Movie JOIN Studio ON Studio.id = Movie.studio_id",
            "SELECT Movie.title, Movie.genre, Movie.release_year, Director.name FROM Movie JOIN Director ON Director.id = Movie.director_id",
            "SELECT Movie.title, Movie.genre, Movie.release_year, Studio.name, Director.name FROM Movie JOIN Studio ON Studio.id = Movie.studio_id JOIN Director ON Director.id = Movie.director_id"
        ],
        "gold_ambiguity": {
            "match": "{\"creators\": [{\"Director\": [\"name\"]}, {\"Studio\": [\"name\"]}, {\"Director\": [\"name\"], \"Studio\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"creators\" refers to the schema \"Studio\".\"name\"",
        "clear_ambiguity": "{\"creators\": {\"Studio\": [\"name\"]}}",
        "gold_query": "SELECT Movie.title, Movie.genre, Movie.release_year, Studio.name, Director.name FROM Movie JOIN Studio ON Studio.id = Movie.studio_id JOIN Director ON Director.id = Movie.director_id"
    },
    {
        "index": 896,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_release_date/vague_2cols_release_date.sqlite",
        "question": "who directed 'Selma' and when was it released?",
        "schema_without_content": "Directors : id, name, birth_date, nationality | Movies : id, title, release_year, genre, streaming_release_date, theatrical_release_date, director_id | Actors : id, first_name, last_name, date_of_birth, gender | MovieCast : movie_id, actor_id, role | FilmCrew : id, member_type, full_name, birth_date | MovieCrew : movie_id, crew_member_id, position_held",
        "schema_with_content": "Directors : id (3, 4, 2), name ('Ava DuVernay', 'Martin Scorsese', 'Guillermo del Toro'), birth_date ('1964-09-09', '1970-07-30', '1963-03-27'), nationality ('American', 'British', 'Mexican') | Movies : id (3, 4, 5), title ('Pulp Fiction', \"Pan's Labyrinth\", 'The Departed'), release_year (2006, 2006, 1994), genre ('Fantasy', 'Crime/Thriller', 'Crime/Drama'), streaming_release_date ('2007-01-19', '2014-12-25', '2006-10-05'), theatrical_release_date ('1994-10-10', '2006-08-04', '2010-07-16'), director_id (1, 5, 3) | Actors : id (2, 5, 1), first_name ('Uma', 'Jamie', 'John'), last_name ('Page', 'Foxx', 'DiCaprio'), date_of_birth ('1974-11-11', '1967-12-13', '1987-02-21'), gender ('Female', 'Male', 'Female') | MovieCast : movie_id (2, 1, 3), actor_id (1, 3, 2), role ('Dom Cobb', 'Mal', 'Ralph Fiennes') | FilmCrew : id (), member_type (), full_name (), birth_date () | MovieCrew : movie_id (), crew_member_id (), position_held ()",
        "ambiguous_queries": [
            "select streaming_release_date, name from movies join Directors on Directors.id = movies.director_id where title = 'Selma'",
            "select theatrical_release_date, name from movies join Directors on Directors.id = movies.director_id where title = 'Selma'",
            "select streaming_release_date, theatrical_release_date, name from movies join Directors on Directors.id = movies.director_id where title = 'Selma'"
        ],
        "gold_ambiguity": {
            "match": "{\"when\": [{\"Movies\": [\"streaming_release_date\", \"theatrical_release_date\"]}, {\"Movies\": [\"streaming_release_date\"]}, {\"Movies\": [\"theatrical_release_date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"when\" refers to the schema \"movies\".\"theatrical_release_date\"",
        "clear_ambiguity": "{\"when\": {\"Movies\": [\"theatrical_release_date\"]}}",
        "gold_query": "select theatrical_release_date, name from movies join Directors on Directors.id = movies.director_id where title = 'Selma'"
    },
    {
        "index": 897,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
        "question": "Show all articles, platforms that they were published on and author name.",
        "schema_without_content": "Website : id, name, url | Mobile_App : id, name | News_Agency : id, name, websiteId, mobileAppId | Article : id, title, content, publishedDate, newsAgencyId | Author : id, fullname | AuthorArticle : authorId, articleId",
        "schema_with_content": "Website : id (3, 1, 5), name ('BBC', 'Al Jazeera', 'The Guardian'), url ('https://www.nytimes.com', 'https://www.aljazeera.com', 'https://www.cnn.com') | Mobile_App : id (1, 2, 4), name ('NYT App', 'Al Jazeera App', 'Guardian App') | News_Agency : id (5, 4, 2), name ('BBC', 'CNN', 'The Guardian'), websiteId (2, 1, 5), mobileAppId (1, 3, 2) | Article : id (4, 2, 3), title ('Test Article 1', 'Test Article 3', 'Test Article 5'), content ('Yet another test article.', 'And here is one more test article.', 'This is a test article.'), publishedDate ('2024-02-19 14:31:13', '2024-02-19 14:31:13', '2024-02-19 14:31:13'), newsAgencyId (1, 3, 4) | Author : id (5, 4, 1), fullname ('David Brown', 'John Doe', 'Emily Williams') | AuthorArticle : authorId (2, 4, 1), articleId (5, 3, 1)",
        "ambiguous_queries": [
            "SELECT Article.title, Website.name,Website.url, Author.fullname FROM Article JOIN News_Agency ON News_Agency.id = Article.newsAgencyId JOIN AuthorArticle ON AuthorArticle.authorID = Article.id JOIN Author ON Author.id = AuthorArticle.authorID JOIN Website ON News_Agency.websiteID = Website.id",
            "SELECT Article.title, Mobile_App.name, Author.fullname FROM Article JOIN News_Agency ON News_Agency.id = Article.newsAgencyId JOIN AuthorArticle ON AuthorArticle.authorID = Article.id JOIN Author ON Author.id = AuthorArticle.authorID JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id",
            "SELECT Article.title, Website.name, Website.url, Mobile_App.name, Author.fullname FROM Article JOIN News_Agency ON News_Agency.id = Article.newsAgencyId JOIN AuthorArticle ON AuthorArticle.authorID = Article.id JOIN Author ON Author.id = AuthorArticle.authorID JOIN Website ON News_Agency.websiteID = Website.id JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
        ],
        "gold_ambiguity": {
            "match": "{\"name\": [{\"Mobile_App\": [\"name\"]}, {\"Website\": [\"name\", \"url\"]}, {\"Mobile_App\": [\"name\"], \"Website\": [\"name\", \"url\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"name\" refers to the schema \"Mobile_App\".\"name\"",
        "clear_ambiguity": "{\"name\": {\"Mobile_App\": [\"name\"]}}",
        "gold_query": "SELECT Article.title, Mobile_App.name, Author.fullname FROM Article JOIN News_Agency ON News_Agency.id = Article.newsAgencyId JOIN AuthorArticle ON AuthorArticle.authorID = Article.id JOIN Author ON Author.id = AuthorArticle.authorID JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
    },
    {
        "index": 898,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_location1/vague_2cols_location1.sqlite",
        "question": "Where is Coachella?",
        "schema_without_content": "Festivals : id, Country, City, FestivalName, Date, Genre | Artists : id, Name, Nationality, Occupation | Albums : id, Title, ReleaseDate, ArtistID | Songs : id, Title, Length, AlbumID | MovieTitles : id, Title, ReleaseYear, Director, LeadActor | MoviesAndSongs : id, MovieTitleID, SongID",
        "schema_with_content": "Festivals : id (1), Country ('USA'), City ('Los Angeles'), FestivalName ('Coachella Music and Arts Festival'), Date ('2023-04-13'), Genre ('Music') | Artists : id (1), Name ('Beyonce'), Nationality ('USA'), Occupation ('Musician') | Albums : id (1), Title ('Lemonade'), ReleaseDate ('2016-04-23'), ArtistID (1) | Songs : id (1), Title ('Formation'), Length ('03:38'), AlbumID (1) | MovieTitles : id (1), Title ('Inception'), ReleaseYear (2010), Director ('Christopher Nolan'), LeadActor ('Leonardo DiCaprio') | MoviesAndSongs : id (1), MovieTitleID (1), SongID (1)",
        "ambiguous_queries": [
            "SELECT Country FROM Festivals WHERE FestivalName = 'Coachella Music and Arts Festival';",
            "SELECT City FROM Festivals WHERE FestivalName = 'Coachella Music and Arts Festival';",
            "SELECT Country, City FROM Festivals WHERE FestivalName = 'Coachella Music and Arts Festival';"
        ],
        "gold_ambiguity": {
            "match": "{\"Where\": [{\"Festivals\": [\"Country\"]}, {\"Festivals\": [\"City\"]}, {\"Festivals\": [\"Country\", \"City\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Where\" refers to the schema \"Festivals\".\"City\"",
        "clear_ambiguity": "{\"Where\": {\"Festivals\": [\"City\"]}}",
        "gold_query": "SELECT City FROM Festivals WHERE FestivalName = 'Coachella Music and Arts Festival';"
    },
    {
        "index": 899,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
        "question": "What safety measures will the architect require?",
        "schema_without_content": "Material : materialID, name, quantity, cost | Employee : employeeID, firstName, lastName, hireDate, position | Project : projectID, projectName, startDate, endDate, budget | Inventory : inventoryID, materialID, quantity | Safety : safetyID, employeeID, personalProtectiveEquipment, trainingPrograms, constructionWorker",
        "schema_with_content": "Material : materialID (5, 1, 4), name ('Steel Rebars', 'Electrical Wiring', 'Cement'), quantity (100, 200, 150), cost (39.99, 18.5, 25.0) | Employee : employeeID (5, 2, 3), firstName ('Jane', 'John', 'Mike'), lastName ('White', 'Brown', 'Smith'), hireDate ('2021-03-01', '2021-05-01', '2021-04-01'), position ('Architect', 'Construction Worker', 'Engineer') | Project : projectID (1, 5, 4), projectName ('Road Repair', 'Commercial Complex', 'School Renovation'), startDate ('2021-10-01', '2021-06-01', '2021-08-01'), endDate ('2021-12-01', '2021-10-01', '2021-08-01'), budget (300000.0, 600000.0, 1000000.0) | Inventory : inventoryID (1, 2, 3), materialID (4, 2, 1), quantity (50, 100, 200) | Safety : safetyID (2, 1, 4), employeeID (3, 4, 1), personalProtectiveEquipment ('Helmet, Safety Shoes, Goggles', 'Hard Hat, Gloves, Knee Pads', 'Hard Hat, Gloves, Safety Vest'), trainingPrograms ('OSHA Training, First Aid Certification', 'Hazard Communication Training, Forklift Operation', 'Lockout/Tagout Training, Confined Space Entry'), constructionWorker ('Expert', 'Skilled', 'Novice')",
        "ambiguous_queries": [
            "SELECT Safety.personalProtectiveEquipment FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.position ='Architect'",
            "SELECT Safety.trainingPrograms FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.position ='Architect'",
            "SELECT Safety.personalProtectiveEquipment, trainingPrograms FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.position ='Architect'"
        ],
        "gold_ambiguity": {
            "match": "{\"safety measures\": [{\"Safety\": [\"personalProtectiveEquipment\"]}, {\"Safety\": [\"trainingPrograms\"]}, {\"Safety\": [\"personalProtectiveEquipment\", \"trainingPrograms\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"safety measures\" refers to the schema \"Safety\".\"personalProtectiveEquipment\" and \"Safety\".\"trainingPrograms\"",
        "clear_ambiguity": "{\"safety measures\": {\"Safety\": [\"personalProtectiveEquipment\", \"trainingPrograms\"]}}",
        "gold_query": "SELECT Safety.personalProtectiveEquipment, trainingPrograms FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.position ='Architect'"
    },
    {
        "index": 900,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_name/vague_2cols_name.sqlite",
        "question": "Who was the lead for \"Siamese Dream\"?",
        "schema_without_content": "Movies : id, title, releaseDate, genre, directorId | Directors : id, firstName, lastName, birthdate, realName, alias, story | Actors : id, firstName, lastName, dateOfBirth, movieId | Roles : id, actorID, movieID, roleName, characterDescription | MusicAlbums : id, albumTitle, releaseYear, artistId | Artists : id, birthdate, realName, alias, story",
        "schema_with_content": "Movies : id (2, 4, 5), title ('The Shawshank Redemption', 'Inception', 'Interstellar'), releaseDate ('2010-07-16', '1994-10-17', '1994-06-23'), genre ('Adventure/Sci-Fi', 'Drama', 'Crime/Thriller'), directorId (5, 3, 4) | Directors : id (3, 4, 5), firstName ('Christopher', 'Robert', 'Jonathan'), lastName ('Nolan', 'Zemeckis', 'Darabont'), birthdate ('1970-07-30', '1959-01-28', '1963-03-27'), realName ('Jonathan Rowland Nolan', 'Robert Lee Zemeckis', 'Francis Lawrence Darabont'), alias ('QT', 'Chris', 'Jony'), story ('Known for his thought-provoking films such as Inception and Interstellar.', 'Known for his unique style of filmmaking and memorable dialogue.', 'Brother of Christopher Nolan and co-writer of many of his movies.') | Actors : id (3, 4, 2), firstName ('Leonardo', 'Ellen', 'Robin'), lastName ('DiCaprio', 'Hanks', 'Williams'), dateOfBirth ('1974-02-18', '1974-11-11', '1958-07-21'), movieId (1, 2, 5) | Roles : id (3, 4, 1), actorID (1, 3, 4), movieID (5, 4, 1), roleName ('Cooper', 'Andy Dufresne', 'Benjamin Buford \"Bubba\" Blue'), characterDescription ('A pilot and scientist trying to save humanity.', 'A banker who is falsely accused of murder.', 'A man with a passion for shrimp.') | MusicAlbums : id (3, 2, 1), albumTitle ('Siamese Dream', 'Mellon Collie and the Infinite Sadness', 'The Colour and the Shape'), releaseYear (1995, 1991, 1991), artistId (1, 5, 4) | Artists : id (4, 5, 1), birthdate ('1955-04-30', '1964-12-23', '1967-02-20'), realName ('Brian Douglas Wilson', 'Edward Louis Severson III', 'William Patrick Corgan Jr.'), alias ('The Schoolboy', 'Eddie Vedder', 'Kurt Cobain'), story ('Founding member and leader of The Beach Boys.', 'One of the most influential bass players in jazz fusion.', 'Lead singer and guitarist of Nirvana.')",
        "ambiguous_queries": [
            "SELECT a.realName FROM Artists a JOIN MusicAlbums m ON a.id = m.artistId WHERE m.albumTitle = 'Siamese Dream';",
            "SELECT a.alias FROM Artists a JOIN MusicAlbums m ON a.id = m.artistId WHERE m.albumTitle = 'Siamese Dream';",
            "SELECT a.realName, alias FROM Artists a JOIN MusicAlbums m ON a.id = m.artistId WHERE m.albumTitle = 'Siamese Dream';"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Artists\": [\"realName\"]}, {\"Artists\": [\"alias\"]}, {\"Artists\": [\"realName\", \"alias\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Artists\".\"realName\"",
        "clear_ambiguity": "{\"Who\": {\"Artists\": [\"realName\"]}}",
        "gold_query": "SELECT a.realName FROM Artists a JOIN MusicAlbums m ON a.id = m.artistId WHERE m.albumTitle = 'Siamese Dream';"
    },
    {
        "index": 901,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2tabs_topic/vague_2tabs_topic.sqlite",
        "question": "Can you find all internship topics?",
        "schema_without_content": "Industry_Sector : id, name, description | Project_Name : id, project_name, start_date, end_date | Internship : id, student_id, industry_sector_id, project_id",
        "schema_with_content": "Industry_Sector : id (3, 4, 5), name ('Retail', 'Finance', 'Technology'), description ('Companies dealing with financial transactions, investments and banking operations.', 'Institutions focused on teaching, training and learning activities.', 'Includes companies involved in software development, hardware manufacturing and IT services.') | Project_Name : id (2, 1, 3), project_name ('Project Alpha', 'Project Gamma', 'Project Beta'), start_date ('2022-02-01', '2021-12-01', '2022-04-01'), end_date ('2022-05-31', '2022-01-31', '2021-09-30') | Internship : id (4, 2, 5), student_id (1, 4, 5), industry_sector_id (5, 3, 4), project_id (5, 4, 2)",
        "ambiguous_queries": [
            "SELECT name FROM Industry_Sector",
            "SELECT project_name FROM Project_Name",
            "SELECT project_name, name FROM Industry_Sector JOIN Internship ON Internship.industry_sector_id = Industry_Sector.id JOIN Project_Name ON Internship.project_id = Project_Name.id"
        ],
        "gold_ambiguity": {
            "match": "{\"internship topics\": [{\"Industry_Sector\": [\"name\"]}, {\"Project_Name\": [\"project_name\"]}, {\"Industry_Sector\": [\"name\"], \"Project_Name\": [\"project_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"internship topics\" refers to the schema \"Industry_Sector\".\"name\"",
        "clear_ambiguity": "{\"internship topics\": {\"Industry_Sector\": [\"name\"]}}",
        "gold_query": "SELECT name FROM Industry_Sector"
    },
    {
        "index": 902,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_birth_rate/vague_2cols_birth_rate.sqlite",
        "question": "Show me the birth rate for the most populous city, its population and name",
        "schema_without_content": "AgeGroups : ID, Name | BirthYears : Year, Number_Of_Births, Crude_Birth_Rate, City | Regions : RegionName, PopulationCount | Cities : CityName, RegionName | AgeGroupPopulations : AgeGroupID, Year, CityName, TotalPopulation | EducationLevels : Level, Percentage | CityEducationStats : CityName, Level, Percentage",
        "schema_with_content": "AgeGroups : ID (5, 1, 4), Name ('40-49', '0-9', '10-19') | BirthYears : Year (2021, 2018, 2019), Number_Of_Births (1000, 1150, 1050), Crude_Birth_Rate (9.6, 7.6, 9.1), City ('Houston', 'Phoenix', 'Los Angeles') | Regions : RegionName ('West', 'Midwest', 'Northeast'), PopulationCount (1000000, 1500000, 2000000) | Cities : CityName ('Houston', 'Los Angeles', 'Phoenix'), RegionName ('West', 'Midwest', 'Northeast') | AgeGroupPopulations : AgeGroupID (1, 1, 1), Year (2018, 2018, 2018), CityName ('New York', 'Phoenix', 'Los Angeles'), TotalPopulation (100000, 50000, 60000) | EducationLevels : Level ('High School Diploma', \"Bachelor's Degree\", 'Graduate Degree'), Percentage (15, 25, 35) | CityEducationStats : CityName ('Houston', 'Los Angeles', 'Phoenix'), Level ('Some College', 'Associate Degree', \"Bachelor's Degree\"), Percentage (32, 27, 36)",
        "ambiguous_queries": [
            "SELECT BirthYears.Number_Of_Births, AgeGroupPopulations.TotalPopulation, AgeGroupPopulations.CityName FROM BirthYears JOIN AgeGroupPopulations ON BirthYears.City = AgeGroupPopulations.CityName ORDER BY AgeGroupPopulations.TotalPopulation DESC LIMIT 1;",
            "SELECT BirthYears.Crude_Birth_Rate, AgeGroupPopulations.TotalPopulation, AgeGroupPopulations.CityName FROM BirthYears JOIN AgeGroupPopulations ON BirthYears.City = AgeGroupPopulations.CityName ORDER BY AgeGroupPopulations.TotalPopulation DESC LIMIT 1;",
            "SELECT BirthYears.Number_Of_Births, Crude_Birth_Rate, AgeGroupPopulations.TotalPopulation, AgeGroupPopulations.CityName FROM BirthYears JOIN AgeGroupPopulations ON BirthYears.City = AgeGroupPopulations.CityName ORDER BY AgeGroupPopulations.TotalPopulation DESC LIMIT 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"birth rate\": [{\"BirthYears\": [\"Number_Of_Births\"]}, {\"BirthYears\": [\"Crude_Birth_Rate\"]}, {\"BirthYears\": [\"Number_Of_Births\", \"Crude_Birth_Rate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"birth rate\" refers to the schema \"BirthYears\".\"Number_Of_Births\"",
        "clear_ambiguity": "{\"birth rate\": {\"BirthYears\": [\"Number_Of_Births\"]}}",
        "gold_query": "SELECT BirthYears.Number_Of_Births, AgeGroupPopulations.TotalPopulation, AgeGroupPopulations.CityName FROM BirthYears JOIN AgeGroupPopulations ON BirthYears.City = AgeGroupPopulations.CityName ORDER BY AgeGroupPopulations.TotalPopulation DESC LIMIT 1;"
    },
    {
        "index": 903,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_duration/vague_2cols_duration.sqlite",
        "question": "List movies sorted by descending order of duration?",
        "schema_without_content": "Directors : DirectorID, Name | Movies : MovieID, Title, Running_Time, Extended_Version_Length, DirectorID | Genres : GenreID, Type | Movie_Genres : MovieID, GenreID | Actors : ActorID, FirstName, LastName | Roles : RoleID, CharacterName, ActorID, MOVIEID",
        "schema_with_content": "Directors : DirectorID (3, 5, 4), Name ('James Cameron', 'Christopher Nolan', 'Quentin Tarantino') | Movies : MovieID (1, 4, 2), Title ('Inception', 'Pulp Fiction', \"Schindler's List\"), Running_Time (146, 196, 162), Extended_Version_Length (204, 215, 178), DirectorID (1, 3, 5) | Genres : GenreID (1, 5, 3), Type ('Action', 'Drama', 'Comedy') | Movie_Genres : MovieID (3, 2, 5), GenreID (3, 1, 4) | Actors : ActorID (5, 2, 4), FirstName ('Samuel L. Jackson', 'Tom Hanks', 'Johnny Depp'), LastName ('Depp', 'Pitt', 'Hanks') | Roles : RoleID (1, 4, 2), CharacterName ('Tony Montana', 'Cobb', 'Indiana Jones'), ActorID (4, 5, 3), MOVIEID (1, 4, 3)",
        "ambiguous_queries": [
            "SELECT Movies.Title FROM Movies ORDER BY Movies.Running_Time DESC",
            "SELECT Movies.Title FROM Movies ORDER BY Movies.Extended_Version_Length DESC",
            "SELECT Movies.Title FROM Movies ORDER BY Movies.Running_Time, Extended_Version_Length DESC"
        ],
        "gold_ambiguity": {
            "match": "{\"duration\": [{\"Movies\": [\"Running_Time\"]}, {\"Movies\": [\"Extended_Version_Length\"]}, {\"Movies\": [\"Running_Time\", \"Extended_Version_Length\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"duration\" refers to the schema \"Movies\".\"Extended_Version_Length\"",
        "clear_ambiguity": "{\"duration\": {\"Movies\": [\"Extended_Version_Length\"]}}",
        "gold_query": "SELECT Movies.Title FROM Movies ORDER BY Movies.Extended_Version_Length DESC"
    },
    {
        "index": 904,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_review/vague_2cols_review.sqlite",
        "question": "What was the review of Pulp Fiction?",
        "schema_without_content": "Film : ID, Title, Director, ReleaseDate, Genre, Rating | Actor : ID, Name, Birthdate, Nationality, RoleInFilm | Cinematography : ID, Technique, Equipment, ShotList, FilmID | ProductionDesign : ID, Style, Budget, Location, FilmID | SoundDesign : ID, Type, Effects, MixingLocation, FilmID | Reviews : ID, CriticName, Opinion, AudienceReviews, FilmId",
        "schema_with_content": "Film : ID (1, 2), Title ('Pulp Fiction', 'The Shawshank Redemption'), Director ('Quentin Tarantino', 'Frank Darabont'), ReleaseDate ('1994-10-14', '1994-09-23'), Genre ('Drama', 'Crime'), Rating (8.9, 8.7) | Actor : ID (1, 2), Name ('Brad Pitt', 'Morgan Freeman'), Birthdate ('1963-12-18', '1937-06-01'), Nationality ('American', 'American'), RoleInFilm ('James', 'Red') | Cinematography : ID (1, 2), Technique ('Dolly Zoom', 'Handheld'), Equipment ('Panavision Millennium XL2', 'ARRI Alexa Mini'), ShotList ('Scene 3: Close up on Andy and Red talking...', 'Scene 1: Establishing shot of prison...'), FilmID (1, 1) | ProductionDesign : ID (1, 2), Style ('Minimalist', 'Neo-noir'), Budget ('5 million', '10 million'), Location ('Los Angeles streets', 'Prison in Ohio'), FilmID (1, 2) | SoundDesign : ID (2, 1), Type ('Dialogue and Music', 'Sound effects'), Effects ('Gunshots, screams', 'Car screeching, footsteps'), MixingLocation ('Dolby Theatre', 'Dolby Theatre'), FilmID (2, 1) | Reviews : ID (1, 2), CriticName ('Pauline Kael', 'Roger Ebert'), Opinion ('A masterpiece.', 'Terrific acting.'), AudienceReviews ('Five stars!', 'Audience loved it!'), FilmId (2, 1)",
        "ambiguous_queries": [
            "SELECT Opinion FROM Reviews JOIN Film ON Film.ID = Reviews.FilmId WHERE Title = 'Pulp Fiction'",
            "SELECT AudienceReviews FROM Reviews JOIN Film ON Film.ID = Reviews.FilmId WHERE Title = 'Pulp Fiction'",
            "SELECT Opinion, AudienceReviews FROM Reviews JOIN Film ON Film.ID = Reviews.FilmId WHERE Title = 'Pulp Fiction'"
        ],
        "gold_ambiguity": {
            "match": "{\"review\": [{\"Reviews\": [\"Opinion\"]}, {\"Reviews\": [\"AudienceReviews\"]}, {\"Reviews\": [\"Opinion\", \"AudienceReviews\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"review\" refers to the schema \"Reviews\".\"Opinion\" and \"Reviews\".\"AudienceReviews\"",
        "clear_ambiguity": "{\"review\": {\"Reviews\": [\"Opinion\", \"AudienceReviews\"]}}",
        "gold_query": "SELECT Opinion, AudienceReviews FROM Reviews JOIN Film ON Film.ID = Reviews.FilmId WHERE Title = 'Pulp Fiction'"
    },
    {
        "index": 905,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
        "question": "When were the computers purchased?",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth | Teachers : TeacherID, FirstName, LastName, Subject | Classes : ClassID, TeacherID, RoomNumber, DayOfWeek, TimeStart | Enrollments : EnrollmentID, StudentID, ClassID, Grade | Materials : MaterialID, Month, Year, ResourceType, Quantity, Price | Expenses : ExpenseID, MaterialID, Supplier, Amount",
        "schema_with_content": "Students : StudentID (3, 2, 1), FirstName ('Jane', 'John', 'Alice'), LastName ('Johnson', 'Smith', 'Doe'), DateOfBirth ('2005-09-10', '2003-06-15', '2004-07-22') | Teachers : TeacherID (3, 2, 1), FirstName ('Mr.', 'Ms.', 'Mrs.'), LastName ('Green', 'White', 'Black'), Subject ('History', 'Mathematics', 'English') | Classes : ClassID (1, 2, 3), TeacherID (2, 1, 3), RoomNumber (301, 101, 201), DayOfWeek ('Monday', 'Friday', 'Wednesday'), TimeStart ('14:00:00', '09:00:00', '11:00:00') | Enrollments : EnrollmentID (2, 5, 3), StudentID (1, 3, 2), ClassID (1, 2, 3), Grade () | Materials : MaterialID (1, 2, 3), Month (3, 1, 2), Year (2021, 2021, 2021), ResourceType ('Computers', 'Stationery', 'Textbooks'), Quantity (50, 10, 100), Price (1.5, 25.5, 500) | Expenses : ExpenseID (3, 2, 1), MaterialID (2, 1, 3), Supplier ('Bookstore', 'Electronics Store', 'Office Supply Store'), Amount (500, 2550, 150)",
        "ambiguous_queries": [
            "SELECT Materials.Month FROM Materials WHERE Materials.ResourceType = 'Computers'",
            "SELECT Materials.Year FROM Materials WHERE Materials.ResourceType = 'Computers'",
            "SELECT Materials.Month, Year FROM Materials WHERE Materials.ResourceType = 'Computers'"
        ],
        "gold_ambiguity": {
            "match": "{\"When\": [{\"Materials\": [\"Month\"]}, {\"Materials\": [\"Year\"]}, {\"Materials\": [\"Month\", \"Year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"When\" refers to the schema \"Materials\".\"Year\"",
        "clear_ambiguity": "{\"When\": {\"Materials\": [\"Year\"]}}",
        "gold_query": "SELECT Materials.Year FROM Materials WHERE Materials.ResourceType = 'Computers'"
    },
    {
        "index": 906,
        "db_id": "Traffic",
        "ambig_type": "vague",
        "db_file": "vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
        "question": "Show all neighborhoods and streets, commute time there and speed limits where minimum speed limit is 30.",
        "schema_without_content": "Neighborhood : id, name, population, mean_commute_time, median_commute_time | VehicleType : id, type_name, count_passing | DailyTrafficVolume : date, neighborhood_id, total_traffic | Accidents : accident_date, neighborhood_id, num_accident | WeatherConditions : condition_datetime, neighborhood_id, rainfall, temperature, windspeed | SpeedLimits : road_segment_id, street_name, neighborhood_id, start_point, end_point, max_limit, min_limit",
        "schema_with_content": "Neighborhood : id (3, 2, 5), name ('Downtown', 'Southside', 'Midtown'), population (11000, 8000, 8500), mean_commute_time (30.5, 31.5, 30.2), median_commute_time (26.9, 28.4, 25.3) | VehicleType : id (4, 3, 2), type_name ('Bicycle', 'Car', 'Truck'), count_passing (100, 200, 50) | DailyTrafficVolume : date ('2022-01-05', '2022-01-01', '2022-01-04'), neighborhood_id (4, 5, 3), total_traffic (6000, 5500, 4500) | Accidents : accident_date ('2022-01-05', '2022-01-04', '2022-01-02'), neighborhood_id (5, 3, 1), num_accident (3, 5, 2) | WeatherConditions : condition_datetime ('2022-01-02 08:00:00', '2022-01-01 20:00:00', '2022-01-01 08:00:00'), neighborhood_id (1, 2, 1), rainfall (0, 0.2, 0.1), temperature (10.5, 12, 5), windspeed (7, 6, 4) | SpeedLimits : road_segment_id (2, 4, 5), street_name ('Main St.', 'Elm St.', 'Maple St.'), neighborhood_id (3, 2, 5), start_point (-79.999, -79.995, -79.993), end_point (-79.988, -79.994, -79.986), max_limit (40, 30, 30), min_limit (20, 30, 20)",
        "ambiguous_queries": [
            "SELECT name, mean_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'",
            "SELECT name, median_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'",
            "SELECT name, mean_commute_time, median_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'"
        ],
        "gold_ambiguity": {
            "match": "{\"commute time\": [{\"Neighborhood\": [\"mean_commute_time\"]}, {\"Neighborhood\": [\"median_commute_time\"]}, {\"Neighborhood\": [\"mean_commute_time\", \"median_commute_time\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"commute time\" refers to the schema \"Neighborhood\".\"median_commute_time\"",
        "clear_ambiguity": "{\"commute time\": {\"Neighborhood\": [\"median_commute_time\"]}}",
        "gold_query": "SELECT name, median_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'"
    },
    {
        "index": 907,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_allowance/vague_2cols_allowance.sqlite",
        "question": "What is the maximum baggage allowance?",
        "schema_without_content": "Airlines : AirlineID, Name, Headquarters, Founded, Website | FlightRoutes : RouteID, OriginAirport, DestinationAirport, DepartureTime, ArrivalTime, AircraftType, SeatsAvailable | Passengers : PassengerID, FirstName, LastName, DateOfBirth, Email | BaggageLimits : LimitID, BagWeightLimit, BagPieceLimit, Airlines, CheckInDeadline | AirportFacilities : FacilityID, AirportName, TerminalCount, RestaurantCount, ShoppingMallCount, ParkingCapacity, WiFiAvailability | SecurityCheckpoints : CheckpointID, AirportName, Location, OpeningHours, StaffCount, WaitTimes",
        "schema_with_content": "Airlines : AirlineID (2, 1, 3), Name ('American Airlines', 'Delta Air Lines', 'Southwest Airlines'), Headquarters ('Chicago, Illinois', 'Atlanta, Georgia', 'Fort Worth, Texas'), Founded ('1967-03-15', '1930-04-15', '1928-04-17'), Website ('https://www.united.com', 'https://www.delta.com', 'https://www.southwest.com') | FlightRoutes : RouteID (4, 2, 3), OriginAirport ('DFW', 'SEA', 'EWR'), DestinationAirport ('ORD', 'LAX', 'MIA'), DepartureTime ('2023-03-01 09:00:00', '2023-03-01 07:00:00', '2023-03-01 08:00:00'), ArrivalTime ('2023-03-01 15:00:00', '2023-03-01 12:00:00', '2023-03-01 14:00:00'), AircraftType ('Airbus A320', 'Boeing 737', 'Boeing 787'), SeatsAvailable (225, 250, 150) | Passengers : PassengerID (3, 5, 2), FirstName ('John', 'Bob', 'Emma'), LastName ('Johnson', 'Smith', 'Williams'), DateOfBirth ('1991-04-05', '1992-02-15', '1993-05-10'), Email ('jane.smith@example.com', 'emma.martinez@example.com', 'john.doe@example.com') | BaggageLimits : LimitID (3, 1, 4), BagWeightLimit (35, 25, 20), BagPieceLimit (1, 2, 1), Airlines ('JetBlue', 'Delta', 'Southwest'), CheckInDeadline ('2023-03-01 06:00:00', '2023-03-01 05:00:00', '2023-03-01 03:00:00') | AirportFacilities : FacilityID (5, 2, 3), AirportName ('DFW International Airport', 'Los Angeles International Airport', 'Hartsfield–Jackson Atlanta International Airport'), TerminalCount (6, 5, 9), RestaurantCount (150, 60, 100), ShoppingMallCount (15, 25, 20), ParkingCapacity (12000, 12000, 15000), WiFiAvailability (1, 1, 1) | SecurityCheckpoints : CheckpointID (3, 2, 4), AirportName ('Seattle–Tacoma International Airport', 'DFW International Airport', 'Hartsfield–Jackson Atlanta International Airport'), Location ('Terminal A', 'Domestic Terminal North', 'Terminal A'), OpeningHours ('04:00 - 22:00', '04:00 - 22:00', '04:00 - 22:00'), StaffCount (100, 110, 150), WaitTimes (50, 30, 35)",
        "ambiguous_queries": [
            "SELECT MAX(BagWeightLimit) FROM BaggageLimits",
            "SELECT MAX(BagPieceLimit) FROM BaggageLimits",
            "SELECT MAX(BagWeightLimit, BagPieceLimit) FROM BaggageLimits"
        ],
        "gold_ambiguity": {
            "match": "{\"baggage allowance\": [{\"BaggageLimits\": [\"BagWeightLimit\"]}, {\"BaggageLimits\": [\"BagPieceLimit\"]}, {\"BaggageLimits\": [\"BagWeightLimit\", \"BagPieceLimit\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"baggage allowance\" refers to the schema \"BaggageLimits\".\"BagWeightLimit\" and \"BaggageLimits\".\"BagPieceLimit\"",
        "clear_ambiguity": "{\"baggage allowance\": {\"BaggageLimits\": [\"BagWeightLimit\", \"BagPieceLimit\"]}}",
        "gold_query": "SELECT MAX(BagWeightLimit, BagPieceLimit) FROM BaggageLimits"
    },
    {
        "index": 908,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_bank_size/vague_2cols_bank_size.sqlite",
        "question": "Display the bank size where the employee position is a teller",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, Email | Accounts : AccountID, CustomerID, Balance | Loans : LoanID, CustomerID, Amount, InterestRate, StartDate, EndDate | Transactions : TransactionID, AccountID, Date, Type, Amount | Banks : BankID, Number_of_Branches, Countries_served, Bank | Employees : EmployeeID, FirstName, LastName, Position, Salary, BankID",
        "schema_with_content": "Customers : CustomerID (2, 1), FirstName ('Jane', 'John'), LastName ('Smith', 'Doe'), Email ('jane.smith@example.com', 'john.doe@example.com') | Accounts : AccountID (1, 2), CustomerID (2, 1), Balance (1000.0, 500.0) | Loans : LoanID (2, 1), CustomerID (2, 1), Amount (50000, 75000), InterestRate (3, 3.5), StartDate ('2023-01-01', '2023-02-01'), EndDate ('2028-01-31', '2026-12-31') | Transactions : TransactionID (2, 1), AccountID (1, 2), Date ('2024-02-19 15:10:48', '2024-02-19 15:10:48'), Type ('Withdrawal', 'Deposit'), Amount (100.0, -50.0) | Banks : BankID (1, 2), Number_of_Branches (100, 200), Countries_served ('Europe', 'USA and Canada'), Bank ('ABC Bank', 'XYZ Bank') | Employees : EmployeeID (2, 1), FirstName ('Bob', 'Alice'), LastName ('Wright', 'Hanson'), Position ('Teller', 'Manager'), Salary (35000.0, 50000.0), BankID (2, 1)",
        "ambiguous_queries": [
            "Select banks.Number_of_Branches from banks join employees on employees.bankid = banks.bankid where position = 'Teller'",
            "Select banks.Countries_served from banks join employees on employees.bankid = banks.bankid where position = 'Teller'",
            "Select banks.Number_of_Branches, Countries_served from banks join employees on employees.bankid = banks.bankid where position = 'Teller'"
        ],
        "gold_ambiguity": {
            "match": "{\"bank size\": [{\"Banks\": [\"Number_of_Branches\", \"Countries_served\"]}, {\"Banks\": [\"Number_of_Branches\"]}, {\"Banks\": [\"Countries_served\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"bank size\" refers to the schema \"banks\".\"Countries_served\"",
        "clear_ambiguity": "{\"bank size\": {\"Banks\": [\"Countries_served\"]}}",
        "gold_query": "Select banks.Number_of_Branches, Countries_served from banks join employees on employees.bankid = banks.bankid where position = 'Teller'"
    },
    {
        "index": 909,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2tabs_mortality_trends/vague_2tabs_mortality_trends.sqlite",
        "question": "Show me the mortality trends and population for new york",
        "schema_without_content": "Person : personID, name, dateofbirth | Disease : diseaseID, name, deathrate | Number_Of_Deaths : year, total_deaths | Crude_Death_Rate : year, rate | Province : provinceID, name, year, population",
        "schema_with_content": "Person : personID (3, 4, 1), name ('Bob Johnson', 'John Doe', 'Alice Brown'), dateofbirth ('1985-08-10', '1990-06-27', '1975-03-15') | Disease : diseaseID (3, 5, 4), name ('Diabetes', 'Respiratory diseases', 'Heart Disease'), deathrate (0.07, 0.05, 0.1) | Number_Of_Deaths : year (2000, 2002, 2004), total_deaths (51000, 50000, 53000) | Crude_Death_Rate : year (2001, 2004, 2000), rate (9.4, 9.3, 9.6) | Province : provinceID (3, 5, 4), name ('California', 'Texas', 'Illinois'), year (2000, 2004, 2003), population (10000000, 15000000, 20000000)",
        "ambiguous_queries": [
            "SELECT Number_Of_Deaths.total_deaths, Province.population FROM Province JOIN Number_Of_Deaths ON Province.year = Number_Of_Deaths.year WHERE Province.name = 'New York'",
            "SELECT Crude_Death_Rate.rate, Province.population FROM Province JOIN Crude_Death_Rate ON Province.year = Crude_Death_Rate.year WHERE Province.name = 'New York'",
            "SELECT Number_Of_Deaths.total_deaths, Crude_Death_Rate.rate, Province.population FROM Province JOIN Number_Of_Deaths ON Province.year = Number_Of_Deaths.year JOIN Crude_Death_Rate ON Province.year = Crude_Death_Rate.year WHERE Province.name = 'New York'"
        ],
        "gold_ambiguity": {
            "match": "{\"mortality trends\": [{\"Crude_Death_Rate\": [\"rate\"]}, {\"Number_Of_Deaths\": [\"total_deaths\"]}, {\"Crude_Death_Rate\": [\"rate\"], \"Number_Of_Deaths\": [\"total_deaths\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"mortality trends\" refers to the schema \"Crude_Death_Rate\".\"rate\"",
        "clear_ambiguity": "{\"mortality trends\": {\"Crude_Death_Rate\": [\"rate\"]}}",
        "gold_query": "SELECT Crude_Death_Rate.rate, Province.population FROM Province JOIN Crude_Death_Rate ON Province.year = Crude_Death_Rate.year WHERE Province.name = 'New York'"
    },
    {
        "index": 910,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2tabs_developmental_milestones/vague_2tabs_developmental_milestones.sqlite",
        "question": "Display a list of ids and milestone names in order of children's age lowest first",
        "schema_without_content": "Children : id, name, age | Physical_Milestones : id, milestone_name, description | Cognitive_Milestones : id, milestone_name, description | Child_Age : child_id, physical_milestone_id, cognitive_milestone_id",
        "schema_with_content": "Children : id (1, 5, 2), name ('Bob', 'Eva', 'Alice'), age (5, 4, 3) | Physical_Milestones : id (1, 5, 4), milestone_name ('Climbing', 'Jumping', 'Running'), description ('Can jump in place', 'Can climb onto and off of furniture without assistance', 'Can walk independently without support') | Cognitive_Milestones : id (3, 5, 4), milestone_name ('Memory', 'Recognition', 'Understanding'), description ('Can solve simple problems', 'Remembers own name', 'Imitates actions of others') | Child_Age : child_id (4, 3, 1), physical_milestone_id (3, 5, 2), cognitive_milestone_id (1, 3, 2)",
        "ambiguous_queries": [
            "SELECT Physical_Milestones.id, Physical_Milestones.milestone_name FROM Physical_Milestones JOIN Child_Age ON Child_Age.physical_milestone_id = Physical_Milestones.id JOIN Children ON Child_Age.child_id = Children.id ORDER BY Children.age DESC",
            "SELECT Cognitive_Milestones.id, Cognitive_Milestones.milestone_name FROM Cognitive_Milestones JOIN Child_Age ON Child_Age.cognitive_milestone_id = Cognitive_Milestones.id JOIN Children ON Child_Age.child_id = Children.id ORDER BY Children.age DESC",
            "SELECT Physical_Milestones.id, Physical_Milestones.milestone_name, Cognitive_Milestones.id, Cognitive_Milestones.milestone_name FROM Physical_Milestones JOIN Child_Age ON Child_Age.physical_milestone_id = Physical_Milestones.id JOIN Children ON Child_Age.child_id = Children.id JOIN Cognitive_Milestones ON Child_Age.cognitive_milestone_id = Cognitive_Milestones.id ORDER BY Children.age DESC"
        ],
        "gold_ambiguity": {
            "match": "{\"ids and milestone names\": [{\"Cognitive_Milestones\": [\"id\", \"milestone_name\"]}, {\"Physical_Milestones\": [\"id\", \"milestone_name\"]}, {\"Cognitive_Milestones\": [\"id\", \"milestone_name\"], \"Physical_Milestones\": [\"id\", \"milestone_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"ids and milestone names\" refers to the schema \"Physical_Milestones\".\"id\" and \"Physical_Milestones\".\"milestone_name\"",
        "clear_ambiguity": "{\"ids and milestone names\": {\"Physical_Milestones\": [\"id\", \"milestone_name\"]}}",
        "gold_query": "SELECT Physical_Milestones.id, Physical_Milestones.milestone_name FROM Physical_Milestones JOIN Child_Age ON Child_Age.physical_milestone_id = Physical_Milestones.id JOIN Children ON Child_Age.child_id = Children.id ORDER BY Children.age DESC"
    },
    {
        "index": 911,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_audience/vague_2tabs_audience.sqlite",
        "question": "Select all magazines and their audience",
        "schema_without_content": "Demographic_Groups : id, group_name, population | Professional_Fields : field_id, field_name | Magazines : magazine_id, title, publication_date, demographic_group_id, professional_field_id | Articles : article_id, title, content, author_id, magazine_id | Authors : author_id, name, occupation, demographic_group_id | Readers : reader_id, name, email, preferred_magazine_id, demographic_group_id",
        "schema_with_content": "Demographic_Groups : id (3, 2, 5), group_name ('Age Group A', 'Occupation E', 'Education Level D'), population (400000, 100000, 300000) | Professional_Fields : field_id (3, 2, 5), field_name ('Technology', 'Entertainment', 'Health') | Magazines : magazine_id (2, 4, 3), title ('Wellness Magazine', 'News Weekly', 'ShowBiz Daily'), publication_date ('2023-01-07', '2023-01-01', '2023-01-15'), demographic_group_id (5, 2, 4), professional_field_id (2, 5, 1) | Articles : article_id (2, 1, 4), title ('Breaking News', 'New Tech Innovations', 'Stock Market Update'), content ('Discover new tech products...', 'Exclusive interviews with stars...', 'Latest news...'), author_id (1, 3, 5), magazine_id (1, 3, 5) | Authors : author_id (2, 4, 1), name ('John Doe', 'Tom Brown', 'Bob Williams'), occupation ('Reporter', 'Columnist', 'Photographer'), demographic_group_id (2, 1, 3) | Readers : reader_id (3, 4, 5), name ('David Miller', 'Emma Taylor', 'Hannah King'), email ('alice@example.com', 'david@example.com', 'emma@example.com'), preferred_magazine_id (1, 4, 3), demographic_group_id (3, 1, 4)",
        "ambiguous_queries": [
            "Select m.title, a.group_name FROM Magazines m JOIN Demographic_Groups a on a.id = m.demographic_group_id",
            "Select m.title, a.field_name FROM Magazines m JOIN Professional_Fields a on a.Field_id = m.Professional_Field_id",
            "Select m.title, a.group_name, pf.field_name FROM Magazines m JOIN Demographic_Groups a on a.id = m.demographic_group_id JOIN Professional_Fields pf on pf.Field_id = m.Professional_Field_id"
        ],
        "gold_ambiguity": {
            "match": "{\"audience\": [{\"Demographic_Groups\": [\"group_name\"]}, {\"Professional_Fields\": [\"field_name\"]}, {\"Demographic_Groups\": [\"group_name\"], \"Professional_Fields\": [\"field_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"audience\" refers to the schema \"Demographic_Groups\".\"group_name\"",
        "clear_ambiguity": "{\"audience\": {\"Demographic_Groups\": [\"group_name\"]}}",
        "gold_query": "Select m.title, a.group_name FROM Magazines m JOIN Demographic_Groups a on a.id = m.demographic_group_id"
    },
    {
        "index": 912,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_level_of_prestige/vague_2cols_level_of_prestige.sqlite",
        "question": "show me the top university",
        "schema_without_content": "Students : id, name, age, major | Universities : id, universityName, admissionRate, ranking, location | Departments : id, departmentName, universityId | Enrollments : studentID, courseID, semester, grade, enrollmentDate | Courses : id, courseCode, courseTitle, creditHours, departmentId",
        "schema_with_content": "Students : id (2, 3, 1), name ('David Brown', 'Mike Johnson', 'Jane Smith'), age (23, 22, 21), major ('Physics', 'Computer Science', 'Chemistry') | Universities : id (3, 5, 2), universityName ('California Institute of Technology', 'Massachusetts Institute of Technology', 'Stanford University'), admissionRate (0.53, 0.89, 0.51), ranking (1, 2, 3), location ('Palo Alto', 'Cambridge', 'Los Angeles') | Departments : id (5, 3, 2), departmentName ('Department of Chemistry', 'Department of Computer Science', 'Department of Physics'), universityId (5, 3, 1) | Enrollments : studentID (1, 2, 4), courseID (1, 3, 4), semester ('Winter 2023', 'Spring 2022', 'Fall 2021'), grade ('A', 'A-', 'A'), enrollmentDate ('2021-08-25', '2023-01-10', '2022-08-25') | Courses : id (4, 3, 5), courseCode ('BIOL101', 'CS101', 'PHYS101'), courseTitle ('General Biology', 'Elementary Calculus', 'Introduction to Computer Science'), creditHours (3, 4, 4), departmentId (2, 1, 4)",
        "ambiguous_queries": [
            "select universityname from universities ORDER BY admissionRate DESC LIMIT 1",
            "select universityname from universities ORDER BY ranking DESC LIMIT 1",
            "select universityname from universities ORDER BY admissionRate, ranking DESC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"top\": [{\"Universities\": [\"admissionRate\", \"ranking\"]}, {\"Universities\": [\"admissionRate\"]}, {\"Universities\": [\"ranking\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"top\" refers to the schema \"universities\".\"ranking\"",
        "clear_ambiguity": "{\"top\": {\"Universities\": [\"ranking\"]}}",
        "gold_query": "select universityname from universities ORDER BY admissionRate, ranking DESC LIMIT 1"
    },
    {
        "index": 913,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2tabs_place_of_origin/vague_2tabs_place_of_origin.sqlite",
        "question": "Where is the insulin pen made?",
        "schema_without_content": "Country : id, name, population | Manufacturing_Company : id, company_name, address | Medical_Device : id, device_name, manufacturing_company_id, country_id | Patient : id, first_name, last_name, age | Doctor : id, doctor_name, speciality | Prescription : prescription_id, patient_id, doctor_id, medical_device_id, quantity, date",
        "schema_with_content": "Country : id (1, 2, 4), name ('UK', 'France', 'Germany'), population (65200000, 37600000, 83000000) | Manufacturing_Company : id (3, 1, 2), company_name ('MedPlus Innovations', 'XYZ Biomedicals', 'ABC MedTech'), address ('123 Main St, New York, NY', '101 Pine St, San Francisco, CA', '789 Oak St, Los Angeles, CA') | Medical_Device : id (5, 4, 3), device_name ('Oxygen Concentrator', 'EKG Machine', 'Blood Pressure Monitor'), manufacturing_company_id (4, 1, 3), country_id (3, 5, 2) | Patient : id (5, 1, 3), first_name ('Jane', 'Alice', 'John'), last_name ('Doe', 'Smith', 'Williams'), age (32, 55, 28) | Doctor : id (3, 1, 2), doctor_name ('Dr. Black', 'Dr. White', 'Dr. Brown'), speciality ('Neurology', 'Allergy and Immunology', 'Orthopedics') | Prescription : prescription_id (1, 2, 3), patient_id (5, 2, 1), doctor_id (4, 2, 3), medical_device_id (2, 5, 4), quantity (3, 2, 1), date ('2024-02-19 13:15:05', '2024-02-19 13:15:05', '2024-02-19 13:15:05')",
        "ambiguous_queries": [
            "Select name from Country join Medical_Device on Medical_Device.country_id = Country.id where device_name = 'Insulin Pen'",
            "Select company_name from Manufacturing_Company join Medical_Device on Medical_Device.Manufacturing_Company_id = Manufacturing_Company.id where device_name = 'Insulin Pen'",
            "Select name, company_name from Country join Medical_Device on Medical_Device.country_id = Country.id join Manufacturing_Company on Medical_Device.Manufacturing_Company_id = Manufacturing_Company.id where device_name = 'Insulin Pen'"
        ],
        "gold_ambiguity": {
            "match": "{\"Where\": [{\"Country\": [\"name\"]}, {\"Manufacturing_Company\": [\"company_name\"]}, {\"Country\": [\"name\"], \"Manufacturing_Company\": [\"company_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Where\" refers to the schema \"Manufacturing_Company\".\"company_name\"",
        "clear_ambiguity": "{\"Where\": {\"Manufacturing_Company\": [\"company_name\"]}}",
        "gold_query": "Select company_name from Manufacturing_Company join Medical_Device on Medical_Device.Manufacturing_Company_id = Manufacturing_Company.id where device_name = 'Insulin Pen'"
    },
    {
        "index": 914,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_consulted_sources/vague_2tabs_consulted_sources.sqlite",
        "question": "What sources were used when filming 'The Future of Work'?",
        "schema_without_content": "Experts : id, name, specialty | Archival_Footage : id, description, source, EXPERT_ID | Documentary : id, title, release_date, ARCHIVE_FOOTAGE_ID, EXPERT_ID | News_Articles : id, headline, content, publication_date, DOCUMENTARY_ID, EXPERT_ID | Interviews : id, date, details, EXPERT_ID",
        "schema_with_content": "Experts : id (3, 5, 1), name ('Michael White', 'Jane Doe', 'Bob Johnson'), specialty ('Economy', 'Environmental Science', 'Politics') | Archival_Footage : id (5, 4, 1), description ('World Economic Forum 2018', 'Global Health Summit', '2016 Presidential Election Debates'), source ('YouTube', 'Vimeo', 'National Geographic Channel'), EXPERT_ID (2, 1, 5) | Documentary : id (2, 5, 4), title ('The Future of Work', 'Green New Deal Explained', 'The Rise of Political Polarization'), release_date ('2020-09-01', '2021-02-01', '2021-07-15'), ARCHIVE_FOOTAGE_ID (5, 3, 2), EXPERT_ID (3, 2, 1) | News_Articles : id (5, 1, 2), headline ('COVID Vaccine Distribution', \"China's AI Advancements\", 'Automation Impact on Jobs'), content ('Updates on global vaccine distribution...', 'Discusses key issues and candidates...', \"Analyzes China's progress in AI...\"), publication_date ('2024-02-19 14:43:33', '2024-02-19 14:43:33', '2024-02-19 14:43:33'), DOCUMENTARY_ID (5, 1, 3), EXPERT_ID (1, 3, 4) | Interviews : id (2, 4, 5), date ('2021-11-01 10:30:00', '2021-09-05 11:00:00', '2021-10-15 16:00:00'), details ('Interview about economic recovery post-pandemic.', 'Insights on future technology trends and challenges.', 'Analysis of healthcare system improvements needed.'), EXPERT_ID (1, 5, 3)",
        "ambiguous_queries": [
            "SELECT name, specialty FROM Experts JOIN Documentary ON Documentary.EXPERT_ID = Experts.id WHERE title = 'The Future of Work'",
            "SELECT description, source FROM Archival_Footage JOIN Documentary ON Documentary.Archive_Footage_ID = Archival_Footage.id WHERE title = 'The Future of Work'",
            "SELECT name, specialty, description, source FROM Experts JOIN Documentary ON Documentary.EXPERT_ID = Experts.id JOIN Archival_Footage ON Documentary.Archive_Footage_ID = Archival_Footage.id WHERE title = 'The Future of Work'"
        ],
        "gold_ambiguity": {
            "match": "{\"sources\": [{\"Archival_Footage\": [\"description\", \"source\"]}, {\"Experts\": [\"name\", \"specialty\"]}, {\"Archival_Footage\": [\"description\", \"source\"], \"Experts\": [\"name\", \"specialty\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"sources\" refers to the schema \"Experts\".\"name\" and \"Experts\".\"specialty\"",
        "clear_ambiguity": "{\"sources\": {\"Experts\": [\"name\", \"specialty\"]}}",
        "gold_query": "SELECT name, specialty FROM Experts JOIN Documentary ON Documentary.EXPERT_ID = Experts.id WHERE title = 'The Future of Work'"
    },
    {
        "index": 915,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
        "question": "show me cities and immigrants where more than 60,000 people live",
        "schema_without_content": "Population : id, Total_Population, Foreign_born_Population, Naturalized_Citizens, Municipality | EducationLevel : id, Age_Group, Graduation_Rate, HighSchool_Diploma_or_Higher, College_Degree | EmploymentStatus : id, Age_Group, Unemployed, Employed, Labor_Force_Participation_Rate | HealthStatistics : id, Age_Group, Obesity_Rate, Smoking_Prevalence, LifeExpectancy | IncomeLevels : id, Age_Group, Median_Income, Poverty_Rate, Low_Income_Percentage",
        "schema_with_content": "Population : id (3, 5, 1), Total_Population (100000, 70000, 50000), Foreign_born_Population (3500, 1500, 2500), Naturalized_Citizens (2500, 1500, 2000), Municipality ('Los Angeles', 'Philadelphia', 'Chicago') | EducationLevel : id (2, 1, 4), Age_Group ('Age Group 3', 'Age Group 5', 'Age Group 2'), Graduation_Rate (70, 75, 85), HighSchool_Diploma_or_Higher (6000, 3000, 7000), College_Degree (3500, 2500, 3000) | EmploymentStatus : id (4, 1, 2), Age_Group ('Age Group 2', 'Age Group 4', 'Age Group 1'), Unemployed (100, 400, 500), Employed (4000, 6500, 5000), Labor_Force_Participation_Rate (25, 35, 45) | HealthStatistics : id (1, 2, 5), Age_Group ('Age Group 4', 'Age Group 3', 'Age Group 5'), Obesity_Rate (30, 40, 20), Smoking_Prevalence (40, 25, 30), LifeExpectancy (73, 74, 72) | IncomeLevels : id (3, 2, 4), Age_Group ('Age Group 4', 'Age Group 3', 'Age Group 1'), Median_Income (60000, 80000, 70000), Poverty_Rate (15, 20, 12), Low_Income_Percentage (850, 750, 500)",
        "ambiguous_queries": [
            "select municipality, Foreign_born_Population from population where Total_Population > 60000",
            "select municipality, Naturalized_Citizens from population where Total_Population > 60000",
            "select municipality, Foreign_born_Population, Naturalized_Citizens from population where Total_Population > 60000"
        ],
        "gold_ambiguity": {
            "match": "{\"immigrants\": [{\"Population\": [\"Foreign_born_Population\", \"Naturalized_Citizens\"]}, {\"Population\": [\"Foreign_born_Population\"]}, {\"Population\": [\"Naturalized_Citizens\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"immigrants\" refers to the schema \"population\".\"Foreign_born_Population\"",
        "clear_ambiguity": "{\"immigrants\": {\"Population\": [\"Foreign_born_Population\"]}}",
        "gold_query": "select municipality, Foreign_born_Population from population where Total_Population > 60000"
    },
    {
        "index": 916,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_timeframe/vague_2cols_timeframe.sqlite",
        "question": "When is it estimated that the population density will reach 340?",
        "schema_without_content": "Annual_Demographics : Year, Month, Census, Population, Area, Density | Age_Groups : AgeGroupID, CityName, PercentageOfTotalPopulation | Educational_Levels : EducationLevelID, CityName, BachelorsOrHigher, HighSchoolGraduate, LessThanHighSchoolDiploma | Income_Brackets : IncomeBracketID, CityName, Under50k, Between50And100K, Above100k | Ethnicities : EthnicityID, CityName, White, BlackOrAfricanAmerican, HispanicOrLatino, Asian, NativeAmericanAlaskanNative, OtherPacificIslander, TwoOrMoreRaces | Occupations : OccupationID, CityName, ManagementOrProfessional, ServiceIndustry, Sales, OfficeAdminSupport, FarmingFishing, ConstructionTrades, ProductionTransportation, MaterialMoving, PersonalServices, HealthcareTechnician, Teachers, ArmedForces, None",
        "schema_with_content": "Annual_Demographics : Year (2020, 2023, 2022), Month (1, 4, 5), Census ('Estimate', 'Estimate', 'Estimate'), Population (331489267, 333000000, 336000000), Area (9833517.0, 9876543.0, 9899432.0), Density (341.0, 340.0, 334.0) | Age_Groups : AgeGroupID (1, 5, 3), CityName ('Houston', 'New York City', 'Los Angeles'), PercentageOfTotalPopulation (0.1, 0.15, 0.06) | Educational_Levels : EducationLevelID (4, 5, 1), CityName ('Los Angeles', 'Philadelphia', 'New York City'), BachelorsOrHigher (45, 70, 60), HighSchoolGraduate (25, 25, 25), LessThanHighSchoolDiploma (10, 25, 15) | Income_Brackets : IncomeBracketID (3, 5, 4), CityName ('Philadelphia', 'New York City', 'Los Angeles'), Under50k (25, 20, 25), Between50And100K (40, 40, 45), Above100k (30, 35, 25) | Ethnicities : EthnicityID (5, 4, 1), CityName ('New York City', 'Philadelphia', 'Los Angeles'), White (45, 25, 35), BlackOrAfricanAmerican (20, 20, 10), HispanicOrLatino (25, 40, 25), Asian (10, 10, 10), NativeAmericanAlaskanNative (2, 3, 2), OtherPacificIslander (1, 1, 1), TwoOrMoreRaces (2, 3, 2) | Occupations : OccupationID (2, 1, 4), CityName ('Chicago', 'Los Angeles', 'New York City'), ManagementOrProfessional (15, 15, 10), ServiceIndustry (20, 25, 20), Sales (15, 15, 15), OfficeAdminSupport (10, 10, 10), FarmingFishing (5, 5, 5), ConstructionTrades (10, 10, 10), ProductionTransportation (5, 5, 5), MaterialMoving (5, 5, 5), PersonalServices (10, 10, 10), HealthcareTechnician (5, 5, 5), Teachers (5, 5, 5), ArmedForces (5, 5, 5), None (2, 3, 4)",
        "ambiguous_queries": [
            "SELECT Year From Annual_Demographics WHERE Density >=340 ORDER BY Year LIMIT 1",
            "SELECT Month From Annual_Demographics WHERE Density >=340 ORDER BY Month LIMIT 1",
            "SELECT Year, Month From Annual_Demographics WHERE Density >=340 ORDER BY Year, Month LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"population\": [{\"Annual_Demographics\": [\"Year\"]}, {\"Annual_Demographics\": [\"Month\"]}, {\"Annual_Demographics\": [\"Year\", \"Month\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"population\" refers to the schema \"Annual_Demographics\".\"Year\"",
        "clear_ambiguity": "{\"population\": {\"Annual_Demographics\": [\"Year\"]}}",
        "gold_query": "SELECT Year, Month From Annual_Demographics WHERE Density >=340 ORDER BY Year, Month LIMIT 1"
    },
    {
        "index": 917,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2tabs_location/vague_2tabs_location.sqlite",
        "question": "Retrieve the location of the campus where Alice Johnson was teaching on the 1st of June 2021",
        "schema_without_content": "City : id, name, population | State : id, full_name | Campus : id, campus_name, city_id, state_id | Teacher : id, firstName, lastName, email | teachesAt : teacherId, campusId, startDate, endDate | Student : id, firstName, lastName, email | enrolledIn : studentId, campusId, enrollmentStartDate",
        "schema_with_content": "City : id (1, 3, 5), name ('New York', 'Chicago', 'Houston'), population (1681115, 2697391, 2326146) | State : id (4, 2, 1), full_name ('Illinois', 'New York', 'Arizona') | Campus : id (1, 4, 5), campus_name ('New York University', 'University of California Los Angeles', 'University of Chicago'), city_id (3, 2, 1), state_id (3, 1, 2) | Teacher : id (4, 5, 2), firstName ('Michael', 'Alice', 'Jane'), lastName ('Wilson', 'Brown', 'Smith'), email ('jane.smith@example.com', 'david.wilson@example.com', 'john.doe@example.com') | teachesAt : teacherId (2, 5, 3), campusId (3, 1, 4), startDate ('2021-01-01', '2021-01-01', '2021-01-01'), endDate ('2021-12-31', '2021-12-31', '2021-12-31') | Student : id (5, 1, 4), firstName ('Alexander', 'Olivia', 'Emily'), lastName ('Jackson', 'Garcia', 'Martinez'), email ('isabelle.jackson@example.com', 'olivia.garcia@example.com', 'emily.davis@example.com') | enrolledIn : studentId (4, 2, 3), campusId (2, 3, 4), enrollmentStartDate ('2021-01-01', '2021-01-01', '2021-01-01')",
        "ambiguous_queries": [
            "select L.name from City L inner join Campus C on C.city_id = L.id inner join teachesAt TA on TA.campusId = C.id inner join Teacher T on T.id = TA.teacherid where TA.startDate < '2021-06-01' and ta.endDate > '2021-06-01' and T.email= 'alice.johnson@example.com'",
            "select L.full_name from State L inner join Campus C on C.state_id = L.id inner join teachesAt TA on TA.campusId = C.id inner join Teacher T on T.id = TA.teacherid where TA.startDate < '2021-06-01' and ta.endDate > '2021-06-01' and T.email= 'alice.johnson@example.com'",
            "select L.name, S.full_name from City L inner join Campus C on C.city_id = L.id inner join teachesAt TA on TA.campusId = C.id join State S on C.state_id = S.id inner join Teacher T on T.id = TA.teacherid where TA.startDate < '2021-06-01' and ta.endDate > '2021-06-01' and T.email= 'alice.johnson@example.com'"
        ],
        "gold_ambiguity": {
            "match": "{\"location\": [{\"City\": [\"name\"]}, {\"State\": [\"full_name\"]}, {\"City\": [\"name\"], \"State\": [\"full_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"location\" refers to the schema \"City\".\"name\"",
        "clear_ambiguity": "{\"location\": {\"City\": [\"name\"]}}",
        "gold_query": "select L.name from City L inner join Campus C on C.city_id = L.id inner join teachesAt TA on TA.campusId = C.id inner join Teacher T on T.id = TA.teacherid where TA.startDate < '2021-06-01' and ta.endDate > '2021-06-01' and T.email= 'alice.johnson@example.com'"
    },
    {
        "index": 918,
        "db_id": "Job Postings",
        "ambig_type": "vague",
        "db_file": "vague/Job Postings/vague_2tabs_qualifications/vague_2tabs_qualifications.sqlite",
        "question": "Display a list of qualifications and the number of available jobs for each",
        "schema_without_content": "Degree_Level : id, level_name, description | Certification : id, cert_name, description | Job_Type : id, type_name, description | Company : id, company_name, location | Job_Post : id, title, job_type_id, degree_level_id, certification_id, company_id | Applicant : id, first_name, last_name, email, phone_number, application_date | Application : id, applicant_id, job_post_id, resume_url, cover_letter, status",
        "schema_with_content": "Degree_Level : id (3, 2, 5), level_name ('Master', 'Associate', 'PhD'), description ('An associate degree is typically a two-year program that provides vocational training.', 'A masters degree is usually pursued after obtaining a bachelors degree and can take one to three years.', 'A high school diploma represents completion of secondary education.') | Certification : id (5, 2, 4), cert_name ('Project Management Professional', 'Oracle Certified Java Programmer', 'Certified Scrum Master'), description ('This certification verifies programming skill with the Java language.', 'This certification validates proficiency in developing software solutions on Microsoft platforms.', 'This certification demonstrates expertise in project management principles.') | Job_Type : id (3, 2, 1), type_name ('Internship', 'Part Time', 'Full Time'), description ('Short-term work experience opportunity often related to educational field.', 'Non-permanent position with limited hours and benefits.', 'Independent contractor providing services on a per-project basis.') | Company : id (5, 4, 1), company_name ('XYZ Software Solutions', 'KLM International Inc.', 'RST Media Networks'), location ('Chicago', 'New York', 'Los Angeles') | Job_Post : id (3, 5, 2), title ('Software Engineer', 'UX Designer', 'Data Analyst'), job_type_id (1, 1, 2), degree_level_id (1, 2, 3), certification_id (4, 2, 1), company_id (1, 3, 4) | Applicant : id (3, 1, 2), first_name ('Emily', 'Jane', 'John'), last_name ('Smith', 'Brown', 'Green'), email ('emilygreen@email.com', 'janedoe@email.com', 'alicewilliams@email.com'), phone_number ('555-098-7654', '555-135-7890', '555-987-6543'), application_date ('2024-02-19 12:44:27', '2024-02-19 12:44:27', '2024-02-19 12:44:27') | Application : id (2, 1, 5), applicant_id (1, 2, 3), job_post_id (1, 1, 2), resume_url ('https://example.com/resume/johnsmith.pdf', 'https://example.com/resume/alicewilliams.pdf', 'https://example.com/resume/johnsmith.pdf'), cover_letter ('https://example.com/coverletters/janedoe.txt', 'https://example.com/coverletters/johnsmith.txt', 'https://example.com/coverletters/alicewilliams.txt'), status ('Rejected', 'Waitlisted', 'Hired')",
        "ambiguous_queries": [
            "select level_name, count(*) from Degree_Level join Job_Post on Job_Post.degree_level_id = Degree_Level.id group by level_name",
            "select cert_name, count(*) from Certification join Job_Post on Job_Post.Certification_id = Certification.id group by cert_name",
            "select level_name, cert_name, count(*) from Degree_Level join Job_Post on Job_Post.degree_level_id = Degree_Level.id join Certification on Job_Post.Certification_id = Certification.id group by level_name, cert_name"
        ],
        "gold_ambiguity": {
            "match": "{\"qualifications\": [{\"Certification\": [\"cert_name\"]}, {\"Degree_Level\": [\"level_name\"]}, {\"Certification\": [\"cert_name\"], \"Degree_Level\": [\"level_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"qualifications\" refers to the schema \"Degree_Level\".\"level_name\"",
        "clear_ambiguity": "{\"qualifications\": {\"Degree_Level\": [\"level_name\"]}}",
        "gold_query": "select level_name, cert_name, count(*) from Degree_Level join Job_Post on Job_Post.degree_level_id = Degree_Level.id join Certification on Job_Post.Certification_id = Certification.id group by level_name, cert_name"
    },
    {
        "index": 919,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_rating/vague_2tabs_rating.sqlite",
        "question": "What is the rating of Breaking Bad?",
        "schema_without_content": "Movie : id, title, releaseYear, directorId | Actor : id, firstName, lastName | Cast : movieId, actorId, role | Genre : id, genreText | Movie_Genre : movieId, genreId | Age_Rating : ratingId, ageMinimum | Critical_Rating : ratingId, score | Tv_Show : showId, title, network, premiereDate, ageRatingId, criticalScoreId",
        "schema_with_content": "Movie : id (1, 2), title ('Inception', 'Interstellar'), releaseYear (2014, 2010), directorId (1, 2) | Actor : id (2, 1), firstName ('Matthew', 'Christopher'), lastName ('McConaughey', 'Nolan') | Cast : movieId (1, 1), actorId (2, 1), role ('Cobb', 'Director') | Genre : id (1, 2), genreText ('Adventure', 'Action') | Movie_Genre : movieId (1, 2), genreId (2, 1) | Age_Rating : ratingId (1, 2), ageMinimum (15, 18) | Critical_Rating : ratingId (1, 2), score (92, 89) | Tv_Show : showId (1, 2), title ('Breaking Bad', 'Game of Thrones'), network ('AMC', 'HBO'), premiereDate ('2008-01-20', '2011-04-17'), ageRatingId (2, 1), criticalScoreId (2, 1)",
        "ambiguous_queries": [
            "SELECT Age_Rating.ageMinimum FROM Age_Rating JOIN Tv_Show ON Tv_Show.AgeRatingId = Age_Rating.ratingId WHERE Tv_Show.title = 'Breaking Bad';",
            "SELECT Critical_Rating.score FROM Critical_Rating JOIN Tv_Show ON Tv_Show.CriticalScoreId = Critical_Rating.ratingId WHERE Tv_Show.title = 'Breaking Bad';",
            "SELECT Age_Rating.ageMinimum FROM Age_Rating JOIN Tv_Show ON Tv_Show.AgeRatingId = Age_Rating.ratingId WHERE Tv_Show.title = 'Breaking Bad' UNION SELECT Critical_Rating.score FROM Critical_Rating JOIN Tv_Show ON Tv_Show.CriticalScoreId = Critical_Rating.ratingId WHERE Tv_Show.title = 'Breaking Bad';"
        ],
        "gold_ambiguity": {
            "match": "{\"rating\": [{\"Age_Rating\": [\"ageMinimum\"]}, {\"Critical_Rating\": [\"score\"]}, {\"Age_Rating\": [\"ageMinimum\"], \"Critical_Rating\": [\"score\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"rating\" refers to the schema \"Critical_Rating\".\"score\"",
        "clear_ambiguity": "{\"rating\": {\"Critical_Rating\": [\"score\"]}}",
        "gold_query": "SELECT Age_Rating.ageMinimum FROM Age_Rating JOIN Tv_Show ON Tv_Show.AgeRatingId = Age_Rating.ratingId WHERE Tv_Show.title = 'Breaking Bad' UNION SELECT Critical_Rating.score FROM Critical_Rating JOIN Tv_Show ON Tv_Show.CriticalScoreId = Critical_Rating.ratingId WHERE Tv_Show.title = 'Breaking Bad';"
    },
    {
        "index": 920,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
        "question": "Give me a list of all investigative journalists, their qualifications and their article titles",
        "schema_without_content": "journalists : id, name, email, phoneNumber, Degree, Certificate, Investigative_Journalist | articles : id, title, content, publishDate, authorId, publicationId, topicId | publications : id, name, address | sources : id, name, contactInfo | topics : id, description",
        "schema_with_content": "journalists : id (1, 2), name ('John Doe', 'Jane Smith'), email ('jane@example.com', 'john@example.com'), phoneNumber ('098-765-4321', '123-456-7890'), Degree ('Bachelor of Arts in Journalism', 'Master of Science in Communication'), Certificate ('Certified Professional Writer', 'Advanced Reporting Specialist'), Investigative_Journalist (1, 0) | articles : id (1, 2), title ('Breaking News: New Government Policy', 'Economic Outlook for Q2'), content ('The government has announced a new policy that will impact citizens.', 'Experts discuss the economic outlook for the second quarter.'), publishDate ('2023-04-01T10:00:00Z', '2023-04-02T10:00:00Z'), authorId (2, 1), publicationId (2, 1), topicId (3, 1) | publications : id (2, 1), name ('Weekly Post', 'Daily Times'), address ('456 Elm St, Anycity, USA', '123 Main St, Anytown, USA') | sources : id (1, 2), name ('Local Police Department', 'City Hall'), contactInfo ('Phone: +1 (555) 987-6543  Email: police@anystate.us', 'Phone: +1 (555) 123-4567  Email: cityhall@anycity.gov') | topics : id (2, 1), description ('Government and Politics', 'Business and Economy')",
        "ambiguous_queries": [
            "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1",
            "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1",
            "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
        ],
        "gold_ambiguity": {
            "match": "{\"qualifications\": [{\"journalists\": [\"Degree\", \"Certificate\"]}, {\"journalists\": [\"Degree\"]}, {\"journalists\": [\"Certificate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"qualifications\" refers to the schema \"journalists\".\"Certificate\"",
        "clear_ambiguity": "{\"qualifications\": {\"journalists\": [\"Certificate\"]}}",
        "gold_query": "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
    },
    {
        "index": 921,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
        "question": "Show how many students have achieved each developmental milestone",
        "schema_without_content": "Students : id, firstName, lastName, dateOfBirth | Classes : classID, className, teacherName | Enrollments : enrollmentId, studentId, classId | MilestoneRecords : recordId, studentId, physicalMilestones, cognitiveMilestones, childAge, otherDetails | Attendance : attendanceId, studentId, classId, dateAttended, isPresent | DisciplineLogs : logId, studentId, incidentDate, reasonForDiscipline, disciplinaryAction, resolutionDate",
        "schema_with_content": "Students : id (1, 4, 2), firstName ('Jane', 'John', 'Emily'), lastName ('Brown', 'Doe', 'Smith'), dateOfBirth ('2006-11-12', '2008-09-15', '2007-03-20') | Classes : classID (2, 3, 1), className ('Art', 'Physical Education', 'English'), teacherName ('Mr. Thompson', 'Ms. Green', 'Mr. White') | Enrollments : enrollmentId (1, 3, 5), studentId (1, 2, 3), classId (1, 2, 3) | MilestoneRecords : recordId (1, 5, 2), studentId (3, 5, 4), physicalMilestones ('Walking and running', 'Playing sports', 'Riding a bike'), cognitiveMilestones ('Reading simple sentences', 'Counting to 10', 'Understanding basic concepts'), childAge (7, 10, 9), otherDetails ('No additional details', 'No additional details', 'No additional details') | Attendance : attendanceId (4, 1, 5), studentId (3, 1, 4), classId (1, 4, 5), dateAttended ('2022-09-03', '2022-09-01', '2022-09-02'), isPresent (1, 1, 1) | DisciplineLogs : logId (1, 5, 2), studentId (2, 5, 1), incidentDate ('2022-09-06', '2022-09-10', '2022-09-07'), reasonForDiscipline ('Bullying another student', 'Cheating on a test', 'Late assignment submission'), disciplinaryAction ('Detention', 'Community service', 'Apology letter'), resolutionDate ('2022-09-15', '2022-09-08', '2022-09-10')",
        "ambiguous_queries": [
            "SELECT MilestoneRecords.physicalMilestones, Count(*) as Pupil_Count FROM MileStoneRecords",
            "SELECT MilestoneRecords.cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords",
            "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
        ],
        "gold_ambiguity": {
            "match": "{\"milestone\": [{\"MilestoneRecords\": [\"physicalMilestones\"]}, {\"MilestoneRecords\": [\"cognitiveMilestones\"]}, {\"MilestoneRecords\": [\"physicalMilestones\", \"cognitiveMilestones\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"milestone\" refers to the schema \"MileStoneRecords\".\"physicalMilestones\"",
        "clear_ambiguity": "{\"milestone\": {\"MilestoneRecords\": [\"physicalMilestones\"]}}",
        "gold_query": "SELECT MilestoneRecords.physicalMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
    },
    {
        "index": 922,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_building_design/vague_2cols_building_design.sqlite",
        "question": "Who did the building design of LAX airport?",
        "schema_without_content": "Architects : id, name, email | Airports : id, name, location | Terminals : id, airport_id, terminal_name, capacity | Buildings : id, architecture_firm, architect, airport_terminal | Flights : id, flight_number, departure_airport, arrival_airport",
        "schema_with_content": "Architects : id (4, 1, 2), name ('Michael Johnson', 'William Brown', 'Jane Smith'), email ('michael.johnson@example.com', 'jane.smith@example.com', 'emily.davis@example.com') | Airports : id (3, 4, 2), name ('Los Angeles LAX', 'Tokyo Narita', 'London Heathrow'), location ('Los Angeles, USA', 'New York City, USA', 'London, UK') | Terminals : id (3, 1, 2), airport_id (3, 1, 4), terminal_name ('Terminal 1', 'Terminal 2', 'Terminal 4'), capacity (40, 60, 50) | Buildings : id (5, 4, 1), architecture_firm ('Studio B', 'Studio D', 'Studio A'), architect ('Michael Johnson', 'William Brown', 'John Doe'), airport_terminal ('Terminal 4', 'Terminal 2', 'Terminal 1') | Flights : id (2, 1, 5), flight_number ('DL456', 'BA789', 'AF101'), departure_airport ('Los Angeles LAX', 'London Heathrow', 'Paris CDG'), arrival_airport ('Tokyo Narita', 'London Heathrow', 'Paris CDG')",
        "ambiguous_queries": [
            "SELECT architecture_firm FROM Buildings JOIN Terminals ON Buildings.airport_terminal = Terminals.terminal_name JOIN Airports ON Terminals.airport_id = Airports.id WHERE Airports.name LIKE '%LAX%'",
            "SELECT architect FROM Buildings JOIN Terminals ON Buildings.airport_terminal = Terminals.terminal_name JOIN Airports ON Terminals.airport_id = Airports.id WHERE Airports.name LIKE '%LAX%'",
            "SELECT architecture_firm, architect FROM Buildings JOIN Terminals ON Buildings.airport_terminal = Terminals.terminal_name JOIN Airports ON Terminals.airport_id = Airports.id WHERE Airports.name LIKE '%LAX%'"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Buildings\": [\"architecture_firm\"]}, {\"Buildings\": [\"architect\"]}, {\"Buildings\": [\"architecture_firm\", \"architect\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Buildings\".\"architecture_firm\"",
        "clear_ambiguity": "{\"Who\": {\"Buildings\": [\"architecture_firm\"]}}",
        "gold_query": "SELECT architecture_firm FROM Buildings JOIN Terminals ON Buildings.airport_terminal = Terminals.terminal_name JOIN Airports ON Terminals.airport_id = Airports.id WHERE Airports.name LIKE '%LAX%'"
    },
    {
        "index": 923,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
        "question": "What are the airports that were established before 1950, and can you provide their ids, locations and websites?",
        "schema_without_content": "Airports : id, Name, IATA_Code, ICAA_Code, Latitude, Longitude, Elevation, Timezone, Direction_Indicator, Surface_Area, Movement_Area, Runway_Length, City, State, Phone_Number, Website, Email, Year_Established | Flights : Flight_ID, Origin_Airport, Destination_Airport, Departure_Time, Arrival_Time, Carrier_Airlines, Aircraft_Type, Number_of_Passengers, Flight_Status, Gate_Number | Pilots : Pilot_Id, FirstName, LastName, License_Number, Date_Of_Birth, Total_Flight_Hours, Rating, Current_Assignment, Hire_Date | Passengers : Passenger_Id, FirstName, LastName, Date_Of_Birth, Nationality, Passport_Number, Contact_Phone_Number, Seat_Preference, Special_Assistance | Baggage : Bag_Id, Flight_Id, Owner_FirstName, Owner_LastName, Size_Inches, Weight_Kgs, Description, Status | Aircrafts : Aircraft_Id, Model_Name, Manufacturer, Registration_Mark, Type, Capacity, Range_Miles, Maximum_Speed, Cruise_Speed, Service_Ceiling, Operator_Id",
        "schema_with_content": "Airports : id (1, 2), Name ('John F Kennedy International Airport', 'Los Angeles International Airport'), IATA_Code ('JFK', 'LAX'), ICAA_Code ('LACI', 'N7988'), Latitude (-73.6954, -118.4053), Longitude (33.9435, -40.6452), Elevation (279, 13), Timezone (-5, -8), Direction_Indicator ('R', 'W'), Surface_Area (2560.0, 1627.4), Movement_Area (2560.0, 1627.4), Runway_Length (9899.0, 3147.0), City ('New York', 'Los Angeles'), State ('Queens', 'Los Angeles County'), Phone_Number ('+1-855-463-5252', '+1-800-222-1222'), Website ('https://www.jfkairport.com/', 'https://www.flylax.com/'), Email ('info@jfkairport.com', 'information@flylax.com'), Year_Established (1937, 1943) | Flights : Flight_ID (1, 2), Origin_Airport ('Dallas/Fort Worth International Airport', 'JFK'), Destination_Airport ('LAX', 'Heathrow Airport'), Departure_Time ('2023-01-02 14:00:00', '2023-01-01 08:00:00'), Arrival_Time ('2023-01-02 19:00:00', '2023-01-01 11:00:00'), Carrier_Airlines ('American Airlines', 'British Airways'), Aircraft_Type ('Boeing 787 Dreamliner', 'Boeing 747 Jumbo Jet'), Number_of_Passengers (250, 300), Flight_Status ('On Time', 'On Time'), Gate_Number (10, 15) | Pilots : Pilot_Id (1, 2), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), License_Number ('ABCD1234', 'EFGH5678'), Date_Of_Birth ('1985-06-15', '1990-09-20'), Total_Flight_Hours (5000, 4000), Rating ('ATP', 'ATP'), Current_Assignment ('Captain', 'Co-pilot'), Hire_Date ('2015-01-01', '2018-01-01') | Passengers : Passenger_Id (1, 2), FirstName ('Bob', 'Alice'), LastName ('Williams', 'Johnson'), Date_Of_Birth ('1990-03-10', '1985-07-25'), Nationality ('USA', 'UK'), Passport_Number ('US123456789', 'GB987654321'), Contact_Phone_Number ('+1-555-123-4567', '+44-777-123-4567'), Seat_Preference ('Aisle', 'Window'), Special_Assistance (1, 0) | Baggage : Bag_Id (1, 2), Flight_Id (1, 2), Owner_FirstName ('John', 'Jane'), Owner_LastName ('Doe', 'Smith'), Size_Inches ('22x15x10', '21x14x9'), Weight_Kgs (8.0, 10.0), Description ('Personal items and toiletries', 'Business suit and laptop'), Status ('Carry on', 'Checked') | Aircrafts : Aircraft_Id (2, 1), Model_Name ('Airbus A320neo', 'Boeing 787-8'), Manufacturer ('Boeing', 'Airbus'), Registration_Mark ('F-HSEZ', 'N123BA'), Type ('Passenger', 'Passenger'), Capacity (180, 265), Range_Miles ('3100', '7000'), Maximum_Speed (0.85, 0.85), Cruise_Speed (0.8, 0.8), Service_Ceiling (43000, 41000), Operator_Id (1, 2)",
        "ambiguous_queries": [
            "SELECT id, Name, City, Website FROM Airports WHERE Year_Established < 1950",
            "SELECT id, Name, State, Website FROM Airports WHERE Year_Established < 1950",
            "SELECT id, Name, City, State, Website FROM Airports WHERE Year_Established < 1950"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"Airports\": [\"City\"]}, {\"Airports\": [\"State\"]}, {\"Airports\": [\"City\", \"State\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"Airports\".\"City\"",
        "clear_ambiguity": "{\"locations\": {\"Airports\": [\"City\"]}}",
        "gold_query": "SELECT id, Name, City, Website FROM Airports WHERE Year_Established < 1950"
    },
    {
        "index": 924,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_length/vague_2cols_length.sqlite",
        "question": "List the three longest-running shows and their duration.",
        "schema_without_content": "Actor : actor_id, first_name, last_name, birthdate | Actress : actress_id, first_name, last_name, birthdate | Show : show_id, title, genre, Number_of_seasons, Number_of_episodes, release_year | Director : director_id, first_name, last_name, birthdate | Producer : producer_id, first_name, last_name, birthdate | Genre : genre_id, genre_name",
        "schema_with_content": "Actor : actor_id (1, 2, 4), first_name ('Jane', 'John', 'Emily'), last_name ('Smith', 'Black', 'Brown'), birthdate ('1998-07-30', '2000-01-01', '1995-03-25') | Actress : actress_id (3, 5, 2), first_name ('Carol', 'Eva', 'Betty'), last_name ('Yellow', 'Green', 'Purple'), birthdate ('1975-06-02', '1981-11-13', '1990-05-15') | Show : show_id (1, 2, 4), title ('The Big Bang Theory', 'Friends', 'Breaking Bad'), genre ('Crime Drama', 'Fantasy Drama', 'Romantic Comedy'), Number_of_seasons (10, 5, 12), Number_of_episodes (279, 39, 60), release_year (2011, 2016, 2008) | Director : director_id (3, 5, 1), first_name ('David', 'Christopher', 'Quentin'), last_name ('Wilson', 'Nolan', 'Tarantino'), birthdate ('1970-07-30', '1964-03-25', '1963-03-27') | Producer : producer_id (5, 2, 3), first_name ('Bryan', 'Barbara', 'Frank'), last_name ('Lee', 'Marshall', 'Weaver'), birthdate ('1950-01-15', '1957-05-02', '1956-03-07') | Genre : genre_id (1, 4, 3), genre_name ('Biography', 'Drama', 'Action')",
        "ambiguous_queries": [
            "SELECT title, Number_of_seasons FROM Show ORDER BY Number_of_seasons DESC LIMIT 3;",
            "SELECT title, Number_of_episodes FROM Show ORDER BY Number_of_episodes DESC LIMIT 3;",
            "SELECT title, Number_of_seasons, Number_of_episodes FROM Show ORDER BY Number_of_seasons, Number_of_episodes DESC LIMIT 3;"
        ],
        "gold_ambiguity": {
            "match": "{\"duration\": [{\"Show\": [\"Number_of_seasons\"]}, {\"Show\": [\"Number_of_episodes\"]}, {\"Show\": [\"Number_of_seasons\", \"Number_of_episodes\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"duration\" refers to the schema \"Show\".\"Number_of_seasons\" and \"Show\".\"Number_of_episodes\"",
        "clear_ambiguity": "{\"duration\": {\"Show\": [\"Number_of_seasons\", \"Number_of_episodes\"]}}",
        "gold_query": "SELECT title, Number_of_seasons, Number_of_episodes FROM Show ORDER BY Number_of_seasons, Number_of_episodes DESC LIMIT 3;"
    },
    {
        "index": 925,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_life_expectancy/vague_2cols_life_expectancy.sqlite",
        "question": "What is the life expectancy of the region with the lowest ID?",
        "schema_without_content": "Persons : person_id, first_name, last_name, birthdate | Regions : region_id, name, population | LifeExpectancies : id, average_years_of_life, gender_specific_life_expectancy, region_id | Occupations : occupation_id, job_title, industry | EducationLevels : education_level_id, level_name, years_of_education | PersonOccupation : person_occupation_id, persons_id, occupations_id | PersonEducation : person_education_id, persons_id, education_levels_id",
        "schema_with_content": "Persons : person_id (1, 2), first_name ('Jane', 'John'), last_name ('Doe', 'Smith'), birthdate ('1980-06-23', '1978-09-15') | Regions : region_id (1, 2), name ('Region A', 'Region B'), population (3000000, 5000000) | LifeExpectancies : id (1, 2), average_years_of_life (78.1, 75.5), gender_specific_life_expectancy (73.2, 75.8), region_id (2, 1) | Occupations : occupation_id (1, 2), job_title ('Software Engineer', 'Teacher'), industry ('Technology', 'Education') | EducationLevels : education_level_id (2, 1), level_name ('High School Diploma', \"Bachelor's Degree\"), years_of_education (12, 16) | PersonOccupation : person_occupation_id (), persons_id (), occupations_id () | PersonEducation : person_education_id (), persons_id (), education_levels_id ()",
        "ambiguous_queries": [
            "SELECT average_years_of_life FROM LifeExpectancies ORDER BY region_id LIMIT 1;",
            "SELECT gender_specific_life_expectancy FROM LifeExpectancies ORDER BY region_id LIMIT 1;",
            "SELECT average_years_of_life, gender_specific_life_expectancy FROM LifeExpectancies ORDER BY region_id LIMIT 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"life expectancy\": [{\"LifeExpectancies\": [\"average_years_of_life\"]}, {\"LifeExpectancies\": [\"gender_specific_life_expectancy\"]}, {\"LifeExpectancies\": [\"average_years_of_life\", \"gender_specific_life_expectancy\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"life expectancy\" refers to the schema \"LifeExpectancies\".\"average_years_of_life\" and \"LifeExpectancies\".\"gender_specific_life_expectancy\"",
        "clear_ambiguity": "{\"life expectancy\": {\"LifeExpectancies\": [\"average_years_of_life\", \"gender_specific_life_expectancy\"]}}",
        "gold_query": "SELECT average_years_of_life, gender_specific_life_expectancy FROM LifeExpectancies ORDER BY region_id LIMIT 1;"
    },
    {
        "index": 926,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
        "question": "What can help students prepare for testing?",
        "schema_without_content": "OnlineResources : resourceId, url, title | TestPreparations : preparationId, topic, resourcesId, servicesId | TutoringServices : serviceId, tutorId, date, duration | Tutors : id, firstName, lastName",
        "schema_with_content": "OnlineResources : resourceId (5, 4, 3), url ('https://www.historyworld.org/', 'https://www.english-test.net/', 'https://www.mathopenref.com/'), title ('Chem Guide', 'Math Open Ref', 'History World') | TestPreparations : preparationId (5, 1, 3), topic ('Organic Chemistry', 'Electricity and Magnetism', 'Ancient History'), resourcesId (2, 1, 3), servicesId (1, 4, 2) | TutoringServices : serviceId (1, 2, 5), tutorId (5, 1, 4), date ('2022-12-23 17:00:00', '2022-12-19 18:00:00', '2022-12-22 15:30:00'), duration (45, 75, 60) | Tutors : id (4, 1, 5), firstName ('Michael', 'Emily', 'John'), lastName ('Green', 'Doe', 'Smith')",
        "ambiguous_queries": [
            "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration FROM TutoringServices JOIN Tutors ON Tutors.id = TutoringServices.tutorId",
            "SELECT OnlineResources.title, OnlineResources.url FROM OnlineResources",
            "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration, OnlineResources.title, OnlineResources.url FROM TutoringServices JOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId JOIN OnlineResources ON OnlineResources.resourceID = TestPreparations.resourcesID JOIN Tutors ON Tutors.id = TutoringServices.tutorId"
        ],
        "gold_ambiguity": {
            "match": "{\"students\": [{\"OnlineResources\": [\"title\", \"url\"]}, {\"OnlineResources\": [\"title\", \"url\"], \"TutoringServices\": [\"date\", \"duration\"], \"Tutors\": [\"firstname\", \"lastname\"]}, {\"TutoringServices\": [\"date\", \"duration\"], \"Tutors\": [\"firstname\", \"lastname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"students\" refers to the schema \"TutoringServices\".\"date\" and \"TutoringServices\".\"duration\" and \"Tutors\".\"firstname\" and \"Tutors\".\"lastname\"",
        "clear_ambiguity": "{\"students\": {\"TutoringServices\": [\"date\", \"duration\"], \"Tutors\": [\"firstname\", \"lastname\"]}}",
        "gold_query": "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration FROM TutoringServices JOIN Tutors ON Tutors.id = TutoringServices.tutorId"
    },
    {
        "index": 927,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_sale_date/vague_2cols_sale_date.sqlite",
        "question": "What are the ticket prices and sale dates for the Lady Gaga concert?",
        "schema_without_content": "Artists : ArtistID, ArtistName | Albums : AlbumID, AlbumTitle, ReleaseDate, ARTISTID | Tickets : TicketID, EventID, Quantity, On_Sale_Date, Pre_sale_Date, Price | Venues : VenueID, Name, Address | Events : EventID, EventName, StartDateTime, EndDateTime, VenueID, TICKETID | Performances : PerformanceID, EventID, ArtistID, PerformanceStartTime, PerformanceEndTime",
        "schema_with_content": "Artists : ArtistID (3, 4, 2), ArtistName ('Justin Timberlake', 'Adele', 'Elton John') | Albums : AlbumID (5, 4, 3), AlbumTitle ('Goodbye Yellow Brick Road', 'The Fame', '21'), ReleaseDate ('1973-05-08', '2006-11-12', '2016-04-07'), ARTISTID (3, 4, 2) | Tickets : TicketID (4, 2, 3), EventID (1, 4, 3), Quantity (150, 200, 300), On_Sale_Date ('2023-07-01', '2023-09-01', '2023-06-01'), Pre_sale_Date ('2023-09-15', '2023-07-15', '2023-06-15'), Price (69.99, 49.99, 89.99) | Venues : VenueID (3, 5, 2), Name ('Madison Square Garden', 'Royal Arena', 'Staples Center'), Address ('Copenhagen, Denmark', 'Brooklyn, NY', 'London, UK') | Events : EventID (5, 1, 3), EventName ('Lady Gaga Jazz & Piano Tour', 'Adele Concert', 'Justin Timberlake Man Of The Woods Tour'), StartDateTime ('2023-06-10 19:00:00', '2023-07-15 20:00:00', '2023-09-15 20:00:00'), EndDateTime ('2023-08-20 22:30:00', '2023-09-15 23:30:00', '2023-07-15 23:30:00'), VenueID (3, 4, 1), TICKETID (2, 4, 1) | Performances : PerformanceID (5, 2, 4), EventID (4, 1, 2), ArtistID (3, 1, 5), PerformanceStartTime ('2023-06-10 19:30:00', '2023-09-15 20:30:00', '2023-07-15 20:30:00'), PerformanceEndTime ('2023-06-10 22:00:00', '2023-09-15 23:00:00', '2023-08-20 22:00:00')",
        "ambiguous_queries": [
            "SELECT On_Sale_Date, Price FROM Tickets JOIN Events On Tickets.EventID = Events.EventID JOIN Performances on Performances.EventID = Events.EventID JOIN Artists On Performances.ArtistID = Artists.ArtistID WHERE artistname = 'Lady Gaga';",
            "SELECT Pre_sale_Date, Price FROM Tickets JOIN Events On Tickets.EventID = Events.EventID JOIN Performances on Performances.EventID = Events.EventID JOIN Artists On Performances.ArtistID = Artists.ArtistID WHERE artistname = 'Lady Gaga';",
            "SELECT On_Sale_Date, Pre_sale_Date, Price FROM Tickets JOIN Events On Tickets.EventID = Events.EventID JOIN Performances on Performances.EventID = Events.EventID JOIN Artists On Performances.ArtistID = Artists.ArtistID WHERE artistname = 'Lady Gaga';"
        ],
        "gold_ambiguity": {
            "match": "{\"sale dates\": [{\"Tickets\": [\"On_Sale_Date\"]}, {\"Tickets\": [\"Pre_sale_Date\"]}, {\"Tickets\": [\"On_Sale_Date\", \"Pre_sale_Date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"sale dates\" refers to the schema \"Tickets\".\"On_Sale_Date\"",
        "clear_ambiguity": "{\"sale dates\": {\"Tickets\": [\"On_Sale_Date\"]}}",
        "gold_query": "SELECT On_Sale_Date, Price FROM Tickets JOIN Events On Tickets.EventID = Events.EventID JOIN Performances on Performances.EventID = Events.EventID JOIN Artists On Performances.ArtistID = Artists.ArtistID WHERE artistname = 'Lady Gaga';"
    },
    {
        "index": 928,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_location2/vague_2cols_location2.sqlite",
        "question": "Show a list of the accounts, customers, locations and banks ordered by banks and then by location.",
        "schema_without_content": "Customers : CustomerID, fullname | Addresses : AddressID, CustomerID, City, Country, Banks | Accounts : AccountNumber, CustomerID, Balance, InterestRate | Transactions : TransactionID, AccountNumber, Amount, TransactionDate",
        "schema_with_content": "Customers : CustomerID (5, 3, 1), fullname ('Emily Williams', 'David Brown', 'Jane Smith') | Addresses : AddressID (3, 1, 2), CustomerID (1, 5, 2), City ('Los Angeles', 'New York', 'Phoenix'), Country ('USA', 'USA', 'USA'), Banks ('Wells Fargo', 'Capital One', 'US Bank') | Accounts : AccountNumber (1005, 1003, 1002), CustomerID (2, 5, 4), Balance (5000, 9000, 8000), InterestRate (2, 3.5, 3) | Transactions : TransactionID (5, 4, 2), AccountNumber (1003, 1004, 1001), Amount (800, 600, 1000), TransactionDate ('2021-01-02 10:00:00', '2021-01-03 10:00:00', '2021-01-04 10:00:00')",
        "ambiguous_queries": [
            "SELECT Customers.FullName, Accounts.AccountNumber, Addresses.Banks, Addresses.City FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID ORDER BY Banks ASC, City ASC",
            "SELECT Customers.FullName, Accounts.AccountNumber, Addresses.Banks, Addresses.Country FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID ORDER BY Banks ASC, Country ASC",
            "SELECT Customers.FullName, Accounts.AccountNumber, Addresses.Banks, Addresses.City, Country FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID ORDER BY Banks ASC, City, Country ASC"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"Addresses\": [\"City\"]}, {\"Addresses\": [\"Country\"]}, {\"Addresses\": [\"City\", \"Country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"Addresses\".\"Country\"",
        "clear_ambiguity": "{\"locations\": {\"Addresses\": [\"Country\"]}}",
        "gold_query": "SELECT Customers.FullName, Accounts.AccountNumber, Addresses.Banks, Addresses.Country FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID ORDER BY Banks ASC, Country ASC"
    },
    {
        "index": 929,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2tabs_film_creator/vague_2tabs_film_creator.sqlite",
        "question": "Who made Inception?",
        "schema_without_content": "Studio : id, name, location | Director : id, name, birth_year | Movie : id, title, release_date, studio_id, director_id | Actor : id, first_name, last_name, date_of_birth | Role : movie_id, actor_id, character | Genre : genre_id, name | MovieGenre : movie_id, genre_id",
        "schema_with_content": "Studio : id (2, 5, 1), name ('Warner Bros.', 'Paramount Pictures', 'Disney'), location ('Burbank, CA', 'Burbank, CA', 'Universal City, CA') | Director : id (5, 3, 4), name ('Christopher Nolan', 'Quentin Tarantino', 'James Cameron'), birth_year (1946, 1942, 1970) | Movie : id (1, 2, 4), title ('Titanic', 'Pulp Fiction', \"Schindler's List\"), release_date ('2010-07-16', '1997-12-18', '1993-12-15'), studio_id (4, 3, 1), director_id (5, 1, 2) | Actor : id (1, 3, 4), first_name ('Joaquin', 'Tom', 'Brad'), last_name ('DiCaprio', 'Cruise', 'Pitt'), date_of_birth ('1963-12-18', '1962-07-03', '1974-11-11') | Role : movie_id (2, 2, 3), actor_id (5, 3, 1), character ('Jules Winnfield', 'Jack Dawson', 'Vincent Vega') | Genre : genre_id (3, 4, 5), name ('Action', 'Romance', 'Crime') | MovieGenre : movie_id (4, 2, 1), genre_id (3, 4, 2)",
        "ambiguous_queries": [
            "SELECT name FROM Studio JOIN Movie ON Studio.id = Movie.studio_id WHERE title = 'Inception'",
            "SELECT name FROM Director JOIN Movie ON Director.id = Movie.director_id WHERE title = 'Inception'",
            "SELECT Studio.name, Director.name FROM Studio JOIN Movie ON Studio.id = Movie.studio_id JOIN Director ON Director.id = Movie.director_id WHERE title = 'Inception'"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Director\": [\"name\"]}, {\"Studio\": [\"name\"]}, {\"Director\": [\"name\"], \"Studio\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Studio\".\"name\"",
        "clear_ambiguity": "{\"Who\": {\"Studio\": [\"name\"]}}",
        "gold_query": "SELECT name FROM Studio JOIN Movie ON Studio.id = Movie.studio_id WHERE title = 'Inception'"
    },
    {
        "index": 930,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
        "question": "What are the survival statistics of each of these patients and what are their names?",
        "schema_without_content": "Patients : id, dateOfBirth, gender, contactNumber, address, fullname | Doctors : doctorID, firstName, lastName, specialty, yearsExperience | Illnesses : illnessID, name, description, fiveYearSurvivalRate, tenYearSurvivalRate, treatmentOption | Diagnoses : diagnosisID, patientId, illnessId, diagnosedDate | Prescriptions : prescriptionId, diagnosisId, medication, dosage, frequency, startDate, endDate | Appointments : appointmentId, patientId, doctorId, appointmentDate, reasonForAppointment, outcome",
        "schema_with_content": "Patients : id (1, 2), dateOfBirth ('1990-07-25', '1980-06-15'), gender ('M', 'F'), contactNumber ('+1234567890', '+0987654321'), address ('456 Elm St', '123 Main St'), fullname ('John Doe', 'Jane Smith') | Doctors : doctorID (1, 2), firstName ('Dr.', 'Dr.'), lastName ('Jones', 'Williams'), specialty ('Cardiology', 'Pediatrics'), yearsExperience (10, 15) | Illnesses : illnessID (2, 1), name ('Diabetes', 'Breast Cancer'), description ('A disease where malignant cells form in the breast tissue.', 'A chronic condition characterized by high blood sugar levels.'), fiveYearSurvivalRate (85.0, 85.0), tenYearSurvivalRate (75.0, 75.0), treatmentOption ('Diet, exercise, and insulin therapy', 'Chemotherapy and radiation therapy') | Diagnoses : diagnosisID (1, 2), patientId (1, 2), illnessId (1, 2), diagnosedDate ('2022-01-15', '2021-09-01') | Prescriptions : prescriptionId (2, 1), diagnosisId (1, 2), medication ('Metformin', 'Tamoxifen'), dosage ('500mg', '20mg'), frequency ('Twice daily', 'Once daily'), startDate ('2021-09-02', '2022-01-16'), endDate ('2022-08-31', '2022-12-31') | Appointments : appointmentId (2, 1), patientId (2, 1), doctorId (2, 1), appointmentDate ('2021-11-15 14:00:00', '2022-02-01 10:00:00'), reasonForAppointment ('Flu symptoms', 'Regular checkup'), outcome ('Healthy', 'Recovering')",
        "ambiguous_queries": [
            "SELECT ILLNESSES.fiveYearSurvivalRate, PATIENTS.fullname FROM PATIENTS JOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId JOIN ILLNESSES ON DIAGNOSES.illnessId = ILLNESSES.illnessID",
            "SELECT ILLNESSES.tenYearSurvivalRate, PATIENTS.fullname FROM PATIENTS JOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId JOIN ILLNESSES ON DIAGNOSES.illnessId = ILLNESSES.illnessID",
            "SELECT ILLNESSES.fiveYearSurvivalRate, tenYearSurvivalRate, PATIENTS.fullname FROM PATIENTS JOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId JOIN ILLNESSES ON DIAGNOSES.illnessId = ILLNESSES.illnessID"
        ],
        "gold_ambiguity": {
            "match": "{\"survival statistics\": [{\"Illnesses\": [\"fiveYearSurvivalRate\"]}, {\"Illnesses\": [\"tenYearSurvivalRate\"]}, {\"Illnesses\": [\"fiveYearSurvivalRate\", \"tenYearSurvivalRate\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"survival statistics\" refers to the schema \"ILLNESSES\".\"fiveYearSurvivalRate\"",
        "clear_ambiguity": "{\"survival statistics\": {\"Illnesses\": [\"fiveYearSurvivalRate\"]}}",
        "gold_query": "SELECT ILLNESSES.fiveYearSurvivalRate, PATIENTS.fullname FROM PATIENTS JOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId JOIN ILLNESSES ON DIAGNOSES.illnessId = ILLNESSES.illnessID"
    },
    {
        "index": 931,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2tabs_place_of_origin/vague_2tabs_place_of_origin.sqlite",
        "question": "Show me the devices and where they are made.",
        "schema_without_content": "Country : id, name, population | Manufacturing_Company : id, company_name, address | Medical_Device : id, device_name, manufacturing_company_id, country_id | Patient : id, first_name, last_name, age | Doctor : id, doctor_name, speciality | Prescription : prescription_id, patient_id, doctor_id, medical_device_id, quantity, date",
        "schema_with_content": "Country : id (3, 4, 2), name ('Canada', 'UK', 'France'), population (65200000, 37600000, 67100000) | Manufacturing_Company : id (3, 2, 5), company_name ('XYZ Biomedicals', 'MediPure Technologies', 'ABC MedTech'), address ('123 Main St, New York, NY', '456 Elm St, Chicago, IL', '111 Spruce St, Boston, MA') | Medical_Device : id (2, 1, 3), device_name ('Insulin Pen', 'Oxygen Concentrator', 'Blood Pressure Monitor'), manufacturing_company_id (5, 3, 4), country_id (5, 2, 4) | Patient : id (2, 1, 3), first_name ('John', 'Jane', 'Emily'), last_name ('Williams', 'Martin', 'Doe'), age (23, 45, 55) | Doctor : id (4, 1, 3), doctor_name ('Dr. Black', 'Dr. Johnson', 'Dr. Green'), speciality ('Allergy and Immunology', 'Neurology', 'Orthopedics') | Prescription : prescription_id (5, 2, 4), patient_id (5, 2, 1), doctor_id (2, 4, 3), medical_device_id (5, 1, 3), quantity (3, 2, 1), date ('2024-02-19 13:15:05', '2024-02-19 13:15:05', '2024-02-19 13:15:05')",
        "ambiguous_queries": [
            "Select device_name, name from Country join Medical_Device on Medical_Device.country_id = Country.id where device_name = 'Insulin Pen'",
            "Select device_name, company_name from Manufacturing_Company join Medical_Device on Medical_Device.Manufacturing_Company_id = Manufacturing_Company.id where device_name = 'Insulin Pen'",
            "Select device_name, name, company_name from Country join Medical_Device on Medical_Device.country_id = Country.id join Manufacturing_Company on Medical_Device.Manufacturing_Company_id = Manufacturing_Company.id where device_name = 'Insulin Pen'"
        ],
        "gold_ambiguity": {
            "match": "{\"where\": [{\"Country\": [\"name\"]}, {\"Manufacturing_Company\": [\"company_name\"]}, {\"Country\": [\"name\"], \"Manufacturing_Company\": [\"company_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"where\" refers to the schema \"Manufacturing_Company\".\"company_name\"",
        "clear_ambiguity": "{\"where\": {\"Manufacturing_Company\": [\"company_name\"]}}",
        "gold_query": "Select device_name, name, company_name from Country join Medical_Device on Medical_Device.country_id = Country.id join Manufacturing_Company on Medical_Device.Manufacturing_Company_id = Manufacturing_Company.id where device_name = 'Insulin Pen'"
    },
    {
        "index": 932,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_timeframe/vague_2cols_timeframe.sqlite",
        "question": "Which album has the longest song and when was it released?",
        "schema_without_content": "Artists : ArtistID, ArtistName | Albums : AlbumID, Year, Month, AlbumName, Genre, ArtistID | Songs : SongID, SongTitle, Duration, AlbumID | MusicLabels : LabelID, LabelName, ArtistID | Concerts : ConcertID, Date, Venue, City, Country, HeadlinerID, OpeningActID | Tickets : TicketID, Quantity, Price, ConcertID",
        "schema_with_content": "Artists : ArtistID (4, 1, 2), ArtistName ('Elton John', 'Beyonce', 'Justin Timberlake') | Albums : AlbumID (4, 1, 3), Year (2007, 2013, 2018), Month (4, 11, 11), AlbumName ('Captain Fantastic and The Brown Dirt Cowboy', 'FutureSex/LoveSound', 'To Be Loved'), Genre ('Pop', 'Rock', 'R&B/Hip Hop'), ArtistID (2, 1, 3) | Songs : SongID (5, 1, 3), SongTitle ('Can You Feel the Love Tonight', 'Stronger', 'Hello'), Duration (306, 224, 215), AlbumID (4, 2, 3) | MusicLabels : LabelID (2, 3, 1), LabelName ('Parkwood Entertainment', 'XL Recordings', 'Republic Records'), ArtistID (2, 5, 1) | Concerts : ConcertID (4, 3, 1), Date ('2021-03-05', '2020-12-31', '2021-02-10'), Venue ('Madison Square Garden', 'Staples Center', 'Sydney Opera House'), City ('Los Angeles', 'Brooklyn', 'Sydney'), Country ('USA', 'USA', 'Australia'), HeadlinerID (2, 1, 5), OpeningActID () | Tickets : TicketID (3, 5, 1), Quantity (1000, 2000, 4000), Price (60, 50, 80), ConcertID (5, 3, 2)",
        "ambiguous_queries": [
            "SELECT AlbumName, Year FROM Albums JOIN Songs ON Albums.AlbumID = Songs.AlbumID ORDER By duration DESC LIMIT 1 ;",
            "SELECT AlbumName, Month FROM Albums JOIN Songs ON Albums.AlbumID = Songs.AlbumID ORDER By duration DESC LIMIT 1 ;",
            "SELECT AlbumName, Year, Month FROM Albums JOIN Songs ON Albums.AlbumID = Songs.AlbumID ORDER By duration DESC LIMIT 1 ;"
        ],
        "gold_ambiguity": {
            "match": "{\"when\": [{\"Albums\": [\"Year\"]}, {\"Albums\": [\"Month\"]}, {\"Albums\": [\"Year\", \"Month\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"when\" refers to the schema \"Albums\".\"Year\"",
        "clear_ambiguity": "{\"when\": {\"Albums\": [\"Year\"]}}",
        "gold_query": "SELECT AlbumName, Year, Month FROM Albums JOIN Songs ON Albums.AlbumID = Songs.AlbumID ORDER By duration DESC LIMIT 1 ;"
    },
    {
        "index": 933,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_name/vague_2cols_name.sqlite",
        "question": "Provide the names of artists who did not release any music before 1995.",
        "schema_without_content": "Movies : id, title, releaseDate, genre, directorId | Directors : id, firstName, lastName, birthdate, realName, alias, story | Actors : id, firstName, lastName, dateOfBirth, movieId | Roles : id, actorID, movieID, roleName, characterDescription | MusicAlbums : id, albumTitle, releaseYear, artistId | Artists : id, birthdate, realName, alias, story",
        "schema_with_content": "Movies : id (4, 1, 3), title ('Interstellar', 'Pulp Fiction', 'Forrest Gump'), releaseDate ('1994-06-23', '2010-07-16', '2014-11-07'), genre ('Adventure/Sci-Fi', 'Drama', 'Crime/Thriller'), directorId (4, 3, 2) | Directors : id (2, 5, 1), firstName ('Jonathan', 'Christopher', 'Robert'), lastName ('Darabont', 'Tarantino', 'Nolan'), birthdate ('1976-09-11', '1959-01-28', '1951-05-14'), realName ('Robert Lee Zemeckis', 'Quentin Jerome Tarantino', 'Christopher Edward Nolan'), alias ('Bob Z.', 'QT', 'Jony'), story ('Brother of Christopher Nolan and co-writer of many of his movies.', 'Known for his work on The Green Mile and The Mist.', 'Known for his thought-provoking films such as Inception and Interstellar.') | Actors : id (2, 1, 4), firstName ('Tom', 'John', 'Leonardo'), lastName ('Williams', 'Page', 'DiCaprio'), dateOfBirth ('1958-07-21', '1974-02-18', '1974-11-11'), movieId (1, 5, 4) | Roles : id (3, 4, 1), actorID (2, 4, 5), movieID (2, 3, 5), roleName ('Vincent Vega', 'Andy Dufresne', 'Benjamin Buford \"Bubba\" Blue'), characterDescription ('A banker who is falsely accused of murder.', 'A pilot and scientist trying to save humanity.', \"A thief who steals ideas from people's dreams.\") | MusicAlbums : id (5, 1, 3), albumTitle ('Siamese Dream', 'Nevermind', 'Ten'), releaseYear (1996, 1995, 1991), artistId (5, 3, 1) | Artists : id (2, 5, 3), birthdate ('1955-04-30', '1967-03-17', '1942-06-20'), realName ('Kurt Donald Cobain', 'William Patrick Corgan Jr.', 'Brian Douglas Wilson'), alias ('The Schoolboy', 'Billy Corgan', 'Kurt Cobain'), story ('Frontman and songwriter of The Smashing Pumpkins.', 'Lead singer and guitarist of Nirvana.', 'Founding member and leader of The Beach Boys.')",
        "ambiguous_queries": [
            "SELECT realName FROM Artists WHERE id NOT IN (SELECT artistId FROM MusicAlbums WHERE releaseYear < 1995);",
            "SELECT alias FROM Artists WHERE id NOT IN (SELECT artistId FROM MusicAlbums WHERE releaseYear < 1995);",
            "SELECT realName, alias FROM Artists WHERE id NOT IN (SELECT artistId FROM MusicAlbums WHERE releaseYear < 1995);"
        ],
        "gold_ambiguity": {
            "match": "{\"names\": [{\"Artists\": [\"realName\"]}, {\"Artists\": [\"alias\"]}, {\"Artists\": [\"realName\", \"alias\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"names\" refers to the schema \"Artists\".\"alias\"",
        "clear_ambiguity": "{\"names\": {\"Artists\": [\"alias\"]}}",
        "gold_query": "SELECT alias FROM Artists WHERE id NOT IN (SELECT artistId FROM MusicAlbums WHERE releaseYear < 1995);"
    },
    {
        "index": 934,
        "db_id": "Demographics",
        "ambig_type": "vague",
        "db_file": "vague/Demographics/vague_2cols_age/vague_2cols_age.sqlite",
        "question": "What is the age and population group for the most recent year for New York?",
        "schema_without_content": "Countries : CountryName | Regions : RegionName, CountryId | Populations : CityId, Year, TotalPopulation | AgeDemographics : CityId, Year, MedianAge, AgeRange, PopulationGroup | Ethnicity : CityId, Year, WhitePercentage, BlackOrAfricanAmericanPercentage, AsianPercentage, HispanicOrLatinoPercentage | Cities : id, CityName, RegionId",
        "schema_with_content": "Countries : CountryName ('Canada', 'Mexico', 'United States') | Regions : RegionName ('Atlantic', 'Northeast', 'Southwest'), CountryId (1, 1, 1) | Populations : CityId (1, 1, 1), Year (2010, 2000, 2020), TotalPopulation (8396000, 8000000, 8960000) | AgeDemographics : CityId (1, 1, 1), Year (2010, 2000, 2020), MedianAge (35, 39, 37), AgeRange ('18-34', '45-54', '35-44'), PopulationGroup ('Young Adults', 'Older Adults', 'Adults') | Ethnicity : CityId (1, 1, 1), Year (2000, 2020, 2010), WhitePercentage (62, 60, 61), BlackOrAfricanAmericanPercentage (16, 17, 15), AsianPercentage (12, 10, 11), HispanicOrLatinoPercentage (20, 23, 22) | Cities : id (1, 3, 2), CityName ('Houston', 'Los Angeles', 'New York'), RegionId (2, 4, 3)",
        "ambiguous_queries": [
            "select MedianAge, PopulationGroup from AgeDemographics JOIN Cities ON AgeDemographics.CityId = Cities.id where Cities.CityName = 'New York' ORDER BY Year DESC LIMIT 1;",
            "select AgeRange, PopulationGroup from AgeDemographics JOIN Cities ON AgeDemographics.CityId = Cities.id where Cities.CityName = 'New York' ORDER BY Year DESC LIMIT 1;",
            "select MedianAge, PopulationGroup from AgeDemographics JOIN Cities ON AgeDemographics.CityId = Cities.id where Cities.CityName = 'New York' ORDER BY Year DESC LIMIT 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"age\": [{\"AgeDemographics\": [\"MedianAge\"]}, {\"AgeDemographics\": [\"AgeRange\"]}, {\"AgeDemographics\": [\"MedianAge\", \"AgeRange\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"age\" refers to the schema \"AgeDemographics\".\"MedianAge\"",
        "clear_ambiguity": "{\"age\": {\"AgeDemographics\": [\"MedianAge\"]}}",
        "gold_query": "select MedianAge, PopulationGroup from AgeDemographics JOIN Cities ON AgeDemographics.CityId = Cities.id where Cities.CityName = 'New York' ORDER BY Year DESC LIMIT 1;"
    },
    {
        "index": 935,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_duration/vague_2tabs_duration.sqlite",
        "question": "How long is Macbeth?",
        "schema_without_content": "Movies : id, title, release_year | Directors : id, name, birthdate | Genres : id, genre_name | Actors : id, name, birthdate | Ratings : movie_id, rating | Theater_Plays : theater_play_id, play_title, total_length_id, number_of_acts_id | Number_Of_Acts : theater_play_id, number_of_acts | Total_Length : theater_play_id, total_length",
        "schema_with_content": "Movies : id (4, 2, 5), title ('The Shawshank Redemption', 'Pulp Fiction', 'Forrest Gump'), release_year (1994, 1993, 1972) | Directors : id (3, 4, 2), name ('Robert Zemeckis', 'Steven Spielberg', 'Quentin Tarantino'), birthdate ('1951-05-14', '1959-01-28', '1946-12-18') | Genres : id (1, 5, 2), genre_name ('Thriller', 'Romance', 'Drama') | Actors : id (2, 5, 3), name ('Jack Nicholson', 'Morgan Freeman', 'John Travolta'), birthdate ('1959-07-26', '1954-02-18', '1937-06-01') | Ratings : movie_id (4, 3, 1), rating (8.7, 8.9, 8.5) | Theater_Plays : theater_play_id (1, 2, 4), play_title ('Othello', 'Macbeth', 'King Lear'), total_length_id (3, 5, 2), number_of_acts_id (4, 4, 3) | Number_Of_Acts : theater_play_id (1, 5, 3), number_of_acts (5, 4, 4) | Total_Length : theater_play_id (4, 2, 5), total_length (154, 142, 140)",
        "ambiguous_queries": [
            "SELECT total_length FROM Total_Length JOIN Theater_Plays ON Theater_Plays.theater_play_id = Total_Length.theater_play_id WHERE play_title = 'Macbeth';",
            "SELECT Number_Of_Acts FROM Number_Of_Acts JOIN Theater_Plays ON Theater_Plays.theater_play_id = Number_Of_Acts.theater_play_id WHERE play_title = 'Macbeth';",
            "SELECT total_length, Number_Of_Acts FROM Total_Length JOIN Theater_Plays ON Theater_Plays.theater_play_id = Total_Length.theater_play_id JOIN Number_Of_Acts ON Theater_Plays.theater_play_id = Number_Of_Acts.theater_play_id WHERE play_title = 'Macbeth';"
        ],
        "gold_ambiguity": {
            "match": "{\"long\": [{\"Number_Of_Acts\": [\"Number_Of_Acts\"]}, {\"Total_Length\": [\"total_length\"]}, {\"Total_Length\": [\"Number_Of_Acts\"]}, {\"Number_Of_Acts\": [\"Number_Of_Acts\"], \"Total_Length\": [\"total_length\", \"Number_Of_Acts\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"long\" refers to the schema \"Total_Length\".\"Number_Of_Acts\"",
        "clear_ambiguity": "{\"long\": {\"Total_Length\": [\"Number_Of_Acts\"]}}",
        "gold_query": "SELECT total_length, Number_Of_Acts FROM Total_Length JOIN Theater_Plays ON Theater_Plays.theater_play_id = Total_Length.theater_play_id JOIN Number_Of_Acts ON Theater_Plays.theater_play_id = Number_Of_Acts.theater_play_id WHERE play_title = 'Macbeth';"
    },
    {
        "index": 936,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_timing/vague_2cols_timing.sqlite",
        "question": "Show me all the assignment descriptions and the corresponding timings",
        "schema_without_content": "Students : id, first_name, last_name, email | Courses : course_id, course_name, instructor_name | Enrollments : enrollment_id, student_id, course_id | Assignments : assignment_id, date, time, description, grade | Submissions : submission_id, student_id, assignment_id, file_path, score, submitted_time | Grades : grade_id, student_id, course_id, final_grade, semester",
        "schema_with_content": "Students : id (3, 5, 4), first_name ('John', 'Michael', 'Alice'), last_name ('Doe', 'Smith', 'White'), email ('alice.brown@example.com', 'john.doe@example.com', 'jane.smith@example.com') | Courses : course_id (1, 3, 5), course_name ('English Literature', 'World History', 'Biology'), instructor_name ('Professor Brown', 'Dr. Doe', 'Dr. Green') | Enrollments : enrollment_id (1, 2, 5), student_id (5, 4, 1), course_id (4, 3, 2) | Assignments : assignment_id (4, 1, 2), date ('2023-01-16', '2023-02-22', '2023-02-08'), time ('2:00 PM', '10:00 AM', '3:00 PM'), description ('Research and write an essay on global warming', 'Write a paper on computer science history', 'Complete calculus homework set 7'), grade (9.0, 9.0, 8.0) | Submissions : submission_id (3, 5, 2), student_id (2, 1, 4), assignment_id (5, 2, 3), file_path ('/home/user/submission3.pdf', '/home/user/submission2.docx', '/home/user/submission4.pptx'), score (8.8, 9.5, 8.2), submitted_time ('2024-02-19 14:44:34', '2024-02-19 14:44:34', '2024-02-19 14:44:34') | Grades : grade_id (1, 4, 2), student_id (4, 5, 3), course_id (3, 2, 5), final_grade (9.3, 9.7, 7.9), semester ('Fall 2022', 'Spring 2023', 'Fall 2022')",
        "ambiguous_queries": [
            "SELECT date, description FROM Assignments ORDER BY date ASC LIMIT 1",
            "SELECT time, description FROM Assignments ORDER BY time ASC LIMIT 1",
            "SELECT date, time, description FROM Assignments ORDER BY date, time ASC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"timings\": [{\"Assignments\": [\"date\"]}, {\"Assignments\": [\"time\"]}, {\"Assignments\": [\"date\", \"time\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"timings\" refers to the schema \"Assignments\".\"date\"",
        "clear_ambiguity": "{\"timings\": {\"Assignments\": [\"date\"]}}",
        "gold_query": "SELECT date, description FROM Assignments ORDER BY date ASC LIMIT 1"
    },
    {
        "index": 937,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_duration/vague_2cols_duration.sqlite",
        "question": "Who played in the longest movie?",
        "schema_without_content": "Movie : id, title, release_date, Total_length, Number_of_acts, Theater_play | Actor : id, name, birth_date, nationality | Genre : id, genre_name | Role : movie_id, actor_id, role_name | Director : director_id, name, birth_date, nationality | Film : film_id, director_id, movie_id",
        "schema_with_content": "Movie : id (3, 5, 4), title (\"Schindler's List\", 'Forrest Gump', 'The Shawshank Redemption'), release_date ('1994-10-14', '1994-06-23', '2010-07-16'), Total_length (142, 195, 142), Number_of_acts (7, 2, 3), Theater_play (0, 0, 1) | Actor : id (4, 5, 1), name ('John Travolta', 'Tim Robbins', 'Leonardo DiCaprio'), birth_date ('1974-11-11', '1952-06-07', '1958-10-16'), nationality ('American', 'American', 'Irish') | Genre : id (4, 3, 5), genre_name ('Horror', 'Comedy', 'Thriller') | Role : movie_id (2, 1, 3), actor_id (4, 3, 5), role_name ('Christian Bodhi', 'Red', 'Benjamin Buford Blue') | Director : director_id (1, 5, 4), name ('Frank Darabont', 'Steven Spielberg', 'Chris Nolan'), birth_date ('1959-01-28', '1951-05-14', '1946-12-18'), nationality ('English', 'American', 'American') | Film : film_id (2, 5, 1), director_id (4, 3, 5), movie_id (5, 3, 4)",
        "ambiguous_queries": [
            "SELECT name FROM Movie JOIN Role ON Role.movie_id = Movie.id JOIN Actor ON Actor.id = Role.actor_id ORDER BY Total_length DESC LIMIT 1;",
            "SELECT name FROM Movie JOIN Role ON Role.movie_id = Movie.id JOIN Actor ON Actor.id = Role.actor_id ORDER BY Number_of_acts DESC LIMIT 1;",
            "SELECT name FROM Movie JOIN Role ON Role.movie_id = Movie.id JOIN Actor ON Actor.id = Role.actor_id ORDER BY Total_length, Number_of_acts DESC LIMIT 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"longest\": [{\"Movie\": [\"Total_length\"]}, {\"Movie\": [\"Number_of_acts\"]}, {\"Movie\": [\"Total_length\", \"Number_of_acts\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"longest\" refers to the schema \"Movie\".\"Total_length\"",
        "clear_ambiguity": "{\"longest\": {\"Movie\": [\"Total_length\"]}}",
        "gold_query": "SELECT name FROM Movie JOIN Role ON Role.movie_id = Movie.id JOIN Actor ON Actor.id = Role.actor_id ORDER BY Total_length DESC LIMIT 1;"
    },
    {
        "index": 938,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
        "question": "What safety measures will Mike Johnson require?",
        "schema_without_content": "Material : materialID, name, quantity, cost | Employee : employeeID, firstName, lastName, hireDate, position | Project : projectID, projectName, startDate, endDate, budget | Inventory : inventoryID, materialID, quantity | Safety : safetyID, employeeID, personalProtectiveEquipment, trainingPrograms, constructionWorker",
        "schema_with_content": "Material : materialID (2, 3, 1), name ('Bricks', 'Concrete Blocks', 'Steel Rebars'), quantity (300, 100, 150), cost (18.5, 39.99, 45.0) | Employee : employeeID (5, 2, 3), firstName ('Mike', 'Jane', 'Tom'), lastName ('Doe', 'Johnson', 'Brown'), hireDate ('2021-03-01', '2021-02-01', '2021-05-01'), position ('Supervisor', 'Construction Worker', 'Architect') | Project : projectID (2, 4, 3), projectName ('School Renovation', 'Commercial Complex', 'Residential Building'), startDate ('2021-08-01', '2021-07-01', '2021-06-01'), endDate ('2021-08-01', '2021-10-01', '2021-11-01'), budget (300000.0, 1000000.0, 600000.0) | Inventory : inventoryID (2, 4, 3), materialID (2, 3, 4), quantity (100, 200, 50) | Safety : safetyID (4, 1, 2), employeeID (2, 1, 3), personalProtectiveEquipment ('Hard Hat, Gloves, Safety Vest', 'Helmet, Earplugs, Safety Glasses', 'Hard Hat, Gloves, Knee Pads'), trainingPrograms ('OSHA Training, First Aid Certification', 'Fall Protection Training, CPR/First Aid', 'Toolbox Talks, Scaffolding Training'), constructionWorker ('Intermediate', 'Experienced', 'Novice')",
        "ambiguous_queries": [
            "SELECT Safety.personalProtectiveEquipment FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.firstName='Mike' AND Employee.lastName='Johnson'",
            "SELECT Safety.trainingPrograms FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.firstName='Mike' AND Employee.lastName='Johnson'",
            "SELECT Safety.personalProtectiveEquipment, trainingPrograms FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.firstName='Mike' AND Employee.lastName='Johnson'"
        ],
        "gold_ambiguity": {
            "match": "{\"safety measures\": [{\"Safety\": [\"personalProtectiveEquipment\"]}, {\"Safety\": [\"trainingPrograms\"]}, {\"Safety\": [\"personalProtectiveEquipment\", \"trainingPrograms\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"safety measures\" refers to the schema \"Safety\".\"personalProtectiveEquipment\" and \"Safety\".\"trainingPrograms\"",
        "clear_ambiguity": "{\"safety measures\": {\"Safety\": [\"personalProtectiveEquipment\", \"trainingPrograms\"]}}",
        "gold_query": "SELECT Safety.personalProtectiveEquipment, trainingPrograms FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.firstName='Mike' AND Employee.lastName='Johnson'"
    },
    {
        "index": 939,
        "db_id": "Traffic",
        "ambig_type": "vague",
        "db_file": "vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
        "question": "Who has the biggest budget?",
        "schema_without_content": "CivilEngineers : ProjectID, Intersection, Civil_Engineer, Engineering_Firm, StartDate, EndDate, Budget | Roads : RoadID, StreetName, City, State, ZipCode | Accidents : AccidentID, DateOfAccident, TimeOfAccident, LocationText, Latitude, Longitude, Severity | VehicleTypes : TypeID, Make, Model, Year | Drivers : DriverID, LicenseNumber, Name, Address, PhoneNumber | PoliceReports : ReportID, DateReported, OfficerID, AccidentID, OffenseType, Penalty",
        "schema_with_content": "CivilEngineers : ProjectID (1, 2), Intersection ('Elm St & Pine Ave', 'Main St & Oak Ave'), Civil_Engineer ('John Doe', 'Jane Smith'), Engineering_Firm ('XYZ Engineering', 'ABC Engineering'), StartDate ('2021-07-01', '2021-06-01'), EndDate ('2021-10-31', '2021-09-30'), Budget (500000.0, 600000.0) | Roads : RoadID (2, 1), StreetName ('Bridge St', 'Parkway Dr'), City ('Springfield', 'Chicago'), State ('IL', 'IL'), ZipCode (62704, 60616) | Accidents : AccidentID (2, 1), DateOfAccident ('2021-08-02', '2021-08-01'), TimeOfAccident ('11:15 AM', '10:30 AM'), LocationText ('Main St & Oak Ave', 'Elm St & Pine Ave'), Latitude (40.0, 41.0), Longitude (-89.0, -90.0), Severity ('Moderate', 'Minor') | VehicleTypes : TypeID (1, 2), Make ('Honda', 'Toyota'), Model ('Corolla', 'Civic'), Year (2018, 2019) | Drivers : DriverID (1, 2), LicenseNumber ('BCDEFGH', 'A1234CD'), Name ('Bob Smith', 'Alice Johnson'), Address ('456 Elm St, Chicago, IL', '123 Main St, Springfield, IL'), PhoneNumber ('555-123-4567', '555-987-6543') | PoliceReports : ReportID (2, 1), DateReported ('2021-08-01', '2021-08-02'), OfficerID (1, 2), AccidentID (2, 1), OffenseType ('Running Red Light', 'Speeding'), Penalty ('Warning', '$100 Fine')",
        "ambiguous_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;",
            "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;",
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"CivilEngineers\": [\"Civil_Engineer\"]}, {\"CivilEngineers\": [\"Engineering_Firm\"]}, {\"CivilEngineers\": [\"Civil_Engineer\", \"Engineering_Firm\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"CivilEngineers\".\"Engineering_Firm\"",
        "clear_ambiguity": "{\"Who\": {\"CivilEngineers\": [\"Engineering_Firm\"]}}",
        "gold_query": "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
    },
    {
        "index": 940,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_study_plan/vague_2cols_study_plan.sqlite",
        "question": "What are the study plans of all engineering programs?",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth | Teachers : TeacherID, FirstName, LastName, Subject | Courses : CourseID, Title, Description, Credit | Enrollments : EnrollmentID, StudentID, CourseID | Grades : GradeID, EnrollmentID, FinalGrade | Programs : ProgramID, ProgramName, Core_Courses, Electives, Requirements",
        "schema_with_content": "Students : StudentID (4, 1, 3), FirstName ('Jane', 'David', 'Emily'), LastName ('Brown', 'Smith', 'Williams'), DateOfBirth ('2003-06-18', '2002-07-20', '1999-10-15') | Teachers : TeacherID (3, 4, 5), FirstName ('Miss', 'Mr.', 'Dr.'), LastName ('Thompson', 'Johnson', 'Smith'), Subject ('History', 'Mathematics', 'Biology') | Courses : CourseID (5, 2, 1), Title ('Calculus I', 'World History II', 'Human Biology'), Description ('An introduction to human biology covering cellular structure, genetics, physiological systems, and health issues.', 'Fundamental principles of physics including mechanics, heat, sound, light, and electricity.', 'Exploration and colonization from 15th century to present day.'), Credit (3, 3, 3) | Enrollments : EnrollmentID (5, 1, 3), StudentID (4, 1, 5), CourseID (2, 3, 5) | Grades : GradeID (5, 2, 3), EnrollmentID (1, 4, 2), FinalGrade (85, 95, 88) | Programs : ProgramID (1, 2, 5), ProgramName ('Business Administration', 'Mechanical Engineering', 'Civil Engineering'), Core_Courses ('Principles of Accounting, Principles of Marketing, Organizational Behavior, Finance', 'Structural Analysis, Geotechnical Engineering, Transportation Engineering, Environmental Engineering', 'Circuit Analysis, Digital Logic Design, Signals and Systems, Power Electronics'), Electives ('Water Resources, Construction Management, Surveying, Traffic Engineering', 'Artificial Intelligence, Network Security, Human-Computer Interaction, Software Engineering', 'Design of Machines, Control Systems, Manufacturing Processes, Robotics'), Requirements ('Minimum cumulative GPA of 2.5, Minimum 2 years of college work.', 'Minimum cumulative GPA of 2.6, Minimum 2 years of college work.', 'Minimum cumulative GPA of 2.7, Minimum 2 years of college work.')",
        "ambiguous_queries": [
            "SELECT Core_Courses FROM Programs WHERE ProgramName LIKE '%Engineering%'",
            "SELECT Electives FROM Programs WHERE ProgramName LIKE '%Engineering%'",
            "SELECT Core_Courses, Electives FROM Programs WHERE ProgramName LIKE '%Engineering%'"
        ],
        "gold_ambiguity": {
            "match": "{\"study plans\": [{\"Programs\": [\"Core_Courses\"]}, {\"Programs\": [\"Electives\"]}, {\"Programs\": [\"Core_Courses\", \"Electives\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"study plans\" refers to the schema \"Programs\".\"Electives\"",
        "clear_ambiguity": "{\"study plans\": {\"Programs\": [\"Electives\"]}}",
        "gold_query": "SELECT Electives FROM Programs WHERE ProgramName LIKE '%Engineering%'"
    },
    {
        "index": 941,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2cols_timeframe/vague_2cols_timeframe.sqlite",
        "question": "When was the press conference that Jane attended?",
        "schema_without_content": "Reporters : ReporterID, FirstName, LastName, Email | Articles : ArticleID, Title, Content, PublishDate, AuthorID | Sources : SourceID, Name, ContactInfo | ArticleSources : ArticleSourceID, ArticleID, SourceID, Quote | PressConferences : ConferenceID, Date, Time, Location, Subject | ReportersAttending : ReporterAttendeeID, ReporterID, ConferenceID",
        "schema_with_content": "Reporters : ReporterID (3, 2, 5), FirstName ('Jane', 'David', 'Emily'), LastName ('Brown', 'Green', 'Doe'), Email ('michael.brown@example.com', 'john.doe@example.com', 'emily.white@example.com') | Articles : ArticleID (4, 5, 1), Title ('The Importance of Investigative Journalism', 'Technology Advances in News Reporting', 'Freedom of the Press and its Role in Democracy'), Content ('Climate change has far-reaching effects...', 'Investigative journalism is essential...', 'Journalists play a crucial role in reporting...'), PublishDate ('2022-07-01 08:00:00', '2022-07-03 12:00:00', '2022-07-05 16:00:00'), AuthorID (4, 2, 1) | Sources : SourceID (1, 2, 4), Name ('Bloomberg', 'CNN', 'Associated Press'), ContactInfo ('https://www.reuters.com/contact', 'https://www.bloomberg.com/contact', 'https://edition.cnn.com/contacts') | ArticleSources : ArticleSourceID (5, 2, 3), ArticleID (2, 5, 1), SourceID (1, 2, 4), Quote ('Quote from Reuters source', 'Quote from Al Jazeera source', 'Quote from CNN source') | PressConferences : ConferenceID (1, 3, 2), Date ('2022-07-06', '2022-07-07', '2022-07-09'), Time ('14:00:00', '10:00:00', '08:00:00'), Location ('Paris', 'London', 'Tokyo'), Subject (\"President's Annual Address\", 'EU Climate Conference', 'G7 Leaders Meeting') | ReportersAttending : ReporterAttendeeID (3, 2, 5), ReporterID (5, 1, 3), ConferenceID (3, 2, 5)",
        "ambiguous_queries": [
            "SELECT Date, ReporterAttendeeID FROM PressConferences JOIN ReportersAttending ON ReportersAttending.ConferenceID = PressConferences.ConferenceID JOIN Reporters ON Reporters.ReporterID = ReportersAttending.ReporterID WHERE Reporters.FirstName = 'Jane'",
            "SELECT Time, ReporterAttendeeID FROM PressConferences JOIN ReportersAttending ON ReportersAttending.ConferenceID = PressConferences.ConferenceID JOIN Reporters ON Reporters.ReporterID = ReportersAttending.ReporterID WHERE Reporters.FirstName = 'Jane'",
            "SELECT Date, Time, ReporterAttendeeID FROM PressConferences JOIN ReportersAttending ON ReportersAttending.ConferenceID = PressConferences.ConferenceID JOIN Reporters ON Reporters.ReporterID = ReportersAttending.ReporterID WHERE Reporters.FirstName = 'Jane'"
        ],
        "gold_ambiguity": {
            "match": "{\"When\": [{\"PressConferences\": [\"Date\"]}, {\"PressConferences\": [\"Time\"]}, {\"PressConferences\": [\"Date\", \"Time\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"When\" refers to the schema \"PressConferences\".\"Date\"",
        "clear_ambiguity": "{\"When\": {\"PressConferences\": [\"Date\"]}}",
        "gold_query": "SELECT Date, ReporterAttendeeID FROM PressConferences JOIN ReportersAttending ON ReportersAttending.ConferenceID = PressConferences.ConferenceID JOIN Reporters ON Reporters.ReporterID = ReportersAttending.ReporterID WHERE Reporters.FirstName = 'Jane'"
    },
    {
        "index": 942,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_focus/vague_2cols_focus.sqlite",
        "question": "What are the grades corresponding to each conference and what is it about?",
        "schema_without_content": "Students : id, firstName, lastName, major, yearInSchool | Classes : classId, className, professorName, roomNumber, capacity, timeSlot | Enrollments : enrollmentId, studentId, classId, grade | Projects : projectId, title, description, dueDate, status | Theme_Tracks : themeTrackId, themeTrack, submissionTopic, conference, abstract, fullPaper | Submissions : submissionId, studentId, themeTrackId, projectId, dateOfSubmission, feedback, grade",
        "schema_with_content": "Students : id (3, 5, 4), firstName ('Michael', 'Jane', 'John'), lastName ('Smith', 'Brown', 'Black'), major ('Electrical Engineering', 'Aerospace Engineering', 'Mechanical Engineering'), yearInSchool (3, 3, 4) | Classes : classId (2, 5, 3), className ('Fluid Mechanics', 'Material Science', 'Introduction to Computer Science'), professorName ('Dr. Johnson', 'Dr. Black', 'Dr. Brown'), roomNumber ('Room 101', 'Room 303', 'Room 505'), capacity (35, 30, 27), timeSlot ('11:30 AM - 1:30 PM', '7:00 PM - 9:00 PM', '4:30 PM - 6:30 PM') | Enrollments : enrollmentId (4, 2, 3), studentId (3, 1, 2), classId (4, 1, 3), grade ('A', 'A-', 'B+') | Projects : projectId (2, 5, 3), title ('Renewable Energy Storage', 'Artificial Intelligence Ethics', 'Urban Transportation Systems'), description ('Designing efficient transportation systems for urban areas.', 'Research on improving sorting algorithms.', 'Investigating potential applications of nanotechnology in various fields.'), dueDate ('2023-06-05', '2023-05-25', '2023-05-20'), status ('Not Started', 'In Progress', 'Not Started') | Theme_Tracks : themeTrackId (4, 2, 1), themeTrack ('Space Exploration', 'Machine Learning', 'Green Technologies'), submissionTopic ('Swarm robotics for environmental monitoring.', 'Wearable devices for continuous glucose monitoring.', 'Deep learning techniques for natural language processing.'), conference ('Annual Robotics Symposium', 'International Conference on Artificial Intelligence', 'Global Climate Summit'), abstract ('This paper explores recent breakthroughs in propulsion technology...', 'This study investigates the effectiveness of wearables in continuously monitoring...', 'Our research focuses on developing ML models for CCS...'), fullPaper ('https://example.com/fullpaper_robotics.pdf', 'https://example.com/fullpaper_green.pdf', 'https://example.com/fullpaper_space.pdf') | Submissions : submissionId (2, 5, 4), studentId (2, 5, 3), themeTrackId (1, 3, 5), projectId (5, 3, 1), dateOfSubmission ('2023-05-10 10:00:00', '2023-05-05 10:00:00', '2023-04-25 10:00:00'), feedback ('Good job! More work is needed on the theoretical aspects.', 'Great effort! The literature review could be improved further.', 'Needs improvement. Focus on addressing the problem statement more clearly.'), grade ('A', 'A', 'B')",
        "ambiguous_queries": [
            "SELECT a.conference, a.themeTrack, b.grade FROM Theme_Tracks a JOIN Submissions b ON a.themeTrackID = b.themeTrackId",
            "SELECT a.conference, a.submissionTopic, b.grade FROM Theme_Tracks a JOIN Submissions b ON a.themeTrackID = b.themeTrackId",
            "SELECT a.conference, a.themeTrack, submissionTopic, b.grade FROM Theme_Tracks a JOIN Submissions b ON a.themeTrackID = b.themeTrackId"
        ],
        "gold_ambiguity": {
            "match": "{\"about\": [{\"Theme_Tracks\": [\"themeTrack\"]}, {\"Theme_Tracks\": [\"submissionTopic\"]}, {\"Theme_Tracks\": [\"themeTrack\", \"submissionTopic\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"about\" refers to the schema \"Theme_Tracks\".\"submissionTopic\"",
        "clear_ambiguity": "{\"about\": {\"Theme_Tracks\": [\"submissionTopic\"]}}",
        "gold_query": "SELECT a.conference, a.submissionTopic, b.grade FROM Theme_Tracks a JOIN Submissions b ON a.themeTrackID = b.themeTrackId"
    },
    {
        "index": 943,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_author/vague_2cols_author.sqlite",
        "question": "Who is the author of the drama movie?",
        "schema_without_content": "Movies : id, Title, ReleaseDate, Runtime, Filmmaker, Screenwriter | Actors : id, Name, Birthdate, Nationality | Roles : id, MovieId, ActorId, CharacterName | Directors : id, Name, Birthdate, Nationality | Productions : id, MovieId, DirectorId, Budget, ProductionCompany | Genres : id, Type | MovieGenre : id, MovieId, GenreId",
        "schema_with_content": "Movies : id (2, 1), Title ('Pulp Fiction', 'The Shawshank Redemption'), ReleaseDate ('1994-10-14', '1994-09-23'), Runtime (154, 142), Filmmaker ('Quentin Tarantino', 'Frank Darabont'), Screenwriter ('Quentin Tarantino', 'Stephen King') | Actors : id (), Name (), Birthdate (), Nationality () | Roles : id (), MovieId (), ActorId (), CharacterName () | Directors : id (), Name (), Birthdate (), Nationality () | Productions : id (), MovieId (), DirectorId (), Budget (), ProductionCompany () | Genres : id (2, 1), Type ('Action', 'Drama') | MovieGenre : id (1, 2), MovieId (2, 1), GenreId (2)",
        "ambiguous_queries": [
            "SELECT Filmmaker FROM Movies JOIN MovieGenre ON Movies.id = MovieGenre.MovieId JOIN Genres ON Genres.id = MovieGenre.GenreId WHERE Type = 'Drama';",
            "SELECT Screenwriter FROM Movies JOIN MovieGenre ON Movies.id = MovieGenre.MovieId JOIN Genres ON Genres.id = MovieGenre.GenreId WHERE Type = 'Drama';",
            "SELECT Filmmaker, Screenwriter FROM Movies JOIN MovieGenre ON Movies.id = MovieGenre.MovieId JOIN Genres ON Genres.id = MovieGenre.GenreId WHERE Type = 'Drama';"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Movies\": [\"Filmmaker\"]}, {\"Movies\": [\"Screenwriter\"]}, {\"Movies\": [\"Filmmaker\", \"Screenwriter\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Movies\".\"Filmmaker\" and \"Movies\".\"Screenwriter\"",
        "clear_ambiguity": "{\"Who\": {\"Movies\": [\"Filmmaker\", \"Screenwriter\"]}}",
        "gold_query": "SELECT Filmmaker, Screenwriter FROM Movies JOIN MovieGenre ON Movies.id = MovieGenre.MovieId JOIN Genres ON Genres.id = MovieGenre.GenreId WHERE Type = 'Drama';"
    },
    {
        "index": 944,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_consulted_sources/vague_2tabs_consulted_sources.sqlite",
        "question": "What sources were used when filming 'AI Ethics & Society'?",
        "schema_without_content": "Experts : id, name, specialty | Archival_Footage : id, description, source, EXPERT_ID | Documentary : id, title, release_date, ARCHIVE_FOOTAGE_ID, EXPERT_ID | News_Articles : id, headline, content, publication_date, DOCUMENTARY_ID, EXPERT_ID | Interviews : id, date, details, EXPERT_ID",
        "schema_with_content": "Experts : id (4, 2, 1), name ('Michael White', 'Bob Johnson', 'Alice Brown'), specialty ('Technology', 'Politics', 'Healthcare') | Archival_Footage : id (3, 4, 2), description ('Global Health Summit', 'World Economic Forum 2018', '2016 Presidential Election Debates'), source ('YouTube', 'Vimeo', 'National Geographic Channel'), EXPERT_ID (3, 1, 4) | Documentary : id (3, 5, 1), title ('Green New Deal Explained', 'Global Pandemic Response', 'AI Ethics & Society'), release_date ('2021-07-15', '2021-02-01', '2020-12-10'), ARCHIVE_FOOTAGE_ID (5, 1, 2), EXPERT_ID (2, 5, 1) | News_Articles : id (4, 1, 5), headline ('Deforestation Crisis Worsens', \"China's AI Advancements\", 'COVID Vaccine Distribution'), content (\"Analyzes China's progress in AI...\", 'Explores potential solutions...', 'Updates on global vaccine distribution...'), publication_date ('2024-02-19 14:43:33', '2024-02-19 14:43:33', '2024-02-19 14:43:33'), DOCUMENTARY_ID (2, 4, 5), EXPERT_ID (5, 4, 2) | Interviews : id (1, 2, 5), date ('2021-09-05 11:00:00', '2021-08-10 14:30:00', '2021-07-25 10:00:00'), details ('Interview about economic recovery post-pandemic.', 'Insights on future technology trends and challenges.', 'Opinions on political polarization and its effects.'), EXPERT_ID (4, 5, 1)",
        "ambiguous_queries": [
            "SELECT name, specialty FROM Experts JOIN Documentary ON Documentary.EXPERT_ID = Experts.id WHERE title = 'AI Ethics & Society'",
            "SELECT description, source FROM Archival_Footage JOIN Documentary ON Documentary.Archive_Footage_ID = Archival_Footage.id WHERE title = 'AI Ethics & Society'",
            "SELECT name, specialty, description, source FROM Experts JOIN Documentary ON Documentary.EXPERT_ID = Experts.id JOIN Archival_Footage ON Documentary.Archive_Footage_ID = Archival_Footage.id WHERE title = 'AI Ethics & Society'"
        ],
        "gold_ambiguity": {
            "match": "{\"sources\": [{\"Archival_Footage\": [\"description\", \"source\"]}, {\"Experts\": [\"name\", \"specialty\"]}, {\"Archival_Footage\": [\"description\", \"source\"], \"Experts\": [\"name\", \"specialty\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"sources\" refers to the schema \"Experts\".\"name\" and \"Experts\".\"specialty\"",
        "clear_ambiguity": "{\"sources\": {\"Experts\": [\"name\", \"specialty\"]}}",
        "gold_query": "SELECT name, specialty FROM Experts JOIN Documentary ON Documentary.EXPERT_ID = Experts.id WHERE title = 'AI Ethics & Society'"
    },
    {
        "index": 945,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
        "question": "List each patient along with suitable vaccines and what they target",
        "schema_without_content": "Age_Group : id, name | Health_Condition : id, condition_name | Vaccine : id, vaccine_name, age_group_id, health_condition_id | Patient : patient_id, birthdate, phone_number, age_group_id, full_name | Doctor : doctor_id, first_name, last_name, specialty | Appointment : appointment_id, date, patient_id, doctor_id, medicalrecord_id | MedicalRecord : medicalrecord_id, patient_id, diagnosis, treatment_plan",
        "schema_with_content": "Age_Group : id (5, 4, 1), name ('18+', '14-17', '5-9') | Health_Condition : id (5, 3, 4), condition_name ('Allergy', 'Diabetes', 'Hypertension') | Vaccine : id (2, 3, 5), vaccine_name ('Pneumonia', 'Varicella', 'Hepatitis B'), age_group_id (1, 4, 1), health_condition_id (3, 1, 2) | Patient : patient_id (1, 2, 4), birthdate ('1990-08-25', '1988-09-15', '1975-10-20'), phone_number ('555-333-3333', '555-555-5555', '555-987-6543'), age_group_id (3, 4, 6), full_name ('John Doe', 'William Black', 'Jane Smith') | Doctor : doctor_id (2, 5, 1), first_name ('Dr.', 'Dr.', 'Dr.'), last_name ('Lee', 'Garcia', 'Adams'), specialty ('Endocrinology', 'Nephrology', 'Cardiology') | Appointment : appointment_id (3, 5, 4), date ('2022-10-16 20:00:00', '2022-10-15 18:00:00', '2022-10-13 14:00:00'), patient_id (1, 5, 2), doctor_id (5, 1, 4), medicalrecord_id (1, 3, 2) | MedicalRecord : medicalrecord_id (3, 1, 2), patient_id (3, 4, 1), diagnosis ('Depression', 'Asthma', 'Epilepsy'), treatment_plan ('Inhalers', 'Antidepressants', 'Counseling and Medication')",
        "ambiguous_queries": [
            "SELECT Patient.full_name, Age_Group.Name, Vaccine.Vaccine_Name FROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID",
            "SELECT Patient.full_name, Health_Condition.condition_name, Vaccine.Vaccine_Name FROM Patient INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN Health_Condition ON Vaccine.Health_Condition_Id = Health_Condition.Id",
            "SELECT Patient.full_name, Health_Condition.condition_name, Age_Group.Name, Vaccine.Vaccine_Name FROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id"
        ],
        "gold_ambiguity": {
            "match": "{\"target\": [{\"Age_Group\": [\"Name\"]}, {\"Health_Condition\": [\"condition_name\"]}, {\"Age_Group\": [\"Name\"], \"Health_Condition\": [\"condition_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"target\" refers to the schema \"Age_Group\".\"Name\"",
        "clear_ambiguity": "{\"target\": {\"Age_Group\": [\"Name\"]}}",
        "gold_query": "SELECT Patient.full_name, Age_Group.Name, Vaccine.Vaccine_Name FROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID"
    },
    {
        "index": 946,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_origin/vague_2cols_origin.sqlite",
        "question": "Display the origins of dances with popularity above 80 along with their popularity value.",
        "schema_without_content": "Artists : id, name, genre, birthdate, country | Albums : id, title, releaseDate, artistId | Songs : id, title, length, albumId | DanceTable : id, Culture, Geographical_Area, DanceName, Popularity, Tradition",
        "schema_with_content": "Artists : id (2, 1, 4), name ('Artist2', 'Artist3', 'Artist1'), genre ('Jazz', 'Classical', 'Pop'), birthdate ('1985-06-15', '1970-08-10', '1990-07-20'), country ('UK', 'USA', 'Germany') | Albums : id (2, 3, 1), title ('Album2', 'Album4', 'Album1'), releaseDate ('2005-09-25', '2004-08-10', '2001-01-01'), artistId (4, 2, 1) | Songs : id (3, 2, 5), title ('Song3', 'Song2', 'Song5'), length ('04:00:00', '07:00:00', '06:00:00'), albumId (5, 4, 2) | DanceTable : id (2, 3, 4), Culture ('American', 'Ghanaian', 'Korean'), Geographical_Area ('Sub Saharan Africa', 'North America', 'Western Europe'), DanceName ('Flamenco', 'Kpanlogo', 'Breakdancing'), Popularity (90, 75, 85), Tradition ('Spiritual and social event dance', 'Street dance', 'Cultural performance')",
        "ambiguous_queries": [
            "SELECT Culture, Popularity AS MostPopular FROM 'DanceTable' DanceTable WHERE Popularity > 80;",
            "SELECT Geographical_Area, Popularity AS MostPopular FROM 'DanceTable' DanceTable WHERE Popularity > 80;",
            "SELECT Culture, Geographical_Area, Popularity AS MostPopular FROM 'DanceTable' DanceTable WHERE Popularity > 80;"
        ],
        "gold_ambiguity": {
            "match": "{\"origins\": [{\"DanceTable\": [\"Culture\"]}, {\"DanceTable\": [\"Geographical_Area\"]}, {\"DanceTable\": [\"Culture\", \"Geographical_Area\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"origins\" refers to the schema \"DanceTable\".\"Culture\"",
        "clear_ambiguity": "{\"origins\": {\"DanceTable\": [\"Culture\"]}}",
        "gold_query": "SELECT Culture, Popularity AS MostPopular FROM 'DanceTable' DanceTable WHERE Popularity > 80;"
    },
    {
        "index": 947,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
        "question": "List all the students that are born after 1990 and what they study.",
        "schema_without_content": "Students : ID, BirthDate, Field_Of_Study, Degree_Program, Email, fullname | Enrolments : ID, StudentID, CourseID, Semester | Courses : ID, Title, Description, Credit | Marks : ID, EnrollmentID, Grade, DateAssigned",
        "schema_with_content": "Students : ID (2, 4, 3), BirthDate ('1990-05-15', '1996-09-15', '1992-07-01'), Field_Of_Study ('Computer Science', 'Mathematics', 'Biology'), Degree_Program ('BSc', 'BSc', 'MSc'), Email ('john.doe@example.com', 'alice.johnson@example.com', 'emma.brown@example.com'), fullname ('Emma Brown', 'Tom Williams', 'Alice Johnson') | Enrolments : ID (), StudentID (), CourseID (), Semester () | Courses : ID (5, 3, 2), Title ('Introduction to Computer Programming', 'Abnormal Psychology', 'Cellular Biology'), Description ('An advanced course covering cell structure and function.', 'An introductory course on quantum mechanics principles.', 'Exploring various psychological disorders and their treatment.'), Credit (3, 4, 4) | Marks : ID (), EnrollmentID (), Grade (), DateAssigned ()",
        "ambiguous_queries": [
            "SELECT fullname, Field_Of_Study FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT) > '1990'",
            "SELECT fullname, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT) > '1990'",
            "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT) > '1990'"
        ],
        "gold_ambiguity": {
            "match": "{\"study\": [{\"Students\": [\"Field_Of_Study\"]}, {\"Students\": [\"Degree_Program\"]}, {\"Students\": [\"Field_Of_Study\", \"Degree_Program\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"study\" refers to the schema \"Students\".\"Degree_Program\"",
        "clear_ambiguity": "{\"study\": {\"Students\": [\"Degree_Program\"]}}",
        "gold_query": "SELECT fullname, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT) > '1990'"
    },
    {
        "index": 948,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_deposit_limit/vague_2cols_deposit_limit.sqlite",
        "question": "show me the limits for checking accounts",
        "schema_without_content": "Customers : CustomerID, fullname | Accounts : AccountNumber, CustomerID, Balance | Transactions : TransactionID, AccountNumber, Amount, TransactionDate | Loans : LoanNumber, CustomerID, Principal, InterestRate, MonthlyPayment | SavingsAccounts : SavingsID, CustomerID, InterestRate | CheckingAccounts : CheckingID, Maximum_Deposit_Amount, Monthly_Cap, Checking_Account, CustomerID",
        "schema_with_content": "Customers : CustomerID (1, 4, 2), fullname ('John Doe', 'Jane Smith', 'Michael Brown') | Accounts : AccountNumber (10004, 10003, 10005), CustomerID (4, 2, 1), Balance (900.0, 700.0, 800.0) | Transactions : TransactionID (1, 4, 3), AccountNumber (10001, 10003, 10005), Amount (50.0, 30.0, 10.0), TransactionDate ('2024-02-19 15:07:58', '2024-02-19 15:07:58', '2024-02-19 15:07:58') | Loans : LoanNumber (1, 5, 4), CustomerID (2, 4, 5), Principal (6000, 8000, 9000), InterestRate (0.055, 0.06, 0.05), MonthlyPayment (120.0, 190.0, 140.0) | SavingsAccounts : SavingsID (5, 2, 3), CustomerID (5, 2, 4), InterestRate (0.025, 0.03, 0.01) | CheckingAccounts : CheckingID (2, 4, 1), Maximum_Deposit_Amount (1000.0, 4000.0, 2000.0), Monthly_Cap (400.0, 1000.0, 600.0), Checking_Account (0, 1, 0), CustomerID (1, 2, 4)",
        "ambiguous_queries": [
            "select Maximum_Deposit_Amount from checkingaccounts where checking_account = 1",
            "select Monthly_Cap from checkingaccounts where checking_account = 1",
            "select Maximum_Deposit_Amount, Monthly_Cap from checkingaccounts where checking_account = 1"
        ],
        "gold_ambiguity": {
            "match": "{\"limits\": [{\"CheckingAccounts\": [\"Maximum_Deposit_Amount\", \"Monthly_Cap\"]}, {\"CheckingAccounts\": [\"Maximum_Deposit_Amount\"]}, {\"CheckingAccounts\": [\"Monthly_Cap\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"limits\" refers to the schema \"checkingaccounts\".\"Monthly_Cap\"",
        "clear_ambiguity": "{\"limits\": {\"CheckingAccounts\": [\"Monthly_Cap\"]}}",
        "gold_query": "select Monthly_Cap from checkingaccounts where checking_account = 1"
    },
    {
        "index": 949,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2tabs_departure_point/vague_2tabs_departure_point.sqlite",
        "question": "Show departure point from each flight",
        "schema_without_content": "City : id, name, country | Flight : id, flight_number, departure_time, arrival_time, terminal_id, origin_city_id, destination_city_id | Airline : id, airline_name, headquarter_city_id | Pilot : id, pilot_license_number, home_airport_code | Plane : id, plane_type, capacity, registered_to_airline_id, current_pilot_id | Terminal : id, terminal_name",
        "schema_with_content": "City : id (5, 3, 1), name ('Dubai', 'London', 'Tokyo'), country ('France', 'UAE', 'Japan') | Flight : id (4, 3, 2), flight_number ('AF401', 'JL301', 'AA101'), departure_time ('2022-12-01 19:00:00', '2022-12-01 22:00:00', '2022-12-01 11:00:00'), arrival_time ('2022-12-01 21:00:00', '2022-12-01 17:00:00', '2022-12-01 13:00:00'), terminal_id (5, 4, 3), origin_city_id (3, 5, 1), destination_city_id (1, 4, 2) | Airline : id (4, 1, 5), airline_name ('American Airlines', 'Air France', 'All Nippon Airways'), headquarter_city_id (1, 4, 5) | Pilot : id (2, 3, 5), pilot_license_number ('GHI9012', 'JKL3456', 'DEF5678'), home_airport_code ('TYO', 'LDN', 'CDG') | Plane : id (1, 5, 3), plane_type ('Airbus A380', 'Airbus A320', 'Bombardier CRJ1000'), capacity (400, 200, 500), registered_to_airline_id (1, 3, 4), current_pilot_id (1, 5, 4) | Terminal : id (5, 3, 4), terminal_name ('Terminal 5', 'Terminal 1', 'Terminal 2')",
        "ambiguous_queries": [
            "SELECT Flight.flight_number, Terminal.terminal_name FROM Terminal JOIN Flight ON Flight.terminal_id = Terminal.id",
            "SELECT Flight.flight_number, City.name FROM City JOIN Flight ON Flight.origin_city_id = City.id",
            "SELECT Flight.flight_number, Terminal.terminal_name, City.name FROM Terminal JOIN Flight ON Flight.terminal_id = Terminal.id JOIN City ON Flight.origin_city_id = City.id"
        ],
        "gold_ambiguity": {
            "match": "{\"departure point\": [{\"City\": [\"name\"]}, {\"Terminal\": [\"terminal_name\"]}, {\"City\": [\"name\"], \"Terminal\": [\"terminal_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"departure point\" refers to the schema \"City\".\"name\"",
        "clear_ambiguity": "{\"departure point\": {\"City\": [\"name\"]}}",
        "gold_query": "SELECT Flight.flight_number, City.name FROM City JOIN Flight ON Flight.origin_city_id = City.id"
    },
    {
        "index": 950,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_location2/vague_2cols_location2.sqlite",
        "question": "Show a list of transactions by customer and location where the transaction amount is less than 1000 and order the list by date and lower amounts at the beginning of the list by date.",
        "schema_without_content": "Customers : CustomerID, fullname | Addresses : AddressID, CustomerID, City, Country, Banks | Accounts : AccountNumber, CustomerID, Balance, InterestRate | Transactions : TransactionID, AccountNumber, Amount, TransactionDate",
        "schema_with_content": "Customers : CustomerID (1, 4, 3), fullname ('David Brown', 'Michael Johnson', 'Jane Smith') | Addresses : AddressID (3, 2, 5), CustomerID (4, 2, 1), City ('Houston', 'Chicago', 'Phoenix'), Country ('USA', 'USA', 'USA'), Banks ('Bank of America', 'Capital One', 'Chase') | Accounts : AccountNumber (1002, 1001, 1004), CustomerID (2, 3, 4), Balance (9000, 7000, 1000), InterestRate (2, 3, 3.5) | Transactions : TransactionID (1, 2, 5), AccountNumber (1001, 1003, 1004), Amount (600, 500, 1100), TransactionDate ('2021-01-02 10:00:00', '2021-01-04 10:00:00', '2021-01-05 10:00:00')",
        "ambiguous_queries": [
            "SELECT Accounts.AccountNumber, Customers.FullName, Transactions.Amount, Transactions.TransactionDate, Addresses.City FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Transactions ON Transactions.AccountNumber = Accounts.AccountNumber JOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID WHERE Transactions.Amount < '1000' ORDER BY Transactions.TransactionDate ASC, Transactions.Amount ASC",
            "SELECT Accounts.AccountNumber, Customers.FullName, Transactions.Amount, Transactions.TransactionDate, Addresses.Country FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Transactions ON Transactions.AccountNumber = Accounts.AccountNumber JOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID WHERE Transactions.Amount < '1000' ORDER BY Transactions.TransactionDate ASC, Transactions.Amount ASC",
            "SELECT Accounts.AccountNumber, Customers.FullName, Transactions.Amount, Transactions.TransactionDate, Addresses.City, Country FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Transactions ON Transactions.AccountNumber = Accounts.AccountNumber JOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID WHERE Transactions.Amount < '1000' ORDER BY Transactions.TransactionDate ASC, Transactions.Amount ASC"
        ],
        "gold_ambiguity": {
            "match": "{\"location\": [{\"Addresses\": [\"City\"]}, {\"Addresses\": [\"Country\"]}, {\"Addresses\": [\"City\", \"Country\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"location\" refers to the schema \"Addresses\".\"City\"",
        "clear_ambiguity": "{\"location\": {\"Addresses\": [\"City\"]}}",
        "gold_query": "SELECT Accounts.AccountNumber, Customers.FullName, Transactions.Amount, Transactions.TransactionDate, Addresses.City FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN Transactions ON Transactions.AccountNumber = Accounts.AccountNumber JOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID WHERE Transactions.Amount < '1000' ORDER BY Transactions.TransactionDate ASC, Transactions.Amount ASC"
    },
    {
        "index": 951,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
        "question": "What safety measures will the architect require?",
        "schema_without_content": "Material : materialID, name, quantity, cost | Employee : employeeID, firstName, lastName, hireDate, position | Project : projectID, projectName, startDate, endDate, budget | Inventory : inventoryID, materialID, quantity | Safety : safetyID, employeeID, personalProtectiveEquipment, trainingPrograms, constructionWorker",
        "schema_with_content": "Material : materialID (5, 1, 4), name ('Steel Rebars', 'Electrical Wiring', 'Cement'), quantity (100, 200, 150), cost (39.99, 18.5, 25.0) | Employee : employeeID (5, 2, 3), firstName ('Jane', 'John', 'Mike'), lastName ('White', 'Brown', 'Smith'), hireDate ('2021-03-01', '2021-05-01', '2021-04-01'), position ('Architect', 'Construction Worker', 'Engineer') | Project : projectID (1, 5, 4), projectName ('Road Repair', 'Commercial Complex', 'School Renovation'), startDate ('2021-10-01', '2021-06-01', '2021-08-01'), endDate ('2021-12-01', '2021-10-01', '2021-08-01'), budget (300000.0, 600000.0, 1000000.0) | Inventory : inventoryID (1, 2, 3), materialID (4, 2, 1), quantity (50, 100, 200) | Safety : safetyID (2, 1, 4), employeeID (3, 4, 1), personalProtectiveEquipment ('Helmet, Safety Shoes, Goggles', 'Hard Hat, Gloves, Knee Pads', 'Hard Hat, Gloves, Safety Vest'), trainingPrograms ('OSHA Training, First Aid Certification', 'Hazard Communication Training, Forklift Operation', 'Lockout/Tagout Training, Confined Space Entry'), constructionWorker ('Expert', 'Skilled', 'Novice')",
        "ambiguous_queries": [
            "SELECT Safety.personalProtectiveEquipment FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.position ='Architect'",
            "SELECT Safety.trainingPrograms FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.position ='Architect'",
            "SELECT Safety.personalProtectiveEquipment, trainingPrograms FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.position ='Architect'"
        ],
        "gold_ambiguity": {
            "query": "{}",
            "match": "{\"safety measures\": [{\"Safety\": [\"personalProtectiveEquipment\"]}, {\"Safety\": [\"trainingPrograms\"]}, {\"Safety\": [\"personalProtectiveEquipment\", \"trainingPrograms\"]}]}"
        },
        "clarification_context": "\"safety measures\" refers to the schema \"Safety\".\"personalProtectiveEquipment\"",
        "clear_ambiguity": "{\"safety measures\": {\"Safety\": [\"personalProtectiveEquipment\"]}}",
        "gold_query": "SELECT Safety.personalProtectiveEquipment FROM Safety JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID WHERE Employee.position ='Architect'"
    },
    {
        "index": 952,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2cols_findings/vague_2cols_findings.sqlite",
        "question": "Show me the findings and sites of the two youngest artifacts.",
        "schema_without_content": "Workers : ID, Name, ContactNumber, SkillLevel | Equipment : ID, Type, SerialNumber, PurchaseDate | Artifacts : ID, Artifacts_Uncovered, Ancient_Remains, Archaeological_Site, EstimatedAge",
        "schema_with_content": "Workers : ID (1, 3, 5), Name ('David Brown', 'John Doe', 'Mike Johnson'), ContactNumber ('123-456-7890', '987-654-3210', '555-987-6543'), SkillLevel ('Advanced', 'Beginner', 'Expert') | Equipment : ID (4, 5, 1), Type ('Excavator', 'Backhoe', 'Dump Truck'), SerialNumber ('ABC123', 'JKL012', 'MNO345'), PurchaseDate ('2019-06-15', '2021-03-20', '2018-09-10') | Artifacts : ID (3, 1, 4), Artifacts_Uncovered ('Beads', 'Pottery shards', 'Clay figurines'), Ancient_Remains ('Broken pieces', 'Fossilized teeth', 'Chipped stone points'), Archaeological_Site ('Valley Ridge', 'Riverbend Park', 'Mountain View'), EstimatedAge (1500, 3000, 10000)",
        "ambiguous_queries": [
            "SELECT Artifacts_Uncovered, Archaeological_Site FROM Artifacts ORDER BY EstimatedAge ASC LIMIT 2",
            "SELECT Ancient_Remains, Archaeological_Site FROM Artifacts ORDER BY EstimatedAge ASC LIMIT 2",
            "SELECT Artifacts_Uncovered, Ancient_Remains, Archaeological_Site FROM Artifacts ORDER BY EstimatedAge ASC LIMIT 2"
        ],
        "gold_ambiguity": {
            "match": "{\"findings\": [{\"Artifacts\": [\"Artifacts_Uncovered\"]}, {\"Artifacts\": [\"Ancient_Remains\"]}, {\"Artifacts\": [\"Artifacts_Uncovered\", \"Ancient_Remains\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"findings\" refers to the schema \"Artifacts\".\"Ancient_Remains\"",
        "clear_ambiguity": "{\"findings\": {\"Artifacts\": [\"Ancient_Remains\"]}}",
        "gold_query": "SELECT Ancient_Remains, Archaeological_Site FROM Artifacts ORDER BY EstimatedAge ASC LIMIT 2"
    },
    {
        "index": 953,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2tabs_resources1/vague_2tabs_resources1.sqlite",
        "question": "What resources are available for optical spectroscopy?",
        "schema_without_content": "Textbooks : id, title, author | Supplies : id, name, quantity_needed | Projects : id, project_name, description, supplies_id, textbook_id | Students : id, student_name, age, class_id | Teachers : id, teacher_name, subject, class_id",
        "schema_with_content": "Textbooks : id (3, 2, 4), title ('Physics for Scientists and Engineers', 'Mathematical Methods for Physicists', 'Biology: The Dynamic Universe'), author ('Serway & Jewett', 'John Doe', 'James S. Aber') | Supplies : id (1, 5, 3), name ('Bunsen Burners', 'Goggles', 'Scales'), quantity_needed (20, 3, 25) | Projects : id (2, 1, 5), project_name ('Optical Spectroscopy', 'Calorimetry Measurements', 'Molecular Model Building'), description ('Analyzing light absorption patterns of elements and compounds.', 'Identifying different types of acids and bases.', 'Measuring heat capacity using a calorimeter.'), supplies_id (5, 2, 3), textbook_id (5, 4, 1) | Students : id (2, 4, 3), student_name ('Charlie Brown', 'Bob Johnson', 'Alice Smith'), age (17, 16, 17), class_id (1, 2, 3) | Teachers : id (4, 5, 1), teacher_name ('Assistant Professor Black', 'Dr. Red', 'Mr. Green'), subject ('Chemistry', 'Computer Science', 'Biology'), class_id (3, 2, 1)",
        "ambiguous_queries": [
            "SELECT title FROM Textbooks JOIN Projects ON Textbooks.id = Projects.textbook_id WHERE Projects.project_name = 'Optical Spectroscopy'",
            "SELECT name FROM Supplies JOIN Projects ON Supplies.id = Projects.Supplies_id WHERE Projects.project_name = 'Optical Spectroscopy'",
            "SELECT title, name FROM Textbooks JOIN Projects ON Textbooks.id = Projects.textbook_id JOIN Supplies ON Supplies.id = Projects.Supplies_id WHERE Projects.project_name = 'Optical Spectroscopy'"
        ],
        "gold_ambiguity": {
            "match": "{\"resources\": [{\"Supplies\": [\"name\"]}, {\"Textbooks\": [\"title\"]}, {\"Supplies\": [\"name\"], \"Textbooks\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"resources\" refers to the schema \"Textbooks\".\"title\"",
        "clear_ambiguity": "{\"resources\": {\"Textbooks\": [\"title\"]}}",
        "gold_query": "SELECT title, name FROM Textbooks JOIN Projects ON Textbooks.id = Projects.textbook_id JOIN Supplies ON Supplies.id = Projects.Supplies_id WHERE Projects.project_name = 'Optical Spectroscopy'"
    },
    {
        "index": 954,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
        "question": "What technology does the author with email 'davidwilson@example.com' use?",
        "schema_without_content": "Authors : authorID, name, email | Articles : articleID, title, content, publicationDate, authorID | Sources : sourceID, name, url | ArticleSources : articleSourceID, articleID, sourceID, referenceDate | ContentManagementSystems : cmsId, Content_Management_System, Web_Framework, Online_News_Platform | EditorialTeamMembers : memberID, role, editorName",
        "schema_with_content": "Authors : authorID (1, 3, 4), name ('John Doe', 'Emily Brown', 'Jane Smith'), email ('michaeljohnson@example.com', 'davidwilson@example.com', 'johndoe@example.com') | Articles : articleID (3, 2, 5), title ('Fourth Article Title', 'Fifth Article Title', 'First Article Title'), content ('This is the fourth article content.', 'This is the fifth article content.', 'This is the second article content.'), publicationDate ('2024-02-19 14:35:51', '2024-02-19 14:35:51', '2024-02-19 14:35:51'), authorID (3, 1, 4) | Sources : sourceID (3, 1, 4), name ('CNN', 'BBC News', 'Deutsche Welle'), url ('https://www.nytimes.com/', 'https://www.bbc.co.uk/news/', 'https://www.cnn.com/') | ArticleSources : articleSourceID (5, 1, 4), articleID (2, 5, 3), sourceID (4, 1, 3), referenceDate ('2021-07-01 10:00:00', '2021-07-01 10:00:00', '2021-07-01 10:00:00') | ContentManagementSystems : cmsId (3, 4, 5), Content_Management_System ('Plone', 'WordPress', 'Concrete5'), Web_Framework ('PHP', 'PHP', 'PHP'), Online_News_Platform ('Zen Cart', 'Newspack', 'Tribune Content Agency') | EditorialTeamMembers : memberID (4, 3, 5), role ('Copy Chief', 'Features Editor', 'Managing Editor'), editorName ('Mary Williams', 'Ann Taylor', 'Chris Harris')",
        "ambiguous_queries": [
            "SELECT DISTINCT CMS.Content_Management_System FROM Authors AS A JOIN Articles AS AR ON A.authorID = AR.authorID JOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId WHERE A.email = 'davidwilson@example.com';",
            "SELECT DISTINCT CMS.Web_Framework FROM Authors AS A JOIN Articles AS AR ON A.authorID = AR.authorID JOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId WHERE A.email = 'davidwilson@example.com';",
            "SELECT DISTINCT CMS.Content_Management_System, Web_Framework FROM Authors AS A JOIN Articles AS AR ON A.authorID = AR.authorID JOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId WHERE A.email = 'davidwilson@example.com';"
        ],
        "gold_ambiguity": {
            "match": "{\"technology\": [{\"ContentManagementSystems\": [\"Content_Management_System\"]}, {\"ContentManagementSystems\": [\"Web_Framework\"]}, {\"ContentManagementSystems\": [\"Content_Management_System\", \"Web_Framework\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"technology\" refers to the schema \"ContentManagementSystems\".\"Content_Management_System\"",
        "clear_ambiguity": "{\"technology\": {\"ContentManagementSystems\": [\"Content_Management_System\"]}}",
        "gold_query": "SELECT DISTINCT CMS.Content_Management_System FROM Authors AS A JOIN Articles AS AR ON A.authorID = AR.authorID JOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId WHERE A.email = 'davidwilson@example.com';"
    },
    {
        "index": 955,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_key_elements/vague_2tabs_key_elements.sqlite",
        "question": "Describe a denim jacket.",
        "schema_without_content": "Color_Palette : color_id, color_name | Fabric_Choice : fabric_id, fabric_type | Fashion_Design : design_id, design_name, color_id, fabric_id",
        "schema_with_content": "Color_Palette : color_id (1, 5, 2), color_name ('Red', 'Blue', 'White') | Fabric_Choice : fabric_id (5, 3, 4), fabric_type ('Linen', 'Silk', 'Cotton') | Fashion_Design : design_id (2, 5, 4), design_name ('Denim Jacket', 'Classic Black Suit', 'Summer Dress'), color_id (2, 3, 5), fabric_id (4, 2, 5)",
        "ambiguous_queries": [
            "SELECT color_name FROM Color_Palette JOIN Fashion_Design ON Fashion_Design.color_id = Color_Palette.color_id WHERE design_name = 'Denim Jacket';",
            "SELECT fabric_type FROM Fabric_Choice JOIN Fashion_Design ON Fashion_Design.fabric_id = Fabric_Choice.fabric_id WHERE design_name = 'Denim Jacket';",
            "SELECT color_name, fabric_type FROM Color_Palette JOIN Fashion_Design ON Fashion_Design.color_id = Color_Palette.color_id JOIN Fabric_Choice ON Fashion_Design.fabric_id = Fabric_Choice.fabric_id WHERE design_name = 'Denim Jacket';"
        ],
        "gold_ambiguity": {
            "match": "{\"Describe\": [{\"Color_Palette\": [\"color_name\"]}, {\"Fabric_Choice\": [\"fabric_type\"]}, {\"Color_Palette\": [\"color_name\"], \"Fabric_Choice\": [\"fabric_type\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Describe\" refers to the schema \"Color_Palette\".\"color_name\"",
        "clear_ambiguity": "{\"Describe\": {\"Color_Palette\": [\"color_name\"]}}",
        "gold_query": "SELECT color_name FROM Color_Palette JOIN Fashion_Design ON Fashion_Design.color_id = Color_Palette.color_id WHERE design_name = 'Denim Jacket';"
    },
    {
        "index": 956,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_location2/vague_2cols_location2.sqlite",
        "question": "Show me the phone numbers and locations of pop music fans.",
        "schema_without_content": "Artists : ArtistID, Name, Genre | Albums : AlbumID, Title, ReleaseYear, ArtistID | Concerts : ConcertID, Date, City, Country, VenueName, HeadlineArtistID | Tickets : TicketID, PurchaseDate, SeatNumber, CustomerID, ConcertID, Price | Customers : CustomerID, FirstName, LastName, Email, PhoneNumber, AddressLine, PostalCode",
        "schema_with_content": "Artists : ArtistID (3, 2, 1), Name ('The Beatles', 'Michael Jackson', 'Adele'), Genre ('Pop', 'Pop', 'Rock') | Albums : AlbumID (3, 1, 2), Title ('Thriller', 'Abbey Road', '21'), ReleaseYear (1982, 1969, 2011), ArtistID (3, 1, 2) | Concerts : ConcertID (3, 1, 2), Date ('2021-08-01 20:00:00', '2021-07-15 20:00:00', '2021-09-10 20:00:00'), City ('Paris', 'London', 'New York'), Country ('UK', 'USA', 'France'), VenueName ('Stade de France', 'Wembley Stadium', 'MetLife Stadium'), HeadlineArtistID (3, 1, 2) | Tickets : TicketID (3, 1, 4), PurchaseDate ('2021-08-01 12:00:00', '2021-07-15 12:00:00', '2021-07-15 12:00:00'), SeatNumber ('Section B, Row 1, Seat 10', 'Section C, Row 1, Seat 10', 'Section A, Row 1, Seat 10'), CustomerID (3, 4, 2), ConcertID (2, 2, 1), Price (150, 100, 75) | Customers : CustomerID (2, 1, 4), FirstName ('Emily', 'John', 'Peter'), LastName ('Jackson', 'Smith', 'Doe'), Email ('janesmith@example.com', 'johndoe@example.com', 'pjackson@example.com'), PhoneNumber ('+19876543210', '+1234567890', '+1357924680'), AddressLine ('789 Oak St', '123 Main St', '456 Elm St'), PostalCode ('90001', '19101', '02110')",
        "ambiguous_queries": [
            "SELECT Customers.PhoneNumber, Customers.AddressLine FROM Tickets JOIN Customers ON Tickets.CustomerID = Customers.CustomerID JOIN Concerts ON Concerts.ConcertID = Tickets.ConcertID JOIN Artists ON Artists.ArtistID = Concerts.HeadlineArtistID WHERE Artists.Genre = 'Pop';",
            "SELECT Customers.PhoneNumber, Customers.PostalCode FROM Tickets JOIN Customers ON Tickets.CustomerID = Customers.CustomerID JOIN Concerts ON Concerts.ConcertID = Tickets.ConcertID JOIN Artists ON Artists.ArtistID = Concerts.HeadlineArtistID WHERE Artists.Genre = 'Pop';",
            "SELECT Customers.PhoneNumber, Customers.AddressLine, PostalCode FROM Tickets JOIN Customers ON Tickets.CustomerID = Customers.CustomerID JOIN Concerts ON Concerts.ConcertID = Tickets.ConcertID JOIN Artists ON Artists.ArtistID = Concerts.HeadlineArtistID WHERE Artists.Genre = 'Pop';"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"Customers\": [\"AddressLine\"]}, {\"Customers\": [\"PostalCode\"]}, {\"Customers\": [\"AddressLine\", \"PostalCode\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"Customers\".\"AddressLine\"",
        "clear_ambiguity": "{\"locations\": {\"Customers\": [\"AddressLine\"]}}",
        "gold_query": "SELECT Customers.PhoneNumber, Customers.AddressLine FROM Tickets JOIN Customers ON Tickets.CustomerID = Customers.CustomerID JOIN Concerts ON Concerts.ConcertID = Tickets.ConcertID JOIN Artists ON Artists.ArtistID = Concerts.HeadlineArtistID WHERE Artists.Genre = 'Pop';"
    },
    {
        "index": 957,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_minimum_requirement/vague_2cols_minimum_requirement.sqlite",
        "question": "Show me minimum requirements for savings accounts along with the account numbers",
        "schema_without_content": "customers : customer_id, first_name, last_name, date_of_birth, address | accounts : account_number, customer_id, account_type, balance | transactions : transaction_id, account_number, amount, transaction_date | minimum_requirements : requirement_id, account_number, minimum_balance, minimum_age, money_market_accounts | loans : loan_id, customer_id, loan_amount, interest_rate, repayment_term, start_date | overdraft_facilities : facility_id, customer_id, limit_amount, interest_rate",
        "schema_with_content": "customers : customer_id (2, 1), first_name ('John', 'Jane'), last_name ('Smith', 'Doe'), date_of_birth ('1970-06-15', '1985-09-20'), address ('123 Main St', '456 Elm St') | accounts : account_number (2, 1), customer_id (2, 1), account_type ('Savings', 'Checking'), balance (1000.0, 500.0) | transactions : transaction_id (2, 1), account_number (1, 2), amount (-50.0, 200.0), transaction_date ('2024-02-19 13:39:22', '2024-02-19 13:39:22') | minimum_requirements : requirement_id (1, 2), account_number (2, 1), minimum_balance (1000, 500), minimum_age (18, 21), money_market_accounts (1, 0) | loans : loan_id (1, 2), customer_id (1, 2), loan_amount (10000.0, 5000.0), interest_rate (5.0, 4.0), repayment_term (36, 24), start_date ('2024-02-19 13:39:22', '2024-02-19 13:39:22') | overdraft_facilities : facility_id (1, 2), customer_id (2, 1), limit_amount (200.0, 500.0), interest_rate (10.0, 15.0)",
        "ambiguous_queries": [
            "SELECT m.minimum_balance, a.account_number FROM minimum_requirements m JOIN Accounts a ON a.account_number = m.account_number WHERE a.account_type = 'Savings'",
            "SELECT m.minimum_age, a.account_number FROM minimum_requirements m JOIN Accounts a ON a.account_number = m.account_number WHERE a.account_type = 'Savings'",
            "SELECT m.minimum_balance, minimum_age, a.account_number FROM minimum_requirements m JOIN Accounts a ON a.account_number = m.account_number WHERE a.account_type = 'Savings'"
        ],
        "gold_ambiguity": {
            "match": "{\"minimum requirements\": [{\"minimum_requirements\": [\"minimum_balance\", \"minimum_age\"]}, {\"minimum_requirements\": [\"minimum_balance\"]}, {\"minimum_requirements\": [\"minimum_age\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"minimum requirements\" refers to the schema \"minimum_requirements\".\"minimum_age\"",
        "clear_ambiguity": "{\"minimum requirements\": {\"minimum_requirements\": [\"minimum_age\"]}}",
        "gold_query": "SELECT m.minimum_age, a.account_number FROM minimum_requirements m JOIN Accounts a ON a.account_number = m.account_number WHERE a.account_type = 'Savings'"
    },
    {
        "index": 958,
        "db_id": "Job Postings",
        "ambig_type": "vague",
        "db_file": "vague/Job Postings/vague_2cols_supervisor/vague_2cols_supervisor.sqlite",
        "question": "List all the supervisors in Company B",
        "schema_without_content": "Companies : companyID, name, location | Departments : deptID, deptName, companyID | Teams : teamID, teamName, deptID | Positions : positionID, title, description, teamID | Management : roleID, PositionID, Department_Head, Team_Leader | Employees : employeeID, email, phoneNumber, hireDate, positionID, fullname",
        "schema_with_content": "Companies : companyID (3, 1, 4), name ('Company C', 'Company D', 'Company E'), location ('Chicago', 'New York', 'Los Angeles') | Departments : deptID (3, 1, 4), deptName ('Finance', 'Human Resources', 'Engineering'), companyID (2, 4, 3) | Teams : teamID (4, 5, 2), teamName ('Data Analysts', 'Graphic Designers', 'Content Writers'), deptID (2, 1, 4) | Positions : positionID (4, 5, 1), title ('UX/UI Designer', 'Android Developer', 'Accountant'), description ('Design and develop Android apps.', 'Develop and maintain software applications.', 'Create user-centered designs.'), teamID (4, 2, 1) | Management : roleID (5, 4, 3), PositionID (2, 4, 1), Department_Head ('Olivia Martinez', 'Sophia Lee', 'Emma Garcia'), Team_Leader ('Jane Smith', 'Kate Green', 'Robert Elliot') | Employees : employeeID (4, 2, 3), email ('linda.green@example.com', 'tom.brown@example.com', 'kevin.black@example.com'), phoneNumber ('555-555-5555', '098-765-4321', '555-123-4567'), hireDate ('2019-03-05', '2021-01-15', '2020-02-10'), positionID (2, 4, 5), fullname ('Tom Brown', 'Alice Johnson', 'John Doe')",
        "ambiguous_queries": [
            "select distinct M.Department_Head from Management M inner join positions P on P.positionId = M.positionId inner join Teams T on T.teamId = P.TeamId inner join Departments D on D.deptId = T.deptId inner join Companies C on C.companyId = D.companyId where C.name = 'Company B'",
            "select distinct M.Team_Leader from Management M inner join positions P on P.positionId = M.positionId inner join Teams T on T.teamId = P.TeamId inner join Departments D on D.deptId = T.deptId inner join Companies C on C.companyId = D.companyId where C.name = 'Company B'",
            "select distinct M.Department_Head, Team_Leader from Management M inner join positions P on P.positionId = M.positionId inner join Teams T on T.teamId = P.TeamId inner join Departments D on D.deptId = T.deptId inner join Companies C on C.companyId = D.companyId where C.name = 'Company B'"
        ],
        "gold_ambiguity": {
            "match": "{\"supervisors\": [{\"Management\": [\"Department_Head\"]}, {\"Management\": [\"Team_Leader\"]}, {\"Management\": [\"Department_Head\", \"Team_Leader\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"supervisors\" refers to the schema \"Management\".\"Team_Leader\"",
        "clear_ambiguity": "{\"supervisors\": {\"Management\": [\"Team_Leader\"]}}",
        "gold_query": "select distinct M.Team_Leader from Management M inner join positions P on P.positionId = M.positionId inner join Teams T on T.teamId = P.TeamId inner join Departments D on D.deptId = T.deptId inner join Companies C on C.companyId = D.companyId where C.name = 'Company B'"
    },
    {
        "index": 959,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
        "question": "What is the average rating for all action movies?",
        "schema_without_content": "Genre : id, name | Director : id, firstName, lastName | Actor : id, firstName, lastName | Movie : id, title, releaseDate, genreId, directorId | Rating : movieId, ageRating, criticalRating, tvShow | Review : id, reviewText, rating, actorId, movieId",
        "schema_with_content": "Genre : id (4, 1, 3), name ('Romance', 'Comedy', 'Drama') | Director : id (2, 3, 1), firstName ('Jane', 'Emma', 'Chris'), lastName ('Smith', 'Evans', 'Watson') | Actor : id (5, 2, 3), firstName ('Brad', 'Angelina', 'Tom'), lastName ('Pitt', 'Jolie', 'Johansson') | Movie : id (4, 2, 1), title ('Titanic', 'Inception', 'Avengers: Endgame'), releaseDate ('2014-11-07', '2008-07-18', '1997-12-19'), genreId (2, 4, 1), directorId (1, 5, 3) | Rating : movieId (5, 2, 4), ageRating (15, 12, 16), criticalRating (8.5, 7.5, 9.0), tvShow (0, 0, 0) | Review : id (2, 3, 5), reviewText ('Too long and not as good as expected.', 'A masterpiece of cinema.', 'Amazing visuals but weak storyline.'), rating (5, 2, 3), actorId (3, 4, 5), movieId (4, 1, 2)",
        "ambiguous_queries": [
            "SELECT AVG(ageRating) AS average_rating FROM 'Rating' JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = 'Action';",
            "SELECT AVG(criticalRating) AS average_rating FROM 'Rating' JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = 'Action';",
            "SELECT AVG(ageRating), AVG(criticalRating) FROM 'Rating' JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = 'Action';"
        ],
        "gold_ambiguity": {
            "match": "{\"average rating\": [{\"Rating\": [\"ageRating\"]}, {\"Rating\": [\"criticalRating\"]}, {\"Rating\": [\"ageRating\", \"criticalRating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"average rating\" refers to the schema \"Rating\".\"criticalRating\"",
        "clear_ambiguity": "{\"average rating\": {\"Rating\": [\"criticalRating\"]}}",
        "gold_query": "SELECT AVG(criticalRating) AS average_rating FROM 'Rating' JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = 'Action';"
    },
    {
        "index": 960,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_size_limits/vague_2cols_size_limits.sqlite",
        "question": "What is the size limit for the plane departing from the runway with length 5000 at 11:00 on the 4th of January?",
        "schema_without_content": "Airports : id, name, city, country | Airlines : id, name, headquarter_city, headquarter_country | Planes : id, model, linear_dimensions, weight_restriction, airline_id | Runways : id, length, width, capacity, airport_id | Flights : id, departure_time, arrival_time, runway_id, plane_model | Passengers : id, fullname, passport, flight_id",
        "schema_with_content": "Airports : id (5, 2, 1), name ('Airport4', 'Airport1', 'Airport5'), city ('CityB', 'CityC', 'CityE'), country ('CountryZ', 'CountryY', 'CountryV') | Airlines : id (5, 4, 1), name ('Airline1', 'Airline3', 'Airline5'), headquarter_city ('HeadquartersD', 'HeadquartersA', 'HeadquartersB'), headquarter_country ('HQY', 'HQV', 'HQZ') | Planes : id (3, 4, 1), model ('PlaneModel2', 'PlaneModel5', 'PlaneModel3'), linear_dimensions ('Dimensions1', 'Dimensions5', 'Dimensions3'), weight_restriction (50000.0, 10000.0, 40000.0), airline_id (3, 1, 4) | Runways : id (1, 3, 4), length (6000.0, 7000.0, 8000.0), width (120.0, 150.0, 90.0), capacity (9999, 9996, 9997), airport_id (2, 4, 5) | Flights : id (5, 3, 4), departure_time ('2022-01-05 12:00:00', '2022-01-02 09:00:00', '2022-01-01 08:00:00'), arrival_time ('2022-01-02 11:00:00', '2022-01-05 14:00:00', '2022-01-01 10:00:00'), runway_id (2, 5, 1), plane_model ('PlaneModel4', 'PlaneModel5', 'PlaneModel3') | Passengers : id (2, 1, 5), fullname ('Passenger4', 'Passenger1', 'Passenger2'), passport ('Passport5', 'Passport4', 'Passport2'), flight_id (1, 2, 3)",
        "ambiguous_queries": [
            "select P.linear_dimensions from Planes P inner join Flights F on P.model = F.plane_model inner join Runways R on R.id = F.runway_id where R.length = 5000 and F.departure_time = '2022-01-04 11:00:00'",
            "select P.weight_restriction from Planes P inner join Flights F on P.model = F.plane_model inner join Runways R on R.id = F.runway_id where R.length = 5000 and F.departure_time = '2022-01-04 11:00:00'",
            "select P.linear_dimensions, weight_restriction from Planes P inner join Flights F on P.model = F.plane_model inner join Runways R on R.id = F.runway_id where R.length = 5000 and F.departure_time = '2022-01-04 11:00:00'"
        ],
        "gold_ambiguity": {
            "match": "{\"size limit\": [{\"Planes\": [\"linear_dimensions\"]}, {\"Planes\": [\"weight_restriction\"]}, {\"Planes\": [\"linear_dimensions\", \"weight_restriction\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"size limit\" refers to the schema \"Planes\".\"linear_dimensions\"",
        "clear_ambiguity": "{\"size limit\": {\"Planes\": [\"linear_dimensions\"]}}",
        "gold_query": "select P.linear_dimensions from Planes P inner join Flights F on P.model = F.plane_model inner join Runways R on R.id = F.runway_id where R.length = 5000 and F.departure_time = '2022-01-04 11:00:00'"
    },
    {
        "index": 961,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_version/vague_2cols_version.sqlite",
        "question": "In what version did the book with the smallest quantity appear and who published it?",
        "schema_without_content": "Students : ID, FirstName, LastName, Email | Instructors : ID, FirstName, LastName, Department | Enrollments : RegistrationID, StudentID, CourseCode, Grade | TextbookEditions : EditionNumber, YearPublished, Publisher, ISBN, Textbooks | CourseOfferings : OfferingID, CourseCode, Semester, Year, InstructorID | BookCopies : CopyID, CourseOfferingID, TextbookEditionID, Quantity",
        "schema_with_content": "Students : ID (1, 2), FirstName ('Jane', 'John'), LastName ('Doe', 'Smith'), Email ('janesmith@example.com', 'johndoe@example.com') | Instructors : ID (1, 2), FirstName ('Bob', 'Alice'), LastName ('Williams', 'Johnson'), Department ('Mathematics', 'Physics') | Enrollments : RegistrationID (2, 1), StudentID (2, 1), CourseCode ('PHYS-101', 'MATH-101'), Grade ('B', 'A') | TextbookEditions : EditionNumber (2, 1), YearPublished (2020, 2019), Publisher ('Pearson Education', 'Wiley Publishing'), ISBN ('9780321606389', '9780470689571'), Textbooks ('Introduction to Algorithms', 'Fundamentals of Physics') | CourseOfferings : OfferingID (1, 2), CourseCode ('PHYS-101', 'MATH-101'), Semester ('Spring', 'Fall'), Year (2021, 2021), InstructorID (2, 1) | BookCopies : CopyID (2, 1), CourseOfferingID (1, 2), TextbookEditionID (1, 2), Quantity (30, 20)",
        "ambiguous_queries": [
            "SELECT TextbookEditions.Publisher, TextbookEditions.EditionNumber FROM TextbookEditions JOIN BookCopies ON BookCopies.CopyID = TextbookEditions.EditionNumber ORDER BY BookCopies.Quantity ASC LIMIT 1",
            "SELECT TextbookEditions.Publisher, TextbookEditions.YearPublished FROM TextbookEditions JOIN BookCopies ON BookCopies.CopyID = TextbookEditions.EditionNumber ORDER BY BookCopies.Quantity ASC LIMIT 1",
            "SELECT TextbookEditions.Publisher, TextbookEditions.EditionNumber, TextbookEditions.YearPublished FROM TextbookEditions JOIN BookCopies ON BookCopies.CopyID = TextbookEditions.EditionNumber ORDER BY BookCopies.Quantity ASC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"version\": [{\"TextbookEditions\": [\"EditionNumber\"]}, {\"TextbookEditions\": [\"YearPublished\"]}, {\"TextbookEditions\": [\"EditionNumber\", \"YearPublished\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"version\" refers to the schema \"TextbookEditions\".\"EditionNumber\"",
        "clear_ambiguity": "{\"version\": {\"TextbookEditions\": [\"EditionNumber\"]}}",
        "gold_query": "SELECT TextbookEditions.Publisher, TextbookEditions.EditionNumber FROM TextbookEditions JOIN BookCopies ON BookCopies.CopyID = TextbookEditions.EditionNumber ORDER BY BookCopies.Quantity ASC LIMIT 1"
    },
    {
        "index": 962,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2tabs_setting/vague_2tabs_setting.sqlite",
        "question": "What is the setting of the episode \"The Murder\"?",
        "schema_without_content": "Location : id, name, description | Era : id, name | Story : id, title, location_id, era_id | Character : id, name, role, story_id | Episode : id, episode_number, title, release_date, story_id | Review : id, reviewer_name, rating, comment, episode_id",
        "schema_with_content": "Location : id (2, 1), name ('New York', 'London'), description ('Home of Big Ben and Buckingham Palace', 'The city that never sleeps') | Era : id (2, 1), name ('Roaring Twenties', 'Victorian Era') | Story : id (2, 1), title ('Gangsters of the Roaring Twenties', 'A Victorian Mystery'), location_id (1, 2), era_id (1, 2) | Character : id (2, 1), name ('Al Capone', 'Inspector Lestrade'), role ('Mob Boss', 'Detective'), story_id (2, 1) | Episode : id (2, 1), episode_number (1, 2), title ('Episode Two - The Chase', 'Episode One - The Murder'), release_date ('2022-06-01', '2022-06-08'), story_id (1, 1) | Review : id (1, 2), reviewer_name ('Jane Smith', 'John Doe'), rating (5, 4), comment ('Interesting plot but could be better', 'Great acting!'), episode_id (2, 1)",
        "ambiguous_queries": [
            "SELECT Location.NAME FROM Location JOIN STORY on Location.id = Story.location_id JOIN EPISODE on Story.id = Episode.story_id WHERE Episode.title LIKE '%The Murder%'",
            "SELECT Era.NAME FROM Era JOIN STORY on Era.id = Story.era_id JOIN EPISODE on Story.id = Episode.story_id WHERE Episode.title LIKE '%The Murder%'",
            "SELECT Location.NAME, Era.NAME FROM Location JOIN STORY on Location.id = Story.location_id JOIN EPISODE on Story.id = Episode.story_id JOIN Era on Era.id = Story.era_id WHERE Episode.title LIKE '%The Murder%'"
        ],
        "gold_ambiguity": {
            "match": "{\"setting\": [{\"Era\": [\"NAME\"]}, {\"Location\": [\"NAME\"]}, {\"Era\": [\"NAME\"], \"Location\": [\"NAME\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"setting\" refers to the schema \"Location\".\"NAME\"",
        "clear_ambiguity": "{\"setting\": {\"Location\": [\"NAME\"]}}",
        "gold_query": "SELECT Location.NAME, Era.NAME FROM Location JOIN STORY on Location.id = Story.location_id JOIN EPISODE on Story.id = Episode.story_id JOIN Era on Era.id = Story.era_id WHERE Episode.title LIKE '%The Murder%'"
    },
    {
        "index": 963,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2tabs_composer/vague_2tabs_composer.sqlite",
        "question": "Give me all the songs and their composers.",
        "schema_without_content": "Musician : id, name, birth_date | Band : id, name, genre | Soundtrack : id, title, release_date, band_id, musician_id | Song : id, title, duration, soundtrack_id | Performance : id, date, location, song_id | Fan : id, name, email",
        "schema_with_content": "Musician : id (3, 2, 1), name ('Emily Davis', 'William Brown', 'Michael Johnson'), birth_date ('1980-06-23', '1985-09-03', '1992-11-04') | Band : id (1, 3, 4), name (\"Rockin' Vibes\", 'Classic Melodies', 'Funky Beats'), genre ('Pop', 'Funk', 'Classical') | Soundtrack : id (3, 4, 2), title ('Summer Jams', 'Orchestral Showcase', 'Blues Night'), release_date ('2022-09-01', '2022-08-15', '2022-10-05'), band_id (4, 3, 5), musician_id (2, 5, 4) | Song : id (5, 4, 3), title ('Time To Shine', 'Blue Groove', 'Dancing Through The Stars'), duration ('3:45', '8:00', '4:00'), soundtrack_id (4, 2, 1) | Performance : id (1, 5, 2), date ('2022-08-15', '2022-06-20', '2022-10-03'), location ('Amphitheater', 'Concert Hall', 'Central Park'), song_id (4, 1, 3) | Fan : id (5, 1, 2), name ('Elizabeth Thompson', 'Alice Cooper', 'Carol Wilson'), email ('alice@example.com', 'carol@example.com', 'david@example.com')",
        "ambiguous_queries": [
            "SELECT song.title, Musician.name FROM Musician JOIN Soundtrack on Soundtrack.Musician_id=Musician.id JOIN Song ON Song.soundtrack_id = Soundtrack.id",
            "SELECT song.title, Band.name FROM Band JOIN Soundtrack on Soundtrack.Band_id=Band.id JOIN Song ON Song.soundtrack_id = Soundtrack.id",
            "SELECT song.title, Band.name, Musician.name FROM Musician JOIN Soundtrack on Soundtrack.id=Musician.id JOIN Song ON Song.soundtrack_id = Soundtrack.id JOIN Band on Soundtrack.Band_id=Band.id"
        ],
        "gold_ambiguity": {
            "match": "{\"composers\": [{\"Band\": [\"name\"]}, {\"Musician\": [\"name\"]}, {\"Band\": [\"name\"], \"Musician\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"composers\" refers to the schema \"Musician\".\"name\"",
        "clear_ambiguity": "{\"composers\": {\"Musician\": [\"name\"]}}",
        "gold_query": "SELECT song.title, Band.name, Musician.name FROM Musician JOIN Soundtrack on Soundtrack.id=Musician.id JOIN Song ON Song.soundtrack_id = Soundtrack.id JOIN Band on Soundtrack.Band_id=Band.id"
    },
    {
        "index": 964,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_audience/vague_2tabs_audience.sqlite",
        "question": "Show me the readers of different magazines and what category they fall into.",
        "schema_without_content": "Demographic_Groups : id, group_name, population | Professional_Fields : field_id, field_name | Magazines : magazine_id, title, publication_date, demographic_group_id, professional_field_id | Articles : article_id, title, content, author_id, magazine_id | Authors : author_id, name, occupation, demographic_group_id | Readers : reader_id, name, email, preferred_magazine_id, demographic_group_id",
        "schema_with_content": "Demographic_Groups : id (1, 5, 3), group_name ('Income Level C', 'Gender Group B', 'Education Level D'), population (100000, 500000, 400000) | Professional_Fields : field_id (3, 4, 1), field_name ('Technology', 'Politics', 'Health') | Magazines : magazine_id (4, 3, 2), title ('News Weekly', 'Wellness Magazine', 'ShowBiz Daily'), publication_date ('2023-01-07', '2023-01-10', '2023-01-01'), demographic_group_id (3, 1, 2), professional_field_id (2, 4, 3) | Articles : article_id (5, 1, 4), title ('Yoga for Health', 'Stock Market Update', 'New Tech Innovations'), content ('Exclusive interviews with stars...', 'Discover new tech products...', 'Latest news...'), author_id (4, 1, 5), magazine_id (5, 4, 3) | Authors : author_id (5, 1, 3), name ('John Doe', 'Alice Johnson', 'Jane Smith'), occupation ('Columnist', 'Photographer', 'Journalist'), demographic_group_id (5, 1, 3) | Readers : reader_id (4, 1, 5), name ('Hannah King', 'David Miller', 'George Wilson'), email ('emma@example.com', 'david@example.com', 'alice@example.com'), preferred_magazine_id (4, 2, 1), demographic_group_id (3, 1, 4)",
        "ambiguous_queries": [
            "Select r.name, a.group_name FROM Readers r JOIN Demographic_Groups a on a.id = r.demographic_group_id",
            "Select r.name, a.field_name FROM Readers r JOIN Magazines m ON m.magazine_id = r.preferred_magazine_id JOIN Professional_Fields a on a.Field_id = m.Professional_Field_id",
            "Select r.name, a.group_name, pf.field_name FROM Readers r JOIN Demographic_Groups a on a.id = r.demographic_group_id JOIN Magazines m ON m.magazine_id = r.preferred_magazine_id JOIN Professional_Fields pf on pf.Field_id = m.Professional_Field_id"
        ],
        "gold_ambiguity": {
            "match": "{\"category\": [{\"Demographic_Groups\": [\"group_name\"]}, {\"Professional_Fields\": [\"field_name\"]}, {\"Demographic_Groups\": [\"group_name\"], \"Professional_Fields\": [\"field_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"category\" refers to the schema \"Professional_Fields\".\"field_name\"",
        "clear_ambiguity": "{\"category\": {\"Professional_Fields\": [\"field_name\"]}}",
        "gold_query": "Select r.name, a.field_name FROM Readers r JOIN Magazines m ON m.magazine_id = r.preferred_magazine_id JOIN Professional_Fields a on a.Field_id = m.Professional_Field_id"
    },
    {
        "index": 965,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_fee2/vague_2cols_fee2.sqlite",
        "question": "Show all customers with checking accounts born after 1990 and their account numbers and corresponding fees.",
        "schema_without_content": "Customers : CustomerID, DateOfBirth, fullname | Accounts : AccountNumber, CustomerID, AccountType, OpenDate | SavingsAccounts : AccountNumber, InterestRate, MinimumBalance | CheckingAccounts : AccountNumber, Monthly_Maintenance_Fee, Overdraft_Charges | Loans : LoanID, AccountNumber, PrincipalAmount, AnnualInterestRate, RepaymentTermYears | Transactions : TransactionID, AccountNumber, Amount, TransactionDate",
        "schema_with_content": "Customers : CustomerID (1, 2), DateOfBirth ('1991-05-25', '1986-03-10'), fullname ('Jane Smith', 'John Doe') | Accounts : AccountNumber (2, 1), CustomerID (2, 1), AccountType ('Savings', 'Checking'), OpenDate ('2021-07-01', '2021-06-15') | SavingsAccounts : AccountNumber (2, 1), InterestRate (0.05, 0.1), MinimumBalance (1000, 500) | CheckingAccounts : AccountNumber (1, 2), Monthly_Maintenance_Fee (5, 4.5), Overdraft_Charges (30, 25) | Loans : LoanID (1, 2), AccountNumber (1, 2), PrincipalAmount (20000, 15000), AnnualInterestRate (0.05, 0.04), RepaymentTermYears (3, 5) | Transactions : TransactionID (1, 2), AccountNumber (1, 1), Amount (1500, -500), TransactionDate ('2024-02-19 14:39:46', '2024-02-19 14:39:46')",
        "ambiguous_queries": [
            "SELECT Accounts.AccountNumber, Customers.FullName, CheckingAccounts.Monthly_Maintenance_Fee FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN CheckingAccounts ON CheckingAccounts.AccountNumber = Accounts.AccountNumber WHERE SUBSTR(Customers.DateOfBirth, 1, 4) > '1990'",
            "SELECT Accounts.AccountNumber, Customers.FullName, CheckingAccounts.Overdraft_Charges FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN CheckingAccounts ON CheckingAccounts.AccountNumber = Accounts.AccountNumber WHERE SUBSTR(Customers.DateOfBirth, 1, 4) > '1990'",
            "SELECT Accounts.AccountNumber, Customers.FullName, CheckingAccounts.Monthly_Maintenance_Fee, Overdraft_Charges FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN CheckingAccounts ON CheckingAccounts.AccountNumber = Accounts.AccountNumber WHERE SUBSTR(Customers.DateOfBirth, 1, 4) > '1990'"
        ],
        "gold_ambiguity": {
            "match": "{\"fees\": [{\"CheckingAccounts\": [\"Monthly_Maintenance_Fee\"]}, {\"CheckingAccounts\": [\"Overdraft_Charges\"]}, {\"CheckingAccounts\": [\"Monthly_Maintenance_Fee\", \"Overdraft_Charges\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"fees\" refers to the schema \"CheckingAccounts\".\"Monthly_Maintenance_Fee\"",
        "clear_ambiguity": "{\"fees\": {\"CheckingAccounts\": [\"Monthly_Maintenance_Fee\"]}}",
        "gold_query": "SELECT Accounts.AccountNumber, Customers.FullName, CheckingAccounts.Monthly_Maintenance_Fee FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN CheckingAccounts ON CheckingAccounts.AccountNumber = Accounts.AccountNumber WHERE SUBSTR(Customers.DateOfBirth, 1, 4) > '1990'"
    },
    {
        "index": 966,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_hospital_history/vague_2cols_hospital_history.sqlite",
        "question": "Where was the last doctor's appointment and what is the history of this place?",
        "schema_without_content": "Doctors : DoctorID, Name, Specialty, Founding_Year, Past_Owners, Healthcare_Facility | Patients : PatientID, FirstName, LastName, DateOfBirth | Appointments : AppointmentID, PatientID, DoctorID, Date, Time | Medications : MedicationID, MedicineName, DrugClass, Instructions | Prescriptions : PrescriptionID, PatientID, MedicationID, IssueDate, ExpiryDate, Quantity | Insurances : InsuranceID, PolicyNumber, Provider, CoverageAmount, StartDate, EndDate, PatientID",
        "schema_with_content": "Doctors : DoctorID (1, 2, 3), Name ('Dr. Susan Lee', 'Dr. John Smith', 'Dr. Jane Doe'), Specialty ('Dermatology', 'Cardiology', 'Pediatrics'), Founding_Year (2010, 2005, 2015), Past_Owners ('James White, Michael Black', 'John Brown, Mary Johnson', 'Emma Green, David Wilson'), Healthcare_Facility (\"St. Luke's Hospital\", 'Sunshine Skin Clinic', \"Children's Hospital\") | Patients : PatientID (3, 2, 1), FirstName ('Bob', 'Carol', 'Alice'), LastName ('Johnson', 'Smith', 'Williams'), DateOfBirth ('1985-10-05', '1987-06-15', '1990-02-20') | Appointments : AppointmentID (2, 3, 1), PatientID (2, 3, 1), DoctorID (3, 1, 2), Date ('2022-07-12', '2022-07-14', '2022-07-10'), Time ('03:00 PM', '11:00 AM', '10:00 AM') | Medications : MedicationID (2, 1), MedicineName ('Ibuprofen', 'Acetaminophen'), DrugClass ('Nonsteroidal Anti-Inflammatory Drugs (NSAIDs)', 'Analgesics and Antipyretics'), Instructions ('Take 200 mg every 4 to 6 hours as needed.', 'Take 500 mg every 4 to 6 hours as needed.') | Prescriptions : PrescriptionID (2, 3, 1), PatientID (3, 2, 1), MedicationID (2, 1, 1), IssueDate ('2022-06-25', '2022-07-05', '2022-06-20'), ExpiryDate ('2022-07-19', '2022-06-30', '2022-07-09'), Quantity (60, 30, 14) | Insurances : InsuranceID (1, 3, 2), PolicyNumber ('EFGH5678', 'ABCD1234', 'IJKL9012'), Provider ('Family Plan', 'Wellness Care', 'HealthPlus'), CoverageAmount (10000, 15000, 12000), StartDate ('2022-02-01', '2022-01-15', '2022-01-01'), EndDate ('2023-12-31', '2023-01-31', '2023-12-14'), PatientID (1, 3, 2)",
        "ambiguous_queries": [
            "SELECT Doctors.Healthcare_Facility, Doctors.Founding_Year FROM Doctors JOIN Appointments ON Appointments.DoctorID = Doctors.DoctorID ORDER BY Appointments.Date DESC, Appointments.Time DESC LIMIT 1",
            "SELECT Doctors.Healthcare_Facility, Doctors.Past_Owners FROM Doctors JOIN Appointments ON Appointments.DoctorID = Doctors.DoctorID ORDER BY Appointments.Date DESC, Appointments.Time DESC LIMIT 1",
            "SELECT Doctors.Healthcare_Facility, Doctors.Founding_Year, Past_Owners FROM Doctors JOIN Appointments ON Appointments.DoctorID = Doctors.DoctorID ORDER BY Appointments.Date DESC, Appointments.Time DESC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"history\": [{\"Doctors\": [\"Founding_Year\"]}, {\"Doctors\": [\"Past_Owners\"]}, {\"Doctors\": [\"Founding_Year\", \"Past_Owners\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"history\" refers to the schema \"Doctors\".\"Founding_Year\"",
        "clear_ambiguity": "{\"history\": {\"Doctors\": [\"Founding_Year\"]}}",
        "gold_query": "SELECT Doctors.Healthcare_Facility, Doctors.Founding_Year FROM Doctors JOIN Appointments ON Appointments.DoctorID = Doctors.DoctorID ORDER BY Appointments.Date DESC, Appointments.Time DESC LIMIT 1"
    },
    {
        "index": 967,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2tabs_production2/vague_2tabs_production2.sqlite",
        "question": "Who produced Hamlet?",
        "schema_without_content": "Theater_Company : id, name, address | Producer : id, name, email | Stage_Play : id, title, description, theater_company_id, producer_id | Actor : id, first_name, last_name | Play_Actor : play_id, actor_id, character_played | Review : id, rating, reviewer_email, stage_play_id",
        "schema_with_content": "Theater_Company : id (2, 1), name ('The Royal Theatre', 'Drama House'), address ('123 Main St', '456 Broadway') | Producer : id (2, 1), name ('Jane Smith', 'John Doe'), email ('johndoe@gmail.com', 'janesmith@yahoo.com') | Stage_Play : id (1, 2), title ('Othello', 'Hamlet'), description ('Another great work from Shakespeare.', 'A classic tragedy by William Shakespeare.'), theater_company_id (1, 1), producer_id (1, 1) | Actor : id (1, 2), first_name ('Tom', 'Matthew'), last_name ('Cruise', 'McConaughey') | Play_Actor : play_id (2, 1, 2), actor_id (2, 1, 2), character_played ('Hamlet', 'Iago', 'Othello') | Review : id (1, 2), rating (9, 8), reviewer_email ('reviews@outlook.com', 'reviews@hotmail.com'), stage_play_id (1, 2)",
        "ambiguous_queries": [
            "SELECT name FROM Theater_Company JOIN Stage_Play ON Stage_Play.theater_company_id = Theater_Company.id WHERE title = 'Hamlet';",
            "SELECT name FROM Producer JOIN Stage_Play ON Stage_Play.Producer_id = Producer.id WHERE title = 'Hamlet';",
            "SELECT Producer.name, Theater_Company.name FROM Theater_Company JOIN Stage_Play ON Stage_Play.theater_company_id = Theater_Company.id JOIN Producer ON Stage_Play.Producer_id = Producer.id WHERE title = 'Hamlet';"
        ],
        "gold_ambiguity": {
            "match": "{\"Who\": [{\"Producer\": [\"name\"]}, {\"Theater_Company\": [\"name\"]}, {\"Producer\": [\"name\"], \"Theater_Company\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Who\" refers to the schema \"Producer\".\"name\"",
        "clear_ambiguity": "{\"Who\": {\"Producer\": [\"name\"]}}",
        "gold_query": "SELECT name FROM Producer JOIN Stage_Play ON Stage_Play.Producer_id = Producer.id WHERE title = 'Hamlet';"
    },
    {
        "index": 968,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_location/vague_2cols_location.sqlite",
        "question": "Show me the majors and cities of students with the last name Smith.",
        "schema_without_content": "Students : StudentID, Major, City, Campus, fullname | Teachers : TeacherID, FirstName, LastName, SubjectTaught, HireDate, OfficeLocation | Classes : ClassID, CourseTitle, CreditHours, EnrollmentLimit, RoomNumber | Departments : DepartmentID, Name, DeanName, Building | Facilities : FacilityID, Type, Capacity, OpeningTime, ClosingTime",
        "schema_with_content": "Students : StudentID (2, 4, 5), Major ('Mathematics', 'Computer Science', 'Biology'), City ('New York', 'Los Angeles', 'Phoenix'), Campus ('Medical Center', 'Uptown', 'Downtown'), fullname ('John Doe', 'Jane Smith', 'Emily White') | Teachers : TeacherID (3, 5, 2), FirstName ('Prof.', 'Dr.', 'Mr.'), LastName ('Black', 'Green', 'Wilson'), SubjectTaught ('Physics', 'Biology', 'English Literature'), HireDate ('2015-10-12', '2019-08-15', '2016-05-30'), OfficeLocation ('Room 506', 'Room 210', 'Room 404') | Classes : ClassID (3, 5, 4), CourseTitle ('Anatomy and Physiology', 'General Physics', 'Calculus II'), CreditHours (4, 3, 3), EnrollmentLimit (20, 30, 25), RoomNumber ('Room 302', 'Room 506', 'Room 404') | Departments : DepartmentID (5, 4, 1), Name ('History Department', 'English Department', 'Math Department'), DeanName ('Dean Smith', 'Dean Davis', 'Dean Miller'), Building ('Building A', 'Building B', 'Building D') | Facilities : FacilityID (1, 3, 5), Type ('Gymnasium', 'Library', 'Art Studio'), Capacity (25, 50, 100), OpeningTime ('08:00:00', '08:00:00', '06:00:00'), ClosingTime ('22:00:00', '22:00:00', '22:00:00')",
        "ambiguous_queries": [
            "SELECT Major, City from Students where FullName LIKE '% Smith'",
            "SELECT Major, Campus from Students where FullName LIKE '% Smith'",
            "SELECT Major, City, Campus from Students where FullName LIKE '% Smith'"
        ],
        "gold_ambiguity": {
            "match": "{\"cities\": [{\"Students\": [\"City\"]}, {\"Students\": [\"Campus\"]}, {\"Students\": [\"City\", \"Campus\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cities\" refers to the schema \"Students\".\"City\" and \"Students\".\"Campus\"",
        "clear_ambiguity": "{\"cities\": {\"Students\": [\"City\", \"Campus\"]}}",
        "gold_query": "SELECT Major, City, Campus from Students where FullName LIKE '% Smith'"
    },
    {
        "index": 969,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_cost/vague_2cols_cost.sqlite",
        "question": "What are the surgical procedures listed in descending order of cost?",
        "schema_without_content": "Patients : PatientID, FirstName, LastName, DateOfBirth, InsuranceProvider, Address | Doctors : DoctorID, FirstName, LastName, Specialization, PhoneNumber, EmailAddress | Appointments : AppointmentID, PatientID, DoctorID, AppointmentDate, ReasonForVisit | Prescriptions : PrescriptionID, AppointmentID, MedicationName, Dosage, Instructions | SurgicalProcedures : ProcedureID, Description, InsuranceCovered, OutOfPocketExpense, TimeRequired",
        "schema_with_content": "Patients : PatientID (2, 1), FirstName ('John', 'Jane'), LastName ('Doe', 'Smith'), DateOfBirth ('1990-06-15', '1985-07-30'), InsuranceProvider ('Aetna', 'Blue Cross Blue Shield'), Address ('456 Elm St', '123 Main St') | Doctors : DoctorID (1, 2), FirstName ('Dr.', 'Dr.'), LastName ('Williams', 'Jones'), Specialization ('Cardiology', 'Neurology'), PhoneNumber ('555-5678', '555-1234'), EmailAddress ('dwilliams@example.com', 'drjones@example.com') | Appointments : AppointmentID (1, 2), PatientID (2, 1), DoctorID (1, 2), AppointmentDate ('2022-02-10 14:00:00', '2022-01-15 10:00:00'), ReasonForVisit ('Routine Checkup', 'Headache') | Prescriptions : PrescriptionID (1, 2), AppointmentID (2, 1), MedicationName ('Ibuprofen', 'Amoxicillin'), Dosage ('2 tablets every 6 hours', '500mg twice a day'), Instructions ('Take with water on an empty stomach', 'Take with food') | SurgicalProcedures : ProcedureID (2, 1), Description ('Appendectomy', 'Knee Arthroscopy'), InsuranceCovered (5000, 4000), OutOfPocketExpense (1000, 2000), TimeRequired ('1 hour', '2 hours')",
        "ambiguous_queries": [
            "SELECT Description, InsuranceCovered FROM SurgicalProcedures ORDER BY InsuranceCovered DESC;",
            "SELECT Description, OutOfPocketExpense FROM SurgicalProcedures ORDER BY OutOfPocketExpense DESC;",
            "SELECT Description, InsuranceCovered, OutOfPocketExpense FROM SurgicalProcedures ORDER BY InsuranceCovered, OutOfPocketExpense DESC;"
        ],
        "gold_ambiguity": {
            "match": "{\"cost\": [{\"SurgicalProcedures\": [\"InsuranceCovered\"]}, {\"SurgicalProcedures\": [\"OutOfPocketExpense\"]}, {\"SurgicalProcedures\": [\"InsuranceCovered\", \"OutOfPocketExpense\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"cost\" refers to the schema \"SurgicalProcedures\".\"OutOfPocketExpense\"",
        "clear_ambiguity": "{\"cost\": {\"SurgicalProcedures\": [\"OutOfPocketExpense\"]}}",
        "gold_query": "SELECT Description, OutOfPocketExpense FROM SurgicalProcedures ORDER BY OutOfPocketExpense DESC;"
    },
    {
        "index": 970,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_exam_date/vague_2cols_exam_date.sqlite",
        "question": "When is the exam for each student?",
        "schema_without_content": "Students : StudentID, FirstName, LastName | Addresses : AddressID, StreetAddress, City, State, ZipCode, StudentID | PhoneNumbers : PhoneNumberID, Number, Type, StudentID | EmailAddresses : EmailAddressID, Email, IsPrimary, StudentID | Enrollments : EnrollmentID, CourseID, Semester, Year, Grade, StudentID | ExamScores : ScoreID, Month, Day, ExamDescription, Score, StudentID",
        "schema_with_content": "Students : StudentID (1, 2, 4), FirstName ('Jane', 'Emily', 'John'), LastName ('Johnson', 'Doe', 'Brown') | Addresses : AddressID (5, 4, 2), StreetAddress ('789 Oak St', '456 Elm St', '123 Main St'), City ('Anytown', 'Townville', 'Othertown'), State ('CA', 'IL', 'NJ'), ZipCode ('60601', '77301', '10001'), StudentID (1, 3, 4) | PhoneNumbers : PhoneNumberID (1, 5, 4), Number ('(555) 123-4567', '(555) 135-7890', '(555) 765-4321'), Type ('Mobile', 'Mobile', 'Home'), StudentID (4, 1, 5) | EmailAddresses : EmailAddressID (5, 2, 3), Email ('johndoe@example.com', 'michaeljohnson@example.edu', 'emilywilliams@example.net'), IsPrimary (1, 1, 0), StudentID (3, 1, 4) | Enrollments : EnrollmentID (2, 1, 3), CourseID (2, 5, 3), Semester ('Fall', 'Spring', 'Fall'), Year (2022, 2022, 2021), Grade ('A', 'A-', 'Incomplete'), StudentID (3, 4, 5) | ExamScores : ScoreID (4, 1, 3), Month (6, 10, 3), Day (5, 10, 15), ExamDescription ('Quiz', 'Final Exam', 'Project'), Score (85, 90, 95), StudentID (2, 4, 3)",
        "ambiguous_queries": [
            "SELECT es.StudentID, es.Month FROM ExamScores es JOIN Students s ON es.StudentID = s.StudentID GROUP BY es.StudentID;",
            "SELECT es.StudentID, es.Day FROM ExamScores es JOIN Students s ON es.StudentID = s.StudentID GROUP BY es.StudentID;",
            "SELECT es.StudentID, es.Month, Day FROM ExamScores es JOIN Students s ON es.StudentID = s.StudentID GROUP BY es.StudentID;"
        ],
        "gold_ambiguity": {
            "match": "{\"When\": [{\"ExamScores\": [\"Month\"]}, {\"ExamScores\": [\"Day\"]}, {\"ExamScores\": [\"Month\", \"Day\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"When\" refers to the schema \"ExamScores\".\"Day\"",
        "clear_ambiguity": "{\"When\": {\"ExamScores\": [\"Day\"]}}",
        "gold_query": "SELECT es.StudentID, es.Day FROM ExamScores es JOIN Students s ON es.StudentID = s.StudentID GROUP BY es.StudentID;"
    },
    {
        "index": 971,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_fee2/vague_2cols_fee2.sqlite",
        "question": "Display a list of customers that have a checking account, their accounts and the fee of that accounts.",
        "schema_without_content": "Customers : CustomerID, DateOfBirth, fullname | Accounts : AccountNumber, CustomerID, AccountType, OpenDate | SavingsAccounts : AccountNumber, InterestRate, MinimumBalance | CheckingAccounts : AccountNumber, Monthly_Maintenance_Fee, Overdraft_Charges | Loans : LoanID, AccountNumber, PrincipalAmount, AnnualInterestRate, RepaymentTermYears | Transactions : TransactionID, AccountNumber, Amount, TransactionDate",
        "schema_with_content": "Customers : CustomerID (2, 1), DateOfBirth ('1991-05-25', '1986-03-10'), fullname ('John Doe', 'Jane Smith') | Accounts : AccountNumber (2, 1), CustomerID (2, 1), AccountType ('Checking', 'Savings'), OpenDate ('2021-07-01', '2021-06-15') | SavingsAccounts : AccountNumber (1, 2), InterestRate (0.05, 0.1), MinimumBalance (500, 1000) | CheckingAccounts : AccountNumber (1, 2), Monthly_Maintenance_Fee (5, 4.5), Overdraft_Charges (30, 25) | Loans : LoanID (2, 1), AccountNumber (2, 1), PrincipalAmount (20000, 15000), AnnualInterestRate (0.04, 0.05), RepaymentTermYears (3, 5) | Transactions : TransactionID (2, 1), AccountNumber (1, 1), Amount (1500, -500), TransactionDate ('2024-02-19 14:39:46', '2024-02-19 14:39:46')",
        "ambiguous_queries": [
            "SELECT Accounts.AccountNumber, Customers.FullName, CheckingAccounts.Monthly_Maintenance_Fee FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN CheckingAccounts ON Accounts.AccountNumber = CheckingAccounts.AccountNumber",
            "SELECT Accounts.AccountNumber, Customers.FullName, CheckingAccounts.Overdraft_Charges FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN CheckingAccounts ON Accounts.AccountNumber = CheckingAccounts.AccountNumber",
            "SELECT Accounts.AccountNumber, Customers.FullName, CheckingAccounts.Monthly_Maintenance_Fee, Overdraft_Charges FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN CheckingAccounts ON Accounts.AccountNumber = CheckingAccounts.AccountNumber"
        ],
        "gold_ambiguity": {
            "match": "{\"fee\": [{\"CheckingAccounts\": [\"Monthly_Maintenance_Fee\"]}, {\"CheckingAccounts\": [\"Overdraft_Charges\"]}, {\"CheckingAccounts\": [\"Monthly_Maintenance_Fee\", \"Overdraft_Charges\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"fee\" refers to the schema \"CheckingAccounts\".\"Monthly_Maintenance_Fee\" and \"CheckingAccounts\".\"Overdraft_Charges\"",
        "clear_ambiguity": "{\"fee\": {\"CheckingAccounts\": [\"Monthly_Maintenance_Fee\", \"Overdraft_Charges\"]}}",
        "gold_query": "SELECT Accounts.AccountNumber, Customers.FullName, CheckingAccounts.Monthly_Maintenance_Fee, Overdraft_Charges FROM Accounts JOIN Customers ON Customers.CustomerID = Accounts.CustomerID JOIN CheckingAccounts ON Accounts.AccountNumber = CheckingAccounts.AccountNumber"
    },
    {
        "index": 972,
        "db_id": "Entertainment",
        "ambig_type": "vague",
        "db_file": "vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
        "question": "Display the top 3 most popular concert dates and locations based on the number of tickets.",
        "schema_without_content": "artists : id, name, genre | concerts : id, artistId, date, city, concertHall | venues : id, venueName, location, capacity | tickets : id, concertId, price, quantity, type | users : id, username, email, passwordHash | bookings : id, userId, ticketId, bookingDate, status",
        "schema_with_content": "artists : id (2, 1, 3), name ('Adele', 'Lady Gaga', 'Michael Jackson'), genre ('Rock', 'Classic Rock', 'Pop') | concerts : id (1, 5, 4), artistId (2, 5, 3), date ('2023-09-10', '2023-10-01', '2023-06-01'), city ('Boston', 'Dallas', 'Los Angeles'), concertHall ('American Airlines Center', 'United Center', 'Madison Square Garden') | venues : id (5, 1, 4), venueName ('American Airlines Center', 'Madison Square Garden', 'Staples Center'), location ('New York', 'Boston', 'Los Angeles'), capacity (19000, 23000, 19000) | tickets : id (1, 5, 4), concertId (2, 3, 1), price (200, 120, 100), quantity (1000, 1000, 1000), type ('VIP', 'General Admission', 'General Admission') | users : id (3, 4, 1), username ('user1', 'user2', 'user4'), email ('user5@example.com', 'user3@example.com', 'user1@example.com'), passwordHash ('passwordhash3', 'passwordhash1', 'passwordhash5') | bookings : id (3, 4, 1), userId (3, 1, 4), ticketId (2, 3, 4), bookingDate ('2024-02-19 13:13:50', '2024-02-19 13:13:50', '2024-02-19 13:13:50'), status ('Confirmed', 'Confirmed', 'Confirmed')",
        "ambiguous_queries": [
            "SELECT c.date, c.city FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;",
            "SELECT c.date, c.concertHall FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;",
            "SELECT c.date, c.city, concertHall FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"concerts\": [\"city\", \"concertHall\"]}, {\"concerts\": [\"city\"]}, {\"concerts\": [\"concertHall\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"concerts\".\"concertHall\"",
        "clear_ambiguity": "{\"locations\": {\"concerts\": [\"concertHall\"]}}",
        "gold_query": "SELECT c.date, c.city, concertHall FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;"
    },
    {
        "index": 973,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2cols_leadership/vague_2cols_leadership.sqlite",
        "question": "What are the full names of customers with the highest total balance in their accounts and who runs the branches they use?",
        "schema_without_content": "Banks : id, name, location, Ceo, Management_Team | Customers : customerId, dob, phoneNumber, emailAddress, bankID, fullname | Accounts : accountNumber, balance, interestRate, customerId | Transactions : transactionId, amount, date, description, sourceAccountNumber, destinationAccountNumber | Loans : loanId, principalAmount, interestRate, termMonths, monthlyPayment, customerId",
        "schema_with_content": "Banks : id (2, 3, 1), name ('Bank A', 'Bank E', 'Bank B'), location ('New York', 'Miami', 'Los Angeles'), Ceo ('John Doe', 'Emma Jones', 'Rachel Taylor'), Management_Team ('Kathy Davis, Mark Johnson', 'Lisa Miller, Kevin Wright', 'Jane Smith, Mike Johnson') | Customers : customerId (4, 2, 1), dob ('1980-07-23', '1990-03-15', '1985-11-10'), phoneNumber ('555-9012', '555-2468', '555-1357'), emailAddress ('alice@example.com', 'bob@example.com', 'carol@example.com'), bankID (2, 1, 1), fullname ('Alice Smith', 'Bob Johnson', 'Daniel Davis') | Accounts : accountNumber (4, 2, 5), balance (2000.0, 3000.0, 5000.0), interestRate (0.02, 0.03, 0.04), customerId (5, 4, 2) | Transactions : transactionId (5, 3, 1), amount (300.0, 50.0, -200.0), date (), description ('Transfer to friend', 'ATM withdrawal', 'Salary credit'), sourceAccountNumber (1, 5, 3), destinationAccountNumber (7, 4, 2) | Loans : loanId (5, 1, 2), principalAmount (30000.0, 25000.0, 15000.0), interestRate (0.05, 0.04, 0.05), termMonths (48, 48, 36), monthlyPayment (850.0, 800.0, 550.0), customerId (4, 5, 1)",
        "ambiguous_queries": [
            "SELECT c.fullName, SUM(a.balance) AS Total_Balance, b.Ceo FROM Customers c JOIN Accounts a ON c.customerId = a.customerId JOIN Banks b ON c.bankID = b.id GROUP BY c.customerId ORDER BY Total_Balance DESC",
            "SELECT c.fullName, SUM(a.balance) AS Total_Balance, b.Management_Team FROM Customers c JOIN Accounts a ON c.customerId = a.customerId JOIN Banks b ON c.bankID = b.id GROUP BY c.customerId ORDER BY Total_Balance DESC",
            "SELECT c.fullName, SUM(a.balance) AS Total_Balance, b.Ceo, Management_Team FROM Customers c JOIN Accounts a ON c.customerId = a.customerId JOIN Banks b ON c.bankID = b.id GROUP BY c.customerId ORDER BY Total_Balance DESC"
        ],
        "gold_ambiguity": {
            "match": "{\"who\": [{\"Banks\": [\"Ceo\"]}, {\"Banks\": [\"Management_Team\"]}, {\"Banks\": [\"Ceo\", \"Management_Team\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"who\" refers to the schema \"Banks\".\"Ceo\" and \"Banks\".\"Management_Team\"",
        "clear_ambiguity": "{\"who\": {\"Banks\": [\"Ceo\", \"Management_Team\"]}}",
        "gold_query": "SELECT c.fullName, SUM(a.balance) AS Total_Balance, b.Ceo, Management_Team FROM Customers c JOIN Accounts a ON c.customerId = a.customerId JOIN Banks b ON c.bankID = b.id GROUP BY c.customerId ORDER BY Total_Balance DESC"
    },
    {
        "index": 974,
        "db_id": "Banking",
        "ambig_type": "vague",
        "db_file": "vague/Banking/vague_2tabs_requirements/vague_2tabs_requirements.sqlite",
        "question": "What were the loan requirements for the company with the fewest employees?",
        "schema_without_content": "Eligibility_Criteria : id, criteria, score | Documentation_Requirements : id, doc_type, requirement | Loans : id, name, amount, term, eligibility_criteria_id, documentation_requirement_id | Business_Loan_Applications : id, loan_name, application_date, annual_revenue, num_employees, loan_id",
        "schema_with_content": "Eligibility_Criteria : id (3, 4, 5), criteria ('Business Revenue over $1 million', 'Collateral available', '2 years of business operation'), score (0.8, 1.0, 0.6) | Documentation_Requirements : id (3, 5, 2), doc_type ('Personal Guarantee', 'Business Plan', 'Financial Statements'), requirement ('Latest 2 Years', 'Last 3 Years', 'Required') | Loans : id (4, 3, 1), name ('Small Business Expansion Loan', 'Equipment Financing Loan', 'Commercial Real Estate Loan'), amount (50000.0, 200000.0, 75000.0), term (36, 12, 12), eligibility_criteria_id (3, 1, 2), documentation_requirement_id (2, 5, 1) | Business_Loan_Applications : id (1, 2, 5), loan_name ('Start-up Loan', 'Equipment Financing Loan', 'Small Business Expansion Loan'), application_date ('2024-02-19 14:54:05', '2024-02-19 14:54:05', '2024-02-19 14:54:05'), annual_revenue (200000.0, 150000.0, 1000000.0), num_employees (100, 25, 50), loan_id (2, 1, 4)",
        "ambiguous_queries": [
            "SELECT Eligibility_Criteria.criteria, Eligibility_Criteria.score FROM Eligibility_Criteria JOIN Loans ON Loans.eligibility_criteria_id = Eligibility_Criteria.id JOIN Business_Loan_Applications ON Business_Loan_Applications.loan_id = Loans.id ORDER BY num_employees ASC LIMIT 1",
            "SELECT Documentation_Requirements.doc_type, Documentation_Requirements.requirement FROM Documentation_Requirements JOIN Loans ON Loans.Documentation_Requirement_id = Documentation_Requirements.id JOIN Business_Loan_Applications ON Business_Loan_Applications.loan_id = Loans.id ORDER BY num_employees ASC LIMIT 1",
            "SELECT Eligibility_Criteria.criteria, Eligibility_Criteria.score, Documentation_Requirements.doc_type, Documentation_Requirements.requirement FROM Eligibility_Criteria JOIN Loans ON Loans.eligibility_criteria_id = Eligibility_Criteria.id JOIN Business_Loan_Applications ON Business_Loan_Applications.loan_id = Loans.id JOIN Documentation_Requirements ON Loans.Documentation_Requirement_id = Documentation_Requirements.id ORDER BY num_employees ASC LIMIT 1"
        ],
        "gold_ambiguity": {
            "match": "{\"requirements\": [{\"Documentation_Requirements\": [\"doc_type\", \"requirement\"]}, {\"Eligibility_Criteria\": [\"criteria\", \"score\"]}, {\"Documentation_Requirements\": [\"doc_type\", \"requirement\"], \"Eligibility_Criteria\": [\"criteria\", \"score\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"requirements\" refers to the schema \"Documentation_Requirements\".\"doc_type\" and \"Documentation_Requirements\".\"requirement\"",
        "clear_ambiguity": "{\"requirements\": {\"Documentation_Requirements\": [\"doc_type\", \"requirement\"]}}",
        "gold_query": "SELECT Documentation_Requirements.doc_type, Documentation_Requirements.requirement FROM Documentation_Requirements JOIN Loans ON Loans.Documentation_Requirement_id = Documentation_Requirements.id JOIN Business_Loan_Applications ON Business_Loan_Applications.loan_id = Loans.id ORDER BY num_employees ASC LIMIT 1"
    },
    {
        "index": 975,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2tabs_recording_location/vague_2tabs_recording_location.sqlite",
        "question": "Where's The Morning Show recorded?",
        "schema_without_content": "Studio : studio_id, name, founded_year | Address : address_id, street, city, state, country | Podcast : podcast_id, title, description, release_date, studio_id, address_id | Episode : episode_id, number, duration, podcast_id | Reviewer : reviewer_id, username, email | Review : review_id, rating, comment, episode_id, reviewer_id",
        "schema_with_content": "Studio : studio_id (1, 5, 2), name ('Hulu', 'Disney', 'Amazon Prime Video'), founded_year (2007, 2017, 2006) | Address : address_id (3, 4, 2), street ('789 Ocean Dr', '456 Central Ave', '1314 S Michigan Ave'), city ('Los Angeles', 'New York', 'Miami Beach'), state ('CA', 'MO', 'FL'), country ('USA', 'USA', 'USA') | Podcast : podcast_id (5, 2, 3), title ('Tech Talk Today', 'Breaking Bad', 'True Crime Garage'), description ('A daily news and talk show with interviews and reviews of movies, books, music, television shows, etc..', 'TV series recap and discussion podcast', 'Daily podcast about technology news and events'), release_date ('2021-01-01', '2021-01-01', '2021-01-01'), studio_id (1, 4, 3), address_id (3, 2, 4) | Episode : episode_id (1, 4, 5), number (4, 3, 2), duration ('01:30:00', '01:30:00', '01:30:00'), podcast_id (4, 2, 1) | Reviewer : reviewer_id (4, 5, 3), username ('RobertWhite', 'DavidBlack', 'JaneDoe'), email ('jane@example.com', 'david@example.com', 'robert@example.com') | Review : review_id (4, 3, 2), rating (5, 4, 4), comment ('Could be a bit longer to cover all topics.', 'Very interesting episodes, looking forward to next one.', 'This is my favorite podcast so far.'), episode_id (2, 1, 3), reviewer_id (4, 3, 1)",
        "ambiguous_queries": [
            "SELECT Studio.name From Studio JOIN Podcast on Podcast.studio_id = Studio.studio_id WHERE Podcast.title = 'The Morning Show'",
            "SELECT Address.street, Address.city, Address.state, Address.country From Address JOIN Podcast on Podcast.Address_id = Address.Address_id WHERE Podcast.title = 'The Morning Show'",
            "SELECT Studio.name, Address.street, Address.city, Address.state, Address.country From Studio JOIN Podcast on Podcast.studio_id = Studio.studio_id JOIN Address on Podcast.Address_id = Address.Address_id WHERE Podcast.title = 'The Morning Show'"
        ],
        "gold_ambiguity": {
            "match": "{\"recorded\": [{\"Studio\": [\"name\"]}, {\"Address\": [\"street\", \"city\", \"state\", \"country\"]}, {\"Address\": [\"street\", \"city\", \"state\", \"country\"], \"Studio\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"recorded\" refers to the schema \"Address\".\"street\" and \"Address\".\"city\" and \"Address\".\"state\" and \"Address\".\"country\"",
        "clear_ambiguity": "{\"recorded\": {\"Address\": [\"street\", \"city\", \"state\", \"country\"]}}",
        "gold_query": "SELECT Address.street, Address.city, Address.state, Address.country From Address JOIN Podcast on Podcast.Address_id = Address.Address_id WHERE Podcast.title = 'The Morning Show'"
    },
    {
        "index": 976,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2tabs_aircraft_family/vague_2tabs_aircraft_family.sqlite",
        "question": "What's the family of the plane that comes from the same country as the LAX airport?",
        "schema_without_content": "Manufacturer_Name : id, manufacturer_name, country | Model_Name : id, model_name, year_introduced, MAX_PASSENGERS | Plane : id, plane_model_id, manufacturer_id, registration_number, aircraft_type, current_location | Airport : id, airport_code, name, city, country | Runway : id, runway_length, runway_width, airport_id | Flight : id, flight_date, departure_airport_id, arrival_airport_id, plane_id",
        "schema_with_content": "Manufacturer_Name : id (1, 4, 5), manufacturer_name ('Airbus', 'Bombardier', 'Embraer'), country ('China', 'Brazil', 'France') | Model_Name : id (5, 3, 2), model_name ('A320neo', 'ARJ-21', 'ERJ-190'), year_introduced (2000, 2017, 2007), MAX_PASSENGERS (100, 220, 90) | Plane : id (2, 3, 4), plane_model_id (5, 2, 3), manufacturer_id (4, 2, 5), registration_number ('B-HLEU', 'F-HSBN', 'N123AB'), aircraft_type ('Passenger', 'Passenger', 'Regional Passenger'), current_location ('Los Angeles', 'São Paulo', 'Paris') | Airport : id (5, 2, 3), airport_code ('LAX', 'GRU', 'PEK'), name ('Los Angeles International Airport', 'Charles de Gaulle Airport', 'Capital International Airport'), city ('Shanghai', 'Paris', 'Los Angeles'), country ('China', 'Brazil', 'USA') | Runway : id (2, 1, 4), runway_length (2400.0, 10000.0, 2800.0), runway_width (45.0, 45.0, 150.0), airport_id (5, 1, 3) | Flight : id (4, 3, 2), flight_date ('2022-01-01 20:00:00', '2022-01-01 08:00:00', '2022-01-01 16:00:00'), departure_airport_id (4, 5, 3), arrival_airport_id (3, 4, 2), plane_id (5, 1, 2)",
        "ambiguous_queries": [
            "SELECT Manufacturer_Name.MANUFACTURER_NAME FROM Manufacturer_Name JOIN Plane ON Plane.manufacturer_id = Manufacturer_Name.id JOIN Flight ON Plane.id = Flight.plane_id JOIN Airport ON Flight.departure_airport_id = Airport.id WHERE Airport.airport_code='LAX'",
            "SELECT Model_Name.Model_Name FROM Model_Name JOIN Plane ON Plane.plane_model_id = Model_Name.id JOIN Flight ON Plane.id = Flight.plane_id JOIN Airport ON Flight.departure_airport_id = Airport.id WHERE Airport.airport_code='LAX'",
            "SELECT Manufacturer_Name.MANUFACTURER_NAME, Model_Name.Model_Name FROM Model_Name JOIN Plane ON Plane.plane_model_id = Model_Name.id JOIN Manufacturer_Name ON Plane.manufacturer_id = Manufacturer_Name.id JOIN Flight ON Plane.id = Flight.plane_id JOIN Airport ON Flight.departure_airport_id = Airport.id WHERE Airport.airport_code='LAX'"
        ],
        "gold_ambiguity": {
            "match": "{\"family\": [{\"Manufacturer_Name\": [\"MANUFACTURER_NAME\"]}, {\"Model_Name\": [\"Model_Name\"]}, {\"Manufacturer_Name\": [\"MANUFACTURER_NAME\"], \"Model_Name\": [\"Model_Name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"family\" refers to the schema \"Model_Name\".\"Model_Name\"",
        "clear_ambiguity": "{\"family\": {\"Model_Name\": [\"Model_Name\"]}}",
        "gold_query": "SELECT Manufacturer_Name.MANUFACTURER_NAME, Model_Name.Model_Name FROM Model_Name JOIN Plane ON Plane.plane_model_id = Model_Name.id JOIN Manufacturer_Name ON Plane.manufacturer_id = Manufacturer_Name.id JOIN Flight ON Plane.id = Flight.plane_id JOIN Airport ON Flight.departure_airport_id = Airport.id WHERE Airport.airport_code='LAX'"
    },
    {
        "index": 977,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_teaching_subject2/vague_2cols_teaching_subject2.sqlite",
        "question": "Provide a list of professors along with the subjects they teach",
        "schema_without_content": "Disciplines : id, name | Professors : id, email, fullname | Courses : id, discipline_id, course_name, professor_id | Students : id, firstname, lastname, email | Enrollments : id, student_id, course_id | Grades : id, enrollment_id, grade",
        "schema_with_content": "Disciplines : id (3, 2, 5), name ('Computer Science', 'Physics', 'Biology') | Professors : id (1, 2, 4), email ('emily.williams@example.com', 'john.doe@example.com', 'michael.johnson@example.com'), fullname ('John Doe', 'Emily Williams', 'Michael Johnson') | Courses : id (5, 2, 1), discipline_id (2, 4, 1), course_name ('Calculus I', 'General Physics', 'Organic Chemistry'), professor_id (5, 4, 3) | Students : id (5, 3, 2), firstname ('Daniel', 'Tom', 'Lucy'), lastname ('Wilson', 'Robertson', 'Thompson'), email ('chris.wilson@example.com', 'lucy.taylor@example.com', 'alice.thompson@example.com') | Enrollments : id (4, 3, 1), student_id (3, 5, 4), course_id (1, 3, 4) | Grades : id (2, 3, 4), enrollment_id (4, 1, 2), grade ('B-', 'A', 'A+')",
        "ambiguous_queries": [
            "SELECT Professors.fullname, Disciplines.name AS Teaching_Subject FROM Professors JOIN Courses ON Courses.professor_id = Professors.id JOIN Disciplines ON Courses.Discipline_id = Disciplines.id;",
            "SELECT Professors.fullname, Courses.Course_name AS Teaching_Subject FROM Professors JOIN Courses ON Courses.professor_id = Professors.id",
            "SELECT Professors.fullname, Disciplines.name, Courses.Course_name FROM Professors JOIN Courses ON Courses.professor_id = Professors.id JOIN Disciplines ON Courses.Discipline_id = Disciplines.id;"
        ],
        "gold_ambiguity": {
            "match": "{\"subjects\": [{\"Courses\": [\"Course_name\"]}, {\"Disciplines\": [\"name\"]}, {\"Courses\": [\"Course_name\"], \"Disciplines\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"subjects\" refers to the schema \"Disciplines\".\"name\"",
        "clear_ambiguity": "{\"subjects\": {\"Disciplines\": [\"name\"]}}",
        "gold_query": "SELECT Professors.fullname, Disciplines.name, Courses.Course_name FROM Professors JOIN Courses ON Courses.professor_id = Professors.id JOIN Disciplines ON Courses.Discipline_id = Disciplines.id;"
    },
    {
        "index": 978,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_career_opportunities/vague_2cols_career_opportunities.sqlite",
        "question": "Which course has the oldest student chosen and what career opportunities could this open up?",
        "schema_without_content": "Students : StudentID, BirthDate, fullname | Instructors : InstructorID, FirstName, LastName, Email | Courses : CourseID, Title, Description, JobRole, Industry, Major, EnrollmentLimit, CurrentEnrollment | Enrollments : EnrollmentID, StudentID, CourseID, Grade",
        "schema_with_content": "Students : StudentID (2, 1), BirthDate ('1993-07-15', '1986-02-05'), fullname ('John Doe', 'Jane Smith') | Instructors : InstructorID (1, 2), FirstName ('Tom', 'Emma'), LastName ('Brown', 'White'), Email ('tom.brown@email.com', 'emma.white@email.com') | Courses : CourseID (1, 2), Title ('Introduction to Programming', 'Data Structures & Algorithms'), Description ('Learn how to code and build applications.', 'Master data structures and algorithms with this course.'), JobRole ('Software Engineer', 'Software Developer'), Industry ('Technology', 'Technology'), Major ('Computer Science', 'Computer Science'), EnrollmentLimit (30, 30), CurrentEnrollment (0, 0) | Enrollments : EnrollmentID (2, 1), StudentID (2, 1), CourseID (1, 1), Grade ('A', 'B')",
        "ambiguous_queries": [
            "select c.title, c.JobRole from students as s join enrollments as e on s.studentid=e.studentid join courses as c on e.courseid=c.courseid order by s.birthdate asc limit 1",
            "select c.title, c.Industry from students as s join enrollments as e on s.studentid=e.studentid join courses as c on e.courseid=c.courseid order by s.birthdate asc limit 1",
            "select c.title, c.JobRole, Industry from students as s join enrollments as e on s.studentid=e.studentid join courses as c on e.courseid=c.courseid order by s.birthdate asc limit 1"
        ],
        "gold_ambiguity": {
            "match": "{\"career\": [{\"Courses\": [\"JobRole\", \"Industry\"]}, {\"Courses\": [\"JobRole\"]}, {\"Courses\": [\"Industry\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"career\" refers to the schema \"courses\".\"Industry\"",
        "clear_ambiguity": "{\"career\": {\"Courses\": [\"Industry\"]}}",
        "gold_query": "select c.title, c.JobRole, Industry from students as s join enrollments as e on s.studentid=e.studentid join courses as c on e.courseid=c.courseid order by s.birthdate asc limit 1"
    },
    {
        "index": 979,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2cols_timeframe/vague_2cols_timeframe.sqlite",
        "question": "Where and when did John attend the press conference?",
        "schema_without_content": "Reporters : ReporterID, FirstName, LastName, Email | Articles : ArticleID, Title, Content, PublishDate, AuthorID | Sources : SourceID, Name, ContactInfo | ArticleSources : ArticleSourceID, ArticleID, SourceID, Quote | PressConferences : ConferenceID, Date, Time, Location, Subject | ReportersAttending : ReporterAttendeeID, ReporterID, ConferenceID",
        "schema_with_content": "Reporters : ReporterID (1, 2, 4), FirstName ('David', 'John', 'Jane'), LastName ('Smith', 'Doe', 'White'), Email ('jane.smith@example.com', 'john.doe@example.com', 'emily.white@example.com') | Articles : ArticleID (5, 3, 2), Title ('Freedom of the Press and its Role in Democracy', 'Technology Advances in News Reporting', 'Coverage of Conflicts Around the World'), Content ('A free press is vital to maintaining...', 'Journalists play a crucial role in reporting...', 'Investigative journalism is essential...'), PublishDate ('2022-07-04 14:00:00', '2022-07-02 10:00:00', '2022-07-03 12:00:00'), AuthorID (1, 3, 2) | Sources : SourceID (4, 2, 1), Name ('Associated Press', 'Al Jazeera', 'Bloomberg'), ContactInfo ('https://edition.cnn.com/contacts', 'https://www.bloomberg.com/contact', 'https://www.apnews.com/contact') | ArticleSources : ArticleSourceID (2, 5, 3), ArticleID (2, 1, 4), SourceID (3, 4, 5), Quote ('Quote from Al Jazeera source', 'Quote from Bloomberg source', 'Quote from Reuters source') | PressConferences : ConferenceID (5, 4, 3), Date ('2022-07-08', '2022-07-07', '2022-07-10'), Time ('16:00:00', '10:00:00', '12:00:00'), Location ('New York City', 'Paris', 'Tokyo'), Subject ('EU Climate Conference', 'G7 Leaders Meeting', 'Asia Pacific Economic Cooperation (APEC)') | ReportersAttending : ReporterAttendeeID (2, 5, 1), ReporterID (1, 5, 4), ConferenceID (5, 1, 4)",
        "ambiguous_queries": [
            "SELECT PressConferences.Date, PressConferences.Location FROM PressConferences JOIN ReportersAttending ON ReportersAttending.ConferenceID = PressConferences.ConferenceID JOIN Reporters ON ReportersAttending.ReporterID = Reporters.ReporterID WHERE Reporters.FirstName = 'John';",
            "SELECT PressConferences.Time, PressConferences.Location FROM PressConferences JOIN ReportersAttending ON ReportersAttending.ConferenceID = PressConferences.ConferenceID JOIN Reporters ON ReportersAttending.ReporterID = Reporters.ReporterID WHERE Reporters.FirstName = 'John';",
            "SELECT PressConferences.Date, Time, PressConferences.Location FROM PressConferences JOIN ReportersAttending ON ReportersAttending.ConferenceID = PressConferences.ConferenceID JOIN Reporters ON ReportersAttending.ReporterID = Reporters.ReporterID WHERE Reporters.FirstName = 'John';"
        ],
        "gold_ambiguity": {
            "match": "{\"when\": [{\"PressConferences\": [\"Date\"]}, {\"PressConferences\": [\"Time\"]}, {\"PressConferences\": [\"Date\", \"Time\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"when\" refers to the schema \"PressConferences\".\"Date\"",
        "clear_ambiguity": "{\"when\": {\"PressConferences\": [\"Date\"]}}",
        "gold_query": "SELECT PressConferences.Date, PressConferences.Location FROM PressConferences JOIN ReportersAttending ON ReportersAttending.ConferenceID = PressConferences.ConferenceID JOIN Reporters ON ReportersAttending.ReporterID = Reporters.ReporterID WHERE Reporters.FirstName = 'John';"
    },
    {
        "index": 980,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
        "question": "List all drugs, their effects and manufacturers that are analgesic.",
        "schema_without_content": "Patients : PatientID, FirstName, LastName, DOB, PhoneNumber, EmailAddress | Doctors : DoctorID, FirstName, LastName, Specialty, LicenseNumber, OfficePhone | Medications : DrugID, Name, Classification, Manufacturer, Side_Effects, Effectiveness | Prescriptions : PrescriptionID, PatientID, DoctorID, MedicationID, StartDate, EndDate, Quantity | Diagnoses : DiagnosisID, PatientID, DoctorID, Code, Description | Appointments : AppointmentID, PatientID, DoctorID, AppointmentDateTime, ReasonForVisit, IsCancelled",
        "schema_with_content": "Patients : PatientID (1), FirstName ('John'), LastName ('Doe'), DOB ('1987-06-15'), PhoneNumber ('+1234567890'), EmailAddress ('john.doe@example.com') | Doctors : DoctorID (1), FirstName ('Jane'), LastName ('Smith'), Specialty ('Cardiology'), LicenseNumber ('LIC001234567'), OfficePhone ('+0987654321') | Medications : DrugID (1), Name ('Aspirin'), Classification ('Analgesic'), Manufacturer ('Bayer'), Side_Effects ('Gastrointestinal upset'), Effectiveness ('High') | Prescriptions : PrescriptionID (1), PatientID (1), DoctorID (1), MedicationID (1), StartDate ('2022-01-01'), EndDate ('2022-01-31'), Quantity (10) | Diagnoses : DiagnosisID (1), PatientID (1), DoctorID (1), Code ('A123'), Description ('Hypertension') | Appointments : AppointmentID (1), PatientID (1), DoctorID (1), AppointmentDateTime ('2024-02-19 12:14:44'), ReasonForVisit ('Routine checkup'), IsCancelled (0)",
        "ambiguous_queries": [
            "SELECT Name, Manufacturer, Side_Effects FROM Medications WHERE Classification = 'Analgesic'",
            "SELECT Name, Manufacturer, Effectiveness FROM Medications WHERE Classification = 'Analgesic'",
            "SELECT Name, Manufacturer, Side_Effects, Effectiveness FROM Medications WHERE Classification = 'Analgesic'"
        ],
        "gold_ambiguity": {
            "match": "{\"effects\": [{\"Medications\": [\"Side_Effects\"]}, {\"Medications\": [\"Effectiveness\"]}, {\"Medications\": [\"Side_Effects\", \"Effectiveness\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"effects\" refers to the schema \"Medications\".\"Side_Effects\" and \"Medications\".\"Effectiveness\"",
        "clear_ambiguity": "{\"effects\": {\"Medications\": [\"Side_Effects\", \"Effectiveness\"]}}",
        "gold_query": "SELECT Name, Manufacturer, Side_Effects, Effectiveness FROM Medications WHERE Classification = 'Analgesic'"
    },
    {
        "index": 981,
        "db_id": "Filmmaking",
        "ambig_type": "vague",
        "db_file": "vague/Filmmaking/vague_2cols_rating/vague_2cols_rating.sqlite",
        "question": "What's the rating of the movies with Leonardo diCaprio",
        "schema_without_content": "Film : id, title, release_year, director, genre | Actor : id, name, birthdate, nationality | Role : id, actor_id, role_name, film_id | Cinematographer : id, name, birthdate, nationality | Camera : id, camera_type, resolution | ShotList : id, cinematographer_id, shot_description, camera_id | FilmReviews : id, critic_rating, audience_rating, film_id",
        "schema_with_content": "Film : id (3, 4, 5), title ('The Shawshank Redemption', 'Pulp Fiction', \"Schindler's List\"), release_year (1994, 2010, 1993), director ('Robert Zemeckis', 'Frank Darabont', 'Quentin Tarantino'), genre ('Action Sci-Fi', 'Biographical Drama', 'Drama') | Actor : id (1, 2, 5), name ('Brad Pitt', 'Kevin Spacey', 'Tom Hanks'), birthdate ('1956-07-09', '1963-12-18', '1959-07-26'), nationality ('American', 'American', 'American') | Role : id (2, 5, 3), actor_id (3, 1, 2), role_name ('Chris Cotton', 'Daniel Hillard', 'Philippe Petit'), film_id (1, 1, 1) | Cinematographer : id (5, 1, 3), name ('Emmanuel Lubezki', 'Hoyte Van Hoytema', 'Roger Deakins'), birthdate ('1959-08-05', '1961-02-21', '1949-05-24'), nationality ('Mexican', 'English', 'Swedish') | Camera : id (5, 4, 1), camera_type ('Red Epic Dragon', 'ARRI Alexa', 'Sony F55'), resolution ('4K', '5K', '4K') | ShotList : id (3, 4, 5), cinematographer_id (1, 3, 1), shot_description ('Wide shot of car chase through city streets', 'Close-up of characters discussing plans', 'Establishing shot of New York City skyline'), camera_id (5, 3, 2) | FilmReviews : id (3, 2, 5), critic_rating (7.5, 8.5, 9.0), audience_rating (8.0, 7.0, 8.0), film_id (5, 3, 4)",
        "ambiguous_queries": [
            "SELECT FilmReviews.critic_rating, Actor.name FROM FilmReviews JOIN Role ON FilmReviews.film_id = Role.film_id JOIN Actor ON Role.actor_id = Actor.id WHERE Actor.name = 'Leonardo DiCaprio'",
            "SELECT FilmReviews.audience_rating, Actor.name FROM FilmReviews JOIN Role ON FilmReviews.film_id = Role.film_id JOIN Actor ON Role.actor_id = Actor.id WHERE Actor.name = 'Leonardo DiCaprio'",
            "SELECT FilmReviews.critic_rating, audience_rating, Actor.name FROM FilmReviews JOIN Role ON FilmReviews.film_id = Role.film_id JOIN Actor ON Role.actor_id = Actor.id WHERE Actor.name = 'Leonardo DiCaprio'"
        ],
        "gold_ambiguity": {
            "match": "{\"rating\": [{\"FilmReviews\": [\"critic_rating\"]}, {\"FilmReviews\": [\"audience_rating\"]}, {\"FilmReviews\": [\"critic_rating\", \"audience_rating\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"rating\" refers to the schema \"FilmReviews\".\"critic_rating\"",
        "clear_ambiguity": "{\"rating\": {\"FilmReviews\": [\"critic_rating\"]}}",
        "gold_query": "SELECT FilmReviews.critic_rating, Actor.name FROM FilmReviews JOIN Role ON FilmReviews.film_id = Role.film_id JOIN Actor ON Role.actor_id = Actor.id WHERE Actor.name = 'Leonardo DiCaprio'"
    },
    {
        "index": 982,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_teaching_subject2/vague_2cols_teaching_subject2.sqlite",
        "question": "Provide a list of professors along with the subjects they teach",
        "schema_without_content": "Disciplines : id, name | Professors : id, email, fullname | Courses : id, discipline_id, course_name, professor_id | Students : id, firstname, lastname, email | Enrollments : id, student_id, course_id | Grades : id, enrollment_id, grade",
        "schema_with_content": "Disciplines : id (3, 1, 2), name ('Chemistry', 'Physics', 'Computer Science') | Professors : id (1, 4, 3), email ('david.brown@example.com', 'emily.williams@example.com', 'jane.smith@example.com'), fullname ('Emily Williams', 'David Brown', 'Michael Johnson') | Courses : id (5, 4, 1), discipline_id (1, 3, 4), course_name ('Calculus I', 'Data Structures and Algorithms', 'General Physics'), professor_id (5, 1, 2) | Students : id (4, 5, 1), firstname ('Lucy', 'Alice', 'Daniel'), lastname ('Thompson', 'Robertson', 'Jackson'), email ('tom.robertson@example.com', 'lucy.taylor@example.com', 'chris.wilson@example.com') | Enrollments : id (1, 4, 5), student_id (2, 4, 3), course_id (3, 2, 4) | Grades : id (5, 4, 3), enrollment_id (2, 5, 1), grade ('A', 'B-', 'B+')",
        "ambiguous_queries": [
            "SELECT Professors.fullname, Disciplines.name AS Teaching_Subject FROM Professors JOIN Courses ON Courses.professor_id = Professors.id JOIN Disciplines ON Courses.Discipline_id = Disciplines.id;",
            "SELECT Professors.fullname, Courses.Course_name AS Teaching_Subject FROM Professors JOIN Courses ON Courses.professor_id = Professors.id",
            "SELECT Professors.fullname, Disciplines.name, Courses.Course_name FROM Professors JOIN Courses ON Courses.professor_id = Professors.id JOIN Disciplines ON Courses.Discipline_id = Disciplines.id;"
        ],
        "gold_ambiguity": {
            "match": "{\"subjects\": [{\"Courses\": [\"Course_name\"]}, {\"Disciplines\": [\"name\"]}, {\"Courses\": [\"Course_name\"], \"Disciplines\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"subjects\" refers to the schema \"Disciplines\".\"name\"",
        "clear_ambiguity": "{\"subjects\": {\"Disciplines\": [\"name\"]}}",
        "gold_query": "SELECT Professors.fullname, Disciplines.name, Courses.Course_name FROM Professors JOIN Courses ON Courses.professor_id = Professors.id JOIN Disciplines ON Courses.Discipline_id = Disciplines.id;"
    },
    {
        "index": 983,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2tabs_lifecycle/vague_2tabs_lifecycle.sqlite",
        "question": "What is the lifecycle of each project with an end date in 2023?",
        "schema_without_content": "Materials : material_id, name, cost | Projects : project_id, name, start_date, end_date, infrastructure_id | Infrastructure : infrastructure_id, description, service_life_expectancy_id, renewal_schedule_id | Workers : worker_id, first_name, last_name, skill_level | Tasks : task_id, description, assigned_to_worker_id, due_date, completed | Service_Life_Expectancy : service_life_expectancy_id, min_years, max_years | Renewal_Schedule : renewal_schedule_id, frequency",
        "schema_with_content": "Materials : material_id (2, 5, 1), name ('Cement', 'Steel Rebar', 'Bricks'), cost (15.0, 30.0, 20.0) | Projects : project_id (1, 4, 5), name ('Stadium Construction', 'Park Improvement', 'Building Foundation'), start_date ('2023-01-01', '2023-05-01', '2023-03-01'), end_date ('2024-02-28', '2023-09-30', '2023-12-31'), infrastructure_id (3, 5, 2) | Infrastructure : infrastructure_id (3, 1, 4), description ('Retaining Wall', 'Foundation Slab', 'Bridge Abutment'), service_life_expectancy_id (3, 2, 5), renewal_schedule_id (3, 1, 2) | Workers : worker_id (3, 4, 2), first_name ('John', 'Jane', 'David'), last_name ('Williams', 'Johnson', 'Doe'), skill_level (9, 7, 8) | Tasks : task_id (2, 5, 1), description ('Replace steel rebar', 'Paint bridge abutments', 'Install new drainage system'), assigned_to_worker_id (4, 1, 5), due_date ('2023-09-15', '2023-12-15', '2023-11-15'), completed (0, 0, 0) | Service_Life_Expectancy : service_life_expectancy_id (5, 4, 1), min_years (10, 5, 20), max_years (60, 40, 20) | Renewal_Schedule : renewal_schedule_id (2, 3, 1), frequency ('Monthly', 'Yearly', 'Quarterly')",
        "ambiguous_queries": [
            "SELECT name, min_years, max_years FROM Projects AS P LEFT JOIN Infrastructure AS I ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Service_Life_Expectancy AS L ON I.service_life_expectancy_id = L.service_life_expectancy_id WHERE P.end_date BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT name, frequency FROM Projects AS P LEFT JOIN Infrastructure AS I ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Renewal_Schedule AS L ON I.Renewal_Schedule_id = L.Renewal_Schedule_id WHERE P.end_date BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT name, min_years, max_years,frequency FROM Projects AS P LEFT JOIN Infrastructure AS I ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Service_Life_Expectancy AS L ON I.service_life_expectancy_id = L.service_life_expectancy_id LEFT JOIN Renewal_Schedule AS RS ON I.Renewal_Schedule_id = RS.Renewal_Schedule_id WHERE P.end_date BETWEEN '2023-01-01' AND '2023-12-31'"
        ],
        "gold_ambiguity": {
            "match": "{\"lifecycle\": [{\"Projects\": [\"frequency\"]}, {\"Projects\": [\"min_years\", \"max_years\"]}, {\"Projects\": [\"min_years\", \"max_years\", \"frequency\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"lifecycle\" refers to the schema \"Projects\".\"min_years\" and \"Projects\".\"max_years\" and \"Projects\".\"frequency\"",
        "clear_ambiguity": "{\"lifecycle\": {\"Projects\": [\"min_years\", \"max_years\", \"frequency\"]}}",
        "gold_query": "SELECT name, min_years, max_years,frequency FROM Projects AS P LEFT JOIN Infrastructure AS I ON P.infrastructure_id = I.infrastructure_id LEFT JOIN Service_Life_Expectancy AS L ON I.service_life_expectancy_id = L.service_life_expectancy_id LEFT JOIN Renewal_Schedule AS RS ON I.Renewal_Schedule_id = RS.Renewal_Schedule_id WHERE P.end_date BETWEEN '2023-01-01' AND '2023-12-31'"
    },
    {
        "index": 984,
        "db_id": "Airport",
        "ambig_type": "vague",
        "db_file": "vague/Airport/vague_2cols_size_limits/vague_2cols_size_limits.sqlite",
        "question": "Which airline uses the plane PlaneModel3 and what are the corresponding size limits?",
        "schema_without_content": "Airports : id, name, city, country | Airlines : id, name, headquarter_city, headquarter_country | Planes : id, model, linear_dimensions, weight_restriction, airline_id | Runways : id, length, width, capacity, airport_id | Flights : id, departure_time, arrival_time, runway_id, plane_model | Passengers : id, fullname, passport, flight_id",
        "schema_with_content": "Airports : id (3, 4, 2), name ('Airport4', 'Airport1', 'Airport5'), city ('CityB', 'CityD', 'CityC'), country ('CountryY', 'CountryW', 'CountryV') | Airlines : id (4, 5, 1), name ('Airline5', 'Airline2', 'Airline4'), headquarter_city ('HeadquartersE', 'HeadquartersC', 'HeadquartersB'), headquarter_country ('HQZ', 'HQY', 'HQW') | Planes : id (3, 1, 5), model ('PlaneModel2', 'PlaneModel1', 'PlaneModel3'), linear_dimensions ('Dimensions1', 'Dimensions2', 'Dimensions4'), weight_restriction (50000.0, 40000.0, 20000.0), airline_id (1, 3, 4) | Runways : id (3, 5, 1), length (8000.0, 7000.0, 5000.0), width (90.0, 120.0, 150.0), capacity (9999, 9997, 9995), airport_id (4, 2, 1) | Flights : id (3, 2, 5), departure_time ('2022-01-05 12:00:00', '2022-01-03 10:00:00', '2022-01-01 08:00:00'), arrival_time ('2022-01-03 12:00:00', '2022-01-04 13:00:00', '2022-01-05 14:00:00'), runway_id (5, 2, 4), plane_model ('PlaneModel5', 'PlaneModel1', 'PlaneModel2') | Passengers : id (4, 2, 3), fullname ('Passenger1', 'Passenger4', 'Passenger2'), passport ('Passport3', 'Passport1', 'Passport5'), flight_id (4, 5, 3)",
        "ambiguous_queries": [
            "select A.name, P.linear_dimensions from Airlines A inner join Planes P on P.airline_id = A.id where P.model = 'PlaneModel3'",
            "select A.name, P.weight_restriction from Airlines A inner join Planes P on P.airline_id = A.id where P.model = 'PlaneModel3'",
            "select A.name, P.linear_dimensions, weight_restriction from Airlines A inner join Planes P on P.airline_id = A.id where P.model = 'PlaneModel3'"
        ],
        "gold_ambiguity": {
            "match": "{\"size limits\": [{\"Planes\": [\"linear_dimensions\"]}, {\"Planes\": [\"weight_restriction\"]}, {\"Planes\": [\"linear_dimensions\", \"weight_restriction\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"size limits\" refers to the schema \"Planes\".\"linear_dimensions\" and \"Planes\".\"weight_restriction\"",
        "clear_ambiguity": "{\"size limits\": {\"Planes\": [\"linear_dimensions\", \"weight_restriction\"]}}",
        "gold_query": "select A.name, P.linear_dimensions, weight_restriction from Airlines A inner join Planes P on P.airline_id = A.id where P.model = 'PlaneModel3'"
    },
    {
        "index": 985,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2tabs_resources2/vague_2tabs_resources2.sqlite",
        "question": "Which resource is Alice Smith using?",
        "schema_without_content": "Authors : id, name, email | Textbooks : id, title, author_id | Software : id, name, version_number, author_id | Courses : id, course_name, textbook_id, software_id | Students : id, student_name, enrolled_course_id | Grades : id, grade, student_id, course_id",
        "schema_with_content": "Authors : id (1, 2, 5), name ('Jane Smith', 'John Doe', 'Michael Johnson'), email ('john.doe@example.com', 'michael.johnson@example.com', 'david.brown@example.com') | Textbooks : id (1, 4, 5), title ('Physics for Scientists and Engineers', 'Organic Chemistry', 'Introduction to Computer Science'), author_id (3, 1, 2) | Software : id (3, 4, 1), name ('Autodesk AutoCAD', 'Red Hat Enterprise Linux', 'Oracle Database'), version_number ('2022', '19c', '2021'), author_id (4, 3, 5) | Courses : id (3, 2, 4), course_name ('Advanced Physics', 'Engineering Mathematics', 'Introductory Organic Chemistry'), textbook_id (2, 3, 4), software_id (4, 5, 3) | Students : id (5, 4, 2), student_name ('Eva Green', 'Dave Brown', 'Alice Smith'), enrolled_course_id (4, 3, 5) | Grades : id (5, 4, 1), grade (92, 65, 80), student_id (3, 4, 5), course_id (5, 2, 3)",
        "ambiguous_queries": [
            "SELECT r.title AS Resource_Title FROM Students s INNER JOIN Courses c ON s.enrolled_course_id = c.id INNER JOIN Textbooks r ON c.textbook_id = r.id WHERE s.student_name = 'Alice Smith';",
            "SELECT r.name AS Resource_Title FROM Students s INNER JOIN Courses c ON s.enrolled_course_id = c.id INNER JOIN Software r ON c.Software_id = r.id WHERE s.student_name = 'Alice Smith';",
            "SELECT r.title, sw.name FROM Students s INNER JOIN Courses c ON s.enrolled_course_id = c.id INNER JOIN Textbooks r ON c.textbook_id = r.id INNER JOIN Software sw ON c.Software_id = sw.id WHERE s.student_name = 'Alice Smith';"
        ],
        "gold_ambiguity": {
            "match": "{\"resource\": [{\"Software\": [\"name\"]}, {\"Textbooks\": [\"title\"]}, {\"Software\": [\"name\"], \"Textbooks\": [\"title\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"resource\" refers to the schema \"Textbooks\".\"title\"",
        "clear_ambiguity": "{\"resource\": {\"Textbooks\": [\"title\"]}}",
        "gold_query": "SELECT r.title, sw.name FROM Students s INNER JOIN Courses c ON s.enrolled_course_id = c.id INNER JOIN Textbooks r ON c.textbook_id = r.id INNER JOIN Software sw ON c.Software_id = sw.id WHERE s.student_name = 'Alice Smith';"
    },
    {
        "index": 986,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_geographical_location/vague_2cols_geographical_location.sqlite",
        "question": "Where are the clinics located?",
        "schema_without_content": "Doctors : id, name, specialty, hospital_id | Hospitals : id, name, city, neighborhood, phone_number | InsurancePlans : id, plan_name, premium, coverage_details, provider_id | Patients : id, first_name, last_name, birthdate, insurance_plan_id | Prescriptions : id, patient_id, doctor_id, medication, dosage, quantity, refillable, prescription_date",
        "schema_with_content": "Doctors : id (4, 1, 2), name ('Dr. Emily Davis', 'Dr. Sarah Brown', 'Dr. Jane Doe'), specialty ('Orthopedics', 'General Practice', 'Neurology'), hospital_id (1, 2, 3) | Hospitals : id (1, 3, 4), name (\"St. Mary's Hospital\", 'Mayo Clinic', 'Cleveland Clinic'), city ('Rochester', 'Houston', 'Miami'), neighborhood ('Gates Mills Boulevard', 'Downtown', 'First Street SW'), phone_number ('+1-212-500-1111', '+1-507-538-0000', '+1-216-444-1000') | InsurancePlans : id (3, 2, 5), plan_name ('Ultimate Plan', 'Standard Plan', 'Deluxe Plan'), premium (500, 400, 200), coverage_details ('Includes preventive care and routine checkups', 'Exclusive benefits and concierge service', 'Covers essential medical services'), provider_id (4, 3, 2) | Patients : id (4, 2, 3), first_name ('Sarah', 'John', 'Mike'), last_name ('Smith', 'Davis', 'Johnson'), birthdate ('1995-04-04', '1990-03-03', '2000-05-05'), insurance_plan_id (2, 4, 3) | Prescriptions : id (2, 3, 5), patient_id (2, 5, 4), doctor_id (1, 2, 3), medication ('Azathioprine', 'Metformin', 'Codeine'), dosage ('5mg', '60mg', '9mg'), quantity (30, 30, 30), refillable (0, 1, 1), prescription_date ('2021-04-01 13:00:00', '2021-01-01 10:00:00', '2021-03-01 12:00:00')",
        "ambiguous_queries": [
            "Select neighborhood from hospitals where name like '%Clinic%';",
            "Select city from hospitals where name like '%Clinic%';",
            "Select neighborhood, city from hospitals where name like '%Clinic%';"
        ],
        "gold_ambiguity": {
            "match": "{\"Where\": [{\"Hospitals\": [\"neighborhood\", \"city\"]}, {\"Hospitals\": [\"neighborhood\"]}, {\"Hospitals\": [\"city\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"Where\" refers to the schema \"hospitals\".\"city\"",
        "clear_ambiguity": "{\"Where\": {\"Hospitals\": [\"city\"]}}",
        "gold_query": "Select city from hospitals where name like '%Clinic%';"
    },
    {
        "index": 987,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_offering_department/vague_2cols_offering_department.sqlite",
        "question": "Find how many students from each offering department are enrolled in Calculus I.",
        "schema_without_content": "Students : id, first_name, last_name, email, phone_number, college, university | Colleges : id, name, location | Universities : id, name, city, state, country | CourseEnrollments : student_id, course_id, semester, year, grade | Courses : id, title, description, credits | Professors : id, first_name, last_name, department, office_location",
        "schema_with_content": "Students : id (1, 2), first_name ('John', 'Jane'), last_name ('Smith', 'Doe'), email ('jane.smith@example.com', 'john.doe@example.com'), phone_number ('555-987-6543', '555-123-4567'), college ('Mathematics', 'Computer Science'), university ('Stanford University', 'University of California') | Colleges : id (1, 2), name ('Mathematics', 'Computer Science'), location ('Palo Alto', 'San Francisco') | Universities : id (2, 1), name ('University of California', 'Stanford University'), city ('Los Angeles', 'Stanford'), state ('CA', 'CA'), country ('USA', 'USA') | CourseEnrollments : student_id (1, 2), course_id (1, 2), semester ('Spring', 'Fall'), year (2021, 2021), grade ('A', 'B+') | Courses : id (2, 1), title ('Introduction to Computer Science', 'Calculus I'), description ('Basic principles of calculus including limits, derivatives, and integrals.', 'An overview of computer science concepts and programming languages.'), credits (4, 4) | Professors : id (2, 1), first_name ('Professor', 'Dr.'), last_name ('Johnson', 'Williams'), department ('Mathematics', 'Computer Science'), office_location ('Room 123', 'Room 456')",
        "ambiguous_queries": [
            "SELECT college, COUNT(student_id) AS Num_Students FROM Students S LEFT JOIN CourseEnrollments E ON S.id = E.student_id LEFT JOIN Courses C ON C.id = E.course_id AND title = 'Calculus I'",
            "SELECT university, COUNT(student_id) AS Num_Students FROM Students S LEFT JOIN CourseEnrollments E ON S.id = E.student_id LEFT JOIN Courses C ON C.id = E.course_id AND title = 'Calculus I'",
            "SELECT college, university, COUNT(student_id) AS Num_Students FROM Students S LEFT JOIN CourseEnrollments E ON S.id = E.student_id LEFT JOIN Courses C ON C.id = E.course_id AND title = 'Calculus I'"
        ],
        "gold_ambiguity": {
            "match": "{\"department\": [{\"Students\": [\"college\"]}, {\"Students\": [\"university\"]}, {\"Students\": [\"college\", \"university\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"department\" refers to the schema \"Students\".\"college\"",
        "clear_ambiguity": "{\"department\": {\"Students\": [\"college\"]}}",
        "gold_query": "SELECT college, COUNT(student_id) AS Num_Students FROM Students S LEFT JOIN CourseEnrollments E ON S.id = E.student_id LEFT JOIN Courses C ON C.id = E.course_id AND title = 'Calculus I'"
    },
    {
        "index": 988,
        "db_id": "Streaming Service",
        "ambig_type": "vague",
        "db_file": "vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
        "question": "List the movies along with their release years, sorted by writer",
        "schema_without_content": "Subscribers : subscriber_id, username, email, password | Movies : movie_id, title, release_year, genre, novelist, playwright, film | TVShows : tvshow_id, show_title, start_date, end_date, genre, episodes | Actors : actor_id, first_name, last_name, birth_date, nationality | Playwrights : playwright_id, name | Novelists : novelist_id, name",
        "schema_with_content": "Subscribers : subscriber_id (4, 3, 5), username ('user002', 'user004', 'user001'), email ('user004@outlook.com', 'user003@hotmail.com', 'user005@aol.com'), password ('password003', 'password001', 'password005') | Movies : movie_id (1, 4, 2), title ('Inception', 'Jurassic Park', 'Forrest Gump'), release_year (1994, 1994, 1993), genre ('Adventure, Sci-Fi', 'Crime, Drama', 'Drama, Romance'), novelist ('Quentin Tarantino & Roger Avary', 'Michael Crichton', 'Winston Groom'), playwright ('Quentin Tarantino', 'Francis Ford Coppola', 'Christopher Nolan'), film ('Jurassic Park', 'Pulp Fiction', 'Inception') | TVShows : tvshow_id (2, 3, 4), show_title ('Stranger Things', 'Vikings', 'Friends'), start_date (19940922, 20080117, 20131003), end_date ('Present', 20040506, 20190519), genre ('Historical drama', 'Comedy, Romance', 'Crime, Drama'), episodes (42, 73, 62) | Actors : actor_id (2, 5, 1), first_name ('Denzel Washington', 'Brad Pitt', 'Tom Hanks'), last_name (), birth_date (19541227, 19560709, 19400425), nationality ('American', 'American', 'American') | Playwrights : playwright_id (), name () | Novelists : novelist_id (), name ()",
        "ambiguous_queries": [
            "SELECT novelist, title, release_year FROM Movies ORDER BY novelist, release_year;",
            "SELECT playwright, title, release_year FROM Movies ORDER BY playwright, release_year;",
            "SELECT novelist, playwright, title, release_year FROM Movies ORDER BY novelist, playwright, release_year;"
        ],
        "gold_ambiguity": {
            "match": "{\"writer\": [{\"Movies\": [\"novelist\"]}, {\"Movies\": [\"playwright\"]}, {\"Movies\": [\"novelist\", \"playwright\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"writer\" refers to the schema \"Movies\".\"novelist\"",
        "clear_ambiguity": "{\"writer\": {\"Movies\": [\"novelist\"]}}",
        "gold_query": "SELECT novelist, title, release_year FROM Movies ORDER BY novelist, release_year;"
    },
    {
        "index": 989,
        "db_id": "Education",
        "ambig_type": "vague",
        "db_file": "vague/Education/vague_2cols_study_plan/vague_2cols_study_plan.sqlite",
        "question": "What are the study plans of computer science program?",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth | Teachers : TeacherID, FirstName, LastName, Subject | Courses : CourseID, Title, Description, Credit | Enrollments : EnrollmentID, StudentID, CourseID | Grades : GradeID, EnrollmentID, FinalGrade | Programs : ProgramID, ProgramName, Core_Courses, Electives, Requirements",
        "schema_with_content": "Students : StudentID (2, 4, 5), FirstName ('Michael', 'Jane', 'David'), LastName ('Brown', 'Johnson', 'Smith'), DateOfBirth ('2002-07-20', '1999-10-15', '2000-09-10') | Teachers : TeacherID (5, 4, 1), FirstName ('Professor', 'Mr.', 'Ms.'), LastName ('Thompson', 'Smith', 'Baker'), Subject ('Mathematics', 'Biology', 'English Literature') | Courses : CourseID (5, 4, 2), Title ('World History II', 'American Literature', 'Calculus I'), Description ('Introduction to Calculus with focus on limits and derivatives.', 'A survey of American literature from its beginnings through the early twentieth century.', 'Exploration and colonization from 15th century to present day.'), Credit (3, 4, 4) | Enrollments : EnrollmentID (4, 1, 3), StudentID (1, 3, 2), CourseID (4, 3, 1) | Grades : GradeID (5, 3, 2), EnrollmentID (4, 5, 1), FinalGrade (88, 92, 95) | Programs : ProgramID (5, 3, 1), ProgramName ('Electrical Engineering', 'Civil Engineering', 'Computer Science'), Core_Courses ('Circuit Analysis, Digital Logic Design, Signals and Systems, Power Electronics', 'Structural Analysis, Geotechnical Engineering, Transportation Engineering, Environmental Engineering', 'Engineering Mechanics, Materials Science, Thermodynamics, Fluid Mechanics'), Electives ('Communication Systems, Microprocessors, Analog Circuits, Control Systems', 'Artificial Intelligence, Network Security, Human-Computer Interaction, Software Engineering', 'Water Resources, Construction Management, Surveying, Traffic Engineering'), Requirements ('Minimum cumulative GPA of 2.5, Minimum 2 years of college work.', 'Minimum cumulative GPA of 2.7, Minimum 2 years of college work.', 'Minimum cumulative GPA of 2.5, Minimum 2 years of college work.')",
        "ambiguous_queries": [
            "SELECT Core_Courses FROM Programs WHERE ProgramName = 'Computer Science'",
            "SELECT Electives FROM Programs WHERE ProgramName = 'Computer Science'",
            "SELECT Core_Courses, Electives FROM Programs WHERE ProgramName = 'Computer Science'"
        ],
        "gold_ambiguity": {
            "match": "{\"program\": [{\"Programs\": [\"Core_Courses\"]}, {\"Programs\": [\"Electives\"]}, {\"Programs\": [\"Core_Courses\", \"Electives\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"program\" refers to the schema \"Programs\".\"Core_Courses\" and \"Programs\".\"Electives\"",
        "clear_ambiguity": "{\"program\": {\"Programs\": [\"Core_Courses\", \"Electives\"]}}",
        "gold_query": "SELECT Core_Courses, Electives FROM Programs WHERE ProgramName = 'Computer Science'"
    },
    {
        "index": 990,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_developer/vague_2cols_developer.sqlite",
        "question": "Show me all the medical devices and their makers.",
        "schema_without_content": "Scientists : id, birthDate, fullname | Companies : id, name, location | MedicalDevices : id, deviceName, description, price | DeviceDevelopment : scientistId, companyId, medicalDeviceId, startDate, endDate | Patients : patientId, firstName, lastName, dateOfBirth, gender | Appointments : appointmentId, doctorId, patientId, date | Doctors : doctorId, firstName, lastName, specialty",
        "schema_with_content": "Scientists : id (2, 1), birthDate ('1980-02-02', '1970-01-01'), fullname ('John Smith', 'Jane Doe') | Companies : id (1, 2), name ('MedTech Inc.', 'Health Innovations Ltd.'), location ('London, UK', 'New York, USA') | MedicalDevices : id (2, 1), deviceName ('Glucose Monitor', 'Heart Rate Sensor'), description ('Monitors blood glucose levels', 'Measures heart rate'), price (69.99, 99.99) | DeviceDevelopment : scientistId (2, 1), companyId (1, 2), medicalDeviceId (2, 1), startDate ('2021-01-01', '2020-01-01'), endDate ('2021-12-31', '2020-12-31') | Patients : patientId (1, 2), firstName ('Emily', 'Michael'), lastName ('Williams', 'Johnson'), dateOfBirth ('1995-02-02', '1990-01-01'), gender ('F', 'M') | Appointments : appointmentId (2, 1), doctorId (2, 1), patientId (2, 1), date ('2022-02-02 14:00:00', '2022-01-01 10:00:00') | Doctors : doctorId (1, 2), firstName ('Dr. Charles', 'Dr. Alice'), lastName ('Brown', 'Green'), specialty ('Cardiology', 'Neurology')",
        "ambiguous_queries": [
            "SELECT MedicalDevices.deviceName, Scientists.fullname FROM DeviceDevelopment JOIN Scientists ON Scientists.id = DeviceDevelopment.scientistId JOIN MedicalDevices ON MedicalDevices.id = DeviceDevelopment.medicalDeviceId",
            "SELECT MedicalDevices.deviceName, Companies.name FROM DeviceDevelopment JOIN Companies ON Companies.id = DeviceDevelopment.companyId JOIN MedicalDevices ON MedicalDevices.id = DeviceDevelopment.medicalDeviceId",
            "SELECT MedicalDevices.deviceName, Scientists.fullname, Companies.name FROM DeviceDevelopment JOIN Scientists ON Scientists.id = DeviceDevelopment.scientistId JOIN MedicalDevices ON MedicalDevices.id = DeviceDevelopment.medicalDeviceId JOIN Companies ON Companies.id = DeviceDevelopment.companyId"
        ],
        "gold_ambiguity": {
            "match": "{\"makers\": [{\"Companies\": [\"name\"]}, {\"Scientists\": [\"fullname\"]}, {\"Companies\": [\"name\"], \"Scientists\": [\"fullname\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"makers\" refers to the schema \"Scientists\".\"fullname\"",
        "clear_ambiguity": "{\"makers\": {\"Scientists\": [\"fullname\"]}}",
        "gold_query": "SELECT MedicalDevices.deviceName, Scientists.fullname FROM DeviceDevelopment JOIN Scientists ON Scientists.id = DeviceDevelopment.scientistId JOIN MedicalDevices ON MedicalDevices.id = DeviceDevelopment.medicalDeviceId"
    },
    {
        "index": 991,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_collection_size/vague_2cols_collection_size.sqlite",
        "question": "Show the opening hours along with their collection sizes for all libraries.",
        "schema_without_content": "Students : ID, FirstName, LastName, DateOfBirth, Email, PhoneNumber | Courses : CourseID, CourseTitle, Instructor, StartDate, EndDate | Enrollments : EnrollmentID, StudentID, CourseID, Semester, Year | Grades : GradeID, EnrollmentID, FinalGrade | Library : LibraryID, Number_Of_Volumes, Shelving_Space, Library, Accessible, OpeningHours",
        "schema_with_content": "Students : ID (1, 2), FirstName ('Jane', 'John'), LastName ('Doe', 'Smith'), DateOfBirth ('2002-05-20', '2003-06-18'), Email ('jane.smith@example.com', 'john.doe@example.com'), PhoneNumber ('+0987654321', '+1234567890') | Courses : CourseID (1, 2), CourseTitle ('Introduction to Programming', 'Advanced Database Management'), Instructor ('Prof. John Doe', 'Dr. Jane Smith'), StartDate ('2023-01-15', '2023-01-01'), EndDate ('2023-05-15', '2023-05-31') | Enrollments : EnrollmentID (1, 2), StudentID (2, 1), CourseID (2, 1), Semester ('Spring', 'Fall'), Year (2023, 2023) | Grades : GradeID (1, 2), EnrollmentID (2, 1), FinalGrade (92.3, 88.5) | Library : LibraryID (1, 2), Number_Of_Volumes (500, 300), Shelving_Space ('750 sq ft', '1000 sq ft'), Library ('Engineering Library', 'University Main Library'), Accessible ('Yes', 'No'), OpeningHours ('Monday - Friday: 8am - 6pm, Saturday: 10am - 2pm, Sunday: Closed', 'Monday - Thursday: 8am - 8pm, Friday: 8am - 6pm, Weekends: Closed')",
        "ambiguous_queries": [
            "SELECT Library, Number_Of_Volumes, OpeningHours FROM Library",
            "SELECT Library, Shelving_Space, OpeningHours FROM Library",
            "SELECT Library, Number_Of_Volumes, Shelving_Space, OpeningHours FROM Library"
        ],
        "gold_ambiguity": {
            "match": "{\"collection sizes\": [{\"Library\": [\"Number_Of_Volumes\"]}, {\"Library\": [\"Shelving_Space\"]}, {\"Library\": [\"Number_Of_Volumes\", \"Shelving_Space\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"collection sizes\" refers to the schema \"Library\".\"Number_Of_Volumes\"",
        "clear_ambiguity": "{\"collection sizes\": {\"Library\": [\"Number_Of_Volumes\"]}}",
        "gold_query": "SELECT Library, Number_Of_Volumes, OpeningHours FROM Library"
    },
    {
        "index": 992,
        "db_id": "Construction",
        "ambig_type": "vague",
        "db_file": "vague/Construction/vague_2tabs_inspection_types/vague_2tabs_inspection_types.sqlite",
        "question": "Create a list of inspections dates in order of most recent first.",
        "schema_without_content": "Project : projectID, name, startDate, endDate, structuralInspectionID, safetyInspectionID | Material : materialID, type, quantity, unit, price, projectID | Employee : employeeID, firstName, lastName, role, hireDate, supervisorID | Structural_Inspection : inspectionID, date, result, inspectorEmployeeID | Safety_Inspection : inspectionID, date, result, inspectorEmployeeID | Worker : workerID, firstName, lastName, employmentStartDate, currentProjectID",
        "schema_with_content": "Project : projectID (2, 1), name ('Bridge Replacement', 'Highway Repair'), startDate ('2023-01-01', '2023-02-01'), endDate ('2023-12-31', '2023-12-31'), structuralInspectionID (3, 1), safetyInspectionID (2, 4) | Material : materialID (3, 1, 4), type ('Gravel', 'Concrete', 'Asphalt'), quantity (200, 100, 100), unit ('tons', 'tons', 'cubic yards'), price (40, 75, 60), projectID (1, 1, 2) | Employee : employeeID (3, 1, 4), firstName ('Jane', 'Mike', 'Anna'), lastName ('Williams', 'Johnson', 'Smith'), role ('Architect', 'Site Supervisor', 'Structural Engineer'), hireDate ('2022-01-01', '2022-01-01', '2022-01-01'), supervisorID (1, 1) | Structural_Inspection : inspectionID (1, 2), date ('2023-01-20 10:00:00', '2023-02-20 10:00:00'), result ('Failed', 'Passed'), inspectorEmployeeID (1, 2) | Safety_Inspection : inspectionID (2, 1), date ('2023-01-15 10:00:00', '2023-02-15 10:00:00'), result ('Passed', 'Failed'), inspectorEmployeeID (2, 1) | Worker : workerID (2, 1), firstName ('Sam', 'Tom'), lastName ('Waterson', 'Hanks'), employmentStartDate ('2022-01-01', '2022-01-01'), currentProjectID (1, 2)",
        "ambiguous_queries": [
            "SELECT date FROM Structural_Inspection ORDER BY date DESC",
            "SELECT date FROM Safety_Inspection ORDER BY date DESC",
            "SELECT Structural_Inspection.date, Safety_Inspection.date FROM Structural_Inspection JOIN Project ON Project.StructuralInspectionId = Structural_Inspection.inspectionID JOIN Safety_Inspection ON Project.SafetyInspectionId = Safety_Inspection.inspectionID ORDER BY Structural_Inspection.date, Safety_Inspection.date DESC"
        ],
        "gold_ambiguity": {
            "match": "{\"inspections dates\": [{\"Safety_Inspection\": [\"date\"]}, {\"Structural_Inspection\": [\"date\"]}, {\"Safety_Inspection\": [\"date\"], \"Structural_Inspection\": [\"date\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"inspections dates\" refers to the schema \"Structural_Inspection\".\"date\"",
        "clear_ambiguity": "{\"inspections dates\": {\"Structural_Inspection\": [\"date\"]}}",
        "gold_query": "SELECT date FROM Safety_Inspection ORDER BY date DESC"
    },
    {
        "index": 993,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2tabs_historical_context/vague_2tabs_historical_context.sqlite",
        "question": "show the name and historical context of each healthcare facility",
        "schema_without_content": "Founding_Year : id, year | Past_Owners : id, owner_name, acquisition_year | Healthcare_Facilities : id, name, address, founding_id, past_owner_id | Employees : id, employee_name, position, healthcare_facility_id | Patients : id, patient_name, age, healthcare_facility_id | Treatments : id, treatment_name, start_date, end_date, patient_id, healthcare_facility_id",
        "schema_with_content": "Founding_Year : id (5, 2, 1), year (1978, 1965, 2003) | Past_Owners : id (2, 5, 4), owner_name ('Owner B', 'Owner A', 'Owner C'), acquisition_year (2015, 2020, 2010) | Healthcare_Facilities : id (3, 4, 1), name ('Facility 2', 'Facility 1', 'Facility 4'), address ('Address 5', 'Address 1', 'Address 4'), founding_id (5, 2, 4), past_owner_id (2, 3, 5) | Employees : id (5, 3, 4), employee_name ('Emp 4', 'Emp 3', 'Emp 1'), position ('Pharmacist', 'Receptionist', 'Nurse'), healthcare_facility_id (3, 2, 2) | Patients : id (2, 5, 4), patient_name ('Patient 1', 'Patient 2', 'Patient 3'), age (60, 55, 45), healthcare_facility_id (2, 2, 1) | Treatments : id (2, 3, 4), treatment_name ('Checkup', 'Dialysis', 'Surgery'), start_date ('2022-01-01', '2022-01-01', '2022-03-01'), end_date ('2022-02-28', '2022-03-01', '2022-01-05'), patient_id (5, 4, 2), healthcare_facility_id (1, 2, 3)",
        "ambiguous_queries": [
            "SELECT hf.name , hc.year FROM Healthcare_Facilities hf JOIN Founding_Year hc ON hf.founding_id = hc.id",
            "SELECT hf.name , hc.owner_name, hc.acquisition_year FROM Healthcare_Facilities hf JOIN Past_Owners hc ON hf.past_owner_id = hc.id",
            "SELECT hf.name , hc.year, po.owner_name, po.acquisition_year FROM Healthcare_Facilities hf JOIN Founding_Year hc ON hf.founding_id = hc.id JOIN Past_Owners po ON hf.past_owner_id = po.id"
        ],
        "gold_ambiguity": {
            "match": "{\"historical context\": [{\"Founding_Year\": [\"year\"]}, {\"Past_Owners\": [\"owner_name\", \"acquisition_year\"]}, {\"Founding_Year\": [\"year\"], \"Past_Owners\": [\"owner_name\", \"acquisition_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"historical context\" refers to the schema \"Founding_Year\".\"year\"",
        "clear_ambiguity": "{\"historical context\": {\"Founding_Year\": [\"year\"]}}",
        "gold_query": "SELECT hf.name , hc.year FROM Healthcare_Facilities hf JOIN Founding_Year hc ON hf.founding_id = hc.id"
    },
    {
        "index": 994,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2tabs_location/vague_2tabs_location.sqlite",
        "question": "What is the location of library A?",
        "schema_without_content": "Building_Name : id, name, address | University : id, university_name, website | Libraries : id, library_name, building_id, university_id | Students : id, student_name, birthdate, major | Buildings : id, building_type, capacity, address | Classrooms : id, classroom_number, building_id",
        "schema_with_content": "Building_Name : id (1, 2), name ('Building A', 'Building B'), address ('456 Elm St', '123 Main St') | University : id (1), university_name ('University of Example'), website ('http://www.example.com/univ') | Libraries : id (3, 2, 1), library_name ('Library D', 'Library A', 'Library C'), building_id (2, 1, 2), university_id (1, 1, 2) | Students : id (2, 5, 4), student_name ('John Doe', 'Mike Johnson', 'Jane Smith'), birthdate ('2002-08-15', '2003-10-20', '2004-11-25'), major ('English Literature', 'Computer Science', 'Mathematics') | Buildings : id (2, 1), building_type ('Engineering Building', 'Administration Building'), capacity (500, 1000), address ('456 Elm St', '123 Main St') | Classrooms : id (2, 4, 5), classroom_number (102, 105, 101), building_id (2, 1, 1)",
        "ambiguous_queries": [
            "select name from Libraries lb inner join Building_Name lc on lb.building_id = lc.id where lb.library_name = 'Library A';",
            "select university_name from Libraries lb inner join University lc on lb.university_id = lc.id where lb.library_name = 'Library A';",
            "select university_name, name from Libraries lb inner join Building_Name lc on lb.building_id = lc.id join University un on lb.university_id = un.id where lb.library_name = 'Library A';"
        ],
        "gold_ambiguity": {
            "match": "{\"location\": [{\"Libraries\": [\"name\"]}, {\"Libraries\": [\"university_name\"]}, {\"Libraries\": [\"name\", \"university_name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"location\" refers to the schema \"Libraries\".\"university_name\"",
        "clear_ambiguity": "{\"location\": {\"Libraries\": [\"university_name\"]}}",
        "gold_query": "select university_name from Libraries lb inner join University lc on lb.university_id = lc.id where lb.library_name = 'Library A';"
    },
    {
        "index": 995,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_curriculum_topics/vague_2cols_curriculum_topics.sqlite",
        "question": "What's the curriculum topic for Math 101?",
        "schema_without_content": "Courses : CourseID, Core_Concepts, Advanced_Topics, CourseName, TeachersName | Enrollment : EnrollmentID, StudentID, CourseID | Students : StudentID, FirstName, LastName, DateOfBirth, Address | Grades : GradeID, EnrollmentID, Grade, Comments | Attendance : AttendenceID, EnrollmentID, NumberOfDaysPresent, TotalNumberOfClasses, ExcusedAbsences, UnexcusedAbsences",
        "schema_with_content": "Courses : CourseID (1, 2), Core_Concepts ('English Literature', 'Introduction to Math'), Advanced_Topics ('Poetry and Fiction', 'Calculus and Probability'), CourseName ('Engl 101', 'Math 101'), TeachersName ('Mrs. Williams', 'Mr. Johnson') | Enrollment : EnrollmentID (), StudentID (), CourseID () | Students : StudentID (2, 1), FirstName ('Jane', 'John'), LastName ('Smith', 'Doe'), DateOfBirth ('1990-08-30', '1992-06-07'), Address ('456 Elm St', '123 Main St') | Grades : GradeID (3, 2, 1), EnrollmentID (1, 2, 1), Grade ('B+', 'A+', 'A-'), Comments ('Improved a lot over the semester.', 'Excellent work on projects.', 'Great effort on final exam.') | Attendance : AttendenceID (2, 1), EnrollmentID (1, 2), NumberOfDaysPresent (22, 20), TotalNumberOfClasses (25, 25), ExcusedAbsences (2, 1), UnexcusedAbsences (0, 1)",
        "ambiguous_queries": [
            "SELECT Core_Concepts FROM Courses WHERE CourseName='Math 101'",
            "SELECT Advanced_Topics FROM Courses WHERE CourseName='Math 101'",
            "SELECT Core_Concepts, Advanced_Topics FROM Courses WHERE CourseName='Math 101'"
        ],
        "gold_ambiguity": {
            "match": "{\"curriculum topic\": [{\"Courses\": [\"Core_Concepts\"]}, {\"Courses\": [\"Advanced_Topics\"]}, {\"Courses\": [\"Core_Concepts\", \"Advanced_Topics\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"curriculum topic\" refers to the schema \"Courses\".\"Core_Concepts\" and \"Courses\".\"Advanced_Topics\"",
        "clear_ambiguity": "{\"curriculum topic\": {\"Courses\": [\"Core_Concepts\", \"Advanced_Topics\"]}}",
        "gold_query": "SELECT Core_Concepts, Advanced_Topics FROM Courses WHERE CourseName='Math 101'"
    },
    {
        "index": 996,
        "db_id": "Journalism",
        "ambig_type": "vague",
        "db_file": "vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
        "question": "List all the articles with their respective editor and author names.",
        "schema_without_content": "Managing_Editor : id, name, email | Copy_Editor : id, name, email | Final_Draft : id, managing_editor_id, copy_editor_id | Articles : id, title, content, author_id, reporter_id, final_draft_id | Authors : author_id, fullname | Reporters : reporter_id, fullname",
        "schema_with_content": "Managing_Editor : id (1, 2), name ('John Doe', 'Jane Smith'), email ('john@example.com', 'jane@example.com') | Copy_Editor : id (2, 1), name ('Mike Johnson', 'Emily Davis'), email ('emily@example.com', 'mike@example.com') | Final_Draft : id (1, 2), managing_editor_id (1, 2), copy_editor_id (2, 1) | Articles : id (1, 2), title ('Feature on Local Business', 'Breaking News Story'), content ('This is a news story about breaking news.', 'A feature article about a local business.'), author_id (2, 1), reporter_id (2, 1), final_draft_id (1, 2) | Authors : author_id (2, 1), fullname ('Charlie Green', 'Alice Brown') | Reporters : reporter_id (1, 2), fullname ('David Black', 'Eva White')",
        "ambiguous_queries": [
            "SELECT Articles.title, Managing_Editor.name, Authors.fullname FROM Articles JOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id JOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id JOIN Authors ON Authors.author_id = Articles.author_id",
            "SELECT Articles.title, Copy_Editor.name, Authors.fullname FROM Articles JOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id JOIN Authors ON Authors.author_id = Articles.author_id",
            "SELECT Articles.title, Managing_Editor.name, Copy_Editor.name, Authors.fullname FROM Articles JOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id JOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id JOIN Authors ON Authors.author_id = Articles.author_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
        ],
        "gold_ambiguity": {
            "match": "{\"editor\": [{\"Copy_Editor\": [\"name\"]}, {\"Managing_Editor\": [\"name\"]}, {\"Copy_Editor\": [\"name\"], \"Managing_Editor\": [\"name\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"editor\" refers to the schema \"Managing_Editor\".\"name\"",
        "clear_ambiguity": "{\"editor\": {\"Managing_Editor\": [\"name\"]}}",
        "gold_query": "SELECT Articles.title, Managing_Editor.name, Copy_Editor.name, Authors.fullname FROM Articles JOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id JOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id JOIN Authors ON Authors.author_id = Articles.author_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
    },
    {
        "index": 997,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2tabs_historical_context/vague_2tabs_historical_context.sqlite",
        "question": "show me all the employee names, position and historical context",
        "schema_without_content": "Founding_Year : id, year | Past_Owners : id, owner_name, acquisition_year | Healthcare_Facilities : id, name, address, founding_id, past_owner_id | Employees : id, employee_name, position, healthcare_facility_id | Patients : id, patient_name, age, healthcare_facility_id | Treatments : id, treatment_name, start_date, end_date, patient_id, healthcare_facility_id",
        "schema_with_content": "Founding_Year : id (1, 2, 3), year (2003, 1978, 1992) | Past_Owners : id (2, 4, 3), owner_name ('Owner C', 'Owner A', 'Owner E'), acquisition_year (2020, 2015, 2010) | Healthcare_Facilities : id (5, 2, 1), name ('Facility 1', 'Facility 2', 'Facility 5'), address ('Address 3', 'Address 2', 'Address 5'), founding_id (3, 4, 2), past_owner_id (2, 1, 4) | Employees : id (1, 3, 2), employee_name ('Emp 3', 'Emp 5', 'Emp 4'), position ('Nurse', 'Doctor', 'Housekeeper'), healthcare_facility_id (1, 1, 2) | Patients : id (1, 4, 5), patient_name ('Patient 1', 'Patient 3', 'Patient 5'), age (25, 45, 30), healthcare_facility_id (1, 1, 3) | Treatments : id (4, 5, 2), treatment_name ('Checkup', 'Physiotherapy', 'Medication'), start_date ('2022-01-01', '2022-03-01', '2022-02-01'), end_date ('2022-02-28', '2022-01-31', '2022-03-01'), patient_id (4, 1, 3), healthcare_facility_id (1, 1, 3)",
        "ambiguous_queries": [
            "SELECT Employees.employee_name, Employees.position, Founding_Year.year FROM Employees JOIN Healthcare_Facilities ON Employees.healthcare_facility_id =Healthcare_Facilities.id JOIN Founding_Year ON Healthcare_Facilities.founding_id = Founding_Year.id",
            "SELECT Employees.employee_name, Employees.position, Past_Owners.owner_name, Past_Owners.acquisition_year FROM Employees JOIN Healthcare_Facilities ON Employees.healthcare_facility_id =Healthcare_Facilities.id JOIN Past_Owners ON Healthcare_Facilities.Past_Owner_id = Past_Owners.id",
            "SELECT Employees.employee_name, Employees.position, Founding_Year.year, Past_Owners.owner_name, Past_Owners.acquisition_year FROM Employees JOIN Healthcare_Facilities ON Employees.healthcare_facility_id =Healthcare_Facilities.id JOIN Founding_Year ON Healthcare_Facilities.founding_id = Founding_Year.id JOIN Past_Owners ON Healthcare_Facilities.Past_Owner_id = Past_Owners.id"
        ],
        "gold_ambiguity": {
            "match": "{\"historical context\": [{\"Founding_Year\": [\"year\"]}, {\"Past_Owners\": [\"owner_name\", \"acquisition_year\"]}, {\"Founding_Year\": [\"year\"], \"Past_Owners\": [\"owner_name\", \"acquisition_year\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"historical context\" refers to the schema \"Past_Owners\".\"owner_name\" and \"Past_Owners\".\"acquisition_year\"",
        "clear_ambiguity": "{\"historical context\": {\"Past_Owners\": [\"owner_name\", \"acquisition_year\"]}}",
        "gold_query": "SELECT Employees.employee_name, Employees.position, Founding_Year.year, Past_Owners.owner_name, Past_Owners.acquisition_year FROM Employees JOIN Healthcare_Facilities ON Employees.healthcare_facility_id =Healthcare_Facilities.id JOIN Founding_Year ON Healthcare_Facilities.founding_id = Founding_Year.id JOIN Past_Owners ON Healthcare_Facilities.Past_Owner_id = Past_Owners.id"
    },
    {
        "index": 998,
        "db_id": "Healthcare",
        "ambig_type": "vague",
        "db_file": "vague/Healthcare/vague_2cols_location/vague_2cols_location.sqlite",
        "question": "What're the locations of all hospitals?",
        "schema_without_content": "Patients : patient_id, first_name, last_name, birthdate, city, state | Doctors : doctor_id, first_name, last_name, specialty, hospital_id | Hospitals : hospital_id, name, phone_number, city, state | Appointments : appointment_id, patient_id, doctor_id, date",
        "schema_with_content": "Patients : patient_id (5, 2, 3), first_name ('William', 'Jane', 'Michael'), last_name ('Doe', 'Black', 'Smith'), birthdate ('2000-08-30', '2001-07-03', '1998-11-12'), city ('Phoenix', 'Los Angeles', 'Houston'), state ('TX', 'AZ', 'IL') | Doctors : doctor_id (), first_name (), last_name (), specialty (), hospital_id () | Hospitals : hospital_id (1, 2, 4), name ('Eastern Seaboard University', \"St. Mary's General\", 'South Coast Community'), phone_number ('987-654-3210', '111-222-3333', '444-444-4444'), city ('Fresno', 'Boston', 'Portland'), state ('CA', 'SF', 'MA') | Appointments : appointment_id (), patient_id (), doctor_id (), date ()",
        "ambiguous_queries": [
            "SELECT Hospitals.city FROM Hospitals;",
            "SELECT Hospitals.state FROM Hospitals;",
            "SELECT Hospitals.city, state FROM Hospitals;"
        ],
        "gold_ambiguity": {
            "match": "{\"locations\": [{\"Hospitals\": [\"city\"]}, {\"Hospitals\": [\"state\"]}, {\"Hospitals\": [\"city\", \"state\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"locations\" refers to the schema \"Hospitals\".\"city\" and \"Hospitals\".\"state\"",
        "clear_ambiguity": "{\"locations\": {\"Hospitals\": [\"city\", \"state\"]}}",
        "gold_query": "SELECT Hospitals.city, state FROM Hospitals;"
    },
    {
        "index": 999,
        "db_id": "Student",
        "ambig_type": "vague",
        "db_file": "vague/Student/vague_2cols_offering_department/vague_2cols_offering_department.sqlite",
        "question": "Show the number of credits that students from each offering department completed and did not fail for the year 2021.",
        "schema_without_content": "Students : id, first_name, last_name, email, phone_number, college, university | Colleges : id, name, location | Universities : id, name, city, state, country | CourseEnrollments : student_id, course_id, semester, year, grade | Courses : id, title, description, credits | Professors : id, first_name, last_name, department, office_location",
        "schema_with_content": "Students : id (1, 2), first_name ('Jane', 'John'), last_name ('Smith', 'Doe'), email ('jane.smith@example.com', 'john.doe@example.com'), phone_number ('555-123-4567', '555-987-6543'), college ('Mathematics', 'Computer Science'), university ('University of California', 'Stanford University') | Colleges : id (1, 2), name ('Computer Science', 'Mathematics'), location ('Palo Alto', 'San Francisco') | Universities : id (1, 2), name ('Stanford University', 'University of California'), city ('Stanford', 'Los Angeles'), state ('CA', 'CA'), country ('USA', 'USA') | CourseEnrollments : student_id (2, 1), course_id (1, 2), semester ('Fall', 'Spring'), year (2021, 2021), grade ('B+', 'A') | Courses : id (2, 1), title ('Introduction to Computer Science', 'Calculus I'), description ('An overview of computer science concepts and programming languages.', 'Basic principles of calculus including limits, derivatives, and integrals.'), credits (4, 4) | Professors : id (2, 1), first_name ('Professor', 'Dr.'), last_name ('Williams', 'Johnson'), department ('Mathematics', 'Computer Science'), office_location ('Room 456', 'Room 123')",
        "ambiguous_queries": [
            "SELECT college, SUM(C.credits) as Num_Credits FROM Students S LEFT JOIN CourseEnrollments E ON S.id = E.student_id LEFT JOIN Courses C ON C.id = E.course_id WHERE E.year = 2021 AND E.grade not like '%F%'",
            "SELECT university, SUM(C.credits) as Num_Credits FROM Students S LEFT JOIN CourseEnrollments E ON S.id = E.student_id LEFT JOIN Courses C ON C.id = E.course_id WHERE E.year = 2021 AND E.grade not like '%F%'",
            "SELECT college, university, SUM(C.credits) as Num_Credits FROM Students S LEFT JOIN CourseEnrollments E ON S.id = E.student_id LEFT JOIN Courses C ON C.id = E.course_id WHERE E.year = 2021 AND E.grade not like '%F%'"
        ],
        "gold_ambiguity": {
            "match": "{\"department\": [{\"Students\": [\"college\"]}, {\"Students\": [\"university\"]}, {\"Students\": [\"college\", \"university\"]}]}",
            "query": "{}"
        },
        "clarification_context": "\"department\" refers to the schema \"Students\".\"college\" and \"Students\".\"university\"",
        "clear_ambiguity": "{\"department\": {\"Students\": [\"college\", \"university\"]}}",
        "gold_query": "SELECT college, university, SUM(C.credits) as Num_Credits FROM Students S LEFT JOIN CourseEnrollments E ON S.id = E.student_id LEFT JOIN Courses C ON C.id = E.course_id WHERE E.year = 2021 AND E.grade not like '%F%'"
    },
    {
        "index": 1000,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_val_news_elements/attachment_2tab_val_news_elements.sqlite",
        "question": "Display all headlines and ledes written by Adam Gopnik.",
        "schema_without_content": "Headlines : id, headline, Author, publication_date, category | Ledes : id, lede, Author, publication_date, source_of_info | Articles : id, title, content, editor, publishing_status | Reporters : id, name, email, phone_number | Sources : id, name, url | Readers : id, name, email, preferred_source",
        "schema_with_content": "Headlines : id (1, 3, 4), headline ('New Laws Aimed at Curbing Crime', 'Climate Change Impact on Agriculture', 'Health Benefits of Meditation'), Author ('Jane Doe', 'Adam Gopnik', 'John Smith'), publication_date ('2023-01-01 08:00:00', '2023-01-03 10:00:00', '2023-01-04 11:00:00'), category ('Wellness', 'Environment', 'Technology') | Ledes : id (3, 1, 2), lede ('Stricter laws aim to reduce crime rates across the country.', 'Farmers struggle as climate change disrupts crop yields.', 'Meditation has been proven to have numerous health benefits, including reduced stress and anxiety.'), Author ('Emma Watson', 'Jane Doe', 'John Smith'), publication_date ('2023-01-03 10:00:00', '2023-01-02 09:00:00', '2023-01-04 11:00:00'), source_of_info ('Government Report', 'News Agency', 'Research Study') | Articles : id (1, 2, 4), title ('AI: The Future of Work', 'Mental Health in the Age of Social Media', 'Renewable Energy Solutions for a Greener Tomorrow'), content ('Discusses how AI will impact the job market and potential solutions.', 'Analyzes the effects of social media on mental health and ways to cope.', 'Delves into common cybersecurity threats and prevention strategies.'), editor ('Alice Johnson', 'Carol White', 'Bob Brown'), publishing_status ('Published', 'In Review', 'Published') | Reporters : id (2, 3, 5), name ('Emma Watson', 'Jane Doe', 'Adam Gopnik'), email ('johns@example.com', 'emmaw@example.com', 'kellyc@example.com'), phone_number ('456-789-0123', '123-456-7890', '234-567-8901') | Sources : id (2, 4, 3), name ('Forbes', 'Bloomberg', 'Wired Magazine'), url ('https://www.bloomberg.com', 'https://www.wired.com', 'https://www.economist.com') | Readers : id (2, 3, 5), name ('Samantha Williams', 'Mark Taylor', 'Tommy Anderson'), email ('lucydavis@example.com', 'marktaylor@example.com', 'alexj@example.com'), preferred_source ('Forbes', 'The Economist', 'Wired Magazine')",
        "ambiguous_queries": [
            "SELECT Headlines.headline as content FROM Headlines WHERE Headlines.Author = 'Adam Gopnik' UNION SELECT Ledes.lede as content FROM Ledes WHERE Ledes.Author = 'Adam Gopnik'",
            "SELECT Headlines.headline as content FROM Headlines UNION SELECT Ledes.lede as content FROM Ledes WHERE Ledes.Author = 'Adam Gopnik'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"headlines and ledes written by Adam Gopnik\": [\"ledes written by Adam Gopnik and headlines written by Adam Gopnik\", \"ledes written by Adam Gopnik and headlines\"]}"
        },
        "clarification_context": "\"headlines and ledes written by Adam Gopnik\" refers to \"ledes written by Adam Gopnik and headlines\"",
        "clear_ambiguity": "{\"headlines and ledes written by Adam Gopnik\": \"ledes written by Adam Gopnik and headlines\"}",
        "gold_query": "SELECT Headlines.headline as content FROM Headlines UNION SELECT Ledes.lede as content FROM Ledes WHERE Ledes.Author = 'Adam Gopnik'"
    },
    {
        "index": 1001,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_educational_materials/attachment_1tab_val_educational_materials.sqlite",
        "question": "Show textbooks and e-books with a publisher email address of pearson@email.com.",
        "schema_without_content": "Authors : AuthorID, FirstName, LastName, BirthDate, Country | Subjects : SubjectID, Name | Books : BookID, Title, PublicationYear, Pages, Educational_Materials, PublisherID | Publishers : PublisherID, CompanyName, Address, ContactNumber, Email",
        "schema_with_content": "Authors : AuthorID (1, 2), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), BirthDate ('1980-06-15', '1978-10-30'), Country ('USA', 'UK') | Subjects : SubjectID (1, 2), Name ('Mathematics', 'Physics') | Books : BookID (4, 2, 1), Title ('Computer Networking Fundamentals', 'Introduction to Mathematics', 'Advanced Physics'), PublicationYear (2021, 2020, 2020), Pages (400, 350, 450), Educational_Materials ('Textbook', 'E-Book', 'Textbook'), PublisherID (2, 1, 2) | Publishers : PublisherID (2, 1), CompanyName ('Wiley', 'Pearson'), Address ('Boston', 'New York'), ContactNumber ('+1 (555) 123-4567', '+1 (555) 987-6543'), Email ('wiley@email.com', 'pearson@email.com')",
        "ambiguous_queries": [
            "SELECT Books.Title FROM Books JOIN Publishers ON Books.PublisherID = Publishers.PublisherID WHERE (Books.Educational_Materials = 'Textbook' OR Books.Educational_Materials = 'E-Book') AND Publishers.email = 'pearson@email.com'",
            "SELECT Books.Title FROM Books JOIN Publishers ON Books.PublisherID = Publishers.PublisherID WHERE Books.Educational_Materials = 'Textbook' OR Books.Educational_Materials = 'E-Book' AND Publishers.email = 'pearson@email.com'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"textbooks and e-books with a publisher email address of pearson@email.com\": [\"e-books with a publisher email address of pearson@email.com and textbooks with a publisher email address of pearson@email.com\", \"e-books with a publisher email address of pearson@email.com and textbooks\"]}"
        },
        "clarification_context": "\"textbooks and e-books with a publisher email address of pearson@email.com\" refers to \"e-books with a publisher email address of pearson@email.com and textbooks\"",
        "clear_ambiguity": "{\"textbooks and e-books with a publisher email address of pearson@email.com\": \"e-books with a publisher email address of pearson@email.com and textbooks\"}",
        "gold_query": "SELECT Books.Title FROM Books JOIN Publishers ON Books.PublisherID = Publishers.PublisherID WHERE Books.Educational_Materials = 'Textbook' OR Books.Educational_Materials = 'E-Book' AND Publishers.email = 'pearson@email.com'"
    },
    {
        "index": 1002,
        "db_id": "Hospitality",
        "ambig_type": "attachment",
        "db_file": "attachment/Hospitality/attachment_2tab_ref_hospitality_staff/attachment_2tab_ref_hospitality_staff.sqlite",
        "question": "Show the chefs and servers who speak English.",
        "schema_without_content": "Languages : LanguageID, LanguageName | Chefs : ChefID, FirstName, LastName, LanguageID | Servers : ServerID, FirstName, LastName, LanguageID | Restaurants : RestaurantID, Name, Address, PhoneNumber, OpeningHours | ChefRestaurants : ChefID, RestaurantID, HireDate | ServerRestaurants : ServerID, RestaurantID, HireDate",
        "schema_with_content": "Languages : LanguageID (5, 3, 4), LanguageName ('Japanese', 'French', 'English') | Chefs : ChefID (2, 4, 1), FirstName ('Charlie', 'Alice', 'Bob'), LastName ('Black', 'Doe', 'Brown'), LanguageID (4, 2, 5) | Servers : ServerID (2, 1, 4), FirstName ('Lucy', 'Emma', 'David'), LastName ('Yellow', 'Orange', 'Green'), LanguageID (2, 4, 5) | Restaurants : RestaurantID (5, 4, 2), Name ('La Maison', 'Le Jardin', 'Il Ristorante'), Address ('789 Oak St', '123 Main St', '456 Elm St'), PhoneNumber ('555-1357', '555-9012', '555-5678'), OpeningHours ('Lunch & dinner only', '11am - midnight', '10am - 11pm') | ChefRestaurants : ChefID (4, 1, 5), RestaurantID (1, 2, 4), HireDate ('2021-08-01', '2020-09-01', '2021-02-01') | ServerRestaurants : ServerID (5, 2, 1), RestaurantID (2, 3, 1), HireDate ('2020-02-01', '2021-03-01', '2020-10-01')",
        "ambiguous_queries": [
            "SELECT Chefs.lastname FROM Languages JOIN Chefs ON Languages.LanguageID = Chefs.LanguageID WHERE Languages.LanguageName = 'English' UNION SELECT Servers.lastname FROM Languages JOIN Servers ON Languages.LanguageID = Servers.LanguageID WHERE Languages.LanguageName = 'English'",
            "SELECT Chefs.lastname FROM Languages JOIN Chefs ON Languages.LanguageID = Chefs.LanguageID UNION SELECT Servers.lastname FROM Languages JOIN Servers ON Languages.LanguageID = Servers.LanguageID WHERE Languages.LanguageName = 'English'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"chefs and servers who speak English\": [\"servers who speak English and chefs who speak English\", \"servers who speak English and chefs\"]}"
        },
        "clarification_context": "\"chefs and servers who speak English\" refers to \"servers who speak English and chefs who speak English\"",
        "clear_ambiguity": "{\"chefs and servers who speak English\": \"servers who speak English and chefs who speak English\"}",
        "gold_query": "SELECT Chefs.lastname FROM Languages JOIN Chefs ON Languages.LanguageID = Chefs.LanguageID WHERE Languages.LanguageName = 'English' UNION SELECT Servers.lastname FROM Languages JOIN Servers ON Languages.LanguageID = Servers.LanguageID WHERE Languages.LanguageName = 'English'"
    },
    {
        "index": 1003,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_retirement_savings/attachment_1tab_val_retirement_savings.sqlite",
        "question": "Give me all pension plan clients and brokerage account clients getting a return of 5%.",
        "schema_without_content": "Clients : ClientID, Email, FullName | Accounts : AccountID, ClientID, AccountType, Balance | Pensions : PensionID, ClientID, Retirement_Savings, Rate_of_return, ContributionAmount | Investments : InvestmentID, AccountID, Ticker, Shares, PricePerShare, TotalInvestment",
        "schema_with_content": "Clients : ClientID (1, 4, 3), Email ('john@example.com', 'carol@example.com', 'bob@example.com'), FullName ('Jane Smith', 'Carol Black', 'Alice Brown') | Accounts : AccountID (2, 3, 4), ClientID (1, 3, 2), AccountType ('Savings', 'Checking', 'Savings'), Balance (8000.0, 3000.0, 6000.0) | Pensions : PensionID (2, 1, 3), ClientID (3, 1, 2), Retirement_Savings ('Brokerage Account', 'Pension Plan', 'Pension Plan'), Rate_of_return ('7%', '5%', '8%'), ContributionAmount (1200.0, 1100.0, 900.0) | Investments : InvestmentID (4, 1, 5), AccountID (3, 1, 1), Ticker ('MSFT', 'AAPL', 'TSLA'), Shares (30, 40, 20), PricePerShare (200.0, 300.0, 1200.0), TotalInvestment (7500.0, 9000.0, 4000.0)",
        "ambiguous_queries": [
            "SELECT Clients.FullName FROM Pensions JOIN Clients ON Clients.ClientID = Pensions.ClientID WHERE (Pensions.Retirement_Savings = 'Pension Plan' OR Pensions.Retirement_Savings = 'Brokerage Account') AND Pensions.Rate_of_return = '5%'",
            "SELECT Clients.FullName FROM Pensions JOIN Clients ON Clients.ClientID = Pensions.ClientID WHERE Pensions.Retirement_Savings = 'Pension Plan' OR Pensions.Retirement_Savings = 'Brokerage Account' AND Pensions.Rate_of_return = '5%'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"pension plan clients and brokerage account clients getting a return of 5%\": [\"brokerage account clients getting a return of 5% and pension plan clients getting a return of 5%\", \"brokerage account clients getting a return of 5% and pension plan clients\"]}"
        },
        "clarification_context": "\"pension plan clients and brokerage account clients getting a return of 5%\" refers to \"brokerage account clients getting a return of 5% and pension plan clients\"",
        "clear_ambiguity": "{\"pension plan clients and brokerage account clients getting a return of 5%\": \"brokerage account clients getting a return of 5% and pension plan clients\"}",
        "gold_query": "SELECT Clients.FullName FROM Pensions JOIN Clients ON Clients.ClientID = Pensions.ClientID WHERE Pensions.Retirement_Savings = 'Pension Plan' OR Pensions.Retirement_Savings = 'Brokerage Account' AND Pensions.Rate_of_return = '5%'"
    },
    {
        "index": 1004,
        "db_id": "Hospitality",
        "ambig_type": "attachment",
        "db_file": "attachment/Hospitality/attachment_2tab_val_accommodation1/attachment_2tab_val_accommodation1.sqlite",
        "question": "Show family rooms and single rooms that cost 150.",
        "schema_without_content": "FamilySuites : SuiteID, Room, OccupancyLimit, Amenities, Price_per_night | Guests : GuestID, FullName, PhoneNumber, EmailAddress | Bookings : BookingID, CheckInDate, CheckOutDate, TotalCost, GuestID | Payments : PaymentID, Amount, DatePaid, CardType, BookingID | Reviews : ReviewID, Rating, Comment, SubmissionDate, GuestID | SingleRooms : RoomID, Room, NumberOfBeds, View, Services, Price_per_night",
        "schema_with_content": "FamilySuites : SuiteID (4, 2, 5), Room ('A123', 'D012', 'E345'), OccupancyLimit (6, 14, 12), Amenities ('Air conditioning, TV, WiFi, Safe, Bathtub', 'Air conditioning, TV, WiFi, Balcony, Microwave', 'Air conditioning, TV, WiFi, Kitchenette'), Price_per_night (300.0, 350.0, 200.0) | Guests : GuestID (3, 1, 5), FullName ('Emily Davis', 'David Brown', 'John Doe'), PhoneNumber ('+1234567890', '+1234567890', '+0987654321'), EmailAddress ('emilydavis@example.com', 'michaeljohnson@example.com', 'johndoe@example.com') | Bookings : BookingID (3, 5, 2), CheckInDate ('2023-01-15', '2023-01-10', '2023-02-01'), CheckOutDate ('2023-01-05', '2023-01-15', '2023-01-20'), TotalCost (750.0, 1000.0, 1500.0), GuestID (3, 4, 1) | Payments : PaymentID (1, 2, 5), Amount (1000, 750, 400), DatePaid ('2023-01-07', '2023-02-01', '2023-01-14'), CardType ('Visa', 'Visa', 'American Express'), BookingID (4, 2, 1) | Reviews : ReviewID (5, 2, 4), Rating (4, 3, 5), Comment ('The suite was nice but a bit expensive.', 'Great stay! Excellent service.', 'Good value for money, would return.'), SubmissionDate ('2023-01-06', '2023-02-05', '2023-02-15'), GuestID (5, 1, 3) | SingleRooms : RoomID (2, 3, 4), Room ('101', '105', '102'), NumberOfBeds (1, 1, 2), View ('Pool view', 'Garden view', 'City view'), Services ('TV, WiFi, Hairdryer, Ironing facilities', 'TV, WiFi, Air conditioning, Coffee/Tea maker', 'TV, WiFi, Air conditioning'), Price_per_night (150.0, 100.0, 130.0)",
        "ambiguous_queries": [
            "SELECT FamilySuites.Room FROM FamilySuites WHERE FamilySuites.Price_per_night = 150.0 UNION SELECT SingleRooms.Room FROM SingleRooms WHERE SingleRooms.Price_per_night = 150.0",
            "SELECT FamilySuites.Room FROM FamilySuites UNION SELECT SingleRooms.Room FROM SingleRooms WHERE SingleRooms.Price_per_night = 150.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"family rooms and single rooms that cost 150\": [\"single rooms that cost 150 and family rooms that cost 150\", \"single rooms that cost 150 and family rooms\"]}"
        },
        "clarification_context": "\"family rooms and single rooms that cost 150\" refers to \"single rooms that cost 150 and family rooms\"",
        "clear_ambiguity": "{\"family rooms and single rooms that cost 150\": \"single rooms that cost 150 and family rooms\"}",
        "gold_query": "SELECT FamilySuites.Room FROM FamilySuites UNION SELECT SingleRooms.Room FROM SingleRooms WHERE SingleRooms.Price_per_night = 150.0"
    },
    {
        "index": 1005,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_support_roles/attachment_2tab_val_support_roles.sqlite",
        "question": "Display proactive call center agents and customer service representatives.",
        "schema_without_content": "Customer_Service_Representatives : id, skills, FullName | Call_Center_Agents : id, skills, FullName | Companies : id, name, location | Postings : id, title, companyID | Applications : id, applicantId, postingId, applicationDate",
        "schema_with_content": "Customer_Service_Representatives : id (1, 2), skills ('Communication Skills', 'Proactivity'), FullName ('Jane Smith', 'John Doe') | Call_Center_Agents : id (2, 1), skills ('Multitasking', 'Proactivity'), FullName ('Mike Brown', 'Emily White') | Companies : id (1, 2), name ('ABC Corporation', 'XYZ Inc.'), location ('New York', 'Los Angeles') | Postings : id (2, 1), title ('Call Center Agent', 'CSR'), companyID (1, 2) | Applications : id (1, 2), applicantId (2, 1), postingId (2, 1), applicationDate ('2024-03-13 17:03:39', '2024-03-13 17:03:39')",
        "ambiguous_queries": [
            "SELECT Customer_Service_Representatives.FullName FROM Customer_Service_Representatives WHERE Customer_Service_Representatives.skills = 'Proactivity' UNION SELECT Call_Center_Agents.FullName FROM Call_Center_Agents WHERE Call_Center_Agents.skills = 'Proactivity'",
            "SELECT Customer_Service_Representatives.FullName FROM Customer_Service_Representatives UNION SELECT Call_Center_Agents.FullName FROM Call_Center_Agents WHERE Call_Center_Agents.skills = 'Proactivity'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"proactive call center agents and customer service representatives\": [\"proactive call center agents and proactive customer service representatives\", \"customer service representatives and customer service representatives proactive\"]}"
        },
        "clarification_context": "\"proactive call center agents and customer service representatives\" refers to \"customer service representatives and customer service representatives proactive\"",
        "clear_ambiguity": "{\"proactive call center agents and customer service representatives\": \"customer service representatives and customer service representatives proactive\"}",
        "gold_query": "SELECT Customer_Service_Representatives.FullName FROM Customer_Service_Representatives UNION SELECT Call_Center_Agents.FullName FROM Call_Center_Agents WHERE Call_Center_Agents.skills = 'Proactivity'"
    },
    {
        "index": 1006,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_ref_genre1/attachment_1tab_ref_genre1.sqlite",
        "question": "Display all 2-hour-long romantic comedies and action movies.",
        "schema_without_content": "Genres : id, name | Directors : id, first_name, last_name | Movies : id, title, release_year, genre_id, director_id | Durations : id, minutes | MovieDurations : movie_id, duration_id",
        "schema_with_content": "Genres : id (2, 1), name ('Action Movie', 'Romantic Comedy') | Directors : id (2, 1), first_name ('Jane', 'John'), last_name ('Doe', 'Smith') | Movies : id (3, 1, 2), title ('Another Action Movie', 'A Romantic Comedy', 'Yet Another Romantic Comedy'), release_year (2021, 2021, 2021), genre_id (1, 1, 2), director_id (2, 2, 1) | Durations : id (2, 1), minutes (120, 90) | MovieDurations : movie_id (1, 3, 2), duration_id (1, 2, 2)",
        "ambiguous_queries": [
            "SELECT Movies.title FROM Genres JOIN Movies ON Genres.id = Movies.genre_id JOIN MovieDurations ON Movies.id = MovieDurations.movie_id JOIN Durations ON MovieDurations.duration_id = Durations.id WHERE (Genres.name = 'Action Movie' OR Genres.name = 'Romantic Comedy') AND Durations.minutes = 120",
            "SELECT Movies.title FROM Genres JOIN Movies ON Genres.id = Movies.genre_id JOIN MovieDurations ON Movies.id = MovieDurations.movie_id JOIN Durations ON MovieDurations.duration_id = Durations.id WHERE Genres.name = 'Action Movie' OR Genres.name = 'Romantic Comedy' AND Durations.minutes = 120"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"2-hour-long romantic comedies and action movies\": [\"2-hour-long romantic comedies and 2-hour-long action movies\", \"action movies and action movies 2-hour-long\"]}"
        },
        "clarification_context": "\"2-hour-long romantic comedies and action movies\" refers to \"action movies and action movies 2-hour-long\"",
        "clear_ambiguity": "{\"2-hour-long romantic comedies and action movies\": \"action movies and action movies 2-hour-long\"}",
        "gold_query": "SELECT Movies.title FROM Genres JOIN Movies ON Genres.id = Movies.genre_id JOIN MovieDurations ON Movies.id = MovieDurations.movie_id JOIN Durations ON MovieDurations.duration_id = Durations.id WHERE Genres.name = 'Action Movie' OR Genres.name = 'Romantic Comedy' AND Durations.minutes = 120"
    },
    {
        "index": 1007,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_financial_services/attachment_2tab_val_financial_services.sqlite",
        "question": "Show currency exchange services and ATM machines near gate 10.",
        "schema_without_content": "Currency_Exchange_Service : id, Name, Location_Within_Terminal, Hours_of_Operation, Phone_Number, Email | ATM_Machine : id, Name, Location_Within_Terminal, Operating_Company, Fees, Language_Options | Food_and_Beverage : id, Name, Type, Location_Within_Terminal, Menu, Contact_Information | Shops : id, Name, Category, Location_Within_Terminal, Product_Offerings, Business_Hours | Baggage_Claim : id, Terminal, Carousel_Numbers, Flight_Info, Lost_And_Found | Parking : id, Lot_Name, Location, Daily_Rate, Weekly_Rate, Monthly_Rate",
        "schema_with_content": "Currency_Exchange_Service : id (3, 2, 4), Name ('Global Exchange', 'Thomas Cook', 'Travelex'), Location_Within_Terminal ('Main Hall', 'Near Gate 10', 'Gate C'), Hours_of_Operation ('7am - 9pm', '10am - 6pm', '24 hours'), Phone_Number ('+123456789', '+123456789', '+123456789'), Email ('thomascook@example.com', 'cambio@example.com', 'globalexchange@example.com') | ATM_Machine : id (2, 4, 3), Name ('Quick Cash', 'Express Cash', 'ATM Near Gate 10'), Location_Within_Terminal ('Arrival Area', 'Before Security', 'Between Concourse A & B'), Operating_Company ('OPQ Bank', 'EFG Bank', 'KLM Bank'), Fees (2.5, 3.5, 3.0), Language_Options ('English, Italian, Portuguese', 'English, Russian, Japanese', 'English, Dutch, Arabic') | Food_and_Beverage : id (4, 1, 2), Name ('McDonalds', 'Starbucks', 'Pizza Place'), Type ('Coffee Shop', 'Sandwich Bar', 'Fast Food'), Location_Within_Terminal ('After Security', 'Concourse E', 'Gate F'), Menu ('Burgers, Fries, Chicken Nuggets, Salads', 'Espresso, Frappuccino, Sandwiches, Pastries', 'Subs, Wraps, Salads, Cookies'), Contact_Information ('pizzaplace@example.com', 'starbucks@example.com', 'mcdonalds@example.com') | Shops : id (3, 2, 5), Name ('Electronics Shop', 'Duty Free Store', 'Pharmacy'), Category ('Technology', 'Retail', 'Fashion'), Location_Within_Terminal ('Before Security', 'Gate C', 'Between Gates A & B'), Product_Offerings ('Smartphones, Tablets, Headphones', 'Medications, Toiletries, Cosmetics', 'Perfumes, Watches, Alcohol, Tobacco'), Business_Hours ('6am - 10pm', '8am - 8pm', '7am - 9pm') | Baggage_Claim : id (4, 3, 5), Terminal ('Terminal 1', 'Terminal 3', 'Terminal 5'), Carousel_Numbers ('Carousels 6-10', 'Carousels 16-20', 'Carousels 11-15'), Flight_Info ('Flight 123', 'Flight 789', 'Flight 999'), Lost_And_Found ('Lost And Found Counter near Carousel 21', 'Lost And Found Counter near Carousel 16', 'Lost And Found Counter near Carousel 11') | Parking : id (5, 1, 2), Lot_Name ('Express Park', 'Overnight Parking', 'Valet Parking'), Location ('Designated area', 'In front of main entrance', 'Outside airport perimeter'), Daily_Rate (5.0, 8.0, 15.0), Weekly_Rate (75.0, 25.0, 50.0), Monthly_Rate (250.0, 200.0, 400.0)",
        "ambiguous_queries": [
            "SELECT Currency_Exchange_Service.name FROM Currency_Exchange_Service WHERE Currency_Exchange_Service.Location_Within_Terminal = 'Near Gate 10' UNION SELECT ATM_Machine.name FROM ATM_Machine WHERE ATM_Machine.Location_Within_Terminal = 'Near Gate 10'",
            "SELECT Currency_Exchange_Service.name FROM Currency_Exchange_Service UNION SELECT ATM_Machine.name FROM ATM_Machine WHERE ATM_Machine.Location_Within_Terminal = 'Near Gate 10'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"currency exchange services and ATM machines near gate 10\": [\"ATM machines near gate 10 and currency exchange services near gate 10\", \"ATM machines near gate 10 and currency exchange services\"]}"
        },
        "clarification_context": "\"currency exchange services and ATM machines near gate 10\" refers to \"ATM machines near gate 10 and currency exchange services\"",
        "clear_ambiguity": "{\"currency exchange services and ATM machines near gate 10\": \"ATM machines near gate 10 and currency exchange services\"}",
        "gold_query": "SELECT Currency_Exchange_Service.name FROM Currency_Exchange_Service UNION SELECT ATM_Machine.name FROM ATM_Machine WHERE ATM_Machine.Location_Within_Terminal = 'Near Gate 10'"
    },
    {
        "index": 1008,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_ref_aviation_jobs/attachment_2tab_ref_aviation_jobs.sqlite",
        "question": "Display the flight attendants and pilots from New Horizons Aviation.",
        "schema_without_content": "Training_Center : ID, Name | Flight_Attendants : ID, Name, Age, Experience, HireDate, Training_Center_ID | Pilots : ID, Name, Age, Experience, LicenseNumber, Training_Center_ID | Aircrafts : ID, Type, Model, Capacity | Flights : ID, DepartureTime, ArrivalTime, OriginCity, DestinationCity, Aircraft_ID | Assignments : ID, Flight_ID, Pilot_ID, CoPilot_ID",
        "schema_with_content": "Training_Center : ID (2, 1), Name ('Aviation Academ', 'New Horizons Aviation') | Flight_Attendants : ID (2, 1, 3), Name ('Emily Davis', 'John Doe', 'Michael Johnson'), Age (28, 29, 30), Experience (2, 5, 4), HireDate ('2017-10-10', '2018-08-15', '2019-06-01'), Training_Center_ID (1, 2, 2) | Pilots : ID (1, 3, 4), Name ('David Brown', 'Daniel Wilson', 'Karen Miller'), Age (31, 32, 38), Experience (7, 6, 8), LicenseNumber ('LLBA5678E', 'LBAA1234C', 'LAAB3456D'), Training_Center_ID (2, 2, 1) | Aircrafts : ID (2, 1, 3), Type ('Cargo', 'Passenger', 'Private Jet'), Model ('MD-11', 'Gulfstream V', 'Boing 777'), Capacity (300, 100, 15) | Flights : ID (2, 1, 3), DepartureTime ('2023-02-01 10:00:00', '2023-04-01 09:00:00', '2023-01-01 08:00:00'), ArrivalTime ('2023-03-01 16:00:00', '2023-04-01 13:00:00', '2023-01-01 12:00:00'), OriginCity ('Houston', 'Los Angeles', 'Miami'), DestinationCity ('Denver', 'Chicago', 'Seattle'), Aircraft_ID (2, 2, 1) | Assignments : ID (3, 4, 2), Flight_ID (4, 3, 1), Pilot_ID (1, 1, 3), CoPilot_ID (4, 2, 4)",
        "ambiguous_queries": [
            "SELECT Flight_Attendants.Name FROM Training_Center JOIN Flight_Attendants ON Training_Center.ID = Flight_Attendants.Training_Center_ID WHERE Training_Center.Name = 'New Horizons Aviation' UNION SELECT Pilots.Name FROM Training_Center JOIN Pilots ON Training_Center.ID = Pilots.Training_Center_ID WHERE Training_Center.Name = 'New Horizons Aviation'",
            "SELECT Flight_Attendants.Name FROM Training_Center JOIN Flight_Attendants ON Training_Center.ID = Flight_Attendants.Training_Center_ID UNION SELECT Pilots.Name FROM Training_Center JOIN Pilots ON Training_Center.ID = Pilots.Training_Center_ID WHERE Training_Center.Name = 'New Horizons Aviation'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"flight attendants and pilots from New Horizons Aviation\": [\"pilots from New Horizons Aviation and flight attendants from New Horizons Aviation\", \"pilots from New Horizons Aviation and flight attendants\"]}"
        },
        "clarification_context": "\"flight attendants and pilots from New Horizons Aviation\" refers to \"pilots from New Horizons Aviation and flight attendants\"",
        "clear_ambiguity": "{\"flight attendants and pilots from New Horizons Aviation\": \"pilots from New Horizons Aviation and flight attendants\"}",
        "gold_query": "SELECT Flight_Attendants.Name FROM Training_Center JOIN Flight_Attendants ON Training_Center.ID = Flight_Attendants.Training_Center_ID UNION SELECT Pilots.Name FROM Training_Center JOIN Pilots ON Training_Center.ID = Pilots.Training_Center_ID WHERE Training_Center.Name = 'New Horizons Aviation'"
    },
    {
        "index": 1009,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_narrative_form/attachment_1tab_ref_narrative_form.sqlite",
        "question": "Show autobiographies and historical accounts from the 19th century.",
        "schema_without_content": "NarrativeForms : id, Narrative_Form | Epochs : id, Epoch | Authors : id, Name, Birthdate, Deathdate | Narratives : id, narrative_form_id, epoch_id, title, publication_year, author_id",
        "schema_with_content": "NarrativeForms : id (2, 1), Narrative_Form ('Historical Account', 'Autobiography') | Epochs : id (1, 2), Epoch ('20th Century', '19th Century') | Authors : id (3, 2, 1), Name ('Author A', 'Author B', 'Author C'), Birthdate ('1930-12-10', '1925-08-15', '1874-03-16'), Deathdate ('2005-03-07', '1989-05-25') | Narratives : id (6, 1, 4), narrative_form_id (3, 4, 2), epoch_id (3, 1, 4), title ('Another Historical Event', 'My Life Story', 'Random Thoughts'), publication_year (2003, 2008, 2011), author_id (3, 1, 2)",
        "ambiguous_queries": [
            "SELECT Narratives.title FROM NarrativeForms JOIN Narratives ON NarrativeForms.id = Narratives.narrative_form_id JOIN Epochs ON Narratives.epoch_id = Epochs.id WHERE (NarrativeForms.Narrative_Form = 'Autobiography' OR NarrativeForms.Narrative_Form = 'Historical Account') AND Epochs.Epoch = '19th Century'",
            "SELECT Narratives.title FROM NarrativeForms JOIN Narratives ON NarrativeForms.id = Narratives.narrative_form_id JOIN Epochs ON Narratives.epoch_id = Epochs.id WHERE NarrativeForms.Narrative_Form = 'Autobiography' OR NarrativeForms.Narrative_Form = 'Historical Account' AND Epochs.Epoch = '19th Century'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"autobiographies and historical accounts from the 19th century\": [\"historical accounts from the 19th century and autobiographies from the 19th century\", \"historical accounts from the 19th century and autobiographies\"]}"
        },
        "clarification_context": "\"autobiographies and historical accounts from the 19th century\" refers to \"historical accounts from the 19th century and autobiographies from the 19th century\"",
        "clear_ambiguity": "{\"autobiographies and historical accounts from the 19th century\": \"historical accounts from the 19th century and autobiographies from the 19th century\"}",
        "gold_query": "SELECT Narratives.title FROM NarrativeForms JOIN Narratives ON NarrativeForms.id = Narratives.narrative_form_id JOIN Epochs ON Narratives.epoch_id = Epochs.id WHERE (NarrativeForms.Narrative_Form = 'Autobiography' OR NarrativeForms.Narrative_Form = 'Historical Account') AND Epochs.Epoch = '19th Century'"
    },
    {
        "index": 1010,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
        "question": "Show me all alliance airlines and independent carriers with flights using the Airbus A320.",
        "schema_without_content": "Airports : id, name, city, country, latitude, longitude | Airlines : id, airline_name, type_of_alliance, home_airport_id | Flights : flight_number, departure_time, arrival_time, airline_id, aircraft_model, source_airport_id, destination_airport_id | Pilots : pilot_license_number, first_name, last_name, date_of_birth, rating_level | Assignments : assignment_id, flight_number, pilot_license_number",
        "schema_with_content": "Airports : id (5, 4, 3), name ('Heathrow Airport', 'Los Angeles International', 'Tokyo Haneda'), city ('London', 'Dubai', 'Tokyo'), country ('UK', 'Japan', 'UAE'), latitude (35.601194, 40.641987, 25.259648), longitude (-118.405889, -0.461866, 55.285619) | Airlines : id (3, 5, 2), airline_name ('Oceanic Flyers', 'Budget Airlines', 'Global Travellers'), type_of_alliance ('Independent Carrier', 'Independent Carrier', 'Airline Alliance'), home_airport_id (5, 2, 1) | Flights : flight_number (5, 1, 3), departure_time ('2022-01-01 12:00:00', '2022-01-03 11:00:00', '2022-01-02 08:00:00'), arrival_time ('2022-01-01 17:00:00', '2022-01-03 16:00:00', '2022-01-01 14:00:00'), airline_id (1, 3, 4), aircraft_model ('Airbus A320', 'Airbus A320', 'Airbus A320'), source_airport_id (4, 5, 1), destination_airport_id (1, 4, 5) | Pilots : pilot_license_number (3, 1, 2), first_name ('John', 'Alice', 'Bob'), last_name ('Wright', 'Johnson', 'Doe'), date_of_birth ('1992-03-13', '1990-01-01', '1989-02-12'), rating_level ('A', 'A', 'B') | Assignments : assignment_id (2, 1, 5), flight_number (2, 1, 3), pilot_license_number (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Airlines.airline_name FROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id WHERE (Airlines.type_of_alliance = 'Airline Alliance' OR Airlines.type_of_alliance = 'Independent Carrier') AND Flights.aircraft_model = 'Airbus A320'",
            "SELECT Airlines.airline_name FROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id WHERE Airlines.type_of_alliance = 'Airline Alliance' OR Airlines.type_of_alliance = 'Independent Carrier' AND Flights.aircraft_model = 'Airbus A320'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"alliance airlines and independent carriers with flights using the Airbus A320\": [\"independent carriers with flights using the Airbus A320 and alliance airlines with flights using the Airbus A320\", \"independent carriers with flights using the Airbus A320 and alliance airlines\"]}"
        },
        "clarification_context": "\"alliance airlines and independent carriers with flights using the Airbus A320\" refers to \"independent carriers with flights using the Airbus A320 and alliance airlines with flights using the Airbus A320\"",
        "clear_ambiguity": "{\"alliance airlines and independent carriers with flights using the Airbus A320\": \"independent carriers with flights using the Airbus A320 and alliance airlines with flights using the Airbus A320\"}",
        "gold_query": "SELECT Airlines.airline_name FROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id WHERE (Airlines.type_of_alliance = 'Airline Alliance' OR Airlines.type_of_alliance = 'Independent Carrier') AND Flights.aircraft_model = 'Airbus A320'"
    },
    {
        "index": 1011,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_val_academic_courses/attachment_2tab_val_academic_courses.sqlite",
        "question": "Display engineering classes and design classes with projects related to sustainability.",
        "schema_without_content": "Engineering_Class : id, Name, Age, Grade, Projects | Design_Class : id, Name, Age, Skills, Projects | Subjects : id, Name, Teacher, Classroom | Students : id, FirstName, LastName, DateOfBirth, Email | Parents : id, FullName, PhoneNumber, Address | School : id, Name, Location, NumberOfStudents, Principal",
        "schema_with_content": "Engineering_Class : id (2, 3, 1), Name ('David', 'Carol', 'Bob'), Age (23, 20, 21), Grade (3.7, 3.9, 3.6), Projects ('Autonomous Vehicle Research', 'Smart City Initiative', 'Sustainability Project') | Design_Class : id (4, 3, 1), Name ('Grace', 'Hannah', 'Eve'), Age (22, 21, 20), Skills ('Graphic Design, Photoshop', 'Web Design, HTML/CSS', 'Illustrator, InDesign'), Projects ('Urban Planning Proposal', 'Green Building Design', 'Renewable Energy Solutions') | Subjects : id (1, 5, 3), Name ('Chemistry', 'Computer Science', 'Biology'), Teacher ('Ms. Davis', 'Mr. Smith', 'Professor Garcia'), Classroom ('Room D104', 'Room A101', 'Room C103') | Students : id (2, 4, 1), FirstName ('Jill', 'Jim', 'Jane'), LastName ('Davis', 'Johnson', 'Smith'), DateOfBirth ('2003-04-04', '2000-01-01', '2002-03-03'), Email ('jill.davis@example.com', 'jane.smith@example.com', 'jim.williams@example.com') | Parents : id (2, 4, 1), FullName ('Anne Smith', 'Tom Doe', 'Sarah Williams'), PhoneNumber ('555-123-4567', '555-987-6543', '555-333-4444'), Address ('789 Pine St.', '987 Elm St.', '135 Maple Dr.') | School : id (4, 2, 1), Name ('Springfield High School', 'Lincoln Elementary School', 'Jefferson College'), Location ('Springfield, IL', 'Springfield, IL', 'Springfield, IL'), NumberOfStudents (1500, 1200, 300), Principal ('Principal Taylor', 'President Adams', 'Principal Johnson')",
        "ambiguous_queries": [
            "SELECT Engineering_Class.name FROM Engineering_Class WHERE Engineering_Class.Projects = 'Sustainability Project' UNION SELECT Design_Class.name FROM Design_Class WHERE Design_Class.Projects = 'Sustainability Project'",
            "SELECT Engineering_Class.name FROM Engineering_Class UNION SELECT Design_Class.name FROM Design_Class WHERE Design_Class.Projects = 'Sustainability Project'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"engineering classes and design classes with projects related to sustainability\": [\"design classes with projects related to sustainability and engineering classes with projects related to sustainability\", \"design classes with projects related to sustainability and engineering classes\"]}"
        },
        "clarification_context": "\"engineering classes and design classes with projects related to sustainability\" refers to \"design classes with projects related to sustainability and engineering classes\"",
        "clear_ambiguity": "{\"engineering classes and design classes with projects related to sustainability\": \"design classes with projects related to sustainability and engineering classes\"}",
        "gold_query": "SELECT Engineering_Class.name FROM Engineering_Class UNION SELECT Design_Class.name FROM Design_Class WHERE Design_Class.Projects = 'Sustainability Project'"
    },
    {
        "index": 1012,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_val_literary_works/attachment_2tab_val_literary_works.sqlite",
        "question": "Show novels and short stories about John Smith.",
        "schema_without_content": "Novels : id, Title, Author, Year, Genre, Character | ShortStories : id, Title, Author, Year, Theme, Character | Authors : id, Name, BirthDate, Nationality, Biography | Publishers : id, Name, EstablishedYear, Location, NumberOfEmployees",
        "schema_with_content": "Novels : id (3, 1, 5), Title ('Book4', 'Book3', 'Book2'), Author ('AuthorA', 'AuthorB', 'AuthorD'), Year (2006, 2000, 2008), Genre ('Science Fiction', 'Romance', 'Thriller'), Character ('Lisa Brown', 'David Miller', 'Robert Johnson') | ShortStories : id (2, 4, 3), Title ('Story5', 'Story4', 'Story2'), Author ('AuthorE', 'AuthorD', 'AuthorB'), Year (2001, 2003, 2005), Theme ('Tragedy', 'Drama', 'Adventure'), Character ('James White', 'Tommy Black', 'John Smith') | Authors : id (1, 5, 4), Name ('AuthorE', 'AuthorA', 'AuthorC'), BirthDate ('1974-03-03', '1970-01-01', '1976-04-04'), Nationality ('Australian', 'Irish', 'American'), Biography ('Biography of Author D', 'Biography of Author C', 'Biography of Author B') | Publishers : id (1, 3, 5), Name ('PublisherX', 'PublisherW', 'PublisherV'), EstablishedYear (1980, 2000, 2020), Location ('Toronto', 'Tokyo', 'London'), NumberOfEmployees (3000, 4000, 5000)",
        "ambiguous_queries": [
            "SELECT Novels.title FROM Novels WHERE Novels.Character = 'John Smith' UNION SELECT ShortStories.title FROM ShortStories WHERE ShortStories.Character = 'John Smith'",
            "SELECT Novels.title FROM Novels UNION SELECT ShortStories.title FROM ShortStories WHERE ShortStories.Character = 'John Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"novels and short stories about John Smith\": [\"short stories about John Smith and novels about John Smith\", \"short stories about John Smith and novels\"]}"
        },
        "clarification_context": "\"novels and short stories about John Smith\" refers to \"short stories about John Smith and novels\"",
        "clear_ambiguity": "{\"novels and short stories about John Smith\": \"short stories about John Smith and novels\"}",
        "gold_query": "SELECT Novels.title FROM Novels UNION SELECT ShortStories.title FROM ShortStories WHERE ShortStories.Character = 'John Smith'"
    },
    {
        "index": 1013,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_airport_personnel/attachment_2tab_val_airport_personnel.sqlite",
        "question": "Display the air traffic controllers and ground staff whose salary is $60,000 per year.",
        "schema_without_content": "Air_traffic_controller : id, Name, Experience, Salary, Training_Center | Ground_staff : id, Name, Experience, Salary, Role | Flight : id, Date, Time, Destination, Pilot_id | Pilots : id, Name, License_Number, Total_Flights | Runway : id, Length, Width, Location | Planes : id, Model, Registration_number, Capacity, Current_Location",
        "schema_with_content": "Air_traffic_controller : id (1, 2), Name ('Jane Smith', 'John Doe'), Experience (8, 12), Salary ('60000 per year', '70000 per year'), Training_Center ('Aviation Institute', 'ATC Academy') | Ground_staff : id (1, 2), Name ('Emma Brown', 'Mike Johnson'), Experience (5, 3), Salary ('55000 per year', '60000 per year'), Role ('Gate Agent', 'Baggage Handler') | Flight : id (1, 2), Date ('2022-01-01', '2022-01-02'), Time ('15:00:00', '10:00:00'), Destination ('New York', 'Los Angeles'), Pilot_id (1, 2) | Pilots : id (1, 2), Name ('Linda Davis', 'Tom Williams'), License_Number ('ABCD1234', 'EFGH5678'), Total_Flights (500, 300) | Runway : id (2, 1), Length (9000.0, 8000.0), Width (150.0, 140.0), Location ('Dallas/Fort Worth International Airport', \"Chicago O'Hare International Airport\") | Planes : id (2, 1), Model ('Airbus A320', 'Boeing 737'), Registration_number ('N12345', 'N67890'), Capacity (220, 200), Current_Location (1, 2)",
        "ambiguous_queries": [
            "SELECT Air_traffic_controller.name FROM Air_traffic_controller WHERE Air_traffic_controller.Salary = '60000 per year' UNION SELECT Ground_staff.name FROM Ground_staff WHERE Ground_staff.Salary = '60000 per year'",
            "SELECT Air_traffic_controller.name FROM Air_traffic_controller UNION SELECT Ground_staff.name FROM Ground_staff WHERE Ground_staff.Salary = '60000 per year'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"air traffic controllers and ground staff whose salary is $60,000 per year\": [\"ground staff whose salary is $60,000 per year and air traffic controllers whose salary is $60,000 per year\", \"ground staff whose salary is $60,000 per year and air traffic controllers\"]}"
        },
        "clarification_context": "\"air traffic controllers and ground staff whose salary is $60,000 per year\" refers to \"ground staff whose salary is $60,000 per year and air traffic controllers\"",
        "clear_ambiguity": "{\"air traffic controllers and ground staff whose salary is $60,000 per year\": \"ground staff whose salary is $60,000 per year and air traffic controllers\"}",
        "gold_query": "SELECT Air_traffic_controller.name FROM Air_traffic_controller UNION SELECT Ground_staff.name FROM Ground_staff WHERE Ground_staff.Salary = '60000 per year'"
    },
    {
        "index": 1014,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_ref_news_types/attachment_2tab_ref_news_types.sqlite",
        "question": "Provide latest news and news analysis on the Turkey-Syria Earthquakes.",
        "schema_without_content": "Authors : id, name, email | Events : eventId, eventName | Breaking_News : newsId, headline, content, authorId, eventId | News_Analysis : analysisId, title, content, authorId, eventId | Sources : sourceId, url, description, eventId | Comments : commentId, text, authorId, postType",
        "schema_with_content": "Authors : id (1, 2, 3), name ('Jane Smith', 'Emily Johnson', 'Michael Brown'), email ('michael@example.com', 'william@example.com', 'jane@example.com') | Events : eventId (4, 1, 5), eventName ('Climate Change Summit', 'Political Crisis in Europe', 'Technology Innovation Conference') | Breaking_News : newsId (5, 1, 4), headline ('Earthquake Strikes Turkey and Syria', 'Groundbreaking Technology Unveiled', 'European Political Crisis Intensifies'), content ('A powerful earthquake struck the border region between Turkey and Syria...', 'The new climate change report highlights the urgent need for action...', 'Tensions continue to rise as the political crisis in Europe deepens...'), authorId (5, 4, 2), eventId (1, 3, 5) | News_Analysis : analysisId (5, 2, 3), title ('Assessing Technological Advances in the Past Decade', 'In-Depth Analysis of Turkey–Syria Earthquakes', 'Understanding the Global Health Inequalities'), content ('This article provides an in-depth analysis of the recent earthquakes...', 'This article examines how climate change is affecting the global economy...', 'This article assesses the technological advances made over the past decade...'), authorId (4, 3, 5), eventId (6, 5, 4) | Sources : sourceId (1, 5, 3), url ('https://www.example.com/technology-innovation-conference', 'https://www.example.com/climate-change-summit', 'https://www.example.com/political-crisis-in-europe'), description ('Latest updates on the Turkey–Syria earthquakes.', 'Highlights from the Technology Innovation Conference.', 'Updates on the ongoing political crisis in Europe.'), eventId (4, 5, 3) | Comments : commentId (3, 5, 2), text ('Great job covering the earthquake!', 'Well-researched and informative article.', 'Interesting take on the political crisis.'), authorId (5, 1, 3), postType ('review', 'feedback', 'feedback')",
        "ambiguous_queries": [
            "SELECT Breaking_News.headline as title FROM Events JOIN Breaking_News ON Events.eventId = Breaking_News.eventId WHERE Events.eventName = 'Turkey–Syria Earthquakes' UNION SELECT News_Analysis.title FROM Events JOIN News_Analysis ON Events.eventId = News_Analysis.eventId WHERE Events.eventName = 'Turkey–Syria Earthquakes'",
            "SELECT Breaking_News.headline as title FROM Events JOIN Breaking_News ON Events.eventId = Breaking_News.eventId UNION SELECT News_Analysis.title FROM Events JOIN News_Analysis ON Events.eventId = News_Analysis.eventId WHERE Events.eventName = 'Turkey–Syria Earthquakes'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"news and news analysis on the Turkey-Syria Earthquakes\": [\"news analysis on the Turkey-Syria Earthquakes and news on the Turkey-Syria Earthquakes\", \"news analysis on the Turkey-Syria Earthquakes and news\"]}"
        },
        "clarification_context": "\"news and news analysis on the Turkey-Syria Earthquakes\" refers to \"news analysis on the Turkey-Syria Earthquakes and news on the Turkey-Syria Earthquakes\"",
        "clear_ambiguity": "{\"news and news analysis on the Turkey-Syria Earthquakes\": \"news analysis on the Turkey-Syria Earthquakes and news on the Turkey-Syria Earthquakes\"}",
        "gold_query": "SELECT Breaking_News.headline as title FROM Events JOIN Breaking_News ON Events.eventId = Breaking_News.eventId WHERE Events.eventName = 'Turkey–Syria Earthquakes' UNION SELECT News_Analysis.title FROM Events JOIN News_Analysis ON Events.eventId = News_Analysis.eventId WHERE Events.eventName = 'Turkey–Syria Earthquakes'"
    },
    {
        "index": 1015,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_academic_writing/attachment_1tab_val_academic_writing.sqlite",
        "question": "Give me all dissertations and thesis proposals supervised by Dr. Jane Smith.",
        "schema_without_content": "Students : StudentID, Academic_Writing, Academic_Supervisor, FullName | Courses : CourseID, Title, Department | Enrollments : EnrollmentID, StudentID, CourseID, Semester | Grades : GradeID, EnrollmentID, Grade",
        "schema_with_content": "Students : StudentID (4, 3, 2), Academic_Writing ('Thesis Proposal', 'Thesis Proposal', 'Dissertation'), Academic_Supervisor ('Dr. John Doe', 'Dr. Jane Smith', 'Dr. John Doe'), FullName ('Steve White', 'Mary Brown', 'Jane Smith') | Courses : CourseID (3, 5, 1), Title ('History', 'Mathematics', 'Physics'), Department ('Science', 'Engineering', 'Humanities') | Enrollments : EnrollmentID (3, 4, 1), StudentID (4, 5, 2), CourseID (2, 3, 4), Semester ('2023-01-01 00:00:00', '2023-01-01 00:00:00', '2023-01-01 00:00:00') | Grades : GradeID (1, 3, 4), EnrollmentID (1, 3, 2), Grade ('B', 'C', 'A')",
        "ambiguous_queries": [
            "SELECT Students.FullName FROM Students WHERE (Students.Academic_Writing = 'Dissertation' OR Students.Academic_Writing = 'Thesis Proposal') AND Students.Academic_Supervisor = 'Dr. Jane Smith'",
            "SELECT Students.FullName FROM Students WHERE Students.Academic_Writing = 'Dissertation' OR Students.Academic_Writing = 'Thesis Proposal' AND Students.Academic_Supervisor = 'Dr. Jane Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"dissertations and thesis proposals supervised by Dr. Jane Smith\": [\"thesis proposals supervised by Dr. Jane Smith and dissertations supervised by Dr. Jane Smith\", \"thesis proposals supervised by Dr. Jane Smith and dissertations\"]}"
        },
        "clarification_context": "\"dissertations and thesis proposals supervised by Dr. Jane Smith\" refers to \"thesis proposals supervised by Dr. Jane Smith and dissertations supervised by Dr. Jane Smith\"",
        "clear_ambiguity": "{\"dissertations and thesis proposals supervised by Dr. Jane Smith\": \"thesis proposals supervised by Dr. Jane Smith and dissertations supervised by Dr. Jane Smith\"}",
        "gold_query": "SELECT Students.FullName FROM Students WHERE (Students.Academic_Writing = 'Dissertation' OR Students.Academic_Writing = 'Thesis Proposal') AND Students.Academic_Supervisor = 'Dr. Jane Smith'"
    },
    {
        "index": 1016,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_ref_writer/attachment_2tab_ref_writer.sqlite",
        "question": "Show the screenwriters and playwrights from American Film Institute.",
        "schema_without_content": "Education : id, institution | Screenwriter : id, name, birthdate, nationality, educationId | Playwright : id, name, birthdate, nationality, educationId | Film_Director : id, name, birthdate, nationality, educationId",
        "schema_with_content": "Education : id (2, 1, 5), institution ('National Film and Television School', 'London Film Academy', 'New York University') | Screenwriter : id (3, 2, 4), name ('John Doe', 'Charlie White', 'Jane Smith'), birthdate ('1988-03-07', '1978-09-10', '1992-11-05'), nationality ('UK', 'USA', 'South Africa'), educationId (5, 4, 2) | Playwright : id (1, 4, 5), name ('David Black', 'Michael Gray', 'Emma Green'), birthdate ('1994-06-04', '1990-04-15', '1982-08-12'), nationality ('Canada', 'USA', 'UK'), educationId (5, 4, 1) | Film_Director : id (3, 1, 2), name ('Kevin Wright', 'Steven Davis', 'Tom Miller'), birthdate ('1993-04-12', '1992-03-24', '1985-09-21'), nationality ('USA', 'UK', 'Australia'), educationId (4, 5, 1)",
        "ambiguous_queries": [
            "SELECT Screenwriter.name FROM Education JOIN Screenwriter ON Education.id = Screenwriter.educationId WHERE Education.institution = 'American Film Institute' UNION SELECT Playwright.name FROM Education JOIN Playwright ON Education.id = Playwright.educationId WHERE Education.institution = 'American Film Institute'",
            "SELECT Screenwriter.name FROM Education JOIN Screenwriter ON Education.id = Screenwriter.educationId UNION SELECT Playwright.name FROM Education JOIN Playwright ON Education.id = Playwright.educationId WHERE Education.institution = 'American Film Institute'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"screenwriters and playwrights from American Film Institute\": [\"playwrights from American Film Institute and screenwriters from American Film Institute\", \"playwrights from American Film Institute and screenwriters\"]}"
        },
        "clarification_context": "\"screenwriters and playwrights from American Film Institute\" refers to \"playwrights from American Film Institute and screenwriters\"",
        "clear_ambiguity": "{\"screenwriters and playwrights from American Film Institute\": \"playwrights from American Film Institute and screenwriters\"}",
        "gold_query": "SELECT Screenwriter.name FROM Education JOIN Screenwriter ON Education.id = Screenwriter.educationId UNION SELECT Playwright.name FROM Education JOIN Playwright ON Education.id = Playwright.educationId WHERE Education.institution = 'American Film Institute'"
    },
    {
        "index": 1017,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_val_production_role3/attachment_2tab_val_production_role3.sqlite",
        "question": "Display stunt coordinators and fight scene coordinators with ten years of experience.",
        "schema_without_content": "ProductionHouse : HouseID, Name | Film : FilmID, Title, ReleaseYear, Budget, BoxOffice, HouseID | Actor : ActorID, FirstName, LastName, BirthDate, RoleInFilm, FilmID | Director : DirectorID, FirstName, LastName, BirthDate, DirectedFilm, FilmID | Producer : ProducerID, FirstName, LastName, BirthDate, ProducedFilm, FilmID | Stunts : StuntID, Coordinator, Experience, SceneID, FilmID | FightScenes : SceneID, Choreographer, Experience, SceneDescription, FilmID",
        "schema_with_content": "ProductionHouse : HouseID (5, 3, 2), Name ('Sunset Cinema', 'Star Studios', 'Moonlight Films') | Film : FilmID (1, 5, 2), Title ('The Dark Knight', 'Jurassic Park', 'Titanic'), ReleaseYear (2009, 1994, 1997), Budget (55000000.0, 200000000.0, 63000000.0), BoxOffice (2748000000.0, 914000000.0, 1006000000.0), HouseID (3, 2, 5) | Actor : ActorID (3, 4, 5), FirstName ('Christian', 'Leonardo', 'Tom'), LastName ('Winslet', 'L. Jackson', 'Hanks'), BirthDate ('1974-01-30', '1948-12-21', '1975-10-05'), RoleInFilm (5, 1, 2), FilmID (2, 1, 4) | Director : DirectorID (2, 4, 5), FirstName ('Christopher', 'Ron', 'Steven'), LastName ('Cameron', 'Nolan', 'Spielberg'), BirthDate ('1954-08-16', '1951-05-14', '1970-07-30'), DirectedFilm (5, 4, 3), FilmID (4, 2, 1) | Producer : ProducerID (1, 3, 5), FirstName ('Bonnie', 'Debra', 'Gary'), LastName ('Franicich', 'De Luca', 'Goetzman'), BirthDate ('1960-08-16', '1957-07-01', '1961-07-13'), ProducedFilm (1, 5, 4), FilmID (2, 1, 4) | Stunts : StuntID (1, 3, 5), Coordinator ('David', 'Mark', 'Emily'), Experience ('7 years', '5 years', '10 years'), SceneID (), FilmID (2, 5, 4) | FightScenes : SceneID (5, 4, 2), Choreographer ('Alex', 'Jackie', 'Mike'), Experience ('20 years', '5 years', '7 years'), SceneDescription ('A fight scene at an airport.', 'A fight scene in a dark alley.', 'A fight scene on a train.'), FilmID (2, 3, 1)",
        "ambiguous_queries": [
            "SELECT Stunts.Coordinator as name FROM Stunts WHERE Stunts.Experience = '10 years' UNION SELECT FightScenes.Choreographer as name FROM FightScenes WHERE FightScenes.Experience = '10 years'",
            "SELECT Stunts.Coordinator as name FROM Stunts UNION SELECT FightScenes.Choreographer as name FROM FightScenes WHERE FightScenes.Experience = '10 years'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"stunt coordinators and fight scene coordinators with ten years of experience\": [\"fight scene coordinators with ten years of experience and stunt coordinators with ten years of experience\", \"fight scene coordinators with ten years of experience and stunt coordinators\"]}"
        },
        "clarification_context": "\"stunt coordinators and fight scene coordinators with ten years of experience\" refers to \"fight scene coordinators with ten years of experience and stunt coordinators\"",
        "clear_ambiguity": "{\"stunt coordinators and fight scene coordinators with ten years of experience\": \"fight scene coordinators with ten years of experience and stunt coordinators\"}",
        "gold_query": "SELECT Stunts.Coordinator as name FROM Stunts UNION SELECT FightScenes.Choreographer as name FROM FightScenes WHERE FightScenes.Experience = '10 years'"
    },
    {
        "index": 1018,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_digital_solutions/attachment_1tab_val_digital_solutions.sqlite",
        "question": "Show mobile banking customers and internet banking customers that use biometric authentication.",
        "schema_without_content": "Customers : CustomerID, DateOfBirth, Digital_Solutions, Sign_in_Options, FullName | AccountTypes : AccountTypeID, AccountTypeName | Accounts : AccountID, CustomerID, AccountTypeID, OpenDate, Balance | Transactions : TransactionID, AccountID, Amount, Type, Date",
        "schema_with_content": "Customers : CustomerID (3, 1, 9), DateOfBirth ('2001-01-01', '2019-06-23', '1906-12-09'), Digital_Solutions ('Internet Banking Platform', 'Mobile Banking App', 'Internet Banking Platform'), Sign_in_Options ('None', 'Password', 'Biometric Authentication'), FullName ('Grace Hopper', 'John Doe', 'Charlie Banks') | AccountTypes : AccountTypeID (4, 5, 2), AccountTypeName ('Business Loan', 'Credit Card', 'Checking Account') | Accounts : AccountID (3, 2, 1), CustomerID (4, 1, 2), AccountTypeID (5, 3, 4), OpenDate ('2022-01-01', '2021-01-01', '2024-01-01'), Balance (5000.0, 2000.0, -1000.0) | Transactions : TransactionID (5, 2, 1), AccountID (1, 4, 2), Amount (-200.0, 1500.0, 800.0), Type ('Deposit', 'Loan Payment', 'Withdrawal'), Date ('2023-05-01', '2021-03-01', '2022-04-01')",
        "ambiguous_queries": [
            "SELECT Customers.FullName FROM Customers WHERE (Customers.Digital_Solutions = 'Mobile Banking App' OR Customers.Digital_Solutions = 'Internet Banking Platform') AND Customers.Sign_in_Options = 'Biometric Authentication'",
            "SELECT Customers.FullName FROM Customers WHERE Customers.Digital_Solutions = 'Mobile Banking App' OR Customers.Digital_Solutions = 'Internet Banking Platform' AND Customers.Sign_in_Options = 'Biometric Authentication'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"mobile banking customers and internet banking customers that use biometric authentication\": [\"internet banking customers that use biometric authentication and mobile banking customers that use biometric authentication\", \"internet banking customers that use biometric authentication and mobile banking customers\"]}"
        },
        "clarification_context": "\"mobile banking customers and internet banking customers that use biometric authentication\" refers to \"internet banking customers that use biometric authentication and mobile banking customers that use biometric authentication\"",
        "clear_ambiguity": "{\"mobile banking customers and internet banking customers that use biometric authentication\": \"internet banking customers that use biometric authentication and mobile banking customers that use biometric authentication\"}",
        "gold_query": "SELECT Customers.FullName FROM Customers WHERE (Customers.Digital_Solutions = 'Mobile Banking App' OR Customers.Digital_Solutions = 'Internet Banking Platform') AND Customers.Sign_in_Options = 'Biometric Authentication'"
    },
    {
        "index": 1019,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_insurance_product/attachment_1tab_val_insurance_product.sqlite",
        "question": "Give me start dates of life insurances and annuities products with a payout of 50,000.",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, Email, PhoneNumber | Accounts : AccountID, Balance, InterestRate, DateOpened, CustomerID | Insurance_Products : ProductID, PolicyHolderID, ProductType, Payout, StartDate, EndDate | Transactions : TransactionID, Amount, Type, Date, AccountID | Loans : LoanID, Principal, InterestRate, TermYears, MonthlyPayment, ApprovalDate, AccountID",
        "schema_with_content": "Customers : CustomerID (5, 1, 2), FirstName ('Bob', 'John', 'Charlie'), LastName ('Robertson', 'Wonderland', 'Brown'), Email ('alice@example.com', 'john@example.com', 'jane@example.com'), PhoneNumber ('+246801753', '+987654321', '+123456789') | Accounts : AccountID (5, 2, 3), Balance (5000.0, 1000.0, 4000.0), InterestRate (2.0, 2.5, 3.0), DateOpened ('2020-01-03', '2020-01-01', '2020-01-04'), CustomerID (1, 2, 5) | Insurance_Products : ProductID (3, 1, 4), PolicyHolderID (3, 1, 4), ProductType ('Life Insurance', 'Health Insurance', 'Life Insurance'), Payout (50000.0, 100000.0, 50000.0), StartDate ('2020-01-02', '2020-01-03', '2020-01-04'), EndDate ('2030-01-04', '2030-01-03', '2030-01-02') | Transactions : TransactionID (1, 2, 3), Amount (-500.0, -200.0, 200.0), Type ('Deposit', 'Deposit', 'Withdrawal'), Date ('2020-01-02', '2020-01-05', '2020-01-03'), AccountID (1, 3, 5) | Loans : LoanID (4, 3, 2), Principal (20000.0, 25000.0, 30000.0), InterestRate (5.0, 4.5, 5.5), TermYears (25, 30, 25), MonthlyPayment (650.0, 450.0, 750.0), ApprovalDate (), AccountID (1, 5, 2)",
        "ambiguous_queries": [
            "SELECT Insurance_Products.StartDate FROM Insurance_Products WHERE (Insurance_Products.ProductType = 'Life Insurance' OR Insurance_Products.ProductType = 'Annuity') AND Insurance_Products.Payout = 50000.0",
            "SELECT Insurance_Products.StartDate FROM Insurance_Products WHERE Insurance_Products.ProductType = 'Life Insurance' OR Insurance_Products.ProductType = 'Annuity' AND Insurance_Products.Payout = 50000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"life insurances and annuities products with a payout of 50,000\": [\"annuities products with a payout of 50,000 and life insurances with a payout of 50,000\", \"annuities products with a payout of 50,000 and life insurances\"]}"
        },
        "clarification_context": "\"life insurances and annuities products with a payout of 50,000\" refers to \"annuities products with a payout of 50,000 and life insurances with a payout of 50,000\"",
        "clear_ambiguity": "{\"life insurances and annuities products with a payout of 50,000\": \"annuities products with a payout of 50,000 and life insurances with a payout of 50,000\"}",
        "gold_query": "SELECT Insurance_Products.StartDate FROM Insurance_Products WHERE (Insurance_Products.ProductType = 'Life Insurance' OR Insurance_Products.ProductType = 'Annuity') AND Insurance_Products.Payout = 50000.0"
    },
    {
        "index": 1020,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_tv/attachment_1tab_val_tv.sqlite",
        "question": "Show documentaries and mini-series that have 7 episodes.",
        "schema_without_content": "Genre : id, name | TvShow : id, title, tv, number_of_episodes, release_date, genre_id | CastMember : id, first_name, last_name, birth_date | ShowCast : show_id, member_id, role, appearance_start_year, appearance_end_year",
        "schema_with_content": "Genre : id (4, 7, 6), name ('Crime', 'Documentary', 'Comedy') | TvShow : id (2, 6, 3), title ('The Witcher', 'Human Planet', 'Planet Earth'), tv ('Documentary Series', 'Mini-Series', 'Mini-Series'), number_of_episodes (7, 8, 8), release_date ('2017-02-19', '2008-01-20', '2009-01-09'), genre_id (3, 1, 4) | CastMember : id (6, 1, 2), first_name ('Lena', 'Kit', 'Jason'), last_name ('Momoa', 'Coyote', 'Clarke'), birth_date ('1973-10-03', '1979-08-01', '1986-10-16') | ShowCast : show_id (1, 5, 6), member_id (4, 1, 5), role ('Narrator', 'Walter White', 'Ned Stark'), appearance_start_year (2019, 2006, 2011), appearance_end_year (2019, 2012, 2014)",
        "ambiguous_queries": [
            "SELECT TvShow.title FROM TvShow WHERE (TvShow.tv = 'Documentary Series' OR TvShow.tv = 'Mini-Series') AND TvShow.number_of_episodes = 7",
            "SELECT TvShow.title FROM TvShow WHERE TvShow.tv = 'Documentary Series' OR TvShow.tv = 'Mini-Series' AND TvShow.number_of_episodes = 7"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"documentaries and mini-series that have 7 episodes\": [\"mini-series that have 7 episodes and documentaries that have 7 episodes\", \"mini-series that have 7 episodes and documentaries\"]}"
        },
        "clarification_context": "\"documentaries and mini-series that have 7 episodes\" refers to \"mini-series that have 7 episodes and documentaries that have 7 episodes\"",
        "clear_ambiguity": "{\"documentaries and mini-series that have 7 episodes\": \"mini-series that have 7 episodes and documentaries that have 7 episodes\"}",
        "gold_query": "SELECT TvShow.title FROM TvShow WHERE (TvShow.tv = 'Documentary Series' OR TvShow.tv = 'Mini-Series') AND TvShow.number_of_episodes = 7"
    },
    {
        "index": 1021,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_airport_services/attachment_2tab_val_airport_services.sqlite",
        "question": "Who lost something or wrote a complaint on January 5, 2024?",
        "schema_without_content": "Lost_Property : ID, Item, FoundAt, Description, Date, Owner | Customer_Complaints : ComplaintID, CustomerName, FlightNumber, Issue, Resolution, Date | Flights : FlightNumber, Airline, DepartureTime, ArrivalTime, OriginAirport, DestinationAirport | Aircraft : Registration, Model, Manufacturer, YearOfManufacture, SeatCapacity | Employees : EmployeeID, FirstName, LastName, JobTitle, HireDate",
        "schema_with_content": "Lost_Property : ID (1, 2), Item ('Wristwatch', 'Mobile Phone'), FoundAt ('Food Court', 'Gate A1'), Description ('iPhone X with a cracked screen', 'Silver wristwatch with black leather strap'), Date ('December 31, 2023', 'January 5, 2024'), Owner ('John Brown', 'Max Black') | Customer_Complaints : ComplaintID (1, 2), CustomerName ('Jane Smith', 'John Doe'), FlightNumber ('DL456', 'AA123'), Issue ('Luggage mishandled', 'Late boarding'), Resolution ('Delivered luggage within two hours', 'Apologized and provided meal voucher'), Date ('January 5, 2024', 'December 30, 2023') | Flights : FlightNumber ('AA123', 'DL456'), Airline ('Delta Airlines', 'American Airlines'), DepartureTime ('09:00 AM', '08:00 AM'), ArrivalTime ('11:00 AM', '10:00 AM'), OriginAirport ('ATL', 'LAX'), DestinationAirport ('ORD', 'MCO') | Aircraft : Registration ('N123AB', 'N345CD'), Model ('Airbus A320', 'Boeing 737-800'), Manufacturer ('Boeing', 'Airbus'), YearOfManufacture (2012, 2010), SeatCapacity (160, 180) | Employees : EmployeeID (1, 2), FirstName ('Alice', 'Bob'), LastName ('Johnson', 'Smith'), JobTitle ('Security Officer', 'Pilot'), HireDate ('September 1, 2022', 'October 1, 2022')",
        "ambiguous_queries": [
            "SELECT Lost_Property.Owner as FullName FROM Lost_Property WHERE Lost_Property.Date = 'January 5, 2024' UNION SELECT Customer_Complaints.CustomerName as FullName FROM Customer_Complaints WHERE Customer_Complaints.Date = 'January 5, 2024'",
            "SELECT Lost_Property.Owner as FullName FROM Lost_Property UNION SELECT Customer_Complaints.CustomerName as FullName FROM Customer_Complaints WHERE Customer_Complaints.Date = 'January 5, 2024'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"lost something or wrote a complaint on January 5, 2024\": [\"wrote a complaint on January 5, 2024 or lost something on January 5, 2024\", \"wrote a complaint on January 5, 2024 or lost something\"]}"
        },
        "clarification_context": "\"lost something or wrote a complaint on January 5, 2024\" refers to \"wrote a complaint on January 5, 2024 or lost something on January 5, 2024\"",
        "clear_ambiguity": "{\"lost something or wrote a complaint on January 5, 2024\": \"wrote a complaint on January 5, 2024 or lost something on January 5, 2024\"}",
        "gold_query": "SELECT Lost_Property.Owner as FullName FROM Lost_Property WHERE Lost_Property.Date = 'January 5, 2024' UNION SELECT Customer_Complaints.CustomerName as FullName FROM Customer_Complaints WHERE Customer_Complaints.Date = 'January 5, 2024'"
    },
    {
        "index": 1022,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
        "question": "What is the amount of all the pet insurance and disability insurance which are charged monthly?",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, DateOfBirth, Email | Accounts : AccountNumber, CustomerID, Balance | Loans : LoanID, CustomerID, Amount, InterestRate, TermYears | Insurance : InsuranceID, CustomerID, InsuranceType, PaymentFrequency, PremiumAmount, StartDate, EndDate | Payments : PaymentID, AccountNumber, PaymentDate, PaymentAmount, CheckNumber",
        "schema_with_content": "Customers : CustomerID (2, 1), FirstName ('John', 'Jane'), LastName ('Doe', 'Smith'), DateOfBirth ('1980-06-17', '1985-03-19'), Email ('john.doe@gmail.com', 'jane.smith@yahoo.com') | Accounts : AccountNumber (1, 2), CustomerID (2, 1), Balance (1000.0, 500.0) | Loans : LoanID (2, 1), CustomerID (2, 1), Amount (20000, 15000), InterestRate (0.05, 0.04), TermYears (3, 5) | Insurance : InsuranceID (3, 2, 1), CustomerID (2, 1, 1), InsuranceType ('Pet Insurance', 'Pet Insurance', 'Disability Insurance'), PaymentFrequency ('Quarterly', 'Monthly', 'Monthly'), PremiumAmount (15.0, 20.0, 200.0), StartDate ('2021-01-01', '2021-01-01', '2021-01-01'), EndDate ('2021-12-31', '2022-12-31', '2021-12-31') | Payments : PaymentID (2, 4, 1), AccountNumber (1, 1, 2), PaymentDate ('2021-01-15', '2021-01-15', '2021-02-15'), PaymentAmount (500.0, 1500.0, 1000.0), CheckNumber (12345, 67890, 123456)",
        "ambiguous_queries": [
            "SELECT Insurance.PremiumAmount FROM Insurance WHERE (Insurance.InsuranceType = 'Pet Insurance' OR Insurance.InsuranceType = 'Disability Insurance') AND Insurance.PaymentFrequency = 'Monthly'",
            "SELECT Insurance.PremiumAmount FROM Insurance WHERE Insurance.InsuranceType = 'Pet Insurance' OR Insurance.InsuranceType = 'Disability Insurance' AND Insurance.PaymentFrequency = 'Monthly'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"pet insurance and disability insurance which are charged monthly\": [\"disability insurance which are charged monthly and pet insurance which are charged monthly\", \"disability insurance which are charged monthly and pet insurance\"]}"
        },
        "clarification_context": "\"pet insurance and disability insurance which are charged monthly\" refers to \"disability insurance which are charged monthly and pet insurance\"",
        "clear_ambiguity": "{\"pet insurance and disability insurance which are charged monthly\": \"disability insurance which are charged monthly and pet insurance\"}",
        "gold_query": "SELECT Insurance.PremiumAmount FROM Insurance WHERE Insurance.InsuranceType = 'Pet Insurance' OR Insurance.InsuranceType = 'Disability Insurance' AND Insurance.PaymentFrequency = 'Monthly'"
    },
    {
        "index": 1023,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_hospitality_jobs/attachment_2tab_val_hospitality_jobs.sqlite",
        "question": "Show Expedia's travel agents and tour guides.",
        "schema_without_content": "Agency : id, name | Tour_Guide : id, guideName, agencyId | Travel_Agent : id, agentName, agencyId | Jobs : id, title, description | Applications : tourGuideId, travelAgentId, jobId, applicationDate | Skills : skillId, skillName",
        "schema_with_content": "Agency : id (1, 2), name ('Expedia', 'Booking.com') | Tour_Guide : id (3, 4, 2), guideName ('Emily Davis', 'John Doe', 'David Brown'), agencyId (2, 2, 1) | Travel_Agent : id (4, 3, 1), agentName ('Bob White', 'Carol Black', 'Daniel Green'), agencyId (1, 2, 1) | Jobs : id (3, 5, 2), title ('Data Analyst', 'HR Manager', 'Software Engineer'), description ('Creating visuals for marketing materials.', 'Analyzing customer behavior.', 'Developing web applications.') | Applications : tourGuideId (5, 1, 3), travelAgentId (1, 2, 4), jobId (5, 1, 3), applicationDate ('2024-03-13 17:41:57', '2024-03-13 17:41:57', '2024-03-13 17:41:57') | Skills : skillId (4, 2, 3), skillName ('JavaScript Development', 'Customer Relationship Management', 'SQL Database Management')",
        "ambiguous_queries": [
            "SELECT Tour_Guide.guideName as name FROM Tour_Guide JOIN Agency ON Tour_Guide.agencyId = Agency.id WHERE Agency.name = 'Expedia' UNION SELECT Travel_Agent.agentName as name FROM Travel_Agent JOIN Agency ON Travel_Agent.agencyId = Agency.id WHERE Agency.name = 'Expedia'",
            "SELECT Tour_Guide.guideName as name FROM Tour_Guide JOIN Agency ON Tour_Guide.agencyId = Agency.id UNION SELECT Travel_Agent.agentName as name FROM Travel_Agent JOIN Agency ON Travel_Agent.agencyId = Agency.id WHERE Agency.name = 'Expedia'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"Expedia's travel agents and tour guides\": [\"Expedia's travel agents and Expedia's tour guides\", \"tour guides and tour guides Expedia's\"]}"
        },
        "clarification_context": "\"Expedia's travel agents and tour guides\" refers to \"tour guides and tour guides Expedia's\"",
        "clear_ambiguity": "{\"Expedia's travel agents and tour guides\": \"tour guides and tour guides Expedia's\"}",
        "gold_query": "SELECT Tour_Guide.guideName as name FROM Tour_Guide JOIN Agency ON Tour_Guide.agencyId = Agency.id UNION SELECT Travel_Agent.agentName as name FROM Travel_Agent JOIN Agency ON Travel_Agent.agencyId = Agency.id WHERE Agency.name = 'Expedia'"
    },
    {
        "index": 1024,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_ref_genre5/attachment_1tab_ref_genre5.sqlite",
        "question": "Show all animations and comedies released in 2021.",
        "schema_without_content": "Directors : id, name | Producers : id, name | Actors : id, name | Films : id, title, release_year, director_id, producer_id, actor_id | FilmGenres : film_id, genre",
        "schema_with_content": "Directors : id (1, 4, 2), name ('John Doe', 'Emily Davis', 'Michael Johnson') | Producers : id (2, 1, 4), name ('Producer E', 'Producer C', 'Producer B') | Actors : id (2, 4, 3), name ('Actor Y', 'Actor V', 'Actor Z') | Films : id (4, 1, 3), title ('Film 4', 'Film 3', 'Film 5'), release_year (2021, 2021, 2023), director_id (1, 1, 2), producer_id (1, 2, 3), actor_id (1, 2, 5) | FilmGenres : film_id (4, 2, 1), genre ('Animation', 'Comedy', 'Animation')",
        "ambiguous_queries": [
            "SELECT Films.title FROM FilmGenres JOIN Films ON FilmGenres.film_id = Films.id WHERE (FilmGenres.genre = 'Animation' OR FilmGenres.genre = 'Comedy') AND Films.release_year = 2021",
            "SELECT Films.title FROM FilmGenres JOIN Films ON FilmGenres.film_id = Films.id WHERE FilmGenres.genre = 'Animation' OR FilmGenres.genre = 'Comedy' AND Films.release_year = 2021"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"animations and comedies released in 2021\": [\"comedies released in 2021 and animations released in 2021\", \"comedies released in 2021 and animations\"]}"
        },
        "clarification_context": "\"animations and comedies released in 2021\" refers to \"comedies released in 2021 and animations released in 2021\"",
        "clear_ambiguity": "{\"animations and comedies released in 2021\": \"comedies released in 2021 and animations released in 2021\"}",
        "gold_query": "SELECT Films.title FROM FilmGenres JOIN Films ON FilmGenres.film_id = Films.id WHERE (FilmGenres.genre = 'Animation' OR FilmGenres.genre = 'Comedy') AND Films.release_year = 2021"
    },
    {
        "index": 1025,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_val_book_genre/attachment_2tab_val_book_genre.sqlite",
        "question": "Show science fiction books and romance books published in 2018.",
        "schema_without_content": "Science_Fiction_Book : ID, Title, Author, Year_of_publication, Genre | Romance_Book : ID, Title, Author, Year_of_publication, Genre | Movie : ID, Title, Director, Release_year | Music_Album : ID, Artist, Album_name, Release_year | VideoGame : ID, Game_Name, Developer, Release_year",
        "schema_with_content": "Science_Fiction_Book : ID (2, 1), Title ('The Three Body Problem', 'Dune'), Author ('Liu Cixin', 'Frank Herbert'), Year_of_publication (2018, 1965), Genre ('Science Fiction', 'Science Fiction') | Romance_Book : ID (2, 1), Title ('Pride and Prejudice', 'Gone With The Wind'), Author ('Jane Austen', 'Margaret Mitchell'), Year_of_publication (2018, 1939), Genre ('Romance', 'Romance') | Movie : ID (2, 1), Title ('Inception', 'The Dark Knight'), Director ('Christopher Nolan', 'Christopher Nolan'), Release_year (2008, 2010) | Music_Album : ID (2, 1), Artist ('Adele', 'Beyonce'), Album_name ('Lemonade', '21'), Release_year (2016, 2011) | VideoGame : ID (2, 1), Game_Name ('Grand Theft Auto V', 'Red Dead Redemption 2'), Developer ('Rockstar North', 'Rockstar Games'), Release_year (2013, 2018)",
        "ambiguous_queries": [
            "SELECT Science_Fiction_Book.title FROM Science_Fiction_Book WHERE Science_Fiction_Book.Year_of_publication = 2018 UNION SELECT Romance_Book.title FROM Romance_Book WHERE Romance_Book.Year_of_publication = 2018",
            "SELECT Science_Fiction_Book.title FROM Science_Fiction_Book UNION SELECT Romance_Book.title FROM Romance_Book WHERE Romance_Book.Year_of_publication = 2018"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"science fiction books and romance books published in 2018\": [\"romance books published in 2018 and science fiction books published in 2018\", \"romance books published in 2018 and science fiction books\"]}"
        },
        "clarification_context": "\"science fiction books and romance books published in 2018\" refers to \"romance books published in 2018 and science fiction books published in 2018\"",
        "clear_ambiguity": "{\"science fiction books and romance books published in 2018\": \"romance books published in 2018 and science fiction books published in 2018\"}",
        "gold_query": "SELECT Science_Fiction_Book.title FROM Science_Fiction_Book WHERE Science_Fiction_Book.Year_of_publication = 2018 UNION SELECT Romance_Book.title FROM Romance_Book WHERE Romance_Book.Year_of_publication = 2018"
    },
    {
        "index": 1026,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_val_genre2/attachment_1tab_val_genre2.sqlite",
        "question": "Show animation films and comedy films released in 2021.",
        "schema_without_content": "Directors : DirectorID, Name, BirthDate | Producers : ProducerID, Name, ProductionCompany | Films : FilmID, Title, Genre, Release_Year, DirectorID, ProducerID | Actors : ActorID, Name, DateOfBirth | Casts : FilmID, ActorID, Role",
        "schema_with_content": "Directors : DirectorID (5, 2, 3), Name ('William Brown', 'Michael Johnson', 'Emily Davis'), BirthDate ('1980-07-30', '1950-12-04', '1978-05-28') | Producers : ProducerID (3, 4, 5), Name ('Alice Green', 'David Black', 'Carol Blue'), ProductionCompany ('Green Studios', 'Black Entertainment', 'White Pictures') | Films : FilmID (4, 5, 1), Title ('Dream Chasers', 'A Comic Adventure', 'The Silent Clown'), Genre ('Animation', 'Comedy', 'Comedy'), Release_Year (1999, 2021, 2019), DirectorID (1, 4, 3), ProducerID (3, 2, 5) | Actors : ActorID (4, 3, 5), Name ('Anne Hathaway', 'Ryan Reynolds', 'Christopher Nolan'), DateOfBirth ('1982-11-12', '1976-10-23', '1984-11-22') | Casts : FilmID (3, 2, 2), ActorID (2, 5, 4), Role ('Funny Sidekick', 'Leading Man', 'Wise Mentor')",
        "ambiguous_queries": [
            "SELECT Films.Title FROM Films WHERE (Films.Genre = 'Animation' OR Films.Genre = 'Comedy') AND Films.Release_Year = 2021",
            "SELECT Films.Title FROM Films WHERE Films.Genre = 'Animation' OR Films.Genre = 'Comedy' AND Films.Release_Year = 2021"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"animation films and comedy films released in 2021\": [\"comedy films released in 2021 and animation films released in 2021\", \"comedy films released in 2021 and animation films\"]}"
        },
        "clarification_context": "\"animation films and comedy films released in 2021\" refers to \"comedy films released in 2021 and animation films\"",
        "clear_ambiguity": "{\"animation films and comedy films released in 2021\": \"comedy films released in 2021 and animation films\"}",
        "gold_query": "SELECT Films.Title FROM Films WHERE Films.Genre = 'Animation' OR Films.Genre = 'Comedy' AND Films.Release_Year = 2021"
    },
    {
        "index": 1027,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_ref_news_content_types/attachment_2tab_ref_news_content_types.sqlite",
        "question": "Give me opinion pieces and feature articles where they have 3 volumes.",
        "schema_without_content": "Authors : author_id, name, email | Volumes : volume_id, number, publication_date | Opinion_Pieces : opinion_piece_id, title, content, volume_id | Feature_Articles : feature_article_id, title, content, volume_id | Publications : publication_id, name, address",
        "schema_with_content": "Authors : author_id (5, 4, 2), name ('John Doe', 'Carol White', 'Jane Smith'), email ('johndoe@example.com', 'janesmith@example.com', 'carolwhite@example.com') | Volumes : volume_id (1, 2, 4), number ('03', '02', '04'), publication_date ('2023-01-01', '2023-04-01', '2023-02-01') | Opinion_Pieces : opinion_piece_id (5, 4, 1), title ('The Importance of Free Press', 'Economic Growth and Poverty', 'Climate Change and Its Effects'), content ('A discussion about freedom of speech and press...', 'Exploring how economic growth impacts poverty levels...', 'How technology has shaped our society today.'), volume_id (5, 2, 3) | Feature_Articles : feature_article_id (5, 1, 4), title ('Censorship Around The World', 'Investigative Journalism Techniques', 'Journalism Ethics and Standards'), content ('Looking at censorship laws around the globe...', 'An exploration of newspaper history dating back centuries...', 'Discovering the best practices in investigative journalism...'), volume_id (2, 1, 5) | Publications : publication_id (2, 1, 5), name ('Washington Post', 'Miami Herald', 'Los Angeles Times'), address ('3511 NW 91 Avenue, Doral FL 33172', '435 N Michigan Ave, Chicago IL 60611', '1301 K Street NW, Washington DC 20071')",
        "ambiguous_queries": [
            "SELECT Opinion_Pieces.title FROM Volumes JOIN Opinion_Pieces ON Volumes.volume_id = Opinion_Pieces.volume_id WHERE Volumes.number = '03' UNION SELECT Feature_Articles.title FROM Volumes JOIN Feature_Articles ON Volumes.volume_id = Feature_Articles.volume_id WHERE Volumes.number = '03'",
            "SELECT Opinion_Pieces.title FROM Volumes JOIN Opinion_Pieces ON Volumes.volume_id = Opinion_Pieces.volume_id UNION SELECT Feature_Articles.title FROM Volumes JOIN Feature_Articles ON Volumes.volume_id = Feature_Articles.volume_id WHERE Volumes.number = '03'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"opinion pieces and feature articles where they have 3 volumes\": [\"feature articles where they have 3 volumes and opinion pieces where they have 3 volumes\", \"feature articles where they have 3 volumes and opinion pieces\"]}"
        },
        "clarification_context": "\"opinion pieces and feature articles where they have 3 volumes\" refers to \"feature articles where they have 3 volumes and opinion pieces where they have 3 volumes\"",
        "clear_ambiguity": "{\"opinion pieces and feature articles where they have 3 volumes\": \"feature articles where they have 3 volumes and opinion pieces where they have 3 volumes\"}",
        "gold_query": "SELECT Opinion_Pieces.title FROM Volumes JOIN Opinion_Pieces ON Volumes.volume_id = Opinion_Pieces.volume_id WHERE Volumes.number = '03' UNION SELECT Feature_Articles.title FROM Volumes JOIN Feature_Articles ON Volumes.volume_id = Feature_Articles.volume_id WHERE Volumes.number = '03'"
    },
    {
        "index": 1028,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_ref_educational_methods/attachment_1tab_ref_educational_methods.sqlite",
        "question": "Show the content of online lessons and classroom lessons taught by Emily Williams.",
        "schema_without_content": "Students : studentID, firstName, lastName, dateOfBirth | Educators : educatorID, firstName, lastName, subject | Classes : classID, title, startDate, endDate, EducatorID | Curriculums : curriculumID, name, EducatorID | CourseMaterials : materialID, title, url | Enrollments : enrollmentID, StudentID, classID, courseMaterialID | Lessons : lessonID, content, educationalMethod, curriculumID, classID",
        "schema_with_content": "Students : studentID (1, 2), firstName ('John', 'Jane'), lastName ('Smith', 'Doe'), dateOfBirth ('2003-01-01', '2004-02-02') | Educators : educatorID (1, 2), firstName ('Michael', 'Emily'), lastName ('Williams', 'Johnson'), subject ('Mathematics', 'English') | Classes : classID (2, 1), title ('Math Class A', 'English Class B'), startDate ('2023-09-01', '2023-09-01'), endDate ('2023-12-20', '2023-12-20'), EducatorID (1, 2) | Curriculums : curriculumID (2, 1), name ('Grade 7 English', 'Grade 6 Mathematics'), EducatorID (2, 1) | CourseMaterials : materialID (2, 1), title ('Algebra Book', 'Grammar Guide'), url ('https://example.com/grammar-guide', 'https://example.com/algebra-book') | Enrollments : enrollmentID (1, 2), StudentID (2, 1), classID (1, 2), courseMaterialID (2, 1) | Lessons : lessonID (1, 3, 2), content ('Vocabulary building', 'Lesson on linear equations', 'Introduction to algebra'), educationalMethod ('Online Learning', 'Classroom Teaching', 'Classroom Teaching'), curriculumID (1, 2, 1), classID (2, 1, 3)",
        "ambiguous_queries": [
            "SELECT Lessons.content FROM Lessons JOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID JOIN Educators ON Educators.educatorID = Curriculums.EducatorID WHERE (Lessons.educationalMethod = 'Online Learning' OR Lessons.educationalMethod = 'Classroom Teaching') AND Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'",
            "SELECT Lessons.content FROM Lessons JOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID JOIN Educators ON Educators.educatorID = Curriculums.EducatorID WHERE Lessons.educationalMethod = 'Online Learning' OR Lessons.educationalMethod = 'Classroom Teaching' AND Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"online lessons and classroom lessons taught by Emily Williams\": [\"classroom lessons taught by Emily Williams and online lessons taught by Emily Williams\", \"classroom lessons taught by Emily Williams and online lessons\"]}"
        },
        "clarification_context": "\"online lessons and classroom lessons taught by Emily Williams\" refers to \"classroom lessons taught by Emily Williams and online lessons\"",
        "clear_ambiguity": "{\"online lessons and classroom lessons taught by Emily Williams\": \"classroom lessons taught by Emily Williams and online lessons\"}",
        "gold_query": "SELECT Lessons.content FROM Lessons JOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID JOIN Educators ON Educators.educatorID = Curriculums.EducatorID WHERE Lessons.educationalMethod = 'Online Learning' OR Lessons.educationalMethod = 'Classroom Teaching' AND Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'"
    },
    {
        "index": 1029,
        "db_id": "Hospitality",
        "ambig_type": "attachment",
        "db_file": "attachment/Hospitality/attachment_1tab_ref_accommodation1/attachment_1tab_ref_accommodation1.sqlite",
        "question": "Show youth hostels and hotels where rooms cost 50.",
        "schema_without_content": "hotels : id, name, location, accommodation_type | rooms : hotel_id, room_number, price | reviews : user_name, review_text, rating, room_number",
        "schema_with_content": "hotels : id (1, 2, 5), name ('Luxury Suites', 'Park Plaza', 'Young Travelers Hostel'), location ('City Center', 'Suburbia', 'Beachside'), accommodation_type ('Hotel', 'Hotel', 'Youth Hostel') | rooms : hotel_id (4, 3, 1), room_number (101, 601, 301), price (50.0, 80.0, 50.0) | reviews : user_name ('Mike Johnson', 'Kate King', 'Laura Wilson'), review_text ('Fantastic stay!', 'Not my cup of tea.', 'Too expensive.'), rating (4, 5, 5), room_number (301, 201, 701)",
        "ambiguous_queries": [
            "SELECT hotels.name FROM hotels JOIN rooms ON hotels.id = rooms.hotel_id WHERE (hotels.accommodation_type = 'Youth Hostel' OR hotels.accommodation_type = 'Hotel') AND rooms.price = 50.0",
            "SELECT hotels.name FROM hotels JOIN rooms ON hotels.id = rooms.hotel_id WHERE hotels.accommodation_type = 'Youth Hostel' OR hotels.accommodation_type = 'Hotel' AND rooms.price = 50.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"youth hostels and hotels where rooms cost 50\": [\"hotels where rooms cost 50 and youth hostels where rooms cost 50\", \"hotels where rooms cost 50 and youth hostels\"]}"
        },
        "clarification_context": "\"youth hostels and hotels where rooms cost 50\" refers to \"hotels where rooms cost 50 and youth hostels\"",
        "clear_ambiguity": "{\"youth hostels and hotels where rooms cost 50\": \"hotels where rooms cost 50 and youth hostels\"}",
        "gold_query": "SELECT hotels.name FROM hotels JOIN rooms ON hotels.id = rooms.hotel_id WHERE hotels.accommodation_type = 'Youth Hostel' OR hotels.accommodation_type = 'Hotel' AND rooms.price = 50.0"
    },
    {
        "index": 1030,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_val_it_jobs/attachment_1tab_val_it_jobs.sqlite",
        "question": "Show network admin jobs and IT consultant jobs with a $70k salary.",
        "schema_without_content": "CompanyInfo : id, name, location, industry | JobLocations : id, city, state, country | SkillsRequired : id, skillName | EducationRequirements : id, degreeLevel, yearsOfExperience | JobPostings : id, title, description, itJobs, salary, companyId, locationId, skillsId, educationId",
        "schema_with_content": "CompanyInfo : id (3, 4, 5), name ('GreenEnergy', 'FinanceInc', 'TechCorp'), location ('New York', 'Houston', 'Los Angeles'), industry ('Education', 'Banking', 'Healthcare') | JobLocations : id (5, 1, 4), city ('Chicago', 'New York', 'Houston'), state ('CA', 'TX', 'IL'), country ('USA', 'USA', 'USA') | SkillsRequired : id (1, 4, 2), skillName ('Java Development', 'Data Analysis', 'SQL Database Management') | EducationRequirements : id (4, 2, 3), degreeLevel (\"Master's Degree\", \"Bachelor's Degree\", 'PhD'), yearsOfExperience (1, 5, 0) | JobPostings : id (4, 1, 3), title ('IT Consultant', 'Senior IT Consultant', 'Network Administrator'), description ('Implement IT projects and manage change.', 'Advise clients on IT strategy and solutions.', 'Administer network devices and systems.'), itJobs ('Network Administrator', 'Network Administrator', 'IT Consultant'), salary ('$80,000', '$70,000', '$90,000'), companyId (2, 1, 2), locationId (2, 4, 1), skillsId (1, 1, 2), educationId (2, 2, 1)",
        "ambiguous_queries": [
            "SELECT JobPostings.title FROM JobPostings WHERE (JobPostings.itJobs = 'Network Administrator' OR JobPostings.itJobs = 'IT Consultant') AND JobPostings.salary = '$70,000'",
            "SELECT JobPostings.title FROM JobPostings WHERE JobPostings.itJobs = 'Network Administrator' OR JobPostings.itJobs = 'IT Consultant' AND JobPostings.salary = '$70,000'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"network admin jobs and IT consultant jobs with a $70k salary\": [\"IT consultant jobs with a $70k salary and network admin jobs with a $70k salary\", \"IT consultant jobs with a $70k salary and network admin jobs\"]}"
        },
        "clarification_context": "\"network admin jobs and IT consultant jobs with a $70k salary\" refers to \"IT consultant jobs with a $70k salary and network admin jobs with a $70k salary\"",
        "clear_ambiguity": "{\"network admin jobs and IT consultant jobs with a $70k salary\": \"IT consultant jobs with a $70k salary and network admin jobs with a $70k salary\"}",
        "gold_query": "SELECT JobPostings.title FROM JobPostings WHERE (JobPostings.itJobs = 'Network Administrator' OR JobPostings.itJobs = 'IT Consultant') AND JobPostings.salary = '$70,000'"
    },
    {
        "index": 1031,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_val_family_entertainment/attachment_2tab_val_family_entertainment.sqlite",
        "question": "Display amusement parks and water parks in Orlando, Florida.",
        "schema_without_content": "Amusement_Parks : id, Name, Location, Opening_Year, Attractions | Water_Parks : id, Name, Location, Opening_Month, Pool_Type | Cinemas : id, Name, Location, Genre, Seats | Concert_Venues : id, Name, Location, Artist, Date | Theaters : id, Name, Location, Show_Time, Ticket_Price | Restaurants : id, Name, Location, Cuisine, Price_Range",
        "schema_with_content": "Amusement_Parks : id (1, 2), Name ('Universal Studios', 'Disney World'), Location ('Los Angeles, California', 'Orlando, Florida'), Opening_Year (1964, 1971), Attractions (20, 35) | Water_Parks : id (2, 1), Name ('Typhoon Lagoon', 'Blizzard Beach'), Location ('Orlando, Florida', 'Orlando, Florida'), Opening_Month ('February', 'May'), Pool_Type ('Surf Pool', 'Snow Park') | Cinemas : id (1, 2), Name ('AMC Orlando 24', 'Movie Theater of Los Angeles'), Location ('Orlando, Florida', 'Los Angeles, California'), Genre ('Action', 'Drama'), Seats (1000, 800) | Concert_Venues : id (1, 2), Name ('Hard Rock Live', 'Staples Center'), Location ('Orlando, Florida', 'Los Angeles, California'), Artist ('Bruce Springsteen', 'Taylor Swift'), Date ('August 1st', 'June 1st') | Theaters : id (2, 1), Name ('Downtown Theatre', 'Broadway Playhouse'), Location ('New York City, New York', 'Chicago, Illinois'), Show_Time ('7 PM', '8 PM'), Ticket_Price (100.0, 85.0) | Restaurants : id (2, 1), Name ('Le Bernardin', 'Girl & the Goat'), Location ('Chicago, Illinois', 'New York City, New York'), Cuisine ('American', 'French'), Price_Range (100.0, 150.0)",
        "ambiguous_queries": [
            "SELECT Amusement_Parks.name FROM Amusement_Parks WHERE Amusement_Parks.Location = 'Orlando, Florida' UNION SELECT Water_Parks.name FROM Water_Parks WHERE Water_Parks.Location = 'Orlando, Florida'",
            "SELECT Amusement_Parks.name FROM Amusement_Parks UNION SELECT Water_Parks.name FROM Water_Parks WHERE Water_Parks.Location = 'Orlando, Florida'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"amusement parks and water parks in Orlando, Florida\": [\"water parks in Orlando, Florida and amusement parks in Orlando, Florida\", \"water parks in Orlando, Florida and amusement parks\"]}"
        },
        "clarification_context": "\"amusement parks and water parks in Orlando, Florida\" refers to \"water parks in Orlando, Florida and amusement parks in Orlando, Florida\"",
        "clear_ambiguity": "{\"amusement parks and water parks in Orlando, Florida\": \"water parks in Orlando, Florida and amusement parks in Orlando, Florida\"}",
        "gold_query": "SELECT Amusement_Parks.name FROM Amusement_Parks WHERE Amusement_Parks.Location = 'Orlando, Florida' UNION SELECT Water_Parks.name FROM Water_Parks WHERE Water_Parks.Location = 'Orlando, Florida'"
    },
    {
        "index": 1032,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_education_programs/attachment_1tab_val_education_programs.sqlite",
        "question": "List all international baccalaureate programs and advanced placement programs with 30 credits.",
        "schema_without_content": "Students : StudentID, FirstName, LastName, BirthDate, Email | Educators : EducatorID, FirstName, LastName, Subject | Classes : ClassID, ClassName, StartTime, EndTime, RoomNumber | Enrollments : EnrollmentID, StudentID, ClassID, Semester, Grade | Course_Offerings : OfferingID, ClassID, ProgramID, InstructorID | Education_Programs : ProgramID, name, Type, Description, Credits",
        "schema_with_content": "Students : StudentID (2, 1), FirstName ('Jane', 'John'), LastName ('Doe', 'Smith'), BirthDate ('2000-01-01', '1997-06-28'), Email ('jane.smith@example.com', 'john.doe@example.com') | Educators : EducatorID (2, 1), FirstName ('Charlie', 'Alice'), LastName ('Green', 'Brown'), Subject ('Mathematics', 'English Literature') | Classes : ClassID (2, 1), ClassName ('Calculus I', 'Literary Analysis'), StartTime ('08:00:00', '09:45:00'), EndTime ('09:30:00', '11:15:00'), RoomNumber (102, 101) | Enrollments : EnrollmentID (2, 1), StudentID (1, 2), ClassID (2, 1), Semester ('Fall 2021', 'Winter 2022'), Grade ('B+', 'A') | Course_Offerings : OfferingID (), ClassID (), ProgramID (), InstructorID () | Education_Programs : ProgramID (2, 3, 4), name ('General Program', 'IB Extended', 'IB Standard'), Type ('Advanced Placement Program', 'Advanced Placement Program', 'International Baccalaureate Program'), Description ('An internationally recognized pre-university program...', 'This program has a slightly different curriculum structure...', 'The AP program offers college level courses...'), Credits (31, 30, 30)",
        "ambiguous_queries": [
            "SELECT Education_Programs.name FROM Education_Programs WHERE (Education_Programs.Type = 'International Baccalaureate Program' OR Education_Programs.Type = 'Advanced Placement Program') AND Education_Programs.Credits = 30",
            "SELECT Education_Programs.name FROM Education_Programs WHERE Education_Programs.Type = 'International Baccalaureate Program' OR Education_Programs.Type = 'Advanced Placement Program' AND Education_Programs.Credits = 30"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"international baccalaureate programs and advanced placement programs with 30 credits\": [\"advanced placement programs with 30 credits and international baccalaureate programs with 30 credits\", \"advanced placement programs with 30 credits and international baccalaureate programs\"]}"
        },
        "clarification_context": "\"international baccalaureate programs and advanced placement programs with 30 credits\" refers to \"advanced placement programs with 30 credits and international baccalaureate programs\"",
        "clear_ambiguity": "{\"international baccalaureate programs and advanced placement programs with 30 credits\": \"advanced placement programs with 30 credits and international baccalaureate programs\"}",
        "gold_query": "SELECT Education_Programs.name FROM Education_Programs WHERE Education_Programs.Type = 'International Baccalaureate Program' OR Education_Programs.Type = 'Advanced Placement Program' AND Education_Programs.Credits = 30"
    },
    {
        "index": 1033,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_val_events/attachment_2tab_val_events.sqlite",
        "question": "What are the topics of all press conferences and media scrums with Jack Layton?",
        "schema_without_content": "News_Articles : id, title, content, author | Interviews : id, date, time, interviewee | Awards : id, award_name, winner | Publications : id, publication_name, publication_date, editor | Press_Conferences : id, topic, date, location, person | Media_Scrums : id, topic, date, location, person",
        "schema_with_content": "News_Articles : id (1, 2), title ('The Rising Cost of Education', 'Technology Advancements in Healthcare'), content ('Exploring how new technologies are revolutionizing healthcare...', 'A deep dive into the increasing costs of education...'), author ('David Brown', 'Emily Davis') | Interviews : id (1, 2), date ('2021-09-10', '2021-07-25'), time ('2:00 PM', '10:00 AM'), interviewee ('Bill Gates', 'Elon Musk') | Awards : id (2, 1), award_name ('Entrepreneur of the Year', 'Innovator of the Year'), winner ('Elon Musk', 'Richard Branson') | Publications : id (2, 1), publication_name ('Forbes Magazine', 'Time Magazine'), publication_date ('2021-09-15', '2021-08-01'), editor ('Harry Evans', 'Lisa Miller') | Press_Conferences : id (2, 1), topic ('Budget Proposal', 'Education Reform'), date ('2021-08-15', '2021-07-01'), location ('Toronto City Hall', 'Ottawa Parliament Building'), person ('Jack Layton', 'Jane Smith') | Media_Scrums : id (2, 1), topic ('Arts Funding', 'Climate Change Summit'), date ('2021-06-30', '2021-09-20'), location ('Vancouver Convention Centre', 'Montreal Museum of Fine Arts'), person ('Michael Johnson', 'Jack Layton')",
        "ambiguous_queries": [
            "SELECT Press_Conferences.topic FROM Press_Conferences WHERE Press_Conferences.person = 'Jack Layton' UNION SELECT Media_Scrums.topic FROM Media_Scrums WHERE Media_Scrums.person = 'Jack Layton'",
            "SELECT Press_Conferences.topic FROM Press_Conferences UNION SELECT Media_Scrums.topic FROM Media_Scrums WHERE Media_Scrums.person = 'Jack Layton'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"all press conferences and media scrums with Jack Layton\": [\"media scrums with Jack Layton and all press conferences with Jack Layton\", \"media scrums with Jack Layton and all press conferences\"]}"
        },
        "clarification_context": "\"all press conferences and media scrums with Jack Layton\" refers to \"media scrums with Jack Layton and all press conferences\"",
        "clear_ambiguity": "{\"all press conferences and media scrums with Jack Layton\": \"media scrums with Jack Layton and all press conferences\"}",
        "gold_query": "SELECT Press_Conferences.topic FROM Press_Conferences UNION SELECT Media_Scrums.topic FROM Media_Scrums WHERE Media_Scrums.person = 'Jack Layton'"
    },
    {
        "index": 1034,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
        "question": "What is the salary range for female laboratory technicians and research scientists?",
        "schema_without_content": "Company : id, name | Department : id, companyId, departmentName | PositionType : id, typeName | LabPosition : id, positionTypeId, labPosition, gender, minimumEducation, experienceInYears, salaryRange | Employee : id, firstName, lastName, dateOfBirth, email, phoneNumber, hireDate, jobTitle, departmentId, gender",
        "schema_with_content": "Company : id (1, 4, 2), name ('MedicalPioneers', 'SoftWare', 'TechCorp') | Department : id (1, 4, 5), companyId (3, 5, 2), departmentName ('Computer Science', 'Mathematics', 'Biotechnology') | PositionType : id (2, 3, 5), typeName ('Full Time', 'Contractual', 'Part Time') | LabPosition : id (4, 1, 2), positionTypeId (1, 1, 3), labPosition ('Research Scientist', 'Research Scientist', 'Laboratory Technician'), gender ('Non-binary', 'Male', 'Male'), minimumEducation ('BSc', 'PhD', 'MS'), experienceInYears (4, 3, 7), salaryRange ('60k - 90k', '60k - 80k', '50k - 70k') | Employee : id (5, 1, 3), firstName ('Jane', 'Tom', 'Alice'), lastName ('Doe', 'Williams', 'Smith'), dateOfBirth ('1989-06-25', '1988-03-20', '1992-11-10'), email ('janedoe@email.com', 'chrisevans@email.com', 'johnsmith@email.com'), phoneNumber ('+1 (123) 456-7890', '+1 (456) 789-0123', '+1 (567) 890-1234'), hireDate ('2021-08-01', '2021-09-01', '2021-06-01'), jobTitle ('Analyst', 'Laboratory Technician', 'Research Scientist'), departmentId (2, 4, 3), gender ('Male', 'Male', 'Male')",
        "ambiguous_queries": [
            "SELECT LabPosition.salaryRange FROM LabPosition WHERE (LabPosition.labPosition = 'Research Scientist' OR LabPosition.labPosition = 'Laboratory Technician') AND LabPosition.gender = 'Female'",
            "SELECT LabPosition.salaryRange FROM LabPosition WHERE LabPosition.labPosition = 'Research Scientist' OR LabPosition.labPosition = 'Laboratory Technician' AND LabPosition.gender = 'Female'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"female laboratory technicians and research scientists\": [\"female laboratory technicians and female research scientists\", \"research scientists and research scientists female\"]}"
        },
        "clarification_context": "\"female laboratory technicians and research scientists\" refers to \"female laboratory technicians and female research scientists\"",
        "clear_ambiguity": "{\"female laboratory technicians and research scientists\": \"female laboratory technicians and female research scientists\"}",
        "gold_query": "SELECT LabPosition.salaryRange FROM LabPosition WHERE (LabPosition.labPosition = 'Research Scientist' OR LabPosition.labPosition = 'Laboratory Technician') AND LabPosition.gender = 'Female'"
    },
    {
        "index": 1035,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_creative_industry_professions/attachment_2tab_val_creative_industry_professions.sqlite",
        "question": "Show graphic designers and web developers working at 2/7 London Street.",
        "schema_without_content": "Graphic_Designers : id, name, experience, skills, office | Web_Developers : id, name, programming_languages, projects, office | HR_Managers : id, name, years_experience, department, office | Recruitment_Coordinators : id, name, job_type, responsibilities, office | Software_Engineers : id, name, programming_skills, project_history, office",
        "schema_with_content": "Graphic_Designers : id (1, 2), name ('Jane Doe', 'John Smith'), experience (3, 6), skills ('Illustrator, Sketch, Figma', 'Adobe Illustrator, Photoshop, InDesign'), office ('2/7 London Street', '10 Downing St') | Web_Developers : id (1, 2), name ('Alice Johnson', 'Bob Brown'), programming_languages ('Python, Django, Flask', 'JavaScript, React, Node.js'), projects ('Ecommerce Website', 'Analytics Platform'), office ('2/7 London Street', '10 Downing St') | HR_Managers : id (1, 2), name ('Emily Wilson', 'Mike Davis'), years_experience (8, 5), department ('HR', 'Recruiting'), office ('10 Downing St', '2/7 London Street') | Recruitment_Coordinators : id (1, 2), name ('David Miller', 'Linda Taylor'), job_type ('Full Time', 'Contract'), responsibilities ('Sourcing candidates, scheduling interviews', 'Vendor management, candidate assessment'), office ('2/7 London Street', '10 Downing St') | Software_Engineers : id (2, 1), name ('Rachel Green', 'Chris Evans'), programming_skills ('C#, .NET Core', 'Java, Spring Boot'), project_history ('Bank Management System', 'Inventory Management App'), office ('10 Downing St', '2/7 London Street')",
        "ambiguous_queries": [
            "SELECT Graphic_Designers.name FROM Graphic_Designers WHERE Graphic_Designers.office = '2/7 London Street' UNION SELECT Web_Developers.name FROM Web_Developers WHERE Web_Developers.office = '2/7 London Street'",
            "SELECT Graphic_Designers.name FROM Graphic_Designers UNION SELECT Web_Developers.name FROM Web_Developers WHERE Web_Developers.office = '2/7 London Street'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"graphic designers and web developers working at 2/7 London Street\": [\"web developers working at 2/7 London Street and graphic designers working at 2/7 London Street\", \"web developers working at 2/7 London Street and graphic designers\"]}"
        },
        "clarification_context": "\"graphic designers and web developers working at 2/7 London Street\" refers to \"web developers working at 2/7 London Street and graphic designers\"",
        "clear_ambiguity": "{\"graphic designers and web developers working at 2/7 London Street\": \"web developers working at 2/7 London Street and graphic designers\"}",
        "gold_query": "SELECT Graphic_Designers.name FROM Graphic_Designers UNION SELECT Web_Developers.name FROM Web_Developers WHERE Web_Developers.office = '2/7 London Street'"
    },
    {
        "index": 1036,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_2tab_ref_financial_swaps/attachment_2tab_ref_financial_swaps.sqlite",
        "question": "When do the currency swaps and interest rate swaps offered by Royal Bank expire?",
        "schema_without_content": "Banks : id, name | Accounts : account_id, bank_name, balance | Currency_Swaps : swap_id, bank_name, amount, maturity_date, foreign_currency | Interest_Rate_Swaps : swap_id, bank_name, start_date, end_date, fixed_rate, floating_rate",
        "schema_with_content": "Banks : id (4, 5, 1), name ('Royal Bank', 'Central Bank', 'Global Bank') | Accounts : account_id (4, 1, 3), bank_name ('Commercial Bank', 'Global Bank', 'National Bank'), balance (40000.66, 50000.87, 30000.98) | Currency_Swaps : swap_id (1, 5, 2), bank_name ('Global Bank', 'Central Bank', 'Royal Bank'), amount (11000.0, 10000.0, 8000.0), maturity_date ('2023-01-04', '2023-01-01', '2023-01-03'), foreign_currency ('Yen', 'Franc', 'Euro') | Interest_Rate_Swaps : swap_id (4, 1, 5), bank_name ('Central Bank', 'Royal Bank', 'Global Bank'), start_date ('2023-01-04', '2023-01-02', '2023-01-03'), end_date ('2024-01-04', '2024-01-03', '2024-01-05'), fixed_rate (3.3, 2.9, 3.1), floating_rate (3.4, 2.6, 3.0)",
        "ambiguous_queries": [
            "SELECT Currency_Swaps.maturity_date FROM Banks JOIN Currency_Swaps ON Banks.name = Currency_Swaps.bank_name WHERE Banks.name = 'Royal Bank' UNION SELECT Interest_Rate_Swaps.end_date FROM Banks JOIN Interest_Rate_Swaps ON Banks.name = Interest_Rate_Swaps.bank_name WHERE Banks.name = 'Royal Bank'",
            "SELECT Currency_Swaps.maturity_date FROM Banks JOIN Currency_Swaps ON Banks.name = Currency_Swaps.bank_name UNION SELECT Interest_Rate_Swaps.end_date FROM Banks JOIN Interest_Rate_Swaps ON Banks.name = Interest_Rate_Swaps.bank_name WHERE Banks.name = 'Royal Bank'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"currency swaps and interest rate swaps offered by Royal Bank\": [\"interest rate swaps offered by Royal Bank and currency swaps offered by Royal Bank\", \"interest rate swaps offered by Royal Bank and currency swaps\"]}"
        },
        "clarification_context": "\"currency swaps and interest rate swaps offered by Royal Bank\" refers to \"interest rate swaps offered by Royal Bank and currency swaps\"",
        "clear_ambiguity": "{\"currency swaps and interest rate swaps offered by Royal Bank\": \"interest rate swaps offered by Royal Bank and currency swaps\"}",
        "gold_query": "SELECT Currency_Swaps.maturity_date FROM Banks JOIN Currency_Swaps ON Banks.name = Currency_Swaps.bank_name UNION SELECT Interest_Rate_Swaps.end_date FROM Banks JOIN Interest_Rate_Swaps ON Banks.name = Interest_Rate_Swaps.bank_name WHERE Banks.name = 'Royal Bank'"
    },
    {
        "index": 1037,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_ref_types_of_banks/attachment_1tab_ref_types_of_banks.sqlite",
        "question": "Show central banks and commercial banks in the USA.",
        "schema_without_content": "Types_of_banks : id, bank_type | Countries : id, country_name | Banks : id, name, type_id, country_id | Customers : id, first_name, last_name, birthdate, account_number, bank_id | Accounts : id, balance, customer_id",
        "schema_with_content": "Types_of_banks : id (2, 1), bank_type ('Commercial Bank', 'Central Bank') | Countries : id (1, 2), country_name ('UK', 'USA') | Banks : id (3, 2, 1), name ('Bank of England', 'Barclays', 'Citibank'), type_id (1, 2, 2), country_id (1, 2, 2) | Customers : id (1, 2), first_name ('John', 'Jane'), last_name ('Doe', 'Smith'), birthdate ('1985-05-15', '1980-01-01'), account_number (1, 2), bank_id (2, 1) | Accounts : id (1, 2), balance (1000.0, 2000.0), customer_id (1, 2)",
        "ambiguous_queries": [
            "SELECT Banks.name FROM Types_of_banks JOIN Banks ON Types_of_banks.id = Banks.type_id JOIN Countries ON Banks.country_id = Countries.id WHERE (Types_of_banks.bank_type = 'Central Bank' OR Types_of_banks.bank_type = 'Commercial Bank') AND Countries.country_name = 'USA'",
            "SELECT Banks.name FROM Types_of_banks JOIN Banks ON Types_of_banks.id = Banks.type_id JOIN Countries ON Banks.country_id = Countries.id WHERE Types_of_banks.bank_type = 'Central Bank' OR Types_of_banks.bank_type = 'Commercial Bank' AND Countries.country_name = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"central banks and commercial banks in the USA\": [\"commercial banks in the USA and central banks in the USA\", \"commercial banks in the USA and central banks\"]}"
        },
        "clarification_context": "\"central banks and commercial banks in the USA\" refers to \"commercial banks in the USA and central banks in the USA\"",
        "clear_ambiguity": "{\"central banks and commercial banks in the USA\": \"commercial banks in the USA and central banks in the USA\"}",
        "gold_query": "SELECT Banks.name FROM Types_of_banks JOIN Banks ON Types_of_banks.id = Banks.type_id JOIN Countries ON Banks.country_id = Countries.id WHERE (Types_of_banks.bank_type = 'Central Bank' OR Types_of_banks.bank_type = 'Commercial Bank') AND Countries.country_name = 'USA'"
    },
    {
        "index": 1038,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_sports/attachment_2tab_ref_sports.sqlite",
        "question": "Show me baseball teams and basketball teams from the United States.",
        "schema_without_content": "Countries : id, name | BaseballTeams : id, teamName, countryId | BasketballTeams : id, teamName, countryId",
        "schema_with_content": "Countries : id (5, 4, 2), name ('Australia', 'Canada', 'Japan') | BaseballTeams : id (5, 1, 3), teamName ('Adelaide Strikers', 'Barcelona', 'San Francisco Giants'), countryId (2, 4, 5) | BasketballTeams : id (3, 5, 1), teamName ('Chicago Bulls', 'Perth Wildcats', 'FC Barcelona'), countryId (2, 5, 3)",
        "ambiguous_queries": [
            "SELECT BaseballTeams.teamname FROM Countries JOIN BaseballTeams ON Countries.id = BaseballTeams.countryId WHERE Countries.name = 'United States' UNION SELECT BasketballTeams.teamname FROM Countries JOIN BasketballTeams ON Countries.id = BasketballTeams.countryId WHERE Countries.name = 'United States'",
            "SELECT BaseballTeams.teamname FROM Countries JOIN BaseballTeams ON Countries.id = BaseballTeams.countryId UNION SELECT BasketballTeams.teamname FROM Countries JOIN BasketballTeams ON Countries.id = BasketballTeams.countryId WHERE Countries.name = 'United States'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"baseball teams and basketball teams from the United States\": [\"basketball teams from the United States and baseball teams from the United States\", \"basketball teams from the United States and baseball teams\"]}"
        },
        "clarification_context": "\"baseball teams and basketball teams from the United States\" refers to \"basketball teams from the United States and baseball teams from the United States\"",
        "clear_ambiguity": "{\"baseball teams and basketball teams from the United States\": \"basketball teams from the United States and baseball teams from the United States\"}",
        "gold_query": "SELECT BaseballTeams.teamname FROM Countries JOIN BaseballTeams ON Countries.id = BaseballTeams.countryId WHERE Countries.name = 'United States' UNION SELECT BasketballTeams.teamname FROM Countries JOIN BasketballTeams ON Countries.id = BasketballTeams.countryId WHERE Countries.name = 'United States'"
    },
    {
        "index": 1039,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_1tab_val_retail_outlets/attachment_1tab_val_retail_outlets.sqlite",
        "question": "Show me duty-free shops and souvenir stores that are located at Terminal 3.",
        "schema_without_content": "Airports : id, name, city | Terminals : id, airportId, terminalName | Gates : id, terminalId, gateNumber | Flights : flightID, departureGateId, arrivalGateId, departureTime, arrivalTime, departureAirportId, arrivalAirportId | RetailOutlets : id, name, type, location, terminalId",
        "schema_with_content": "Airports : id (4, 1, 5), name ('SEA Seattle/Tacoma', 'LAX International', 'JFK International'), city ('New York', 'Atlanta', 'Chicago') | Terminals : id (6, 5, 4), airportId (2, 1, 1), terminalName ('Terminal 2', 'Terminal D', 'Terminal A') | Gates : id (2, 3, 5), terminalId (2, 3, 4), gateNumber (10, 20, 30) | Flights : flightID (3, 5, 4), departureGateId (3, 5, 4), arrivalGateId (3, 4, 5), departureTime ('2022-09-01 11:00:00', '2022-09-01 08:00:00', '2022-09-01 10:00:00'), arrivalTime ('2022-09-01 12:00:00', '2022-09-01 11:00:00', '2022-09-01 08:00:00'), departureAirportId (1, 1, 1), arrivalAirportId (2, 2, 2) | RetailOutlets : id (6, 1, 3), name ('Outlet 2', 'Outlet 4', 'Outlet 7'), type ('Restaurant', 'Duty-Free Shop', 'Souvenir Store'), location ('Terminal 3', 'Terminal 2', 'Concourse F'), terminalId (2, 3, 3)",
        "ambiguous_queries": [
            "SELECT RetailOutlets.Name FROM RetailOutlets WHERE (RetailOutlets.type = 'Duty-Free Shop' OR RetailOutlets.type = 'Souvenir Store') AND RetailOutlets.location = 'Terminal 3'",
            "SELECT RetailOutlets.Name FROM RetailOutlets WHERE RetailOutlets.type = 'Duty-Free Shop' OR RetailOutlets.type = 'Souvenir Store' AND RetailOutlets.location = 'Terminal 3'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"duty-free shops and souvenir stores that are located at Terminal 3\": [\"souvenir stores that are located at Terminal 3 and duty-free shops that are located at Terminal 3\", \"souvenir stores that are located at Terminal 3 and duty-free shops\"]}"
        },
        "clarification_context": "\"duty-free shops and souvenir stores that are located at Terminal 3\" refers to \"souvenir stores that are located at Terminal 3 and duty-free shops that are located at Terminal 3\"",
        "clear_ambiguity": "{\"duty-free shops and souvenir stores that are located at Terminal 3\": \"souvenir stores that are located at Terminal 3 and duty-free shops that are located at Terminal 3\"}",
        "gold_query": "SELECT RetailOutlets.Name FROM RetailOutlets WHERE (RetailOutlets.type = 'Duty-Free Shop' OR RetailOutlets.type = 'Souvenir Store') AND RetailOutlets.location = 'Terminal 3'"
    },
    {
        "index": 1040,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_research_methods/attachment_1tab_val_research_methods.sqlite",
        "question": "Show projects with case studies and interviews about environmental science.",
        "schema_without_content": "Students : id, name, age, major | Instructors : id, name, department | Courses : id, courseName, instructorId | Projects : id, title, researchMethod, topic, studentId, courseId",
        "schema_with_content": "Students : id (3, 4, 2), name ('David', 'Bob', 'Eva'), age (22, 21, 24), major ('Biology', 'Mathematics', 'Physics') | Instructors : id (4, 1, 3), name ('Prof. Johnson', 'Dr. Wilson', 'Dr. Brown'), department ('Mathematics', 'Chemistry', 'Physics') | Courses : id (1, 3, 5), courseName ('Ecology', 'Advanced Calculus', 'Organic Chemistry'), instructorId (2, 1, 5) | Projects : id (1, 7, 8), title ('Impacts of Climate Change on Biodiversity', 'The Impact of Light Pollution on Wildlife', 'Examining Sustainable Practices in Ecotourism'), researchMethod ('Interview', 'Case Study', 'Interview'), topic ('Environmental Science', 'Environmental Science', 'Mathematics'), studentId (1, 4, 9), courseId (8, 1, 3)",
        "ambiguous_queries": [
            "SELECT Projects.title FROM Projects WHERE (Projects.researchMethod = 'Case Study' OR Projects.researchMethod = 'Interview') AND Projects.topic = 'Environmental Science'",
            "SELECT Projects.title FROM Projects WHERE Projects.researchMethod = 'Case Study' OR Projects.researchMethod = 'Interview' AND Projects.topic = 'Environmental Science'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"case studies and interviews about environmental science\": [\"interviews about environmental science and case studies about environmental science\", \"interviews about environmental science and case studies\"]}"
        },
        "clarification_context": "\"case studies and interviews about environmental science\" refers to \"interviews about environmental science and case studies\"",
        "clear_ambiguity": "{\"case studies and interviews about environmental science\": \"interviews about environmental science and case studies\"}",
        "gold_query": "SELECT Projects.title FROM Projects WHERE Projects.researchMethod = 'Case Study' OR Projects.researchMethod = 'Interview' AND Projects.topic = 'Environmental Science'"
    },
    {
        "index": 1041,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_racquet_sports/attachment_1tab_val_racquet_sports.sqlite",
        "question": "Show me all tennis tournaments and golf tournaments sponsored by Nike.",
        "schema_without_content": "RacquetsAndTournaments : ID, EventName, EventType, Sponsor, Participants, PrizeMoney",
        "schema_with_content": "RacquetsAndTournaments : ID (2, 4, 3), EventName ('Summer Grand Slam', 'Reebok Open', 'Nike Golf Classic'), EventType ('Tennis Tournament', 'Tennis Tournament', 'Golf Tournament'), Sponsor ('Reebok', 'Nike', 'Nike'), Participants (64, 128, 64), PrizeMoney (2000000.0, 1000000.0, 1000000.0)",
        "ambiguous_queries": [
            "SELECT RacquetsAndTournaments.EventName FROM RacquetsAndTournaments WHERE (RacquetsAndTournaments.EventType = 'Tennis Tournament' OR RacquetsAndTournaments.EventType = 'Golf Tournament') AND RacquetsAndTournaments.sponsor = 'Nike'",
            "SELECT RacquetsAndTournaments.EventName FROM RacquetsAndTournaments WHERE RacquetsAndTournaments.EventType = 'Tennis Tournament' OR RacquetsAndTournaments.EventType = 'Golf Tournament' AND RacquetsAndTournaments.sponsor = 'Nike'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"tennis tournaments and golf tournaments sponsored by Nike\": [\"golf tournaments sponsored by Nike and tennis tournaments sponsored by Nike\", \"golf tournaments sponsored by Nike and tennis tournaments\"]}"
        },
        "clarification_context": "\"tennis tournaments and golf tournaments sponsored by Nike\" refers to \"golf tournaments sponsored by Nike and tennis tournaments\"",
        "clear_ambiguity": "{\"tennis tournaments and golf tournaments sponsored by Nike\": \"golf tournaments sponsored by Nike and tennis tournaments\"}",
        "gold_query": "SELECT RacquetsAndTournaments.EventName FROM RacquetsAndTournaments WHERE RacquetsAndTournaments.EventType = 'Tennis Tournament' OR RacquetsAndTournaments.EventType = 'Golf Tournament' AND RacquetsAndTournaments.sponsor = 'Nike'"
    },
    {
        "index": 1042,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_award_programs/attachment_1tab_val_award_programs.sqlite",
        "question": "Show me all diplomas and certificates that require passing an exam.",
        "schema_without_content": "Students : StudentID, FirstName, LastName, BirthDate, Email | Teachers : TeacherID, FirstName, LastName, HireDate, Email | Awards : AwardType, Description | Enrollments : EnrollmentID, CourseID, StudentID, TeacherID, DateEnrolled | Courses : CourseID, Title, CreditHours, CompletionRequirements, AwardProgram, UniqueConstraint",
        "schema_with_content": "Students : StudentID (1), FirstName ('John'), LastName ('Doe'), BirthDate ('1990-01-01'), Email ('john.doe@example.com') | Teachers : TeacherID (1), FirstName ('Jane'), LastName ('Smith'), HireDate ('2010-06-01'), Email ('jane.smith@example.com') | Awards : AwardType ('Diploma'), Description ('This award represents completion of a program.') | Enrollments : EnrollmentID (2, 1), CourseID (1, 2), StudentID (1, 1), TeacherID (2, 2), DateEnrolled ('2020-08-15', '2020-08-15') | Courses : CourseID (2, 1, 3), Title ('Web Development Basics', 'Introduction to Programming', 'Database Management'), CreditHours (3, 4, 3), CompletionRequirements ('Passing Exam', 'Project Submission', 'Passing Exam'), AwardProgram ('Diploma', 'Diploma', 'Certificate'), UniqueConstraint ()",
        "ambiguous_queries": [
            "SELECT Courses.Title FROM Courses WHERE (Courses.AwardProgram = 'Diploma' OR Courses.AwardProgram = 'Certificate') AND Courses.CompletionRequirements = 'Passing Exam'",
            "SELECT Courses.Title FROM Courses WHERE Courses.AwardProgram = 'Diploma' OR Courses.AwardProgram = 'Certificate' AND Courses.CompletionRequirements = 'Passing Exam'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"diplomas and certificates that require passing an exam\": [\"certificates that require passing an exam and diplomas that require passing an exam\", \"certificates that require passing an exam and diplomas\"]}"
        },
        "clarification_context": "\"diplomas and certificates that require passing an exam\" refers to \"certificates that require passing an exam and diplomas\"",
        "clear_ambiguity": "{\"diplomas and certificates that require passing an exam\": \"certificates that require passing an exam and diplomas\"}",
        "gold_query": "SELECT Courses.Title FROM Courses WHERE Courses.AwardProgram = 'Diploma' OR Courses.AwardProgram = 'Certificate' AND Courses.CompletionRequirements = 'Passing Exam'"
    },
    {
        "index": 1043,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
        "question": "List all chemists and geoscientists from MIT.",
        "schema_without_content": "Companies : id, name, address | Departments : id, name | EarthSciencesJobs : id, jobTitle, departmentId, companyId | Employees : id, title, startDate, endDate, university, FullName | Education : employeeId, degree, major, institution, yearGraduated",
        "schema_with_content": "Companies : id (5, 2, 1), name ('Company C', 'Company B', 'Company A'), address ('456 Elm St', '789 Oak St', '098 Maple Ave') | Departments : id (5, 3, 2), name ('Department of Physics', 'Department of Chemistry', 'Department of Mathematics') | EarthSciencesJobs : id (2, 5, 4), jobTitle ('Research Scientist', 'Teaching Assistant', 'Laboratory Technician'), departmentId (3, 1, 2), companyId (4, 5, 3) | Employees : id (2, 5, 3), title ('Engineer', 'Chemist', 'Chemist'), startDate ('2015-01-01', '2010-01-01', '2010-01-01'), endDate (), university ('Caltech', 'Stanford', 'UCLA'), FullName ('Emily White', 'Michael Brown', 'John Doe') | Education : employeeId (), degree ('MS', 'MA', 'BA'), major ('Chemistry', 'Computational Science', 'Biology'), institution ('Columbia', 'Berkeley', 'Harvard'), yearGraduated (2014, 2008, 2010)",
        "ambiguous_queries": [
            "SELECT Employees.FullName FROM Employees WHERE (Employees.title = 'Chemist' OR Employees.title = 'Geoscientist') AND Employees.university = 'MIT'",
            "SELECT Employees.FullName FROM Employees WHERE Employees.title = 'Chemist' OR Employees.title = 'Geoscientist' AND Employees.university = 'MIT'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"chemists and geoscientists from MIT\": [\"geoscientists from MIT and chemists from MIT\", \"geoscientists from MIT and chemists\"]}"
        },
        "clarification_context": "\"chemists and geoscientists from MIT\" refers to \"geoscientists from MIT and chemists\"",
        "clear_ambiguity": "{\"chemists and geoscientists from MIT\": \"geoscientists from MIT and chemists\"}",
        "gold_query": "SELECT Employees.FullName FROM Employees WHERE Employees.title = 'Chemist' OR Employees.title = 'Geoscientist' AND Employees.university = 'MIT'"
    },
    {
        "index": 1044,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_ref_academic_performance_metrics/attachment_2tab_ref_academic_performance_metrics.sqlite",
        "question": "Display attendance records and grades for White.",
        "schema_without_content": "Students : student_id, first_name, last_name | Classes : class_id, course_name, teacher_name | Enrollments : enrollment_id, student_id, class_id | Attendance : attendance_id, student_id, date_attended | Grades : grade_id, student_id, class_id, grade",
        "schema_with_content": "Students : student_id (4, 1, 2), first_name ('David', 'Eve', 'Alice'), last_name ('Johnson', 'White', 'Smith') | Classes : class_id (1, 4, 5), course_name ('Science', 'History', 'Art'), teacher_name ('Ms. Blue', 'Prof. Yellow', 'Mr. Brown') | Enrollments : enrollment_id (3, 4, 1), student_id (4, 1, 3), class_id (5, 2, 3) | Attendance : attendance_id (2, 3, 1), student_id (3, 2, 4), date_attended ('2023-01-01 10:00:00', '2023-01-01 10:00:00', '2023-01-02 10:00:00') | Grades : grade_id (5, 2, 4), student_id (5, 2, 3), class_id (5, 3, 2), grade (9.5, 7, 8.5)",
        "ambiguous_queries": [
            "SELECT Attendance.date_attended FROM Students JOIN Attendance ON Students.student_id = Attendance.student_id WHERE Students.last_name = 'White' UNION SELECT Grades.grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id WHERE Students.last_name = 'White'",
            "SELECT Attendance.date_attended FROM Students JOIN Attendance ON Students.student_id = Attendance.student_id UNION SELECT Grades.grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id WHERE Students.last_name = 'White'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"attendance records and grades for White\": [\"grades for White and attendance records for White\", \"grades for White and attendance records\"]}"
        },
        "clarification_context": "\"attendance records and grades for White\" refers to \"grades for White and attendance records for White\"",
        "clear_ambiguity": "{\"attendance records and grades for White\": \"grades for White and attendance records for White\"}",
        "gold_query": "SELECT Attendance.date_attended FROM Students JOIN Attendance ON Students.student_id = Attendance.student_id WHERE Students.last_name = 'White' UNION SELECT Grades.grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id WHERE Students.last_name = 'White'"
    },
    {
        "index": 1045,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
        "question": "Give me the mortgage amounts and home equity loan amounts with 30 years of repayment.",
        "schema_without_content": "Customers : customerID, firstName, lastName, dateOfBirth, address | Accounts : accountID, customerID, balance | Mortgages : mortgageID, accountID, loanType, principalAmount, annualInterestRate, repaymentPeriod | SavingsAccounts : savingsID, accountID, interestRate",
        "schema_with_content": "Customers : customerID (3, 5, 1), firstName ('Bob', 'John', 'Alice'), lastName ('Doe', 'Smith', 'Williams'), dateOfBirth ('1985-09-20', '1992-11-22', '1987-06-12'), address ('Seattle', 'Los Angeles', 'New York') | Accounts : accountID (1, 2, 5), customerID (4, 2, 1), balance (500.0, -500.0, -300.0) | Mortgages : mortgageID (5, 3, 4), accountID (1, 3, 4), loanType ('Mortgage', 'Mortgage', 'Mortgage'), principalAmount (200000.0, 50000.0, 150000.0), annualInterestRate (0.05, 0.07, 0.06), repaymentPeriod ('15', '30', '30') | SavingsAccounts : savingsID (2, 4, 5), accountID (3, 2, 1), interestRate (0.03, 0.05, 0.04)",
        "ambiguous_queries": [
            "SELECT Mortgages.principalAmount FROM Mortgages WHERE (Mortgages.loanType = 'Mortgage' OR Mortgages.loanType = 'Home Equity Loan') AND Mortgages.repaymentPeriod = '30'",
            "SELECT Mortgages.principalAmount FROM Mortgages WHERE Mortgages.loanType = 'Mortgage' OR Mortgages.loanType = 'Home Equity Loan' AND Mortgages.repaymentPeriod = '30'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"mortgage amounts and home equity loan amounts with 30 years of repayment\": [\"home equity loan amounts with 30 years of repayment and mortgage amounts with 30 years of repayment\", \"home equity loan amounts with 30 years of repayment and mortgage amounts\"]}"
        },
        "clarification_context": "\"mortgage amounts and home equity loan amounts with 30 years of repayment\" refers to \"home equity loan amounts with 30 years of repayment and mortgage amounts\"",
        "clear_ambiguity": "{\"mortgage amounts and home equity loan amounts with 30 years of repayment\": \"home equity loan amounts with 30 years of repayment and mortgage amounts\"}",
        "gold_query": "SELECT Mortgages.principalAmount FROM Mortgages WHERE Mortgages.loanType = 'Mortgage' OR Mortgages.loanType = 'Home Equity Loan' AND Mortgages.repaymentPeriod = '30'"
    },
    {
        "index": 1046,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_val_production_role1/attachment_2tab_val_production_role1.sqlite",
        "question": "Show me scripts and editors with a deadline of 21.04.03.",
        "schema_without_content": "Scripts : ID, Title, Genre, Duration, Scriptwriter, Deadline | Editors : ID, Name, Specialization, Experience, Editor, Deadline | Actors : ID, Name, Age, Role | Directors : ID, Name, Movies_Directed, Director | ProductionHouses : ID, Name, Location | MovieCrew : ID, Position, PersonID, HouseID",
        "schema_with_content": "Scripts : ID (2, 1, 3), Title ('Inception', 'Interstellar', 'The Dark Knight'), Genre ('Thriller', 'Science Fiction', 'Action'), Duration (152.0, 90.0, 168.0), Scriptwriter ('Christopher Nolan', 'Christopher Nolan', 'Christopher Nolan'), Deadline ('20.07.01', '19.07.01', '21.04.03') | Editors : ID (1, 2, 3), Name ('Martin Scorsese', 'Guillermo del Toro', 'Michael Bay'), Specialization ('Drama', 'Fantasy', 'Action'), Experience (25, 40, 30), Editor (\"Pan's Labyrinth\", 'Taxi Driver', 'Transformers'), Deadline ('21.04.03', '17.06.12', '15.05.01') | Actors : ID (1, 2, 3), Name ('Tom Hardy', 'Leonardo DiCaprio', 'Ellen Page'), Age (45, 35, 40), Role ('Dom Cobb', 'Bane', 'Cole Tatum') | Directors : ID (2, 3, 1), Name ('Steven Spielberg', 'Quentin Tarantino', 'James Cameron'), Movies_Directed (40, 30, 50), Director ('Indiana Jones', 'Pulp Fiction', 'Avatar') | ProductionHouses : ID (3, 2, 1), Name ('Paramount Pictures', 'Warner Bros.', 'Universal Studios'), Location ('Los Angeles', 'Los Angeles', 'New York') | MovieCrew : ID (4, 2, 1), Position ('Producer', 'Sound Engineer', 'Set Designer'), PersonID (5, 1, 4), HouseID (1, 3, 2)",
        "ambiguous_queries": [
            "SELECT Scripts.Title as Name FROM Scripts WHERE Scripts.Deadline = '21.04.03' UNION SELECT Editors.Name FROM Editors WHERE Editors.Deadline = '21.04.03'",
            "SELECT Scripts.Title as Name FROM Scripts UNION SELECT Editors.Name FROM Editors WHERE Editors.Deadline = '21.04.03'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"scripts and editors with a deadline of 21.04.03\": [\"editors with a deadline of 21.04.03 and scripts with a deadline of 21.04.03\", \"editors with a deadline of 21.04.03 and scripts\"]}"
        },
        "clarification_context": "\"scripts and editors with a deadline of 21.04.03\" refers to \"editors with a deadline of 21.04.03 and scripts\"",
        "clear_ambiguity": "{\"scripts and editors with a deadline of 21.04.03\": \"editors with a deadline of 21.04.03 and scripts\"}",
        "gold_query": "SELECT Scripts.Title as Name FROM Scripts UNION SELECT Editors.Name FROM Editors WHERE Editors.Deadline = '21.04.03'"
    },
    {
        "index": 1047,
        "db_id": "Hospitality",
        "ambig_type": "attachment",
        "db_file": "attachment/Hospitality/attachment_2tab_val_accommodation2/attachment_2tab_val_accommodation2.sqlite",
        "question": "Display chalets and cabins that cost $200 per night.",
        "schema_without_content": "Chalets : id, chaletName, pricePerNight, location, capacity | Cabins : id, cabinName, pricePerNight, location, capacity | Guests : id, firstname, lastname, email, phoneNumber, checkIn, checkOut | Bookings : id, guestId, chaletId, bookingDate, totalCost | Reviews : id, guestId, chaletId, rating, comment, reviewDate",
        "schema_with_content": "Chalets : id (4, 1, 5), chaletName ('Aurora', 'Starlight', 'Moonlight'), pricePerNight (200.0, 275.0, 250.0), location ('City', 'Forest', 'Mountain'), capacity (8, 10, 6) | Cabins : id (1, 5, 2), cabinName ('Seaside', 'Valley', 'Riverview'), pricePerNight (300.0, 275.0, 150.0), location ('Coast', 'Forest', 'Riverside'), capacity (8, 4, 6) | Guests : id (5, 1, 4), firstname ('Samantha', 'Jane', 'Jack'), lastname ('Smith', 'Black', 'Brown'), email ('jack@gmail.com', 'samantha@gmail.com', 'jane@gmail.com'), phoneNumber ('1112223334', '3456789123', '4321123456'), checkIn ('2022-01-01 10:00:00', '2022-01-01 12:00:00', '2022-01-01 14:00:00'), checkOut ('2022-01-05 12:00:00', '2022-01-05 10:00:00', '2022-01-05 13:00:00') | Bookings : id (4, 5, 3), guestId (1, 2, 5), chaletId (5, 1, 2), bookingDate ('2022-01-01 00:00:00', '2022-01-01 00:00:00', '2022-01-01 00:00:00'), totalCost (1200.0, 2000.0, 1500.0) | Reviews : id (5, 4, 3), guestId (1, 3, 5), chaletId (1, 4, 3), rating (4, 5, 3), comment ('Good experience!', 'Fine, could have been better.', 'Excellent service!'), reviewDate ('2022-01-01 00:00:00', '2022-01-01 00:00:00', '2022-01-01 00:00:00')",
        "ambiguous_queries": [
            "SELECT Chalets.chaletName as name FROM Chalets WHERE Chalets.pricePerNight = 200.0 UNION SELECT Cabins.cabinName as name FROM Cabins WHERE Cabins.pricePerNight = 200.0",
            "SELECT Chalets.chaletName as name FROM Chalets UNION SELECT Cabins.cabinName as name FROM Cabins WHERE Cabins.pricePerNight = 200.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"chalets and cabins that cost $200 per night\": [\"cabins that cost $200 per night and chalets that cost $200 per night\", \"cabins that cost $200 per night and chalets\"]}"
        },
        "clarification_context": "\"chalets and cabins that cost $200 per night\" refers to \"cabins that cost $200 per night and chalets\"",
        "clear_ambiguity": "{\"chalets and cabins that cost $200 per night\": \"cabins that cost $200 per night and chalets\"}",
        "gold_query": "SELECT Chalets.chaletName as name FROM Chalets UNION SELECT Cabins.cabinName as name FROM Cabins WHERE Cabins.pricePerNight = 200.0"
    },
    {
        "index": 1048,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_airport_systems/attachment_2tab_val_airport_systems.sqlite",
        "question": "Display navigation systems and communication systems used at Heathrow Airport.",
        "schema_without_content": "Navigation_Systems : SystemID, Airport, TypeOfSystem, YearInstalled, MaintenanceFrequency | Communication_Systems : SystemID, Airport, TypeOfSystem, FrequencyInUse, LastUpgradeYear | Runways : ID, Airport, Length, Width, SurfaceType | Terminals : ID, Airport, Name, NumberOfGates, ServicesOffered",
        "schema_with_content": "Navigation_Systems : SystemID (1, 2), Airport ('JFK', 'Heathrow'), TypeOfSystem ('VOR/DME', 'ILS'), YearInstalled (2013, 2008), MaintenanceFrequency ('Annually', 'Biannual') | Communication_Systems : SystemID (2, 1), Airport ('JFK', 'Heathrow'), TypeOfSystem ('Distance Measuring Equipment', 'VHF Omnidirectional Range'), FrequencyInUse (0, 1), LastUpgradeYear (2019, 2016) | Runways : ID (2, 1), Airport ('JFK', 'Heathrow'), Length (10000.0, 3200.0), Width (150.0, 45.0), SurfaceType ('Concrete', 'Asphalt') | Terminals : ID (2, 1), Airport ('Heathrow', 'JFK'), Name ('Terminal 1', 'Terminal 5'), NumberOfGates (30, 27), ServicesOffered ('Shopping, Dining, Baggage Claim', 'Shopping, Dining, Baggage Claim')",
        "ambiguous_queries": [
            "SELECT Navigation_Systems.TypeOfSystem FROM Navigation_Systems WHERE Navigation_Systems.Airport = 'Heathrow' UNION SELECT Communication_Systems.TypeOfSystem FROM Communication_Systems WHERE Communication_Systems.Airport = 'Heathrow'",
            "SELECT Navigation_Systems.TypeOfSystem FROM Navigation_Systems UNION SELECT Communication_Systems.TypeOfSystem FROM Communication_Systems WHERE Communication_Systems.Airport = 'Heathrow'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"navigation systems and communication systems used at Heathrow Airport\": [\"communication systems used at Heathrow Airport and navigation systems used at Heathrow Airport\", \"communication systems used at Heathrow Airport and navigation systems\"]}"
        },
        "clarification_context": "\"navigation systems and communication systems used at Heathrow Airport\" refers to \"communication systems used at Heathrow Airport and navigation systems\"",
        "clear_ambiguity": "{\"navigation systems and communication systems used at Heathrow Airport\": \"communication systems used at Heathrow Airport and navigation systems\"}",
        "gold_query": "SELECT Navigation_Systems.TypeOfSystem FROM Navigation_Systems UNION SELECT Communication_Systems.TypeOfSystem FROM Communication_Systems WHERE Communication_Systems.Airport = 'Heathrow'"
    },
    {
        "index": 1049,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
        "question": "Display podcasts and radio shows with hosts with 10 years of experience.",
        "schema_without_content": "Podcasters : id, name, location, years_experience | Shows : id, title, genre, network, audio_format, host | Episodes : id, show_id, episode_number, release_date, duration, description | Guests : id, full_name, occupation, guest_on, appearance_episode_number | EpisodeGuests : id, episode_id, guest_id, role, appearance_duration | Reviews : id, reviewer_name, rating, comments, show_id, review_date",
        "schema_with_content": "Podcasters : id (1, 2), name ('Alex Johnson', 'Jane Doe'), location ('Los Angeles', 'New York'), years_experience (8, 10) | Shows : id (3, 2, 4), title ('The Alex Johnson Show', 'The Morning Rush', 'Morning Coffee'), genre ('Talk Show', 'Talk Show', 'Comedy'), network ('Fox Radio', 'ABC', 'CBS Radio'), audio_format ('Radio Show', 'Podcast', 'Podcast'), host ('Jane Doe', 'Jane Doe', 'Alex Johnson') | Episodes : id (2, 1), show_id (2, 1), episode_number (1, 1), release_date ('2023-01-08', '2023-01-01'), duration (60, 60), description ('Episode about comedy.', 'Episode about coffee.') | Guests : id (1, 2), full_name ('John Smith', 'Emily Davis'), occupation ('Actor', 'Author'), guest_on ('The Alex Johnson Show', 'Laughing Matters'), appearance_episode_number (1, 1) | EpisodeGuests : id (1, 2), episode_id (1, 1), guest_id (1, 2), role ('Panelist', 'Interviewee'), appearance_duration (25, 25) | Reviews : id (2, 1), reviewer_name ('Alice Brown', 'Bob White'), rating (4, 5), comments ('Great podcast!', 'Funny episodes.'), show_id (1, 2), review_date ('2024-03-07 21:13:47', '2024-03-07 21:13:47')",
        "ambiguous_queries": [
            "SELECT Shows.title FROM Shows JOIN Podcasters ON Shows.host = Podcasters.name WHERE (Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show') AND Podcasters.years_experience = 10",
            "SELECT Shows.title FROM Shows JOIN Podcasters ON Shows.host = Podcasters.name WHERE Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show' AND Podcasters.years_experience = 10"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"podcasts and radio shows with hosts\": [\"radio shows with hosts and podcasts with hosts\", \"radio shows with hosts and podcasts\"]}"
        },
        "clarification_context": "\"podcasts and radio shows with hosts\" refers to \"radio shows with hosts and podcasts\"",
        "clear_ambiguity": "{\"podcasts and radio shows with hosts\": \"radio shows with hosts and podcasts\"}",
        "gold_query": "SELECT Shows.title FROM Shows JOIN Podcasters ON Shows.host = Podcasters.name WHERE Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show' AND Podcasters.years_experience = 10"
    },
    {
        "index": 1050,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_ref_board_member/attachment_1tab_ref_board_member.sqlite",
        "question": "Provide the independent directors and executive managers of Global Corp.",
        "schema_without_content": "Organizations : ID, Name | Board_Members : ID, MemberName, Role, OrganizationID | Customers : CustomerID, FirstName, LastName, DateOfBirth, EmailAddress, PhoneNumber, AddressLine1, AddressLine2, City, State, ZipCode, Country | Accounts : AccountID, CustomerID, Balance, Type | Loans : LoanID, CustomerID, Amount, InterestRate, StartDate, EndDate, Status",
        "schema_with_content": "Organizations : ID (5, 2, 3), Name ('Bank Solutions', 'Investment Holdings', 'Financial Group') | Board_Members : ID (1, 2, 4), MemberName ('Jane Doe', 'Emily Brown', 'John Smith'), Role ('Independent Director', 'Executive Manager', 'Independent Director'), OrganizationID (3, 1, 2) | Customers : CustomerID (1, 4, 3), FirstName ('Carol', 'Bob', 'Daniel'), LastName ('Davis', 'Smith', 'Johnson'), DateOfBirth ('1992-05-25', '1991-04-18', '1985-06-15'), EmailAddress ('alice@example.com', 'bob@example.com', 'daniel@example.com'), PhoneNumber ('+111222333', '+123456789', '+44556677889'), AddressLine1 ('789 Oak St.', '321 Fir St.', '456 Elm St.'), AddressLine2 ('', '', ''), City ('Chicago', 'Houston', 'New York'), State ('IL', 'TX', 'CA'), ZipCode ('60601', '10001', '85001'), Country ('USA', 'USA', 'USA') | Accounts : AccountID (5, 2, 1), CustomerID (1, 2, 3), Balance (5000.0, 1000.0, 2000.0), Type ('Checking', 'Checking', 'Savings') | Loans : LoanID (3, 2, 5), CustomerID (3, 5, 2), Amount (5000.0, 15000.0, 10000.0), InterestRate (5.0, 5.25, 4.75), StartDate ('2022-01-01', '2021-07-01', '2021-10-01'), EndDate ('2023-06-30', '2024-12-31', '2022-12-31'), Status ('Approved', 'Disbursed', 'Repaid')",
        "ambiguous_queries": [
            "SELECT Board_Members.MemberName FROM Board_Members JOIN Organizations ON Board_Members.OrganizationID = Organizations.ID WHERE (Board_Members.Role = 'Independent Director' OR Board_Members.Role = 'Executive Manager') AND Organizations.Name = 'Global Corp'",
            "SELECT Board_Members.MemberName FROM Board_Members JOIN Organizations ON Board_Members.OrganizationID = Organizations.ID WHERE Board_Members.Role = 'Independent Director' OR Board_Members.Role = 'Executive Manager' AND Organizations.Name = 'Global Corp'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"directors and executive managers of Global Corp\": [\"executive managers of Global Corp and directors of Global Corp\", \"executive managers of Global Corp and directors\"]}"
        },
        "clarification_context": "\"directors and executive managers of Global Corp\" refers to \"executive managers of Global Corp and directors of Global Corp\"",
        "clear_ambiguity": "{\"directors and executive managers of Global Corp\": \"executive managers of Global Corp and directors of Global Corp\"}",
        "gold_query": "SELECT Board_Members.MemberName FROM Board_Members JOIN Organizations ON Board_Members.OrganizationID = Organizations.ID WHERE (Board_Members.Role = 'Independent Director' OR Board_Members.Role = 'Executive Manager') AND Organizations.Name = 'Global Corp'"
    },
    {
        "index": 1051,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_val_music_band/attachment_2tab_val_music_band.sqlite",
        "question": "Show jazz bands and rock bands founded in 1970.",
        "schema_without_content": "Jazz_Bands : Band, Founding_Year, Genre, Lead_Singer, Instruments | Rock_Bands : Band, Founding_Year, Genre, Lead_Guitarist, Drummer | Concerts : Date, Location, Headliner, Openers, Ticket_Price | Venues : Name, Address, Capacity | Fans : Name, Age, Preferred_Genre | Music_Labels : Label_Name, Artists, Year_Established",
        "schema_with_content": "Jazz_Bands : Band ('John Coltrane Quartet', 'Miles Davis Quintet', 'Dave Brubeck Quartet'), Founding_Year (1953, 1965, 1970), Genre ('Jazz', 'Jazz', 'Fusion'), Lead_Singer ('Miles Davis', 'Dave Brubeck', 'Joe Zawinul'), Instruments ('Piano', 'Saxophone', 'Keyboards') | Rock_Bands : Band ('Black Sabbath', 'Deep Purple', 'Queen'), Founding_Year (1973, 1970, 1968), Genre ('Hard Rock', 'Heavy Metal', 'Hard Rock'), Lead_Guitarist ('Tony Iommi', 'Ritchie Blackmore', 'Jimmy Page'), Drummer ('Ian Paice', 'Bill Ward', 'John Bonham') | Concerts : Date ('2022-01-01', '2022-02-01', '2022-03-01'), Location ('Houston', 'New York City', 'San Francisco'), Headliner ('Black Sabbath', 'AC/DC', 'Tool'), Openers ('Slayer', 'Alice in Chains', 'Queen'), Ticket_Price (120.0, 130.0, 150.0) | Venues : Name ('NRG Stadium', 'Staples Center', 'Madison Square Garden'), Address ('Chicago, IL', 'Los Angeles, CA', 'New York, NY'), Capacity (20000, 23500, 19596) | Fans : Name ('Emily Johnson', 'John Doe', 'Jane Smith'), Age (60, 50, 25), Preferred_Genre ('Prog Rock', 'Blues Rock', 'Rock') | Music_Labels : Label_Name ('Universal Music Group', 'Columbia Records', 'EMI'), Artists ('Led Zeppelin, AC/DC, Lynyrd Skynyrd', 'Bob Dylan, Bruce Springsteen, Adele', 'U2, Eminem, Lady Gaga'), Year_Established (1887, 1923, 1958)",
        "ambiguous_queries": [
            "SELECT Jazz_Bands.band FROM Jazz_Bands WHERE Jazz_Bands.Founding_Year = 1970 UNION SELECT Rock_Bands.band FROM Rock_Bands WHERE Rock_Bands.Founding_Year = 1970",
            "SELECT Jazz_Bands.band FROM Jazz_Bands UNION SELECT Rock_Bands.band FROM Rock_Bands WHERE Rock_Bands.Founding_Year = 1970"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"jazz bands and rock bands founded in 1970\": [\"s founded in 1970 and jazz b founded in 1970\", \"s founded in 1970 and jazz b\"]}"
        },
        "clarification_context": "\"jazz bands and rock bands founded in 1970\" refers to \"s founded in 1970 and jazz b\"",
        "clear_ambiguity": "{\"jazz bands and rock bands founded in 1970\": \"s founded in 1970 and jazz b\"}",
        "gold_query": "SELECT Jazz_Bands.band FROM Jazz_Bands UNION SELECT Rock_Bands.band FROM Rock_Bands WHERE Rock_Bands.Founding_Year = 1970"
    },
    {
        "index": 1052,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
        "question": "List all hotels and pods that cost 150.",
        "schema_without_content": "Flights : FlightID, DepartureTime, ArrivalTime, Origin, Destination, AircraftType, SeatsAvailable | Airlines : AirlineID, Name, Headquarters | Pilots : PilotID, FirstName, LastName, LicenseNumber, DateOfBirth | AssignPilotToFlight : FlightID, PilotID | Hotels : HotelID, Name, Location, Price, AccomodationType",
        "schema_with_content": "Flights : FlightID (2, 3, 1), DepartureTime ('2023-07-01 10:00', '2023-07-01 11:00', '2023-07-02 08:00'), ArrivalTime ('2023-07-02 12:00', '2023-07-01 15:00', '2023-07-01 14:00'), Origin ('SF', 'NY', 'LA'), Destination ('MI', 'LA', 'SF'), AircraftType ('Boeing 737', 'Airbus A320', 'Embraer E175'), SeatsAvailable (90, 100, 100) | Airlines : AirlineID (1, 2, 3), Name ('Delta Airlines', 'United Airlines', 'Southwest Airlines'), Headquarters ('Chicago', 'Atlanta', 'Dallas') | Pilots : PilotID (2, 1, 3), FirstName ('Jane', 'John', 'Alice'), LastName ('Smith', 'Doe', 'Wonderland'), LicenseNumber ('ABCD1234', 'XYZL9876', 'EFGH5678'), DateOfBirth ('1990-05-01', '1980-06-01', '1985-08-01') | AssignPilotToFlight : FlightID (3, 2, 1), PilotID (1, 3, 2) | Hotels : HotelID (3, 2, 1), Name ('Grand Plaza', 'Another Sleep Pod', 'Another Airport Hotel'), Location ('Inside the airport premises', 'Close to the city center', 'Far from the city center'), Price (50, 200, 150), AccomodationType ('Pod', 'Hotel', 'Hotel')",
        "ambiguous_queries": [
            "SELECT Hotels.Name FROM Hotels WHERE (Hotels.AccomodationType = 'Hotel' OR Hotels.AccomodationType = 'Pod') AND Hotels.Price = 150",
            "SELECT Hotels.Name FROM Hotels WHERE Hotels.AccomodationType = 'Hotel' OR Hotels.AccomodationType = 'Pod' AND Hotels.Price = 150"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"hotels and pods that cost 150\": [\"pods that cost 150 and hotels that cost 150\", \"pods that cost 150 and hotels\"]}"
        },
        "clarification_context": "\"hotels and pods that cost 150\" refers to \"pods that cost 150 and hotels that cost 150\"",
        "clear_ambiguity": "{\"hotels and pods that cost 150\": \"pods that cost 150 and hotels that cost 150\"}",
        "gold_query": "SELECT Hotels.Name FROM Hotels WHERE (Hotels.AccomodationType = 'Hotel' OR Hotels.AccomodationType = 'Pod') AND Hotels.Price = 150"
    },
    {
        "index": 1053,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_age_group/attachment_1tab_val_age_group.sqlite",
        "question": "Show me children's books and young adult books illustrated by Jane Smith.",
        "schema_without_content": "Author : id, name | Publisher : id, name | Genre : id, genre_name | Character : id, character_name | Book : id, title, age_group, illustrator, author_id, publisher_id, genre_id, main_character_id",
        "schema_with_content": "Author : id (5, 1, 3), name ('John Doe', 'Jane Smith', 'Emily Davis') | Publisher : id (3, 4, 1), name ('STU Publishers', 'ABC Publishers', 'PQR Publishers') | Genre : id (2, 5, 4), genre_name ('Thriller', 'Romance', 'Fantasy') | Character : id (4, 2, 3), character_name ('Eve', 'Alice', 'Bob') | Book : id (1, 3, 4), title ('1984', 'To Kill A Mockingbird', 'Adventures of Tom Sawyer'), age_group ('Young Adult Book', \"Children's Book\", 'General'), illustrator ('George Orwell', 'Harper Lee', 'Mark Twain'), author_id (4, 3, 1), publisher_id (4, 2, 3), genre_id (5, 4, 7), main_character_id (3, 2, 1)",
        "ambiguous_queries": [
            "SELECT Book.title FROM Book WHERE (Book.age_group = \"Children's Book\" OR Book.age_group = 'Young Adult Book') AND Book.illustrator = 'Jane Smith'",
            "SELECT Book.title FROM Book WHERE Book.age_group = \"Children's Book\" OR Book.age_group = 'Young Adult Book' AND Book.illustrator = 'Jane Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"children's books and young adult books illustrated by Jane Smith\": [\"young adult books illustrated by Jane Smith and children's books illustrated by Jane Smith\", \"young adult books illustrated by Jane Smith and children's books\"]}"
        },
        "clarification_context": "\"children's books and young adult books illustrated by Jane Smith\" refers to \"young adult books illustrated by Jane Smith and children's books illustrated by Jane Smith\"",
        "clear_ambiguity": "{\"children's books and young adult books illustrated by Jane Smith\": \"young adult books illustrated by Jane Smith and children's books illustrated by Jane Smith\"}",
        "gold_query": "SELECT Book.title FROM Book WHERE (Book.age_group = \"Children's Book\" OR Book.age_group = 'Young Adult Book') AND Book.illustrator = 'Jane Smith'"
    },
    {
        "index": 1054,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_family_entertainment/attachment_2tab_ref_family_entertainment.sqlite",
        "question": "Provide amusement parks and water parks located in California.",
        "schema_without_content": "Location : id, city, state | AmusementPark : id, name, locationID | WaterPark : id, name, locationID | Rides : id, parkID, rideName, description",
        "schema_with_content": "Location : id (2, 1), city ('Orlando', 'Los Angeles'), state ('California', 'Florida') | AmusementPark : id (1, 2), name ('Disney World', 'Universal Studios Hollywood'), locationID (2, 1) | WaterPark : id (2, 1), name ('Typhoon Lagoon', ' Universal CityWalk'), locationID (2, 1) | Rides : id (3, 1, 5), parkID (1, 1, 2), rideName (\"It's a Small World\", 'Haunted Mansion', 'The Twilight Zone Tower of Terror'), description ('Plunge down a vertical drop on an elevator ride like no other!', 'Experience the thrill of being chased by dinosaurs on this whitewater raft adventure.', 'Help Buzz save the galaxy by blasting away at targets.')",
        "ambiguous_queries": [
            "SELECT AmusementPark.name FROM Location JOIN AmusementPark ON Location.id = AmusementPark.locationID WHERE Location.state = 'California' UNION SELECT WaterPark.name FROM Location JOIN WaterPark ON Location.id = WaterPark.locationID WHERE Location.state = 'California'",
            "SELECT AmusementPark.name FROM Location JOIN AmusementPark ON Location.id = AmusementPark.locationID UNION SELECT WaterPark.name FROM Location JOIN WaterPark ON Location.id = WaterPark.locationID WHERE Location.state = 'California'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"amusement parks and water parks located in California\": [\"water parks located in California and amusement parks located in California\", \"water parks located in California and amusement parks\"]}"
        },
        "clarification_context": "\"amusement parks and water parks located in California\" refers to \"water parks located in California and amusement parks located in California\"",
        "clear_ambiguity": "{\"amusement parks and water parks located in California\": \"water parks located in California and amusement parks located in California\"}",
        "gold_query": "SELECT AmusementPark.name FROM Location JOIN AmusementPark ON Location.id = AmusementPark.locationID WHERE Location.state = 'California' UNION SELECT WaterPark.name FROM Location JOIN WaterPark ON Location.id = WaterPark.locationID WHERE Location.state = 'California'"
    },
    {
        "index": 1055,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_ref_luggage_assistance/attachment_2tab_ref_luggage_assistance.sqlite",
        "question": "I need the luggage trolley IDs and porter IDs available at the departure hall.",
        "schema_without_content": "Available_locations : id, location | Airlines : id, airlineName | Flights : flightID, originLocation, destinationLocation, airlineId | Porters : porterID, serviceType, availableLocation | Bookings : bookingID, customerName, flightId, luggageTrolleyId, porterId | Luggage_trolleys : trolleyID, TrolleySerialNumber, availableLocation",
        "schema_with_content": "Available_locations : id (3, 1, 4), location ('Baggage Claim', 'Gate C', 'Exit D') | Airlines : id (4, 3, 5), airlineName ('United Airlines', 'JetBlue Airways', 'Southwest Airlines') | Flights : flightID (4, 3, 1), originLocation (3, 1, 2), destinationLocation (3, 1, 4), airlineId (5, 2, 4) | Porters : porterID (2, 1), serviceType ('Golf Cart Service', 'Assistance'), availableLocation (1, 2) | Bookings : bookingID (2, 3, 5), customerName ('John Doe', 'David Brown', 'Jane Smith'), flightId (4, 2, 1), luggageTrolleyId (2, 1, 1), porterId (2, 1, 1) | Luggage_trolleys : trolleyID (1, 2), TrolleySerialNumber (123, 234), availableLocation (1, 2)",
        "ambiguous_queries": [
            "SELECT Luggage_trolleys.TrolleyID as ID FROM Available_locations JOIN Luggage_trolleys ON Available_locations.id = Luggage_trolleys.availableLocation WHERE Available_locations.location = 'Departure Hall' UNION SELECT Porters.PorterID as ID FROM Available_locations JOIN Porters ON Available_locations.id = Porters.availableLocation WHERE Available_locations.location = 'Departure Hall'",
            "SELECT Luggage_trolleys.TrolleyID as ID FROM Available_locations JOIN Luggage_trolleys ON Available_locations.id = Luggage_trolleys.availableLocation UNION SELECT Porters.PorterID as ID FROM Available_locations JOIN Porters ON Available_locations.id = Porters.availableLocation WHERE Available_locations.location = 'Departure Hall'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"luggage trolley IDs and porter IDs available at the departure hall\": [\"porter IDs available at the departure hall and luggage trolley IDs available at the departure hall\", \"porter IDs available at the departure hall and luggage trolley IDs\"]}"
        },
        "clarification_context": "\"luggage trolley IDs and porter IDs available at the departure hall\" refers to \"porter IDs available at the departure hall and luggage trolley IDs available at the departure hall\"",
        "clear_ambiguity": "{\"luggage trolley IDs and porter IDs available at the departure hall\": \"porter IDs available at the departure hall and luggage trolley IDs available at the departure hall\"}",
        "gold_query": "SELECT Luggage_trolleys.TrolleyID as ID FROM Available_locations JOIN Luggage_trolleys ON Available_locations.id = Luggage_trolleys.availableLocation WHERE Available_locations.location = 'Departure Hall' UNION SELECT Porters.PorterID as ID FROM Available_locations JOIN Porters ON Available_locations.id = Porters.availableLocation WHERE Available_locations.location = 'Departure Hall'"
    },
    {
        "index": 1056,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_val_business_strategy/attachment_1tab_val_business_strategy.sqlite",
        "question": "Display media franchises and cross-platform expansions with liberals as the target audience.",
        "schema_without_content": "MediaFranchises : ID, Name, Business_Strategy, Audience, OtherColumn1, OtherColumn2 | CrossPlatformExpansions : ID, Name, Business_Strategy, Audience, Platform, Year | Articles : ID, Title, Content, PublicationDate, AuthorID | Authors : ID, FirstName, LastName, Role, AffiliatedMediaFranchiseID | Readers : ID, FirstName, LastName, AgeGroup, PreferredGenre, FavouriteMediaFranchiseID",
        "schema_with_content": "MediaFranchises : ID (1, 2, 3), Name ('The Huffington Post', 'New York Times', 'Breitbart News Network'), Business_Strategy ('Media Franchise', 'Media Franchise', 'Cross-Platform Expansion'), Audience ('Liberals', 'Conservatives', 'Liberals'), OtherColumn1 ('News Aggregator', 'Print', 'Website'), OtherColumn2 ('Online Magazine', 'Digital', 'Multimedia') | CrossPlatformExpansions : ID (1, 2, 3), Name ('HBO Max', 'Netflix Original Series', 'Disney+'), Business_Strategy ('Cross-Platform Expansion', 'Cross-Platform Expansion', 'Cross-Platform Expansion'), Audience ('Family', 'Various', 'General'), Platform ('Streaming', 'Streaming', 'Streaming'), Year (2020, 2013, 2019) | Articles : ID (3, 2, 1), Title ('Article about Entertainment', 'Article about Politics', 'Opinion Article'), Content ('Content of entertainment article...', 'Content of opinion article...', 'Content of politics article...'), PublicationDate ('2021-08-02 12:00:00', '2021-08-01 12:00:00', '2021-08-03 12:00:00'), AuthorID (1, 3, 2) | Authors : ID (2, 3, 1), FirstName ('Jane', 'John', 'Michael'), LastName ('Johnson', 'Doe', 'Smith'), Role ('Editorial Writer', 'Opinion Columnist', 'Reporter'), AffiliatedMediaFranchiseID (1, 2, 3) | Readers : ID (1, 3, 2), FirstName ('Alice', 'Carol', 'Bob'), LastName ('Davis', 'Williams', 'Brown'), AgeGroup ('Young Adult', 'Adult', 'Older Adult'), PreferredGenre ('Politics', 'Literature', 'Entertainment'), FavouriteMediaFranchiseID (1, 3, 2)",
        "ambiguous_queries": [
            "SELECT MediaFranchises.name FROM MediaFranchises WHERE (MediaFranchises.Business_Strategy = 'Media Franchise' OR MediaFranchises.Business_Strategy = 'Cross-Platform Expansion') AND MediaFranchises.Audience = 'Liberals'",
            "SELECT MediaFranchises.name FROM MediaFranchises WHERE MediaFranchises.Business_Strategy = 'Media Franchise' OR MediaFranchises.Business_Strategy = 'Cross-Platform Expansion' AND MediaFranchises.Audience = 'Liberals'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"media franchises and cross-platform expansions with liberals as the target audience\": [\"cross-platform expansions with liberals as the target audience and media franchises with liberals as the target audience\", \"cross-platform expansions with liberals as the target audience and media franchises\"]}"
        },
        "clarification_context": "\"media franchises and cross-platform expansions with liberals as the target audience\" refers to \"cross-platform expansions with liberals as the target audience and media franchises with liberals as the target audience\"",
        "clear_ambiguity": "{\"media franchises and cross-platform expansions with liberals as the target audience\": \"cross-platform expansions with liberals as the target audience and media franchises with liberals as the target audience\"}",
        "gold_query": "SELECT MediaFranchises.name FROM MediaFranchises WHERE (MediaFranchises.Business_Strategy = 'Media Franchise' OR MediaFranchises.Business_Strategy = 'Cross-Platform Expansion') AND MediaFranchises.Audience = 'Liberals'"
    },
    {
        "index": 1057,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
        "question": "Show pop songs and hip hop songs performed at Madison Square Garden.",
        "schema_without_content": "Music_Genres : id, name | Songs : id, title, artist_id, album_id, concert_id, music_genre_id | Artists : id, name | Albums : id, release_date, artist_id | Concerts : id, venue, date",
        "schema_with_content": "Music_Genres : id (1, 2), name ('Pop Song', 'Hip Hop Song') | Songs : id (2, 3, 4), title ('Rap2', 'Tune2', 'Tune1'), artist_id (3, 4, 2), album_id (3, 1, 4), concert_id (1, 3, 5), music_genre_id (2, 1, 2) | Artists : id (5, 4, 1), name ('Artist5', 'Artist3', 'Artist4') | Albums : id (2, 5, 4), release_date ('2021-04-01', '2021-02-01', '2021-01-01'), artist_id (1, 5, 3) | Concerts : id (4, 1, 2), venue ('Stadium Australia', 'Carnegie Hall', 'The Hollywood Bowl'), date ('2021-07-01 19:00:00', '2021-06-01 18:00:00', '2021-08-01 20:00:00')",
        "ambiguous_queries": [
            "SELECT Songs.title FROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id WHERE (Music_Genres.name = 'Pop Song' OR Music_Genres.name = 'Hip Hop Song') AND Concerts.venue = 'Madison Square Garden'",
            "SELECT Songs.title FROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id WHERE Music_Genres.name = 'Pop Song' OR Music_Genres.name = 'Hip Hop Song' AND Concerts.venue = 'Madison Square Garden'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"pop songs and hip hop songs performed at Madison Square Garden\": [\"hip hop songs performed at Madison Square Garden and pop songs performed at Madison Square Garden\", \"hip hop songs performed at Madison Square Garden and pop songs\"]}"
        },
        "clarification_context": "\"pop songs and hip hop songs performed at Madison Square Garden\" refers to \"hip hop songs performed at Madison Square Garden and pop songs performed at Madison Square Garden\"",
        "clear_ambiguity": "{\"pop songs and hip hop songs performed at Madison Square Garden\": \"hip hop songs performed at Madison Square Garden and pop songs performed at Madison Square Garden\"}",
        "gold_query": "SELECT Songs.title FROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id WHERE (Music_Genres.name = 'Pop Song' OR Music_Genres.name = 'Hip Hop Song') AND Concerts.venue = 'Madison Square Garden'"
    },
    {
        "index": 1058,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
        "question": "List all field trip classes and study group classes that are for real-world applications.",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth | Teachers : TeacherID, FirstName, LastName, SubjectTaught | Classes : ClassID, Name, GradeLevel, TeacherID | LearningActivities : ActivityID, ActivityType, Purpose, Date, ClassID",
        "schema_with_content": "Students : StudentID (4, 2, 1), FirstName ('Michael', 'Jane', 'Emily'), LastName ('Doe', 'Brown', 'Smith'), DateOfBirth ('2004-09-15', '2005-06-29', '2006-07-23') | Teachers : TeacherID (2, 1, 4), FirstName ('Mr.', 'Mrs.', 'Ms.'), LastName ('Jackson', 'Martin', 'Hall'), SubjectTaught ('History', 'English', 'Art') | Classes : ClassID (1, 2, 5), Name ('Algebra I', 'American Literature', 'Physics'), GradeLevel (9, 10, 10), TeacherID (1, 4, 3) | LearningActivities : ActivityID (2, 3, 4), ActivityType ('Field Trip', 'Study Group', 'Field Trip'), Purpose ('Team Building', 'Real-world Application', 'Preparation for Test'), Date ('2023-03-18', '2023-03-22', '2023-03-15'), ClassID (5, 1, 4)",
        "ambiguous_queries": [
            "SELECT Classes.Name FROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID WHERE (LearningActivities.ActivityType = 'Field Trip' OR LearningActivities.ActivityType = 'Study Group') AND LearningActivities.Purpose = 'Real-world Application'",
            "SELECT Classes.Name FROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID WHERE LearningActivities.ActivityType = 'Field Trip' OR LearningActivities.ActivityType = 'Study Group' AND LearningActivities.Purpose = 'Real-world Application'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"field trip classes and study group classes that are for real-world applications\": [\"study group classes that are for real-world applications and field trip classes that are for real-world applications\", \"study group classes that are for real-world applications and field trip classes\"]}"
        },
        "clarification_context": "\"field trip classes and study group classes that are for real-world applications\" refers to \"study group classes that are for real-world applications and field trip classes\"",
        "clear_ambiguity": "{\"field trip classes and study group classes that are for real-world applications\": \"study group classes that are for real-world applications and field trip classes\"}",
        "gold_query": "SELECT Classes.Name FROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID WHERE LearningActivities.ActivityType = 'Field Trip' OR LearningActivities.ActivityType = 'Study Group' AND LearningActivities.Purpose = 'Real-world Application'"
    },
    {
        "index": 1059,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_val_healthcare_jobs/attachment_1tab_val_healthcare_jobs.sqlite",
        "question": "Show all job postings for nurses and physical therapists which are on the day shift.",
        "schema_without_content": "Employers : id, name, address | Locations : id, city, state | Skills : id, skillName | Requirements : id, requirement | JobPostings : id, title, description, healthcare, shift, employerId, locationId, skillsIds, requirementsIds",
        "schema_with_content": "Employers : id (1, 2, 3), name ('Employer A', 'Employer B', 'Employer C'), address ('123 Main St', '789 Oak St', '456 Elm St') | Locations : id (1, 2, 3), city ('City Z', 'City X', 'City Y'), state ('State BB', 'State CC', 'State AA') | Skills : id (5, 3, 2), skillName ('Skill B', 'Skill E', 'Skill C') | Requirements : id (1, 4, 3), requirement ('Requirement 3', 'Requirement 4', 'Requirement 1') | JobPostings : id (5, 3, 4), title ('Job 1', 'Job 5', 'Job 4'), description ('Description of Job 1', 'Description of Job 3', 'Description of Job 4'), healthcare ('Software Engineer', 'Nurse', 'Nurse'), shift ('Night Shift', 'Day Shift', 'Night Shift'), employerId (1, 2, 1), locationId (1, 2, 2), skillsIds ('A,B', '', 'C,D'), requirementsIds ('1,2', '5', '7,8')",
        "ambiguous_queries": [
            "SELECT JobPostings.title FROM JobPostings WHERE (JobPostings.healthcare = 'Nurse' OR JobPostings.healthcare = 'Physical Therapist') AND JobPostings.shift = 'Day Shift'",
            "SELECT JobPostings.title FROM JobPostings WHERE JobPostings.healthcare = 'Nurse' OR JobPostings.healthcare = 'Physical Therapist' AND JobPostings.shift = 'Day Shift'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"nurses and physical therapists which are on the day shift\": [\"physical therapists which are on the day shift and nurses which are on the day shift\", \"physical therapists which are on the day shift and nurses\"]}"
        },
        "clarification_context": "\"nurses and physical therapists which are on the day shift\" refers to \"physical therapists which are on the day shift and nurses\"",
        "clear_ambiguity": "{\"nurses and physical therapists which are on the day shift\": \"physical therapists which are on the day shift and nurses\"}",
        "gold_query": "SELECT JobPostings.title FROM JobPostings WHERE JobPostings.healthcare = 'Nurse' OR JobPostings.healthcare = 'Physical Therapist' AND JobPostings.shift = 'Day Shift'"
    },
    {
        "index": 1060,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_ref_production_role/attachment_2tab_ref_production_role.sqlite",
        "question": "Show scriptwriters and editors who worked on projects with a deadline of May 10th 2021.",
        "schema_without_content": "Scriptwriters : ID, Name, Birthdate | Editors : ID, Name, HireDate | Projects : ID, Title, Deadline, Budget | Assignments : ScriptwriterID, EditorID, ProjectID",
        "schema_with_content": "Scriptwriters : ID (1, 3, 2), Name ('Jane Smith', 'Michael Johnson', 'John Doe'), Birthdate ('1980-06-07', '1992-09-11', '1975-03-14') | Editors : ID (1, 2, 3), Name ('Bob White', 'Alice Brown', 'Carol Green'), HireDate ('2009-11-15', '2015-02-10', '2018-08-20') | Projects : ID (2, 5, 3), Title ('Film A', 'Film B', 'Film D'), Deadline ('2021-04-22', '2021-04-21', '2021-05-15'), Budget (1500000.0, 500000.0, 750000.0) | Assignments : ScriptwriterID (1, 3, 1), EditorID (1, 2, 2), ProjectID (5, 3, 4)",
        "ambiguous_queries": [
            "SELECT Scriptwriters.name FROM Projects JOIN Assignments ON Projects.ID = Assignments.ProjectID JOIN Scriptwriters ON Assignments.ScriptwriterID = Scriptwriters.ID WHERE Projects.Deadline = '2021-05-10' UNION SELECT Editors.name FROM Projects JOIN Assignments ON Projects.ID = Assignments.ProjectID JOIN Editors ON Assignments.EditorID = Editors.ID WHERE Projects.Deadline = '2021-05-10'",
            "SELECT Scriptwriters.name FROM Projects JOIN Assignments ON Projects.ID = Assignments.ProjectID JOIN Scriptwriters ON Assignments.ScriptwriterID = Scriptwriters.ID UNION SELECT Editors.name FROM Projects JOIN Assignments ON Projects.ID = Assignments.ProjectID JOIN Editors ON Assignments.EditorID = Editors.ID WHERE Projects.Deadline = '2021-05-10'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"scriptwriters and editors who worked\": [\"editors who worked and scriptwriters who worked\", \"editors who worked and scriptwriters\"]}"
        },
        "clarification_context": "\"scriptwriters and editors who worked\" refers to \"editors who worked and scriptwriters who worked\"",
        "clear_ambiguity": "{\"scriptwriters and editors who worked\": \"editors who worked and scriptwriters who worked\"}",
        "gold_query": "SELECT Scriptwriters.name FROM Projects JOIN Assignments ON Projects.ID = Assignments.ProjectID JOIN Scriptwriters ON Assignments.ScriptwriterID = Scriptwriters.ID WHERE Projects.Deadline = '2021-05-10' UNION SELECT Editors.name FROM Projects JOIN Assignments ON Projects.ID = Assignments.ProjectID JOIN Editors ON Assignments.EditorID = Editors.ID WHERE Projects.Deadline = '2021-05-10'"
    },
    {
        "index": 1061,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_ref_journalism_awards/attachment_1tab_ref_journalism_awards.sqlite",
        "question": "Show articles that won Pulitzer Prize or George Polk Award in 2010.",
        "schema_without_content": "Authors : AuthorID, FirstName, LastName | Publications : PublisherID, Name, YearOfEstablishment | Articles : ArticleID, Title, Content, DatePublished, AuthorID, PublisherID | Awards : AwardID, AwardType | Winners : id, WinningArticleID, Year, AwardID",
        "schema_with_content": "Authors : AuthorID (4, 5, 3), FirstName ('Bob', 'Tom', 'Jane'), LastName ('Doe', 'Johnson', 'Williams') | Publications : PublisherID (1, 3, 2), Name ('Los Angeles Times', 'New York Times', 'USA Today'), YearOfEstablishment (1982, 1847, 1877) | Articles : ArticleID (2, 4, 3), Title ('The Rise of AI', 'Climate Change Crisis', 'Political Updates'), Content ('AI has revolutionized many industries...', 'Global economy faces challenges ahead...', 'Human activities have caused climate change...'), DatePublished ('2023-06-18', '2023-06-19', '2023-06-16'), AuthorID (5, 3, 4), PublisherID (4, 3, 5) | Awards : AwardID (1, 2), AwardType ('George Polk Award', 'Pulitzer Prize') | Winners : id (4, 3, 5), WinningArticleID (1, 5, 3), Year (2011, 2013, 2010), AwardID (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Articles.Title FROM Awards JOIN Winners ON Awards.AwardID = Winners.AwardID JOIN Articles ON Articles.ArticleID = Winners.WinningArticleID WHERE (Awards.AwardType = 'Pulitzer Prize' OR Awards.AwardType = 'George Polk Award') AND Winners.Year = 2010",
            "SELECT Articles.Title FROM Awards JOIN Winners ON Awards.AwardID = Winners.AwardID JOIN Articles ON Articles.ArticleID = Winners.WinningArticleID WHERE Awards.AwardType = 'Pulitzer Prize' OR Awards.AwardType = 'George Polk Award' AND Winners.Year = 2010"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"Pulitzer Prize or George Polk Award in 2010\": [\"Ge in 2010 or Pulitzer Prize in 2010\", \"Ge in 2010 or Pulitzer Prize\"]}"
        },
        "clarification_context": "\"Pulitzer Prize or George Polk Award in 2010\" refers to \"Ge in 2010 or Pulitzer Prize in 2010\"",
        "clear_ambiguity": "{\"Pulitzer Prize or George Polk Award in 2010\": \"Ge in 2010 or Pulitzer Prize in 2010\"}",
        "gold_query": "SELECT Articles.Title FROM Awards JOIN Winners ON Awards.AwardID = Winners.AwardID JOIN Articles ON Articles.ArticleID = Winners.WinningArticleID WHERE (Awards.AwardType = 'Pulitzer Prize' OR Awards.AwardType = 'George Polk Award') AND Winners.Year = 2010"
    },
    {
        "index": 1062,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_theatrical_form/attachment_1tab_val_theatrical_form.sqlite",
        "question": "Show all comedies and tragedies written by William Shakespeare.",
        "schema_without_content": "Play : ID, Title, Theatrical_Form, Author, Year_Published | Character : ID, Name, PlayID | Actor : ID, Name, Birthdate | Role : ID, CharacterID, ActorID, PerformanceDate | Theater : ID, Name | Production : ID, PlayID, TheaterID, Start_Date, End_Date",
        "schema_with_content": "Play : ID (3, 2, 5), Title ('Macbeth', 'Taming Of Shrew', 'Hamlet'), Theatrical_Form ('Tragedy', 'Comedy', 'Tragedy'), Author ('William Shakespeare', 'William Shakespeare', 'Christopher Marlowe'), Year_Published (1603, 1596, 1597) | Character : ID (2, 4, 3), Name ('Katherine', 'Puck', 'Shakespeare'), PlayID (1, 4, 2) | Actor : ID (1, 4, 3), Name ('Tom Hiddleston', 'Sir Ian McKellen', 'Samuel L Jackson'), Birthdate ('1954-12-27', '1981-02-09', '1948-05-25') | Role : ID (3, 4, 2), CharacterID (3, 1, 1), ActorID (3, 4, 5), PerformanceDate ('2000-06-01', '1954-01-01', '2003-12-01') | Theater : ID (4, 5, 3), Name ('Gielgud Theatre', 'Broadway Theatre', 'The Royal Shakespeare Company') | Production : ID (5, 1, 3), PlayID (4, 1, 5), TheaterID (2, 3, 5), Start_Date ('1981-02-01', '2000-06-01', '1990-09-01'), End_Date ('2004-01-01', '1955-06-01', '1982-06-01')",
        "ambiguous_queries": [
            "SELECT Play.Title FROM Play WHERE (Play.Theatrical_Form = 'Comedy' OR Play.Theatrical_Form = 'Tragedy') AND Play.Author = 'William Shakespeare'",
            "SELECT Play.Title FROM Play WHERE Play.Theatrical_Form = 'Comedy' OR Play.Theatrical_Form = 'Tragedy' AND Play.Author = 'William Shakespeare'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"comedies and tragedies written by William Shakespeare\": [\"tragedies written by William Shakespeare and comedies written by William Shakespeare\", \"tragedies written by William Shakespeare and comedies\"]}"
        },
        "clarification_context": "\"comedies and tragedies written by William Shakespeare\" refers to \"tragedies written by William Shakespeare and comedies written by William Shakespeare\"",
        "clear_ambiguity": "{\"comedies and tragedies written by William Shakespeare\": \"tragedies written by William Shakespeare and comedies written by William Shakespeare\"}",
        "gold_query": "SELECT Play.Title FROM Play WHERE (Play.Theatrical_Form = 'Comedy' OR Play.Theatrical_Form = 'Tragedy') AND Play.Author = 'William Shakespeare'"
    },
    {
        "index": 1063,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_val_technical_professions/attachment_1tab_val_technical_professions.sqlite",
        "question": "Give me all engineer jobs and architect jobs that have a salary of 80000",
        "schema_without_content": "Companies : id, name, address, email | Technologies : id, technologyName | Jobs : id, title, description, companyId, salary, technicalProfession, skillIds, locationId | Locations : id, city, country",
        "schema_with_content": "Companies : id (2, 1), name ('Company A', 'Company B'), address ('123 Main St, Anytown, USA', '456 Elm St, Othertown, USA'), email ('contact@companyb.com', 'info@companya.com') | Technologies : id (5, 2, 1), technologyName ('C#', 'Python', 'Swift') | Jobs : id (4, 3, 1), title ('Software Architect', 'Software Engineer', 'Senior Software Engineer'), description ('Design and implement high-level architecture for large-scale applications.', 'Define product vision and guide the overall technical direction of the project.', 'Lead a team of engineers and develop complex software systems.'), companyId (1, 2, 1), salary (95000, 80000, 80000), technicalProfession ('Engineer', 'Architect', 'Architect'), skillIds ('2,3', '1,4', '1,4'), locationId (2, 2, 1) | Locations : id (2, 1), city ('Othertown', 'Anytown'), country ('USA', 'USA')",
        "ambiguous_queries": [
            "SELECT Jobs.title FROM Jobs WHERE (Jobs.technicalProfession = 'Engineer' OR Jobs.technicalProfession = 'Architect') AND Jobs.salary = 80000",
            "SELECT Jobs.title FROM Jobs WHERE Jobs.technicalProfession = 'Engineer' OR Jobs.technicalProfession = 'Architect' AND Jobs.salary = 80000"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"engineer jobs and architect jobs that have a salary of 80000\": [\"architect jobs that have a salary of 80000 and engineer jobs that have a salary of 80000\", \"architect jobs that have a salary of 80000 and engineer jobs\"]}"
        },
        "clarification_context": "\"engineer jobs and architect jobs that have a salary of 80000\" refers to \"architect jobs that have a salary of 80000 and engineer jobs\"",
        "clear_ambiguity": "{\"engineer jobs and architect jobs that have a salary of 80000\": \"architect jobs that have a salary of 80000 and engineer jobs\"}",
        "gold_query": "SELECT Jobs.title FROM Jobs WHERE Jobs.technicalProfession = 'Engineer' OR Jobs.technicalProfession = 'Architect' AND Jobs.salary = 80000"
    },
    {
        "index": 1064,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_musical_instrument/attachment_2tab_ref_musical_instrument.sqlite",
        "question": "Show guitar models and piano models where Yamaha is the manufacturer.",
        "schema_without_content": "Manufacturers : id, name | Guitars : id, model_name, price, manufacturer_id | Pianos : id, model_name, price, manufacturer_id | Musicians : id, name | Guitarists : id, musician_id, guitar_model_id | Pianists : id, musician_id, piano_model_id",
        "schema_with_content": "Manufacturers : id (5, 3, 1), name ('Steinway & Sons', 'C. F. Martin & Co.', 'Bonners Music') | Guitars : id (1, 4, 2), model_name ('Acoustic Guitar', 'Les Paul', 'Telecaster'), price (299.99, 499.99, 1099.99), manufacturer_id (1, 3, 2) | Pianos : id (4, 1, 2), model_name ('Hybrid Piano', 'Stage Piano', 'Grand Piano'), price (1999.99, 4999.99, 999.99), manufacturer_id (5, 3, 1) | Musicians : id (1, 2, 5), name ('Bob Williams', 'Jane Smith', 'Alice Johnson') | Guitarists : id (2, 1, 3), musician_id (3, 5, 4), guitar_model_id (5, 3, 4) | Pianists : id (1, 2), musician_id (2, 1), piano_model_id (3, 1)",
        "ambiguous_queries": [
            "SELECT Guitars.model_name FROM Manufacturers JOIN Guitars ON Manufacturers.id = Guitars.manufacturer_id WHERE Manufacturers.name = 'Yamaha' UNION SELECT Pianos.model_name FROM Manufacturers JOIN Pianos ON Manufacturers.id = Pianos.manufacturer_id WHERE Manufacturers.name = 'Yamaha'",
            "SELECT Guitars.model_name FROM Manufacturers JOIN Guitars ON Manufacturers.id = Guitars.manufacturer_id UNION SELECT Pianos.model_name FROM Manufacturers JOIN Pianos ON Manufacturers.id = Pianos.manufacturer_id WHERE Manufacturers.name = 'Yamaha'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"guitar models and piano models where Yamaha is the manufacturer\": [\"piano models where Yamaha is the manufacturer and guitar models where Yamaha is the manufacturer\", \"piano models where Yamaha is the manufacturer and guitar models\"]}"
        },
        "clarification_context": "\"guitar models and piano models where Yamaha is the manufacturer\" refers to \"piano models where Yamaha is the manufacturer and guitar models where Yamaha is the manufacturer\"",
        "clear_ambiguity": "{\"guitar models and piano models where Yamaha is the manufacturer\": \"piano models where Yamaha is the manufacturer and guitar models where Yamaha is the manufacturer\"}",
        "gold_query": "SELECT Guitars.model_name FROM Manufacturers JOIN Guitars ON Manufacturers.id = Guitars.manufacturer_id WHERE Manufacturers.name = 'Yamaha' UNION SELECT Pianos.model_name FROM Manufacturers JOIN Pianos ON Manufacturers.id = Pianos.manufacturer_id WHERE Manufacturers.name = 'Yamaha'"
    },
    {
        "index": 1065,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_val_role/attachment_2tab_val_role.sqlite",
        "question": "List script supervisors and costume designers that are 45 years old.",
        "schema_without_content": "Script_Supervisors : ID, Name, Age, Experience, Awards | Costume_Designers : ID, Name, Age, Experience, Famous_For | Directors : ID, Name, Age, Films_Directed, Genre | Producers : ID, Name, Age, Budget, Projects_Produced | Actors : ID, Name, Age, Roles, Nominations | Cinematographers : ID, Name, Age, Movies_Cinematographer, Techniques",
        "schema_with_content": "Script_Supervisors : ID (2, 3, 1), Name ('John Smith', 'Mike Brown', 'Jane Doe'), Age (45, 50, 30), Experience (20, 25, 15), Awards ('Academy Award', 'BAFTA', 'Golden Globe') | Costume_Designers : ID (1, 2, 3), Name ('Robert Black', 'Emily Johnson', 'Lisa White'), Age (35, 45, 40), Experience (20, 18, 17), Famous_For ('Versace Collection', 'Dior', 'Oscar Winning Design') | Directors : ID (3, 1, 2), Name ('Anna Thompson', 'William Taylor', 'Daniel Davis'), Age (30, 45, 50), Films_Directed (6, 10, 5), Genre ('Comedy', 'Thriller', 'Drama') | Producers : ID (3, 2, 1), Name ('Alexander King', 'Richard Queen', 'Elizabeth Green'), Age (30, 40, 45), Budget (150000000, 50000000, 100000000), Projects_Produced (10, 20, 15) | Actors : ID (2, 3, 1), Name ('David Lee', 'Samuel Wright', 'Amanda Miller'), Age (30, 45, 50), Roles (40, 50, 60), Nominations ('10', '8', '12') | Cinematographers : ID (3, 1, 2), Name ('Peter James', 'Charles Stone', 'Lucas Nelson'), Age (45, 40, 30), Movies_Cinematographer (25, 20, 15), Techniques ('High Dynamic Range', 'Time Lapse Photography', 'Wide Angle Lens')",
        "ambiguous_queries": [
            "SELECT Script_Supervisors.name FROM Script_Supervisors WHERE Script_Supervisors.Age = 45 UNION SELECT Costume_Designers.name FROM Costume_Designers WHERE Costume_Designers.Age = 45",
            "SELECT Script_Supervisors.name FROM Script_Supervisors UNION SELECT Costume_Designers.name FROM Costume_Designers WHERE Costume_Designers.Age = 45"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"script supervisors and costume designers that are 45 years old\": [\"costume designers that are 45 years old and script supervisors that are 45 years old\", \"costume designers that are 45 years old and script supervisors\"]}"
        },
        "clarification_context": "\"script supervisors and costume designers that are 45 years old\" refers to \"costume designers that are 45 years old and script supervisors that are 45 years old\"",
        "clear_ambiguity": "{\"script supervisors and costume designers that are 45 years old\": \"costume designers that are 45 years old and script supervisors that are 45 years old\"}",
        "gold_query": "SELECT Script_Supervisors.name FROM Script_Supervisors WHERE Script_Supervisors.Age = 45 UNION SELECT Costume_Designers.name FROM Costume_Designers WHERE Costume_Designers.Age = 45"
    },
    {
        "index": 1066,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_exclusive_areas/attachment_2tab_val_exclusive_areas.sqlite",
        "question": "Show frequent flyer lounges and VIP lounges with complementary Wi-Fi.",
        "schema_without_content": "Airlines : AirlineID, Name, Headquarters | Flights : FlightID, OriginAirport, DestinationAirport, DepartureTime, ArrivalTime, AircraftType, OperatedBy | Passengers : PassengerID, FirstName, LastName, DateOfBirth, Nationality | Bookings : BookingID, FlightID, PassengerID, ClassOfService, BookedDate | Frequent_Flyer_Lounges : LoungeID, Name, Location, Amenities, Capacity | VIP_Lounges : LoungeID, Name, Location, Amenities, AccessLevel",
        "schema_with_content": "Airlines : AirlineID (2, 5, 1), Name ('United Airlines', 'Southwest Airlines', 'American Airlines'), Headquarters ('Fort Worth', 'Chicago', 'New York') | Flights : FlightID (3, 5, 2), OriginAirport ('IAH', 'ATL', 'SFO'), DestinationAirport ('LAX', 'MCO', 'PHX'), DepartureTime ('2023-01-05 12:00', '2023-01-02 09:00', '2023-01-01 08:00'), ArrivalTime ('2023-01-05 15:00', '2023-01-01 11:00', '2023-01-03 13:00'), AircraftType ('Bombardier CRJ900', 'Embraer E175', 'Boing 737'), OperatedBy (5, 2, 4) | Passengers : PassengerID (4, 5, 2), FirstName ('John', 'Emma', 'Jane'), LastName ('Nelson', 'Jackson', 'Doe'), DateOfBirth ('1995-12-25', '1992-08-20', '1985-02-12'), Nationality ('Canada', 'UK', 'Australia') | Bookings : BookingID (1, 2, 3), FlightID (3, 1, 2), PassengerID (1, 4, 5), ClassOfService ('Business', 'Economy', 'Economy'), BookedDate ('2023-01-01 11:00', '2022-12-31 10:00', '2023-01-04 14:00') | Frequent_Flyer_Lounges : LoungeID (1, 2), Name ('Club ATLAS', 'The Club'), Location ('DFW Terminal C', 'ATL International'), Amenities ('Complimentary Wi-Fi', 'No Complimentary Wi-Fi'), Capacity (150, 100) | VIP_Lounges : LoungeID (1, 2), Name ('Platinum Lounge', 'First Class Lounge'), Location ('SFO Terminal G', 'LAX Tom Bradley Intl'), Amenities ('No Complimentary Wi-Fi', 'Complimentary Wi-Fi'), AccessLevel ('By Invitation/Membership', 'Invitation Only')",
        "ambiguous_queries": [
            "SELECT Frequent_Flyer_Lounges.name FROM Frequent_Flyer_Lounges WHERE Frequent_Flyer_Lounges.Amenities = 'Complimentary Wi-Fi' UNION SELECT VIP_Lounges.name FROM VIP_Lounges WHERE VIP_Lounges.Amenities = 'Complimentary Wi-Fi'",
            "SELECT Frequent_Flyer_Lounges.name FROM Frequent_Flyer_Lounges UNION SELECT VIP_Lounges.name FROM VIP_Lounges WHERE VIP_Lounges.Amenities = 'Complimentary Wi-Fi'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"frequent flyer lounges and VIP lounges with complementary Wi-Fi\": [\"VIP lounges with complementary Wi-Fi and frequent flyer lounges with complementary Wi-Fi\", \"VIP lounges with complementary Wi-Fi and frequent flyer lounges\"]}"
        },
        "clarification_context": "\"frequent flyer lounges and VIP lounges with complementary Wi-Fi\" refers to \"VIP lounges with complementary Wi-Fi and frequent flyer lounges\"",
        "clear_ambiguity": "{\"frequent flyer lounges and VIP lounges with complementary Wi-Fi\": \"VIP lounges with complementary Wi-Fi and frequent flyer lounges\"}",
        "gold_query": "SELECT Frequent_Flyer_Lounges.name FROM Frequent_Flyer_Lounges UNION SELECT VIP_Lounges.name FROM VIP_Lounges WHERE VIP_Lounges.Amenities = 'Complimentary Wi-Fi'"
    },
    {
        "index": 1067,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_ref_exclusive_areas/attachment_2tab_ref_exclusive_areas.sqlite",
        "question": "What are the capacities of frequent flyer lounges and VIP lounges with power outlets at every seat?",
        "schema_without_content": "Airports : airportID, name, city, country | Airlines : airlineID, name, headquarters | Flights : flightID, originAirport, destinationAirport, departureTime, arrivalTime, airlineID | Passengers : passengerID, firstName, lastName, frequentFlyerNumber, vipStatus | Amenities : amenityID, description, availableInFrequentFlyerLounge, availableInVIPLounge | VIPLounges : loungeID, airportID, amenityID, capacity | FrequentFlyerLounges : loungeID, airportID, amenityID, capacity",
        "schema_with_content": "Airports : airportID (1, 2, 3), name ('JFK International', 'Heathrow', 'Charles de Gaulle'), city ('Paris', 'London', 'New York'), country ('USA', 'France', 'UK') | Airlines : airlineID (1, 2, 3), name ('United Airlines', 'Air France', 'British Airways'), headquarters ('London', 'Paris', 'Chicago') | Flights : flightID (1, 3, 5), originAirport (1, 3, 2), destinationAirport (3, 1, 2), departureTime ('2023-01-01 12:00:00', '2023-01-01 20:00:00', '2023-01-02 11:00:00'), arrivalTime ('2023-01-01 18:00:00', '2023-01-01 10:00:00', '2023-01-01 22:00:00'), airlineID (2, 1, 2) | Passengers : passengerID (1, 5, 4), firstName ('John', 'Jane', 'Eve'), lastName ('Martin', 'Doe', 'Johnson'), frequentFlyerNumber (23456, 12345, 87654), vipStatus (0, 1, 1) | Amenities : amenityID (1, 2), description ('Power outlets at every seat', 'Complimentary Wi-Fi'), availableInFrequentFlyerLounge (1, 1), availableInVIPLounge (1, 1) | VIPLounges : loungeID (2, 1), airportID (1, 2), amenityID (2, 1), capacity (50, 40) | FrequentFlyerLounges : loungeID (2, 1), airportID (1, 2), amenityID (1, 2), capacity (250, 150)",
        "ambiguous_queries": [
            "SELECT FrequentFlyerLounges.capacity FROM Amenities JOIN FrequentFlyerLounges ON Amenities.amenityID = FrequentFlyerLounges.amenityID WHERE Amenities.description = 'Power outlets at every seat' UNION SELECT VIPLounges.capacity FROM Amenities JOIN VIPLounges ON Amenities.amenityID = VIPLounges.amenityID WHERE Amenities.description = 'Power outlets at every seat'",
            "SELECT FrequentFlyerLounges.capacity FROM Amenities JOIN FrequentFlyerLounges ON Amenities.amenityID = FrequentFlyerLounges.amenityID UNION SELECT VIPLounges.capacity FROM Amenities JOIN VIPLounges ON Amenities.amenityID = VIPLounges.amenityID WHERE Amenities.description = 'Power outlets at every seat'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"frequent flyer lounges and VIP lounges with power outlets at every seat\": [\"VIP lounges with power outlets at every seat and frequent flyer lounges with power outlets at every seat\", \"VIP lounges with power outlets at every seat and frequent flyer lounges\"]}"
        },
        "clarification_context": "\"frequent flyer lounges and VIP lounges with power outlets at every seat\" refers to \"VIP lounges with power outlets at every seat and frequent flyer lounges with power outlets at every seat\"",
        "clear_ambiguity": "{\"frequent flyer lounges and VIP lounges with power outlets at every seat\": \"VIP lounges with power outlets at every seat and frequent flyer lounges with power outlets at every seat\"}",
        "gold_query": "SELECT FrequentFlyerLounges.capacity FROM Amenities JOIN FrequentFlyerLounges ON Amenities.amenityID = FrequentFlyerLounges.amenityID WHERE Amenities.description = 'Power outlets at every seat' UNION SELECT VIPLounges.capacity FROM Amenities JOIN VIPLounges ON Amenities.amenityID = VIPLounges.amenityID WHERE Amenities.description = 'Power outlets at every seat'"
    },
    {
        "index": 1068,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_val_film_type/attachment_1tab_val_film_type.sqlite",
        "question": "Give me all documentaries and short films with a 500K budget.",
        "schema_without_content": "Directors : DirectorID, Name, BirthDate, Nationality | Producers : ProducerID, Name, ContactNumber, Email, AssociatedDirector | Films : FilmID, Title, ReleaseYear, FilmType, Budget, ProductionCompanyID | Actors : ActorID, FirstName, LastName, DateOfBirth | Casts : RoleID, FilmID, ActorID, CharacterName, AppearanceFee | Companies : CompanyID, CompanyName, AddressLine1, AddressLine2, City, StateOrRegion, PostalCode, Country",
        "schema_with_content": "Directors : DirectorID (2, 1), Name ('John Doe', 'Jane Smith'), BirthDate ('1968-07-23', '1970-03-10'), Nationality ('American', 'Canadian') | Producers : ProducerID (2, 1), Name ('Alice Brown', 'Charlie Green'), ContactNumber ('+0987654321', '+1234567890'), Email ('cg@email.com', 'ab@email.com'), AssociatedDirector (2, 1) | Films : FilmID (3, 2, 4), Title ('A Short Film', 'The Documentary', 'Yet Another Short'), ReleaseYear (2001, 2003, 2002), FilmType ('Documentary', 'Short Film', 'Short Film'), Budget (750000.0, 300000.0, 500000.0), ProductionCompanyID (1, 2, 1) | Actors : ActorID (1, 2), FirstName ('Tom', 'Meryl'), LastName ('Hanks', 'Streep'), DateOfBirth ('1949-06-22', '1956-07-09') | Casts : RoleID (1, 2), FilmID (2, 1), ActorID (2, 1), CharacterName ('Supporting Role', 'Main Lead'), AppearanceFee (50000, 100000) | Companies : CompanyID (2, 1), CompanyName ('Big Movie Co.', 'Small Indie Studio'), AddressLine1 ('456 Elm Rd.', '123 Main St.'), AddressLine2 ('', ''), City ('Los Angeles', 'New York'), StateOrRegion ('NY', 'CA'), PostalCode ('90001', '10001'), Country ('USA', 'USA')",
        "ambiguous_queries": [
            "SELECT Films.Title FROM Films WHERE (Films.FilmType = 'Documentary' OR Films.FilmType = 'Short Film') AND Films.Budget = 500000.0",
            "SELECT Films.Title FROM Films WHERE Films.FilmType = 'Documentary' OR Films.FilmType = 'Short Film' AND Films.Budget = 500000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"documentaries and short films with a 500K budget\": [\"short films with a 500K budget and documentaries with a 500K budget\", \"short films with a 500K budget and documentaries\"]}"
        },
        "clarification_context": "\"documentaries and short films with a 500K budget\" refers to \"short films with a 500K budget and documentaries with a 500K budget\"",
        "clear_ambiguity": "{\"documentaries and short films with a 500K budget\": \"short films with a 500K budget and documentaries with a 500K budget\"}",
        "gold_query": "SELECT Films.Title FROM Films WHERE (Films.FilmType = 'Documentary' OR Films.FilmType = 'Short Film') AND Films.Budget = 500000.0"
    },
    {
        "index": 1069,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_val_written_journalism/attachment_1tab_val_written_journalism.sqlite",
        "question": "Give me all news articles and featured articles that are 2000 words long.",
        "schema_without_content": "Authors : AuthorID, FirstName, LastName | Publishers : PublisherID, Name | Categories : CategoryID, CategoryName | Articles : ArticleID, Title, Written_Journalism, Word_Count, PublicationDate, AuthorID, CategoryID, PublisherID",
        "schema_with_content": "Authors : AuthorID (1, 2), FirstName ('Jane', 'John'), LastName ('Doe', 'Smith') | Publishers : PublisherID (2, 1), Name ('New York Times', 'Washington Post') | Categories : CategoryID (2, 1), CategoryName ('Economy', 'Politics') | Articles : ArticleID (1, 3, 4), Title ('The US Election', 'A New Economic Policy', 'An In-Depth Look at Space Exploration'), Written_Journalism ('Feature Article', 'News Article', 'Feature Article'), Word_Count ('3000 words', '3000 words', '2000 words'), PublicationDate ('2024-03-07 23:54:05', '2024-03-07 23:54:05', '2024-03-07 23:54:05'), AuthorID (1, 2, 2), CategoryID (4, 2, 3), PublisherID (2, 2, 1)",
        "ambiguous_queries": [
            "SELECT Articles.title FROM Articles WHERE (Articles.Written_Journalism = 'News Article' OR Articles.Written_Journalism = 'Feature Article') AND Articles.Word_Count = '2000 words'",
            "SELECT Articles.title FROM Articles WHERE Articles.Written_Journalism = 'News Article' OR Articles.Written_Journalism = 'Feature Article' AND Articles.Word_Count = '2000 words'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"news articles and featured articles that are 2000 words long\": [\"featured articles that are 2000 words long and news articles that are 2000 words long\", \"featured articles that are 2000 words long and news articles\"]}"
        },
        "clarification_context": "\"news articles and featured articles that are 2000 words long\" refers to \"featured articles that are 2000 words long and news articles that are 2000 words long\"",
        "clear_ambiguity": "{\"news articles and featured articles that are 2000 words long\": \"featured articles that are 2000 words long and news articles that are 2000 words long\"}",
        "gold_query": "SELECT Articles.title FROM Articles WHERE (Articles.Written_Journalism = 'News Article' OR Articles.Written_Journalism = 'Feature Article') AND Articles.Word_Count = '2000 words'"
    },
    {
        "index": 1070,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_construction_jobs/attachment_2tab_val_construction_jobs.sqlite",
        "question": "Provide all civil engineers and architects with expertise in AutoCAD.",
        "schema_without_content": "Civil_Engineers : id, name, years_of_experience, design_software_expertise, salary | Design_Softwares : software_name, popularity | Architects : id, name, years_in_practice, design_software_expertise, salary | Projects : project_id, title, description, start_date, end_date | Engineer_Projects : engineer_id, project_id | Architect_Projects : architect_id, project_id",
        "schema_with_content": "Civil_Engineers : id (3, 1, 4), name ('John Doe', 'Emily Brown', 'Jane Smith'), years_of_experience (9, 5, 2), design_software_expertise ('AutoCAD', 'AutoCAD', 'SketchUp'), salary (80000.0, 90000.0, 65000.0) | Design_Softwares : software_name ('ArchiCAD', 'AutoCAD', 'SketchUp'), popularity (50, 80, 60) | Architects : id (2, 1, 5), name ('Lisa Miller', 'Olivia Davis', 'William Taylor'), years_in_practice (9, 3, 7), design_software_expertise ('Rhino', 'Revit', 'SketchUp'), salary (95000.0, 85000.0, 80000.0) | Projects : project_id (1, 5, 2), title ('Office Building', 'Shopping Mall', 'Highway Expansion'), description ('Building a shopping mall with multiple stores and entertainment options.', 'Expanding a busy highway to reduce traffic congestion.', 'Constructing a new office building downtown.'), start_date ('2021-06-01', '2021-07-01', '2021-08-01'), end_date ('2024-01-31', '2022-07-31', '2022-10-31') | Engineer_Projects : engineer_id (4, 3, 1), project_id (2, 1, 3) | Architect_Projects : architect_id (3, 1, 4), project_id (4, 3, 2)",
        "ambiguous_queries": [
            "SELECT Civil_Engineers.name FROM Civil_Engineers WHERE Civil_Engineers.design_software_expertise = 'AutoCAD' UNION SELECT Architects.name FROM Architects WHERE Architects.design_software_expertise = 'AutoCAD'",
            "SELECT Civil_Engineers.name FROM Civil_Engineers UNION SELECT Architects.name FROM Architects WHERE Architects.design_software_expertise = 'AutoCAD'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"civil engineers and architects with expertise in AutoCAD\": [\"architects with expertise in AutoCAD and civil engineers with expertise in AutoCAD\", \"architects with expertise in AutoCAD and civil engineers\"]}"
        },
        "clarification_context": "\"civil engineers and architects with expertise in AutoCAD\" refers to \"architects with expertise in AutoCAD and civil engineers with expertise in AutoCAD\"",
        "clear_ambiguity": "{\"civil engineers and architects with expertise in AutoCAD\": \"architects with expertise in AutoCAD and civil engineers with expertise in AutoCAD\"}",
        "gold_query": "SELECT Civil_Engineers.name FROM Civil_Engineers WHERE Civil_Engineers.design_software_expertise = 'AutoCAD' UNION SELECT Architects.name FROM Architects WHERE Architects.design_software_expertise = 'AutoCAD'"
    },
    {
        "index": 1071,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_aviation_jobs/attachment_2tab_val_aviation_jobs.sqlite",
        "question": "Show all the flight attendants and pilots who trained at the Aviation Academy.",
        "schema_without_content": "Flight_Attendants : id, Name, Age, Experience_Years, Training_Center | Pilots : id, Name, Age, Licenses, Training_Center | Aviation_Academies : id, Name, Location, Years_Operating | Airlines : id, Name, Headquarters, Fleet_Size | Aircrafts : id, Model, Manufacturer, Year_Manufactured | Flight_Routes : id, Route_Number, Origin_Airport, Destination_Airport, Distance",
        "schema_with_content": "Flight_Attendants : id (1, 2), Name ('Jane Smith', 'John Doe'), Age (30, 27), Experience_Years (6.5, 8.5), Training_Center ('Aviation Academy', 'Global Aero Institute') | Pilots : id (1, 2), Name ('Emily Brown', 'Michael Johnson'), Age (32, 31), Licenses ('{ATPL, CPL}', '{ATPL, CPL}'), Training_Center ('World Flight School', 'Aviation Academy') | Aviation_Academies : id (1, 2), Name ('Global Aero Institute', 'Aviation Academy'), Location ('New York', 'Los Angeles'), Years_Operating (10, 25) | Airlines : id (2, 1), Name ('American Airlines', 'Delta Airlines'), Headquarters ('Fort Worth, TX', 'Atlanta, GA'), Fleet_Size (953, 755) | Aircrafts : id (1, 2), Model ('Boeing 737', 'Airbus A320'), Manufacturer ('Boeing', 'Airbus'), Year_Manufactured (1967, 1988) | Flight_Routes : id (2, 1), Route_Number ('AA123', 'DL456'), Origin_Airport ('ATL', 'DFW'), Destination_Airport ('MIA', 'LAX'), Distance (1500.0, 2000.0)",
        "ambiguous_queries": [
            "SELECT Flight_Attendants.name FROM Flight_Attendants JOIN Aviation_Academies ON Flight_Attendants.Training_Center = Aviation_Academies.Name WHERE Aviation_Academies.name = 'Aviation Academy' UNION SELECT Pilots.name FROM Pilots JOIN Aviation_Academies ON Pilots.Training_Center = Aviation_Academies.Name WHERE Aviation_Academies.name = 'Aviation Academy'",
            "SELECT Flight_Attendants.name FROM Flight_Attendants JOIN Aviation_Academies ON Flight_Attendants.Training_Center = Aviation_Academies.Name UNION SELECT Pilots.name FROM Pilots JOIN Aviation_Academies ON Pilots.Training_Center = Aviation_Academies.Name WHERE Aviation_Academies.name = 'Aviation Academy'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"flight attendants and pilots who trained at the Aviation Academy\": [\"pilots who trained at the Aviation Academy and flight attendants who trained at the Aviation Academy\", \"pilots who trained at the Aviation Academy and flight attendants\"]}"
        },
        "clarification_context": "\"flight attendants and pilots who trained at the Aviation Academy\" refers to \"pilots who trained at the Aviation Academy and flight attendants who trained at the Aviation Academy\"",
        "clear_ambiguity": "{\"flight attendants and pilots who trained at the Aviation Academy\": \"pilots who trained at the Aviation Academy and flight attendants who trained at the Aviation Academy\"}",
        "gold_query": "SELECT Flight_Attendants.name FROM Flight_Attendants JOIN Aviation_Academies ON Flight_Attendants.Training_Center = Aviation_Academies.Name WHERE Aviation_Academies.name = 'Aviation Academy' UNION SELECT Pilots.name FROM Pilots JOIN Aviation_Academies ON Pilots.Training_Center = Aviation_Academies.Name WHERE Aviation_Academies.name = 'Aviation Academy'"
    },
    {
        "index": 1072,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_ref_helping_professions/attachment_1tab_ref_helping_professions.sqlite",
        "question": "Show social workers and counselors from the West Side.",
        "schema_without_content": "HelpingProfession : ProfessionID, ProfessionName | GeoArea : AreaID, LocationText | Company : CompanyID, Name, AddressLine1, AddressLine2, City, State, ZipCode, PhoneNumber, EmailAddress | JobPosting : JobID, Title, Description, PostedDate, DeadlineDate, SalaryRange, Status, ProfessionID, AreaID | Applicant : ApplicantID, FirstName, LastName, DateOfBirth, Email, ResumePath | Application : AppID, JobID, ApplicantID, SubmissionDate, CoverLetterPath, Status",
        "schema_with_content": "HelpingProfession : ProfessionID (1, 2), ProfessionName ('Social Worker', 'Counselor') | GeoArea : AreaID (1, 2), LocationText ('East End', 'West Side') | Company : CompanyID (1, 2), Name ('Company B', 'Company A'), AddressLine1 ('123 Main St', '456 Elm St'), AddressLine2 (), City ('Downtown', 'Cityville'), State ('CA', 'NY'), ZipCode (98765, 12345), PhoneNumber ('098-765-4321', '123-456-7890'), EmailAddress ('companyA@example.com', 'companyB@example.com') | JobPosting : JobID (2, 4, 3), Title ('Social Worker Position', 'Mental Health Counselor', 'Mental Health Counselor'), Description ('Help people overcome challenges.', 'Assist individuals with mental health issues.', 'Help people improve their wellbeing.'), PostedDate ('2024-03-13 12:41:56', '2024-03-13 12:41:56', '2024-03-13 12:41:56'), DeadlineDate (), SalaryRange ('$30k-$45k', '$40k-$60k', '$30k-$45k'), Status ('Open', 'Open', 'Open'), ProfessionID (2, 1, 1), AreaID (2, 1, 2) | Applicant : ApplicantID (2, 1), FirstName ('Jane', 'John'), LastName ('Smith', 'Doe'), DateOfBirth ('1985-05-15', '1987-07-23'), Email ('john.doe@email.com', 'jane.smith@email.com'), ResumePath ('/path/to/resume.pdf', '/path/to/resume.pdf') | Application : AppID (1, 2), JobID (2, 1), ApplicantID (2, 1), SubmissionDate ('2024-03-13 12:41:56', '2024-03-13 12:41:56'), CoverLetterPath ('/path/to/coverletter.pdf', '/path/to/coverletter.pdf'), Status ()",
        "ambiguous_queries": [
            "SELECT JobPosting.title FROM HelpingProfession JOIN JobPosting ON HelpingProfession.ProfessionID = JobPosting.ProfessionID JOIN GeoArea ON JobPosting.AreaID = GeoArea.AreaID WHERE (HelpingProfession.ProfessionName = 'Social Worker' OR HelpingProfession.ProfessionName = 'Counselor') AND GeoArea.LocationText = 'West Side'",
            "SELECT JobPosting.title FROM HelpingProfession JOIN JobPosting ON HelpingProfession.ProfessionID = JobPosting.ProfessionID JOIN GeoArea ON JobPosting.AreaID = GeoArea.AreaID WHERE HelpingProfession.ProfessionName = 'Social Worker' OR HelpingProfession.ProfessionName = 'Counselor' AND GeoArea.LocationText = 'West Side'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"social workers and counselors from the West Side\": [\"counselors from the West Side and social workers from the West Side\", \"counselors from the West Side and social workers\"]}"
        },
        "clarification_context": "\"social workers and counselors from the West Side\" refers to \"counselors from the West Side and social workers from the West Side\"",
        "clear_ambiguity": "{\"social workers and counselors from the West Side\": \"counselors from the West Side and social workers from the West Side\"}",
        "gold_query": "SELECT JobPosting.title FROM HelpingProfession JOIN JobPosting ON HelpingProfession.ProfessionID = JobPosting.ProfessionID JOIN GeoArea ON JobPosting.AreaID = GeoArea.AreaID WHERE (HelpingProfession.ProfessionName = 'Social Worker' OR HelpingProfession.ProfessionName = 'Counselor') AND GeoArea.LocationText = 'West Side'"
    },
    {
        "index": 1073,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_val_learning_materials/attachment_2tab_val_learning_materials.sqlite",
        "question": "Show intermediate online courses and textbooks.",
        "schema_without_content": "Textbooks : id, Title, Author, Subject, Difficulty_Level, ISBN | Online_Courses : id, Course_Name, Instructor, Topic, Difficulty_Level, URL | Schools : id, Name, Address, City, State | Teachers : id, Name, School_ID, Degree, Years_Experience | Students : id, First_Name, Last_Name, Age, Grade_Level",
        "schema_with_content": "Textbooks : id (2, 3, 4), Title ('History', 'Calculus', 'Physics'), Author ('Shakespeare', 'Charles Darwin', 'Herodotus'), Subject ('History', 'Science', 'Physics'), Difficulty_Level ('Intermediate', 'Intermediate', 'Advanced'), ISBN ('9787654321', '9780141029', '9781543220') | Online_Courses : id (3, 4, 1), Course_Name ('Graphic Design', 'Ancient History', 'Mathematical Logic'), Instructor ('William Brown', 'Mike Johnson', 'Jane Smith'), Topic ('Maths', 'History', 'Design'), Difficulty_Level ('Advanced', 'Advanced', 'Beginner'), URL ('https://www.example.com/design101', 'https://www.example.com/history201', 'https://www.example.com/qm101') | Schools : id (1, 5, 3), Name ('Oakwood College', 'Riverview Academy', 'Springfield High School'), Address ('123 Maple Dr', '789 Pine St', '123 Main St'), City ('Riverview', 'Evergreen', 'Sunrise'), State ('CO', 'TX', 'IL') | Teachers : id (4, 2, 5), Name ('Ms. Williams', 'Ms. Rodriguez', 'Prof. Lee'), School_ID (2, 3, 5), Degree ('PhD in Math', 'PhD in Physics', 'MA in English'), Years_Experience (15, 10, 5) | Students : id (4, 3, 1), First_Name ('Tom', 'Michael', 'Lucy'), Last_Name ('Grey', 'Smith', 'Doe'), Age (16, 16, 14), Grade_Level ('8th', '11th', '9th')",
        "ambiguous_queries": [
            "SELECT Textbooks.Title as Title FROM Textbooks WHERE Textbooks.Difficulty_Level = 'Intermediate' UNION SELECT Online_Courses.Course_Name as Title FROM Online_Courses WHERE Online_Courses.Difficulty_Level = 'Intermediate'",
            "SELECT Textbooks.Title as Title FROM Textbooks UNION SELECT Online_Courses.Course_Name as Title FROM Online_Courses WHERE Online_Courses.Difficulty_Level = 'Intermediate'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"intermediate online courses and textbooks\": [\"intermediate online courses and intermediate textbooks\", \"textbooks and textbooks intermediate\"]}"
        },
        "clarification_context": "\"intermediate online courses and textbooks\" refers to \"intermediate online courses and intermediate textbooks\"",
        "clear_ambiguity": "{\"intermediate online courses and textbooks\": \"intermediate online courses and intermediate textbooks\"}",
        "gold_query": "SELECT Textbooks.Title as Title FROM Textbooks WHERE Textbooks.Difficulty_Level = 'Intermediate' UNION SELECT Online_Courses.Course_Name as Title FROM Online_Courses WHERE Online_Courses.Difficulty_Level = 'Intermediate'"
    },
    {
        "index": 1074,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_boarding_equipment/attachment_2tab_val_boarding_equipment.sqlite",
        "question": "Give me all jet bridges and staircars assigned to terminal 1.",
        "schema_without_content": "Terminals : ID, Name | Jet_Bridges : ID, BridgeName, TerminalID | Staircars : ID, CarName, TerminalID | Airlines : AirlineID, CompanyName, HomeTerminalID",
        "schema_with_content": "Terminals : ID (5, 4, 1), Name ('Terminal 1', 'Terminal 3', 'Terminal 5') | Jet_Bridges : ID (3, 5, 2), BridgeName ('Jet Bridge D', 'Jet Bridge C', 'Jet Bridge A'), TerminalID (5, 3, 2) | Staircars : ID (2, 3, 5), CarName ('Staircar Y', 'Staircar V', 'Staircar W'), TerminalID (2, 4, 5) | Airlines : AirlineID (1, 3, 2), CompanyName ('Company C', 'Company B', 'Company E'), HomeTerminalID (5, 2, 3)",
        "ambiguous_queries": [
            "SELECT Jet_Bridges.BridgeName as Name FROM Jet_Bridges JOIN Terminals ON Jet_Bridges.TerminalID = Terminals.ID WHERE Terminals.name = 'Terminal 1' UNION SELECT Staircars.CarName as Name FROM Staircars JOIN Terminals ON Staircars.TerminalID = Terminals.ID WHERE Terminals.name = 'Terminal 1'",
            "SELECT Jet_Bridges.BridgeName as Name FROM Jet_Bridges JOIN Terminals ON Jet_Bridges.TerminalID = Terminals.ID UNION SELECT Staircars.CarName as Name FROM Staircars JOIN Terminals ON Staircars.TerminalID = Terminals.ID WHERE Terminals.name = 'Terminal 1'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"jet bridges and staircars assigned to terminal 1\": [\"staircars assigned to terminal 1 and jet bridges assigned to terminal 1\", \"staircars assigned to terminal 1 and jet bridges\"]}"
        },
        "clarification_context": "\"jet bridges and staircars assigned to terminal 1\" refers to \"staircars assigned to terminal 1 and jet bridges assigned to terminal 1\"",
        "clear_ambiguity": "{\"jet bridges and staircars assigned to terminal 1\": \"staircars assigned to terminal 1 and jet bridges assigned to terminal 1\"}",
        "gold_query": "SELECT Jet_Bridges.BridgeName as Name FROM Jet_Bridges JOIN Terminals ON Jet_Bridges.TerminalID = Terminals.ID WHERE Terminals.name = 'Terminal 1' UNION SELECT Staircars.CarName as Name FROM Staircars JOIN Terminals ON Staircars.TerminalID = Terminals.ID WHERE Terminals.name = 'Terminal 1'"
    },
    {
        "index": 1075,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_retail_outlets/attachment_2tab_val_retail_outlets.sqlite",
        "question": "Display duty-free shops and souvenir stores in terminal 3.",
        "schema_without_content": "DutyFreeShops : ShopID, Name, Location, Size, AnnualRevenue | SouvenirStores : StoreID, Name, Location, InventoryCount, AveragePurchaseAmount | Flights : FlightID, AirlineName, DepartureTime, ArrivalTime, OriginAirportCode, DestinationAirportCode | PassengerCheckIns : CheckInID, FlightID, PassengerName, BoardingPassNumber, CheckInTime",
        "schema_with_content": "DutyFreeShops : ShopID (1, 2), Name ('Global Traveller', 'Eastern Delicacies'), Location ('Terminal 3', 'Terminal 1'), Size (12000.0, 8000.0), AnnualRevenue (678900.0, 545000.0) | SouvenirStores : StoreID (1, 2), Name ('Memories of Journey', 'Gift World'), Location ('Terminal 2', 'Terminal 3'), InventoryCount (500, 700), AveragePurchaseAmount (20.0, 25.0) | Flights : FlightID (1, 2), AirlineName ('United Airlines', 'Delta Airlines'), DepartureTime ('2023-02-12 14:00:00', '2023-02-12 10:00:00'), ArrivalTime ('2023-02-12 17:30:00', '2023-02-12 13:30:00'), OriginAirportCode ('ATL', 'JFK'), DestinationAirportCode ('SEA', 'LAX') | PassengerCheckIns : CheckInID (1, 2), FlightID (1, 2), PassengerName ('Emma Smith', 'John Doe'), BoardingPassNumber (5678, 1234), CheckInTime ('2023-02-12 09:30:00', '2023-02-12 10:30:00')",
        "ambiguous_queries": [
            "SELECT DutyFreeShops.name FROM DutyFreeShops WHERE DutyFreeShops.Location = 'Terminal 3' UNION SELECT SouvenirStores.name FROM SouvenirStores WHERE SouvenirStores.Location = 'Terminal 3'",
            "SELECT DutyFreeShops.name FROM DutyFreeShops UNION SELECT SouvenirStores.name FROM SouvenirStores WHERE SouvenirStores.Location = 'Terminal 3'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"duty-free shops and souvenir stores in terminal 3\": [\"souvenir stores in terminal 3 and duty-free shops in terminal 3\", \"souvenir stores in terminal 3 and duty-free shops\"]}"
        },
        "clarification_context": "\"duty-free shops and souvenir stores in terminal 3\" refers to \"souvenir stores in terminal 3 and duty-free shops in terminal 3\"",
        "clear_ambiguity": "{\"duty-free shops and souvenir stores in terminal 3\": \"souvenir stores in terminal 3 and duty-free shops in terminal 3\"}",
        "gold_query": "SELECT DutyFreeShops.name FROM DutyFreeShops WHERE DutyFreeShops.Location = 'Terminal 3' UNION SELECT SouvenirStores.name FROM SouvenirStores WHERE SouvenirStores.Location = 'Terminal 3'"
    },
    {
        "index": 1076,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_val_extracurricular_activities/attachment_2tab_val_extracurricular_activities.sqlite",
        "question": "Display clubs and leadership programs with 30 participants.",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth, EmailAddress | Clubs : ClubID, Name, Description, Participants | LeadershipPrograms : ProgramID, Name, Description, Participants | Teachers : TeacherID, FirstName, LastName, SubjectTaught | Classes : ClassID, ClassroomNumber, StartTime, EndTime, TeacherId | Enrollments : EnrollmentID, StudentID, ClassId, Grade",
        "schema_with_content": "Students : StudentID (2, 1), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), DateOfBirth ('2000-01-01', '2002-02-02'), EmailAddress ('john.doe@example.com', 'jane.smith@example.com') | Clubs : ClubID (1, 2), Name ('Chess Club', 'Coding Club'), Description ('A club focused on coding and programming.', 'A club dedicated to playing chess.'), Participants (20, 30) | LeadershipPrograms : ProgramID (2, 1), Name ('Youth Leadership Academy', 'Community Service Initiative'), Description ('A program that helps young people develop leadership skills.', 'A program where students engage in community service projects.'), Participants (25, 30) | Teachers : TeacherID (1, 2), FirstName ('Emily', 'Michael'), LastName ('White', 'Green'), SubjectTaught ('English', 'Mathematics') | Classes : ClassID (1, 2), ClassroomNumber (101, 201), StartTime ('10:00:00', '08:00:00'), EndTime ('11:00:00', '09:00:00'), TeacherId (1, 2) | Enrollments : EnrollmentID (2, 1), StudentID (1, 1), ClassId (1, 2), Grade ('B', 'A')",
        "ambiguous_queries": [
            "SELECT Clubs.name FROM Clubs WHERE Clubs.Participants = 30 UNION SELECT LeadershipPrograms.name FROM LeadershipPrograms WHERE LeadershipPrograms.Participants = 30",
            "SELECT Clubs.name FROM Clubs UNION SELECT LeadershipPrograms.name FROM LeadershipPrograms WHERE LeadershipPrograms.Participants = 30"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"clubs and leadership programs with 30 participants\": [\"leadership programs with 30 participants and clubs with 30 participants\", \"leadership programs with 30 participants and clubs\"]}"
        },
        "clarification_context": "\"clubs and leadership programs with 30 participants\" refers to \"leadership programs with 30 participants and clubs with 30 participants\"",
        "clear_ambiguity": "{\"clubs and leadership programs with 30 participants\": \"leadership programs with 30 participants and clubs with 30 participants\"}",
        "gold_query": "SELECT Clubs.name FROM Clubs WHERE Clubs.Participants = 30 UNION SELECT LeadershipPrograms.name FROM LeadershipPrograms WHERE LeadershipPrograms.Participants = 30"
    },
    {
        "index": 1077,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_music_band/attachment_1tab_val_music_band.sqlite",
        "question": "Show jazz bands and rock bands founded in 1985.",
        "schema_without_content": "Music_Bands : id, Name, Genre, Founding_Year, Country | Albums : id, Title, Release_Date, Label, Genre | Songs : id, Title, Length, Album_id | Concerts : id, Date, Venue, Ticket_Price, Band_id | Fans : id, First_name, Last_name, Age, Email, Favorite_band_id | Reviews : id, Rating, Review_text, Song_id",
        "schema_with_content": "Music_Bands : id (4, 3, 1), Name ('Guitar Legends', 'Vocal Vibes', 'Blue Note Ensemble'), Genre ('Rock', 'Rock', 'Jazz'), Founding_Year (1990, 1985, 1985), Country ('Australia', 'Canada', 'UK') | Albums : id (4, 3, 1), Title ('First Impressions', 'Melodic Memories', 'Strumming Strings'), Release_Date ('2002-02-20', '2010-10-15', '2000-06-15'), Label ('Columbia', 'Universal', 'Warner'), Genre ('Jazz', 'Rock', 'Jazz') | Songs : id (1, 3, 2), Title ('Dreamy Skies', 'Thunderous Riffs', 'Acoustic Journey'), Length (4.2, 3.5, 3.8), Album_id (2, 4, 3) | Concerts : id (4, 3, 2), Date ('2022-02-20', '2021-12-30', '2022-01-15'), Venue ('Wembley Arena', 'Staples Center', 'Madison Square Garden'), Ticket_Price (120.9, 75.3, 100.5), Band_id (4, 3, 1) | Fans : id (2, 1, 4), First_name ('Peter', 'Emma', 'John'), Last_name ('White', 'Smith', 'Doe'), Age (45, 28, 35), Email ('pjackson@email.com', 'annadoe@email.com', 'johnsmith@email.com'), Favorite_band_id (4, 3, 2) | Reviews : id (3, 1, 4), Rating (5, 3, 5), Review_text ('Amazing guitar work!', 'Good song but not my favorite.', 'Awesome lyrics and music!'), Song_id (3, 1, 4)",
        "ambiguous_queries": [
            "SELECT Music_Bands.Name FROM Music_Bands WHERE (Music_Bands.Genre = 'Jazz' OR Music_Bands.Genre = 'Rock') AND Music_Bands.Founding_Year = 1985",
            "SELECT Music_Bands.Name FROM Music_Bands WHERE Music_Bands.Genre = 'Jazz' OR Music_Bands.Genre = 'Rock' AND Music_Bands.Founding_Year = 1985"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"jazz bands and rock bands founded in 1985\": [\"s founded in 1985 and jazz b founded in 1985\", \"s founded in 1985 and jazz b\"]}"
        },
        "clarification_context": "\"jazz bands and rock bands founded in 1985\" refers to \"s founded in 1985 and jazz b\"",
        "clear_ambiguity": "{\"jazz bands and rock bands founded in 1985\": \"s founded in 1985 and jazz b\"}",
        "gold_query": "SELECT Music_Bands.Name FROM Music_Bands WHERE Music_Bands.Genre = 'Jazz' OR Music_Bands.Genre = 'Rock' AND Music_Bands.Founding_Year = 1985"
    },
    {
        "index": 1078,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_val_print_media/attachment_1tab_val_print_media.sqlite",
        "question": "Show me all newspaper publications and magazine publications that come out weekly.",
        "schema_without_content": "Publications : ID, Title, Print_Media, Publication_Frequency | Authors : AuthorID, FirstName, LastName | Articles : ArticleID, Title, Content, PublishDate, AuthorID | PublicationsAuthors : PublicationID, AuthorID",
        "schema_with_content": "Publications : ID (2, 4, 3), Title ('Vanity Fair', 'The Daily News', 'Financial Times'), Print_Media ('Magazine', 'Newspaper', 'Magazine'), Publication_Frequency ('Weekly', 'Weekly', 'Monthly') | Authors : AuthorID (5, 2, 3), FirstName ('Jane', 'Tom', 'Michael'), LastName ('Brown', 'Doe', 'Wilson') | Articles : ArticleID (3, 5, 1), Title ('Article 5', 'Article 3', 'Article 4'), Content ('This is an article about something...', 'Final article for this week...', 'Yet another piece of writing...'), PublishDate ('2022-01-07', '2022-01-21', '2022-01-01'), AuthorID (5, 3, 2) | PublicationsAuthors : PublicationID (7, 1, 9), AuthorID (2, 4, 3)",
        "ambiguous_queries": [
            "SELECT Publications.title FROM Publications WHERE (Publications.Print_Media = 'Newspaper' OR Publications.Print_Media = 'Magazine') AND Publications.Publication_Frequency = 'Weekly'",
            "SELECT Publications.title FROM Publications WHERE Publications.Print_Media = 'Newspaper' OR Publications.Print_Media = 'Magazine' AND Publications.Publication_Frequency = 'Weekly'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"newspaper publications and magazine publications that come out weekly\": [\"magazine publications that come out weekly and newspaper publications that come out weekly\", \"magazine publications that come out weekly and newspaper publications\"]}"
        },
        "clarification_context": "\"newspaper publications and magazine publications that come out weekly\" refers to \"magazine publications that come out weekly and newspaper publications that come out weekly\"",
        "clear_ambiguity": "{\"newspaper publications and magazine publications that come out weekly\": \"magazine publications that come out weekly and newspaper publications that come out weekly\"}",
        "gold_query": "SELECT Publications.title FROM Publications WHERE (Publications.Print_Media = 'Newspaper' OR Publications.Print_Media = 'Magazine') AND Publications.Publication_Frequency = 'Weekly'"
    },
    {
        "index": 1079,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_val_media_formats/attachment_2tab_val_media_formats.sqlite",
        "question": "Display podcasts and audio documents lasting 60 minutes.",
        "schema_without_content": "Podcasts : id, Title, Description, Length, ReleaseDate | AudioDocuments : id, Title, Description, Length, ReleaseDate | Articles : id, Title, AuthorName, PublicationDate | Newspapers : id, Name, Location | Authors : id, FirstName, LastName, BirthDate",
        "schema_with_content": "Podcasts : id (1, 2, 5), Title ('Fifth Podcast', 'First Podcast', 'Fourth Podcast'), Description ('Exploring new ideas and concepts.', 'This is the first podcast.', 'A short but insightful podcast.'), Length (30, 20, 15), ReleaseDate ('2023-04-01', '2023-03-01', '2023-05-01') | AudioDocuments : id (3, 1, 5), Title ('Fourth Documentary', 'Fifth Documentary', 'First Documentary'), Description ('The future of journalism explored.', 'Unraveling mysteries one episode at a time.', 'Investigating important issues worldwide.'), Length (50, 80, 90), ReleaseDate ('2023-02-01', '2023-04-01', '2023-03-01') | Articles : id (5, 1, 4), Title ('News Article 3', 'News Article 5', 'News Article 1'), AuthorName ('John Doe', 'Michael Johnson', 'Jane Smith'), PublicationDate ('2023-03-01', '2023-01-01', '2023-02-01') | Newspapers : id (5, 3, 4), Name ('Daily Times', 'Herald Sun', 'Canada Post'), Location ('London', 'New York City', 'Australia') | Authors : id (3, 2, 1), FirstName ('Jane', 'Michael', 'Emily'), LastName ('Brown', 'Wilson', 'Johnson'), BirthDate ('1980-01-01', '1998-05-01', '1995-04-01')",
        "ambiguous_queries": [
            "SELECT Podcasts.title FROM Podcasts WHERE Podcasts.Length = 60 UNION SELECT AudioDocuments.title FROM AudioDocuments WHERE AudioDocuments.Length = 60",
            "SELECT Podcasts.title FROM Podcasts UNION SELECT AudioDocuments.title FROM AudioDocuments WHERE AudioDocuments.Length = 60"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"podcasts and audio documents lasting 60 minutes\": [\"audio documents lasting 60 minutes and podcasts lasting 60 minutes\", \"audio documents lasting 60 minutes and podcasts\"]}"
        },
        "clarification_context": "\"podcasts and audio documents lasting 60 minutes\" refers to \"audio documents lasting 60 minutes and podcasts lasting 60 minutes\"",
        "clear_ambiguity": "{\"podcasts and audio documents lasting 60 minutes\": \"audio documents lasting 60 minutes and podcasts lasting 60 minutes\"}",
        "gold_query": "SELECT Podcasts.title FROM Podcasts WHERE Podcasts.Length = 60 UNION SELECT AudioDocuments.title FROM AudioDocuments WHERE AudioDocuments.Length = 60"
    },
    {
        "index": 1080,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_val_trades_jobs/attachment_1tab_val_trades_jobs.sqlite",
        "question": "List all construction worker salaries and electrician salaries for employees who work for any of Derek Brown's companies.",
        "schema_without_content": "Trade_Jobs : id, trade_job, company_owner, posted_date, salary | Company : id, name, contact_number, address | Employee : id, employee_name, position, hire_date | Education : id, degree, major, institution, completion_year",
        "schema_with_content": "Trade_Jobs : id (1, 4, 3), trade_job ('Electrician', 'Electrician', 'Construction Worker'), company_owner ('Mary Johnson', 'Derek Brown', 'John Smith'), posted_date ('2023-01-02', '2023-02-02', '2023-02-01'), salary (65000.0, 45000.0, 60000.0) | Company : id (2, 1), name ('XYZ Electricians', 'ABC Construction'), contact_number ('+987654321', '+123456789'), address ('123 Main St', '456 Elm St') | Employee : id (2, 1), employee_name ('Alice Jones', 'Bob Smith'), position ('Manager', 'Supervisor'), hire_date ('2019-02-01', '2018-01-01') | Education : id (1, 2), degree ('Project Manager', 'Marketing Specialist'), major ('Marketing', 'Business Administration'), institution ('City College', 'State University'), completion_year (2017, 2018)",
        "ambiguous_queries": [
            "SELECT Trade_Jobs.salary FROM Trade_Jobs WHERE (Trade_Jobs.trade_job = 'Construction Worker' OR Trade_Jobs.trade_job = 'Electrician') AND Trade_Jobs.company_owner = 'Derek Brown'",
            "SELECT Trade_Jobs.salary FROM Trade_Jobs WHERE Trade_Jobs.trade_job = 'Construction Worker' OR Trade_Jobs.trade_job = 'Electrician' AND Trade_Jobs.company_owner = 'Derek Brown'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"construction worker salaries and electrician salaries for employees\": [\"electrician salaries for employees and construction worker salaries for employees\", \"electrician salaries for employees and construction worker salaries\"]}"
        },
        "clarification_context": "\"construction worker salaries and electrician salaries for employees\" refers to \"electrician salaries for employees and construction worker salaries\"",
        "clear_ambiguity": "{\"construction worker salaries and electrician salaries for employees\": \"electrician salaries for employees and construction worker salaries\"}",
        "gold_query": "SELECT Trade_Jobs.salary FROM Trade_Jobs WHERE Trade_Jobs.trade_job = 'Construction Worker' OR Trade_Jobs.trade_job = 'Electrician' AND Trade_Jobs.company_owner = 'Derek Brown'"
    },
    {
        "index": 1081,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_val_street_performer/attachment_2tab_val_street_performer.sqlite",
        "question": "Show magicians and mimes who perform in Times Square, New York.",
        "schema_without_content": "Magicians : id, Name, Street_Location, MagicType, YearsExperience | Mimes : id, Name, Street_Location, StyleOfMiming, PerformanceDuration | Shows : id, ShowName, StartTime, EndTime, LocationID | Venues : id, VenueName, Address, City, Capacity | Performers : id, FirstName, LastName, Age, Genre",
        "schema_with_content": "Magicians : id (2, 1), Name ('David Copperfield', 'Harry Houdini'), Street_Location ('Times Square, New York', 'Las Vegas'), MagicType ('Illusionist', 'Escape Artist'), YearsExperience (38, 10) | Mimes : id (1, 2), Name ('Whitey McConnell', 'Marcel Marceau'), Street_Location ('Times Square, New York', 'Boston'), StyleOfMiming ('Classic', 'Character Miming'), PerformanceDuration (15, 20) | Shows : id (2, 1), ShowName ('Cirque du Soleil', 'The Illusionists'), StartTime ('2022-07-16 19:00:00', '2022-07-15 19:00:00'), EndTime ('2022-07-15 21:00:00', '2022-07-16 21:00:00'), LocationID (1, 2) | Venues : id (2, 1), VenueName ('Radio City Music Hall', 'Madison Square Garden'), Address ('New York, NY', 'New York, NY'), City ('New York', 'New York'), Capacity (20000, 6000) | Performers : id (2, 1), FirstName ('Carlos', 'Christopher'), LastName ('Columbus', 'Leon'), Age (35, 28), Genre ('Juggling', 'Fire Eating')",
        "ambiguous_queries": [
            "SELECT Magicians.name FROM Magicians WHERE Magicians.Street_Location = 'Times Square, New York' UNION SELECT Mimes.name FROM Mimes WHERE Mimes.Street_Location = 'Times Square, New York'",
            "SELECT Magicians.name FROM Magicians UNION SELECT Mimes.name FROM Mimes WHERE Mimes.Street_Location = 'Times Square, New York'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"magicians and mimes who perform in Times Square, New York\": [\"mimes who perform in Times Square, New York and magicians who perform in Times Square, New York\", \"mimes who perform in Times Square, New York and magicians\"]}"
        },
        "clarification_context": "\"magicians and mimes who perform in Times Square, New York\" refers to \"mimes who perform in Times Square, New York and magicians who perform in Times Square, New York\"",
        "clear_ambiguity": "{\"magicians and mimes who perform in Times Square, New York\": \"mimes who perform in Times Square, New York and magicians who perform in Times Square, New York\"}",
        "gold_query": "SELECT Magicians.name FROM Magicians WHERE Magicians.Street_Location = 'Times Square, New York' UNION SELECT Mimes.name FROM Mimes WHERE Mimes.Street_Location = 'Times Square, New York'"
    },
    {
        "index": 1082,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_ref_space_planning_jobs/attachment_2tab_ref_space_planning_jobs.sqlite",
        "question": "Provide modern architects and designers.",
        "schema_without_content": "Style : style_id, style_name | Interior_Designer : designer_id, name, design_style | Landscape_Architect : architect_id, name, landscape_style | Project : project_id, title, start_date, end_date, interior_designer_id, landscape_architect_id | Material : material_id, name, description | ProjectMaterial : projectmaterial_id, project_id, material_id, quantity",
        "schema_with_content": "Style : style_id (2, 5, 1), style_name ('Traditional', 'Rustic', 'Modern') | Interior_Designer : designer_id (4, 1, 3), name ('John Doe', 'Jane Smith', 'Michael Johnson'), design_style (4, 2, 3) | Landscape_Architect : architect_id (3, 2, 5), name ('Mark Williams', 'William Martin', 'Thomas Jackson'), landscape_style (5, 3, 4) | Project : project_id (1, 5, 4), title ('Office Space Makeover', 'Kitchen Remodel', 'Living Room Redesign'), start_date ('2021-08-01', '2021-04-01', '2021-07-01'), end_date ('2021-07-01', '2021-08-01', '2021-06-01'), interior_designer_id (2, 1, 3), landscape_architect_id (2, 3, 5) | Material : material_id (5, 4, 1), name ('Textile', 'Wood', 'Metal'), description ('High quality hardwood', 'Tempered and laminated glass', 'Cotton, silk, and wool fabrics') | ProjectMaterial : projectmaterial_id (1, 2, 5), project_id (1, 1, 1), material_id (3, 1, 5), quantity (30, 10, 50)",
        "ambiguous_queries": [
            "SELECT Interior_Designer.name FROM Style JOIN Interior_Designer ON Style.style_id = Interior_Designer.design_style WHERE Style.style_name = 'Modern' UNION SELECT Landscape_Architect.name FROM Style JOIN Landscape_Architect ON Style.style_id = Landscape_Architect.landscape_style WHERE Style.style_name = 'Modern'",
            "SELECT Interior_Designer.name FROM Style JOIN Interior_Designer ON Style.style_id = Interior_Designer.design_style UNION SELECT Landscape_Architect.name FROM Style JOIN Landscape_Architect ON Style.style_id = Landscape_Architect.landscape_style WHERE Style.style_name = 'Modern'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"modern architects and designers\": [\"modern architects and modern designers\", \"designers and designers modern\"]}"
        },
        "clarification_context": "\"modern architects and designers\" refers to \"designers and designers modern\"",
        "clear_ambiguity": "{\"modern architects and designers\": \"designers and designers modern\"}",
        "gold_query": "SELECT Interior_Designer.name FROM Style JOIN Interior_Designer ON Style.style_id = Interior_Designer.design_style UNION SELECT Landscape_Architect.name FROM Style JOIN Landscape_Architect ON Style.style_id = Landscape_Architect.landscape_style WHERE Style.style_name = 'Modern'"
    },
    {
        "index": 1083,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_arrival_facilities/attachment_2tab_val_arrival_facilities.sqlite",
        "question": "List arrival halls and baggage reclaims with a maximum capacity of 500.",
        "schema_without_content": "terminal : id, name, location | arrival_hall : id, terminal_id, Arrival_Hall, Maximum_Capacity, number_of_gates | baggage_reclaim : id, terminal_id, Baggage_Reclaim, Maximum_Capacity, number_of_carousels | flight : id, terminal_id",
        "schema_with_content": "terminal : id (2, 1), name ('Terminal B', 'Terminal A'), location ('Gate B2', 'Gate A1') | arrival_hall : id (4, 2, 1), terminal_id (1, 2, 1), Arrival_Hall ('A Hall 2', 'A Hall 1', 'B Hall 1'), Maximum_Capacity (700, 600, 500), number_of_gates (12, 8, 15) | baggage_reclaim : id (2, 4, 1), terminal_id (2, 2, 1), Baggage_Reclaim ('A Reclaim 2', 'B Reclaim 1', 'B Reclaim 2'), Maximum_Capacity (700, 900, 500), number_of_carousels (7, 4, 5) | flight : id (2, 1), terminal_id (1, 2)",
        "ambiguous_queries": [
            "SELECT arrival_hall.Arrival_Hall as name FROM arrival_hall WHERE arrival_hall.Maximum_Capacity = 500 UNION SELECT baggage_reclaim.Baggage_Reclaim as name FROM baggage_reclaim WHERE baggage_reclaim.Maximum_Capacity = 500",
            "SELECT arrival_hall.Arrival_Hall as name FROM arrival_hall UNION SELECT baggage_reclaim.Baggage_Reclaim as name FROM baggage_reclaim WHERE baggage_reclaim.Maximum_Capacity = 500"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"arrival halls and baggage reclaims with a maximum capacity of 500\": [\"baggage reclaims with a maximum capacity of 500 and arrival halls with a maximum capacity of 500\", \"baggage reclaims with a maximum capacity of 500 and arrival halls\"]}"
        },
        "clarification_context": "\"arrival halls and baggage reclaims with a maximum capacity of 500\" refers to \"baggage reclaims with a maximum capacity of 500 and arrival halls\"",
        "clear_ambiguity": "{\"arrival halls and baggage reclaims with a maximum capacity of 500\": \"baggage reclaims with a maximum capacity of 500 and arrival halls\"}",
        "gold_query": "SELECT arrival_hall.Arrival_Hall as name FROM arrival_hall UNION SELECT baggage_reclaim.Baggage_Reclaim as name FROM baggage_reclaim WHERE baggage_reclaim.Maximum_Capacity = 500"
    },
    {
        "index": 1084,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
        "question": "Provide all construction workers and electricians who work for Derek Brown.",
        "schema_without_content": "Construction_Workers : id, name, company_owner, work_experience, salary | Electricians : id, name, company_owner, certifications, hourly_rate | Software_Engineers : id, name, company_name, programming_language, years_of_experience | Accountants : id, name, company_name, education, experience_years | HR_Specialists : id, name, company_name, industry, years_in_industry | Marketing_Managers : id, name, company_name, marketing_strategy, campaign_successes",
        "schema_with_content": "Construction_Workers : id (2, 1, 3), name ('John Doe', 'Jane Smith', 'Robert White'), company_owner ('Michael Johnson', 'Derek Brown', 'Emily Davis'), work_experience (5, 7, 6), salary (29000.0, 30000.0, 28000.0) | Electricians : id (1, 2), name ('Erica Thompson', 'Tom Anderson'), company_owner ('Samantha Taylor', 'Derek Brown'), certifications ('X, Y, Z', 'A, B, C'), hourly_rate (27.0, 25.0) | Software_Engineers : id (3, 1, 2), name ('Chris Evans', 'Olivia Wilde', 'Gal Gadot'), company_name ('TechCorp', 'SoftwareInc', 'CodingCo'), programming_language ('C++', 'Python', 'JavaScript'), years_of_experience (5, 3, 4) | Accountants : id (1, 2), name ('Jennifer Lawrence', 'Scarlett Johansson'), company_name ('FinanceGroup', 'AccountingFirm'), education ('BBA', 'MAcc'), experience_years (7, 6) | HR_Specialists : id (2, 1), name ('Mark Ruffalo', 'Chris Hemsworth'), company_name ('HumanResources', 'RecruitmentAgencies'), industry ('IT', 'HR'), years_in_industry (10, 8) | Marketing_Managers : id (1, 2), name ('Ben Affleck', 'Ryan Reynolds'), company_name ('BrandConsultancy', 'AdvertisingAgency'), marketing_strategy ('SEO', 'Content Marketing'), campaign_successes ('Website Traffic Increase', 'Product Launch A')",
        "ambiguous_queries": [
            "SELECT Construction_Workers.name FROM Construction_Workers WHERE Construction_Workers.company_owner = 'Derek Brown' UNION SELECT Electricians.name FROM Electricians WHERE Electricians.company_owner = 'Derek Brown'",
            "SELECT Construction_Workers.name FROM Construction_Workers UNION SELECT Electricians.name FROM Electricians WHERE Electricians.company_owner = 'Derek Brown'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"construction workers and electricians who work for Derek Brown\": [\"electricians who work for Derek Brown and construction workers who work for Derek Brown\", \"electricians who work for Derek Brown and construction workers\"]}"
        },
        "clarification_context": "\"construction workers and electricians who work for Derek Brown\" refers to \"electricians who work for Derek Brown and construction workers who work for Derek Brown\"",
        "clear_ambiguity": "{\"construction workers and electricians who work for Derek Brown\": \"electricians who work for Derek Brown and construction workers who work for Derek Brown\"}",
        "gold_query": "SELECT Construction_Workers.name FROM Construction_Workers WHERE Construction_Workers.company_owner = 'Derek Brown' UNION SELECT Electricians.name FROM Electricians WHERE Electricians.company_owner = 'Derek Brown'"
    },
    {
        "index": 1085,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_music/attachment_2tab_ref_music.sqlite",
        "question": "List names of blues songs and folk songs that are sung by Bessie Smith.",
        "schema_without_content": "Singer : id, Name | Blues_Song : id, Song_Name, Genre, Singer_id | Folk_Song : id, Song_Name, Genre, Singer_id | Album : id, Title, Year, Singer_id | Instrument : id, Type | Band_Member : id, Name, Instrument_id",
        "schema_with_content": "Singer : id (2, 1, 4), Name ('Bessie Smith', 'Robert Johnson', 'Muddy Waters') | Blues_Song : id (4, 2, 3), Song_Name ('Hoochie Coochie Man', 'I Got A Mind To Give Up The Blues', 'Broken Hearted Blues'), Genre ('Blues', 'Blues', 'Blues'), Singer_id (1, 1, 4) | Folk_Song : id (1, 2, 4), Song_Name ('Cripple Creek Ferry', 'Man Of Constant Sorrow', 'Tom Dooley'), Genre ('Folk', 'Folk', 'Folk'), Singer_id (2, 3, 4) | Album : id (3, 2, 5), Title ('The Complete Studio Recordings', 'Avalon Blues', 'Bluegrass'), Year (1980, 1969, 1967), Singer_id (4, 3, 1) | Instrument : id (3, 2, 1), Type ('Piano', 'Guitar', 'Violin') | Band_Member : id (1, 5, 4), Name ('Jimmy Rogers', 'Eddie Boyd', 'Sunnyland Slim'), Instrument_id (3, 2, 5)",
        "ambiguous_queries": [
            "SELECT Blues_Song.song_name FROM Singer JOIN Blues_Song ON Singer.id = Blues_Song.Singer_id WHERE Singer.Name = 'Bessie Smith' UNION SELECT Folk_Song.song_name FROM Singer JOIN Folk_Song ON Singer.id = Folk_Song.Singer_id WHERE Singer.Name = 'Bessie Smith'",
            "SELECT Blues_Song.song_name FROM Singer JOIN Blues_Song ON Singer.id = Blues_Song.Singer_id UNION SELECT Folk_Song.song_name FROM Singer JOIN Folk_Song ON Singer.id = Folk_Song.Singer_id WHERE Singer.Name = 'Bessie Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"blues songs and folk songs that are sung by Bessie Smith\": [\"folk songs that are sung by Bessie Smith and blues songs that are sung by Bessie Smith\", \"folk songs that are sung by Bessie Smith and blues songs\"]}"
        },
        "clarification_context": "\"blues songs and folk songs that are sung by Bessie Smith\" refers to \"folk songs that are sung by Bessie Smith and blues songs\"",
        "clear_ambiguity": "{\"blues songs and folk songs that are sung by Bessie Smith\": \"folk songs that are sung by Bessie Smith and blues songs\"}",
        "gold_query": "SELECT Blues_Song.song_name FROM Singer JOIN Blues_Song ON Singer.id = Blues_Song.Singer_id UNION SELECT Folk_Song.song_name FROM Singer JOIN Folk_Song ON Singer.id = Folk_Song.Singer_id WHERE Singer.Name = 'Bessie Smith'"
    },
    {
        "index": 1086,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_ref_earth_science_careers/attachment_2tab_ref_earth_science_careers.sqlite",
        "question": "Show chemists and geoscientists from MIT.",
        "schema_without_content": "University : id, name | Chemist : id, university_id, fieldOfStudy, FullName | Geoscientist : id, university_id, fieldOfStudy, FullName",
        "schema_with_content": "University : id (1, 2), name ('Stanford', 'MIT') | Chemist : id (3, 2, 4), university_id (1, 1, 2), fieldOfStudy ('Physical Chemistry', 'Inorganic Chemistry', 'Organic Chemistry'), FullName ('Jane Smith', 'Bob White', 'John Doe') | Geoscientist : id (3, 1, 2), university_id (2, 1, 2), fieldOfStudy ('Seismology', 'Geology', 'Paleontology'), FullName ('Emma Nelson', 'Lisa Hill', 'Mike Garcia')",
        "ambiguous_queries": [
            "SELECT Chemist.FullName FROM University JOIN Chemist ON University.id = Chemist.university_id WHERE University.name = 'MIT' UNION SELECT Geoscientist.FullName FROM University JOIN Geoscientist ON University.id = Geoscientist.university_id WHERE University.name = 'MIT'",
            "SELECT Chemist.FullName FROM University JOIN Chemist ON University.id = Chemist.university_id UNION SELECT Geoscientist.FullName FROM University JOIN Geoscientist ON University.id = Geoscientist.university_id WHERE University.name = 'MIT'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"chemists and geoscientists from MIT\": [\"geoscientists from MIT and chemists from MIT\", \"geoscientists from MIT and chemists\"]}"
        },
        "clarification_context": "\"chemists and geoscientists from MIT\" refers to \"geoscientists from MIT and chemists\"",
        "clear_ambiguity": "{\"chemists and geoscientists from MIT\": \"geoscientists from MIT and chemists\"}",
        "gold_query": "SELECT Chemist.FullName FROM University JOIN Chemist ON University.id = Chemist.university_id UNION SELECT Geoscientist.FullName FROM University JOIN Geoscientist ON University.id = Geoscientist.university_id WHERE University.name = 'MIT'"
    },
    {
        "index": 1087,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_theatrical_form/attachment_1tab_ref_theatrical_form.sqlite",
        "question": "Show all comedies and tragedies written by Shakespeare.",
        "schema_without_content": "Author : id, name | Theatrical_Form : id, form | Play : id, title, authorId, theatricalFormId | Actor : id, firstName, lastName, birthYear, playId | Character : id, characterName, playId, actorId | Role : id, roleDescription, characterId, actorId",
        "schema_with_content": "Author : id (1, 5, 2), name ('Neil Simon', 'Arthur Miller', 'Aphra Behn') | Theatrical_Form : id (2, 5, 1), form ('Farce', 'Comedy', 'Drama') | Play : id (4, 2, 5), title ('Romeo and Juliet', \"Aphra Behn's Comedy\", 'The Odd Couple'), authorId (4, 1, 2), theatricalFormId (1, 1, 2) | Actor : id (5, 3, 4), firstName ('Julia', 'Denzel', 'Samuel'), lastName ('Washington', 'Burton', 'Roberts'), birthYear (1987, 1960, 1990), playId (4, 3, 1) | Character : id (1, 4, 2), characterName ('Blanche DuBois', 'Cassius', 'Macbeth'), playId (2, 3, 1), actorId (2, 5, 1) | Role : id (1, 3, 5), roleDescription ('Kind old lady', 'Brave warrior', 'Rich business man'), characterId (3, 1, 4), actorId (1, 5, 2)",
        "ambiguous_queries": [
            "SELECT Play.title FROM Theatrical_Form JOIN Play ON Theatrical_Form.id = Play.theatricalFormId JOIN Author ON Play.authorId = Author.id WHERE (Theatrical_Form.form = 'Comedy' OR Theatrical_Form.form = 'Tragedy') AND Author.name = 'Shakespeare'",
            "SELECT Play.title FROM Theatrical_Form JOIN Play ON Theatrical_Form.id = Play.theatricalFormId JOIN Author ON Play.authorId = Author.id WHERE Theatrical_Form.form = 'Comedy' OR Theatrical_Form.form = 'Tragedy' AND Author.name = 'Shakespeare'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"comedies and tragedies written by Shakespeare\": [\"tragedies written by Shakespeare and comedies written by Shakespeare\", \"tragedies written by Shakespeare and comedies\"]}"
        },
        "clarification_context": "\"comedies and tragedies written by Shakespeare\" refers to \"tragedies written by Shakespeare and comedies\"",
        "clear_ambiguity": "{\"comedies and tragedies written by Shakespeare\": \"tragedies written by Shakespeare and comedies\"}",
        "gold_query": "SELECT Play.title FROM Theatrical_Form JOIN Play ON Theatrical_Form.id = Play.theatricalFormId JOIN Author ON Play.authorId = Author.id WHERE Theatrical_Form.form = 'Comedy' OR Theatrical_Form.form = 'Tragedy' AND Author.name = 'Shakespeare'"
    },
    {
        "index": 1088,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_ref_soundtrack/attachment_2tab_ref_soundtrack.sqlite",
        "question": "Provide all sound designs and music scores created by Thomas Newman.",
        "schema_without_content": "Creators : id, name | Films : id, title, releaseDate, soundDesign, musicScore | SoundDesigns : id, description, creatorId, filmId | MusicScores : id, description, creatorId, filmId",
        "schema_with_content": "Creators : id (2, 4, 3), name ('Thomas Newman', 'James Horner', 'John Williams') | Films : id (4, 1, 3), title ('The Nightmare Before Christmas', 'Star Wars', 'Inception'), releaseDate ('1977-05-25', '1989-06-23', '1993-10-08'), soundDesign (3, 4, 2), musicScore (5, 4, 6) | SoundDesigns : id (1, 5, 3), description ('Giant Ship Sinking Sounds', 'Epic Space Battle Sounds', 'Complex Dream Sequence Sounds'), creatorId (3, 1, 5), filmId (2, 5, 1) | MusicScores : id (1, 5, 4), description ('Mysterious Adventure Motif', 'Whimsical Halloween Melody', 'Orchestral Epic Theme'), creatorId (2, 3, 5), filmId (5, 4, 1)",
        "ambiguous_queries": [
            "SELECT SoundDesigns.description FROM Creators JOIN SoundDesigns ON Creators.id = SoundDesigns.creatorId WHERE Creators.name = 'Thomas Newman' UNION SELECT MusicScores.description FROM Creators JOIN MusicScores ON Creators.id = MusicScores.creatorId WHERE Creators.name = 'Thomas Newman'",
            "SELECT SoundDesigns.description FROM Creators JOIN SoundDesigns ON Creators.id = SoundDesigns.creatorId UNION SELECT MusicScores.description FROM Creators JOIN MusicScores ON Creators.id = MusicScores.creatorId WHERE Creators.name = 'Thomas Newman'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"sound designs and music scores created by Thomas Newman\": [\"music scores created by Thomas Newman and sound designs created by Thomas Newman\", \"music scores created by Thomas Newman and sound designs\"]}"
        },
        "clarification_context": "\"sound designs and music scores created by Thomas Newman\" refers to \"music scores created by Thomas Newman and sound designs\"",
        "clear_ambiguity": "{\"sound designs and music scores created by Thomas Newman\": \"music scores created by Thomas Newman and sound designs\"}",
        "gold_query": "SELECT SoundDesigns.description FROM Creators JOIN SoundDesigns ON Creators.id = SoundDesigns.creatorId UNION SELECT MusicScores.description FROM Creators JOIN MusicScores ON Creators.id = MusicScores.creatorId WHERE Creators.name = 'Thomas Newman'"
    },
    {
        "index": 1089,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_2tab_val_investment_company/attachment_2tab_val_investment_company.sqlite",
        "question": "Show growth equity firms and venture capital trusts with funding of 5 million.",
        "schema_without_content": "growth_equity : id, firm_name, funding_amount, deal_date, notes | venture_capital : id, trust_name, funding_amount, investment_period, exit_strategy | customers : customer_id, company_name, address, contact_person_name, phone_number, email, equity_firm_id, venture_capital_id | employees : employee_id, name, hire_date, position, assigned_customer_id",
        "schema_with_content": "growth_equity : id (5, 2, 4), firm_name ('Company A', 'Company B', 'Company D'), funding_amount (9000000.0, 7000000.0, 5000000.0), deal_date ('2023-06-19', '2023-06-21', '2023-06-20'), notes ('Series C Funding', 'Series B Funding Round', 'Seed Capital') | venture_capital : id (3, 1, 5), trust_name ('VC Trust 4', 'VC Trust 3', 'VC Trust 5'), funding_amount (3000000.0, 10000000.0, 6000000.0), investment_period ('2024-01-01', '2022-01-01', '2019-01-01'), exit_strategy ('Return of Capital', 'Merger Exit', 'Acquisition Exit') | customers : customer_id (3, 1, 2), company_name ('Customer 3', 'Customer 4', 'Customer 1'), address ('456 Elm St', '789 Oak St', '246 Pine St'), contact_person_name ('Michael Johnson', 'Emily Davis', 'John Doe'), phone_number ('555-1234', '555-2425', '555-5678'), email ('michael@example.com', 'david@example.com', 'jane@example.com'), equity_firm_id (1, 3, 5), venture_capital_id (4, 2, 5) | employees : employee_id (4, 2, 5), name ('Alice', 'Diana', 'Charlie'), hire_date ('2023-01-15', '2023-03-15', '2023-04-15'), position ('Financial Advisor', 'Business Analyst', 'Account Manager'), assigned_customer_id (5, 2, 4)",
        "ambiguous_queries": [
            "SELECT growth_equity.firm_name as name FROM growth_equity WHERE growth_equity.funding_amount = 5000000.0 UNION SELECT venture_capital.trust_name as name FROM venture_capital WHERE venture_capital.funding_amount = 5000000.0",
            "SELECT growth_equity.firm_name as name FROM growth_equity UNION SELECT venture_capital.trust_name as name FROM venture_capital WHERE venture_capital.funding_amount = 5000000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"growth equity firms and venture capital trusts with funding of 5 million\": [\"venture capital trusts with funding of 5 million and growth equity firms with funding of 5 million\", \"venture capital trusts with funding of 5 million and growth equity firms\"]}"
        },
        "clarification_context": "\"growth equity firms and venture capital trusts with funding of 5 million\" refers to \"venture capital trusts with funding of 5 million and growth equity firms with funding of 5 million\"",
        "clear_ambiguity": "{\"growth equity firms and venture capital trusts with funding of 5 million\": \"venture capital trusts with funding of 5 million and growth equity firms with funding of 5 million\"}",
        "gold_query": "SELECT growth_equity.firm_name as name FROM growth_equity WHERE growth_equity.funding_amount = 5000000.0 UNION SELECT venture_capital.trust_name as name FROM venture_capital WHERE venture_capital.funding_amount = 5000000.0"
    },
    {
        "index": 1090,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_ref_distribution_platforms/attachment_1tab_ref_distribution_platforms.sqlite",
        "question": "Give me publications in print media and online media with an audience size of 100,000.",
        "schema_without_content": "Authors : AuthorID, FirstName, LastName, BirthDate | Articles : ArticleID, Title, Content, PublishDate, AuthorID | DistributionPlatforms : PlatformID, Name, Type | Publications : PublicationID, Name, Description | PublishesIn : id, PublicationID, PlatformID, AudienceSize",
        "schema_with_content": "Authors : AuthorID (4, 3, 2), FirstName ('Emily', 'David', 'Jane'), LastName ('Smith', 'Brown', 'White'), BirthDate ('2000-01-01', '1998-06-15', '1987-12-25') | Articles : ArticleID (4, 3, 5), Title ('Article 1', 'Article 2', 'Article 4'), Content ('Content of article 5...', 'Content of article 3...', 'Content of article 1...'), PublishDate ('2022-01-02', '2022-01-04', '2022-01-03'), AuthorID (5, 2, 4) | DistributionPlatforms : PlatformID (2, 4, 3), Name ('Newspaper', 'Website', 'YouTube Channel'), Type ('Print Media', 'Online Media', 'Online Media') | Publications : PublicationID (5, 3, 2), Name ('Pub A', 'Pub C', 'Pub D'), Description ('Description of pub C.', 'Description of pub B.', 'Description of pub D.') | PublishesIn : id (6, 4, 3), PublicationID (1, 2, 3), PlatformID (1, 3, 2), AudienceSize (100000, 200000, 300000)",
        "ambiguous_queries": [
            "SELECT Publications.Name FROM DistributionPlatforms JOIN PublishesIn ON DistributionPlatforms.PlatformID = PublishesIn.PlatformID JOIN Publications ON Publications.PublicationID = PublishesIn.PublicationID WHERE (DistributionPlatforms.Type = 'Print Media' OR DistributionPlatforms.Type = 'Online Media') AND PublishesIn.AudienceSize = 100000",
            "SELECT Publications.Name FROM DistributionPlatforms JOIN PublishesIn ON DistributionPlatforms.PlatformID = PublishesIn.PlatformID JOIN Publications ON Publications.PublicationID = PublishesIn.PublicationID WHERE DistributionPlatforms.Type = 'Print Media' OR DistributionPlatforms.Type = 'Online Media' AND PublishesIn.AudienceSize = 100000"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"print media and online media with an audience size of 100,000\": [\"online media with an audience size of 100,000 and print media with an audience size of 100,000\", \"online media with an audience size of 100,000 and print media\"]}"
        },
        "clarification_context": "\"print media and online media with an audience size of 100,000\" refers to \"online media with an audience size of 100,000 and print media with an audience size of 100,000\"",
        "clear_ambiguity": "{\"print media and online media with an audience size of 100,000\": \"online media with an audience size of 100,000 and print media with an audience size of 100,000\"}",
        "gold_query": "SELECT Publications.Name FROM DistributionPlatforms JOIN PublishesIn ON DistributionPlatforms.PlatformID = PublishesIn.PlatformID JOIN Publications ON Publications.PublicationID = PublishesIn.PublicationID WHERE (DistributionPlatforms.Type = 'Print Media' OR DistributionPlatforms.Type = 'Online Media') AND PublishesIn.AudienceSize = 100000"
    },
    {
        "index": 1091,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_ref_airport_staff/attachment_2tab_ref_airport_staff.sqlite",
        "question": "Show me the names of gate agents and pilots who speak Japanese.",
        "schema_without_content": "Languages : id, language | Pilots : id, name, licenseNumber, speaksId | GateAgents : id, name, gateNumber, speaksId | Flights : flightNumber, departureTime, arrivalTime, pilotId, gateAgentId | Passengers : passengerId, firstName, lastName, age",
        "schema_with_content": "Languages : id (2, 4, 1), language ('English', 'French', 'German') | Pilots : id (4, 2, 5), name ('Alice Johnson', 'Bob Brown', 'John Doe'), licenseNumber (5555555555, 1234567890, 3333333333), speaksId (4, 2, 3) | GateAgents : id (3, 1, 2), name ('Lucy Blue', 'Hannah Pink', 'Paul White'), gateNumber ('A1', 'D12', 'C5'), speaksId (5, 3, 2) | Flights : flightNumber (104, 101, 105), departureTime ('2022-01-01 08:00', '2022-01-01 12:00', '2022-01-01 09:00'), arrivalTime ('2022-01-01 14:00', '2022-01-01 12:00', '2022-01-01 13:00'), pilotId (3, 1, 5), gateAgentId (5, 3, 4) | Passengers : passengerId (3, 2, 4), firstName ('Alexander', 'Daniel', 'David'), lastName ('Smith', 'Black', 'Jones'), age (30, 50, 60)",
        "ambiguous_queries": [
            "SELECT GateAgents.name FROM Languages JOIN GateAgents ON Languages.id = GateAgents.speaksId WHERE Languages.language = 'Japanese' UNION SELECT Pilots.name FROM Languages JOIN Pilots ON Languages.id = Pilots.speaksId WHERE Languages.language = 'Japanese'",
            "SELECT GateAgents.name FROM Languages JOIN GateAgents ON Languages.id = GateAgents.speaksId UNION SELECT Pilots.name FROM Languages JOIN Pilots ON Languages.id = Pilots.speaksId WHERE Languages.language = 'Japanese'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"gate agents and pilots who speak Japanese\": [\"pilots who speak Japanese and gate agents who speak Japanese\", \"pilots who speak Japanese and gate agents\"]}"
        },
        "clarification_context": "\"gate agents and pilots who speak Japanese\" refers to \"pilots who speak Japanese and gate agents who speak Japanese\"",
        "clear_ambiguity": "{\"gate agents and pilots who speak Japanese\": \"pilots who speak Japanese and gate agents who speak Japanese\"}",
        "gold_query": "SELECT GateAgents.name FROM Languages JOIN GateAgents ON Languages.id = GateAgents.speaksId WHERE Languages.language = 'Japanese' UNION SELECT Pilots.name FROM Languages JOIN Pilots ON Languages.id = Pilots.speaksId WHERE Languages.language = 'Japanese'"
    },
    {
        "index": 1092,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_val_educational_methods/attachment_2tab_val_educational_methods.sqlite",
        "question": "What courses have peer tutoring and group work with 10 participants?",
        "schema_without_content": "courses : courseID, courseName, department, semester, year | students : studentID, firstName, lastName, email, major, enrollmentYear | instructors : instructorID, firstName, lastName, email, department | peer_tutoring : sessionID, courseID, startDateTime, endDateTime, participants | group_work : assignmentID, courseID, dueDate, maxScore, participants",
        "schema_with_content": "courses : courseID (2, 1, 5), courseName ('Economic Principles', 'Introduction to Computer Science', 'Literature Survey'), department ('Math', 'Physics', 'English'), semester ('Winter', 'Spring', 'Fall'), year (2023, 2022, 2022) | students : studentID (2, 1, 5), firstName ('Emma', 'Jane', 'Michael'), lastName ('White', 'Black', 'Doe'), email ('jane.smith@example.com', 'emma.white@example.com', 'david.black@example.com'), major ('English', 'Physics', 'Mathematics'), enrollmentYear (2020, 2021, 2022) | instructors : instructorID (3, 4, 5), firstName ('Dr.', 'Professor', 'Dr.'), lastName ('Martinez', 'Garcia', 'Williams'), email ('dr.williams@example.com', 'dr.smith@example.com', 'ms.garcia@example.com'), department ('Math', 'CS', 'Economics') | peer_tutoring : sessionID (5, 3, 2), courseID (3, 5, 2), startDateTime ('2022-04-20 13:00:00', '2022-10-10 18:00:00', '2023-03-10 19:00:00'), endDateTime ('2022-04-20 15:00:00', '2022-10-12 16:00:00', '2023-02-15 18:00:00'), participants (10, 7, 15) | group_work : assignmentID (4, 1, 3), courseID (4, 1, 3), dueDate ('2022-10-20 23:59:00', '2022-10-27 23:59:00', '2022-04-24 23:59:00'), maxScore (100, 100, 100), participants (8, 7, 12)",
        "ambiguous_queries": [
            "SELECT courses.courseName FROM peer_tutoring JOIN courses ON courses.courseID = peer_tutoring.courseID WHERE peer_tutoring.participants = 10 UNION SELECT courses.courseName FROM group_work JOIN courses ON courses.courseID = group_work.courseID WHERE group_work.participants = 10",
            "SELECT courses.courseName FROM peer_tutoring JOIN courses ON courses.courseID = peer_tutoring.courseID UNION SELECT courses.courseName FROM group_work JOIN courses ON courses.courseID = group_work.courseID WHERE group_work.participants = 10"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"peer tutoring and group work with 10 participants\": [\"group work with 10 participants and peer tutoring with 10 participants\", \"group work with 10 participants and peer tutoring\"]}"
        },
        "clarification_context": "\"peer tutoring and group work with 10 participants\" refers to \"group work with 10 participants and peer tutoring with 10 participants\"",
        "clear_ambiguity": "{\"peer tutoring and group work with 10 participants\": \"group work with 10 participants and peer tutoring with 10 participants\"}",
        "gold_query": "SELECT courses.courseName FROM peer_tutoring JOIN courses ON courses.courseID = peer_tutoring.courseID WHERE peer_tutoring.participants = 10 UNION SELECT courses.courseName FROM group_work JOIN courses ON courses.courseID = group_work.courseID WHERE group_work.participants = 10"
    },
    {
        "index": 1093,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_information_management_jobs/attachment_2tab_val_information_management_jobs.sqlite",
        "question": "List librarians and archivists that are located at University's main library.",
        "schema_without_content": "Librarians : id, name, age, experience, location | Archivists : id, name, age, experience, location | Employers : id, company_name, address, contact_info | Applicants : id, first_name, last_name, email, phone | JobsPosted : id, employer_id, position, description, start_date, end_date | ApplicationsSubmitted : application_id, applicant_id, job_posting_id, resume, cover_letter",
        "schema_with_content": "Librarians : id (1, 2), name ('Jane Smith', 'John Doe'), age (31, 30), experience (2, 5), location ('New York Public Library', \"University's Main Library\") | Archivists : id (1, 2), name ('Michael Johnson', 'Emily Davis'), age (28, 33), experience (7, 6), location (\"University's Main Library\", 'British Museum') | Employers : id (1, 2), company_name ('XYZ Company', 'ABC Company'), address ('123 Street, City', '456 Avenue, Town'), contact_info ('+0987654321', '+1234567890') | Applicants : id (1, 2), first_name ('Laura', 'Alexander'), last_name ('Anderson', 'Garcia'), email ('alex@email.com', 'laura@email.com'), phone ('+1234567890', '+0987654321') | JobsPosted : id (2, 1), employer_id (2, 1), position ('Curator', 'Librarian'), description ('Responsible for managing library resources.', 'Manage museum exhibits and collections.'), start_date ('2022-01-01', '2022-07-01'), end_date ('2023-06-30', '2023-12-31') | ApplicationsSubmitted : application_id (2, 1), applicant_id (2, 1), job_posting_id (1, 2), resume ('resume2.pdf', 'resume1.pdf'), cover_letter ('cover_letter1.txt', 'cover_letter2.txt')",
        "ambiguous_queries": [
            "SELECT Librarians.name FROM Librarians WHERE Librarians.location = \"University's Main Library\" UNION SELECT Archivists.name FROM Archivists WHERE Archivists.location = \"University's Main Library\"",
            "SELECT Librarians.name FROM Librarians UNION SELECT Archivists.name FROM Archivists WHERE Archivists.location = \"University's Main Library\""
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"librarians and archivists that are located at University's main library\": [\"archivists that are located at University's main library and librarians that are located at University's main library\", \"archivists that are located at University's main library and librarians\"]}"
        },
        "clarification_context": "\"librarians and archivists that are located at University's main library\" refers to \"archivists that are located at University's main library and librarians that are located at University's main library\"",
        "clear_ambiguity": "{\"librarians and archivists that are located at University's main library\": \"archivists that are located at University's main library and librarians that are located at University's main library\"}",
        "gold_query": "SELECT Librarians.name FROM Librarians WHERE Librarians.location = \"University's Main Library\" UNION SELECT Archivists.name FROM Archivists WHERE Archivists.location = \"University's Main Library\""
    },
    {
        "index": 1094,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_val_assessment_methods/attachment_2tab_val_assessment_methods.sqlite",
        "question": "Show exams and quizzes graded by Professor Smith.",
        "schema_without_content": "Students : StudentID, FirstName, LastName, BirthDate, Major | Assessors : AssessorID, Name, Title, Department | Exams : ExamID, CourseTitle, TotalMarks, PassingMark, AssessorId | Quizzes : QuizID, Description, MaxScore, MinPassingScore, AssessorId",
        "schema_with_content": "Students : StudentID (4, 2, 1), FirstName ('John', 'Alice', 'Bob'), LastName ('Brown', 'Black', 'White'), BirthDate ('2001-04-05', '2000-03-25', '1998-06-15'), Major ('Computer Science', 'English Literature', 'Biology') | Assessors : AssessorID (1, 4, 2), Name ('Professor Smith', 'Dr. Johnson', 'Dr. Jackson'), Title ('Assistant Professor', 'Associate Professor', 'Full Professor'), Department ('Philosophy', 'Literature', 'Political Science') | Exams : ExamID (1, 4, 3), CourseTitle ('World History', 'Contemporary Ethics', 'American Politics'), TotalMarks (100, 100, 100), PassingMark (60, 60, 60), AssessorId (4, 1, 5) | Quizzes : QuizID (3, 4, 5), Description ('Final exam study guide', 'Current events analysis', 'Midterm exam review questions'), MaxScore (30, 20, 20), MinPassingScore (12, 20, 20), AssessorId (4, 1, 3)",
        "ambiguous_queries": [
            "SELECT Exams.CourseTitle as title FROM Exams JOIN Assessors ON Exams.AssessorId = Assessors.AssessorID WHERE Assessors.name = 'Professor Smith' UNION SELECT Quizzes.Description as title FROM Quizzes JOIN Assessors ON Quizzes.AssessorId = Assessors.AssessorID WHERE Assessors.name = 'Professor Smith'",
            "SELECT Exams.CourseTitle as title FROM Exams JOIN Assessors ON Exams.AssessorId = Assessors.AssessorID UNION SELECT Quizzes.Description as title FROM Quizzes JOIN Assessors ON Quizzes.AssessorId = Assessors.AssessorID WHERE Assessors.name = 'Professor Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"exams and quizzes graded by Professor Smith\": [\"quizzes graded by Professor Smith and exams graded by Professor Smith\", \"quizzes graded by Professor Smith and exams\"]}"
        },
        "clarification_context": "\"exams and quizzes graded by Professor Smith\" refers to \"quizzes graded by Professor Smith and exams graded by Professor Smith\"",
        "clear_ambiguity": "{\"exams and quizzes graded by Professor Smith\": \"quizzes graded by Professor Smith and exams graded by Professor Smith\"}",
        "gold_query": "SELECT Exams.CourseTitle as title FROM Exams JOIN Assessors ON Exams.AssessorId = Assessors.AssessorID WHERE Assessors.name = 'Professor Smith' UNION SELECT Quizzes.Description as title FROM Quizzes JOIN Assessors ON Quizzes.AssessorId = Assessors.AssessorID WHERE Assessors.name = 'Professor Smith'"
    },
    {
        "index": 1095,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_ref_trades_jobs/attachment_1tab_ref_trades_jobs.sqlite",
        "question": "Show construction positions and electrician positions in yourcompany1.",
        "schema_without_content": "Company : id, name | Employee : id, company_id, employee_name | Position : id, position_title, trades_jobs, company_id | Skill : id, skill_type, position_id",
        "schema_with_content": "Company : id (2, 1), name ('yourcompany2', 'yourcompany1') | Employee : id (2, 3, 1), company_id (1, 1, 2), employee_name ('Another employee of yourcompany1', 'Employee of yourcompany1', 'Employee of yourcompany2') | Position : id (4, 2, 3), position_title ('Position4', 'Position2', 'Position1'), trades_jobs ('Construction worker', 'Electrician', 'Electrician'), company_id (1, 2, 2) | Skill : id (2, 3, 1), skill_type ('Skill2', 'Skill1', 'Skill4'), position_id ('Position3', 'Position1', 'Position4')",
        "ambiguous_queries": [
            "SELECT Position.position_title FROM Position JOIN Company ON Position.company_id = Company.id WHERE (Position.trades_jobs = 'Construction worker' OR Position.trades_jobs = 'Electrician') AND Company.name = 'yourcompany1'",
            "SELECT Position.position_title FROM Position JOIN Company ON Position.company_id = Company.id WHERE Position.trades_jobs = 'Construction worker' OR Position.trades_jobs = 'Electrician' AND Company.name = 'yourcompany1'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"construction positions and electrician positions in yourcompany1\": [\"electrician positions in yourcompany1 and construction positions in yourcompany1\", \"electrician positions in yourcompany1 and construction positions\"]}"
        },
        "clarification_context": "\"construction positions and electrician positions in yourcompany1\" refers to \"electrician positions in yourcompany1 and construction positions in yourcompany1\"",
        "clear_ambiguity": "{\"construction positions and electrician positions in yourcompany1\": \"electrician positions in yourcompany1 and construction positions in yourcompany1\"}",
        "gold_query": "SELECT Position.position_title FROM Position JOIN Company ON Position.company_id = Company.id WHERE (Position.trades_jobs = 'Construction worker' OR Position.trades_jobs = 'Electrician') AND Company.name = 'yourcompany1'"
    },
    {
        "index": 1096,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_ref_dental_careers/attachment_2tab_ref_dental_careers.sqlite",
        "question": "Display orthodontists and periodontists who have a Bachelor of dental surgery degree in their education.",
        "schema_without_content": "Education : id, degree_name | Specialization : id, speciality_name | Orthodontists : id, name, education_id, specialty_id | Periodontists : id, name, education_id, specialty_id",
        "schema_with_content": "Education : id (5, 4, 2), degree_name ('Associate Degree in Applied Sciences - Dental Assisting', 'Doctor of Dental Surgery', 'Diploma in Dental Technology') | Specialization : id (2, 4, 3), speciality_name ('Pediatric Dentistry', 'Oral and Maxillofacial Surgery', 'Endodontics') | Orthodontists : id (1, 4, 2), name ('Emily Davis', 'Michael Johnson', 'William Brown'), education_id (2, 1, 3), specialty_id (1, 1, 2) | Periodontists : id (1, 4, 5), name ('Emma Wilson', 'Anna Martinez', 'Rachel Taylor'), education_id (5, 3, 2), specialty_id (4, 5, 3)",
        "ambiguous_queries": [
            "SELECT Orthodontists.name FROM Education JOIN Orthodontists ON Education.id = Orthodontists.education_id WHERE Education.degree_name = 'Bachelor of Dental Surgery' UNION SELECT Periodontists.name FROM Education JOIN Periodontists ON Education.id = Periodontists.education_id WHERE Education.degree_name = 'Bachelor of Dental Surgery'",
            "SELECT Orthodontists.name FROM Education JOIN Orthodontists ON Education.id = Orthodontists.education_id UNION SELECT Periodontists.name FROM Education JOIN Periodontists ON Education.id = Periodontists.education_id WHERE Education.degree_name = 'Bachelor of Dental Surgery'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"orthodontists and periodontists who have a Bachelor of dental surgery degree in their education\": [\"periodontists who have a Bachelor of dental surgery degree in their education and orthodontists who have a Bachelor of dental surgery degree in their education\", \"periodontists who have a Bachelor of dental surgery degree in their education and orthodontists\"]}"
        },
        "clarification_context": "\"orthodontists and periodontists who have a Bachelor of dental surgery degree in their education\" refers to \"periodontists who have a Bachelor of dental surgery degree in their education and orthodontists who have a Bachelor of dental surgery degree in their education\"",
        "clear_ambiguity": "{\"orthodontists and periodontists who have a Bachelor of dental surgery degree in their education\": \"periodontists who have a Bachelor of dental surgery degree in their education and orthodontists who have a Bachelor of dental surgery degree in their education\"}",
        "gold_query": "SELECT Orthodontists.name FROM Education JOIN Orthodontists ON Education.id = Orthodontists.education_id WHERE Education.degree_name = 'Bachelor of Dental Surgery' UNION SELECT Periodontists.name FROM Education JOIN Periodontists ON Education.id = Periodontists.education_id WHERE Education.degree_name = 'Bachelor of Dental Surgery'"
    },
    {
        "index": 1097,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_open-end_funds/attachment_1tab_val_open-end_funds.sqlite",
        "question": "Show money market customers and bond fund customers from February.",
        "schema_without_content": "Customers : CustomerID, Name, Address | Accounts : AccountNumber, Balance, InterestRate, OpenDate, CustomerID | Transactions : TransactionID, Amount, Date, AccountNumber | InvestmentPortfolios : PortfolioID, CustomerID, OpenEndFunds, Month, TotalInvestments",
        "schema_with_content": "Customers : CustomerID (3, 4, 1), Name ('John Smith', 'Bob White', 'Carol Green'), Address ('101 Elm St', '789 Pine Blvd', '456 Oak Ave') | Accounts : AccountNumber (3, 2, 1), Balance (4000.0, 1000.0, 2000.0), InterestRate (0.06, 0.03, 0.02), OpenDate ('2021-01-01', '2021-03-01', '2021-02-01'), CustomerID (3, 2, 1) | Transactions : TransactionID (2, 1, 5), Amount (300.0, -1000.0, 400.0), Date ('2021-03-15', '2021-02-15', '2021-05-15'), AccountNumber (5, 3, 2) | InvestmentPortfolios : PortfolioID (2, 5, 1), CustomerID (4, 1, 3), OpenEndFunds ('Stock Fund', 'Bond Fund', 'Money Market Fund'), Month ('February', 'January', 'February'), TotalInvestments (20000.0, 10000.0, 25000.0)",
        "ambiguous_queries": [
            "SELECT Customers.Name FROM InvestmentPortfolios JOIN Customers ON Customers.CustomerID = InvestmentPortfolios.CustomerID WHERE (InvestmentPortfolios.OpenEndFunds = 'Money Market Fund' OR InvestmentPortfolios.OpenEndFunds = 'Bond Fund') AND InvestmentPortfolios.Month = 'February'",
            "SELECT Customers.Name FROM InvestmentPortfolios JOIN Customers ON Customers.CustomerID = InvestmentPortfolios.CustomerID WHERE InvestmentPortfolios.OpenEndFunds = 'Money Market Fund' OR InvestmentPortfolios.OpenEndFunds = 'Bond Fund' AND InvestmentPortfolios.Month = 'February'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"money market customers and bond fund customers from February\": [\"bond fund customers from February and money market customers from February\", \"bond fund customers from February and money market customers\"]}"
        },
        "clarification_context": "\"money market customers and bond fund customers from February\" refers to \"bond fund customers from February and money market customers from February\"",
        "clear_ambiguity": "{\"money market customers and bond fund customers from February\": \"bond fund customers from February and money market customers from February\"}",
        "gold_query": "SELECT Customers.Name FROM InvestmentPortfolios JOIN Customers ON Customers.CustomerID = InvestmentPortfolios.CustomerID WHERE (InvestmentPortfolios.OpenEndFunds = 'Money Market Fund' OR InvestmentPortfolios.OpenEndFunds = 'Bond Fund') AND InvestmentPortfolios.Month = 'February'"
    },
    {
        "index": 1098,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_val_newsroom_roles/attachment_1tab_val_newsroom_roles.sqlite",
        "question": "Show me all reports and photographers with a deadline of 2021-03-18 16:30:00.",
        "schema_without_content": "newsrooms : id, name, location | reporters : id, name, role, deadline, assigned_newsroom | storyIdeas : id, title, description, pitchDate, assignedTo, status | publications : id, title, content, publishDate, associatedStoryId | readershipStats : id, publicationId, numPageViews, avgTimeSpentReading",
        "schema_with_content": "newsrooms : id (), name (), location () | reporters : id (4, 2, 1), name ('Anna Brown', 'Jane Smith', 'John Doe'), role ('Reporter', 'Photographer', 'Reporter'), deadline ('2021-03-22 16:30:00', '2021-03-18 16:30:00', '2021-03-18 16:30:00'), assigned_newsroom (3, 2, 1) | storyIdeas : id (5, 3, 4), title ('Economic Recovery', 'Technology Advancement', 'Space Exploration'), description ('Latest advancements in artificial intelligence', 'Strategies for economic recovery post pandemic', 'Global rollout of Covid vaccine'), pitchDate ('2021-03-15 16:39:07', '2021-03-15 16:39:07', '2021-03-15 16:39:07'), assignedTo (2, 1, 4), status () | publications : id (4, 2, 3), title ('Vaccination Drive', 'Post Pandemic Economy', 'New Horizons in Space'), content ('How the global vaccination drive against COVID...', 'Astronomers have discovered new celestial bodies...', 'Effects of climate change on human life...'), publishDate ('2021-03-16 16:39:07', '2021-03-16 16:39:07', '2021-03-16 16:39:07'), associatedStoryId (1, 3, 4) | readershipStats : id (1, 5, 2), publicationId (2, 3, 1), numPageViews (300, 400, 250), avgTimeSpentReading (20, 12, 10)",
        "ambiguous_queries": [
            "SELECT reporters.Name FROM reporters WHERE (reporters.role = 'Reporter' OR reporters.role = 'Photographer') AND reporters.deadline = '2021-03-18 16:30:00'",
            "SELECT reporters.Name FROM reporters WHERE reporters.role = 'Reporter' OR reporters.role = 'Photographer' AND reporters.deadline = '2021-03-18 16:30:00'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"all reports and photographers with a deadline of 2021-03-18 16:30:00\": [\"photographers with a deadline of 2021-03-18 16:30:00 and all reports with a deadline of 2021-03-18 16:30:00\", \"photographers with a deadline of 2021-03-18 16:30:00 and all reports\"]}"
        },
        "clarification_context": "\"all reports and photographers with a deadline of 2021-03-18 16:30:00\" refers to \"photographers with a deadline of 2021-03-18 16:30:00 and all reports with a deadline of 2021-03-18 16:30:00\"",
        "clear_ambiguity": "{\"all reports and photographers with a deadline of 2021-03-18 16:30:00\": \"photographers with a deadline of 2021-03-18 16:30:00 and all reports with a deadline of 2021-03-18 16:30:00\"}",
        "gold_query": "SELECT reporters.Name FROM reporters WHERE (reporters.role = 'Reporter' OR reporters.role = 'Photographer') AND reporters.deadline = '2021-03-18 16:30:00'"
    },
    {
        "index": 1099,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_real_estate_jobs/attachment_2tab_val_real_estate_jobs.sqlite",
        "question": "List all real estate agents and property managers who got 5% commission.",
        "schema_without_content": "Real_Estate_Agents : agent_id, name, phone_number, email, commission | Property_Managers : manager_id, name, phone_number, email, commission | Listed_Properties : property_id, address, price, listing_date, status | Agent_Listings : agent_listing_id, real_estate_agent_id, property_id | Manager_Listings : manager_listing_id, property_manager_id, property_id | Clients : client_id, first_name, last_name, phone_number, email",
        "schema_with_content": "Real_Estate_Agents : agent_id (3, 2, 1), name ('Mike Johnson', 'Jane Smith', 'John Doe'), phone_number ('+0987654321', '+1234567890', '+9876543210'), email ('john@example.com', 'mike@example.com', 'jane@example.com'), commission ('3%', '2%', '5%') | Property_Managers : manager_id (2, 1, 3), name ('Charlie Black', 'Alice Brown', 'Bob White'), phone_number ('+1234567891', '+9876543211', '+1122334455'), email ('bob@example.com', 'alice@example.com', 'charlie@example.com'), commission ('3%', '2%', '5%') | Listed_Properties : property_id (5, 4, 1), address ('999 Fir St', '000 Pine St', '789 Oak St'), price ('$200000', '$300000', '$100000'), listing_date ('2024-03-13 17:23:06', '2024-03-13 17:23:06', '2024-03-13 17:23:06'), status ('Pending Sale', 'Under Contract', 'Available') | Agent_Listings : agent_listing_id (1, 3, 5), real_estate_agent_id (2, 2, 1), property_id (3, 1, 2) | Manager_Listings : manager_listing_id (4, 1, 2), property_manager_id (1, 3, 2), property_id (1, 3, 4) | Clients : client_id (4, 2, 5), first_name ('Kevin', 'Tom', 'Angelina'), last_name ('DiCaprio', 'Costner', 'Watson'), phone_number ('+10001001000', '+9998887777', '+7778889999'), email ('kevincostner@email.com', 'tomhanks@email.com', 'angelinajolie@email.com')",
        "ambiguous_queries": [
            "SELECT Real_Estate_Agents.name FROM Real_Estate_Agents WHERE Real_Estate_Agents.commission = '5%' UNION SELECT Property_Managers.name FROM Property_Managers WHERE Property_Managers.commission = '5%'",
            "SELECT Real_Estate_Agents.name FROM Real_Estate_Agents UNION SELECT Property_Managers.name FROM Property_Managers WHERE Property_Managers.commission = '5%'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"real estate agents and property managers who got 5% commission\": [\"property managers who got 5% commission and real estate agents who got 5% commission\", \"property managers who got 5% commission and real estate agents\"]}"
        },
        "clarification_context": "\"real estate agents and property managers who got 5% commission\" refers to \"property managers who got 5% commission and real estate agents who got 5% commission\"",
        "clear_ambiguity": "{\"real estate agents and property managers who got 5% commission\": \"property managers who got 5% commission and real estate agents who got 5% commission\"}",
        "gold_query": "SELECT Real_Estate_Agents.name FROM Real_Estate_Agents WHERE Real_Estate_Agents.commission = '5%' UNION SELECT Property_Managers.name FROM Property_Managers WHERE Property_Managers.commission = '5%'"
    },
    {
        "index": 1100,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_ref_written_journalism/attachment_1tab_ref_written_journalism.sqlite",
        "question": "Show me news articles and feature articles of 1,000 words.",
        "schema_without_content": "Authors : id, name | Articles : id, title, written_by, Written_journalism, word_count | WordCounts : id, column | Publishers : id, name | Publications : id, article_id, publisher_id, publication_date | Comments : id, comment, article_id",
        "schema_with_content": "Authors : id (1, 2), name ('Jane Smith', 'John Doe') | Articles : id (4, 2, 3), title ('Second Feature Article', 'First News Article', 'First Feature Article'), written_by (1, 2, 4), Written_journalism ('News Article', 'News Article', 'Feature Article'), word_count ('1,000 words', '1,000 words', '900 words') | WordCounts : id (4, 1, 2), column ('1,000 words', '1,200 words', '750 words') | Publishers : id (1, 2), name ('Newspaper XYZ', 'Magazine ABC') | Publications : id (2, 3, 1), article_id (1, 3, 2), publisher_id (2, 1, 1), publication_date ('2023-01-01', '2023-01-03', '2023-01-02') | Comments : id (3, 4, 1), comment ('Interesting insights.', 'Great article!', 'Well-written piece.'), article_id (3, 1, 4)",
        "ambiguous_queries": [
            "SELECT Articles.Title FROM Articles JOIN WordCounts ON Articles.word_count = WordCounts.column WHERE (Articles.Written_journalism = 'News Article' OR Articles.Written_journalism = 'Feature Article') AND WordCounts.column = '1,000 words'",
            "SELECT Articles.Title FROM Articles JOIN WordCounts ON Articles.word_count = WordCounts.column WHERE Articles.Written_journalism = 'News Article' OR Articles.Written_journalism = 'Feature Article' AND WordCounts.column = '1,000 words'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"news articles and feature articles of 1,000 words\": [\"feature articles of 1,000 words and news articles of 1,000 words\", \"feature articles of 1,000 words and news articles\"]}"
        },
        "clarification_context": "\"news articles and feature articles of 1,000 words\" refers to \"feature articles of 1,000 words and news articles\"",
        "clear_ambiguity": "{\"news articles and feature articles of 1,000 words\": \"feature articles of 1,000 words and news articles\"}",
        "gold_query": "SELECT Articles.Title FROM Articles JOIN WordCounts ON Articles.word_count = WordCounts.column WHERE Articles.Written_journalism = 'News Article' OR Articles.Written_journalism = 'Feature Article' AND WordCounts.column = '1,000 words'"
    },
    {
        "index": 1101,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_film_style/attachment_2tab_ref_film_style.sqlite",
        "question": "What are the IDs of action movies and adventure movies directed by Sofia Martinez?",
        "schema_without_content": "Director : id, name | Movie : id, title, directorId, releaseYear | Adventure_Movie : id, movieId, adventureDetails | Action_Movie : id, movieId, actionDetails | Actor : id, actorName | Cast : id, movieId, actorId, role",
        "schema_with_content": "Director : id (2, 3, 1), name ('Jane Smith', 'Sofia Martinez', 'John Doe') | Movie : id (2, 1, 3), title ('Racing Hearts', 'Superhero Squad', 'Epic Quest'), directorId (1, 1, 3), releaseYear (2024, 2025, 2026) | Adventure_Movie : id (1), movieId (1), adventureDetails ('A thrilling journey through uncharted lands.') | Action_Movie : id (2, 1), movieId (3, 2), actionDetails ('A team of heroes band together to save the world.', 'High-octane car chases and explosive stunts.') | Actor : id (2, 1, 3), actorName ('Charlie Green', 'Bob Brown', 'Alice Johnson') | Cast : id (2, 1, 3), movieId (1, 3, 1), actorId (1, 3, 4), role ('Supporting Role', 'Protagonist', 'Sidekick')",
        "ambiguous_queries": [
            "SELECT Action_Movie.movieId FROM Director JOIN Movie ON Director.id = Movie.directorId JOIN Action_Movie ON Movie.id = Action_Movie.movieId WHERE Director.name = 'Sofia Martinez' UNION SELECT Adventure_Movie.movieId FROM Director JOIN Movie ON Director.id = Movie.directorId JOIN Adventure_Movie ON Movie.id = Adventure_Movie.movieId WHERE Director.name = 'Sofia Martinez'",
            "SELECT Action_Movie.movieId FROM Director JOIN Movie ON Director.id = Movie.directorId JOIN Action_Movie ON Movie.id = Action_Movie.movieId UNION SELECT Adventure_Movie.movieId FROM Director JOIN Movie ON Director.id = Movie.directorId JOIN Adventure_Movie ON Movie.id = Adventure_Movie.movieId WHERE Director.name = 'Sofia Martinez'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"action movies and adventure movies directed by Sofia Martinez\": [\"adventure movies directed by Sofia Martinez and action movies directed by Sofia Martinez\", \"adventure movies directed by Sofia Martinez and action movies\"]}"
        },
        "clarification_context": "\"action movies and adventure movies directed by Sofia Martinez\" refers to \"adventure movies directed by Sofia Martinez and action movies\"",
        "clear_ambiguity": "{\"action movies and adventure movies directed by Sofia Martinez\": \"adventure movies directed by Sofia Martinez and action movies\"}",
        "gold_query": "SELECT Action_Movie.movieId FROM Director JOIN Movie ON Director.id = Movie.directorId JOIN Action_Movie ON Movie.id = Action_Movie.movieId UNION SELECT Adventure_Movie.movieId FROM Director JOIN Movie ON Director.id = Movie.directorId JOIN Adventure_Movie ON Movie.id = Adventure_Movie.movieId WHERE Director.name = 'Sofia Martinez'"
    },
    {
        "index": 1102,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_ref_crew/attachment_1tab_ref_crew.sqlite",
        "question": "Show me all directors and editors of shows with hour-long episodes.",
        "schema_without_content": "Actors : Actor_ID, FirstName, LastName, DateOfBirth, Height | Roles : Role_ID, CharacterName, Movie_ID, Actor_ID | Episodes : Episode_ID, SeasonNumber, EpisodeTitle, EpisodeLength, AirDate, Crew_ID | Crew : Crew_ID, Position, Name, Experience, Episode_ID | Movies : Movie_ID, Title, ReleaseDate, Genre, BoxOffice",
        "schema_with_content": "Actors : Actor_ID (2, 1), FirstName ('Chris Johnson', 'Emma Williams'), LastName ('Williams', 'Johnson'), DateOfBirth ('1990-01-10', '1992-08-05'), Height (185.3, 168.2) | Roles : Role_ID (2, 1), CharacterName ('Villain', 'Hero'), Movie_ID (1, 2), Actor_ID (1, 2) | Episodes : Episode_ID (2, 1), SeasonNumber (1, 1), EpisodeTitle ('Second Episode', 'Pilot Episode'), EpisodeLength ('01:00:00', '00:45:00'), AirDate ('2021-09-15', '2021-09-22'), Crew_ID (2, 1) | Crew : Crew_ID (2, 3, 1), Position ('Editor', 'Director', 'Editor'), Name ('David Miller', 'Samantha Taylor', 'Lisa Thompson'), Experience ('6 years', '10 years', '7 years'), Episode_ID (2, 2, 1) | Movies : Movie_ID (1, 2), Title ('Drama Film', 'Action Movie'), ReleaseDate ('2019-05-15', '2020-10-01'), Genre ('Drama', 'Action'), BoxOffice (100000000.0, 80000000.0)",
        "ambiguous_queries": [
            "SELECT Crew.Name FROM Crew JOIN Episodes ON Crew.Episode_ID = Episodes.Episode_ID WHERE (Crew.Position = 'Director' OR Crew.Position = 'Editor') AND Episodes.EpisodeLength = '01:00:00'",
            "SELECT Crew.Name FROM Crew JOIN Episodes ON Crew.Episode_ID = Episodes.Episode_ID WHERE Crew.Position = 'Director' OR Crew.Position = 'Editor' AND Episodes.EpisodeLength = '01:00:00'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"directors and editors of shows with hour-long episodes\": [\"editors of shows with hour-long episodes and directors with hour-long episodes\", \"editors of shows with hour-long episodes and directors\"]}"
        },
        "clarification_context": "\"directors and editors of shows with hour-long episodes\" refers to \"editors of shows with hour-long episodes and directors with hour-long episodes\"",
        "clear_ambiguity": "{\"directors and editors of shows with hour-long episodes\": \"editors of shows with hour-long episodes and directors with hour-long episodes\"}",
        "gold_query": "SELECT Crew.Name FROM Crew JOIN Episodes ON Crew.Episode_ID = Episodes.Episode_ID WHERE (Crew.Position = 'Director' OR Crew.Position = 'Editor') AND Episodes.EpisodeLength = '01:00:00'"
    },
    {
        "index": 1103,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_ref_terms/attachment_1tab_ref_terms.sqlite",
        "question": "Display monthly interest rates and annual percentage rates of bank accounts with a balance of 20,000.",
        "schema_without_content": "AccountTypes : ID, TypeName | Banks : ID, Name, HeadQuarters | Customers : ID, FirstName, LastName, DateOfBirth, Email | BankAccounts : AccountNumber, CustomerID, OpenDate, CurrentBalance | Loans : LoanID, AccountNumber, Amount, StartDate, EndDate, ForeignKeyAccountNumber | Terms : TermId, Description, Value, AccountTypeID, LOAN_ID",
        "schema_with_content": "AccountTypes : ID (1, 3, 2), TypeName ('Savings', 'Checking', 'CD') | Banks : ID (3, 5, 4), Name ('Bank B', 'Bank D', 'Bank E'), HeadQuarters ('London', 'Paris', 'Tokyo') | Customers : ID (4, 5, 3), FirstName ('Alice', 'Peter', 'Jane'), LastName ('White', 'Black', 'Green'), DateOfBirth ('1976-05-15', '1980-08-20', '1995-07-05'), Email ('tom.green@example.com', 'alice.white@example.com', 'jane.smith@example.com') | BankAccounts : AccountNumber ('5834293214', '2834293214', '1834293214'), CustomerID (4, 2, 3), OpenDate ('2021-10-01 10:00:00', '2021-07-01 10:00:00', '2021-08-01 10:00:00'), CurrentBalance (50000.0, 20000.0, 40000.0) | Loans : LoanID (5, 1, 3), AccountNumber ('5834293214', '3834293214', '1834293214'), Amount (15000, 30000, 10000), StartDate ('2021-10-01 10:00:00', '2021-09-01 10:00:00', '2021-08-01 10:00:00'), EndDate ('2030-10-01 10:00:00', '2026-06-01 10:00:00', '2027-07-01 10:00:00'), ForeignKeyAccountNumber ('4834293214', '5834293214', '2834293214') | Terms : TermId (3, 4, 5), Description ('Monthly Interest Rate', 'Annual Percentage Rate', 'Some other value'), Value (0.07, 0.03, 0.06), AccountTypeID (3, 2, 1), LOAN_ID (2, 3, 1)",
        "ambiguous_queries": [
            "SELECT Terms.Value FROM Terms JOIN Loans ON Terms.LOAN_ID = Loans.LoanID JOIN BankAccounts ON Loans.ForeignKeyAccountNumber = BankAccounts.AccountNumber WHERE (Terms.Description = 'Monthly Interest Rate' OR Terms.Description = 'Annual Percentage Rate') AND BankAccounts.CurrentBalance = 20000.0",
            "SELECT Terms.Value FROM Terms JOIN Loans ON Terms.LOAN_ID = Loans.LoanID JOIN BankAccounts ON Loans.ForeignKeyAccountNumber = BankAccounts.AccountNumber WHERE Terms.Description = 'Monthly Interest Rate' OR Terms.Description = 'Annual Percentage Rate' AND BankAccounts.CurrentBalance = 20000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"monthly interest rates and annual percentage rates of bank accounts with a balance of 20,000\": [\"annual percentage rates of bank accounts with a balance of 20,000 and monthly interest rates\", \"annual percentage rates of bank accounts with a balance of 20,000 and monthly interest rates of bank accounts with a balance of 20,000\"]}"
        },
        "clarification_context": "\"monthly interest rates and annual percentage rates of bank accounts with a balance of 20,000\" refers to \"annual percentage rates of bank accounts with a balance of 20,000 and monthly interest rates\"",
        "clear_ambiguity": "{\"monthly interest rates and annual percentage rates of bank accounts with a balance of 20,000\": \"annual percentage rates of bank accounts with a balance of 20,000 and monthly interest rates\"}",
        "gold_query": "SELECT Terms.Value FROM Terms JOIN Loans ON Terms.LOAN_ID = Loans.LoanID JOIN BankAccounts ON Loans.ForeignKeyAccountNumber = BankAccounts.AccountNumber WHERE (Terms.Description = 'Monthly Interest Rate' OR Terms.Description = 'Annual Percentage Rate') AND BankAccounts.CurrentBalance = 20000.0"
    },
    {
        "index": 1104,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_ref_boarding_equipment/attachment_2tab_ref_boarding_equipment.sqlite",
        "question": "What are the capacities of jet bridges and stairways in Terminal 2?",
        "schema_without_content": "Terminals : Id, Name | Aircraft : Id, Type, Seats | Jet_bridge : Id, Length, Capacity, Terminal_id | Staircar : Id, Number_of_Cars, Capacity, Terminal_id | Flight : Id, Aircraft_id, Terminal_id, Departure_time, Arrival_time",
        "schema_with_content": "Terminals : Id (1, 2), Name ('Terminal 1', 'Terminal 2') | Aircraft : Id (2, 3, 1), Type ('Fokker F28', 'Airbus A380', 'Boing 737'), Seats (500, 60, 200) | Jet_bridge : Id (1, 2), Length (100.0, 90.0), Capacity (100, 120), Terminal_id (1, 2) | Staircar : Id (1, 2), Number_of_Cars (5, 10), Capacity (50, 30), Terminal_id (2, 1) | Flight : Id (4, 5, 2), Aircraft_id (4, 3, 5), Terminal_id (1, 1, 2), Departure_time ('2022-12-02 15:00:00', '2022-12-01 18:00:00', '2022-12-01 14:00:00'), Arrival_time ('2022-12-01 16:00:00', '2022-12-01 20:00:00', '2022-12-01 11:00:00')",
        "ambiguous_queries": [
            "SELECT Jet_bridge.Capacity FROM Terminals JOIN Jet_bridge ON Terminals.Id = Jet_bridge.Terminal_id WHERE Terminals.Name = 'Terminal 2' UNION SELECT Staircar.Capacity FROM Terminals JOIN Staircar ON Terminals.Id = Staircar.Terminal_id WHERE Terminals.Name = 'Terminal 2'",
            "SELECT Jet_bridge.Capacity FROM Terminals JOIN Jet_bridge ON Terminals.Id = Jet_bridge.Terminal_id UNION SELECT Staircar.Capacity FROM Terminals JOIN Staircar ON Terminals.Id = Staircar.Terminal_id WHERE Terminals.Name = 'Terminal 2'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"jet bridges and stairways in Terminal 2\": [\"stairways in Terminal 2 and jet bridges in Terminal 2\", \"stairways in Terminal 2 and jet bridges\"]}"
        },
        "clarification_context": "\"jet bridges and stairways in Terminal 2\" refers to \"stairways in Terminal 2 and jet bridges\"",
        "clear_ambiguity": "{\"jet bridges and stairways in Terminal 2\": \"stairways in Terminal 2 and jet bridges\"}",
        "gold_query": "SELECT Jet_bridge.Capacity FROM Terminals JOIN Jet_bridge ON Terminals.Id = Jet_bridge.Terminal_id UNION SELECT Staircar.Capacity FROM Terminals JOIN Staircar ON Terminals.Id = Staircar.Terminal_id WHERE Terminals.Name = 'Terminal 2'"
    },
    {
        "index": 1105,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_educational_methods2/attachment_1tab_val_educational_methods2.sqlite",
        "question": "Show peer tutoring assignments and group work assignments that had 10 students.",
        "schema_without_content": "Teacher : teacherID, name, age, experience | Student : studentID, name, grade, teacherID | Subject : subjectID, name | Class : classID, subjectID, teacherID | Assignment : assignmentID, title, dueDate, educationalMethod, participants, classID",
        "schema_with_content": "Teacher : teacherID (2, 3, 1), name ('Michael Brown', 'John Doe', 'Jane Smith'), age (48, 27, 32), experience ('3 years', '5 years', '10 years') | Student : studentID (3, 1, 2), name ('Alice Johnson', 'Bob Williams', 'Carol Lee'), grade (9, 10, 9), teacherID (2, 3, 1) | Subject : subjectID (2, 3, 1), name ('English', 'History', 'Mathematics') | Class : classID (1, 3, 2), subjectID (1, 3, 2), teacherID (2, 3, 1) | Assignment : assignmentID (3, 5, 2), title ('Historical Project', 'Book Report Presentation', 'Literature Essay'), dueDate ('2022-07-15 14:00:00', '2022-07-01 14:00:00', '2022-06-01 14:00:00'), educationalMethod ('Group Work', 'Peer Tutoring', 'Group Work'), participants ('10 students', '10 students', '8 students'), classID (1, 2, 2)",
        "ambiguous_queries": [
            "SELECT Assignment.title FROM Assignment WHERE (Assignment.educationalMethod = 'Peer Tutoring' OR Assignment.educationalMethod = 'Group Work') AND Assignment.participants = '10 students'",
            "SELECT Assignment.title FROM Assignment WHERE Assignment.educationalMethod = 'Peer Tutoring' OR Assignment.educationalMethod = 'Group Work' AND Assignment.participants = '10 students'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"peer tutoring assignments and group work assignments that had 10 students\": [\"group work assignments that had 10 students and peer tutoring assignments that had 10 students\", \"group work assignments that had 10 students and peer tutoring assignments\"]}"
        },
        "clarification_context": "\"peer tutoring assignments and group work assignments that had 10 students\" refers to \"group work assignments that had 10 students and peer tutoring assignments\"",
        "clear_ambiguity": "{\"peer tutoring assignments and group work assignments that had 10 students\": \"group work assignments that had 10 students and peer tutoring assignments\"}",
        "gold_query": "SELECT Assignment.title FROM Assignment WHERE Assignment.educationalMethod = 'Peer Tutoring' OR Assignment.educationalMethod = 'Group Work' AND Assignment.participants = '10 students'"
    },
    {
        "index": 1106,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_val_performance_artist/attachment_2tab_val_performance_artist.sqlite",
        "question": "Show comedians and magicians who perform for 60 minutes.",
        "schema_without_content": "standupcomedians : id, name, duration_of_performance, performance_venue, date | magicians : id, name, duration_of_performance, venue_type, show_date | movies : id, title, release_year, genre, director | tvshows : id, title, season, episode, network | games : id, title, platform, genre, developer | musicalbums : id, artist, albumname, genre, releaseyear",
        "schema_with_content": "standupcomedians : id (3, 1, 2), name ('Dave Chappelle', 'Jerry Seinfeld', 'Kevin Hart'), duration_of_performance (90, 60, 65), performance_venue ('Hollywood Bowl', 'Radio City Music Hall', 'The Beacon Theatre'), date ('2024-03-13 18:23:49', '2024-03-13 18:23:49', '2024-03-13 18:23:49') | magicians : id (5, 4, 1), name ('David Copperfield', 'Penn & Teller', 'Criss Angel'), duration_of_performance (60, 80, 75), venue_type ('Planet Hollywood Resort & Casino', 'Rio All Suite Hotel & Casino', 'London West End'), show_date ('2024-03-13 18:23:49', '2024-03-13 18:23:49', '2024-03-13 18:23:49') | movies : id (2, 5, 4), title ('Titanic', 'Interstellar', 'Gravity'), release_year (2013, 2009, 1997), genre ('Science Fiction', 'Science Fiction', 'Romance'), director ('Alfonso Cuaron', 'Christopher Nolan', 'James Cameron') | tvshows : id (3, 5, 1), title ('Game Of Thrones', 'Friends', 'The Office US'), season (8, 10, 9), episode (8, 201, 60), network ('Netflix', 'NBC', 'AMC Network') | games : id (3, 4, 5), title ('Call Of Duty: Modern Warfare', 'Assassin’s Creed Odyssey', 'Red Dead Redemption 2'), platform ('Windows', 'PC', 'iOS'), genre ('Action RPG', 'Battle Royale', 'Team-based Multiplayer First-person shooter'), developer ('Epic Games', 'Rockstar Studios', 'Activision') | musicalbums : id (3, 5, 2), artist ('Adele', 'Ed Sheeran', 'Beyonce'), albumname ('The Thrill Of It All', '÷', 'Man Of The Woods'), genre ('Pop', 'Pop', 'Pop'), releaseyear (2017, 2018, 2017)",
        "ambiguous_queries": [
            "SELECT standupcomedians.name FROM standupcomedians WHERE standupcomedians.duration_of_performance = 60 UNION SELECT magicians.name FROM magicians WHERE magicians.duration_of_performance = 60",
            "SELECT standupcomedians.name FROM standupcomedians UNION SELECT magicians.name FROM magicians WHERE magicians.duration_of_performance = 60"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"comedians and magicians who perform for 60 minutes\": [\"magicians who perform for 60 minutes and comedians who perform for 60 minutes\", \"magicians who perform for 60 minutes and comedians\"]}"
        },
        "clarification_context": "\"comedians and magicians who perform for 60 minutes\" refers to \"magicians who perform for 60 minutes and comedians\"",
        "clear_ambiguity": "{\"comedians and magicians who perform for 60 minutes\": \"magicians who perform for 60 minutes and comedians\"}",
        "gold_query": "SELECT standupcomedians.name FROM standupcomedians UNION SELECT magicians.name FROM magicians WHERE magicians.duration_of_performance = 60"
    },
    {
        "index": 1107,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_val_film_type/attachment_2tab_val_film_type.sqlite",
        "question": "Display documentaries and short films with a budget of $500,000.",
        "schema_without_content": "Documentaries : id, Title, Genre, Duration, Budget | ShortFilms : id, Title, Genre, Duration, Budget | Directors : id, Name, BirthDate, Nationality | FilmsDirectedBy : FilmID, DirectorID | ActorsInFilms : ActorID, FilmID, Role",
        "schema_with_content": "Documentaries : id (5, 3, 1), Title ('Into The Inferno', 'Grizzly Man', 'The Silent World'), Genre ('Nature/Documentary', 'Animal Rights/Documentary', 'Wildlife/Documentary'), Duration (8975.0, 17500.0, 15500.0), Budget ('400000', '500000', '750000') | ShortFilms : id (2, 4, 5), Title ('The Great Escape', 'One Small Step', 'Lost and Found'), Genre ('Action/Short Film', 'Comedy/Short Film', 'Drama/Short Film'), Duration (4800.0, 4200.0, 3300.0), Budget ('400000', '500000', '500000') | Directors : id (5, 2, 3), Name ('Emily Brown', 'John Smith', 'David Williams'), BirthDate ('1970-01-01', '1980-01-01', '1965-02-15'), Nationality ('Canada', 'USA', 'New Zealand') | FilmsDirectedBy : FilmID (2, 1, 3), DirectorID (5, 3, 1) | ActorsInFilms : ActorID (4, 5, 2), FilmID (4, 3, 2), Role ('Her', 'Scientist', 'Leader of the Wolf Pack')",
        "ambiguous_queries": [
            "SELECT Documentaries.title FROM Documentaries WHERE Documentaries.Budget = '500000' UNION SELECT ShortFilms.title FROM ShortFilms WHERE ShortFilms.Budget = '500000'",
            "SELECT Documentaries.title FROM Documentaries UNION SELECT ShortFilms.title FROM ShortFilms WHERE ShortFilms.Budget = '500000'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"documentaries and short films with a budget of $500,000\": [\"short films with a budget of $500,000 and documentaries with a budget of $500,000\", \"short films with a budget of $500,000 and documentaries\"]}"
        },
        "clarification_context": "\"documentaries and short films with a budget of $500,000\" refers to \"short films with a budget of $500,000 and documentaries with a budget of $500,000\"",
        "clear_ambiguity": "{\"documentaries and short films with a budget of $500,000\": \"short films with a budget of $500,000 and documentaries with a budget of $500,000\"}",
        "gold_query": "SELECT Documentaries.title FROM Documentaries WHERE Documentaries.Budget = '500000' UNION SELECT ShortFilms.title FROM ShortFilms WHERE ShortFilms.Budget = '500000'"
    },
    {
        "index": 1108,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_ref_educational_materials/attachment_1tab_ref_educational_materials.sqlite",
        "question": "Show textbooks and e-books published by someone with phone number 1234567890.",
        "schema_without_content": "Publishers : PublisherID, Name, Address, Email, PhoneNumber | EducationalMaterials : MaterialID, Title, Type, ISBN, PublisherID | Students : StudentID, FirstName, LastName, DateOfBirth, Email | Teachers : TeacherID, FirstName, LastName, Email | Enrollments : EnrollmentID, CourseID, StudentID, Semester, Year, Grade | Courses : CourseID, CourseTitle, Department, TeacherID",
        "schema_with_content": "Publishers : PublisherID (1, 2), Name ('Pearson', 'Random House'), Address ('New York', 'Los Angeles'), Email ('randomhouse@example.com', 'pearson@example.com'), PhoneNumber ('1234567890', '0987654321') | EducationalMaterials : MaterialID (3, 2, 1), Title ('Math Book', 'Physics Book', 'Computer Science E-Book'), Type ('E-Book', 'Textbook', 'Textbook'), ISBN ('24680', '67890', '13579'), PublisherID (2, 1, 2) | Students : StudentID (2, 1), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), DateOfBirth ('1999-02-02', '2000-01-01'), Email ('jane@example.com', 'john@example.com') | Teachers : TeacherID (1, 2), FirstName ('Michael', 'Emily'), LastName ('Johnson', 'Williams'), Email ('emily@example.com', 'michael@example.com') | Enrollments : EnrollmentID (2, 1), CourseID (1, 2), StudentID (2, 1), Semester ('Fall', 'Spring'), Year (2021, 2021), Grade () | Courses : CourseID (1, 2), CourseTitle ('Calculus', 'English Literature'), Department ('Language Arts', 'Mathematics'), TeacherID (1, 2)",
        "ambiguous_queries": [
            "SELECT EducationalMaterials.Title FROM EducationalMaterials JOIN Publishers ON EducationalMaterials.PublisherID = Publishers.PublisherID WHERE (EducationalMaterials.Type = 'Textbook' OR EducationalMaterials.Type = 'E-Book') AND Publishers.PhoneNumber = '1234567890'",
            "SELECT EducationalMaterials.Title FROM EducationalMaterials JOIN Publishers ON EducationalMaterials.PublisherID = Publishers.PublisherID WHERE EducationalMaterials.Type = 'Textbook' OR EducationalMaterials.Type = 'E-Book' AND Publishers.PhoneNumber = '1234567890'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"textbooks and e-books published by someone with phone number 1234567890\": [\"e-books published by someone with phone number 1234567890 and textbooks published by someone with phone number 1234567890\", \"e-books published by someone with phone number 1234567890 and textbooks\"]}"
        },
        "clarification_context": "\"textbooks and e-books published by someone with phone number 1234567890\" refers to \"e-books published by someone with phone number 1234567890 and textbooks published by someone with phone number 1234567890\"",
        "clear_ambiguity": "{\"textbooks and e-books published by someone with phone number 1234567890\": \"e-books published by someone with phone number 1234567890 and textbooks published by someone with phone number 1234567890\"}",
        "gold_query": "SELECT EducationalMaterials.Title FROM EducationalMaterials JOIN Publishers ON EducationalMaterials.PublisherID = Publishers.PublisherID WHERE (EducationalMaterials.Type = 'Textbook' OR EducationalMaterials.Type = 'E-Book') AND Publishers.PhoneNumber = '1234567890'"
    },
    {
        "index": 1109,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_val_mental_health_careers/attachment_1tab_val_mental_health_careers.sqlite",
        "question": "Show me psychologists and psychiatrists from Harmony Wellness Center.",
        "schema_without_content": "Companies : CompanyID, Name, Address, PhoneNumber | Departments : DepartmentID, Name, Description, LocationID | Positions : PositionID, Title, Salary, DepartmentID | Employees : EmployeeID, BirthDate, HireDate, PositionID, Mental_Health_Career, Clinic, FullName",
        "schema_with_content": "Companies : CompanyID (5, 1, 4), Name ('MedCo', 'TechCorp', 'EduInc'), Address ('456 Gov Plaza', '123 Tech St.', '789 Fin Blvd.,'), PhoneNumber ('+123456789', '+321654897', '+987654321') | Departments : DepartmentID (5, 1, 6), Name ('IT', 'Accounting', 'Academics'), Description ('System Administration', 'Legislative Affairs', 'Research and Development'), LocationID (1, 2, 3) | Positions : PositionID (5, 1, 6), Title ('Accountant', 'Policy Analyst', 'Network Administrator'), Salary (90000, 75000, 50000), DepartmentID (2, 5, 1) | Employees : EmployeeID (4, 1, 3), BirthDate ('1992-01-01', '1985-01-01', '1988-01-01'), HireDate ('2015-06-01', '2018-12-01', '2017-08-01'), PositionID (1, 2, 3), Mental_Health_Career ('Psychiatrist', 'Psychologist', 'Psychiatrist'), Clinic ('Peaceful Haven', 'Harmony Wellness Center', 'Harmony Wellness Center'), FullName ('Alice Jackson', 'John Doe', 'Jane Smith')",
        "ambiguous_queries": [
            "SELECT Employees.FullName FROM Employees WHERE (Employees.Mental_Health_Career = 'Psychologist' OR Employees.Mental_Health_Career = 'Psychiatrist') AND Employees.Clinic = 'Harmony Wellness Center'",
            "SELECT Employees.FullName FROM Employees WHERE Employees.Mental_Health_Career = 'Psychologist' OR Employees.Mental_Health_Career = 'Psychiatrist' AND Employees.Clinic = 'Harmony Wellness Center'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"psychologists and psychiatrists from Harmony Wellness Center\": [\"psychiatrists from Harmony Wellness Center and psychologists from Harmony Wellness Center\", \"psychiatrists from Harmony Wellness Center and psychologists\"]}"
        },
        "clarification_context": "\"psychologists and psychiatrists from Harmony Wellness Center\" refers to \"psychiatrists from Harmony Wellness Center and psychologists from Harmony Wellness Center\"",
        "clear_ambiguity": "{\"psychologists and psychiatrists from Harmony Wellness Center\": \"psychiatrists from Harmony Wellness Center and psychologists from Harmony Wellness Center\"}",
        "gold_query": "SELECT Employees.FullName FROM Employees WHERE (Employees.Mental_Health_Career = 'Psychologist' OR Employees.Mental_Health_Career = 'Psychiatrist') AND Employees.Clinic = 'Harmony Wellness Center'"
    },
    {
        "index": 1110,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_val_news_content_types/attachment_1tab_val_news_content_types.sqlite",
        "question": "Please provide all opinion pieces and featured articles from volume 01.",
        "schema_without_content": "Author : id, name, email | Category : id, title, description | Publication : id, name, address | Article : id, title, content, news_content_type, volume, date, author_id, category_id, publication_id",
        "schema_with_content": "Author : id (1, 4, 3), name ('David Lee', 'Alice Smith', 'Eva Green'), email ('charlie@example.com', 'alice@example.com', 'david@example.com') | Category : id (5, 3, 4), title ('Culture', 'Technology', 'Entertainment'), description ('Hollywood gossip and entertainment news.', 'Cultural happenings around the world.', 'Global business news.') | Publication : id (1, 4, 3), name ('Los Angeles Times', 'New York Times', 'Washington Post'), address ('1 Tower Center Blvd, Secaucus, NJ 07094, USA', 'One Market Plaza, San Francisco, CA 94105, USA', '229 W 43rd St, New York, NY 10036, USA') | Article : id (3, 5, 2), title ('Football Game Results', 'Climate Change Solutions', 'Stock Market Rises'), content ('A discussion about...', 'Results of last night’s football game.', 'Details of today’s stock market rise.'), news_content_type ('Sports', 'Opinion Piece', 'Opinion Piece'), volume ('03', '01', '02'), date ('2024-03-07 23:50:16', '2024-03-07 23:50:16', '2024-03-07 23:50:16'), author_id (1, 3, 5), category_id (4, 3, 5), publication_id (5, 1, 2)",
        "ambiguous_queries": [
            "SELECT Article.title FROM Article WHERE (Article.news_content_type = 'Opinion Piece' OR Article.news_content_type = 'Feature Article') AND Article.volume = '01'",
            "SELECT Article.title FROM Article WHERE Article.news_content_type = 'Opinion Piece' OR Article.news_content_type = 'Feature Article' AND Article.volume = '01'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"opinion pieces and featured articles from volume 01\": [\"featured articles from volume 01 and opinion pieces from volume 01\", \"featured articles from volume 01 and opinion pieces\"]}"
        },
        "clarification_context": "\"opinion pieces and featured articles from volume 01\" refers to \"featured articles from volume 01 and opinion pieces from volume 01\"",
        "clear_ambiguity": "{\"opinion pieces and featured articles from volume 01\": \"featured articles from volume 01 and opinion pieces from volume 01\"}",
        "gold_query": "SELECT Article.title FROM Article WHERE (Article.news_content_type = 'Opinion Piece' OR Article.news_content_type = 'Feature Article') AND Article.volume = '01'"
    },
    {
        "index": 1111,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_val_film_style/attachment_2tab_val_film_style.sqlite",
        "question": "Display adventure movies and action movies directed by Sofia Martinez.",
        "schema_without_content": "Adventure_Movies : id, title, release_year, genre, Director | Action_Movies : id, title, release_year, genre, Director | Comedy_Movies : id, title, release_year, genre, Director | SciFi_Movies : id, title, release_year, genre, Director | Fantasy_Movies : id, title, release_year, genre, Director | Animated_Movies : id, title, release_year, genre, Director",
        "schema_with_content": "Adventure_Movies : id (1, 2), title ('Journey of a Lifetime', 'Lost Treasures'), release_year (2019, 2018), genre ('Adventure', 'Adventure'), Director ('John Doe', 'Sofia Martinez') | Action_Movies : id (1, 2), title ('High Stakes Heist', 'Urban Warfare'), release_year (2017, 2020), genre ('Action', 'Action'), Director ('Sofia Martinez', 'Jane Smith') | Comedy_Movies : id (2, 1), title ('Hilarious Mishaps', 'Funny Fiasco'), release_year (2015, 2016), genre ('Comedy', 'Comedy'), Director ('Jack Black', 'Chris Rock') | SciFi_Movies : id (1, 2), title ('Galactic Odyssey', 'Interstellar Voyage'), release_year (2013, 2021), genre ('SciFi', 'SciFi'), Director ('Christopher Nolan', 'George Lucas') | Fantasy_Movies : id (2, 1), title ('Magical Quest', 'Enchanted Kingdom'), release_year (2011, 2012), genre ('Fantasy', 'Fantasy'), Director ('Peter Jackson', 'Guillermo del Toro') | Animated_Movies : id (2, 1), title ('Vibrant World', 'Whimsical Wonderland'), release_year (2009, 2010), genre ('Animated', 'Animated'), Director ('DreamWorks Animations', 'Disney Pixar')",
        "ambiguous_queries": [
            "SELECT Adventure_Movies.title FROM Adventure_Movies WHERE Adventure_Movies.Director = 'Sofia Martinez' UNION SELECT Action_Movies.title FROM Action_Movies WHERE Action_Movies.Director = 'Sofia Martinez'",
            "SELECT Adventure_Movies.title FROM Adventure_Movies UNION SELECT Action_Movies.title FROM Action_Movies WHERE Action_Movies.Director = 'Sofia Martinez'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"adventure movies and action movies directed by Sofia Martinez\": [\"action movies directed by Sofia Martinez and adventure movies directed by Sofia Martinez\", \"action movies directed by Sofia Martinez and adventure movies\"]}"
        },
        "clarification_context": "\"adventure movies and action movies directed by Sofia Martinez\" refers to \"action movies directed by Sofia Martinez and adventure movies\"",
        "clear_ambiguity": "{\"adventure movies and action movies directed by Sofia Martinez\": \"action movies directed by Sofia Martinez and adventure movies\"}",
        "gold_query": "SELECT Adventure_Movies.title FROM Adventure_Movies UNION SELECT Action_Movies.title FROM Action_Movies WHERE Action_Movies.Director = 'Sofia Martinez'"
    },
    {
        "index": 1112,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_technology_careers/attachment_2tab_val_technology_careers.sqlite",
        "question": "Display middle data analysts and software developers.",
        "schema_without_content": "Software_Developers : id, name, experience, skills, grade | Data_Analysts : id, name, experience, tools, grade | Companies : id, name, location, size | Projects : id, description, startDate, endDate, companyId | Developers_Projects : developerId, projectId | Analysts_Projects : analystId, projectId",
        "schema_with_content": "Software_Developers : id (2, 1), name ('Jane Smith', 'John Doe'), experience (6, 3), skills ('Python, Java, C++', 'JavaScript, PHP, Ruby'), grade ('High', 'Middle') | Data_Analysts : id (2, 1), name ('Bob Brown', 'Alice Johnson'), experience (7, 4), tools ('Excel, Tableau, R', 'SQL, SAS, Python'), grade ('Middle', 'Advanced') | Companies : id (2, 1), name ('Startup Inc.', 'TechCorp'), location ('New York', 'San Francisco'), size ('Small', 'Large') | Projects : id (2, 1), description ('Mobile App Design', 'Web Application Development'), startDate ('2021-09-01', '2021-08-01'), endDate ('2021-12-31', '2021-12-31'), companyId (1, 2) | Developers_Projects : developerId (1, 2), projectId (1, 2) | Analysts_Projects : analystId (1, 2), projectId (1, 2)",
        "ambiguous_queries": [
            "SELECT Software_Developers.name FROM Software_Developers WHERE Software_Developers.grade = 'Middle' UNION SELECT Data_Analysts.name FROM Data_Analysts WHERE Data_Analysts.grade = 'Middle'",
            "SELECT Software_Developers.name FROM Software_Developers UNION SELECT Data_Analysts.name FROM Data_Analysts WHERE Data_Analysts.grade = 'Middle'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"middle data analysts and software developers\": [\"middle data analysts and middle software developers\", \"software developers and software developers middle\"]}"
        },
        "clarification_context": "\"middle data analysts and software developers\" refers to \"software developers and software developers middle\"",
        "clear_ambiguity": "{\"middle data analysts and software developers\": \"software developers and software developers middle\"}",
        "gold_query": "SELECT Software_Developers.name FROM Software_Developers UNION SELECT Data_Analysts.name FROM Data_Analysts WHERE Data_Analysts.grade = 'Middle'"
    },
    {
        "index": 1113,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_learning_spaces/attachment_1tab_val_learning_spaces.sqlite",
        "question": "Give me the science labs and art studios that have computers.",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth, EmailAddress | Teachers : TeacherID, FirstName, LastName, DateOfBirth, EmailAddress | Classes : ClassID, ClassName, TeacherID | ResourceAllocation : AllocationID, ClassID, ResourceType, Quantity | Learning_Spaces : SpaceID, Name, Type, AvailableResources, Capacity",
        "schema_with_content": "Students : StudentID (5, 3, 2), FirstName ('John', 'Jane', 'Emma'), LastName ('Williams', 'Brown', 'Johnson'), DateOfBirth ('1990-01-01', '1987-02-20', '1992-12-15'), EmailAddress ('emma.brown@example.com', 'alice.johnson@example.com', 'jane.smith@example.com') | Teachers : TeacherID (1, 3, 2), FirstName ('Michael', 'Anna', 'Tom'), LastName ('Blue', 'Black', 'Green'), DateOfBirth ('1985-07-31', '1991-11-20', '1988-02-10'), EmailAddress ('david.green@example.com', 'sarah.blue@example.com', 'tom.red@example.com') | Classes : ClassID (3, 5, 1), ClassName ('Physics', 'Math', 'History'), TeacherID (1, 2, 5) | ResourceAllocation : AllocationID (3, 1, 4), ClassID (4, 2, 1), ResourceType ('Charts', 'Projectors', 'Microscopes'), Quantity (15, 20, 10) | Learning_Spaces : SpaceID (5, 4, 2), Name ('Physics Lab', 'Biology Lab', 'Orchestra Room'), Type ('Art Studio', 'Music Room', 'Science Lab'), AvailableResources ('Computers', 'Computers', 'Pianos'), Capacity (25, 20, 30)",
        "ambiguous_queries": [
            "SELECT Learning_Spaces.Name FROM Learning_Spaces WHERE (Learning_Spaces.Type = 'Science Lab' OR Learning_Spaces.Type = 'Art Studio') AND Learning_Spaces.AvailableResources = 'Computers'",
            "SELECT Learning_Spaces.Name FROM Learning_Spaces WHERE Learning_Spaces.Type = 'Science Lab' OR Learning_Spaces.Type = 'Art Studio' AND Learning_Spaces.AvailableResources = 'Computers'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"science labs and art studios that have computers\": [\"art studios that have computers and science labs that have computers\", \"art studios that have computers and science labs\"]}"
        },
        "clarification_context": "\"science labs and art studios that have computers\" refers to \"art studios that have computers and science labs\"",
        "clear_ambiguity": "{\"science labs and art studios that have computers\": \"art studios that have computers and science labs\"}",
        "gold_query": "SELECT Learning_Spaces.Name FROM Learning_Spaces WHERE Learning_Spaces.Type = 'Science Lab' OR Learning_Spaces.Type = 'Art Studio' AND Learning_Spaces.AvailableResources = 'Computers'"
    },
    {
        "index": 1114,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_2tab_ref_types_of_banks/attachment_2tab_ref_types_of_banks.sqlite",
        "question": "List all central banks and commercial banks that operate in the USA.",
        "schema_without_content": "Country : id, name | Central_Bank : id, central_bank_name, country_id | Commercial_Bank : id, commercial_bank_name, country_id | Account : id, account_number, balance, commercial_bank_id",
        "schema_with_content": "Country : id (1, 2), name ('UK', 'USA') | Central_Bank : id (1, 2), central_bank_name ('Federal Reserve', 'Bank of England'), country_id (1, 2) | Commercial_Bank : id (1, 2), commercial_bank_name ('Citibank', 'Barclays'), country_id (2, 1) | Account : id (2, 1), account_number (123456789, 987654321), balance (0, 0), commercial_bank_id (1, 2)",
        "ambiguous_queries": [
            "SELECT Central_Bank.central_bank_name AS bank_name FROM Country JOIN Central_Bank ON Country.id = Central_Bank.country_id WHERE Country.name = 'USA' UNION SELECT Commercial_Bank.commercial_bank_name AS bank_name FROM Country JOIN Commercial_Bank ON Country.id = Commercial_Bank.country_id WHERE Country.name = 'USA'",
            "SELECT Central_Bank.central_bank_name AS bank_name FROM Country JOIN Central_Bank ON Country.id = Central_Bank.country_id UNION SELECT Commercial_Bank.commercial_bank_name AS bank_name FROM Country JOIN Commercial_Bank ON Country.id = Commercial_Bank.country_id WHERE Country.name = 'USA'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"central banks and commercial banks that operate in the USA\": [\"commercial banks that operate in the USA and central banks that operate in the USA\", \"commercial banks that operate in the USA and central banks\"]}"
        },
        "clarification_context": "\"central banks and commercial banks that operate in the USA\" refers to \"commercial banks that operate in the USA and central banks\"",
        "clear_ambiguity": "{\"central banks and commercial banks that operate in the USA\": \"commercial banks that operate in the USA and central banks\"}",
        "gold_query": "SELECT Central_Bank.central_bank_name AS bank_name FROM Country JOIN Central_Bank ON Country.id = Central_Bank.country_id UNION SELECT Commercial_Bank.commercial_bank_name AS bank_name FROM Country JOIN Commercial_Bank ON Country.id = Commercial_Bank.country_id WHERE Country.name = 'USA'"
    },
    {
        "index": 1115,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
        "question": "List science fiction books and romance books published in 2018.",
        "schema_without_content": "Authors : AuthorID, Name, Country | Books : ISBN, Title, YearOfPublication, Genre, AuthorID | Publishers : PublisherID, Name, Location | BookPublishingHistory : PublishingID, ISBN, PublisherID, YearOfPublication | SalesData : SaleID, ISBN, QuantitySold, Revenue, DateOfSale | Reviews : ReviewID, ISBN, Rating, Comment, DatePosted",
        "schema_with_content": "Authors : AuthorID (1, 5, 3), Name ('Jane Smith', 'John Doe', 'Bob Brown'), Country ('Australia', 'UK', 'Germany') | Books : ISBN ('665544332211', '1234567890123', '1122334455667'), Title ('Romance Book', 'Science Fiction Book', 'Yet Another Romance Book'), YearOfPublication (2018, 2017, 2020), Genre ('Science Fiction', 'Mystery', 'Romance'), AuthorID (3, 1, 2) | Publishers : PublisherID (2, 5, 3), Name ('Publisher D', 'Publisher B', 'Publisher E'), Location ('Sydney', 'London', 'Toronto') | BookPublishingHistory : PublishingID (2, 5, 3), ISBN ('1234567890123', '1122334455667', '9876543210987'), PublisherID (2, 3, 4), YearOfPublication (2020, 2018, 2017) | SalesData : SaleID (3, 1, 4), ISBN ('778899110000', '665544332211', '9876543210987'), QuantitySold (500, 200, 600), Revenue (8000, 10000, 12000), DateOfSale ('2021-08-02', '2021-08-01', '2021-08-05') | Reviews : ReviewID (1, 2, 4), ISBN ('778899110000', '1122334455667', '1234567890123'), Rating (4, 3, 5), Comment ('Average story.', 'Excellent book!', 'Good read.'), DatePosted ('2021-08-05', '2021-08-02', '2021-08-03')",
        "ambiguous_queries": [
            "SELECT Books.Title FROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN WHERE (Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance') AND BookPublishingHistory.YearOfPublication = 2018",
            "SELECT Books.Title FROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN WHERE Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance' AND BookPublishingHistory.YearOfPublication = 2018"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"science fiction books and romance books published in 2018\": [\"romance books published in 2018 and science fiction books published in 2018\", \"romance books published in 2018 and science fiction books\"]}"
        },
        "clarification_context": "\"science fiction books and romance books published in 2018\" refers to \"romance books published in 2018 and science fiction books\"",
        "clear_ambiguity": "{\"science fiction books and romance books published in 2018\": \"romance books published in 2018 and science fiction books\"}",
        "gold_query": "SELECT Books.Title FROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN WHERE Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance' AND BookPublishingHistory.YearOfPublication = 2018"
    },
    {
        "index": 1116,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_ref_educational_venues/attachment_1tab_ref_educational_venues.sqlite",
        "question": "Show museums and planetariums with a ticket price of 20.",
        "schema_without_content": "Educational_Venues : VenueID, Name, Type, Address, City, State | Tickets : TicketID, Price | Venue_Tickets : VenueID, TicketID | Visitors : VisitorID, FirstName, LastName, Age, Email | Visit_Records : RecordID, VenueID, VisitorID, Date, Time",
        "schema_with_content": "Educational_Venues : VenueID (3, 5, 1), Name ('The Franklin Institute Science Museum', 'Adler Planetarium', 'Field Museum of Natural History'), Type ('Museum', 'Planetarium', 'Museum'), Address ('600 Independence Ave SW', '1300 S Lake Shore Drive', '222 N 20th St.'), City ('Washington', 'Chicago', 'Philadelphia'), State ('DC', 'DC', 'IL') | Tickets : TicketID (3, 4, 1), Price (30.0, 15.0, 35.0) | Venue_Tickets : VenueID (1, 2, 1), TicketID (3, 2, 1) | Visitors : VisitorID (1, 4, 2), FirstName ('Jane', 'Bob', 'John'), LastName ('Doe', 'White', 'Green'), Age (40, 30, 28), Email ('alice.brown@example.com', 'bob.white@example.com', 'jane.doe@example.com') | Visit_Records : RecordID (2, 1, 4), VenueID (1, 1, 3), VisitorID (1, 2, 1), Date ('2022-01-03', '2022-01-03', '2022-01-02'), Time ('10:00:00', '14:00:00', '10:00:00')",
        "ambiguous_queries": [
            "SELECT Educational_Venues.Name FROM Educational_Venues JOIN Venue_Tickets ON Educational_Venues.VenueID = Venue_Tickets.VenueID JOIN Tickets ON Venue_Tickets.TicketID = Tickets.TicketID WHERE Educational_Venues.Type = 'Museum' AND Tickets.Price = 20.0 UNION SELECT Educational_Venues.Name FROM Educational_Venues JOIN Venue_Tickets ON Educational_Venues.VenueID = Venue_Tickets.VenueID JOIN Tickets ON Venue_Tickets.TicketID = Tickets.TicketID WHERE Educational_Venues.Type = 'Planetarium' AND Tickets.Price = 20.0",
            "SELECT Educational_Venues.Name FROM Educational_Venues WHERE Educational_Venues.Type = 'Museum' UNION SELECT Educational_Venues.Name FROM Educational_Venues JOIN Venue_Tickets ON Educational_Venues.VenueID = Venue_Tickets.VenueID JOIN Tickets ON Venue_Tickets.TicketID = Tickets.TicketID WHERE Educational_Venues.Type = 'Planetarium' AND Tickets.Price = 20.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"museums and planetariums with a ticket price of 20\": [\"planetariums with a ticket price of 20 and museums with a ticket price of 20\", \"planetariums with a ticket price of 20 and museums\"]}"
        },
        "clarification_context": "\"museums and planetariums with a ticket price of 20\" refers to \"planetariums with a ticket price of 20 and museums with a ticket price of 20\"",
        "clear_ambiguity": "{\"museums and planetariums with a ticket price of 20\": \"planetariums with a ticket price of 20 and museums with a ticket price of 20\"}",
        "gold_query": "SELECT Educational_Venues.Name FROM Educational_Venues JOIN Venue_Tickets ON Educational_Venues.VenueID = Venue_Tickets.VenueID JOIN Tickets ON Venue_Tickets.TicketID = Tickets.TicketID WHERE Educational_Venues.Type = 'Museum' AND Tickets.Price = 20.0 UNION SELECT Educational_Venues.Name FROM Educational_Venues JOIN Venue_Tickets ON Educational_Venues.VenueID = Venue_Tickets.VenueID JOIN Tickets ON Venue_Tickets.TicketID = Tickets.TicketID WHERE Educational_Venues.Type = 'Planetarium' AND Tickets.Price = 20.0"
    },
    {
        "index": 1117,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_airport_dining/attachment_2tab_val_airport_dining.sqlite",
        "question": "Show all the restaurants and bars which open from 9AM to 11PM.",
        "schema_without_content": "Flight : flightID, airline, departureAirport, arrivalAirport, date, duration | Employee : employeeID, name, position, hireDate, salary | Passenger : passengerID, firstName, lastName, birthdate, nationality | Restaurant : restaurantID, airportID, name, location, type, openingHours | Bar : barID, airportID, name, location, capacity, openingHours",
        "schema_with_content": "Flight : flightID (3, 4, 2), airline ('American Airlines', 'Alaska Airlines', 'Delta'), departureAirport ('ATL', 'DFW', 'MCO'), arrivalAirport ('PDX', 'LAX', 'IAH'), date ('2023-08-01 06:00:00', '2023-08-05 10:00:00', '2023-08-03 08:00:00'), duration (4, 3, 4) | Employee : employeeID (2, 1, 4), name ('John Doe', 'Chris Brown', 'Bob Johnson'), position ('Security Officer', 'Flight Attendant', 'Customer Service Representative'), hireDate ('2019-07-01', '2021-05-01', '2022-08-01'), salary (100000.0, 40000.0, 35000.0) | Passenger : passengerID (3, 2, 5), firstName ('Alexander', 'Michael', 'Samantha'), lastName ('Martinez', 'Johnson', 'Smith'), birthdate ('2000-04-05', '1990-01-15', '1988-03-25'), nationality ('UK', 'USA', 'Spain') | Restaurant : restaurantID (1, 5, 2), airportID (1, 5, 4), name ('Café de la Maison', 'The Flying Pizza', 'Taste of Texas BBQ'), location ('Terminal C', 'Terminal D', 'Terminal A'), type ('BBQ', 'French', 'Salad'), openingHours ('11 AM to 9 PM', '7 AM to 7 PM', '9 AM to 11 PM') | Bar : barID (2, 4, 3), airportID (1, 4, 2), name ('Rooftop Wine Bar', 'Whiskey Sky', 'Sunset Margarita Bar'), location ('Concourse C', 'Concourse E', 'Concourse D'), capacity (75, 50, 100), openingHours ('9 AM to 11 PM', '7 AM to 7 PM', '10 AM to 8 PM')",
        "ambiguous_queries": [
            "SELECT Restaurant.name FROM Restaurant WHERE Restaurant.openingHours = '9 AM to 11 PM' UNION SELECT Bar.name FROM Bar WHERE Bar.openingHours = '9 AM to 11 PM'",
            "SELECT Restaurant.name FROM Restaurant UNION SELECT Bar.name FROM Bar WHERE Bar.openingHours = '9 AM to 11 PM'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"restaurants and bars which open from 9AM to 11PM\": [\"bars which open from 9AM to 11PM and restaurants which open from 9AM to 11PM\", \"bars which open from 9AM to 11PM and restaurants\"]}"
        },
        "clarification_context": "\"restaurants and bars which open from 9AM to 11PM\" refers to \"bars which open from 9AM to 11PM and restaurants which open from 9AM to 11PM\"",
        "clear_ambiguity": "{\"restaurants and bars which open from 9AM to 11PM\": \"bars which open from 9AM to 11PM and restaurants which open from 9AM to 11PM\"}",
        "gold_query": "SELECT Restaurant.name FROM Restaurant WHERE Restaurant.openingHours = '9 AM to 11 PM' UNION SELECT Bar.name FROM Bar WHERE Bar.openingHours = '9 AM to 11 PM'"
    },
    {
        "index": 1118,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
        "question": "Show all comic books and graphic novels published by BOOM Studios.",
        "schema_without_content": "Publisher : id, name | SequentialArtType : id, type | ArtWork : id, title, publishDate, publisherId, sequentialArtTypeId | Artist : id, firstName, lastName, artWorkId",
        "schema_with_content": "Publisher : id (2, 5, 3), name ('Marvel Comics', 'Image Comics', 'BOOM Studios') | SequentialArtType : id (4, 2, 5), type ('Digital Comic', 'Manga', 'Graphic Novel') | ArtWork : id (4, 1, 2), title ('Saga #1', 'The Walking Dead #1', 'X-Men #1'), publishDate ('2023-02-15', '2023-01-15', '2023-01-01'), publisherId (2, 1, 1), sequentialArtTypeId (1, 1, 2) | Artist : id (2, 5, 3), firstName ('Bob', 'John', 'Jane'), lastName ('Williams', 'Brown', 'Johnson'), artWorkId (2, 5, 4)",
        "ambiguous_queries": [
            "SELECT ArtWork.Title FROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id WHERE (SequentialArtType.type = 'Comic Book' OR SequentialArtType.type = 'Graphic Novel') AND Publisher.name = 'BOOM Studios'",
            "SELECT ArtWork.Title FROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id WHERE SequentialArtType.type = '' OR SequentialArtType.type = 'Graphic Novel' AND Publisher.name = 'BOOM Studios'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"comic books and graphic novels published by BOOM Studios\": [\"graphic novels published by BOOM Studios and comic books published by BOOM Studios\", \"graphic novels published by BOOM Studios and comic books\"]}"
        },
        "clarification_context": "\"comic books and graphic novels published by BOOM Studios\" refers to \"graphic novels published by BOOM Studios and comic books published by BOOM Studios\"",
        "clear_ambiguity": "{\"comic books and graphic novels published by BOOM Studios\": \"graphic novels published by BOOM Studios and comic books published by BOOM Studios\"}",
        "gold_query": "SELECT ArtWork.Title FROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id WHERE (SequentialArtType.type = 'Comic Book' OR SequentialArtType.type = 'Graphic Novel') AND Publisher.name = 'BOOM Studios'"
    },
    {
        "index": 1119,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_performance_event/attachment_2tab_ref_performance_event.sqlite",
        "question": "Provide dance recitals and talent shows in Room 202",
        "schema_without_content": "Audition_Room : RoomID, RoomName | Talent_Show : ShowID, Name, Description, RoomID | Participant : ParticipantID, FirstName, LastName, Age, PhoneNumber, Email, Role, RecitalID, ShowID | Dance_Recital : RecitalID, name, Date, Time, RoomID",
        "schema_with_content": "Audition_Room : RoomID (1, 2), RoomName ('Room 101', 'Room 202') | Talent_Show : ShowID (1, 2), Name ('Summer Talent Extravaganza', 'Fall Variety Night'), Description ('A showcase of local talent.', 'An evening of diverse acts and performances.'), RoomID (2, 1) | Participant : ParticipantID (1, 5, 3), FirstName ('Michael', 'Olivia', 'John'), LastName ('Smith', 'Brown', 'Johnson'), Age (28, 18, 22), PhoneNumber ('555-1314', '555-5678', '555-1234'), Email ('janesmith@email.com', 'john.doe@email.com', 'emily.johnson@email.com'), Role ('Musician', 'Comedian', 'Actor'), RecitalID (1, 2, 1), ShowID (2, 1, 1) | Dance_Recital : RecitalID (1, 2), name ('Rhythmic Revolutions', 'Celestial Movements: A Balletic Odyssey'), Date ('2023-08-15', '2023-07-01'), Time ('20:00', '19:00'), RoomID (2, 1)",
        "ambiguous_queries": [
            "SELECT Dance_Recital.name FROM Audition_Room JOIN Dance_Recital ON Audition_Room.RoomID = Dance_Recital.RoomID WHERE Audition_Room.RoomName = 'Room 202' UNION SELECT Talent_Show.name FROM Audition_Room JOIN Talent_Show ON Audition_Room.RoomID = Talent_Show.RoomID WHERE Audition_Room.RoomName = 'Room 202'",
            "SELECT Dance_Recital.name FROM Audition_Room JOIN Dance_Recital ON Audition_Room.RoomID = Dance_Recital.RoomID UNION SELECT Talent_Show.name FROM Audition_Room JOIN Talent_Show ON Audition_Room.RoomID = Talent_Show.RoomID WHERE Audition_Room.RoomName = 'Room 202'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"dance recitals and talent shows in Room 202\": [\"talent shows in Room 202 and dance recitals in Room 202\", \"talent shows in Room 202 and dance recitals\"]}"
        },
        "clarification_context": "\"dance recitals and talent shows in Room 202\" refers to \"talent shows in Room 202 and dance recitals\"",
        "clear_ambiguity": "{\"dance recitals and talent shows in Room 202\": \"talent shows in Room 202 and dance recitals\"}",
        "gold_query": "SELECT Dance_Recital.name FROM Audition_Room JOIN Dance_Recital ON Audition_Room.RoomID = Dance_Recital.RoomID UNION SELECT Talent_Show.name FROM Audition_Room JOIN Talent_Show ON Audition_Room.RoomID = Talent_Show.RoomID WHERE Audition_Room.RoomName = 'Room 202'"
    },
    {
        "index": 1120,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
        "question": "Show horror films and thriller films with a budget of 20 million.",
        "schema_without_content": "Genres : id, genre | Films : id, title, release_date, director, budget | Directors : id, name, birth_year, nationality | Film_Director : film_id, director_id | Film_Genre : film_id, genre_id",
        "schema_with_content": "Genres : id (2, 1), genre ('Horror', 'Thriller') | Films : id (1, 4, 3), title ('Inception', 'Gone Girl', 'The Shining'), release_date ('2010-07-16', '2014-03-14', '1980-06-22'), director ('Stanley Kubrick', 'David Fincher', 'David Robert Mitchell'), budget (20000000.0, 65000000.0, 5000000.0) | Directors : id (2, 3, 4), name ('David Robert Mitchell', 'Stanley Kubrick', 'David Fincher'), birth_year (1928, 1962, 1974), nationality ('American', 'American', 'English') | Film_Director : film_id (1, 4, 3), director_id (3, 1, 2) | Film_Genre : film_id (2, 1, 3), genre_id (2, 2, 1)",
        "ambiguous_queries": [
            "SELECT Films.title FROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id WHERE (Genres.genre = 'Horror' OR Genres.genre = 'Thriller') AND Films.budget = 20000000.0",
            "SELECT Films.title FROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id WHERE Genres.genre = 'Horror' OR Genres.genre = 'Thriller' AND Films.budget = 20000000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"horror films and thriller films with a budget of 20 million\": [\"thriller films with a budget of 20 million and horror films with a budget of 20 million\", \"thriller films with a budget of 20 million and horror films\"]}"
        },
        "clarification_context": "\"horror films and thriller films with a budget of 20 million\" refers to \"thriller films with a budget of 20 million and horror films\"",
        "clear_ambiguity": "{\"horror films and thriller films with a budget of 20 million\": \"thriller films with a budget of 20 million and horror films\"}",
        "gold_query": "SELECT Films.title FROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id WHERE Genres.genre = 'Horror' OR Genres.genre = 'Thriller' AND Films.budget = 20000000.0"
    },
    {
        "index": 1121,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_ref_film_type/attachment_1tab_ref_film_type.sqlite",
        "question": "Display documentaries and short films with a budget of 700000.0.",
        "schema_without_content": "filmmaking : id, name, directorName, releaseDate | film_type : id, type | budget : id, amount | film_details : id, filmmakingId, film_typeId, budgetId | crew_members : id, role, memberName | casts : id, filmmakingId, characterName, actorName",
        "schema_with_content": "filmmaking : id (1, 2, 3), name ('Another Documentary', 'A Short Film', 'The Documentary'), directorName ('Emily Brown', 'John Doe', 'Michael Johnson'), releaseDate ('2021-09-01', '2021-07-25', '2021-08-30') | film_type : id (2, 1), type ('Short Film', 'Documentary') | budget : id (2, 1), amount (500000.0, 700000.0) | film_details : id (3, 4, 2), filmmakingId (1, 3, 4), film_typeId (2, 1, 2), budgetId (2, 1, 2) | crew_members : id (1, 2, 3), role ('Director', 'Cinematographer', 'Editor'), memberName ('Alice Davis', 'John Doe', 'David Black') | casts : id (3, 4, 1), filmmakingId (3, 4, 2), characterName ('Himself', 'Child Prodigy', 'Herself'), actorName ('John Doe', 'Emily Brown', 'Michael Johnson')",
        "ambiguous_queries": [
            "SELECT filmmaking.name FROM film_type JOIN film_details ON film_type.id = film_details.film_typeId JOIN budget ON film_details.budgetId = budget.id JOIN filmmaking ON filmmaking.id = film_details.filmmakingId WHERE (film_type.type = 'Documentary' OR film_type.type = 'Short Film') AND budget.amount = 700000.0",
            "SELECT filmmaking.name FROM film_type JOIN film_details ON film_type.id = film_details.film_typeId JOIN budget ON film_details.budgetId = budget.id JOIN filmmaking ON filmmaking.id = film_details.filmmakingId WHERE film_type.type = 'Documentary' OR film_type.type = 'Short Film' AND budget.amount = 700000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"documentaries and short films with a budget of 700000.0\": [\"short films with a budget of 700000.0 and documentaries with a budget of 700000.0\", \"short films with a budget of 700000.0 and documentaries\"]}"
        },
        "clarification_context": "\"documentaries and short films with a budget of 700000.0\" refers to \"short films with a budget of 700000.0 and documentaries\"",
        "clear_ambiguity": "{\"documentaries and short films with a budget of 700000.0\": \"short films with a budget of 700000.0 and documentaries\"}",
        "gold_query": "SELECT filmmaking.name FROM film_type JOIN film_details ON film_type.id = film_details.film_typeId JOIN budget ON film_details.budgetId = budget.id JOIN filmmaking ON filmmaking.id = film_details.filmmakingId WHERE film_type.type = 'Documentary' OR film_type.type = 'Short Film' AND budget.amount = 700000.0"
    },
    {
        "index": 1122,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_cultural_festival/attachment_1tab_ref_cultural_festival.sqlite",
        "question": "Show music festivals and film festivals with 60000 attendees.",
        "schema_without_content": "Festivals : id, Name, Cultural_Festival, Location | Participants : id, FirstName, LastName, Role, Age | Events : id, FestivalID, Attendance, ParticipantID",
        "schema_with_content": "Festivals : id (1, 5, 4), Name ('Winter Jazz Concerts', 'Summer Music Festival', 'Spring Dance Showcase'), Cultural_Festival ('Music Festival', 'Art Festival', 'Dance Festival'), Location ('Boston', 'New York', 'Miami') | Participants : id (4, 1, 5), FirstName ('Bob', 'Jane', 'Alice'), LastName ('Smith', 'Doe', 'Johnson'), Role ('Performer', 'Artist', 'Volunteer'), Age (28, 29, 32) | Events : id (5, 4, 3), FestivalID (3, 4, 1), Attendance (50000, 50000, 60000), ParticipantID (3, 2, 5)",
        "ambiguous_queries": [
            "SELECT Festivals.Name FROM Festivals JOIN Events ON Festivals.id = Events.FestivalID WHERE (Festivals.Cultural_Festival = 'Music Festival' OR Festivals.Cultural_Festival = 'Film Festival') AND Events.Attendance = 60000",
            "SELECT Festivals.Name FROM Festivals JOIN Events ON Festivals.id = Events.FestivalID WHERE Festivals.Cultural_Festival = 'Music Festival' OR Festivals.Cultural_Festival = 'Film Festival' AND Events.Attendance = 60000"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"music festivals and film festivals with 60000 attendees\": [\"film festivals with 60000 attendees and music festivals with 60000 attendees\", \"film festivals with 60000 attendees and music festivals\"]}"
        },
        "clarification_context": "\"music festivals and film festivals with 60000 attendees\" refers to \"film festivals with 60000 attendees and music festivals\"",
        "clear_ambiguity": "{\"music festivals and film festivals with 60000 attendees\": \"film festivals with 60000 attendees and music festivals\"}",
        "gold_query": "SELECT Festivals.Name FROM Festivals JOIN Events ON Festivals.id = Events.FestivalID WHERE Festivals.Cultural_Festival = 'Music Festival' OR Festivals.Cultural_Festival = 'Film Festival' AND Events.Attendance = 60000"
    },
    {
        "index": 1123,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_film_style/attachment_1tab_ref_film_style.sqlite",
        "question": "Show all the adventure movies and action movies directed by Sofia Martinez.",
        "schema_without_content": "Movies : MovieId, Title, FilmStyle, DirectorId | Directors : DirectorId, Name | MovieDetails : DetailID, MovieId, ReleaseYear, Budget, Revenue, Duration, Rating | CastMembers : MemberId, MovieId, ActorName, CharacterPlayed | Reviews : ReviewId, MovieId, UserId, Comment, Stars",
        "schema_with_content": "Movies : MovieId (4, 5, 2), Title ('The Lost City', 'Alien Invasion', 'Guns of Glory'), FilmStyle ('Science Fiction', 'Adventure Movie', 'Adventure Movie'), DirectorId (1, 2, 2) | Directors : DirectorId (3, 2, 1), Name ('John Doe', 'Sofia Martinez', 'Jane Smith') | MovieDetails : DetailID (3, 4, 5), MovieId (3, 1, 4), ReleaseYear (2022, 2020, 2020), Budget (7500000, 10000000, 15000000), Revenue (9000000, 16000000, 25000000), Duration ('100 minutes', '115 minutes', '120 minutes'), Rating (9.2, 8.5, 7.5) | CastMembers : MemberId (2, 1, 4), MovieId (4, 3, 1), ActorName ('Charlie Davis', 'Emma Thompson', 'Bob Brown'), CharacterPlayed ('Protagonist', 'Lead Protagonist', 'Love Interest') | Reviews : ReviewId (4, 1, 3), MovieId (1, 3, 2), UserId (3, 1, 4), Comment ('Not my cup of tea...', 'Fun watch overall!', 'Predictable plot...'), Stars (2, 5, 4)",
        "ambiguous_queries": [
            "SELECT Movies.Title FROM Movies JOIN Directors ON Movies.DirectorId = Directors.DirectorId WHERE (Movies.FilmStyle = 'Adventure Movie' OR Movies.FilmStyle = 'Action Movie') AND Directors.Name = 'Sofia Martinez'",
            "SELECT Movies.Title FROM Movies JOIN Directors ON Movies.DirectorId = Directors.DirectorId WHERE Movies.FilmStyle = 'Adventure Movie' OR Movies.FilmStyle = 'Action Movie' AND Directors.Name = 'Sofia Martinez'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"adventure movies and action movies directed by Sofia Martinez\": [\"action movies directed by Sofia Martinez and adventure movies directed by Sofia Martinez\", \"action movies directed by Sofia Martinez and adventure movies\"]}"
        },
        "clarification_context": "\"adventure movies and action movies directed by Sofia Martinez\" refers to \"action movies directed by Sofia Martinez and adventure movies directed by Sofia Martinez\"",
        "clear_ambiguity": "{\"adventure movies and action movies directed by Sofia Martinez\": \"action movies directed by Sofia Martinez and adventure movies directed by Sofia Martinez\"}",
        "gold_query": "SELECT Movies.Title FROM Movies JOIN Directors ON Movies.DirectorId = Directors.DirectorId WHERE (Movies.FilmStyle = 'Adventure Movie' OR Movies.FilmStyle = 'Action Movie') AND Directors.Name = 'Sofia Martinez'"
    },
    {
        "index": 1124,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_ref_special_care_passengers/attachment_2tab_ref_special_care_passengers.sqlite",
        "question": "Provide unaccompanied minors and disabled passengers whose assistant is Clare Allen.",
        "schema_without_content": "Flight : FlightID, Origin, Destination, DepartureTime | Passenger : PassengerID, Email, PhoneNumber, FullName | Assistant : AssistantID, Name, ContactInfo | UnaccompaniedMinor : UMID, PassengerID, AssistantID | DisabledPassenger : SNPID, PassengerID, AssistantID | Booking : BookingID, FlightID, PassengerID, UMID, SNPID",
        "schema_with_content": "Flight : FlightID (5, 1, 2), Origin ('IAH', 'DFW', 'JFK'), Destination ('MIA', 'DEN', 'PHX'), DepartureTime ('2023-04-04 14:00:00', '2023-04-03 12:00:00', '2023-04-05 16:00:00') | Passenger : PassengerID (4, 5, 2), Email ('emmabrown@email.com', 'johnsmith@email.com', 'alicejohnson@email.com'), PhoneNumber ('555-987-6543', '555-123-4567', '555-654-3219'), FullName ('Alice Johnson', 'John Smith', 'Emma Brown') | Assistant : AssistantID (1, 2), Name ('David Johnson', 'Clare Allen'), ContactInfo ('clareallen@assistant.com; +1-234-567-8900', 'davidjohnson@assistant.com; +1-345-678-9012') | UnaccompaniedMinor : UMID (2, 1), PassengerID (2, 1), AssistantID (1, 2) | DisabledPassenger : SNPID (1, 2), PassengerID (3, 4), AssistantID (1, 2) | Booking : BookingID (2, 3, 5), FlightID (3, 4, 1), PassengerID (2, 5, 1), UMID (1, 1, 2), SNPID (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Passenger.FullName FROM Assistant JOIN UnaccompaniedMinor ON Assistant.AssistantID = UnaccompaniedMinor.AssistantID JOIN Passenger ON Passenger.PassengerID = UnaccompaniedMinor.PassengerID WHERE Assistant.Name = 'Clare Allen' UNION SELECT Passenger.FullName FROM Assistant JOIN DisabledPassenger ON Assistant.AssistantID = DisabledPassenger.AssistantID JOIN Passenger ON Passenger.PassengerID = DisabledPassenger.PassengerID WHERE Assistant.Name = 'Clare Allen'",
            "SELECT Passenger.FullName FROM Assistant JOIN UnaccompaniedMinor ON Assistant.AssistantID = UnaccompaniedMinor.AssistantID JOIN Passenger ON Passenger.PassengerID = UnaccompaniedMinor.PassengerID UNION SELECT Passenger.FullName FROM Assistant JOIN DisabledPassenger ON Assistant.AssistantID = DisabledPassenger.AssistantID JOIN Passenger ON Passenger.PassengerID = DisabledPassenger.PassengerID WHERE Assistant.Name = 'Clare Allen'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"unaccompanied minors and disabled passengers whose assistant is Clare Allen\": [\"disabled passengers whose assistant is Clare Allen and unaccompanied minors whose assistant is Clare Allen\", \"disabled passengers whose assistant is Clare Allen and unaccompanied minors\"]}"
        },
        "clarification_context": "\"unaccompanied minors and disabled passengers whose assistant is Clare Allen\" refers to \"disabled passengers whose assistant is Clare Allen and unaccompanied minors\"",
        "clear_ambiguity": "{\"unaccompanied minors and disabled passengers whose assistant is Clare Allen\": \"disabled passengers whose assistant is Clare Allen and unaccompanied minors\"}",
        "gold_query": "SELECT Passenger.FullName FROM Assistant JOIN UnaccompaniedMinor ON Assistant.AssistantID = UnaccompaniedMinor.AssistantID JOIN Passenger ON Passenger.PassengerID = UnaccompaniedMinor.PassengerID UNION SELECT Passenger.FullName FROM Assistant JOIN DisabledPassenger ON Assistant.AssistantID = DisabledPassenger.AssistantID JOIN Passenger ON Passenger.PassengerID = DisabledPassenger.PassengerID WHERE Assistant.Name = 'Clare Allen'"
    },
    {
        "index": 1125,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_ref__bank_cards/attachment_1tab_ref__bank_cards.sqlite",
        "question": "Show credit cards and debit cards with a limit of 5000.",
        "schema_without_content": "Clients : client_id, name, address, email, phoneNumber | Accounts : account_id, client_id, account_type, balance | _Bank_Cards : card_id, account_id, card_number, card_expiry, cvv, _bank_card_type | Limits : limit_id, card_id, card_limit",
        "schema_with_content": "Clients : client_id (1, 2), name ('Jane Smith', 'John Doe'), address ('456 Elm St', '123 Main St'), email ('johndoe@example.com', 'janesmith@example.com'), phoneNumber ('555-5678', '555-1234') | Accounts : account_id (1, 2), client_id (2, 1), account_type ('Checking', 'Savings'), balance (1000.0, 500.0) | _Bank_Cards : card_id (1, 2, 3), account_id (1, 2, 2), card_number ('1234567890123456', '4567890123456789', '0987654321098765'), card_expiry ('2024-01-15', '2023-12-31', '2023-12-31'), cvv (12, 456, 789), _bank_card_type ('Credit Card', 'Debit Card', 'Debit Card') | Limits : limit_id (1, 2, 4), card_id (1, 3, 4), card_limit (5000.0, 10000.0, 5000.0)",
        "ambiguous_queries": [
            "SELECT _Bank_Cards.card_number FROM _Bank_Cards JOIN Limits ON _Bank_Cards.card_id = Limits.card_id WHERE (_Bank_Cards._bank_card_type = 'Credit Card' OR _Bank_Cards._bank_card_type = 'Debit Card') AND Limits.card_limit = 5000.0",
            "SELECT _Bank_Cards.card_number FROM _Bank_Cards JOIN Limits ON _Bank_Cards.card_id = Limits.card_id WHERE _Bank_Cards._bank_card_type = 'Credit Card' OR _Bank_Cards._bank_card_type = 'Debit Card' AND Limits.card_limit = 5000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"credit cards and debit cards with a limit of 5000\": [\"debit cards with a limit of 5000 and credit cards with a limit of 5000\", \"debit cards with a limit of 5000 and credit cards\"]}"
        },
        "clarification_context": "\"credit cards and debit cards with a limit of 5000\" refers to \"debit cards with a limit of 5000 and credit cards with a limit of 5000\"",
        "clear_ambiguity": "{\"credit cards and debit cards with a limit of 5000\": \"debit cards with a limit of 5000 and credit cards with a limit of 5000\"}",
        "gold_query": "SELECT _Bank_Cards.card_number FROM _Bank_Cards JOIN Limits ON _Bank_Cards.card_id = Limits.card_id WHERE (_Bank_Cards._bank_card_type = 'Credit Card' OR _Bank_Cards._bank_card_type = 'Debit Card') AND Limits.card_limit = 5000.0"
    },
    {
        "index": 1126,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_1tab_val_airport_staff/attachment_1tab_val_airport_staff.sqlite",
        "question": "Show all gate agents and pilots that speak English.",
        "schema_without_content": "Languages : LanguageID, Name | Airports : AirportID, Name, City, Country | Staff : StaffID, Position, AirportID, LanguageID, FullName | Flights : FlightID, DepartureTime, ArrivalTime, OriginAirportID, DestinationAirportID, AssignedStaffID",
        "schema_with_content": "Languages : LanguageID (5, 1, 4), Name ('Italian', 'French', 'German') | Airports : AirportID (3, 5, 1), Name ('LAX', 'MAD', 'FRA'), City ('Frankfurt', 'New York', 'Los Angeles'), Country ('Spain', 'Germany', 'USA') | Staff : StaffID (2, 1, 3), Position ('Gate Agent', 'Pilot', 'Pilot'), AirportID (2, 4, 5), LanguageID (1, 1, 3), FullName ('Jane Smith', 'Emily Brown', 'David White') | Flights : FlightID (5, 4, 1), DepartureTime ('2023-01-01 16:00', '2023-01-01 08:00', '2023-01-02 09:00'), ArrivalTime ('2023-01-01 18:00', '2023-01-01 10:00', '2023-01-02 19:00'), OriginAirportID (1, 5, 4), DestinationAirportID (2, 2, 3), AssignedStaffID (3, 5, 2)",
        "ambiguous_queries": [
            "SELECT Staff.FullName FROM Staff JOIN Languages ON Staff.LanguageID = Languages.LanguageID WHERE (Staff.Position = 'Gate Agent' OR Staff.Position = 'Pilot') AND Languages.name = 'English'",
            "SELECT Staff.FullName FROM Staff JOIN Languages ON Staff.LanguageID = Languages.LanguageID WHERE Staff.Position = 'Gate Agent' OR Staff.Position = 'Pilot' AND Languages.name = 'English'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"gate agents and pilots that speak English\": [\"pilots that speak English and gate agents that speak English\", \"pilots that speak English and gate agents\"]}"
        },
        "clarification_context": "\"gate agents and pilots that speak English\" refers to \"pilots that speak English and gate agents that speak English\"",
        "clear_ambiguity": "{\"gate agents and pilots that speak English\": \"pilots that speak English and gate agents that speak English\"}",
        "gold_query": "SELECT Staff.FullName FROM Staff JOIN Languages ON Staff.LanguageID = Languages.LanguageID WHERE (Staff.Position = 'Gate Agent' OR Staff.Position = 'Pilot') AND Languages.name = 'English'"
    },
    {
        "index": 1127,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_ref_technology_careers/attachment_2tab_ref_technology_careers.sqlite",
        "question": "Show senior data analysts and software developers.",
        "schema_without_content": "Grade : id, name | Department : id, departmentName | Position : id, positionName | Employee : id, gradeId, departmentId, positionId, FullName | Software_Developer : id, employeeId, experience, programmingLanguages, toolsUsed | Data_Analyst : id, employeeId, experience, analyticalTools, dataSources",
        "schema_with_content": "Grade : id (1, 2, 3), name ('Junior', 'Middle', 'Senior') | Department : id (3, 2, 1), departmentName ('IT', 'Human Resources', 'Finance') | Position : id (1, 3, 2), positionName ('Specialist', 'Engineer', 'Manager') | Employee : id (4, 1, 2), gradeId (1, 2, 3), departmentId (1, 1, 2), positionId (3, 1, 2), FullName ('Jane Doe', 'Alice Wonderland', 'Charlie Brown') | Software_Developer : id (4, 5), employeeId (4, 5), experience (5, 7), programmingLanguages ('Perl, Objective-C, Fortran', 'Kotlin, Rust, Scala'), toolsUsed ('Emacs, Xcode', 'Android Studio, Vim') | Data_Analyst : id (1, 2, 3), employeeId (2, 3, 1), experience (5, 9, 7), analyticalTools ('Matlab, Stata, SPSS', 'Tableau, PowerBI, QlikView', 'R, SAS, Excel'), dataSources ('SAP HANA, Teradata, MongoDB', 'SQL Server, MySQL, Oracle', 'Google Analytics, Adobe Analytics, Salesforce')",
        "ambiguous_queries": [
            "SELECT Employee.FullName FROM Grade JOIN Employee ON Grade.id = Employee.gradeId JOIN Software_Developer ON Employee.id = Software_Developer.employeeId WHERE Grade.name = 'Senior' UNION SELECT Employee.FullName FROM Grade JOIN Employee ON Grade.id = Employee.gradeId JOIN Data_Analyst ON Employee.id = Data_Analyst.employeeId WHERE Grade.name = 'Senior'",
            "SELECT Employee.FullName FROM Grade JOIN Employee ON Grade.id = Employee.gradeId JOIN Software_Developer ON Employee.id = Software_Developer.employeeId UNION SELECT Employee.FullName FROM Grade JOIN Employee ON Grade.id = Employee.gradeId JOIN Data_Analyst ON Employee.id = Data_Analyst.employeeId WHERE Grade.name = 'Senior'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"senior data analysts and software developers\": [\"senior data analysts and senior software developers\", \"software developers and software developers senior\"]}"
        },
        "clarification_context": "\"senior data analysts and software developers\" refers to \"senior data analysts and senior software developers\"",
        "clear_ambiguity": "{\"senior data analysts and software developers\": \"senior data analysts and senior software developers\"}",
        "gold_query": "SELECT Employee.FullName FROM Grade JOIN Employee ON Grade.id = Employee.gradeId JOIN Software_Developer ON Employee.id = Software_Developer.employeeId WHERE Grade.name = 'Senior' UNION SELECT Employee.FullName FROM Grade JOIN Employee ON Grade.id = Employee.gradeId JOIN Data_Analyst ON Employee.id = Data_Analyst.employeeId WHERE Grade.name = 'Senior'"
    },
    {
        "index": 1128,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_val_visual_storytelling/attachment_1tab_val_visual_storytelling.sqlite",
        "question": "Give me all the articles with photos and videos related to technology.",
        "schema_without_content": "Authors : id, firstName, lastName, email, phoneNumber | Publishers : id, pubName, address, city, country | Articles : id, title, authorId, pubId, publicationDate, visualStorytelling, articleType | Categories : id, catName",
        "schema_with_content": "Authors : id (1, 2), firstName ('Jane', 'John'), lastName ('Doe', 'Smith'), email ('jane@example.com', 'john@example.com'), phoneNumber ('123-456-7890', '098-765-4321') | Publishers : id (1, 2), pubName ('Newspaper Co.', 'Magazine Inc.'), address ('456 Elm St.', '123 Main St.'), city ('Anytown', 'Bigcity'), country ('Canada', 'USA') | Articles : id (1, 2, 4), title (\"World's Biggest Machines\", \"The World's Largest Robots\", 'Yet Another Topic'), authorId (1, 2, 3), pubId (2, 2, 1), publicationDate ('2024-03-07 23:10:34', '2024-03-07 23:10:34', '2024-03-07 23:10:34'), visualStorytelling ('Photo', 'Video', 'Photo'), articleType ('Technology', 'Environment', 'Politics') | Categories : id (2, 5, 3), catName ('Technology', 'Culture', 'Health')",
        "ambiguous_queries": [
            "SELECT Articles.title FROM Articles WHERE (Articles.visualStorytelling = 'Photo' OR Articles.visualStorytelling = 'Video') AND Articles.articleType = 'Technology'",
            "SELECT Articles.title FROM Articles WHERE Articles.visualStorytelling = 'Photo' OR Articles.visualStorytelling = 'Video' AND Articles.articleType = 'Technology'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"articles with photos and videos related to technology\": [\"videos related to technology and articles with photos related to technology\", \"videos related to technology and articles with photos\"]}"
        },
        "clarification_context": "\"articles with photos and videos related to technology\" refers to \"videos related to technology and articles with photos related to technology\"",
        "clear_ambiguity": "{\"articles with photos and videos related to technology\": \"videos related to technology and articles with photos related to technology\"}",
        "gold_query": "SELECT Articles.title FROM Articles WHERE (Articles.visualStorytelling = 'Photo' OR Articles.visualStorytelling = 'Video') AND Articles.articleType = 'Technology'"
    },
    {
        "index": 1129,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_ref_writing_styles/attachment_1tab_ref_writing_styles.sqlite",
        "question": "Show short stories and personal essays written by Evelyn O'Connor.",
        "schema_without_content": "Authors : id, Name | Articles : id, Title, Content, PublicationDate, AuthorId, WritingStyleId | PublishingHouses : id, Name | ArticlePublications : id, ArticleId, PublisherId, PublishDate | ReadingStats : id, ArticleId, ReadCount | WritingStyles : id, StyleName",
        "schema_with_content": "Authors : id (2, 5, 4), Name ('Jane Smith', \"Evelyn O'Connor\", 'Emily Davis') | Articles : id (3, 4, 1), Title ('Another Short Story', 'The Travelogue', 'A Personal Essay'), Content ('Content of the travelogue...', 'Content of a personal essay...', 'Content of the short story...'), PublicationDate ('2021-06-02', '2021-06-03', '2021-06-01'), AuthorId (4, 1, 2), WritingStyleId (3, 1, 2) | PublishingHouses : id (4, 2, 3), Name ('Simon & Schuster', 'Random House', 'HarperCollins') | ArticlePublications : id (4, 5, 3), ArticleId (3, 2, 1), PublisherId (5, 3, 1), PublishDate ('2021-06-07', '2021-06-10', '2021-06-08') | ReadingStats : id (5, 4, 2), ArticleId (3, 5, 2), ReadCount (100, 250, 200) | WritingStyles : id (3, 5, 2), StyleName ('Personal Essay', 'Short Story', 'Opinion Piece')",
        "ambiguous_queries": [
            "SELECT Articles.Title FROM WritingStyles JOIN Articles ON WritingStyles.id = Articles.WritingStyleId JOIN Authors ON Articles.AuthorId = Authors.id WHERE (WritingStyles.StyleName = 'Short Story' OR WritingStyles.StyleName = 'Personal Essay') AND Authors.Name = \"Evelyn O'Connor\"",
            "SELECT Articles.Title FROM WritingStyles JOIN Articles ON WritingStyles.id = Articles.WritingStyleId JOIN Authors ON Articles.AuthorId = Authors.id WHERE WritingStyles.StyleName = 'Short Story' OR WritingStyles.StyleName = 'Personal Essay' AND Authors.Name = \"Evelyn O'Connor\""
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"short stories and personal essays written by Evelyn O'Connor\": [\"personal essays written by Evelyn O'Connor and short stories written by Evelyn O'Connor\", \"personal essays written by Evelyn O'Connor and short stories\"]}"
        },
        "clarification_context": "\"short stories and personal essays written by Evelyn O'Connor\" refers to \"personal essays written by Evelyn O'Connor and short stories written by Evelyn O'Connor\"",
        "clear_ambiguity": "{\"short stories and personal essays written by Evelyn O'Connor\": \"personal essays written by Evelyn O'Connor and short stories written by Evelyn O'Connor\"}",
        "gold_query": "SELECT Articles.Title FROM WritingStyles JOIN Articles ON WritingStyles.id = Articles.WritingStyleId JOIN Authors ON Articles.AuthorId = Authors.id WHERE (WritingStyles.StyleName = 'Short Story' OR WritingStyles.StyleName = 'Personal Essay') AND Authors.Name = \"Evelyn O'Connor\""
    },
    {
        "index": 1130,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_academic_papers/attachment_1tab_val_academic_papers.sqlite",
        "question": "Please show all research papers and review articles using the APA citation style.",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth, Major | Professors : ProfessorID, FirstName, LastName, Department | Papers : PaperID, Title, AbstractText, Academic_PaperType, Citation_Style, AuthorID | Conferences : ConferenceID, Name, Location, Year | Presentations : PresentationID, PaperID, ConferenceID, Date | CourseEnrollments : EnrollmentID, StudentID, CourseID, Grade, Semester | Courses : CourseID, CourseTitle, InstructorID",
        "schema_with_content": "Students : StudentID (2, 1), FirstName ('John', 'Jane'), LastName ('Smith', 'Doe'), DateOfBirth ('1990-08-30', '1987-06-15'), Major ('Computer Science', 'Mathematics') | Professors : ProfessorID (1, 2), FirstName ('Emily', 'Michael'), LastName ('Williams', 'Johnson'), Department ('Physics', 'Biology') | Papers : PaperID (1, 4, 2), Title ('Sample Review Article', 'Another Sample Research Paper', 'Yet Another Review Article'), AbstractText ('Below is an example review article abstract.', 'Check out this other review article abstract.', 'Here is another sample abstract.'), Academic_PaperType ('Research Paper', 'Review Article', 'Research Paper'), Citation_Style ('MLA', 'APA', 'Chicago'), AuthorID (1, 2, 1) | Conferences : ConferenceID (1, 2), Name ('Conference A', 'Conference B'), Location ('Location A', 'Location B'), Year (2021, 2022) | Presentations : PresentationID (1, 2), PaperID (1, 2), ConferenceID (2, 1), Date ('2022-06-15', '2021-06-15') | CourseEnrollments : EnrollmentID (2, 1), StudentID (1, 2), CourseID (1, 1), Grade ('A', 'B+'), Semester (2021, 2020) | Courses : CourseID (2, 1), CourseTitle ('Calculus I', 'Introduction to Computer Science'), InstructorID (1, 2)",
        "ambiguous_queries": [
            "SELECT Papers.Title FROM Papers WHERE (Papers.Academic_PaperType = 'Research Paper' OR Papers.Academic_PaperType = 'Review Article') AND Papers.Citation_Style = 'APA'",
            "SELECT Papers.Title FROM Papers WHERE Papers.Academic_PaperType = 'Research Paper' OR Papers.Academic_PaperType = 'Review Article' AND Papers.Citation_Style = 'APA'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"research papers and review articles using the APA citation style\": [\"review articles using the APA citation style and research papers using the APA citation style\", \"review articles using the APA citation style and research papers\"]}"
        },
        "clarification_context": "\"research papers and review articles using the APA citation style\" refers to \"review articles using the APA citation style and research papers using the APA citation style\"",
        "clear_ambiguity": "{\"research papers and review articles using the APA citation style\": \"review articles using the APA citation style and research papers using the APA citation style\"}",
        "gold_query": "SELECT Papers.Title FROM Papers WHERE (Papers.Academic_PaperType = 'Research Paper' OR Papers.Academic_PaperType = 'Review Article') AND Papers.Citation_Style = 'APA'"
    },
    {
        "index": 1131,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_2tab_val_organization/attachment_2tab_val_organization.sqlite",
        "question": "List currency exchange services and commodity trading firms established in 2000.",
        "schema_without_content": "Currency_Exchange_Service : id, Name, Year_of_establishment, Number_of_branches, Total_assets | Commodity_Trading_Firm : id, Name, Year_of_establishment, Number_of_employees, Annual_revenue | Customer : id, First_Name, Last_Name, Date_of_birth, Email | Account : id, customer_id, account_type, balance | Loan : id, customer_id, loan_amount, interest_rate, start_date, end_date | Investment : id, customer_id, investment_type, amount, date_purchased, current_value",
        "schema_with_content": "Currency_Exchange_Service : id (2, 1), Name ('CX1', 'CX2'), Year_of_establishment (2010, 2000), Number_of_branches (80, 100), Total_assets (900000.0, 1000000.0) | Commodity_Trading_Firm : id (1, 2), Name ('CT2', 'CT1'), Year_of_establishment (2010, 2000), Number_of_employees (300, 200), Annual_revenue (6500000.0, 7500000.0) | Customer : id (1, 2), First_Name ('John', 'Jane'), Last_Name ('Smith', 'Doe'), Date_of_birth ('1985-02-15', '1980-01-01'), Email ('john.doe@example.com', 'jane.smith@example.com') | Account : id (2, 1), customer_id (1, 2), account_type ('Checking', 'Savings'), balance (1000.0, 500.0) | Loan : id (1, 2), customer_id (2, 1), loan_amount (200000.0, 150000.0), interest_rate (6.0, 5.0), start_date ('2021-02-01', '2021-01-01'), end_date ('2027-02-01', '2026-01-01') | Investment : id (1, 2), customer_id (2, 1), investment_type ('Bonds', 'Stocks'), amount (20000.0, 5000.0), date_purchased ('2020-03-01', '2019-04-01'), current_value (5500.0, 21000.0)",
        "ambiguous_queries": [
            "SELECT Currency_Exchange_Service.name FROM Currency_Exchange_Service WHERE Currency_Exchange_Service.Year_of_establishment = 2000 UNION SELECT Commodity_Trading_Firm.name FROM Commodity_Trading_Firm WHERE Commodity_Trading_Firm.Year_of_establishment = 2000",
            "SELECT Currency_Exchange_Service.name FROM Currency_Exchange_Service UNION SELECT Commodity_Trading_Firm.name FROM Commodity_Trading_Firm WHERE Commodity_Trading_Firm.Year_of_establishment = 2000"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"currency exchange services and commodity trading firms established in 2000\": [\"commodity trading firms established in 2000 and currency exchange services established in 2000\", \"commodity trading firms established in 2000 and currency exchange services\"]}"
        },
        "clarification_context": "\"currency exchange services and commodity trading firms established in 2000\" refers to \"commodity trading firms established in 2000 and currency exchange services\"",
        "clear_ambiguity": "{\"currency exchange services and commodity trading firms established in 2000\": \"commodity trading firms established in 2000 and currency exchange services\"}",
        "gold_query": "SELECT Currency_Exchange_Service.name FROM Currency_Exchange_Service UNION SELECT Commodity_Trading_Firm.name FROM Commodity_Trading_Firm WHERE Commodity_Trading_Firm.Year_of_establishment = 2000"
    },
    {
        "index": 1132,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_ref_learning_activities/attachment_1tab_ref_learning_activities.sqlite",
        "question": "Describe field trips and study groups organised to develop problem-solving skills.",
        "schema_without_content": "Student : ID, FirstName, LastName, Age, GradeLevel | Course : ID, Title, Subject, TeacherID | LearningActivity : ID, Description, ActivityType, PurposeID | Purpose : ID, Name | Teacher : ID, FirstName, LastName, Department | Enrollment : StudentID, CourseID, DateEnrolled, Grades",
        "schema_with_content": "Student : ID (5, 3, 1), FirstName ('Emma', 'Michael', 'John'), LastName ('Doe', 'Johnson', 'Smith'), Age (18, 17, 16), GradeLevel (10, 9, 12) | Course : ID (1, 3, 5), Title ('World History', 'Physics', 'Algebra I'), Subject ('Language Arts', 'Mathematics', 'Science'), TeacherID (3, 4, 5) | LearningActivity : ID (4, 1, 2), Description ('Organize a group project', 'Host a debate on current events', 'Visit a local museum'), ActivityType ('Study Group', 'Field Trip', 'Study Group'), PurposeID (1, 1, 2) | Purpose : ID (2, 1), Name ('Problem Solving Skills Development', 'Real-world Application') | Teacher : ID (3, 5, 1), FirstName ('Ms.', 'Dr.', 'Mr.'), LastName ('Black', 'Red', 'Green'), Department ('History', 'Fine Arts', 'Language Arts') | Enrollment : StudentID (2, 1, 5), CourseID (5, 4, 2), DateEnrolled ('2022-09-01', '2022-09-01', '2022-09-01'), Grades (75, 80, 95)",
        "ambiguous_queries": [
            "SELECT LearningActivity.Description FROM LearningActivity JOIN Purpose ON LearningActivity.PurposeID = Purpose.ID WHERE (LearningActivity.ActivityType = 'Field Trip' OR LearningActivity.ActivityType = 'Study Group') AND Purpose.Name = 'Problem Solving Skills Development'",
            "SELECT LearningActivity.Description FROM LearningActivity JOIN Purpose ON LearningActivity.PurposeID = Purpose.ID WHERE LearningActivity.ActivityType = 'Field Trip' OR LearningActivity.ActivityType = 'Study Group' AND Purpose.Name = 'Problem Solving Skills Development'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"field trips and study groups organised to develop problem-solving skills\": [\"study groups organised to develop problem-solving skills and field trips organised to develop problem-solving skills\", \"study groups organised to develop problem-solving skills and field trips\"]}"
        },
        "clarification_context": "\"field trips and study groups organised to develop problem-solving skills\" refers to \"study groups organised to develop problem-solving skills and field trips\"",
        "clear_ambiguity": "{\"field trips and study groups organised to develop problem-solving skills\": \"study groups organised to develop problem-solving skills and field trips\"}",
        "gold_query": "SELECT LearningActivity.Description FROM LearningActivity JOIN Purpose ON LearningActivity.PurposeID = Purpose.ID WHERE LearningActivity.ActivityType = 'Field Trip' OR LearningActivity.ActivityType = 'Study Group' AND Purpose.Name = 'Problem Solving Skills Development'"
    },
    {
        "index": 1133,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_ref_hospitality_jobs/attachment_2tab_ref_hospitality_jobs.sqlite",
        "question": "Show me tour guides and travel agents working at Expedia.",
        "schema_without_content": "Agencies : AgencyID, Name | TourGuides : GuideID, Name, Age, Experience, AgencyID | TravelAgents : AgentID, Name, Salary, CommissionRate, AgencyID | Customers : CustomerID, FirstName, LastName, Email, PhoneNumber, TourGUIDEID | BookedTrips : TripID, StartDate, EndDate, NumOfPeople, TotalCost, AgentID, GuideID",
        "schema_with_content": "Agencies : AgencyID (1, 2), Name ('ABC Travel', 'Expedia') | TourGuides : GuideID (1, 2), Name ('John Doe', 'Jane Smith'), Age (29, 30), Experience (8, 7), AgencyID (1, 2) | TravelAgents : AgentID (1, 2), Name ('Mike Johnson', 'Emily Brown'), Salary (55000.0, 60000.0), CommissionRate (0.1, 0.12), AgencyID (2, 1) | Customers : CustomerID (2, 1), FirstName ('Alice', 'Bob'), LastName ('Smith', 'Johnson'), Email ('alice@example.com', 'bob@example.com'), PhoneNumber ('0987654321', '1234567890'), TourGUIDEID (1, 2) | BookedTrips : TripID (2, 1), StartDate ('2021-08-01', '2021-07-01'), EndDate ('2021-08-10', '2021-07-10'), NumOfPeople (6, 4), TotalCost (4000.0, 6000.0), AgentID (1, 2), GuideID (2, 1)",
        "ambiguous_queries": [
            "SELECT TourGuides.name FROM Agencies JOIN TourGuides ON Agencies.AgencyID = TourGuides.AgencyID WHERE Agencies.Name = 'Expedia' UNION SELECT TravelAgents.name FROM Agencies JOIN TravelAgents ON Agencies.AgencyID = TravelAgents.AgencyID WHERE Agencies.Name = 'Expedia'",
            "SELECT TourGuides.name FROM Agencies JOIN TourGuides ON Agencies.AgencyID = TourGuides.AgencyID UNION SELECT TravelAgents.name FROM Agencies JOIN TravelAgents ON Agencies.AgencyID = TravelAgents.AgencyID WHERE Agencies.Name = 'Expedia'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"tour guides and travel agents working at Expedia\": [\"travel agents working at Expedia and tour guides working at Expedia\", \"travel agents working at Expedia and tour guides\"]}"
        },
        "clarification_context": "\"tour guides and travel agents working at Expedia\" refers to \"travel agents working at Expedia and tour guides working at Expedia\"",
        "clear_ambiguity": "{\"tour guides and travel agents working at Expedia\": \"travel agents working at Expedia and tour guides working at Expedia\"}",
        "gold_query": "SELECT TourGuides.name FROM Agencies JOIN TourGuides ON Agencies.AgencyID = TourGuides.AgencyID WHERE Agencies.Name = 'Expedia' UNION SELECT TravelAgents.name FROM Agencies JOIN TravelAgents ON Agencies.AgencyID = TravelAgents.AgencyID WHERE Agencies.Name = 'Expedia'"
    },
    {
        "index": 1134,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_2tab_val_capital_market_participants/attachment_2tab_val_capital_market_participants.sqlite",
        "question": "Show all stockbrokers and mutual funds with 1% fees.",
        "schema_without_content": "Stockbrokers : id, name, contact_number, email, fees | Mutual_funds : id, fund_name, total_assets, expense_ratio, fees | Customers : id, first_name, last_name, date_of_birth, phone_number, email | Accounts : account_id, customer_id, balance, interest_rate | Transactions : transaction_id, account_id, amount, transaction_date | Investments : investment_id, stockbroker_id, mutual_fund_id, customer_id, quantity, purchase_price",
        "schema_with_content": "Stockbrokers : id (4, 1, 2), name ('John Doe', 'Bob Brown', 'Jane Smith'), contact_number ('111-222-3333', '555-555-5555', '987-654-3210'), email ('bob@example.com', 'john@example.com', 'alice@example.com'), fees ('0.75%', '1.5%', '2%') | Mutual_funds : id (3, 1, 2), fund_name ('ABC Fund', 'XYZ Fund', 'PQR Fund'), total_assets (800000.0, 1000000.0, 500000.0), expense_ratio (0.03, 0.02, 0.005), fees ('1.25%', '2%', '1%') | Customers : id (2, 3, 4), first_name ('Alice', 'Bob', 'John'), last_name ('Brown', 'Doe', 'Smith'), date_of_birth ('1992-02-02', '1988-03-03', '1991-04-04'), phone_number ('555-555-5555', '123-456-7890', '987-654-3210'), email ('alice@example.com', 'john@example.com', 'jane@example.com') | Accounts : account_id (4, 3, 2), customer_id (1, 4, 3), balance (1000.0, 3000.0, 4000.0), interest_rate (2, 3, 2.5) | Transactions : transaction_id (3, 1, 2), account_id (4, 2, 1), amount (1000.0, 500.0, 2000.0), transaction_date ('2022-01-01 10:00:00', '2022-03-01 12:00:00', '2022-02-01 11:00:00') | Investments : investment_id (1, 4, 3), stockbroker_id (2, 3, 2), mutual_fund_id (1, 2, 1), customer_id (1, 3, 2), quantity (5, 15, 10), purchase_price (200.0, 350.0, 100.0)",
        "ambiguous_queries": [
            "SELECT Stockbrokers.name FROM Stockbrokers WHERE Stockbrokers.fees = '1%' UNION SELECT Mutual_funds.fund_name as name FROM Mutual_funds WHERE Mutual_funds.fees = '1%'",
            "SELECT Stockbrokers.name FROM Stockbrokers UNION SELECT Mutual_funds.fund_name as name FROM Mutual_funds WHERE Mutual_funds.fees = '1%'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"stockbrokers and mutual funds with 1% fees\": [\"mutual funds with 1% fees and stockbrokers with 1% fees\", \"mutual funds with 1% fees and stockbrokers\"]}"
        },
        "clarification_context": "\"stockbrokers and mutual funds with 1% fees\" refers to \"mutual funds with 1% fees and stockbrokers with 1% fees\"",
        "clear_ambiguity": "{\"stockbrokers and mutual funds with 1% fees\": \"mutual funds with 1% fees and stockbrokers with 1% fees\"}",
        "gold_query": "SELECT Stockbrokers.name FROM Stockbrokers WHERE Stockbrokers.fees = '1%' UNION SELECT Mutual_funds.fund_name as name FROM Mutual_funds WHERE Mutual_funds.fees = '1%'"
    },
    {
        "index": 1135,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_ref_consumer_lending/attachment_1tab_ref_consumer_lending.sqlite",
        "question": "Which customers have credit cards and personal loans with a 15% interest rate?",
        "schema_without_content": "customers : id, email, phoneNumber, FullName | rates : id, interestRate | loans : id, customerId, loanType, amount, termYears, interestRateId",
        "schema_with_content": "customers : id (3, 4, 2), email ('bob@example.com', 'john@example.com', 'charlie@example.com'), phoneNumber (1234567890, 1123456789, 987654321), FullName ('John Doe', 'Bob White', 'Alice Brown') | rates : id (4, 1, 5), interestRate (15.0, 20.0, 10.0) | loans : id (8, 1, 7), customerId (3, 4, 6), loanType ('Credit Card', 'Home Equity Line of Credit', 'Personal Loan'), amount (250000.0, 50000.0, 10000.0), termYears (5, 10, 8), interestRateId (1, 6, 1)",
        "ambiguous_queries": [
            "SELECT customers.FullName FROM loans JOIN rates ON loans.interestRateId = rates.id JOIN customers ON customers.Id = loans.customerId WHERE (loans.loanType = 'Credit Card' OR loans.loanType = 'Personal Loan') AND rates.interestRate = 15.0",
            "SELECT customers.FullName FROM loans JOIN rates ON loans.interestRateId = rates.id JOIN customers ON customers.Id = loans.customerId WHERE loans.loanType = 'Credit Card' OR loans.loanType = 'Personal Loan' AND rates.interestRate = 15.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"credit cards and personal loans with a 15% interest rate\": [\"personal loans with a 15% interest rate and credit cards with a 15% interest rate\", \"personal loans with a 15% interest rate and credit cards\"]}"
        },
        "clarification_context": "\"credit cards and personal loans with a 15% interest rate\" refers to \"personal loans with a 15% interest rate and credit cards with a 15% interest rate\"",
        "clear_ambiguity": "{\"credit cards and personal loans with a 15% interest rate\": \"personal loans with a 15% interest rate and credit cards with a 15% interest rate\"}",
        "gold_query": "SELECT customers.FullName FROM loans JOIN rates ON loans.interestRateId = rates.id JOIN customers ON customers.Id = loans.customerId WHERE (loans.loanType = 'Credit Card' OR loans.loanType = 'Personal Loan') AND rates.interestRate = 15.0"
    },
    {
        "index": 1136,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_age_group/attachment_2tab_ref_age_group.sqlite",
        "question": "Show children's books and young adult books illustrated by Jane Smith.",
        "schema_without_content": "Authors : id, name | Illustrators : id, illustratorName | ChildrensBooks : id, title, authorId, illustratorId | YoungAdultBooks : id, title, authorId, illustratorId",
        "schema_with_content": "Authors : id (5, 4, 2), name ('Author A', 'Author C', 'Author D') | Illustrators : id (2, 3, 5), illustratorName ('Jane Smith', 'John Doe', 'Mary Johnson') | ChildrensBooks : id (3, 1, 2), title ('Peter Pan', 'The Little Prince', 'Alice in Wonderland'), authorId (4, 2, 1), illustratorId (5, 3, 2) | YoungAdultBooks : id (2, 4, 1), title ('Twilight', 'Percy Jackson and the Lightning Thief', 'Divergent'), authorId (8, 6, 7), illustratorId (4, 2, 3)",
        "ambiguous_queries": [
            "SELECT ChildrensBooks.title FROM Illustrators JOIN ChildrensBooks ON Illustrators.id = ChildrensBooks.illustratorId WHERE Illustrators.illustratorName = 'Jane Smith' UNION SELECT YoungAdultBooks.title FROM Illustrators JOIN YoungAdultBooks ON Illustrators.id = YoungAdultBooks.illustratorId WHERE Illustrators.illustratorName = 'Jane Smith'",
            "SELECT ChildrensBooks.title FROM Illustrators JOIN ChildrensBooks ON Illustrators.id = ChildrensBooks.illustratorId UNION SELECT YoungAdultBooks.title FROM Illustrators JOIN YoungAdultBooks ON Illustrators.id = YoungAdultBooks.illustratorId WHERE Illustrators.illustratorName = 'Jane Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"children's books and young adult books illustrated by Jane Smith\": [\"young adult books illustrated by Jane Smith and children's books illustrated by Jane Smith\", \"young adult books illustrated by Jane Smith and children's books\"]}"
        },
        "clarification_context": "\"children's books and young adult books illustrated by Jane Smith\" refers to \"young adult books illustrated by Jane Smith and children's books\"",
        "clear_ambiguity": "{\"children's books and young adult books illustrated by Jane Smith\": \"young adult books illustrated by Jane Smith and children's books\"}",
        "gold_query": "SELECT ChildrensBooks.title FROM Illustrators JOIN ChildrensBooks ON Illustrators.id = ChildrensBooks.illustratorId UNION SELECT YoungAdultBooks.title FROM Illustrators JOIN YoungAdultBooks ON Illustrators.id = YoungAdultBooks.illustratorId WHERE Illustrators.illustratorName = 'Jane Smith'"
    },
    {
        "index": 1137,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_1tab_val_events/attachment_1tab_val_events.sqlite",
        "question": "Show press conferences and media scrums from Jack Layton.",
        "schema_without_content": "Articles : id, title, content, date | Reporters : id, name, email | Sources : id, name, event, person | Categories : id, name | ArticleCategories : article_id, category_id | ArticleSources : source_id, article_id | ArticleReporters : reporter_id, article_id",
        "schema_with_content": "Articles : id (1, 2), title ('Article2', 'Article1'), content ('Content2', 'Content1'), date ('2024-03-07 23:09:43', '2024-03-07 23:09:43') | Reporters : id (1, 2), name ('Reporter2', 'Reporter1'), email ('email1@example.com', 'email2@example.com') | Sources : id (2, 3, 4), name ('Source2', 'Source3', 'Source4'), event ('Press Conference', 'Press Conference', 'Media Scrum'), person ('John Doe', 'Jack Layton', 'Jack Layton') | Categories : id (2, 1), name ('Category1', 'Category2') | ArticleCategories : article_id (1, 2), category_id (1, 2) | ArticleSources : source_id (2, 3, 1), article_id (1, 2, 1) | ArticleReporters : reporter_id (1, 2), article_id (2, 1)",
        "ambiguous_queries": [
            "SELECT Sources.name FROM Sources WHERE (Sources.event = 'Press Conference' OR Sources.event = 'Media Scrum') AND Sources.person = 'Jack Layton'",
            "SELECT Sources.name FROM Sources WHERE Sources.event = 'Press Conference' OR Sources.event = 'Media Scrum' AND Sources.person = 'Jack Layton'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"press conferences and media scrums from Jack Layton\": [\"media scrums from Jack Layton and press conferences from Jack Layton\", \"media scrums from Jack Layton and press conferences\"]}"
        },
        "clarification_context": "\"press conferences and media scrums from Jack Layton\" refers to \"media scrums from Jack Layton and press conferences from Jack Layton\"",
        "clear_ambiguity": "{\"press conferences and media scrums from Jack Layton\": \"media scrums from Jack Layton and press conferences from Jack Layton\"}",
        "gold_query": "SELECT Sources.name FROM Sources WHERE (Sources.event = 'Press Conference' OR Sources.event = 'Media Scrum') AND Sources.person = 'Jack Layton'"
    },
    {
        "index": 1138,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_val_animation_studio/attachment_1tab_val_animation_studio.sqlite",
        "question": "Give me Pixar films and DreamWorks films that won Golden Globe.",
        "schema_without_content": "Film : id, title, releaseDate, duration, animationStudio, awards | Director : id, name, birthYear | Actor : id, name, birthYear | Genre : id, genreName | FilmDirectors : filmID, directorID | FilmActors : filmID, actorID, role | FilmGenres : filmID, genreID",
        "schema_with_content": "Film : id (1, 3, 2), title ('Finding Nemo', 'Madagascar', 'Shrek'), releaseDate ('2005-05-04', '1995-03-26', '2001-04-18'), duration (89, 100, 82), animationStudio ('Pixar', 'DreamWorks', 'DreamWorks'), awards ('Golden Globe', 'Nickelodeon Kids Choice Award', 'Golden Globe') | Director : id (4, 1, 3), name ('Erik de la Espriella', 'John Lasseter', 'Adam Foucher'), birthYear (1970, 1961, 1970) | Actor : id (4, 5, 2), name ('Tom Hanks', 'Billy Crystal', 'Ian Holm'), birthYear (1941, 1951, 1953) | Genre : id (1, 3, 2), genreName ('Action/Adventure', 'Family Adventure', 'Drama') | FilmDirectors : filmID (), directorID () | FilmActors : filmID (1, 2, 3), actorID (1, 5, 2), role ('Marlin', 'Buzz Lightyear', 'Donkey') | FilmGenres : filmID (), genreID ()",
        "ambiguous_queries": [
            "SELECT Film.title FROM Film WHERE (Film.animationStudio = 'Pixar' OR Film.animationStudio = 'DreamWorks') AND Film.awards = 'Golden Globe'",
            "SELECT Film.title FROM Film WHERE Film.animationStudio = 'Pixar' OR Film.animationStudio = 'DreamWorks' AND Film.awards = 'Golden Globe'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"Pixar films and DreamWorks films that won Golden Globe\": [\"DreamWorks films that won Golden Globe and Pixar films that won Golden Globe\", \"DreamWorks films that won Golden Globe and Pixar films\"]}"
        },
        "clarification_context": "\"Pixar films and DreamWorks films that won Golden Globe\" refers to \"DreamWorks films that won Golden Globe and Pixar films that won Golden Globe\"",
        "clear_ambiguity": "{\"Pixar films and DreamWorks films that won Golden Globe\": \"DreamWorks films that won Golden Globe and Pixar films that won Golden Globe\"}",
        "gold_query": "SELECT Film.title FROM Film WHERE (Film.animationStudio = 'Pixar' OR Film.animationStudio = 'DreamWorks') AND Film.awards = 'Golden Globe'"
    },
    {
        "index": 1139,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_it_jobs/attachment_2tab_val_it_jobs.sqlite",
        "question": "Display network admins and IT consultants whose salary is $70,000.",
        "schema_without_content": "Network_Admin : id, Position, Years_of_Experience, Degree_Level, Salary | IT_Consultant : id, Type, Projects_Worked, Languages_Known, Salary | Software_Engineer : id, Programming_Languages, Experience_in_Teamwork, Specialization, Salary | HR_Specialist : id, Industry_Experience, Certifications, Recruitment_Methods, Salary | Data_Analyst : id, Tools_Used, Analytical_Skills, Problem_Solving_Abilities, Salary",
        "schema_with_content": "Network_Admin : id (1, 4, 2), Position ('Cybersecurity Expert', 'Network Administrator', 'Data Center Technician'), Years_of_Experience (3, 5, 12), Degree_Level ('Professional', 'Bachelor', 'PhD'), Salary ('$70,000', '$72,000', '$90,000') | IT_Consultant : id (3, 5, 4), Type ('Cloud Solution Consultant', 'Business Analyst', 'Agile Coach'), Projects_Worked (5, 6, 10), Languages_Known ('Power BI, Tableau', 'AWS, Azure', 'SQL, R'), Salary ('$60,000', '$55,000', '$70,000') | Software_Engineer : id (2, 5, 3), Programming_Languages ('Android, Swift', 'Node.js, Angular', 'Ruby on Rails, Java'), Experience_in_Teamwork (8, 5, 6), Specialization ('DevOps', 'Frontend', 'Mobile'), Salary ('$75,000', '$50,000', '$70,000') | HR_Specialist : id (3, 5, 2), Industry_Experience ('7 years', '3 years', '5 years'), Certifications ('CIH, CEBS', 'GPHR, SHRM SCP', 'SPHR, GPHR'), Recruitment_Methods ('Direct Hire, Temp Staffing', 'Onboarding, Offboarding', 'Headhunting, Job Boards'), Salary ('$60,000', '$70,000', '$65,000') | Data_Analyst : id (3, 2, 5), Tools_Used ('SQL Server, SSIS', 'R, Python', 'Jupyter Notebook, KNIME'), Analytical_Skills (5, 10, 8), Problem_Solving_Abilities (8, 12, 10), Salary ('$70,000', '$60,000', '$80,000')",
        "ambiguous_queries": [
            "SELECT Network_Admin.Position as Position FROM Network_Admin WHERE Network_Admin.Salary = '$70,000' UNION SELECT IT_Consultant.Type as Position FROM IT_Consultant WHERE IT_Consultant.Salary = '$70,000'",
            "SELECT Network_Admin.Position as Position FROM Network_Admin UNION SELECT IT_Consultant.Type as Position FROM IT_Consultant WHERE IT_Consultant.Salary = '$70,000'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"network admins and IT consultants whose salary is $70,000\": [\"IT consultants whose salary is $70,000 and network admins whose salary is $70,000\", \"IT consultants whose salary is $70,000 and network admins\"]}"
        },
        "clarification_context": "\"network admins and IT consultants whose salary is $70,000\" refers to \"IT consultants whose salary is $70,000 and network admins whose salary is $70,000\"",
        "clear_ambiguity": "{\"network admins and IT consultants whose salary is $70,000\": \"IT consultants whose salary is $70,000 and network admins whose salary is $70,000\"}",
        "gold_query": "SELECT Network_Admin.Position as Position FROM Network_Admin WHERE Network_Admin.Salary = '$70,000' UNION SELECT IT_Consultant.Type as Position FROM IT_Consultant WHERE IT_Consultant.Salary = '$70,000'"
    },
    {
        "index": 1140,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_val_academic_performance_metrics/attachment_2tab_val_academic_performance_metrics.sqlite",
        "question": "Give me attendance dates and grades of Alice Johnson.",
        "schema_without_content": "Student : ID, Name | Attendance : AttendID, StudentID, Date, Status | Teacher : TeachID, Name | Classroom : ClassID, TeachID, Location | Enrollment : EnrollID, StudentID, ClassID | Grades : GradeID, StudentID, Subject, Score",
        "schema_with_content": "Student : ID (5, 3, 4), Name ('Carol Williams', 'Alice Johnson', 'Bob Smith') | Attendance : AttendID (6, 4, 1), StudentID (1, 1, 2), Date ('2023-01-02', '2023-01-01', '2023-01-03'), Status ('Present', 'Present', 'Absent') | Teacher : TeachID (3, 5, 2), Name ('Dr. Red', 'Mr. White', 'Professor Green') | Classroom : ClassID (5, 4, 1), TeachID (4, 3, 1), Location ('Room C', 'Room E', 'Room D') | Enrollment : EnrollID (2, 5, 4), StudentID (5, 2, 3), ClassID (5, 1, 2) | Grades : GradeID (4, 3, 6), StudentID (3, 1, 2), Subject ('Math', 'Biology', 'History'), Score ('93', '87', '98')",
        "ambiguous_queries": [
            "SELECT Attendance.Date FROM Attendance JOIN Student ON Attendance.StudentID = Student.ID WHERE Student.name = 'Alice Johnson' AND Attendance.Status = 'Present' UNION SELECT Grades.Score FROM Grades JOIN Student ON Grades.StudentID = Student.ID WHERE Student.name = 'Alice Johnson'",
            "SELECT Attendance.Date FROM Attendance JOIN Student ON Attendance.StudentID = Student.ID WHERE Attendance.Status = 'Present' UNION SELECT Grades.Score FROM Grades JOIN Student ON Grades.StudentID = Student.ID WHERE Student.name = 'Alice Johnson'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"attendance dates and grades of Alice Johnson\": [\"grades of Alice Johnson and attendance dates of Alice Johnson\", \"grades of Alice Johnson and attendance dates\"]}"
        },
        "clarification_context": "\"attendance dates and grades of Alice Johnson\" refers to \"grades of Alice Johnson and attendance dates\"",
        "clear_ambiguity": "{\"attendance dates and grades of Alice Johnson\": \"grades of Alice Johnson and attendance dates\"}",
        "gold_query": "SELECT Attendance.Date FROM Attendance JOIN Student ON Attendance.StudentID = Student.ID WHERE Attendance.Status = 'Present' UNION SELECT Grades.Score FROM Grades JOIN Student ON Grades.StudentID = Student.ID WHERE Student.name = 'Alice Johnson'"
    },
    {
        "index": 1141,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_1tab_val_development_projects/attachment_1tab_val_development_projects.sqlite",
        "question": "Give me all airport expansions and renovations that increased capacity to 1000 passengers per day.",
        "schema_without_content": "Development_Projects : ID, ProjectName, Increased_Capacity, StartDate, EndDate, Cost | Aircraft : ID, Model, Capacity, Manufacturer, Year | Flight : ID, DepartureTime, ArrivalTime, Origin, Destination, AircraftID | Staff : ID, Name, Position, Salary, HireDate",
        "schema_with_content": "Development_Projects : ID (4, 5, 3), ProjectName ('Renovation', 'Airport Expansion', 'Terminal Upgrade'), Increased_Capacity ('500 Passengers per Day', '500 Passengers per Day', '1000 Passengers per Day'), StartDate ('2023-09-01', '2024-01-01', '2023-07-01'), EndDate ('2024-12-31', '2023-12-31', '2023-12-31'), Cost (500000.0, 400000.0, 800000.0) | Aircraft : ID (5, 3, 1), Model ('Boeing 737 MAX', 'De Havilland Canada DHC-8 Q400', 'Embraer E195-E2'), Capacity (120, 230, 90), Manufacturer ('Airbus', 'De Havilland Canada', 'Embraer'), Year (2021, 2018, 2019) | Flight : ID (3, 2, 1), DepartureTime ('11:00 AM', '01:00 PM', '07:00 AM'), ArrivalTime ('12:30 PM', '05:30 PM', '03:30 PM'), Origin ('New York', 'Philadelphia', 'Chicago'), Destination ('Miami', 'Orlando', 'Honolulu'), AircraftID (1, 4, 5) | Staff : ID (2, 3, 1), Name ('Jane Smith', 'Tom Johnson', 'Emily Brown'), Position ('Air Traffic Controller', 'Pilot', 'Security Officer'), Salary (50000.0, 55000.0, 75000.0), HireDate ('2021-01-01', '2018-01-01', '2019-01-01')",
        "ambiguous_queries": [
            "SELECT Development_Projects.ProjectName FROM Development_Projects WHERE (Development_Projects.ProjectName = 'Airport Expansion' OR Development_Projects.ProjectName = 'Renovation') AND Development_Projects.Increased_Capacity = '1000 Passengers per Day'",
            "SELECT Development_Projects.ProjectName FROM Development_Projects WHERE Development_Projects.ProjectName = 'Airport Expansion' OR Development_Projects.ProjectName = 'Renovation' AND Development_Projects.Increased_Capacity = '1000 Passengers per Day'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"expansions and renovations that increased capacity\": [\"renovations that increased capacity and expansions that increased capacity\", \"renovations that increased capacity and expansions\"]}"
        },
        "clarification_context": "\"expansions and renovations that increased capacity\" refers to \"renovations that increased capacity and expansions that increased capacity\"",
        "clear_ambiguity": "{\"expansions and renovations that increased capacity\": \"renovations that increased capacity and expansions that increased capacity\"}",
        "gold_query": "SELECT Development_Projects.ProjectName FROM Development_Projects WHERE (Development_Projects.ProjectName = 'Airport Expansion' OR Development_Projects.ProjectName = 'Renovation') AND Development_Projects.Increased_Capacity = '1000 Passengers per Day'"
    },
    {
        "index": 1142,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_age_group/attachment_1tab_ref_age_group.sqlite",
        "question": "Display the young adult books and children books illustrated by Jane Smith.",
        "schema_without_content": "Genre : ID, Name | AgeGroup : ID, GroupName | Author : ID, FirstName, LastName, Biography | Illustrator : ID, Fullname | Publisher : ID, CompanyName, Address, PhoneNumber | Books : ID, Title, Summary, ReleaseDate, Price, GenreID, AgeGroupID, AuthorID, IllustratorID, PublisherID",
        "schema_with_content": "Genre : ID (4, 2, 5), Name ('Fiction', 'Mystery', 'Adventure') | AgeGroup : ID (5, 2, 3), GroupName ('Older Readers Book', \"Children's Book\", 'Adult Book') | Author : ID (2, 5, 1), FirstName ('Michael', 'Linda', 'John'), LastName ('White', 'Doe', 'Smith'), Biography ('He is a famous author.', 'She writes adventure stories.', 'She is an illustrator.') | Illustrator : ID (2, 3, 1), Fullname ('Jane Smith', 'Mark Green', 'Robert Johnson') | Publisher : ID (4, 2, 5), CompanyName ('Hachette Book Group', 'HarperCollins', 'Macmillan Publishers'), Address ('Paris, France', 'New York, USA', 'Berlin, Germany'), PhoneNumber ('+44 207-867-8000', '+1 212-598-6000', '+49 30-260-00-0') | Books : ID (1, 2, 4), Title ('Book D', 'Book A', 'Book B'), Summary ('Summary of book E.', 'Summary of book B.', 'Summary of book A.'), ReleaseDate ('2021-02-01', '2021-03-01', '2021-04-01'), Price (10.99, 11.99, 12.99), GenreID (4, 2, 5), AgeGroupID (1, 1, 1), AuthorID (1, 5, 2), IllustratorID (2, 1, 1), PublisherID (4, 2, 3)",
        "ambiguous_queries": [
            "SELECT Books.Title FROM AgeGroup JOIN Books ON AgeGroup.ID = Books.AgeGroupID JOIN Illustrator ON Books.IllustratorID = Illustrator.ID WHERE (AgeGroup.GroupName = 'Young Adult Book' OR AgeGroup.GroupName = \"Children's Book\") AND Illustrator.Fullname = 'Jane Smith'",
            "SELECT Books.Title FROM AgeGroup JOIN Books ON AgeGroup.ID = Books.AgeGroupID JOIN Illustrator ON Books.IllustratorID = Illustrator.ID WHERE AgeGroup.GroupName = 'Young Adult Book' OR AgeGroup.GroupName = \"Children's Book\" AND Illustrator.Fullname = 'Jane Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"young adult books and children books illustrated by Jane Smith\": [\"children books illustrated by Jane Smith and young adult books illustrated by Jane Smith\", \"children books illustrated by Jane Smith and young adult books\"]}"
        },
        "clarification_context": "\"young adult books and children books illustrated by Jane Smith\" refers to \"children books illustrated by Jane Smith and young adult books\"",
        "clear_ambiguity": "{\"young adult books and children books illustrated by Jane Smith\": \"children books illustrated by Jane Smith and young adult books\"}",
        "gold_query": "SELECT Books.Title FROM AgeGroup JOIN Books ON AgeGroup.ID = Books.AgeGroupID JOIN Illustrator ON Books.IllustratorID = Illustrator.ID WHERE AgeGroup.GroupName = 'Young Adult Book' OR AgeGroup.GroupName = \"Children's Book\" AND Illustrator.Fullname = 'Jane Smith'"
    },
    {
        "index": 1143,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_performance/attachment_2tab_ref_performance.sqlite",
        "question": "Show improvised theatres and musicals that take place in Cambridge Theatre.",
        "schema_without_content": "Improvised_Theatres : id, Name, Description, venueID | Venues : id, Name | Musicals : id, name, Composer, Lyricist, venueID",
        "schema_with_content": "Improvised_Theatres : id (2, 1), Name ('Open Stage', 'Comedy Club'), Description ('An intimate theatre where actors can perform their own material.', 'A popular venue for stand-up comedy shows.'), venueID ('2', '1') | Venues : id (2, 1), Name ('Cambridge Theatre', \"Her Majesty's Theatre\") | Musicals : id (1, 2), name ('West Side Story', 'The Phantom of the Opera'), Composer ('Andrew Lloyd Webber', 'Stephen Sondheim'), Lyricist ('Tim Rice', 'George Furth'), venueID ('2', '1')",
        "ambiguous_queries": [
            "SELECT Improvised_Theatres.name FROM Venues JOIN Improvised_Theatres ON Venues.id = Improvised_Theatres.venueID WHERE Venues.Name = 'Cambridge Theatre' UNION SELECT Musicals.name FROM Venues JOIN Musicals ON Venues.id = Musicals.venueID WHERE Venues.Name = 'Cambridge Theatre'",
            "SELECT Improvised_Theatres.name FROM Venues JOIN Improvised_Theatres ON Venues.id = Improvised_Theatres.venueID UNION SELECT Musicals.name FROM Venues JOIN Musicals ON Venues.id = Musicals.venueID WHERE Venues.Name = 'Cambridge Theatre'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"improvised theatres and musicals that take place in Cambridge Theatre\": [\"musicals that take place in Cambridge Theatre and improvised theatres that take place in Cambridge Theatre\", \"musicals that take place in Cambridge Theatre and improvised theatres\"]}"
        },
        "clarification_context": "\"improvised theatres and musicals that take place in Cambridge Theatre\" refers to \"musicals that take place in Cambridge Theatre and improvised theatres\"",
        "clear_ambiguity": "{\"improvised theatres and musicals that take place in Cambridge Theatre\": \"musicals that take place in Cambridge Theatre and improvised theatres\"}",
        "gold_query": "SELECT Improvised_Theatres.name FROM Venues JOIN Improvised_Theatres ON Venues.id = Improvised_Theatres.venueID UNION SELECT Musicals.name FROM Venues JOIN Musicals ON Venues.id = Musicals.venueID WHERE Venues.Name = 'Cambridge Theatre'"
    },
    {
        "index": 1144,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_ref_journalist_classifications/attachment_2tab_ref_journalist_classifications.sqlite",
        "question": "Display stringers and editors of \"Article 4 Title\".",
        "schema_without_content": "Articles : id, title, content, published_date, author_id, stringer_id, editor_id | Authors : id, first_name, last_name, email | Stringers : id, email, phone_number, FullName | Editors : id, email, FullName",
        "schema_with_content": "Articles : id (2, 3, 4), title ('Article 2 Title', 'Article 5 Title', 'Article 3 Title'), content ('Content of Article 4', 'Content of Article 5', 'Content of Article 2'), published_date (), author_id (3, 5, 2), stringer_id (1, 5, 3), editor_id (4, 3, 2) | Authors : id (1, 5, 2), first_name ('Jane', 'Alice', 'Bob'), last_name ('Brown', 'Doe', 'Green'), email ('jane@example.com', 'alice@example.com', 'bob@example.com') | Stringers : id (3, 1, 2), email ('leodicaprio@example.com', 'chrisevans@example.com', 'tomhanks@example.com'), phone_number ('+0987654321', '+0098765432', '+1123456780'), FullName ('Kate Winslet', 'Chris Evans', 'Leo DiCaprio') | Editors : id (5, 3, 4), email ('barbarawalters@example.com', 'keiraknightley@example.com', 'petergarfield@example.com'), FullName ('Peter Garfield', 'Daniel Craig', 'Barbara Walters')",
        "ambiguous_queries": [
            "SELECT Stringers.FullName FROM Articles JOIN Stringers ON Articles.stringer_id = Stringers.id WHERE Articles.title = 'Article 4 Title' UNION SELECT Editors.FullName FROM Articles JOIN Editors ON Articles.editor_id = Editors.id WHERE Articles.title = 'Article 4 Title'",
            "SELECT Stringers.FullName FROM Articles JOIN Stringers ON Articles.stringer_id = Stringers.id UNION SELECT Editors.FullName FROM Articles JOIN Editors ON Articles.editor_id = Editors.id WHERE Articles.title = 'Article 4 Title'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"stringers and editors of \\\"Article 4 Title\\\"\": [\"editors of \\\"Article 4 Title\\\" and stringers of \\\"Article 4 Title\\\"\", \"editors of \\\"Article 4 Title\\\" and stringers\"]}"
        },
        "clarification_context": "\"stringers and editors of \"Article 4 Title\"\" refers to \"editors of \"Article 4 Title\" and stringers\"",
        "clear_ambiguity": "{\"stringers and editors of \\\"Article 4 Title\\\"\": \"editors of \\\"Article 4 Title\\\" and stringers\"}",
        "gold_query": "SELECT Stringers.FullName FROM Articles JOIN Stringers ON Articles.stringer_id = Stringers.id UNION SELECT Editors.FullName FROM Articles JOIN Editors ON Articles.editor_id = Editors.id WHERE Articles.title = 'Article 4 Title'"
    },
    {
        "index": 1145,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_board_member/attachment_1tab_val_board_member.sqlite",
        "question": "Show independent directors and executive managers who work for Global Corp.",
        "schema_without_content": "Employees : emp_id, position, Board_Member, Organization, FullName | Customers : cust_id, first_name, last_name, email, phone_number, emp_id | Accounts : account_id, cust_id, balance | Transactions : transaction_id, account_id, amount, date",
        "schema_with_content": "Employees : emp_id (3, 2, 1), position ('CFO', 'CEO', 'CTO'), Board_Member ('Executive Manager', 'Independent Director', 'Independent Director'), Organization ('Global Corp', 'Not Global Corp', 'Global Corp'), FullName ('Alice Green', 'Jane Smith', 'Mike Brown') | Customers : cust_id (), first_name (), last_name (), email (), phone_number (), emp_id () | Accounts : account_id (1, 2, 3), cust_id (1, 2, 5), balance (3000.0, 1000.0, 7000.0) | Transactions : transaction_id (3, 1, 2), account_id (1, 1, 2), amount (200.0, 200.0, -50.0), date ('2021-01-01 13:00:00', '2021-01-01 12:00:00', '2021-01-02 13:00:00')",
        "ambiguous_queries": [
            "SELECT Employees.FullName FROM Employees WHERE (Employees.Board_Member = 'Independent Director' OR Employees.Board_Member = 'Executive Manager') AND Employees.Organization = 'Global Corp'",
            "SELECT Employees.FullName FROM Employees WHERE Employees.Board_Member = 'Independent Director' OR Employees.Board_Member = 'Executive Manager' AND Employees.Organization = 'Global Corp'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"independent directors and executive managers who work for Global Corp\": [\"executive managers who work for Global Corp and independent directors who work for Global Corp\", \"executive managers who work for Global Corp and independent directors\"]}"
        },
        "clarification_context": "\"independent directors and executive managers who work for Global Corp\" refers to \"executive managers who work for Global Corp and independent directors who work for Global Corp\"",
        "clear_ambiguity": "{\"independent directors and executive managers who work for Global Corp\": \"executive managers who work for Global Corp and independent directors who work for Global Corp\"}",
        "gold_query": "SELECT Employees.FullName FROM Employees WHERE (Employees.Board_Member = 'Independent Director' OR Employees.Board_Member = 'Executive Manager') AND Employees.Organization = 'Global Corp'"
    },
    {
        "index": 1146,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_ref_learning_materials/attachment_2tab_ref_learning_materials.sqlite",
        "question": "Show advanced online courses and textbooks.",
        "schema_without_content": "Difficulty_Level : ID, Level | Subjects : ID, Name, Description, DifficultyID | Textbooks : ID, Title, Author, ISBN, SubjectID | Online_Courses : ID, CourseName, Instructor, Platform, URL, SubjectID | EnrolledStudents : StudentID, FirstName, LastName, Age, Email, PhoneNumber",
        "schema_with_content": "Difficulty_Level : ID (2, 1, 3), Level ('Advanced', 'Beginner', 'Expert') | Subjects : ID (4, 1, 2), Name ('Math', 'History', 'Biology'), Description ('Basic Principles of Physics', 'Classic Novels Analysis', 'Basics of Biological Sciences'), DifficultyID (2, 1, 1) | Textbooks : ID (2, 5, 1), Title ('To Kill a Mockingbird', 'Mathematics for Beginners', 'The World of Physics'), Author ('Harper Lee', 'Michael Brown', 'Jane Smith'), ISBN ('978-0-091-234567', '978-0-123-987654', '978-0-123-456789'), SubjectID (5, 4, 3) | Online_Courses : ID (5, 2, 4), CourseName ('Foundations of Biology', 'Essential Physics', 'Introductory Math'), Instructor ('Dr. Susan King', 'Dr. Emily White', 'Prof. James Johnson'), Platform ('edX', 'FutureLearn', 'Udemy'), URL ('https://www.coursera.org/physics', 'https://www.linkedinlearning.com/literature', 'https://www.futurelearn.com/history'), SubjectID (1, 5, 4) | EnrolledStudents : StudentID (5, 1, 2), FirstName ('Charlie', 'Bob', 'David'), LastName ('Smith', 'Garcia', 'Martinez'), Age (20, 23, 22), Email ('charliewilliams@example.com', 'evagarcia@example.com', 'bobjohnson@example.com'), PhoneNumber ('+1-789-456-1234', '+1-987-654-3210', '+1-321-654-9870')",
        "ambiguous_queries": [
            "SELECT Textbooks.title as title FROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Textbooks ON Subjects.ID = Textbooks.SubjectID WHERE Difficulty_Level.Level = 'Advanced' UNION SELECT Online_Courses.coursename as title FROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Online_Courses ON Subjects.ID = Online_Courses.SubjectID WHERE Difficulty_Level.Level = 'Advanced'",
            "SELECT Textbooks.title as title FROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Textbooks ON Subjects.ID = Textbooks.SubjectID UNION SELECT Online_Courses.coursename as title FROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Online_Courses ON Subjects.ID = Online_Courses.SubjectID WHERE Difficulty_Level.Level = 'Advanced'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"advanced online courses and textbooks\": [\"advanced online courses and advanced textbooks\", \"textbooks and textbooks advanced\"]}"
        },
        "clarification_context": "\"advanced online courses and textbooks\" refers to \"textbooks and textbooks advanced\"",
        "clear_ambiguity": "{\"advanced online courses and textbooks\": \"textbooks and textbooks advanced\"}",
        "gold_query": "SELECT Textbooks.title as title FROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Textbooks ON Subjects.ID = Textbooks.SubjectID UNION SELECT Online_Courses.coursename as title FROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Online_Courses ON Subjects.ID = Online_Courses.SubjectID WHERE Difficulty_Level.Level = 'Advanced'"
    },
    {
        "index": 1147,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_literature_type/attachment_1tab_val_literature_type.sqlite",
        "question": "Show novels and poems that are written in Italian.",
        "schema_without_content": "Authors : AuthorID, FirstName, LastName, BirthDate, Country | Publishers : PublisherID, Name, Address, PhoneNumber | Literatures : LitID, Title, Synopsis, Language, PublicationYear, LiteratureType, AuthorID, PublisherID | Editions : EditionID, ISBN, ReleaseDate, Price, Quantity, LitID | Reviews : ReviewID, Rating, CommentText, ReviewerID, EditionID",
        "schema_with_content": "Authors : AuthorID (1, 2), FirstName ('Jane', 'John'), LastName ('Smith', 'Doe'), BirthDate ('1980-06-30', '1975-10-01'), Country ('UK', 'USA') | Publishers : PublisherID (1, 2), Name ('XYZ Books', 'ABC Publishing'), Address ('123 Main St.', '456 Elm St.'), PhoneNumber ('555-1234', '555-5678') | Literatures : LitID (2, 1, 3), Title ('The Spanish Novel', 'The Italian Novel', 'La Poesia Italiana'), Synopsis ('A collection of poems about Spain', 'An anthology of Italian poetry', 'A story about an Italian adventure'), Language ('Italian', 'Spanish', 'Italian'), PublicationYear (2010, 2011, 2008), LiteratureType ('Novel', 'Poem', 'Novel'), AuthorID (1, 1, 2), PublisherID (1, 2, 1) | Editions : EditionID (), ISBN (), ReleaseDate (), Price (), Quantity (), LitID () | Reviews : ReviewID (), Rating (), CommentText (), ReviewerID (), EditionID ()",
        "ambiguous_queries": [
            "SELECT Literatures.Title FROM Literatures WHERE (Literatures.LiteratureType = 'Novel' OR Literatures.LiteratureType = 'Poem') AND Literatures.Language = 'Italian'",
            "SELECT Literatures.Title FROM Literatures WHERE Literatures.LiteratureType = 'Novel' OR Literatures.LiteratureType = 'Poem' AND Literatures.Language = 'Italian'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"novels and poems that are written in Italian\": [\"poems that are written in Italian and novels that are written in Italian\", \"poems that are written in Italian and novels\"]}"
        },
        "clarification_context": "\"novels and poems that are written in Italian\" refers to \"poems that are written in Italian and novels\"",
        "clear_ambiguity": "{\"novels and poems that are written in Italian\": \"poems that are written in Italian and novels\"}",
        "gold_query": "SELECT Literatures.Title FROM Literatures WHERE Literatures.LiteratureType = 'Novel' OR Literatures.LiteratureType = 'Poem' AND Literatures.Language = 'Italian'"
    },
    {
        "index": 1148,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_stock_market_offerings/attachment_1tab_val_stock_market_offerings.sqlite",
        "question": "Give me all the IPO rates and secondary offering rates with 50M of raised capital.",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, DateOfBirth, Address | Accounts : AccountID, CustomerID, Balance | Deposits : DepositID, AccountID, Amount, TransactionDate | Loans : LoanID, CustomerID, StockMarketOfferings, RaisedCapitalAmount, InterestRate, StartDate, EndDate",
        "schema_with_content": "Customers : CustomerID (2, 1), FirstName ('Jane', 'John'), LastName ('Smith', 'Doe'), DateOfBirth ('1980-06-15', '1970-01-01'), Address ('123 Main St', '456 Elm St') | Accounts : AccountID (1, 2), CustomerID (2, 1), Balance (2000.0, 1000.0) | Deposits : DepositID (1, 2), AccountID (1, 2), Amount (500.0, 1000.0), TransactionDate ('2024-03-08 00:00:42', '2024-03-08 00:00:42') | Loans : LoanID (4, 3, 1), CustomerID (1, 1, 2), StockMarketOfferings ('Secondary Offering', 'IPO', 'IPO'), RaisedCapitalAmount ('60000000', '50000000', '60000000'), InterestRate (4.0, 5.5, 4.5), StartDate (), EndDate ()",
        "ambiguous_queries": [
            "SELECT Loans.InterestRate FROM Loans WHERE (Loans.StockMarketOfferings = 'IPO' OR Loans.StockMarketOfferings = 'Secondary Offering') AND Loans.RaisedCapitalAmount = '50000000'",
            "SELECT Loans.InterestRate FROM Loans WHERE Loans.StockMarketOfferings = 'IPO' OR Loans.StockMarketOfferings = 'Secondary Offering' AND Loans.RaisedCapitalAmount = '50000000'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"IPO rates and secondary offering rates with 50M of raised capital\": [\"secondary offering rates with 50M of raised capital and IPO rates with 50M of raised capital\", \"secondary offering rates with 50M of raised capital and IPO rates\"]}"
        },
        "clarification_context": "\"IPO rates and secondary offering rates with 50M of raised capital\" refers to \"secondary offering rates with 50M of raised capital and IPO rates with 50M of raised capital\"",
        "clear_ambiguity": "{\"IPO rates and secondary offering rates with 50M of raised capital\": \"secondary offering rates with 50M of raised capital and IPO rates with 50M of raised capital\"}",
        "gold_query": "SELECT Loans.InterestRate FROM Loans WHERE (Loans.StockMarketOfferings = 'IPO' OR Loans.StockMarketOfferings = 'Secondary Offering') AND Loans.RaisedCapitalAmount = '50000000'"
    },
    {
        "index": 1149,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_educational_venues/attachment_1tab_val_educational_venues.sqlite",
        "question": "Give me the museums and planetariums with tickets priced at $15.",
        "schema_without_content": "Educator : id, name, specialization, yearsOfExperience | Course : courseId, title, description, duration, educatorId | Student : studentId, firstName, lastName, dateOfBirth, enrolledCourses | Venue : venueId, name, location, educationalVenue, ticketPrice",
        "schema_with_content": "Educator : id (2, 3, 4), name ('Charlie White', 'Alice Brown', 'John Doe'), specialization ('Computer Science', 'English Literature', 'Physics'), yearsOfExperience (7, 9, 8) | Course : courseId (3, 4, 5), title ('Advanced Biology', 'Introduction to Calculus', 'Great American Novels'), description ('Exploring complex biological systems.', 'A basic introduction to calculus.', 'Discussion on major works by classic American authors.'), duration (180, 150, 120), educatorId (4, 5, 1) | Student : studentId (2, 3, 4), firstName ('Emma', 'Robert', 'Kate'), lastName ('Winslet', 'Downey Jr', 'Watson'), dateOfBirth ('1965-04-04', '1975-10-05', '1990-05-22'), enrolledCourses () | Venue : venueId (5, 4, 3), name ('Art Gallery', 'Natural History Museum', 'Galaxy Planetarium'), location ('North Point', 'West End', 'South Side'), educationalVenue ('Museum', 'Planetarium', 'Art Exhibition Hall'), ticketPrice ('$15', 'Free Entry', '$17')",
        "ambiguous_queries": [
            "SELECT Venue.name FROM Venue WHERE (Venue.educationalVenue = 'Museum' OR Venue.educationalVenue = 'Planetarium') AND Venue.ticketPrice = '$15'",
            "SELECT Venue.name FROM Venue WHERE Venue.educationalVenue = 'Museum' OR Venue.educationalVenue = 'Planetarium' AND Venue.ticketPrice = '$15'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"museums and planetariums with tickets priced at $15\": [\"planetariums with tickets priced at $15 and museums with tickets priced at $15\", \"planetariums with tickets priced at $15 and museums\"]}"
        },
        "clarification_context": "\"museums and planetariums with tickets priced at $15\" refers to \"planetariums with tickets priced at $15 and museums with tickets priced at $15\"",
        "clear_ambiguity": "{\"museums and planetariums with tickets priced at $15\": \"planetariums with tickets priced at $15 and museums with tickets priced at $15\"}",
        "gold_query": "SELECT Venue.name FROM Venue WHERE (Venue.educationalVenue = 'Museum' OR Venue.educationalVenue = 'Planetarium') AND Venue.ticketPrice = '$15'"
    },
    {
        "index": 1150,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_val_genre2/attachment_2tab_val_genre2.sqlite",
        "question": "Display sci-fi movies and fantasy movies filmed in New Zealand.",
        "schema_without_content": "SciFiMovies : id, title, director, releaseYear, sciFi, filmingLocation | FantasyMovies : id, title, director, releaseYear, fantasy, filmingLocation | Actors : id, name, birthDate, nationality | Roles : movieId, actorId, roleName | Directors : id, name, birthDate, nationality | Productions : id, movieTitle, productionCompany, budget, startDate, endDate",
        "schema_with_content": "SciFiMovies : id (1, 2), title ('Star Wars', 'Blade Runner'), director ('Ridley Scott', 'George Lucas'), releaseYear (1982, 1977), sciFi (1, 1), filmingLocation ('United States', 'New Zealand') | FantasyMovies : id (2, 1), title ('Lord of The Rings', \"Harry Potter and The Philosopher's Stone\"), director ('Chris Columbus', 'Peter Jackson'), releaseYear (2001, 2001), fantasy (1, 1), filmingLocation ('United Kingdom', 'New Zealand') | Actors : id (1, 2), name ('Keanu Reeves', 'Natalie Portman'), birthDate ('June 9, 1981', 'September 2, 1964'), nationality ('Israel', 'Canada') | Roles : movieId (3, 1), actorId (1, 2), roleName ('Padmé Amidala', 'Neo') | Directors : id (1, 2), name ('Guillermo del Toro', 'Christopher Nolan'), birthDate ('July 30, 1970', 'October 9, 1964'), nationality ('England', 'Spain') | Productions : id (1, 2), movieTitle (\"Pan's Labyrinth\", 'Inception'), productionCompany ('Warner Bros.', 'Pictaza'), budget (30.0, 160.0), startDate ('April 17, 2005', 'June 16, 2009'), endDate ('December 17, 2005', 'August 16, 2010')",
        "ambiguous_queries": [
            "SELECT SciFiMovies.title FROM SciFiMovies WHERE SciFiMovies.filmingLocation = 'New Zealand' UNION SELECT FantasyMovies.title FROM FantasyMovies WHERE FantasyMovies.filmingLocation = 'New Zealand'",
            "SELECT SciFiMovies.title FROM SciFiMovies UNION SELECT FantasyMovies.title FROM FantasyMovies WHERE FantasyMovies.filmingLocation = 'New Zealand'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"sci-fi movies and fantasy movies filmed in New Zealand\": [\"fantasy movies filmed in New Zealand and sci-fi movies filmed in New Zealand\", \"fantasy movies filmed in New Zealand and sci-fi movies\"]}"
        },
        "clarification_context": "\"sci-fi movies and fantasy movies filmed in New Zealand\" refers to \"fantasy movies filmed in New Zealand and sci-fi movies filmed in New Zealand\"",
        "clear_ambiguity": "{\"sci-fi movies and fantasy movies filmed in New Zealand\": \"fantasy movies filmed in New Zealand and sci-fi movies filmed in New Zealand\"}",
        "gold_query": "SELECT SciFiMovies.title FROM SciFiMovies WHERE SciFiMovies.filmingLocation = 'New Zealand' UNION SELECT FantasyMovies.title FROM FantasyMovies WHERE FantasyMovies.filmingLocation = 'New Zealand'"
    },
    {
        "index": 1151,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_val_laboratory_essentials/attachment_2tab_val_laboratory_essentials.sqlite",
        "question": "Show all lab equipment and safety gear that was purchased in January 2023.",
        "schema_without_content": "Students : studentID, firstName, lastName, email | Instructors : instructorID, firstName, lastName, email | Classes : classID, className, instructorID | StudentsEnrolledInClasses : enrollmentID, studentID, classID | Labs : labID, labName, buildingNumber, roomNumber | Lab_Equipments : equipmentID, labID, equipName, dateOfPurchase, cost | Safety_Gears : safetyGearID, labID, gearName, dateOfPurchase, cost",
        "schema_with_content": "Students : studentID (4, 3, 1), firstName ('Charlie', 'Jane', 'John'), lastName ('Johnson', 'Smith', 'Brown'), email ('jane.smith@example.com', 'charlie.brown@example.com', 'john.doe@example.com') | Instructors : instructorID (2, 4, 5), firstName ('Professor', 'Assistant', 'Adjunct'), lastName ('Robert', 'Ava', 'Penelope'), email ('pennyassis@email.edu', 'milesteach@email.edu', 'xanderx@email.edu') | Classes : classID (4, 2, 5), className ('Physics I', 'World History', 'Introduction to Computer Science'), instructorID (1, 2, 4) | StudentsEnrolledInClasses : enrollmentID (5, 4, 1), studentID (5, 2, 1), classID (2, 1, 4) | Labs : labID (5, 1, 4), labName ('Computer Lab A', 'Physics Lab D', 'Chemistry Lab C'), buildingNumber ('Building 2', 'Building 5', 'Building 3'), roomNumber ('Room 505', 'Room 404', 'Room 101') | Lab_Equipments : equipmentID (1, 2, 4), labID (1, 2, 3), equipName ('High Performance Desktop Computers', 'Advanced Microscopes', 'Electronic Balances'), dateOfPurchase ('January 2023', 'May 2023', 'April 2023'), cost (8999.99, 6999.99, 4999.99) | Safety_Gears : safetyGearID (4, 3, 1), labID (3, 1, 2), gearName ('Fire Extinguishers', 'First Aid Kits', 'Spill Cleanup Kit'), dateOfPurchase ('April 2023', 'August 2023', 'January 2023'), cost (1499.99, 1999.99, 999.99)",
        "ambiguous_queries": [
            "SELECT Lab_Equipments.equipName as name FROM Lab_Equipments WHERE Lab_Equipments.dateOfPurchase = 'January 2023' UNION SELECT Safety_Gears.gearName as name FROM Safety_Gears WHERE Safety_Gears.dateOfPurchase = 'January 2023'",
            "SELECT Lab_Equipments.equipName as name FROM Lab_Equipments UNION SELECT Safety_Gears.gearName as name FROM Safety_Gears WHERE Safety_Gears.dateOfPurchase = 'January 2023'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"lab equipment and safety gear that was purchased in January 2023\": [\"safety gear that was purchased in January 2023 and lab equipment that was purchased in January 2023\", \"safety gear that was purchased in January 2023 and lab equipment\"]}"
        },
        "clarification_context": "\"lab equipment and safety gear that was purchased in January 2023\" refers to \"safety gear that was purchased in January 2023 and lab equipment\"",
        "clear_ambiguity": "{\"lab equipment and safety gear that was purchased in January 2023\": \"safety gear that was purchased in January 2023 and lab equipment\"}",
        "gold_query": "SELECT Lab_Equipments.equipName as name FROM Lab_Equipments UNION SELECT Safety_Gears.gearName as name FROM Safety_Gears WHERE Safety_Gears.dateOfPurchase = 'January 2023'"
    },
    {
        "index": 1152,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_ref_sales_and_marketing_jobs/attachment_2tab_ref_sales_and_marketing_jobs.sqlite",
        "question": "Show sales associates and marketing specialists with a target market of B2C.",
        "schema_without_content": "Company : id, name | Position : id, title, salary | TargetMarket : id, type | SalesAssociates : id, position_id, target_market_id, skills, experience | MarketingSpecialists : id, position_id, target_market_id, skills, experience",
        "schema_with_content": "Company : id (4, 5, 1), name ('Company1', 'Company2', 'Company3') | Position : id (5, 2, 4), title ('Position4', 'Position1', 'Position3'), salary (70000.0, 100000.0, 60000.0) | TargetMarket : id (1, 2), type ('B2C', 'B2B') | SalesAssociates : id (3, 1, 2), position_id (1, 2, 3), target_market_id (2, 1, 2), skills ('Skill3', 'Skill1', 'Skill2'), experience (5, 7, 2) | MarketingSpecialists : id (1, 2), position_id (5, 4), target_market_id (2, 1), skills ('Skill5', 'Skill4'), experience (11, 8)",
        "ambiguous_queries": [
            "SELECT Position.title FROM TargetMarket JOIN SalesAssociates ON TargetMarket.id = SalesAssociates.target_market_id JOIN Position ON Position.id = SalesAssociates.Position_id WHERE TargetMarket.type = 'B2C' UNION SELECT Position.title FROM TargetMarket JOIN MarketingSpecialists ON TargetMarket.id = MarketingSpecialists.target_market_id JOIN Position ON Position.id = MarketingSpecialists.Position_id WHERE TargetMarket.type = 'B2C'",
            "SELECT Position.title FROM TargetMarket JOIN SalesAssociates ON TargetMarket.id = SalesAssociates.target_market_id JOIN Position ON Position.id = SalesAssociates.Position_id UNION SELECT Position.title FROM TargetMarket JOIN MarketingSpecialists ON TargetMarket.id = MarketingSpecialists.target_market_id JOIN Position ON Position.id = MarketingSpecialists.Position_id WHERE TargetMarket.type = 'B2C'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"sales associates and marketing specialists with a target market of B2C\": [\"marketing specialists with a target market of B2C and sales associates with a target market of B2C\", \"marketing specialists with a target market of B2C and sales associates\"]}"
        },
        "clarification_context": "\"sales associates and marketing specialists with a target market of B2C\" refers to \"marketing specialists with a target market of B2C and sales associates\"",
        "clear_ambiguity": "{\"sales associates and marketing specialists with a target market of B2C\": \"marketing specialists with a target market of B2C and sales associates\"}",
        "gold_query": "SELECT Position.title FROM TargetMarket JOIN SalesAssociates ON TargetMarket.id = SalesAssociates.target_market_id JOIN Position ON Position.id = SalesAssociates.Position_id UNION SELECT Position.title FROM TargetMarket JOIN MarketingSpecialists ON TargetMarket.id = MarketingSpecialists.target_market_id JOIN Position ON Position.id = MarketingSpecialists.Position_id WHERE TargetMarket.type = 'B2C'"
    },
    {
        "index": 1153,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_events_industry/attachment_2tab_val_events_industry.sqlite",
        "question": "Display event planners and wedding coordinators from Events Unlimited.",
        "schema_without_content": "Company : id, name | Employee : id, firstName, lastName, email | Salary : id, employeeId, salary, startDate, endDate | Benefits : id, employeeId, healthInsurance, retirementPlan, vacationDays | Wedding_Coordinator : id, Position, companyId, experience, skills | Event_Planner : id, Position, companyId, experience, skills",
        "schema_with_content": "Company : id (1, 2), name ('Events Unlimited', 'Grand Celebrations') | Employee : id (2, 5, 4), firstName ('Jane', 'Mike', 'John'), lastName ('Black', 'Smith', 'Doe'), email ('eblack@gmail.com', 'alicebrown@gmail.com', 'mwhite@gmail.com') | Salary : id (2, 4, 3), employeeId (5, 4, 2), salary (88000, 85000, 90000), startDate ('2019-01-01', '2020-01-01', '2021-01-01'), endDate ('2022-12-31', 'Present', 'Present') | Benefits : id (3, 2, 1), employeeId (4, 1, 2), healthInsurance (1, 0, 1), retirementPlan (1, 0, 1), vacationDays (15, 25, 22) | Wedding_Coordinator : id (2, 1), Position ('Lead Coordinator', 'Assistant Coordinator'), companyId (1, 2), experience (2, 7), skills ('Designing, Planning', 'Vendor Relationships, Budgeting') | Event_Planner : id (1, 2), Position ('Senior Planner', 'Junior Planner'), companyId (2, 1), experience (6, 3), skills ('Decorating, Coordination', 'Organization, Communication')",
        "ambiguous_queries": [
            "SELECT Event_Planner.Position FROM Event_Planner JOIN Company ON Event_Planner.companyId = Company.id WHERE Company.name = 'Events Unlimited' UNION SELECT Wedding_Coordinator.Position FROM Wedding_Coordinator JOIN Company ON Wedding_Coordinator.companyId = Company.id WHERE Company.name = 'Events Unlimited'",
            "SELECT Event_Planner.Position FROM Event_Planner JOIN Company ON Event_Planner.companyId = Company.id UNION SELECT Wedding_Coordinator.Position FROM Wedding_Coordinator JOIN Company ON Wedding_Coordinator.companyId = Company.id WHERE Company.name = 'Events Unlimited'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"event planners and wedding coordinators from Events Unlimited\": [\"wedding coordinators from Events Unlimited and event planners from Events Unlimited\", \"wedding coordinators from Events Unlimited and event planners\"]}"
        },
        "clarification_context": "\"event planners and wedding coordinators from Events Unlimited\" refers to \"wedding coordinators from Events Unlimited and event planners\"",
        "clear_ambiguity": "{\"event planners and wedding coordinators from Events Unlimited\": \"wedding coordinators from Events Unlimited and event planners\"}",
        "gold_query": "SELECT Event_Planner.Position FROM Event_Planner JOIN Company ON Event_Planner.companyId = Company.id UNION SELECT Wedding_Coordinator.Position FROM Wedding_Coordinator JOIN Company ON Wedding_Coordinator.companyId = Company.id WHERE Company.name = 'Events Unlimited'"
    },
    {
        "index": 1154,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_1tab_val_mobility_aids/attachment_1tab_val_mobility_aids.sqlite",
        "question": "Show me the wheelchair assistance and mobility scooters available at entrance A.",
        "schema_without_content": "Flight : flightID, departureTime, destination, duration | Gate : gateID, gateNumber, terminal, capacity | Passenger : passengerID, mobilityAids, pickUpDropOffLocation, FullName | ServiceRequest : requestID, flightID, passengerID, serviceType",
        "schema_with_content": "Flight : flightID (1, 2), departureTime ('2023-03-17 09:00', '2023-03-17 11:00'), destination ('London', 'Paris'), duration (6, 8) | Gate : gateID (2, 1), gateNumber (102, 101), terminal (1, 1), capacity (20, 25) | Passenger : passengerID (1, 4, 2), mobilityAids ('Mobility Scooter', 'Mobility Scooter', 'Wheelchair Assistance'), pickUpDropOffLocation ('Entrance A', 'Entrance A', 'Exit C'), FullName ('Alice Brown', 'Bob White', 'John Doe') | ServiceRequest : requestID (4, 1, 2), flightID (1, 1, 2), passengerID (3, 2, 1), serviceType ('Special Meal', 'Assisted Boarding', 'Meal Request')",
        "ambiguous_queries": [
            "SELECT Passenger.FullName FROM Passenger WHERE (Passenger.mobilityAids = 'Wheelchair Assistance' OR Passenger.mobilityAids = 'Mobility Scooter') AND Passenger.pickUpDropOffLocation = 'Entrance A'",
            "SELECT Passenger.FullName FROM Passenger WHERE Passenger.mobilityAids = 'Wheelchair Assistance' OR Passenger.mobilityAids = 'Mobility Scooter' AND Passenger.pickUpDropOffLocation = 'Entrance A'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"wheelchair assistance and mobility scooters available at entrance A\": [\"mobility scooters available at entrance A and wheelchair assistance available at entrance A\", \"mobility scooters available at entrance A and wheelchair assistance\"]}"
        },
        "clarification_context": "\"wheelchair assistance and mobility scooters available at entrance A\" refers to \"mobility scooters available at entrance A and wheelchair assistance\"",
        "clear_ambiguity": "{\"wheelchair assistance and mobility scooters available at entrance A\": \"mobility scooters available at entrance A and wheelchair assistance\"}",
        "gold_query": "SELECT Passenger.FullName FROM Passenger WHERE Passenger.mobilityAids = 'Wheelchair Assistance' OR Passenger.mobilityAids = 'Mobility Scooter' AND Passenger.pickUpDropOffLocation = 'Entrance A'"
    },
    {
        "index": 1155,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_ref_events/attachment_2tab_ref_events.sqlite",
        "question": "Where were all Jane Smith's media scrums and press conferences?",
        "schema_without_content": "Person : id, name | Press_Conference : id, personId, date, time, venue, notes | Media_Scrum : id, personId, date, time, location, topic | Article : id, title, content, authorId, pressConferenceId, mediaScrumId, publicationDate",
        "schema_with_content": "Person : id (1, 3, 4), name ('Jane Smith', 'Oprah Winfrey', 'Tom Hanks') | Press_Conference : id (2, 1), personId (1, 2), date ('2021-12-31', '2021-12-30'), time ('17:00:00', '16:00:00'), venue ('New York City', 'Los Angeles'), notes ('Discussed new policy changes.', 'Talked about her latest book release.') | Media_Scrum : id (2, 1), personId (2, 1), date ('2021-12-29', '2021-12-28'), time ('18:00:00', '19:00:00'), location ('Washington DC', 'Chicago'), topic ('Her favorite movie of the year', 'Upcoming political event') | Article : id (5, 4, 2), title ('Fourth article', 'First article', 'Fifth article'), content ('Here is another interesting piece.', 'Read all about it...', 'Check out this exciting news!'), authorId (2, 3, 5), pressConferenceId (1, 2), mediaScrumId (2, 1, 1), publicationDate ('2021-12-30', '2021-12-30', '2021-12-30')",
        "ambiguous_queries": [
            "SELECT Press_Conference.venue FROM Person JOIN Press_Conference ON Person.id = Press_Conference.personId WHERE Person.name = 'Jane Smith' UNION SELECT Media_Scrum.location FROM Person JOIN Media_Scrum ON Person.id = Media_Scrum.personId WHERE Person.name = 'Jane Smith'",
            "SELECT Press_Conference.venue FROM Person JOIN Press_Conference ON Person.id = Press_Conference.personId UNION SELECT Media_Scrum.location FROM Person JOIN Media_Scrum ON Person.id = Media_Scrum.personId WHERE Person.name = 'Jane Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"Jane Smith's media scrums and press conferences\": [\"Jane Smith's media scrums and Jane Smith's press conferences\", \"press conferences and press conferences Jane Smith's\"]}"
        },
        "clarification_context": "\"Jane Smith's media scrums and press conferences\" refers to \"press conferences and press conferences Jane Smith's\"",
        "clear_ambiguity": "{\"Jane Smith's media scrums and press conferences\": \"press conferences and press conferences Jane Smith's\"}",
        "gold_query": "SELECT Press_Conference.venue FROM Person JOIN Press_Conference ON Person.id = Press_Conference.personId UNION SELECT Media_Scrum.location FROM Person JOIN Media_Scrum ON Person.id = Media_Scrum.personId WHERE Person.name = 'Jane Smith'"
    },
    {
        "index": 1156,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_ref_assessment_methods/attachment_2tab_ref_assessment_methods.sqlite",
        "question": "Show scores of all exams and quizzes marked by Ms. Brown.",
        "schema_without_content": "Students : id, name, age | Exams : id, student_id, marks | Quizzes : id, student_id, points | Assessors : id, name | Subjects : id, subject_name, assessor_id | StudentSubjects : student_id, subject_id",
        "schema_with_content": "Students : id (3, 5, 4), name ('David', 'Charlie', 'Bob'), age (23, 24, 20) | Exams : id (4, 5, 2), student_id (1, 2, 3), marks (65, 75, 90) | Quizzes : id (4, 2, 5), student_id (5, 1, 4), points (75, 70, 55) | Assessors : id (3, 2, 1), name ('Mrs. Green', 'Professor Smith', 'Ms. Brown') | Subjects : id (4, 2, 5), subject_name ('Chemistry', 'Biology', 'Physics'), assessor_id (2, 3, 1) | StudentSubjects : student_id (4, 2, 3), subject_id (5, 4, 2)",
        "ambiguous_queries": [
            "SELECT Exams.marks as score FROM Assessors JOIN Subjects ON Assessors.id = Subjects.assessor_id JOIN StudentSubjects ON Subjects.id = StudentSubjects.subject_id JOIN Students ON StudentSubjects.student_id = Students.id JOIN Exams ON Students.id = Exams.student_id WHERE Assessors.name = 'Ms. Brown' UNION SELECT Quizzes.points as score FROM Assessors JOIN Subjects ON Assessors.id = Subjects.assessor_id JOIN StudentSubjects ON Subjects.id = StudentSubjects.subject_id JOIN Students ON StudentSubjects.student_id = Students.id JOIN Quizzes ON Students.id = Quizzes.student_id WHERE Assessors.name = 'Ms. Brown'",
            "SELECT Exams.marks as score FROM Assessors JOIN Subjects ON Assessors.id = Subjects.assessor_id JOIN StudentSubjects ON Subjects.id = StudentSubjects.subject_id JOIN Students ON StudentSubjects.student_id = Students.id JOIN Exams ON Students.id = Exams.student_id UNION SELECT Quizzes.points as score FROM Assessors JOIN Subjects ON Assessors.id = Subjects.assessor_id JOIN StudentSubjects ON Subjects.id = StudentSubjects.subject_id JOIN Students ON StudentSubjects.student_id = Students.id JOIN Quizzes ON Students.id = Quizzes.student_id WHERE Assessors.name = 'Ms. Brown'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"exams and quizzes marked by Ms. Brown\": [\"quizzes marked by Ms. Brown and exams marked by Ms. Brown\", \"quizzes marked by Ms. Brown and exams\"]}"
        },
        "clarification_context": "\"exams and quizzes marked by Ms. Brown\" refers to \"quizzes marked by Ms. Brown and exams marked by Ms. Brown\"",
        "clear_ambiguity": "{\"exams and quizzes marked by Ms. Brown\": \"quizzes marked by Ms. Brown and exams marked by Ms. Brown\"}",
        "gold_query": "SELECT Exams.marks as score FROM Assessors JOIN Subjects ON Assessors.id = Subjects.assessor_id JOIN StudentSubjects ON Subjects.id = StudentSubjects.subject_id JOIN Students ON StudentSubjects.student_id = Students.id JOIN Exams ON Students.id = Exams.student_id WHERE Assessors.name = 'Ms. Brown' UNION SELECT Quizzes.points as score FROM Assessors JOIN Subjects ON Assessors.id = Subjects.assessor_id JOIN StudentSubjects ON Subjects.id = StudentSubjects.subject_id JOIN Students ON StudentSubjects.student_id = Students.id JOIN Quizzes ON Students.id = Quizzes.student_id WHERE Assessors.name = 'Ms. Brown'"
    },
    {
        "index": 1157,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_airport_accommodations/attachment_2tab_val_airport_accommodations.sqlite",
        "question": "Show hotels and sleep pod that cost 150.",
        "schema_without_content": "Airport : ID, Name, Location, RunwayLength | Hotel : ID, AirportID, Airport_Name, Airport_Hotel, Price | SleepPod : ID, AirportID, Airport_Name, Sleep_Pod, Price | Restaurant : ID, AirportID, Airport_Name, Name, Cuisine | CarRental : ID, AirportID, Airport_Name, Company, Rates, ContactInfo | ParkingLot : ID, AirportID, Airport_Name, Type, Spaces, Rate",
        "schema_with_content": "Airport : ID (2, 1), Name ('Dulles International', 'JFK International'), Location ('Washington D.C.', 'New York City'), RunwayLength (9876.0, 10345.0) | Hotel : ID (3, 1, 4), AirportID (1, 2, 2), Airport_Name ('JFK International', 'JFK International', 'Dulles International'), Airport_Hotel ('Hyatt Regency JFK', 'Marriott JFK', 'Hilton Dulles'), Price ('180', '200', '150') | SleepPod : ID (1, 2, 3), AirportID (1, 2, 2), Airport_Name ('Dulles International', 'JFK International', 'Dulles International'), Sleep_Pod ('GoSleep Pods', 'RestZen Capsules', 'YOUpod'), Price ('150', '180', '220') | Restaurant : ID (2, 4, 3), AirportID (2, 1, 2), Airport_Name ('JFK International', 'Dulles International', 'Dulles International'), Name ('LeGrand NYC', 'Burger Bar', 'Taste of India'), Cuisine ('Indian', 'American', 'Italian') | CarRental : ID (2, 3, 4), AirportID (1, 2, 1), Airport_Name ('JFK International', 'Dulles International', 'JFK International'), Company ('Hertz', 'Enterprise', 'National'), Rates ('Moderate', 'Low', 'High'), ContactInfo ('+1 855-263-3522', '+1 800-331-1212', '+1 877-222-9350') | ParkingLot : ID (2, 4, 3), AirportID (1, 1, 2), Airport_Name ('Dulles International', 'JFK International', 'Dulles International'), Type ('Long Term', 'Premium', 'Economy'), Spaces (300, 100, 500), Rate (15, 35, 30)",
        "ambiguous_queries": [
            "SELECT Hotel.Airport_Hotel as name FROM Hotel WHERE Hotel.Price = '150' UNION SELECT SleepPod.Sleep_Pod as name FROM SleepPod WHERE SleepPod.Price = '150'",
            "SELECT Hotel.Airport_Hotel as name FROM Hotel UNION SELECT SleepPod.Sleep_Pod as name FROM SleepPod WHERE SleepPod.Price = '150'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"hotels and sleep pod that cost 150\": [\"sleep pod that cost 150 and hotels that cost 150\", \"sleep pod that cost 150 and hotels\"]}"
        },
        "clarification_context": "\"hotels and sleep pod that cost 150\" refers to \"sleep pod that cost 150 and hotels that cost 150\"",
        "clear_ambiguity": "{\"hotels and sleep pod that cost 150\": \"sleep pod that cost 150 and hotels that cost 150\"}",
        "gold_query": "SELECT Hotel.Airport_Hotel as name FROM Hotel WHERE Hotel.Price = '150' UNION SELECT SleepPod.Sleep_Pod as name FROM SleepPod WHERE SleepPod.Price = '150'"
    },
    {
        "index": 1158,
        "db_id": "Hospitality",
        "ambig_type": "attachment",
        "db_file": "attachment/Hospitality/attachment_2tab_val_amenity/attachment_2tab_val_amenity.sqlite",
        "question": "Provide beach clubs and water sport rentals where their beach's phone number is 555-555-5555.",
        "schema_without_content": "Beaches : id, Name, Address, PhoneNumber, Email | Beach_Clubs : id, Name, Location, OpeningHours, PriceRange, Beach_id | Restaurants : id, Name, Cuisine, Rating, Beach_id | Hotels : id, Name, Star_rating, PriceRange, Beach_id | Accommodations : id, Type, Capacity, Amenities, Beach_id | Watersports_Rentals : id, name, Item, RentalRate, AvailableDays, Beach_id",
        "schema_with_content": "Beaches : id (1, 2), Name ('Sunset Shores', 'White Sands Beach'), Address ('123 Main St', '456 Ocean Blvd'), PhoneNumber ('555-555-5555', '555-555-6789'), Email ('whitesand@email.com', 'sunsets@email.com') | Beach_Clubs : id (1, 2), Name ('Paradise Club', 'Ocean View Club'), Location ('Sunset Shores', 'White Sands Beach'), OpeningHours ('10am - 7pm', '9am - 6pm'), PriceRange ('$$$', '$$'), Beach_id (1, 2) | Restaurants : id (2, 1), Name ('Surfside Cafe', 'Seaside Grill'), Cuisine ('Italian', 'Mexican'), Rating (4.0, 4.5), Beach_id (2, 1) | Hotels : id (1, 2), Name ('Oceanfront Inn', 'Shoreline Suites'), Star_rating (4, 3), PriceRange ('High', 'Moderate'), Beach_id (1, 2) | Accommodations : id (2, 1), Type ('Hotel', 'Vacation Home'), Capacity (8, 50), Amenities ('No Pets Allowed, Jacuzzi, BBQ', 'Pool, WiFi, Parking'), Beach_id (1, 2) | Watersports_Rentals : id (1, 2), name ('WaveRider Rentals', 'AquaAdventures Rentals'), Item ('Kayak', 'Paddleboard'), RentalRate (20.0, 25.0), AvailableDays ('Mon - Fri', 'All Days'), Beach_id (2, 1)",
        "ambiguous_queries": [
            "SELECT Beach_Clubs.name FROM Beach_Clubs JOIN Beaches ON Beach_Clubs.Beach_id = Beaches.id WHERE Beaches.phonenumber = '555-555-5555' UNION SELECT Watersports_Rentals.name FROM Watersports_Rentals JOIN Beaches ON Watersports_Rentals.Beach_id = Beaches.id WHERE Beaches.phonenumber = '555-555-5555'",
            "SELECT Beach_Clubs.name FROM Beach_Clubs JOIN Beaches ON Beach_Clubs.Beach_id = Beaches.id UNION SELECT Watersports_Rentals.name FROM Watersports_Rentals JOIN Beaches ON Watersports_Rentals.Beach_id = Beaches.id WHERE Beaches.phonenumber = '555-555-5555'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"beach clubs and water sport rentals where their beach's phone number is 555-555-5555\": [\"water sport rentals where their beach's phone number is 555-555-5555 and beach clubs where their beach's phone number is 555-555-5555\", \"water sport rentals where their beach's phone number is 555-555-5555 and beach clubs\"]}"
        },
        "clarification_context": "\"beach clubs and water sport rentals where their beach's phone number is 555-555-5555\" refers to \"water sport rentals where their beach's phone number is 555-555-5555 and beach clubs\"",
        "clear_ambiguity": "{\"beach clubs and water sport rentals where their beach's phone number is 555-555-5555\": \"water sport rentals where their beach's phone number is 555-555-5555 and beach clubs\"}",
        "gold_query": "SELECT Beach_Clubs.name FROM Beach_Clubs JOIN Beaches ON Beach_Clubs.Beach_id = Beaches.id UNION SELECT Watersports_Rentals.name FROM Watersports_Rentals JOIN Beaches ON Watersports_Rentals.Beach_id = Beaches.id WHERE Beaches.phonenumber = '555-555-5555'"
    },
    {
        "index": 1159,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_val_genre3/attachment_1tab_val_genre3.sqlite",
        "question": "Please list horrors and thrillers with a $20M budget.",
        "schema_without_content": "Directors : DirectorID, Name, BirthDate | Movies : MovieID, Title, Genre, Budget, ReleaseYear, DirectorID | Actors : ActorID, FirstName, LastName, BirthDate | Roles : RoleID, MovieID, ActorID, CharacterName",
        "schema_with_content": "Directors : DirectorID (1, 3, 2), Name ('Alice Brown', 'John Doe', 'Jane Smith'), BirthDate ('1985-07-06', '1990-03-12', '1975-10-24') | Movies : MovieID (3, 5, 6), Title ('Silent Shadows', 'Twisted Minds', 'Chilling Escape'), Genre ('Horror', 'Fantasy', 'Thriller'), Budget ('20 million USD', '15 million USD', '20 million USD'), ReleaseYear (2009, 2012, 2015), DirectorID (2, 3, 1) | Actors : ActorID (2, 3, 1), FirstName ('Tom', 'Emma', 'Leonardo'), LastName ('Hanks', 'Stone', 'DiCaprio'), BirthDate ('1974-11-11', '1956-07-09', '1988-11-06') | Roles : RoleID (2, 5, 4), MovieID (3, 2, 4), ActorID (1, 3, 1), CharacterName ('Lucy', 'Jack', 'Rachel')",
        "ambiguous_queries": [
            "SELECT Movies.Title FROM Movies WHERE (Movies.Genre = 'Horror' OR Movies.Genre = 'Thriller') AND Movies.Budget = '20 million USD'",
            "SELECT Movies.Title FROM Movies WHERE Movies.Genre = 'Horror' OR Movies.Genre = 'Thriller' AND Movies.Budget = '20 million USD'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"horrors and thrillers with a $20M budget\": [\"thrillers with a $20M budget and horrors with a $20M budget\", \"thrillers with a $20M budget and horrors\"]}"
        },
        "clarification_context": "\"horrors and thrillers with a $20M budget\" refers to \"thrillers with a $20M budget and horrors with a $20M budget\"",
        "clear_ambiguity": "{\"horrors and thrillers with a $20M budget\": \"thrillers with a $20M budget and horrors with a $20M budget\"}",
        "gold_query": "SELECT Movies.Title FROM Movies WHERE (Movies.Genre = 'Horror' OR Movies.Genre = 'Thriller') AND Movies.Budget = '20 million USD'"
    },
    {
        "index": 1160,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_mental_health_careers/attachment_2tab_val_mental_health_careers.sqlite",
        "question": "Display psychologists and psychiatrists affiliated with Harmony Wellness Center.",
        "schema_without_content": "Psychologists : id, name, specialty, experience_years, clinic | Psychiatrists : id, name, specialty, experience_years, clinic | Jobs : id, title, description, salary, start_date, end_date, status | Applicants : id, first_name, last_name, email, phone_number, job_id | Clinics : id, name, address, city, state, zipcode",
        "schema_with_content": "Psychologists : id (2, 1), name ('Dr. Jane Smith', 'Dr. John Doe'), specialty ('Child & Adolescent', 'Cognitive Behavioral Therapy'), experience_years (10, 7), clinic ('Mental Health Solutions', 'Harmony Wellness Center') | Psychiatrists : id (2, 1), name ('Dr. Alice Brown', 'Dr. Bob Johnson'), specialty ('Geriatric', 'General Adult'), experience_years (8, 9), clinic ('Harmony Wellness Center', 'Mental Health Associates') | Jobs : id (1, 2), title ('Psychologist', 'Psychiatrist'), description ('Diagnosing and treating mental disorders.', 'Providing therapy to children and adolescents.'), salary (60000, 80000), start_date ('2023-01-01', '2023-01-01'), end_date ('2023-12-31', '2023-12-31'), status ('Open', 'Open') | Applicants : id (1, 2), first_name ('Jane', 'John'), last_name ('Doe', 'Smith'), email ('john.doe@example.com', 'jane.smith@example.com'), phone_number ('555-123-4567', '555-987-6543'), job_id (1, 1) | Clinics : id (2, 1), name ('Mental Health Solutions', 'Harmony Wellness Center'), address ('123 Main St', '456 Elm St'), city ('Anytown', 'Another City'), state ('NY', 'CA'), zipcode ('12345', '67890')",
        "ambiguous_queries": [
            "SELECT Psychologists.name FROM Psychologists JOIN Clinics ON Psychologists.clinic = Clinics.name WHERE Clinics.name = 'Harmony Wellness Center' UNION SELECT Psychiatrists.name FROM Psychiatrists JOIN Clinics ON Psychiatrists.clinic = Clinics.name WHERE Clinics.name = 'Harmony Wellness Center'",
            "SELECT Psychologists.name FROM Psychologists JOIN Clinics ON Psychologists.clinic = Clinics.name UNION SELECT Psychiatrists.name FROM Psychiatrists JOIN Clinics ON Psychiatrists.clinic = Clinics.name WHERE Clinics.name = 'Harmony Wellness Center'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"psychologists and psychiatrists affiliated with Harmony Wellness Center\": [\"psychiatrists affiliated with Harmony Wellness Center and psychologists affiliated with Harmony Wellness Center\", \"psychiatrists affiliated with Harmony Wellness Center and psychologists\"]}"
        },
        "clarification_context": "\"psychologists and psychiatrists affiliated with Harmony Wellness Center\" refers to \"psychiatrists affiliated with Harmony Wellness Center and psychologists affiliated with Harmony Wellness Center\"",
        "clear_ambiguity": "{\"psychologists and psychiatrists affiliated with Harmony Wellness Center\": \"psychiatrists affiliated with Harmony Wellness Center and psychologists affiliated with Harmony Wellness Center\"}",
        "gold_query": "SELECT Psychologists.name FROM Psychologists JOIN Clinics ON Psychologists.clinic = Clinics.name WHERE Clinics.name = 'Harmony Wellness Center' UNION SELECT Psychiatrists.name FROM Psychiatrists JOIN Clinics ON Psychiatrists.clinic = Clinics.name WHERE Clinics.name = 'Harmony Wellness Center'"
    },
    {
        "index": 1161,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_musician/attachment_2tab_ref_musician.sqlite",
        "question": "Display country singers and bluegrass singers who play the piano.",
        "schema_without_content": "Instruments : id, instrumentName | CountrySingers : id, singerName, country, foreignKey | BluegrassSingers : id, singerName, bluegrassStyle, foreignKey | Albums : id, albumTitle, releaseYear | AlbumTracks : id, trackNumber, title, duration | SingsOnAlbum : id, singerId, albumId",
        "schema_with_content": "Instruments : id (1, 2), instrumentName ('Guitar', 'Piano') | CountrySingers : id (1, 2), singerName ('John Doe', 'Jane Smith'), country ('USA', 'Canada'), foreignKey (2, 1) | BluegrassSingers : id (1, 2), singerName ('Tom Brown', 'Emily White'), bluegrassStyle (1, 0), foreignKey (1, 2) | Albums : id (2, 1), albumTitle ('The Best of Me', 'My First Album'), releaseYear (2000, 2010) | AlbumTracks : id (1, 2), trackNumber (2, 1), title ('Track 1', 'Track 2'), duration ('3:30', '3:00') | SingsOnAlbum : id (1, 4, 3), singerId (2, 3, 1), albumId (2, 1, 2)",
        "ambiguous_queries": [
            "SELECT CountrySingers.singername FROM Instruments JOIN CountrySingers ON Instruments.id = CountrySingers.foreignKey WHERE Instruments.instrumentName = 'Piano' UNION SELECT BluegrassSingers.singername FROM Instruments JOIN BluegrassSingers ON Instruments.id = BluegrassSingers.foreignKey WHERE Instruments.instrumentName = 'Piano'",
            "SELECT CountrySingers.singername FROM Instruments JOIN CountrySingers ON Instruments.id = CountrySingers.foreignKey UNION SELECT BluegrassSingers.singername FROM Instruments JOIN BluegrassSingers ON Instruments.id = BluegrassSingers.foreignKey WHERE Instruments.instrumentName = 'Piano'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"country singers and bluegrass singers who play the piano\": [\"bluegrass singers who play the piano and country singers who play the piano\", \"bluegrass singers who play the piano and country singers\"]}"
        },
        "clarification_context": "\"country singers and bluegrass singers who play the piano\" refers to \"bluegrass singers who play the piano and country singers\"",
        "clear_ambiguity": "{\"country singers and bluegrass singers who play the piano\": \"bluegrass singers who play the piano and country singers\"}",
        "gold_query": "SELECT CountrySingers.singername FROM Instruments JOIN CountrySingers ON Instruments.id = CountrySingers.foreignKey UNION SELECT BluegrassSingers.singername FROM Instruments JOIN BluegrassSingers ON Instruments.id = BluegrassSingers.foreignKey WHERE Instruments.instrumentName = 'Piano'"
    },
    {
        "index": 1162,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_val_genre4/attachment_1tab_val_genre4.sqlite",
        "question": "Show blockbusters and indie films that were screened at Sundance.",
        "schema_without_content": "Directors : DirectorID, Name, BirthDate, Country | Actors : ActorID, Name, DateOfBirth, Nationality | Producers : ProducerID, Name, CompanyName, ContactInfo | Roles : RoleID, MovieTitle, CharacterName, DirectorID, ProducerID | Movies : MovieID, Title, ReleaseYear, Genre, Rating, FilmFestival, Budget, BoxOffice, DirectorID, ProducerID",
        "schema_with_content": "Directors : DirectorID (4, 3, 5), Name ('Ava DuVernay', 'Martin Scorsese', 'Quentin Tarantino'), BirthDate ('1963-03-27', '1982-08-24', '1942-11-22'), Country ('United States', 'United States', 'United Kingdom') | Actors : ActorID (1, 3, 5), Name ('Leonardo DiCaprio', 'Jennifer Lawrence', 'Meryl Streep'), DateOfBirth ('1965-04-04', '1949-06-22', '1990-08-15'), Nationality ('United States', 'Israel', 'United States') | Producers : ProducerID (5, 4, 1), Name ('Jason Blum', 'Barbara Broccoli', 'Frank Marshall'), CompanyName ('Amblin Entertainment', 'Marvel Studios', 'EON Productions'), ContactInfo ('jason@blumhouse.com', 'kevin@marvelstudios.com', 'barbara@eonproductions.com') | Roles : RoleID (3, 5, 2), MovieTitle ('A Wrinkle in Time', 'Interstellar', 'Inception'), CharacterName ('Cobb', 'Colin Sullivan', 'Meg Murry'), DirectorID (4, 3, 1), ProducerID (3, 4, 1) | Movies : MovieID (4, 2, 3), Title ('Dunkirk', 'Titanic', 'Inception'), ReleaseYear (1997, 2006, 2017), Genre ('Blockbuster', 'Blockbuster', 'Indie Film'), Rating ('PG-13', 'PG-13', 'R'), FilmFestival ('Sundance Film Festival', 'Cannes Film Festival', 'Sundance Film Festival'), Budget (8, 30, 160), BoxOffice (2202, 330, 527), DirectorID (1, 1), ProducerID (4, 3, 1)",
        "ambiguous_queries": [
            "SELECT Movies.Title FROM Movies WHERE (Movies.Genre = 'Blockbuster' OR Movies.Genre = 'Indie Film') AND Movies.FilmFestival = 'Sundance Film Festival'",
            "SELECT Movies.Title FROM Movies WHERE Movies.Genre = 'Blockbuster' OR Movies.Genre = 'Indie Film' AND Movies.FilmFestival = 'Sundance Film Festival'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"blockbusters and indie films that were screened at Sundance\": [\"indie films that were screened at Sundance and blockbusters that were screened at Sundance\", \"indie films that were screened at Sundance and blockbusters\"]}"
        },
        "clarification_context": "\"blockbusters and indie films that were screened at Sundance\" refers to \"indie films that were screened at Sundance and blockbusters\"",
        "clear_ambiguity": "{\"blockbusters and indie films that were screened at Sundance\": \"indie films that were screened at Sundance and blockbusters\"}",
        "gold_query": "SELECT Movies.Title FROM Movies WHERE Movies.Genre = 'Blockbuster' OR Movies.Genre = 'Indie Film' AND Movies.FilmFestival = 'Sundance Film Festival'"
    },
    {
        "index": 1163,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_team_sports/attachment_1tab_ref_team_sports.sqlite",
        "question": "List all the football players and rugby players who play at the intermediate level.",
        "schema_without_content": "Team_Type : id, TypeName | Sports : id, SportName | Players : id, Name, Age, TeamTypeId, SportId | FitnessLevels : id, LevelName | PlayerStats : id, PlayerId, FitnessLevelId, StatsText",
        "schema_with_content": "Team_Type : id (1, 2, 3), TypeName ('Youth', 'Club', 'National') | Sports : id (2, 1), SportName ('Football', 'Rugby') | Players : id (1, 5, 2), Name ('Charlie White', 'Jane Smith', 'Alice Brown'), Age (30, 28, 26), TeamTypeId (1, 1, 1), SportId (1, 1, 2) | FitnessLevels : id (2, 3, 1), LevelName ('Elite', 'Intermediate', 'Beginner') | PlayerStats : id (5, 1, 4), PlayerId (4, 2, 3), FitnessLevelId (1, 3, 1), StatsText ('Below average stats', 'Above average stats', 'Impressive stats')",
        "ambiguous_queries": [
            "SELECT Players.Name FROM Sports JOIN Players ON Sports.id = Players.SportId JOIN PlayerStats ON Players.id = PlayerStats.PlayerId JOIN FitnessLevels ON PlayerStats.FitnessLevelId = FitnessLevels.id WHERE (Sports.SportName = 'Football' OR Sports.SportName = 'Rugby') AND FitnessLevels.LevelName = 'Intermediate'",
            "SELECT Players.Name FROM Sports JOIN Players ON Sports.id = Players.SportId JOIN PlayerStats ON Players.id = PlayerStats.PlayerId JOIN FitnessLevels ON PlayerStats.FitnessLevelId = FitnessLevels.id WHERE Sports.SportName = 'Football' OR Sports.SportName = 'Rugby' AND FitnessLevels.LevelName = 'Intermediate'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"football players and rugby players who play at the intermediate level\": [\"rugby players who play at the intermediate level and football players who play at the intermediate level\", \"rugby players who play at the intermediate level and football players\"]}"
        },
        "clarification_context": "\"football players and rugby players who play at the intermediate level\" refers to \"rugby players who play at the intermediate level and football players\"",
        "clear_ambiguity": "{\"football players and rugby players who play at the intermediate level\": \"rugby players who play at the intermediate level and football players\"}",
        "gold_query": "SELECT Players.Name FROM Sports JOIN Players ON Sports.id = Players.SportId JOIN PlayerStats ON Players.id = PlayerStats.PlayerId JOIN FitnessLevels ON PlayerStats.FitnessLevelId = FitnessLevels.id WHERE Sports.SportName = 'Football' OR Sports.SportName = 'Rugby' AND FitnessLevels.LevelName = 'Intermediate'"
    },
    {
        "index": 1164,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_val_film_industry_company/attachment_1tab_val_film_industry_company.sqlite",
        "question": "Show all the production companies and distribution companies with 500 employees.",
        "schema_without_content": "Companies : id, Name, Film_Industry_Type, Number_Of_Employees, Annual_Revenue, Founded | Films : id, Title, Director_Name, Production_Companies, Distribution_Companies, Release_Date, Running_Time, Genre, Box_Office_Earnings | Directors : id, Name, Birth_Place, Years_Experience | Producers : id, Name, Birth_Place, Total_Movies_Produced | Actors : id, First_Name, Last_Name, Date_of_Birth, Nationality",
        "schema_with_content": "Companies : id (2, 4, 3), Name ('Global Distribs', 'Small Screen', 'Big Studios'), Film_Industry_Type ('Distribution Company', 'Production Company', 'Distribution Company'), Number_Of_Employees (500, 500, 300), Annual_Revenue (765432123.0, 123456789.0, 543212345.0), Founded ('2015-01-01', '2005-01-01', '2010-01-01') | Films : id (1, 2), Title ('Blockbuster Movie', 'Art House Film'), Director_Name ('John Doe', 'Jane Smith'), Production_Companies ('Big Studios', 'Little Movies'), Distribution_Companies ('Global Distribs', 'Small Screen'), Release_Date ('2021-06-01', '2021-01-01'), Running_Time (120, 90), Genre ('Action', 'Drama'), Box_Office_Earnings (100000000.0, 5000000.0) | Directors : id (2, 1), Name ('Jane Smith', 'John Doe'), Birth_Place ('New York, USA', 'London, UK'), Years_Experience (20, 15) | Producers : id (2, 1), Name ('Alice Johnson', 'Bob Brown'), Birth_Place ('Toronto, Canada', 'Los Angeles, USA'), Total_Movies_Produced (10, 15) | Actors : id (1, 2), First_Name ('Tom', 'Meryl'), Last_Name ('Hanks', 'Streep'), Date_of_Birth ('1949-06-22', '1956-07-09'), Nationality ('USA', 'USA')",
        "ambiguous_queries": [
            "SELECT Companies.Name FROM Companies WHERE (Companies.Film_Industry_Type = 'Production Company' OR Companies.Film_Industry_Type = 'Distribution Company') AND Companies.Number_Of_Employees = 500",
            "SELECT Companies.Name FROM Companies WHERE Companies.Film_Industry_Type = 'Production Company' OR Companies.Film_Industry_Type = 'Distribution Company' AND Companies.Number_Of_Employees = 500"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"production companies and distribution companies with 500 employees\": [\"distribution companies with 500 employees and production companies with 500 employees\", \"distribution companies with 500 employees and production companies\"]}"
        },
        "clarification_context": "\"production companies and distribution companies with 500 employees\" refers to \"distribution companies with 500 employees and production companies\"",
        "clear_ambiguity": "{\"production companies and distribution companies with 500 employees\": \"distribution companies with 500 employees and production companies\"}",
        "gold_query": "SELECT Companies.Name FROM Companies WHERE Companies.Film_Industry_Type = 'Production Company' OR Companies.Film_Industry_Type = 'Distribution Company' AND Companies.Number_Of_Employees = 500"
    },
    {
        "index": 1165,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_val_genre1/attachment_2tab_val_genre1.sqlite",
        "question": "Show action movies and adventure movies with Leonardo DiCaprio.",
        "schema_without_content": "Action_Movies : id, Title, Director, ReleaseYear, Stars | Adventure_Movies : id, Title, Director, ReleaseYear, Stars | SciFi_Movies : id, Title, Director, ReleaseYear, Stars | Animated_Movies : id, Title, Studio, ReleaseYear, Stars | Horror_Movies : id, Title, Director, ReleaseYear, Stars | Comedy_Movies : id, Title, Director, ReleaseYear, Stars",
        "schema_with_content": "Action_Movies : id (2, 5, 3), Title ('The Bourne Identity', 'Inception', 'Mission Impossible'), Director ('Christopher Nolan', 'Doug Liman', 'Brian De Palma'), ReleaseYear (2015, 2002, 2010), Stars ('Matt Damon', 'Tom Cruise', 'Keanu Reeves') | Adventure_Movies : id (5, 4, 1), Title ('Titanic', 'Indiana Jones and the Raiders of the Lost Ark', 'Jurassic Park'), Director ('James Cameron', 'Steven Spielberg', 'James Cameron'), ReleaseYear (1997, 2001, 1981), Stars ('Sam Worthington', 'Leonardo DiCaprio', 'Harrison Ford') | SciFi_Movies : id (2, 4, 1), Title ('Interstellar', 'Star Wars Episode IV - A New Hope', 'Blade Runner'), Director ('Robert Zemeckis', 'Ridley Scott', 'Christopher Nolan'), ReleaseYear (1977, 1979, 2014), Stars ('Michael J. Fox', 'Mark Hamill', 'Sigourney Weaver') | Animated_Movies : id (4, 1, 3), Title ('Frozen', 'Shrek', 'Toy Story'), Studio ('Walt Disney Animation Studios', 'Walt Disney Animation Studios', 'Aardman Animations'), ReleaseYear (1995, 2013, 2016), Stars ('Ginnifer Goodwin', 'Mike Myers', 'Kristen Bell') | Horror_Movies : id (4, 3, 5), Title ('The Shining', 'It Follows', 'Psycho'), Director ('William Friedkin', 'David Robert Mitchell', 'Stanley Kubrick'), ReleaseYear (2014, 2017, 1980), Stars ('Anthony Perkins', 'Ellen Burstyn', 'Daniel Kaluuya') | Comedy_Movies : id (1, 4, 3), Title ('Monty Python and the Holy Grail', 'Superbad', 'Airplane!'), Director ('Paul Feig', 'Terry Gilliam & Terry Jones', 'Jim Abrahams, David Zucker & Jerry Zucker'), ReleaseYear (2008, 2011, 2007), Stars ('Graham Chapman', 'Leslie Nielsen', 'Will Ferrell')",
        "ambiguous_queries": [
            "SELECT Action_Movies.title FROM Action_Movies WHERE Action_Movies.Stars = 'Leonardo DiCaprio' UNION SELECT Adventure_Movies.title FROM Adventure_Movies WHERE Adventure_Movies.Stars = 'Leonardo DiCaprio'",
            "SELECT Action_Movies.title FROM Action_Movies UNION SELECT Adventure_Movies.title FROM Adventure_Movies WHERE Adventure_Movies.Stars = 'Leonardo DiCaprio'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"action movies and adventure movies with Leonardo DiCaprio\": [\"adventure movies with Leonardo DiCaprio and action movies with Leonardo DiCaprio\", \"adventure movies with Leonardo DiCaprio and action movies\"]}"
        },
        "clarification_context": "\"action movies and adventure movies with Leonardo DiCaprio\" refers to \"adventure movies with Leonardo DiCaprio and action movies\"",
        "clear_ambiguity": "{\"action movies and adventure movies with Leonardo DiCaprio\": \"adventure movies with Leonardo DiCaprio and action movies\"}",
        "gold_query": "SELECT Action_Movies.title FROM Action_Movies UNION SELECT Adventure_Movies.title FROM Adventure_Movies WHERE Adventure_Movies.Stars = 'Leonardo DiCaprio'"
    },
    {
        "index": 1166,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_entertainment_media/attachment_1tab_ref_entertainment_media.sqlite",
        "question": "Show films and novels released in 2020.",
        "schema_without_content": "Genre : id, name | MediaType : id, typeName | EntertainmentItem : id, title, releaseYear, genreId, mediaTypeId | Author : id, firstName, lastName | Novel : id, authorId, publicationYear | Film : id, director, filmId",
        "schema_with_content": "Genre : id (5, 4, 2), name ('Adventure', 'Drama', 'Fantasy') | MediaType : id (2, 1), typeName ('Film', 'Novel') | EntertainmentItem : id (2, 3, 1), title ('Novel2', 'Film2', 'Novel1'), releaseYear (2020, 2021, 2020), genreId (2, 1, 4), mediaTypeId (2, 1, 2) | Author : id (2, 1), firstName ('John', 'Jane'), lastName ('Doe', 'Smith') | Novel : id (2, 1), authorId (2, 1), publicationYear (2021, 2020) | Film : id (2, 1), director ('Director2', 'Director1'), filmId (1, 2)",
        "ambiguous_queries": [
            "SELECT EntertainmentItem.title FROM MediaType JOIN EntertainmentItem ON MediaType.id = EntertainmentItem.mediaTypeId WHERE (MediaType.typeName = 'Film' OR MediaType.typeName = 'Novel') AND EntertainmentItem.releaseYear = 2020",
            "SELECT EntertainmentItem.title FROM MediaType JOIN EntertainmentItem ON MediaType.id = EntertainmentItem.mediaTypeId WHERE MediaType.typeName = 'Film' OR MediaType.typeName = 'Novel' AND EntertainmentItem.releaseYear = 2020"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"films and novels released in 2020\": [\"novels released in 2020 and films released in 2020\", \"novels released in 2020 and films\"]}"
        },
        "clarification_context": "\"films and novels released in 2020\" refers to \"novels released in 2020 and films\"",
        "clear_ambiguity": "{\"films and novels released in 2020\": \"novels released in 2020 and films\"}",
        "gold_query": "SELECT EntertainmentItem.title FROM MediaType JOIN EntertainmentItem ON MediaType.id = EntertainmentItem.mediaTypeId WHERE MediaType.typeName = 'Film' OR MediaType.typeName = 'Novel' AND EntertainmentItem.releaseYear = 2020"
    },
    {
        "index": 1167,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_crime_fiction/attachment_1tab_val_crime_fiction.sqlite",
        "question": "Provide me with the mysteries and thrillers from Warner Bros studio.",
        "schema_without_content": "Movie : id, title, releaseDate, Crime_Fiction, Studio, directorId | Director : id, name, birthYear | Actor : id, firstName, lastName, dateOfBirth | Cast : movieId, actorId, role | Genre : id, genreText | MovieGenre : movieId, genreId",
        "schema_with_content": "Movie : id (3, 4, 2), title ('MovieA', 'MovieD', 'MovieB'), releaseDate ('2000-01-01', '2000-01-01', '2000-01-01'), Crime_Fiction ('Thriller', 'Comedy', 'Thriller'), Studio ('Warner Bros', 'Universal Studios', 'Warner Bros'), directorId (1, 3, 2) | Director : id (1, 4, 2), name ('John Doe', 'Jane Smith', 'Emma Wilson'), birthYear (1960, 1995, 1990) | Actor : id (3, 5, 2), firstName ('Leonardo', 'Mark', 'Scarlett'), lastName ('Hanks', 'DiCaprio', 'Washington'), dateOfBirth ('1967-11-22', '1974-11-11', '1984-11-22') | Cast : movieId (2, 1, 2), actorId (6, 2, 5), role ('Supporting Role', 'Supporting Role', 'Supporting Role') | Genre : id (4, 2, 1), genreText ('Family', 'Adventure', 'Drama') | MovieGenre : movieId (3, 1, 4), genreId (5, 1, 2)",
        "ambiguous_queries": [
            "SELECT Movie.Title FROM Movie WHERE (Movie.Crime_Fiction = 'Mystery' OR Movie.Crime_Fiction = 'Thriller') AND Movie.Studio = 'Warner Bros'",
            "SELECT Movie.Title FROM Movie WHERE Movie.Crime_Fiction = 'Mystery' OR Movie.Crime_Fiction = 'Thriller' AND Movie.Studio = 'Warner Bros'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"mysteries and thrillers from Warner Bros studio\": [\"thrillers from Warner Bros studio and mysteries from Warner Bros studio\", \"thrillers from Warner Bros studio and mysteries\"]}"
        },
        "clarification_context": "\"mysteries and thrillers from Warner Bros studio\" refers to \"thrillers from Warner Bros studio and mysteries\"",
        "clear_ambiguity": "{\"mysteries and thrillers from Warner Bros studio\": \"thrillers from Warner Bros studio and mysteries\"}",
        "gold_query": "SELECT Movie.Title FROM Movie WHERE Movie.Crime_Fiction = 'Mystery' OR Movie.Crime_Fiction = 'Thriller' AND Movie.Studio = 'Warner Bros'"
    },
    {
        "index": 1168,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_ref_mental_health_careers/attachment_2tab_ref_mental_health_careers.sqlite",
        "question": "Show psychologists and psychiatrists of Harmony Wellness Center.",
        "schema_without_content": "Clinics : id, name | Psychologists : id, clinic_id, name, specialty | Psychiatrists : id, clinic_id, name, specialty | Patients : id, psychologist_id, psychiatrist_id, name, age, diagnosis | Appointments : id, patient_id, date, notes | TreatmentPlans : id, appointment_id, plan, status",
        "schema_with_content": "Clinics : id (2, 1), name ('Harmony Wellness Center', 'Sunny Hills Mental Health') | Psychologists : id (2, 4, 1), clinic_id (2, 2, 1), name ('Dr. Alice Green', 'Dr. Jane Smith', 'Dr. Bob White'), specialty ('Gestalt Therapy', 'Dialectical Behavior Therapy', 'Existential Psychotherapy') | Psychiatrists : id (2, 1, 3), clinic_id (2, 1, 1), name ('Dr. David Gold', 'Dr. Emily Gray', 'Dr. Laura Black'), specialty ('Adult Psychiatry', 'Child and Adolescent Psychiatry', 'Forensic Psychiatry') | Patients : id (1, 5, 3), psychologist_id (1, 2, 3), psychiatrist_id (1, 2, 4), name ('John Doe', 'Jane Roe', 'Emily Davis'), age (40, 28, 35), diagnosis ('Anxiety Disorder', 'Depression', 'Schizophrenia') | Appointments : id (5, 3, 2), patient_id (2, 4, 1), date ('2022-09-15 10:00:00', '2022-09-17 10:30:00', '2022-09-18 14:00:00'), notes ('Follow-up', 'First session', 'Initial assessment') | TreatmentPlans : id (1, 5, 3), appointment_id (3, 2, 1), plan ('Gestalt Therapy plan', 'Dialectical Behavior Therapy plan', 'Cognitive Behavioral Therapy plan'), status ('Ongoing', 'In progress', 'Completed')",
        "ambiguous_queries": [
            "SELECT Psychologists.name FROM Clinics JOIN Psychologists ON Clinics.id = Psychologists.clinic_id WHERE Clinics.name = 'Harmony Wellness Center' UNION SELECT Psychiatrists.name FROM Clinics JOIN Psychiatrists ON Clinics.id = Psychiatrists.clinic_id WHERE Clinics.name = 'Harmony Wellness Center'",
            "SELECT Psychologists.name FROM Clinics JOIN Psychologists ON Clinics.id = Psychologists.clinic_id UNION SELECT Psychiatrists.name FROM Clinics JOIN Psychiatrists ON Clinics.id = Psychiatrists.clinic_id WHERE Clinics.name = 'Harmony Wellness Center'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"psychologists and psychiatrists of Harmony Wellness Center\": [\"psychiatrists of Harmony Wellness Center and psychologists of Harmony Wellness Center\", \"psychiatrists of Harmony Wellness Center and psychologists\"]}"
        },
        "clarification_context": "\"psychologists and psychiatrists of Harmony Wellness Center\" refers to \"psychiatrists of Harmony Wellness Center and psychologists\"",
        "clear_ambiguity": "{\"psychologists and psychiatrists of Harmony Wellness Center\": \"psychiatrists of Harmony Wellness Center and psychologists\"}",
        "gold_query": "SELECT Psychologists.name FROM Clinics JOIN Psychologists ON Clinics.id = Psychologists.clinic_id UNION SELECT Psychiatrists.name FROM Clinics JOIN Psychiatrists ON Clinics.id = Psychiatrists.clinic_id WHERE Clinics.name = 'Harmony Wellness Center'"
    },
    {
        "index": 1169,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
        "question": "List blockbusters and indie films which played at Sundance film festival.",
        "schema_without_content": "Blockbusters : id, title, releaseYear, director, budget, boxOffice, film_festival_id | Indies : id, title, releaseYear, director, budget, gross, film_festival_id | Festivals : id, name | Directors : id, name, birthDate, nationality | Actors : id, name, dateOfBirth, gender, ethnicity | Roles : actor_id, film_id, characterName | Action_Films : id, title, releaseYear, genre, runtime, language, film_festival_id",
        "schema_with_content": "Blockbusters : id (2, 1), title ('Avatar', 'Titanic'), releaseYear (2009, 1997), director ('James Cameron', 'James Cameron'), budget (200.0, 237.0), boxOffice (2747.0, 2202.0), film_festival_id (2, 1) | Indies : id (1, 2), title ('Little Miss Sunshine', 'Juno'), releaseYear (2006, 2007), director ('Jonathan Dayton', 'Jason Reitman'), budget (6.0, 8.0), gross (231.0, 60.0), film_festival_id (2, 1) | Festivals : id (2, 1), name ('Cannes Film Festival', 'Sundance Film Festival') | Directors : id (1, 2), name ('Quentin Tarantino', 'Christopher Nolan'), birthDate ('1963-03-27', '1970-07-30'), nationality ('American', 'English') | Actors : id (2, 1), name ('Jennifer Lawrence', 'Leonardo DiCaprio'), dateOfBirth ('1990-08-15', '1974-11-11'), gender ('Female', 'Male'), ethnicity ('Italian/German/Irish', 'England') | Roles : actor_id (2, 1, 1), film_id (2, 1, 1), characterName ('Howard St John', 'Rachel McDougall', 'Harvey Dent') | Action_Films : id (2, 1), title ('The Dark Knight', 'Inception'), releaseYear (2010, 2008), genre ('Action/Science Fiction', 'Action/Crime'), runtime (152, 148), language ('English', 'English'), film_festival_id (2, 1)",
        "ambiguous_queries": [
            "SELECT Blockbusters.title FROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id WHERE Festivals.name = 'Sundance Film Festival' UNION SELECT Indies.title FROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id WHERE Festivals.name = 'Sundance Film Festival'",
            "SELECT Blockbusters.title FROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id UNION SELECT Indies.title FROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id WHERE Festivals.name = 'Sundance Film Festival'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"blockbusters and indie films which played at Sundance film festival\": [\"indie films which played at Sundance film festival and blockbusters which played at Sundance film festival\", \"indie films which played at Sundance film festival and blockbusters\"]}"
        },
        "clarification_context": "\"blockbusters and indie films which played at Sundance film festival\" refers to \"indie films which played at Sundance film festival and blockbusters\"",
        "clear_ambiguity": "{\"blockbusters and indie films which played at Sundance film festival\": \"indie films which played at Sundance film festival and blockbusters\"}",
        "gold_query": "SELECT Blockbusters.title FROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id UNION SELECT Indies.title FROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id WHERE Festivals.name = 'Sundance Film Festival'"
    },
    {
        "index": 1170,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_street_performer/attachment_2tab_ref_street_performer.sqlite",
        "question": "List magicians and mimes in Central Park, New York.",
        "schema_without_content": "Locations : id, LocationName | Shows : id, ShowTitle, StartTime, EndTime, LocationID, MagicianID, MimeID | Tickets : id, PurchaserName, ShowID, SeatNumber, Price | Reviews : id, ReviewerName, Rating, Comment, ShowID | Magicians : id, Name, Age, Street_Location | Mimes : id, Name, Age, Street_Location",
        "schema_with_content": "Locations : id (1, 2, 3), LocationName ('Central Park, New York', 'Bryant Park, New York', 'Times Square, New York') | Shows : id (3, 5, 2), ShowTitle ('Laughter and Wonder', 'The Magic of Harry Houdini', 'The World of Marvel'), StartTime ('2022-11-05 19:00:00', '2022-11-01 19:00:00', '2022-11-02 19:00:00'), EndTime ('2022-11-01 21:00:00', '2022-11-05 21:00:00', '2022-11-04 21:00:00'), LocationID (2, 3, 4), MagicianID (4, 3, 2), MimeID (4, 5, 6) | Tickets : id (1, 4, 3), PurchaserName ('Bob Brown', 'Alice Johnson', 'John Doe'), ShowID (1, 3, 1), SeatNumber (2, 2, 1), Price (25, 30, 25) | Reviews : id (4, 5, 3), ReviewerName ('John Doe', 'Jane Smith', 'Emma Wilson'), Rating (4, 3, 2), Comment ('Not my cup of tea.', 'Good performance but could have been better.', 'Enjoyed the magic tricks!'), ShowID (1, 3, 2) | Magicians : id (5, 2, 3), Name ('Criss Angel', 'Dynamo', 'Penn & Teller'), Age (47, 39, 130), Street_Location ('3', '1', '1') | Mimes : id (5, 4, 2), Name ('Whitey McConnell', 'Charlie Chaplin', 'Eric Jan De Groot'), Age (68, 70, 88), Street_Location ('2', '2', '3')",
        "ambiguous_queries": [
            "SELECT Magicians.name FROM Locations JOIN Magicians ON Locations.id = Magicians.Street_Location WHERE Locations.LocationName = 'Central Park, New York' UNION SELECT Mimes.name FROM Locations JOIN Mimes ON Locations.id = Mimes.Street_Location WHERE Locations.LocationName = 'Central Park, New York'",
            "SELECT Magicians.name FROM Locations JOIN Magicians ON Locations.id = Magicians.Street_Location UNION SELECT Mimes.name FROM Locations JOIN Mimes ON Locations.id = Mimes.Street_Location WHERE Locations.LocationName = 'Central Park, New York'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"magicians and mimes in Central Park, New York\": [\"mimes in Central Park, New York and magicians in Central Park, New York\", \"mimes in Central Park, New York and magicians\"]}"
        },
        "clarification_context": "\"magicians and mimes in Central Park, New York\" refers to \"mimes in Central Park, New York and magicians in Central Park, New York\"",
        "clear_ambiguity": "{\"magicians and mimes in Central Park, New York\": \"mimes in Central Park, New York and magicians in Central Park, New York\"}",
        "gold_query": "SELECT Magicians.name FROM Locations JOIN Magicians ON Locations.id = Magicians.Street_Location WHERE Locations.LocationName = 'Central Park, New York' UNION SELECT Mimes.name FROM Locations JOIN Mimes ON Locations.id = Mimes.Street_Location WHERE Locations.LocationName = 'Central Park, New York'"
    },
    {
        "index": 1171,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_personal_computing_devices/attachment_1tab_val_personal_computing_devices.sqlite",
        "question": "Who has tablets and laptops with Windows 10?",
        "schema_without_content": "Students : StudentID, Personal_Computing_Devices, Operating_System, EmailAddress, FullName | Instructors : InstructorID, FirstName, LastName, Department | Courses : CourseID, Title, Description, InstructorID | Enrollments : EnrollmentID, StudentID, CourseID, Grade",
        "schema_with_content": "Students : StudentID (6, 5, 3), Personal_Computing_Devices ('Desktop', 'Tablet', 'Phone'), Operating_System ('macOS', 'Windows 10', 'Windows 10'), EmailAddress ('david.green@example.com', 'amy.black@example.com', 'john.doe@example.com'), FullName ('David Green', 'Mike Brown', 'Jane Smith') | Instructors : InstructorID (6, 3, 2), FirstName ('Associate', 'Assistant', 'Professor'), LastName ('Johnson', 'Adams', 'Martin'), Department ('Geography', 'English Literature', 'Mathematics') | Courses : CourseID (1, 6, 4), Title ('World History', 'Calculus I', 'General Physics'), Description ('Introduction to Calculus', 'Survey of British Literature since 1900', 'Introduction to Classical Mechanics'), InstructorID (2, 3, 4) | Enrollments : EnrollmentID (5, 6, 1), StudentID (3, 6, 5), CourseID (4, 6, 3), Grade ('A', 'A', 'B')",
        "ambiguous_queries": [
            "SELECT Students.FullName FROM Students WHERE (Students.Personal_Computing_Devices = 'Tablet' OR Students.Personal_Computing_Devices = 'Laptop') AND Students.Operating_System = 'Windows 10'",
            "SELECT Students.FullName FROM Students WHERE Students.Personal_Computing_Devices = 'Tablet' OR Students.Personal_Computing_Devices = 'Laptop' AND Students.Operating_System = 'Windows 10'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"tablets and laptops with Windows 10\": [\"laptops with Windows 10 and tablets with Windows 10\", \"laptops with Windows 10 and tablets\"]}"
        },
        "clarification_context": "\"tablets and laptops with Windows 10\" refers to \"laptops with Windows 10 and tablets with Windows 10\"",
        "clear_ambiguity": "{\"tablets and laptops with Windows 10\": \"laptops with Windows 10 and tablets with Windows 10\"}",
        "gold_query": "SELECT Students.FullName FROM Students WHERE (Students.Personal_Computing_Devices = 'Tablet' OR Students.Personal_Computing_Devices = 'Laptop') AND Students.Operating_System = 'Windows 10'"
    },
    {
        "index": 1172,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_inflight_amenities/attachment_2tab_val_inflight_amenities.sqlite",
        "question": "Display onboard services and inflight entertainments available on Boeing 787 Dreamliner.",
        "schema_without_content": "Airports : id, name, country, city | Airlines : id, name, headquartered_at | Aircrafts : id, model, max_passengers, max_range, airline_id | OnboardServices : id, service_name, description, aircraft_id | InflightEntertainments : id, entertainment_name, description, aircraft_id",
        "schema_with_content": "Airports : id (1, 2), name ('Schiphol', 'Heathrow'), country ('Netherlands', 'UK'), city ('Amsterdam', 'London') | Airlines : id (2, 1), name ('BA', 'KLM'), headquartered_at (2, 1) | Aircrafts : id (2, 1), model ('Boeing 787 Dreamliner', 'Airbus A380'), max_passengers (525, 300), max_range (7639, 8000), airline_id (2, 1) | OnboardServices : id (1, 2), service_name ('Meal Service', 'Snack Service'), description ('A variety of meals served on board.', 'Light snacks available for purchase.'), aircraft_id (2, 1) | InflightEntertainments : id (1, 2), entertainment_name ('Games Library', 'Movie Selection'), description ('Variety of games available for play.', 'Wide range of movies available for viewing.'), aircraft_id (2, 1)",
        "ambiguous_queries": [
            "SELECT OnboardServices.service_name as name FROM OnboardServices JOIN Aircrafts ON OnboardServices.aircraft_id = Aircrafts.id WHERE Aircrafts.model = 'Boeing 787 Dreamliner' UNION SELECT InflightEntertainments.entertainment_name as name FROM InflightEntertainments JOIN Aircrafts ON InflightEntertainments.aircraft_id = Aircrafts.id WHERE Aircrafts.model = 'Boeing 787 Dreamliner'",
            "SELECT OnboardServices.service_name as name FROM OnboardServices JOIN Aircrafts ON OnboardServices.aircraft_id = Aircrafts.id UNION SELECT InflightEntertainments.entertainment_name as name FROM InflightEntertainments JOIN Aircrafts ON InflightEntertainments.aircraft_id = Aircrafts.id WHERE Aircrafts.model = 'Boeing 787 Dreamliner'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"onboard services and inflight entertainments available on Boeing 787 Dreamliner\": [\"inflight entertainments available on Boeing 787 Dreamliner and onboard services available on Boeing 787 Dreamliner\", \"inflight entertainments available on Boeing 787 Dreamliner and onboard services\"]}"
        },
        "clarification_context": "\"onboard services and inflight entertainments available on Boeing 787 Dreamliner\" refers to \"inflight entertainments available on Boeing 787 Dreamliner and onboard services available on Boeing 787 Dreamliner\"",
        "clear_ambiguity": "{\"onboard services and inflight entertainments available on Boeing 787 Dreamliner\": \"inflight entertainments available on Boeing 787 Dreamliner and onboard services available on Boeing 787 Dreamliner\"}",
        "gold_query": "SELECT OnboardServices.service_name as name FROM OnboardServices JOIN Aircrafts ON OnboardServices.aircraft_id = Aircrafts.id WHERE Aircrafts.model = 'Boeing 787 Dreamliner' UNION SELECT InflightEntertainments.entertainment_name as name FROM InflightEntertainments JOIN Aircrafts ON InflightEntertainments.aircraft_id = Aircrafts.id WHERE Aircrafts.model = 'Boeing 787 Dreamliner'"
    },
    {
        "index": 1173,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_ref_music_performer/attachment_1tab_ref_music_performer.sqlite",
        "question": "Provide all the jazz musicians and rock guitarists who have been performing for 10 years.",
        "schema_without_content": "Genres : genre_id, name | Albums : id, title, release_date, artist_id | Songs : id, title, length, album_id | Artist_genre : artist_id, genre_id, years_in_industry | Artists : id, name",
        "schema_with_content": "Genres : genre_id (1, 2), name ('Jazz', 'Rock') | Albums : id (2, 3, 4), title ('Classical Jazz', 'Guitar Masterpieces', 'Jazz Collection'), release_date ('2022-01-01', '2022-07-01', '2022-08-01'), artist_id (1, 3, 4) | Songs : id (3, 2, 4), title ('Cool Blues', 'Slow Ballad', 'Fast Riff'), length (4.2, 3.0, 4.7), album_id (3, 1, 4) | Artist_genre : artist_id (2, 3, 1), genre_id (2, 2, 1), years_in_industry (30, 10, 10) | Artists : id (4, 3, 1), name ('Emily Davis', 'John Doe', 'Tom Brown')",
        "ambiguous_queries": [
            "SELECT Artists.name FROM Artists JOIN Artist_genre ON Artists.id = Artist_genre.artist_id JOIN Genres ON Genres.genre_id = Artist_genre.genre_id WHERE (Genres.name = 'Jazz' OR Genres.name = 'Rock') AND Artist_genre.years_in_industry = 10",
            "SELECT Artists.name FROM Artists JOIN Artist_genre ON Artists.id = Artist_genre.artist_id JOIN Genres ON Genres.genre_id = Artist_genre.genre_id WHERE Genres.name = 'Jazz' OR Genres.name = 'Rock' AND Artist_genre.years_in_industry = 10"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"jazz musicians and rock guitarists who have been performing for 10 years\": [\"rock guitarists who have been performing for 10 years and jazz musicians who have been performing for 10 years\", \"rock guitarists who have been performing for 10 years and jazz musicians\"]}"
        },
        "clarification_context": "\"jazz musicians and rock guitarists who have been performing for 10 years\" refers to \"rock guitarists who have been performing for 10 years and jazz musicians who have been performing for 10 years\"",
        "clear_ambiguity": "{\"jazz musicians and rock guitarists who have been performing for 10 years\": \"rock guitarists who have been performing for 10 years and jazz musicians who have been performing for 10 years\"}",
        "gold_query": "SELECT Artists.name FROM Artists JOIN Artist_genre ON Artists.id = Artist_genre.artist_id JOIN Genres ON Genres.genre_id = Artist_genre.genre_id WHERE (Genres.name = 'Jazz' OR Genres.name = 'Rock') AND Artist_genre.years_in_industry = 10"
    },
    {
        "index": 1174,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_sequential_art/attachment_1tab_val_sequential_art.sqlite",
        "question": "Provide all comic books and graphic novels published by BOOM Studios.",
        "schema_without_content": "Authors : AuthorID, Name | Publisher : PublisherID, Name | Comics : ComicID, Title, SequentialArt, ReleaseDate, PublisherId, AuthorId | Movie : MovieID, Title, DirectorName, ReleaseDate",
        "schema_with_content": "Authors : AuthorID (2, 1, 5), Name ('Bob Brown', 'Charlie White', 'John Doe') | Publisher : PublisherID (5, 1, 4), Name ('BOOM Studios', 'Image Comics', 'Dark Horse Comics') | Comics : ComicID (2, 5, 6), Title ('Superman', 'Saga', 'Y: The Last Man'), SequentialArt ('Graphic Novel', 'Comic Book', 'Comic Book'), ReleaseDate ('2019-02-28', '2019-06-20', '2019-09-02'), PublisherId (1, 1, 4), AuthorId (6, 3, 5) | Movie : MovieID (3, 4, 2), Title ('Inception', 'The Dark Knight', 'Interstellar'), DirectorName ('Christopher Nolan', 'David Fincher', 'Christopher Nolan'), ReleaseDate ('2000-06-22', '2010-07-16', '2008-07-18')",
        "ambiguous_queries": [
            "SELECT Comics.Title FROM Comics JOIN Publisher ON Comics.PublisherId = Publisher.PublisherID WHERE (Comics.SequentialArt = 'Comic Book' OR Comics.SequentialArt = 'Graphic Novel') AND Publisher.name = 'BOOM Studios'",
            "SELECT Comics.Title FROM Comics JOIN Publisher ON Comics.PublisherId = Publisher.PublisherID WHERE Comics.SequentialArt = 'Comic Book' OR Comics.SequentialArt = 'Graphic Novel' AND Publisher.name = 'BOOM Studios'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"comic books and graphic novels published by BOOM Studios\": [\"graphic novels published by BOOM Studios and comic books published by BOOM Studios\", \"graphic novels published by BOOM Studios and comic books\"]}"
        },
        "clarification_context": "\"comic books and graphic novels published by BOOM Studios\" refers to \"graphic novels published by BOOM Studios and comic books published by BOOM Studios\"",
        "clear_ambiguity": "{\"comic books and graphic novels published by BOOM Studios\": \"graphic novels published by BOOM Studios and comic books published by BOOM Studios\"}",
        "gold_query": "SELECT Comics.Title FROM Comics JOIN Publisher ON Comics.PublisherId = Publisher.PublisherID WHERE (Comics.SequentialArt = 'Comic Book' OR Comics.SequentialArt = 'Graphic Novel') AND Publisher.name = 'BOOM Studios'"
    },
    {
        "index": 1175,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_airport_facilities/attachment_2tab_val_airport_facilities.sqlite",
        "question": "Who are the staff working at the baggage claims and security checks at terminal 2?",
        "schema_without_content": "Flights : FlightID, Airline, Destination, DepartureTime, ArrivalTime | Passengers : PassengerID, Name, Age, Nationality | Bookings : BookingID, PassengerID, FlightID, Class, Price | BaggageClaims : ClaimID, HandlerName, FlightID, Location | SecurityChecks : CheckpointID, OfficerName, FlightID, Location, Time",
        "schema_with_content": "Flights : FlightID (1, 3, 5), Airline ('United Airlines', 'Southwest Airlines', 'American Airlines'), Destination ('Dallas', 'Miami', 'New York'), DepartureTime ('10:30 AM', '5:00 AM', '7:00 AM'), ArrivalTime ('12:00 PM', '9:00 AM', '11:00 AM') | Passengers : PassengerID (3, 4, 1), Name ('Alice Johnson', 'Emily Davis', 'John Doe'), Age (25, 45, 35), Nationality ('Germany', 'UK', 'Canada') | Bookings : BookingID (4, 1, 3), PassengerID (4, 3, 1), FlightID (4, 5, 3), Class ('First Class', 'Economy', 'Business'), Price (1000, 500, 250) | BaggageClaims : ClaimID (1, 3, 5), HandlerName ('Patricia Taylor', 'James Wilson', 'Sarah Miller'), FlightID (3, 4, 1), Location ('Terminal 4', 'Terminal 2', 'Terminal 1') | SecurityChecks : CheckpointID (1, 2, 3), OfficerName ('Jennifer Lee', 'David Smith', 'Maria Garcia'), FlightID (4, 1, 2), Location ('Terminal 3', 'Terminal 4', 'Terminal 1'), Time ('4:00 AM', '8:00 AM', '6:00 AM')",
        "ambiguous_queries": [
            "SELECT BaggageClaims.HandlerName as name FROM BaggageClaims WHERE BaggageClaims.Location = 'Terminal 2' UNION SELECT SecurityChecks.OfficerName as name FROM SecurityChecks WHERE SecurityChecks.Location = 'Terminal 2'",
            "SELECT BaggageClaims.HandlerName as name FROM BaggageClaims UNION SELECT SecurityChecks.OfficerName as name FROM SecurityChecks WHERE SecurityChecks.Location = 'Terminal 2'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"baggage claims and security checks at terminal 2\": [\"security checks at terminal 2 and baggage claims at terminal 2\", \"security checks at terminal 2 and baggage claims\"]}"
        },
        "clarification_context": "\"baggage claims and security checks at terminal 2\" refers to \"security checks at terminal 2 and baggage claims\"",
        "clear_ambiguity": "{\"baggage claims and security checks at terminal 2\": \"security checks at terminal 2 and baggage claims\"}",
        "gold_query": "SELECT BaggageClaims.HandlerName as name FROM BaggageClaims UNION SELECT SecurityChecks.OfficerName as name FROM SecurityChecks WHERE SecurityChecks.Location = 'Terminal 2'"
    },
    {
        "index": 1176,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_ref_transaction_types/attachment_1tab_ref_transaction_types.sqlite",
        "question": "List the amounts of all payments and remittance transfers from LMN Bank.",
        "schema_without_content": "Transaction_Types : TypeID, TypeName | Banks : BankID, Name | Customers : CustomerID, FirstName, LastName, DateOfBirth, PhoneNumber, EmailAddress, BankID | Accounts : AccountID, Number, OpenDate, Balance, CustomerID | Transaction_Details : DetailsID, TransactionID, AdditionalInfo | Transactions : TransactionID, Amount, DateAndTime, TypeID, FromAccountId, ToAccountId",
        "schema_with_content": "Transaction_Types : TypeID (3, 5, 4), TypeName ('Remittance Transfer', 'Deposit', 'Transfer') | Banks : BankID (5, 2, 1), Name ('JKL Bank', 'ABC Bank', 'XYZ Bank') | Customers : CustomerID (5, 2, 1), FirstName ('John', 'Charlie', 'Alice'), LastName ('Johnson', 'Miller', 'Williams'), DateOfBirth ('2005-05-05', '1980-01-01', '1990-02-02'), PhoneNumber ('5555555555', '0987654321', '5555555555'), EmailAddress ('bob@example.com', 'jane@example.com', 'charlie@example.com'), BankID (3, 2, 1) | Accounts : AccountID (5, 1, 4), Number ('7890123456', '9876543210', '6543217890'), OpenDate ('2021-01-01', '2021-05-05', '2021-04-04'), Balance (4000.0, 3000.0, 1000.0), CustomerID (5, 1, 3) | Transaction_Details : DetailsID (1, 2, 3), TransactionID (5, 1, 3), AdditionalInfo ('Additional info for transaction 1', 'Additional info for transaction 2', 'Additional info for transaction 3') | Transactions : TransactionID (3, 2, 1), Amount (800.0, 600.0, 500.0), DateAndTime ('2024-03-13 14:46:32', '2024-03-13 14:46:32', '2024-03-13 14:46:32'), TypeID (1, 2, 3), FromAccountId (3, 1, 2), ToAccountId (1, 4, 4)",
        "ambiguous_queries": [
            "SELECT Transactions.Amount FROM Transactions JOIN Accounts ON Transactions.ToAccountId = Accounts.AccountID JOIN Customers ON Accounts.CustomerID = Customers.CustomerID JOIN Banks ON Customers.BankID = Banks.BankID JOIN Transaction_Types ON Transaction_Types.Typeid = Transactions.Typeid WHERE (Transaction_Types.TypeName = 'Payment' OR Transaction_Types.TypeName = 'Remittance Transfer') AND Banks.Name = 'LMN Bank'",
            "SELECT Transactions.Amount FROM Transactions JOIN Accounts ON Transactions.ToAccountId = Accounts.AccountID JOIN Customers ON Accounts.CustomerID = Customers.CustomerID JOIN Banks ON Customers.BankID = Banks.BankID JOIN Transaction_Types ON Transaction_Types.Typeid = Transactions.Typeid WHERE Transaction_Types.TypeName = 'Payment' OR Transaction_Types.TypeName = 'Remittance Transfer' AND Banks.Name = 'LMN Bank'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"all payments and remittance transfers from LMN Bank\": [\"remittance transfers from LMN Bank and all payments from LMN Bank\", \"remittance transfers from LMN Bank and all payments\"]}"
        },
        "clarification_context": "\"all payments and remittance transfers from LMN Bank\" refers to \"remittance transfers from LMN Bank and all payments from LMN Bank\"",
        "clear_ambiguity": "{\"all payments and remittance transfers from LMN Bank\": \"remittance transfers from LMN Bank and all payments from LMN Bank\"}",
        "gold_query": "SELECT Transactions.Amount FROM Transactions JOIN Accounts ON Transactions.ToAccountId = Accounts.AccountID JOIN Customers ON Accounts.CustomerID = Customers.CustomerID JOIN Banks ON Customers.BankID = Banks.BankID JOIN Transaction_Types ON Transaction_Types.Typeid = Transactions.Typeid WHERE (Transaction_Types.TypeName = 'Payment' OR Transaction_Types.TypeName = 'Remittance Transfer') AND Banks.Name = 'LMN Bank'"
    },
    {
        "index": 1177,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_performance_event/attachment_1tab_val_performance_event.sqlite",
        "question": "What events have dance recitals and talent shows been held in room 101?",
        "schema_without_content": "Artists : ArtistID, Name, Age, Genre | Events : EventID, Name, Date, Location | Performances : PerformanceID, EventID, Type, AudienceSize, PerformanceEvent, AuditionRoom | Participants : ParticipantID, ArtistID, PerformanceID, Role",
        "schema_with_content": "Artists : ArtistID (5, 1, 2), Name ('Olivia Brown', 'Emma Jones', 'Michael Johnson'), Age (26, 45, 30), Genre ('Hip Hop', 'Country', 'Electronic') | Events : EventID (2, 5, 3), Name ('Event4', 'Event5', 'Event3'), Date ('2022-09-01', '2022-09-20', '2022-09-05'), Location ('Chicago', 'New York', 'Los Angeles') | Performances : PerformanceID (3, 2, 4), EventID (3, 2, 1), Type ('Gala', 'Competition', 'Concert'), AudienceSize (150, 200, 500), PerformanceEvent ('Talent Show', 'Dance Recital', 'Talent Show'), AuditionRoom ('Room 103', 'Room 101', 'Room 101') | Participants : ParticipantID (4, 2, 1), ArtistID (4, 3, 2), PerformanceID (1, 1, 5), Role ('Dancer', 'Lead Singer', 'Host')",
        "ambiguous_queries": [
            "SELECT Events.Name FROM Performances JOIN Events ON Events.EventID = Performances.EventID WHERE (Performances.PerformanceEvent = 'Dance Recital' OR Performances.PerformanceEvent = 'Talent Show') AND Performances.AuditionRoom = 'Room 101'",
            "SELECT Events.Name FROM Performances JOIN Events ON Events.EventID = Performances.EventID WHERE Performances.PerformanceEvent = 'Dance Recital' OR Performances.PerformanceEvent = 'Talent Show' AND Performances.AuditionRoom = 'Room 101'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"dance recitals and talent shows been held in room 101\": [\"talent shows been held in room 101 and dance recitals been held in room 101\", \"talent shows been held in room 101 and dance recitals\"]}"
        },
        "clarification_context": "\"dance recitals and talent shows been held in room 101\" refers to \"talent shows been held in room 101 and dance recitals been held in room 101\"",
        "clear_ambiguity": "{\"dance recitals and talent shows been held in room 101\": \"talent shows been held in room 101 and dance recitals been held in room 101\"}",
        "gold_query": "SELECT Events.Name FROM Performances JOIN Events ON Events.EventID = Performances.EventID WHERE (Performances.PerformanceEvent = 'Dance Recital' OR Performances.PerformanceEvent = 'Talent Show') AND Performances.AuditionRoom = 'Room 101'"
    },
    {
        "index": 1178,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_investment_company/attachment_1tab_val_investment_company.sqlite",
        "question": "Show all growth equity firms and venture capital trusts with 5M funding.",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName, Email | Accounts : AccountNumber, Balance, CustomerID | InvestmentCompanies : CompanyID, Name, Type, FundingAmount | Transactions : TransactionID, Date, Amount, AccountNumber, CompanyID",
        "schema_with_content": "Customers : CustomerID (1, 5, 4), FirstName ('Alice', 'Jane', 'Tom'), LastName ('Smith', 'Doe', 'Building'), Email ('jane@example.com', 'john@example.com', 'bob@example.com') | Accounts : AccountNumber (4, 1, 5), Balance (7654.32, -543.98, 12345.67), CustomerID (3, 2, 5) | InvestmentCompanies : CompanyID (1, 4, 3), Name ('Elite Private Equity', 'Summit Equity Partners', 'Frontier VC Group'), Type ('Venture Capital Trust', 'Growth Equity Firm', 'Venture Capital Trust'), FundingAmount (7000000.0, 6000000.0, 5000000.0) | Transactions : TransactionID (2, 3, 5), Date ('2024-03-07 22:58:27', '2024-03-07 22:58:27', '2024-03-07 22:58:27'), Amount (-300.0, 1000.0, 700.0), AccountNumber (4, 5, 3), CompanyID (2, 5, 1)",
        "ambiguous_queries": [
            "SELECT InvestmentCompanies.Name FROM InvestmentCompanies WHERE (InvestmentCompanies.Type = 'Growth Equity Firm' OR InvestmentCompanies.Type = 'Venture Capital Trust') AND InvestmentCompanies.FundingAmount = 5000000.0",
            "SELECT InvestmentCompanies.Name FROM InvestmentCompanies WHERE InvestmentCompanies.Type = 'Growth Equity Firm' OR InvestmentCompanies.Type = 'Venture Capital Trust' AND InvestmentCompanies.FundingAmount = 5000000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"growth equity firms and venture capital trusts with 5M funding\": [\"venture capital trusts with 5M funding and growth equity firms with 5M funding\", \"venture capital trusts with 5M funding and growth equity firms\"]}"
        },
        "clarification_context": "\"growth equity firms and venture capital trusts with 5M funding\" refers to \"venture capital trusts with 5M funding and growth equity firms\"",
        "clear_ambiguity": "{\"growth equity firms and venture capital trusts with 5M funding\": \"venture capital trusts with 5M funding and growth equity firms\"}",
        "gold_query": "SELECT InvestmentCompanies.Name FROM InvestmentCompanies WHERE InvestmentCompanies.Type = 'Growth Equity Firm' OR InvestmentCompanies.Type = 'Venture Capital Trust' AND InvestmentCompanies.FundingAmount = 5000000.0"
    },
    {
        "index": 1179,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
        "question": "Show journalists and editors who speak English and Spanish.",
        "schema_without_content": "Journalists : id, name, email, phoneNumber, languages | Editors : id, name, email, phoneNumber, languages | Publications : id, title, publicationDate | Articles : id, title, content, publishDate, editorId | ArticleAuthors : articleId, journalistId | Subscriptions : id, subscriberEmail, subscriptionType",
        "schema_with_content": "Journalists : id (2, 1), name ('John Doe', 'Jane Smith'), email ('jane@example.com', 'john@example.com'), phoneNumber ('+9876543210', '+1234567890'), languages ('English and Spanish', 'German and French') | Editors : id (1, 2), name ('Michael Johnson', 'Emily Davis'), email ('michael@example.com', 'emily@example.com'), phoneNumber ('+0987654321', '+1234567890'), languages ('English and Spanish', 'Italian and Portuguese') | Publications : id (1, 2), title ('The Daily News', 'Weekly Times'), publicationDate ('2021-01-01', '2021-01-15') | Articles : id (2, 1), title ('Article 2', 'Article 1'), content ('Content of Article 2', 'Content of Article 1'), publishDate ('2021-01-15', '2021-01-01'), editorId (2, 1) | ArticleAuthors : articleId (1, 2), journalistId (2, 1) | Subscriptions : id (1, 2), subscriberEmail ('subscription2@example.com', 'subscription1@example.com'), subscriptionType ('Premium', 'Standard')",
        "ambiguous_queries": [
            "SELECT Journalists.name FROM Journalists WHERE Journalists.languages = 'English and Spanish' UNION SELECT Editors.name FROM Editors WHERE Editors.languages = 'English and Spanish'",
            "SELECT Journalists.name FROM Journalists UNION SELECT Editors.name FROM Editors WHERE Editors.languages = 'English and Spanish'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"journalists and editors who speak English and Spanish\": [\"editors who speak English and Spanish and journalists who speak English and Spanish\", \"editors who speak English and Spanish and journalists\"]}"
        },
        "clarification_context": "\"journalists and editors who speak English and Spanish\" refers to \"editors who speak English and Spanish and journalists\"",
        "clear_ambiguity": "{\"journalists and editors who speak English and Spanish\": \"editors who speak English and Spanish and journalists\"}",
        "gold_query": "SELECT Journalists.name FROM Journalists UNION SELECT Editors.name FROM Editors WHERE Editors.languages = 'English and Spanish'"
    },
    {
        "index": 1180,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_1tab_val_special_care_passengers/attachment_1tab_val_special_care_passengers.sqlite",
        "question": "Show me unaccompanied minor and tailored assisted passengers that were assisted by Clare Allen.",
        "schema_without_content": "Airports : id, name, city, country | Flights : flightNumber, departureAirportId, arrivalAirportId, departureTime, arrivalTime | Passengers : passengerId, dateOfBirth, isMinor, FullName | Requirements : requirementId, passengerId, description, assistant",
        "schema_with_content": "Airports : id (4, 2, 3), name ('London Heathrow', 'Tokyo Haneda', 'New York JFK'), city ('Dubai', 'Frankfurt', 'London'), country ('USA', 'UK', 'Japan') | Flights : flightNumber (3, 4, 5), departureAirportId (1, 3, 5), arrivalAirportId (2, 4, 4), departureTime ('2023-07-01 12:00:00', '2023-08-01 14:00:00', '2023-10-01 08:00:00'), arrivalTime ('2023-10-01 16:00:00', '2023-09-01 23:00:00', '2023-06-01 18:00:00') | Passengers : passengerId (5, 2, 1), dateOfBirth ('1988-04-04', '1991-03-03', '1992-05-05'), isMinor (0, 0, 0), FullName ('Michael Williams', 'Emily Johnson', 'Cathy Lee') | Requirements : requirementId (8, 9, 5), passengerId (3, 8, 4), description ('Oxygen tank needed on board', 'Special dietary needs', 'Hearing aid support'), assistant ('Clare Allen', 'Mark Taylor', 'Nancy Davis')",
        "ambiguous_queries": [
            "SELECT Passengers.FullName FROM Requirements JOIN Passengers ON Passengers.PassengerID = Requirements.PassengerID WHERE (Requirements.description = 'Unaccompanied minor' OR Requirements.description = 'Tailored assistance request') AND Requirements.assistant = 'Clare Allen'",
            "SELECT Passengers.FullName FROM Requirements JOIN Passengers ON Passengers.PassengerID = Requirements.PassengerID WHERE Requirements.description = 'Unaccompanied minor' OR Requirements.description = 'Tailored assistance request' AND Requirements.assistant = 'Clare Allen'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"unaccompanied minor and tailored assisted passengers that were assisted by Clare Allen\": [\"tailored assisted passengers that were assisted by Clare Allen and unaccompanied minor that were assisted by Clare Allen\", \"tailored assisted passengers that were assisted by Clare Allen and unaccompanied minor\"]}"
        },
        "clarification_context": "\"unaccompanied minor and tailored assisted passengers that were assisted by Clare Allen\" refers to \"tailored assisted passengers that were assisted by Clare Allen and unaccompanied minor that were assisted by Clare Allen\"",
        "clear_ambiguity": "{\"unaccompanied minor and tailored assisted passengers that were assisted by Clare Allen\": \"tailored assisted passengers that were assisted by Clare Allen and unaccompanied minor that were assisted by Clare Allen\"}",
        "gold_query": "SELECT Passengers.FullName FROM Requirements JOIN Passengers ON Passengers.PassengerID = Requirements.PassengerID WHERE (Requirements.description = 'Unaccompanied minor' OR Requirements.description = 'Tailored assistance request') AND Requirements.assistant = 'Clare Allen'"
    },
    {
        "index": 1181,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_book_genre/attachment_1tab_val_book_genre.sqlite",
        "question": "Show all science fiction books and romance books published in 2018.",
        "schema_without_content": "Authors : AuthorID, Name, BirthDate, Country | Publishers : PublisherID, Name, Address, YearEstablished | Genres : GenreID, Description | Books : BookID, Title, PageCount, Book_Genre, Year_Of_Publication, AuthorID, PublisherID, GenreID",
        "schema_with_content": "Authors : AuthorID (4, 5, 3), Name ('Michael Johnson', 'David Brown', 'John Smith'), BirthDate ('1976-03-01', '1980-01-05', '1985-12-15'), Country ('USA', 'UK', 'Australia') | Publishers : PublisherID (1, 4, 5), Name ('Macmillan Publishers', 'HarperCollins', 'Random House'), Address ('London, UK', 'NYC, USA', 'Paris, France'), YearEstablished (1843, 1942, 1919) | Genres : GenreID (4, 2, 5), Description ('Thriller genre revolves around fast pacing plot filled with unexpected twists.', 'Non-fiction genre deals with real life facts, events or people.', 'Fantasy genre consists of works based on myths and legends.') | Books : BookID (3, 2, 5), Title ('An Eternal Promise', 'Into The Stars', 'The Science of Tomorrow'), PageCount (350, 290, 285), Book_Genre ('Fantasy Book', 'Romance Book', 'Thriller Book'), Year_Of_Publication (2021, 2021, 2020), AuthorID (8, 3, 4), PublisherID (4, 1, 2), GenreID (1, 6, 5)",
        "ambiguous_queries": [
            "SELECT Books.title FROM Books WHERE (Books.Book_Genre = 'Science Fiction Book' OR Books.Book_Genre = 'Romance Book') AND Books.Year_Of_Publication = 2018",
            "SELECT Books.title FROM Books WHERE Books.Book_Genre = 'Science Fiction Book' OR Books.Book_Genre = 'Romance Book' AND Books.Year_Of_Publication = 2018"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"science fiction books and romance books published in 2018\": [\"romance books published in 2018 and science fiction books published in 2018\", \"romance books published in 2018 and science fiction books\"]}"
        },
        "clarification_context": "\"science fiction books and romance books published in 2018\" refers to \"romance books published in 2018 and science fiction books\"",
        "clear_ambiguity": "{\"science fiction books and romance books published in 2018\": \"romance books published in 2018 and science fiction books\"}",
        "gold_query": "SELECT Books.title FROM Books WHERE Books.Book_Genre = 'Science Fiction Book' OR Books.Book_Genre = 'Romance Book' AND Books.Year_Of_Publication = 2018"
    },
    {
        "index": 1182,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
        "question": "List economist positions and statistician positions that require financial analysis.",
        "schema_without_content": "Companies : CompanyID, Name, Location | Roles : RoleID, RoleName | DataTypes : DataTypeID, DataTypeName | Jobs : JobID, Title, Description, PostedDate, CompanyID, ROLEID, DATAID | Applicants : ApplicantID, FirstName, LastName, Email | ApplicationJobs : ApplicationID, ApplicantID, JobID, SubmissionDate, Status",
        "schema_with_content": "Companies : CompanyID (2, 1), Name ('ABC Corp.', 'XYZ Inc.'), Location ('New York', 'San Francisco') | Roles : RoleID (1, 2), RoleName ('Statistician', 'Economist') | DataTypes : DataTypeID (2, 1), DataTypeName ('Financial Analysis', 'Demographics') | Jobs : JobID (4, 1, 2), Title ('Statistical Analyst', 'Senior Economic Analyst', 'Senior Statistical Analyst'), Description ('Analyze statistical data...', 'Analyze economic data...', 'Analyze statistical data...'), PostedDate ('2023-01-01', '2023-01-02', '2023-01-01'), CompanyID (1, 1, 2), ROLEID (2, 1, 2), DATAID (2, 2, 1) | Applicants : ApplicantID (2, 1), FirstName ('John', 'Jane'), LastName ('Doe', 'Smith'), Email ('john.doe@example.com', 'jane.smith@example.com') | ApplicationJobs : ApplicationID (2, 1), ApplicantID (2, 1), JobID (1, 2), SubmissionDate ('2023-01-02', '2023-01-01'), Status ('Pending', 'Pending')",
        "ambiguous_queries": [
            "SELECT Jobs.title FROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID WHERE (Roles.RoleName = 'Economist' OR Roles.RoleName = 'Statistician') AND DataTypes.DataTypeName = 'Financial Analysis'",
            "SELECT Jobs.title FROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID WHERE Roles.RoleName = 'Economist' OR Roles.RoleName = 'Statistician' AND DataTypes.DataTypeName = 'Financial Analysis'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"economist positions and statistician positions that require financial analysis\": [\"statistician positions that require financial analysis and economist positions that require financial analysis\", \"statistician positions that require financial analysis and economist positions\"]}"
        },
        "clarification_context": "\"economist positions and statistician positions that require financial analysis\" refers to \"statistician positions that require financial analysis and economist positions\"",
        "clear_ambiguity": "{\"economist positions and statistician positions that require financial analysis\": \"statistician positions that require financial analysis and economist positions\"}",
        "gold_query": "SELECT Jobs.title FROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID WHERE Roles.RoleName = 'Economist' OR Roles.RoleName = 'Statistician' AND DataTypes.DataTypeName = 'Financial Analysis'"
    },
    {
        "index": 1183,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_val_information_gathering_methods/attachment_2tab_val_information_gathering_methods.sqlite",
        "question": "Show all the press conferences and interviews where a politician was participating.",
        "schema_without_content": "Articles : id, Title, Author, Publication_Date, Content | Sources : id, Name, Type, Contact_Info | Keywords : id, Word | Article_Keywords : article_id, keyword_id | Interviews : id, Title, Date, Location, Interviewer, Participant_Type | Press_Conferences : id, Title, Date, Location, Participant_Type, Speaker1, Speaker2",
        "schema_with_content": "Articles : id (2, 1), Title ('Article Title 2', 'Article Title 1'), Author ('Author 1', 'Author 2'), Publication_Date ('2023-01-06', '2023-01-05'), Content ('Content of Article 1', 'Content of Article 2') | Sources : id (2, 1), Name ('Source Name 2', 'Source Name 1'), Type ('Newspaper', 'Magazine'), Contact_Info ('source2@email.com; +0987654321', 'source@email.com; +1234567890') | Keywords : id (4, 3, 5), Word ('Keyword 3', 'Keyword 2', 'Keyword 5') | Article_Keywords : article_id (2, 1, 2), keyword_id (1, 4, 5) | Interviews : id (2, 1), Title ('Interview Title 2', 'Interview Title 1'), Date ('2023-01-03', '2023-01-04'), Location ('Studio B', 'Studio A'), Interviewer ('Journalist Mike Brown', 'Journalist Susan White'), Participant_Type ('Politician', 'Business Leader') | Press_Conferences : id (2, 1), Title ('Conference Title 2', 'Conference Title 1'), Date ('2023-01-01', '2023-01-02'), Location ('City Hall', 'White House'), Participant_Type ('Politician', 'Government Official'), Speaker1 ('Mayor Jane Smith', 'President John Doe'), Speaker2 ()",
        "ambiguous_queries": [
            "SELECT Press_Conferences.Title FROM Press_Conferences WHERE Press_Conferences.Participant_Type = 'Politician' UNION SELECT Interviews.Title FROM Interviews WHERE Interviews.Participant_Type = 'Politician'",
            "SELECT Press_Conferences.Title FROM Press_Conferences UNION SELECT Interviews.Title FROM Interviews WHERE Interviews.Participant_Type = 'Politician'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"press conferences and interviews where a politician was participating\": [\"interviews where a politician was participating and press conferences where a politician was participating\", \"interviews where a politician was participating and press conferences\"]}"
        },
        "clarification_context": "\"press conferences and interviews where a politician was participating\" refers to \"interviews where a politician was participating and press conferences where a politician was participating\"",
        "clear_ambiguity": "{\"press conferences and interviews where a politician was participating\": \"interviews where a politician was participating and press conferences where a politician was participating\"}",
        "gold_query": "SELECT Press_Conferences.Title FROM Press_Conferences WHERE Press_Conferences.Participant_Type = 'Politician' UNION SELECT Interviews.Title FROM Interviews WHERE Interviews.Participant_Type = 'Politician'"
    },
    {
        "index": 1184,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_ref_learning_environments/attachment_1tab_ref_learning_environments.sqlite",
        "question": "Display classrooms and virtual rooms with a capacity of 30.",
        "schema_without_content": "Students : StudentID, FirstName, LastName, Age, Email | LearningEnvironments : EnvironmentID, Value | Enrollments : EnrollmentID, StudentID, ClassroomID, StartDate, EndDate | Classrooms : ClassroomID, Name, Capacity, TypeOfEnvironment",
        "schema_with_content": "Students : StudentID (2, 5, 3), FirstName ('Jane', 'Emily', 'David'), LastName ('Doe', 'Smith', 'Green'), Age (24, 22, 21), Email ('emily.white@example.com', 'david.green@example.com', 'jane.smith@example.com') | LearningEnvironments : EnvironmentID (2, 1), Value ('Virtual Room', 'Classroom') | Enrollments : EnrollmentID (3, 4, 1), StudentID (5, 3, 1), ClassroomID (4, 3, 1), StartDate ('2022-08-26', '2022-09-01', '2022-08-26'), EndDate ('2022-12-17', '2022-12-17', '2022-12-31') | Classrooms : ClassroomID (3, 5, 1), Name ('Physical Room E', 'Room A', 'Virtual Room C'), Capacity (15, 20, 25), TypeOfEnvironment (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Classrooms.Name FROM LearningEnvironments JOIN Classrooms ON LearningEnvironments.Environmentid = Classrooms.TypeOfEnvironment WHERE (LearningEnvironments.Value = 'Classroom' OR LearningEnvironments.Value = 'Virtual Room') AND Classrooms.Capacity = 30",
            "SELECT Classrooms.Name FROM LearningEnvironments JOIN Classrooms ON LearningEnvironments.Environmentid = Classrooms.TypeOfEnvironment WHERE LearningEnvironments.Value = 'Classroom' OR LearningEnvironments.Value = 'Virtual Room' AND Classrooms.Capacity = 30"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"classrooms and virtual rooms with a capacity of 30\": [\"virtual rooms with a capacity of 30 and classrooms with a capacity of 30\", \"virtual rooms with a capacity of 30 and classrooms\"]}"
        },
        "clarification_context": "\"classrooms and virtual rooms with a capacity of 30\" refers to \"virtual rooms with a capacity of 30 and classrooms\"",
        "clear_ambiguity": "{\"classrooms and virtual rooms with a capacity of 30\": \"virtual rooms with a capacity of 30 and classrooms\"}",
        "gold_query": "SELECT Classrooms.Name FROM LearningEnvironments JOIN Classrooms ON LearningEnvironments.Environmentid = Classrooms.TypeOfEnvironment WHERE LearningEnvironments.Value = 'Classroom' OR LearningEnvironments.Value = 'Virtual Room' AND Classrooms.Capacity = 30"
    },
    {
        "index": 1185,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_1tab_ref_special_care_passengers/attachment_1tab_ref_special_care_passengers.sqlite",
        "question": "Provide all the unaccompanied minors and people requiring tailored assistance that Claire Allen helps.",
        "schema_without_content": "Flights : FlightID, DepartureTime, ArrivalTime, Origin, Destination | Airports : AirportID, Name, City, Country | Airlines : AirlineID, Name, HeadquartersCity, HomeAirportId | Passengers : PassengerID, DateOfBirth, FullName | Assistants : AssistantID, Name | PassengerAssistanceRequests : RequestID, PassengerID, AssistantID, Type",
        "schema_with_content": "Flights : FlightID (3, 1, 4), DepartureTime ('06:00:00', '18:00:00', '14:00:00'), ArrivalTime ('21:00:00', '09:00:00', '17:00:00'), Origin ('ORD', 'YYZ', 'CDG'), Destination ('ATL', 'DUB', 'LAX') | Airports : AirportID (5, 2, 3), Name ('Charles de Gaulle Airport', \"Chicago O'Hare International Airport\", 'Hong Kong International Airport'), City ('Chicago', 'Hong Kong', 'Paris'), Country ('USA', 'Canada', 'USA') | Airlines : AirlineID (5, 2, 3), Name ('Air France', 'American Airlines', 'Cathay Pacific'), HeadquartersCity ('Fort Worth', 'Chicago', 'Tremblay-en-France'), HomeAirportId (2, 4, 1) | Passengers : PassengerID (2, 4, 1), DateOfBirth ('1985-02-20', '1988-04-05', '1994-05-10'), FullName ('Alice Smith', 'David Brown', 'Bob Johnson') | Assistants : AssistantID (2, 1, 5), Name ('Claire Allen', 'Jack Williams', 'Lucy Jones') | PassengerAssistanceRequests : RequestID (2, 4, 1), PassengerID (1, 4, 5), AssistantID (1, 1, 2), Type ('Unaccompanied Minor', 'Unaccompanied Minor', 'General Assistance')",
        "ambiguous_queries": [
            "SELECT Passengers.FullName FROM PassengerAssistanceRequests JOIN Assistants ON PassengerAssistanceRequests.AssistantID = Assistants.AssistantID JOIN Passengers ON Passengers.PassengerID = PassengerAssistanceRequests.PassengerID WHERE (PassengerAssistanceRequests.Type = 'Unaccompanied Minor' OR PassengerAssistanceRequests.Type = 'Tailored Assistance') AND Assistants.Name = 'Claire Allen'",
            "SELECT Passengers.FullName FROM PassengerAssistanceRequests JOIN Assistants ON PassengerAssistanceRequests.AssistantID = Assistants.AssistantID JOIN Passengers ON Passengers.PassengerID = PassengerAssistanceRequests.PassengerID WHERE PassengerAssistanceRequests.Type = 'Unaccompanied Minor' OR PassengerAssistanceRequests.Type = 'Tailored Assistance' AND Assistants.Name = 'Claire Allen'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"unaccompanied minors and people requiring tailored assistance that Claire Allen helps\": [\"people requiring tailored assistance that Claire Allen helps and unaccompanied minors that Claire Allen helps\", \"people requiring tailored assistance that Claire Allen helps and unaccompanied minors\"]}"
        },
        "clarification_context": "\"unaccompanied minors and people requiring tailored assistance that Claire Allen helps\" refers to \"people requiring tailored assistance that Claire Allen helps and unaccompanied minors that Claire Allen helps\"",
        "clear_ambiguity": "{\"unaccompanied minors and people requiring tailored assistance that Claire Allen helps\": \"people requiring tailored assistance that Claire Allen helps and unaccompanied minors that Claire Allen helps\"}",
        "gold_query": "SELECT Passengers.FullName FROM PassengerAssistanceRequests JOIN Assistants ON PassengerAssistanceRequests.AssistantID = Assistants.AssistantID JOIN Passengers ON Passengers.PassengerID = PassengerAssistanceRequests.PassengerID WHERE (PassengerAssistanceRequests.Type = 'Unaccompanied Minor' OR PassengerAssistanceRequests.Type = 'Tailored Assistance') AND Assistants.Name = 'Claire Allen'"
    },
    {
        "index": 1186,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_ref_academic_courses/attachment_2tab_ref_academic_courses.sqlite",
        "question": "Show engineering classes and design classes which have a project named \"Waste Management System\".",
        "schema_without_content": "Students : StudentID, FirstName, LastName, DateOfBirth | EngineeringClasses : ClassID, ClassName | DesignClasses : ClassID, ClassName | Projects : ProjectID, ProjectName, EngineeringClassId, DesignClassId | EnrolledStudents : StudentID, ProjectID, Grade | CourseEnrollments : StudentID, EngineeringClassId, DesignClassId",
        "schema_with_content": "Students : StudentID (5, 3, 2), FirstName ('John', 'David', 'Emily'), LastName ('Brown', 'Williams', 'Johnson'), DateOfBirth ('1987-02-15', '1990-01-01', '1996-04-10') | EngineeringClasses : ClassID (3, 2, 1), ClassName ('Sustainability Project', 'Material Science', 'Automation') | DesignClasses : ClassID (2, 4, 1), ClassName ('Product Design', 'Urban Planning', 'Industrial Design') | Projects : ProjectID (1, 5, 2), ProjectName ('Autonomous Vehicle', 'Smart Home Devices', 'Green Building'), EngineeringClassId (1, 2, 4), DesignClassId (3, 5, 1) | EnrolledStudents : StudentID (4, 3, 5), ProjectID (1, 3, 4), Grade ('B', 'A', 'C+') | CourseEnrollments : StudentID (3, 5, 1), EngineeringClassId (4, 3, 1), DesignClassId (5, 1, 4)",
        "ambiguous_queries": [
            "SELECT EngineeringClasses.classname FROM Projects JOIN EngineeringClasses ON Projects.EngineeringClassId = EngineeringClasses.ClassID WHERE Projects.ProjectName = 'Waste Management System' UNION SELECT DesignClasses.classname FROM Projects JOIN DesignClasses ON Projects.DesignClassId = DesignClasses.ClassID WHERE Projects.ProjectName = 'Waste Management System'",
            "SELECT EngineeringClasses.classname FROM Projects JOIN EngineeringClasses ON Projects.EngineeringClassId = EngineeringClasses.ClassID UNION SELECT DesignClasses.classname FROM Projects JOIN DesignClasses ON Projects.DesignClassId = DesignClasses.ClassID WHERE Projects.ProjectName = 'Waste Management System'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"engineering classes and design classes which have a project named \\\"Waste Management System\\\"\": [\"design classes which have a project named \\\"Waste Management System\\\" and engineering classes which have a project named \\\"Waste Management System\\\"\", \"design classes which have a project named \\\"Waste Management System\\\" and engineering classes\"]}"
        },
        "clarification_context": "\"engineering classes and design classes which have a project named \"Waste Management System\"\" refers to \"design classes which have a project named \"Waste Management System\" and engineering classes which have a project named \"Waste Management System\"\"",
        "clear_ambiguity": "{\"engineering classes and design classes which have a project named \\\"Waste Management System\\\"\": \"design classes which have a project named \\\"Waste Management System\\\" and engineering classes which have a project named \\\"Waste Management System\\\"\"}",
        "gold_query": "SELECT EngineeringClasses.classname FROM Projects JOIN EngineeringClasses ON Projects.EngineeringClassId = EngineeringClasses.ClassID WHERE Projects.ProjectName = 'Waste Management System' UNION SELECT DesignClasses.classname FROM Projects JOIN DesignClasses ON Projects.DesignClassId = DesignClasses.ClassID WHERE Projects.ProjectName = 'Waste Management System'"
    },
    {
        "index": 1187,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_business_professions/attachment_2tab_val_business_professions.sqlite",
        "question": "Provide sales managers and marketing specialists with a hybrid work arrangement.",
        "schema_without_content": "Sales_Manager : id, name, age, experience, working_arrangement | Marketing_Specialist : id, name, age, experience, working_arrangement | Software_Developer : id, name, age, experience, programming_language | Data_Analyst : id, name, age, experience, software_used | HR_Recruiter : id, name, age, experience, recruitment_strategy",
        "schema_with_content": "Sales_Manager : id (2, 3, 1), name ('Jane Smith', 'Alice Johnson', 'Emily Davis'), age (26, 32, 29), experience (10, 4, 8), working_arrangement ('Remote', 'Onsite', 'Onsite') | Marketing_Specialist : id (2, 5, 1), name ('David Miller', 'Helen Moore', 'Michael Jones'), age (33, 35, 30), experience (3, 5, 7), working_arrangement ('Onsite', 'Hybrid', 'Hybrid') | Software_Developer : id (2, 3, 4), name ('Robert Martin', 'Steven King', 'Daniel Lewis'), age (27, 31, 36), experience (6, 5, 8), programming_language ('C++', 'C#', 'Python') | Data_Analyst : id (5, 3, 2), name ('Charles White', 'Mary Taylor', 'James Jackson'), age (33, 30, 31), experience (5, 4, 8), software_used ('SQL', 'SPSS', 'Tableau') | HR_Recruiter : id (1, 2, 4), name ('Linda Martinez', 'Michelle Green', 'Karen Young'), age (30, 31, 32), experience (6, 7, 10), recruitment_strategy ('Behavioral Interviews', 'Competency Modeling', 'Assessment Centers')",
        "ambiguous_queries": [
            "SELECT Sales_Manager.name FROM Sales_Manager WHERE Sales_Manager.working_arrangement = 'Hybrid' UNION SELECT Marketing_Specialist.name FROM Marketing_Specialist WHERE Marketing_Specialist.working_arrangement = 'Hybrid'",
            "SELECT Sales_Manager.name FROM Sales_Manager UNION SELECT Marketing_Specialist.name FROM Marketing_Specialist WHERE Marketing_Specialist.working_arrangement = 'Hybrid'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"sales managers and marketing specialists with a hybrid work arrangement\": [\"marketing specialists with a hybrid work arrangement and sales managers with a hybrid work arrangement\", \"marketing specialists with a hybrid work arrangement and sales managers\"]}"
        },
        "clarification_context": "\"sales managers and marketing specialists with a hybrid work arrangement\" refers to \"marketing specialists with a hybrid work arrangement and sales managers\"",
        "clear_ambiguity": "{\"sales managers and marketing specialists with a hybrid work arrangement\": \"marketing specialists with a hybrid work arrangement and sales managers\"}",
        "gold_query": "SELECT Sales_Manager.name FROM Sales_Manager UNION SELECT Marketing_Specialist.name FROM Marketing_Specialist WHERE Marketing_Specialist.working_arrangement = 'Hybrid'"
    },
    {
        "index": 1188,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_ref_visual_art/attachment_2tab_ref_visual_art.sqlite",
        "question": "List photographs and paintings being shown at the Museum of Modern Art.",
        "schema_without_content": "Artist : ArtistID, Name | Painting : PaintingID, Title, Year, Description, GalleryId | Photography : PhotoId, Title, Year, Description, GalleryId | Exhibition : ExhibitionId, Name, StartDate, EndDate | PainterOfPaintings : ArtistId, PaintingId | PhotographerOfPhotos : ArtistId, PhotoId | Gallery : GalleryId, Name",
        "schema_with_content": "Artist : ArtistID (5, 4, 1), Name ('Ansel Adams', 'Jackson Pollock', \"Georgia O'Keeffe\") | Painting : PaintingID (4, 3, 2), Title ('Starry Night', 'The Starry Night Express', 'Guernica'), Year (1937, 1889, 1948), Description ('A photograph showcasing the power and beauty of nature.', 'This painting is inspired by Vincent van Gogh’s famous work “Starry Night”.', 'A powerful anti-war painting created by Pablo Picasso after the bombing of Guernica during the Spanish Civil War.'), GalleryId (2, 1, 3) | Photography : PhotoId (5, 3, 2), Title ('Central Park in Winter', 'New York City Skyline', 'Empire State Building at Night'), Year (1950, 1931, 1960), Description ('A breathtaking landscape photograph taken by Ansel Adams.', 'A panoramic view of the New York City skyline.', 'A serene photo of Central Park covered in snow.'), GalleryId (5, 3, 4) | Exhibition : ExhibitionId (5, 2, 1), Name ('Modern Photography Collection', 'Impressionism Art Showcase', 'Abstract Expressionism Art Exhibit'), StartDate ('2021-03-01', '2021-07-01', '2021-05-01'), EndDate ('2021-04-30', '2021-08-31', '2021-10-31') | PainterOfPaintings : ArtistId (2, 3, 4), PaintingId (4, 2, 1) | PhotographerOfPhotos : ArtistId (4, 2, 3), PhotoId (4, 2, 5) | Gallery : GalleryId (1, 4, 5), Name ('Metropolitan Museum of Art', 'MoMA - Museum of Modern Art', 'National Portrait Gallery')",
        "ambiguous_queries": [
            "SELECT Photography.title FROM Gallery JOIN Photography ON Gallery.GalleryId = Photography.GalleryId WHERE Gallery.Name = 'MoMA - Museum of Modern Art' UNION SELECT Painting.title FROM Gallery JOIN Painting ON Gallery.GalleryId = Painting.GalleryId WHERE Gallery.Name = 'MoMA - Museum of Modern Art'",
            "SELECT Photography.title FROM Gallery JOIN Photography ON Gallery.GalleryId = Photography.GalleryId UNION SELECT Painting.title FROM Gallery JOIN Painting ON Gallery.GalleryId = Painting.GalleryId WHERE Gallery.Name = 'MoMA - Museum of Modern Art'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"photographs and paintings being shown at the Museum of Modern Art\": [\"paintings being shown at the Museum of Modern Art and photographs being shown at the Museum of Modern Art\", \"paintings being shown at the Museum of Modern Art and photographs\"]}"
        },
        "clarification_context": "\"photographs and paintings being shown at the Museum of Modern Art\" refers to \"paintings being shown at the Museum of Modern Art and photographs being shown at the Museum of Modern Art\"",
        "clear_ambiguity": "{\"photographs and paintings being shown at the Museum of Modern Art\": \"paintings being shown at the Museum of Modern Art and photographs being shown at the Museum of Modern Art\"}",
        "gold_query": "SELECT Photography.title FROM Gallery JOIN Photography ON Gallery.GalleryId = Photography.GalleryId WHERE Gallery.Name = 'MoMA - Museum of Modern Art' UNION SELECT Painting.title FROM Gallery JOIN Painting ON Gallery.GalleryId = Painting.GalleryId WHERE Gallery.Name = 'MoMA - Museum of Modern Art'"
    },
    {
        "index": 1189,
        "db_id": "Journalism",
        "ambig_type": "attachment",
        "db_file": "attachment/Journalism/attachment_2tab_val_journalist_classifications/attachment_2tab_val_journalist_classifications.sqlite",
        "question": "List singers and editors who received 2000.0.",
        "schema_without_content": "Stringers : ID, Name, Email, Phone_Number, Payment | Editors : ID, Name, Email, Phone_Number, Payment | Articles : ID, Title, Content, EditorID, PublishDate | Readerships : ID, ArticleID, SubscriptionType, StartDate, EndDate | Advertisements : ID, ArticleID, AdTitle, AdDescription, AdImage, DisplayOrder",
        "schema_with_content": "Stringers : ID (2, 1), Name ('John Doe', 'Jane Smith'), Email ('john.doe@example.com', 'jane.smith@example.com'), Phone_Number ('123-456-7890', '098-765-4321'), Payment (3000.0, 2000.0) | Editors : ID (2, 1), Name ('Bob Brown', 'Alice Johnson'), Email ('bob.brown@example.com', 'alice.johnson@example.com'), Phone_Number ('555-123-4567', '555-456-7890'), Payment (3000.0, 2000.0) | Articles : ID (2, 1), Title ('The Impact of Climate Change on Agriculture', 'The Rise of Renewable Energy Sources'), Content ('A detailed analysis...', 'An overview of...'), EditorID (2, 1), PublishDate ('2024-03-13 18:05:57', '2024-03-13 18:05:57') | Readerships : ID (1, 2), ArticleID (1, 2), SubscriptionType ('Monthly', 'Yearly'), StartDate ('2022-01-01', '2022-01-01'), EndDate ('2022-01-31', '2023-01-01') | Advertisements : ID (1, 2), ArticleID (2, 1), AdTitle ('Summer Sale', 'Eco-Friendly Products'), AdDescription ('Up to 50% off on selected items!', 'Discover our range of eco-friendly products...'), AdImage ('image1.jpg', 'image2.jpg'), DisplayOrder (2, 1)",
        "ambiguous_queries": [
            "SELECT Stringers.name FROM Stringers WHERE Stringers.Payment = 2000.0 UNION SELECT Editors.name FROM Editors WHERE Editors.Payment = 2000.0",
            "SELECT Stringers.name FROM Stringers UNION SELECT Editors.name FROM Editors WHERE Editors.Payment = 2000.0"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"singers and editors who received 2000.0\": [\"editors who received 2000.0 and singers who received 2000.0\", \"editors who received 2000.0 and singers\"]}"
        },
        "clarification_context": "\"singers and editors who received 2000.0\" refers to \"editors who received 2000.0 and singers who received 2000.0\"",
        "clear_ambiguity": "{\"singers and editors who received 2000.0\": \"editors who received 2000.0 and singers who received 2000.0\"}",
        "gold_query": "SELECT Stringers.name FROM Stringers WHERE Stringers.Payment = 2000.0 UNION SELECT Editors.name FROM Editors WHERE Editors.Payment = 2000.0"
    },
    {
        "index": 1190,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_1tab_val_film_profession/attachment_1tab_val_film_profession.sqlite",
        "question": "Show directors and producers who have won Oscar.",
        "schema_without_content": "Production : ID, BirthDate, Film_Profession, Award, FullName | Movies : MovieID, Title, ReleaseYear, Genre",
        "schema_with_content": "Production : ID (1, 2, 3), BirthDate ('1975-09-11', '1985-08-10', '1960-07-23'), Film_Profession ('Director', 'Producer', 'Producer'), Award ('Oscar', 'Emmy', 'Golden Globe'), FullName ('Jane Smith', 'Bob White', 'John Doe') | Movies : MovieID (2, 4, 3), Title ('Good Will Hunting', 'Forrest Gump', 'Pulp Fiction'), ReleaseYear (1994, 1997, 1994), Genre ('Crime', 'Drama', 'Drama')",
        "ambiguous_queries": [
            "SELECT Production.FullName FROM Production WHERE (Production.Film_Profession = 'Director' OR Production.Film_Profession = 'Producer') AND Production.Award = 'Oscar'",
            "SELECT Production.FullName FROM Production WHERE Production.Film_Profession = 'Director' OR Production.Film_Profession = 'Producer' AND Production.Award = 'Oscar'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"directors and producers who have won Oscar\": [\"producers who have won Oscar and directors who have won Oscar\", \"producers who have won Oscar and directors\"]}"
        },
        "clarification_context": "\"directors and producers who have won Oscar\" refers to \"producers who have won Oscar and directors\"",
        "clear_ambiguity": "{\"directors and producers who have won Oscar\": \"producers who have won Oscar and directors\"}",
        "gold_query": "SELECT Production.FullName FROM Production WHERE Production.Film_Profession = 'Director' OR Production.Film_Profession = 'Producer' AND Production.Award = 'Oscar'"
    },
    {
        "index": 1191,
        "db_id": "Airport",
        "ambig_type": "attachment",
        "db_file": "attachment/Airport/attachment_2tab_val_aircraft_manufacturers/attachment_2tab_val_aircraft_manufacturers.sqlite",
        "question": "Display Boeing aircrafts and Airbus aircrafts with 180 seats.",
        "schema_without_content": "Boeing : id, Model, Number_of_seats, Manufacture_year, LastMaintenanceDate | Airbus : id, Model, Number_of_seats, Manufacture_year, LastMaintenanceDate | Flight : id, airplaneId, departureTime, arrivalTime, destination | Pilot : id, name, licenseNumber, experienceYears | Maintenance : id, airplaneId, maintenanceType, datePerformed, technicianName",
        "schema_with_content": "Boeing : id (2, 1), Model ('737', '747'), Number_of_seats (400, 180), Manufacture_year (1990, 2000), LastMaintenanceDate ('2021-09-01', '2022-06-01') | Airbus : id (2, 1), Model ('A320', 'A380'), Number_of_seats (180, 800), Manufacture_year (2010, 2007), LastMaintenanceDate ('2022-07-01', '2021-12-01') | Flight : id (2, 1), airplaneId (1, 2), departureTime ('2022-08-02 09:00:00', '2022-08-01 08:00:00'), arrivalTime ('2022-08-02 13:00:00', '2022-08-01 12:00:00'), destination ('New York', 'Los Angeles') | Pilot : id (2, 1), name ('Jane Smith', 'John Doe'), licenseNumber ('ABC1234', 'XYZ7890'), experienceYears (10, 15) | Maintenance : id (2, 1), airplaneId (1, 2), maintenanceType ('Engine Overhaul', 'Landing Gear Repair'), datePerformed ('2021-06-01', '2021-05-01'), technicianName ('Mike Brown', 'Lisa Johnson')",
        "ambiguous_queries": [
            "SELECT Boeing.Model FROM Boeing WHERE Boeing.Number_of_seats = 180 UNION SELECT Airbus.Model FROM Airbus WHERE Airbus.Number_of_seats = 180",
            "SELECT Boeing.Model FROM Boeing UNION SELECT Airbus.Model FROM Airbus WHERE Airbus.Number_of_seats = 180"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"Boeing aircrafts and Airbus aircrafts with 180 seats\": [\"Airbus aircrafts with 180 seats and Boeing aircrafts with 180 seats\", \"Airbus aircrafts with 180 seats and Boeing aircrafts\"]}"
        },
        "clarification_context": "\"Boeing aircrafts and Airbus aircrafts with 180 seats\" refers to \"Airbus aircrafts with 180 seats and Boeing aircrafts with 180 seats\"",
        "clear_ambiguity": "{\"Boeing aircrafts and Airbus aircrafts with 180 seats\": \"Airbus aircrafts with 180 seats and Boeing aircrafts with 180 seats\"}",
        "gold_query": "SELECT Boeing.Model FROM Boeing WHERE Boeing.Number_of_seats = 180 UNION SELECT Airbus.Model FROM Airbus WHERE Airbus.Number_of_seats = 180"
    },
    {
        "index": 1192,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_1tab_val_assessment_methods/attachment_1tab_val_assessment_methods.sqlite",
        "question": "What are the passing marks of exams and quiz assessed by Professor Smith?",
        "schema_without_content": "Students : StudentID, FirstName, LastName, Age | Courses : CourseID, Title, Department | Enrollments : EnrollmentID, StudentID, CourseID, Semester | Scores : ScoreID, EnrollmentID, AssessmentID, Score | Grades : GradeID, EnrollmentID, FinalGrade | Assessments : AssessmentID, AssessmentMethod, Assessor, TotalMarks, PassingMark, DateOfAssessment",
        "schema_with_content": "Students : StudentID (1, 3, 5), FirstName ('Tom', 'John', 'Bob'), LastName ('Smith', 'Doe', 'Williams'), Age (21, 20, 20) | Courses : CourseID (2, 1, 3), Title ('Mathematics', 'English Literature', 'Computer Science'), Department ('Languages', 'Technology', 'Humanities') | Enrollments : EnrollmentID (2, 3, 1), StudentID (4, 1, 5), CourseID (4, 5, 3), Semester ('2024-03-07 23:00:42', '2024-03-07 23:00:42', '2024-03-07 23:00:42') | Scores : ScoreID (3, 4, 5), EnrollmentID (2, 2, 1), AssessmentID (1, 2, 1), Score (90, 85, 80) | Grades : GradeID (3, 4, 5), EnrollmentID (2, 5, 3), FinalGrade ('B', 'A', 'A') | Assessments : AssessmentID (1, 2, 4), AssessmentMethod ('Quiz', 'Exam', 'Quiz'), Assessor ('Dr. Brown', 'Professor Smith', 'Dr. Johnson'), TotalMarks (20, 100, 100), PassingMark (65, 60, 15), DateOfAssessment ('2024-03-07 23:00:42', '2024-03-07 23:00:42', '2024-03-07 23:00:42')",
        "ambiguous_queries": [
            "SELECT Assessments.PassingMark FROM Assessments WHERE (Assessments.AssessmentMethod = 'Exam' OR Assessments.AssessmentMethod = 'Quiz') AND Assessments.Assessor = 'Professor Smith'",
            "SELECT Assessments.PassingMark FROM Assessments WHERE Assessments.AssessmentMethod = 'Exam' OR Assessments.AssessmentMethod = 'Quiz' AND Assessments.Assessor = 'Professor Smith'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"exams and quiz assessed by Professor Smith\": [\"quiz assessed by Professor Smith and exams assessed by Professor Smith\", \"quiz assessed by Professor Smith and exams\"]}"
        },
        "clarification_context": "\"exams and quiz assessed by Professor Smith\" refers to \"quiz assessed by Professor Smith and exams assessed by Professor Smith\"",
        "clear_ambiguity": "{\"exams and quiz assessed by Professor Smith\": \"quiz assessed by Professor Smith and exams assessed by Professor Smith\"}",
        "gold_query": "SELECT Assessments.PassingMark FROM Assessments WHERE (Assessments.AssessmentMethod = 'Exam' OR Assessments.AssessmentMethod = 'Quiz') AND Assessments.Assessor = 'Professor Smith'"
    },
    {
        "index": 1193,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_media_jobs/attachment_2tab_val_media_jobs.sqlite",
        "question": "Display journalists and editors with English language proficiency.",
        "schema_without_content": "Journalists : id, name, email, language_proficiency, years_experience | Editors : id, name, email, language_proficiency, experience_years | Companies : id, companyName, location | JobPostings : id, jobTitle, description, salary | Applications : applicationId, applicantEmail, appliedJob, applyDate",
        "schema_with_content": "Journalists : id (4, 3, 1), name ('Jane Smith', 'Alice Johnson', 'Carol White'), email ('carol@example.com', 'john@example.com', 'bob@example.com'), language_proficiency ('German', 'French', 'English'), years_experience (6, 7, 8) | Editors : id (5, 1, 4), name ('Karen Clark', 'Elizabeth Green', 'Frank Miller'), email ('michael@example.com', 'frank@example.com', 'karen@example.com'), language_proficiency ('English', 'Portuguese', 'Chinese'), experience_years (9, 6, 10) | Companies : id (5, 3, 2), companyName ('The New York Times', 'The Guardian', 'Le Monde'), location ('Milan', 'Hamburg', 'London') | JobPostings : id (1, 2, 3), jobTitle ('Copy Editor', 'Reporter', 'Investigative Reporter'), description ('Capture images for publication in print and online.', 'Conduct in-depth investigations into important issues.', 'Report on breaking news stories.'), salary (50000, 65000, 55000) | Applications : applicationId (1, 2, 3), applicantEmail ('john@example.com', 'bob@example.com', 'carol@example.com'), appliedJob ('Copy Editor', 'Web Producer', 'Investigative Reporter'), applyDate ('2023-04-17 12:35:00', '2023-04-17 12:50:00', '2023-04-17 12:40:00')",
        "ambiguous_queries": [
            "SELECT Journalists.name FROM Journalists WHERE Journalists.language_proficiency = 'English' UNION SELECT Editors.name FROM Editors WHERE Editors.language_proficiency = 'English'",
            "SELECT Journalists.name FROM Journalists UNION SELECT Editors.name FROM Editors WHERE Editors.language_proficiency = 'English'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"journalists and editors with English language proficiency\": [\"editors with English language proficiency and journalists with English language proficiency\", \"editors with English language proficiency and journalists\"]}"
        },
        "clarification_context": "\"journalists and editors with English language proficiency\" refers to \"editors with English language proficiency and journalists\"",
        "clear_ambiguity": "{\"journalists and editors with English language proficiency\": \"editors with English language proficiency and journalists\"}",
        "gold_query": "SELECT Journalists.name FROM Journalists UNION SELECT Editors.name FROM Editors WHERE Editors.language_proficiency = 'English'"
    },
    {
        "index": 1194,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_2tab_ref_crew_member/attachment_2tab_ref_crew_member.sqlite",
        "question": "Display the directors and cinematographers whose films won an award in 1983.",
        "schema_without_content": "Director : id, name, years_of_experience | Cinematographer : id, name, years_of_experience | Film : id, title, release_year, director_id, cinematographer_id | Actor : id, name | Character : id, character_name, film_id, actor_id | Award : id, award_type, film_id, year",
        "schema_with_content": "Director : id (2, 1), name ('Stanley Kubrick', 'Alfred Hitchcock'), years_of_experience (20, 30) | Cinematographer : id (2, 1), name ('Emmanuel Lubezki', 'Roger Deakins'), years_of_experience (18, 20) | Film : id (1, 3, 2), title ('Psycho', 'Blade Runner', 'The Shining'), release_year (1982, 1980, 1960), director_id (2, 1, 2), cinematographer_id (1) | Actor : id (2, 1), name ('Tom Cruise', 'Harrison Ford') | Character : id (2, 1, 3), character_name ('Deckard', 'Jack Torrance', 'Gaff'), film_id (2, 3, 1), actor_id (1, 1, 2) | Award : id (4, 5, 3), award_type ('Best Adapted Screenplay', 'Best Cinematography', 'Best Visual Effects'), film_id (1, 1, 1), year (1961, 1961, 1961)",
        "ambiguous_queries": [
            "SELECT Director.name FROM Award JOIN Film ON Award.film_id = Film.id JOIN Director ON Film.director_id = Director.id WHERE Award.year = 1983 UNION SELECT Cinematographer.name FROM Award JOIN Film ON Award.film_id = Film.id JOIN Cinematographer ON Film.cinematographer_id = Cinematographer.id WHERE Award.year = 1983",
            "SELECT Director.name FROM Award JOIN Film ON Award.film_id = Film.id JOIN Director ON Film.director_id = Director.id UNION SELECT Cinematographer.name FROM Award JOIN Film ON Award.film_id = Film.id JOIN Cinematographer ON Film.cinematographer_id = Cinematographer.id WHERE Award.year = 1983"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"directors and cinematographers whose films won an award in 1983\": [\"cinematographers whose films won an award in 1983 and directors whose films won an award in 1983\", \"cinematographers whose films won an award in 1983 and directors\"]}"
        },
        "clarification_context": "\"directors and cinematographers whose films won an award in 1983\" refers to \"cinematographers whose films won an award in 1983 and directors\"",
        "clear_ambiguity": "{\"directors and cinematographers whose films won an award in 1983\": \"cinematographers whose films won an award in 1983 and directors\"}",
        "gold_query": "SELECT Director.name FROM Award JOIN Film ON Award.film_id = Film.id JOIN Director ON Film.director_id = Director.id UNION SELECT Cinematographer.name FROM Award JOIN Film ON Award.film_id = Film.id JOIN Cinematographer ON Film.cinematographer_id = Cinematographer.id WHERE Award.year = 1983"
    },
    {
        "index": 1195,
        "db_id": "Education",
        "ambig_type": "attachment",
        "db_file": "attachment/Education/attachment_2tab_ref_visual_arts/attachment_2tab_ref_visual_arts.sqlite",
        "question": "Show descriptions of all photos and illustrations related to the history course.",
        "schema_without_content": "Subjects : ID, Name | Teachers : ID, Name, Age, HiredDate | Students : ID, Name, Age, EnrollmentDate | Photos : PhotoID, Description, PathToPhoto, SubjectID | Illustrations : IllustID, Description, PathToIllust, SubjectID | Classes : ClassID, TeacherID, StudentID, StartTime, EndTime, Classroom",
        "schema_with_content": "Subjects : ID (2, 4, 1), Name ('History', 'English', 'Chemistry') | Teachers : ID (1, 4, 2), Name ('Robert Johnson', 'Michael Brown', 'Emma Wilson'), Age (45, 47, 38), HiredDate ('2024-03-13 20:58:03', '2024-03-13 20:58:03', '2024-03-13 20:58:03') | Students : ID (4, 1, 2), Name ('Alice', 'Bob', 'Eva'), Age (20, 18, 21), EnrollmentDate ('2024-03-13 20:58:03', '2024-03-13 20:58:03', '2024-03-13 20:58:03') | Photos : PhotoID (4, 3, 5), Description ('A beautiful sunrise over a lake.', 'The wonders of outer space.', 'A group of students learning about nature.'), PathToPhoto ('path/to/photo3.jpg', 'path/to/photo4.jpg', 'path/to/photo1.jpg'), SubjectID (5, 2, 4) | Illustrations : IllustID (3, 4, 1), Description ('The periodic table of elements.', 'A depiction of the Big Bang theory.', 'A map of ancient Rome.'), PathToIllust ('path/to/illust5.png', 'path/to/illust2.png', 'path/to/illust4.png'), SubjectID (2, 5, 3) | Classes : ClassID (3, 1, 4), TeacherID (3, 2, 1), StudentID (4, 5, 2), StartTime ('1:00', '4:00', '10:00'), EndTime ('3:30', '2:00', '5:00'), Classroom ('Room E', 'Room C', 'Room A')",
        "ambiguous_queries": [
            "SELECT Photos.description FROM Subjects JOIN Photos ON Subjects.ID = Photos.SubjectID WHERE Subjects.Name = 'History' UNION SELECT Illustrations.description FROM Subjects JOIN Illustrations ON Subjects.ID = Illustrations.SubjectID WHERE Subjects.Name = 'History'",
            "SELECT Photos.description FROM Subjects JOIN Photos ON Subjects.ID = Photos.SubjectID UNION SELECT Illustrations.description FROM Subjects JOIN Illustrations ON Subjects.ID = Illustrations.SubjectID WHERE Subjects.Name = 'History'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"photos and illustrations related to the history course\": [\"illustrations related to the history course and photos related to the history course\", \"illustrations related to the history course and photos\"]}"
        },
        "clarification_context": "\"photos and illustrations related to the history course\" refers to \"illustrations related to the history course and photos related to the history course\"",
        "clear_ambiguity": "{\"photos and illustrations related to the history course\": \"illustrations related to the history course and photos related to the history course\"}",
        "gold_query": "SELECT Photos.description FROM Subjects JOIN Photos ON Subjects.ID = Photos.SubjectID WHERE Subjects.Name = 'History' UNION SELECT Illustrations.description FROM Subjects JOIN Illustrations ON Subjects.ID = Illustrations.SubjectID WHERE Subjects.Name = 'History'"
    },
    {
        "index": 1196,
        "db_id": "Job Postings",
        "ambig_type": "attachment",
        "db_file": "attachment/Job Postings/attachment_2tab_val_visual_art_professions/attachment_2tab_val_visual_art_professions.sqlite",
        "question": "Show photographers and videographers who charged 500.",
        "schema_without_content": "Photographers : id, photographerName, price, experience, specialization | Videographers : id, videographerName, price, experience, specialization | JobPosts : id, jobTitle, description, requiredSkills, budget | Applications : id, applicantId, applicationDate, coverLetter, status | Skills : skillId, skillName | SkillRequirements : requirementID, jobPostId, skillId",
        "schema_with_content": "Photographers : id (2, 3, 1), photographerName ('Mike Johnson', 'John Smith', 'Jane Doe'), price (500, 600, 700), experience (10, 8, 5), specialization ('Portraiture', 'Wedding', 'Landscape') | Videographers : id (1, 3, 2), videographerName ('David Wilson', 'Emily Brown', 'William Taylor'), price (500, 700, 600), experience (7, 9, 3), specialization ('Documentary', 'Corporate Events', 'Music Video') | JobPosts : id (3, 2, 1), jobTitle ('Product Photographer', 'Event Photographer', 'Freelance Videographer'), description ('Shoot and edit promotional video for small business.', 'Take high quality images of products for online store.', 'Capture photos at a corporate event.'), requiredSkills ('Studio Lighting, Retouching', 'Final Cut Pro, Cinematography', 'Adobe Lightroom, Camera Operation'), budget (1500, 2000, 3000) | Applications : id (3, 2, 1), applicantId (1, 2, 3), applicationDate ('2022-01-03 10:00:00', '2022-01-01 10:00:00', '2022-01-02 10:00:00'), coverLetter ('I have extensive experience working on projects similar to this one...', 'Thank you for considering my application...', 'Dear Hiring Manager...'), status ('Accepted', 'Pending', 'Rejected') | Skills : skillId (6, 4, 2), skillName ('Studio Lighting', 'Retouching', 'Cinematography') | SkillRequirements : requirementID (4, 3, 2), jobPostId (1, 1, 2), skillId (4, 5, 3)",
        "ambiguous_queries": [
            "SELECT Photographers.photographerName as name FROM Photographers WHERE Photographers.price = 500 UNION SELECT Videographers.videographerName as name FROM Videographers WHERE Videographers.price = 500",
            "SELECT Photographers.photographerName as name FROM Photographers UNION SELECT Videographers.videographerName as name FROM Videographers WHERE Videographers.price = 500"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"photographers and videographers who charged 500\": [\"videographers who charged 500 and photographers who charged 500\", \"videographers who charged 500 and photographers\"]}"
        },
        "clarification_context": "\"photographers and videographers who charged 500\" refers to \"videographers who charged 500 and photographers who charged 500\"",
        "clear_ambiguity": "{\"photographers and videographers who charged 500\": \"videographers who charged 500 and photographers who charged 500\"}",
        "gold_query": "SELECT Photographers.photographerName as name FROM Photographers WHERE Photographers.price = 500 UNION SELECT Videographers.videographerName as name FROM Videographers WHERE Videographers.price = 500"
    },
    {
        "index": 1197,
        "db_id": "Banking",
        "ambig_type": "attachment",
        "db_file": "attachment/Banking/attachment_1tab_val_types_of_banks/attachment_1tab_val_types_of_banks.sqlite",
        "question": "Show me all central banks and commercial banks in the UK.",
        "schema_without_content": "Banks : id, name, types_of_bank, country | Branches : id, bank_id, address, city, state | Customers : id, first_name, last_name, birth_date, phone_number, email | Transactions : id, branch_id, customer_id, transaction_type, amount, date",
        "schema_with_content": "Banks : id (1, 2, 3), name ('JPMorgan Chase & Co.', 'Federal Reserve', 'Barclays'), types_of_bank ('Central Bank', 'Commercial Bank', 'Commercial Bank'), country ('UK', 'USA', 'USA') | Branches : id (3, 2, 1), bank_id (1, 2, 1), address ('26 The Strand', '8 New Broad Street', '700 Main St'), city ('London', 'New York City', 'Manchester'), state ('England', 'NY', 'GA') | Customers : id (4, 3, 1), first_name ('John', 'Jane', 'Charlie'), last_name ('Smith', 'Brown', 'Wonder'), birth_date ('1990-01-01', '1980-06-30', '1992-07-25'), phone_number ('+1112223333', '+4445556666', '+1234567890'), email ('john@example.com', 'charlie@example.com', 'alice@example.com') | Transactions : id (1, 2, 3), branch_id (2, 1, 1), customer_id (2, 1, 3), transaction_type ('Transfer', 'Withdrawal', 'Deposit'), amount (1000.0, 500.0, 300.0), date ('2024-03-08 00:22:33', '2024-03-08 00:22:33', '2024-03-08 00:22:33')",
        "ambiguous_queries": [
            "SELECT Banks.Name FROM Banks WHERE (Banks.types_of_bank = 'Central Bank' OR Banks.types_of_bank = 'Commercial Bank') AND Banks.country = 'UK'",
            "SELECT Banks.Name FROM Banks WHERE Banks.types_of_bank = 'Central Bank' OR Banks.types_of_bank = 'Commercial Bank' AND Banks.country = 'UK'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"central banks and commercial banks in the UK\": [\"commercial banks in the UK and central banks in the UK\", \"commercial banks in the UK and central banks\"]}"
        },
        "clarification_context": "\"central banks and commercial banks in the UK\" refers to \"commercial banks in the UK and central banks\"",
        "clear_ambiguity": "{\"central banks and commercial banks in the UK\": \"commercial banks in the UK and central banks\"}",
        "gold_query": "SELECT Banks.Name FROM Banks WHERE Banks.types_of_bank = 'Central Bank' OR Banks.types_of_bank = 'Commercial Bank' AND Banks.country = 'UK'"
    },
    {
        "index": 1198,
        "db_id": "Filmmaking",
        "ambig_type": "attachment",
        "db_file": "attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
        "question": "Which films are listed with sound design and music score composed by John Williams?",
        "schema_without_content": "Director : id, name | Film : id, title, release_date, director_id | Movie_Elements : element_type, movie_title, composer_id, duration | Composer : id, creator, birth_year, death_year",
        "schema_with_content": "Director : id (1, 4, 3), name ('Christopher Nolan', 'Guillermo del Toro', 'Steven Spielberg') | Film : id (5, 1, 4), title ('Schindler’s List', 'Inception', 'The Departed'), release_date ('2006-03-17', '2010-07-16', '1993-12-15'), director_id (1, 5, 2) | Movie_Elements : element_type ('Sound Design', 'Music Score', 'Music Score'), movie_title ('Inception', 'The Departed', 'Inception'), composer_id (4, 7, 1), duration (150, 140, 150) | Composer : id (1, 2, 5), creator ('Danny Elfman', 'Javier Navarrete', 'John Williams'), birth_year (1956, 1957, 1932), death_year ()",
        "ambiguous_queries": [
            "SELECT Movie_Elements.movie_title FROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id WHERE (Movie_Elements.element_type = 'Sound Design' OR Movie_Elements.element_type = 'Music Score') AND Composer.creator = 'John Williams'",
            "SELECT Movie_Elements.movie_title FROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id WHERE Movie_Elements.element_type = 'Sound Design' OR Movie_Elements.element_type = 'Music Score' AND Composer.creator = 'John Williams'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"sound design and music score composed by John Williams\": [\"music score composed by John Williams and sound design composed by John Williams\", \"music score composed by John Williams and sound design\"]}"
        },
        "clarification_context": "\"sound design and music score composed by John Williams\" refers to \"music score composed by John Williams and sound design composed by John Williams\"",
        "clear_ambiguity": "{\"sound design and music score composed by John Williams\": \"music score composed by John Williams and sound design composed by John Williams\"}",
        "gold_query": "SELECT Movie_Elements.movie_title FROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id WHERE (Movie_Elements.element_type = 'Sound Design' OR Movie_Elements.element_type = 'Music Score') AND Composer.creator = 'John Williams'"
    },
    {
        "index": 1199,
        "db_id": "Entertainment",
        "ambig_type": "attachment",
        "db_file": "attachment/Entertainment/attachment_2tab_val_performance_event/attachment_2tab_val_performance_event.sqlite",
        "question": "Show me dance recitals and talent shows which are taking place in audition Room 101.",
        "schema_without_content": "Dance_Recitals : RecitalID, Name, Date, Time, Audition_Room | Talent_Shows : ShowID, Name, Theme, Location, Audition_Room | Performers : PerformerID, FirstName, LastName, Age, Role | Participation : ParticipantID, PerformerID, Dance_RecitalID, Talent_ShowID",
        "schema_with_content": "Dance_Recitals : RecitalID (1, 2), Name ('Spring Fling', 'Autumn Spectacular'), Date ('2023-10-15', '2023-03-27'), Time ('19:00:00', '20:00:00'), Audition_Room ('Studio A', 'Room 101') | Talent_Shows : ShowID (1, 2), Name ('Creative Expressions', 'Rising Stars'), Theme ('Music Talents', 'Artistic Talents'), Location ('Gymnasium', 'Conference Hall'), Audition_Room ('Stage B', 'Room 101') | Performers : PerformerID (3, 2, 1), FirstName ('Michael', 'Jane', 'John'), LastName ('Smith', 'Doe', 'Brown'), Age (18, 26, 22), Role ('Dancer', 'Vocalist', 'Instrumentalist') | Participation : ParticipantID (2, 5, 4), PerformerID (2, 3, 4), Dance_RecitalID (1, 2, 1), Talent_ShowID (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Dance_Recitals.name FROM Dance_Recitals WHERE Dance_Recitals.Audition_Room = 'Room 101' UNION SELECT Talent_Shows.name FROM Talent_Shows WHERE Talent_Shows.Audition_Room = 'Room 101'",
            "SELECT Dance_Recitals.name FROM Dance_Recitals UNION SELECT Talent_Shows.name FROM Talent_Shows WHERE Talent_Shows.Audition_Room = 'Room 101'"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"dance recitals and talent shows which are taking place in audition Room 101\": [\"talent shows which are taking place in audition Room 101 and dance recitals which are taking place in audition Room 101\", \"talent shows which are taking place in audition Room 101 and dance recitals\"]}"
        },
        "clarification_context": "\"dance recitals and talent shows which are taking place in audition Room 101\" refers to \"talent shows which are taking place in audition Room 101 and dance recitals\"",
        "clear_ambiguity": "{\"dance recitals and talent shows which are taking place in audition Room 101\": \"talent shows which are taking place in audition Room 101 and dance recitals\"}",
        "gold_query": "SELECT Dance_Recitals.name FROM Dance_Recitals UNION SELECT Talent_Shows.name FROM Talent_Shows WHERE Talent_Shows.Audition_Room = 'Room 101'"
    },
    {
        "index": 1200,
        "db_id": "Entertainment",
        "ambig_type": "scope",
        "db_file": "scope/Entertainment/scope_festivals_performances/scope_festivals_performances.sqlite",
        "question": "List the performance descriptions shown for every festival.",
        "schema_without_content": "Festivals : FestivalID, Name, Location | Performances : PerformanceID, Type, Description | Artists : ArtistID, Name, Genre | Festivals_Artists : FestivalID, ArtistID | Festivals_Performances : FestivalID, PerformanceID, Date",
        "schema_with_content": "Festivals : FestivalID (2, 3, 1), Name ('Coachella Valley Music And Arts Festival', 'Summerfest', 'Glastonbury Festival'), Location ('Las Vegas', 'Pilton, England', 'Indio, California') | Performances : PerformanceID (2, 5, 4), Type ('Circus', 'Live_Band', 'Theatre'), Description ('A live music performance featuring multiple bands.', 'A stand-up comedy showcase.', 'An electronic dance music DJ set.') | Artists : ArtistID (2, 5, 4), Name ('Katy Perry', 'David Bowie', 'Michael Jackson'), Genre ('Pop', 'Pop', 'Rock') | Festivals_Artists : FestivalID (), ArtistID () | Festivals_Performances : FestivalID (5, 5, 2), PerformanceID (4, 1, 1), Date ()",
        "ambiguous_queries": [
            "SELECT Performances.Description from Festivals_Performances join Performances on Festivals_Performances.PerformanceID = Performances.PerformanceID join Festivals on Festivals_Performances.FestivalID = Festivals.FestivalID GROUP BY Festivals_Performances.PerformanceID HAVING COUNT(DISTINCT Festivals_Performances.FestivalID) = (SELECT COUNT(*) FROM Festivals)",
            "select festivals.name , performances.description from Festivals_Performances join Performances on Festivals_Performances.PerformanceID = Performances.PerformanceID join Festivals on Festivals_Performances.FestivalID = Festivals.FestivalID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every festival\": [\"for each festival individually\", \"common to all festivals\"]}"
        },
        "clarification_context": "\"every festival\" refers to \"for each festival individually\"",
        "clear_ambiguity": "{\"every festival\": \"for each festival individually\"}",
        "gold_query": "select festivals.name , performances.description from Festivals_Performances join Performances on Festivals_Performances.PerformanceID = Performances.PerformanceID join Festivals on Festivals_Performances.FestivalID = Festivals.FestivalID"
    },
    {
        "index": 1201,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
        "question": "Show me video players every streaming service uses.",
        "schema_without_content": "Streaming_Services : id, service_name, description | Video_Players : id, player_type, version | Streaming_Services_Video_Players : streaming_service_id, video_player_id",
        "schema_with_content": "Streaming_Services : id (5, 2, 1), service_name ('Apple TV+', 'Disney+', 'Amazon Prime Video'), description ('A popular streaming platform offering movies, TV shows, documentaries.', 'A subsidiary of Amazon that offers digital video streamings of movies and TV shows.', 'A subscription-based streaming service from Walt Disney direct-to-consumer.') | Video_Players : id (4, 1, 3), player_type ('Silverlight', 'Windows Media Player', 'HTML5'), version (10, 12, 2) | Streaming_Services_Video_Players : streaming_service_id (2, 5, 1), video_player_id (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Video_Players.player_type from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.service_name , video_players.player_type from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"every streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"every streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_services.service_name , video_players.player_type from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
    },
    {
        "index": 1202,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_patient_advocates_issues/scope_patient_advocates_issues.sqlite",
        "question": "Give me the issue name and description for each patient advocate.",
        "schema_without_content": "Patient_Advocates : id, name, email | Issues : id, issue_name, description | Patient_Advocates_Issues : patient_advocate_id, issue_id",
        "schema_with_content": "Patient_Advocates : id (5, 4, 3), name ('John Doe', 'David Brown', 'Michael Johnson'), email ('johndoe@example.com', 'janesmith@example.com', 'emilydavis@example.com') | Issues : id (4, 3, 2), issue_name ('Health Insurance', 'Emergency Assistance', 'Billing'), description ('Handling insurance claims and billing issues.', 'Assisting patients during emergencies and coordinating care.', 'Helping patients navigate their health insurance options.') | Patient_Advocates_Issues : patient_advocate_id (2, 4, 5), issue_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Issues.issue_name, Issues.description from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id GROUP BY Patient_Advocates_Issues.issue_id HAVING COUNT(DISTINCT Patient_Advocates_Issues.patient_advocate_id) = (SELECT COUNT(*) FROM Patient_Advocates)",
            "select patient_advocates.name , issues.issue_name , issues.description from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each patient advocate\": [\"for each patient advocate individually\", \"common to all patient advocates\"]}"
        },
        "clarification_context": "\"each patient advocate\" refers to \"for each patient advocate individually\"",
        "clear_ambiguity": "{\"each patient advocate\": \"for each patient advocate individually\"}",
        "gold_query": "select patient_advocates.name , issues.issue_name , issues.description from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id"
    },
    {
        "index": 1203,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_product_managers_metrics/scope_product_managers_metrics.sqlite",
        "question": "Which metric names and values are associated with each product manager?",
        "schema_without_content": "Product_Managers : id, name, email | Metrics : id, metric_name, value | Product_Managers_Metrics : product_manager_id, metrics_id",
        "schema_with_content": "Product_Managers : id (3, 4, 1), name ('John Doe', 'Emily Davis', 'Jane Smith'), email ('john@example.com', 'emily@example.com', 'michael@example.com') | Metrics : id (3, 4, 1), metric_name ('Average Order Value', 'Traffic', 'Conversion_Rate'), value (75.0, 0.85, 0.15) | Product_Managers_Metrics : product_manager_id (2, 3, 2), metrics_id (2, 5, 1)",
        "ambiguous_queries": [
            "SELECT Metrics.metric_name, Metrics.value from Product_Managers_Metrics join Metrics on Product_Managers_Metrics.metrics_id = Metrics.id join Product_Managers on Product_Managers_Metrics.product_manager_id = Product_Managers.id GROUP BY Product_Managers_Metrics.metrics_id HAVING COUNT(DISTINCT Product_Managers_Metrics.product_manager_id) = (SELECT COUNT(*) FROM Product_Managers)",
            "select product_managers.name , metrics.metric_name , metrics.value from Product_Managers_Metrics join Metrics on Product_Managers_Metrics.metrics_id = Metrics.id join Product_Managers on Product_Managers_Metrics.product_manager_id = Product_Managers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each product manager\": [\"for each product manager individually\", \"common to all product managers\"]}"
        },
        "clarification_context": "\"each product manager\" refers to \"for each product manager individually\"",
        "clear_ambiguity": "{\"each product manager\": \"for each product manager individually\"}",
        "gold_query": "select product_managers.name , metrics.metric_name , metrics.value from Product_Managers_Metrics join Metrics on Product_Managers_Metrics.metrics_id = Metrics.id join Product_Managers on Product_Managers_Metrics.product_manager_id = Product_Managers.id"
    },
    {
        "index": 1204,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
        "question": "Give me the collections corresponding to each library?",
        "schema_without_content": "Libraries : id, name, address, phone_number | Collections : collection_id, collection_name | Libraries_Collections : library_id, collection_id",
        "schema_with_content": "Libraries : id (4, 5, 3), name ('Library A', 'Library B', 'Library D'), address ('123 Main St.', '321 Pine St.', '456 Elm St.'), phone_number ('555-5678', '555-1415', '555-9012') | Collections : collection_id (1, 4, 5), collection_name (\"Children's Books\", 'Young Adult', 'Biography') | Libraries_Collections : library_id (4, 5, 1), collection_id (1, 5, 1)",
        "ambiguous_queries": [
            "SELECT Collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id GROUP BY Libraries_Collections.collection_id HAVING COUNT(DISTINCT Libraries_Collections.library_id) = (SELECT COUNT(*) FROM Libraries)",
            "select libraries.name , collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each library\": [\"for each library individually\", \"common to all libraries\"]}"
        },
        "clarification_context": "\"each library\" refers to \"for each library individually\"",
        "clear_ambiguity": "{\"each library\": \"for each library individually\"}",
        "gold_query": "select libraries.name , collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id"
    },
    {
        "index": 1205,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_preservation_societies_projects/scope_preservation_societies_projects.sqlite",
        "question": "Tell me the type, cost and description of projects that each preservation society has.",
        "schema_without_content": "Preservation_Societies : ID, Name, Address | Projects : ID, Type, Description, Cost | Preservation_Societies_Projects : Societies_ID, Projects_ID, StartDate, EndDate",
        "schema_with_content": "Preservation_Societies : ID (5, 4, 2), Name ('Riverbend Community Society', 'Heritage Park Society', 'Liberty Hill Society'), Address ('456 Elm St', '123 Main St', '789 Oak St') | Projects : ID (4, 3, 5), Type ('Maintenance', 'Improvement', 'Restoration'), Description ('Upgrading infrastructure and amenities.', 'Regular upkeep of properties.', 'Constructing new houses while preserving the architectural style.'), Cost (50000.0, 250000.0, 150000.0) | Preservation_Societies_Projects : Societies_ID (3, 5, 2), Projects_ID (1, 1, 5), StartDate ('2022-01-01', '2022-01-01', '2022-01-01'), EndDate ('2022-12-31', '2022-12-31', '2022-12-31')",
        "ambiguous_queries": [
            "SELECT Projects.Type, Projects.Description, Projects.Cost from Preservation_Societies_Projects join Projects on Preservation_Societies_Projects.Projects_ID = Projects.ID join Preservation_Societies on Preservation_Societies_Projects.Societies_ID = Preservation_Societies.ID GROUP BY Preservation_Societies_Projects.Projects_ID HAVING COUNT(DISTINCT Preservation_Societies_Projects.Societies_ID) = (SELECT COUNT(*) FROM Preservation_Societies)",
            "select preservation_societies.name , projects.type , projects.description , projects.cost from Preservation_Societies_Projects join Projects on Preservation_Societies_Projects.Projects_ID = Projects.ID join Preservation_Societies on Preservation_Societies_Projects.Societies_ID = Preservation_Societies.ID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each preservation society\": [\"for each preservation society individually\", \"common to all preservation societies\"]}"
        },
        "clarification_context": "\"each preservation society\" refers to \"common to all preservation societies\"",
        "clear_ambiguity": "{\"each preservation society\": \"common to all preservation societies\"}",
        "gold_query": "SELECT Projects.Type, Projects.Description, Projects.Cost from Preservation_Societies_Projects join Projects on Preservation_Societies_Projects.Projects_ID = Projects.ID join Preservation_Societies on Preservation_Societies_Projects.Societies_ID = Preservation_Societies.ID GROUP BY Preservation_Societies_Projects.Projects_ID HAVING COUNT(DISTINCT Preservation_Societies_Projects.Societies_ID) = (SELECT COUNT(*) FROM Preservation_Societies)"
    },
    {
        "index": 1206,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_scholarships_criteria/scope_scholarships_criteria.sqlite",
        "question": "What criteria do we have for every scholarship?",
        "schema_without_content": "Scholarships : id, name, amount | Criteria : id, value | Scholarship_Criteria : scholarship_id, criterion_id | Students : student_id, first_name, last_name, email, phone_number, admission_date | Applications : application_id, student_id, scholarship_id, submission_date, status",
        "schema_with_content": "Scholarships : id (3, 5, 4), name ('Young Leader Scholarship', 'Service Leadership Scholarship', 'Needy Student Grant'), amount (500.0, 1500.0, 2000.0) | Criteria : id (2, 5, 3), value ('Academic Achievement', 'Extracurricular Activities', 'Financial Need') | Scholarship_Criteria : scholarship_id (4, 5, 1), criterion_id (1, 1, 1) | Students : student_id (2, 5, 1), first_name ('Tom', 'Mike', 'Alice'), last_name ('Black', 'Doe', 'Green'), email ('alice.green@example.com', 'mike.black@example.com', 'tom.brown@example.com'), phone_number ('+123-456-7890', '+123-456-7890', '+123-456-7890'), admission_date ('2021-08-01', '2021-08-01', '2021-08-01') | Applications : application_id (4, 1, 3), student_id (2, 5, 3), scholarship_id (4, 3, 5), submission_date ('2021-09-01', '2021-09-01', '2021-09-01'), status ('Rejected', 'Under Review', 'Withdrawn')",
        "ambiguous_queries": [
            "SELECT Criteria.value from Scholarship_Criteria join Criteria on Scholarship_Criteria.criterion_id = Criteria.id join Scholarships on Scholarship_Criteria.scholarship_id = Scholarships.id GROUP BY Scholarship_Criteria.criterion_id HAVING COUNT(DISTINCT Scholarship_Criteria.scholarship_id) = (SELECT COUNT(*) FROM Scholarships)",
            "select scholarships.name , criteria.value from Scholarship_Criteria join Criteria on Scholarship_Criteria.criterion_id = Criteria.id join Scholarships on Scholarship_Criteria.scholarship_id = Scholarships.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every scholarship\": [\"for each scholarship individually\", \"common to all scholarships\"]}"
        },
        "clarification_context": "\"every scholarship\" refers to \"for each scholarship individually\"",
        "clear_ambiguity": "{\"every scholarship\": \"for each scholarship individually\"}",
        "gold_query": "select scholarships.name , criteria.value from Scholarship_Criteria join Criteria on Scholarship_Criteria.criterion_id = Criteria.id join Scholarships on Scholarship_Criteria.scholarship_id = Scholarships.id"
    },
    {
        "index": 1207,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_investigative_reports_elements/scope_investigative_reports_elements.sqlite",
        "question": "Show me the elements each report has.",
        "schema_without_content": "Journalists : id, name, email | Publications : id, title, publication_date | Articles : id, journalist_id, publication_id, article_title, publish_date | Investigative_Reports : id, report_name, start_date, end_date, article_id | Elements : element_id, element_value | Investigative_Reports_Elements : id, investigative_report_id, element_id, description",
        "schema_with_content": "Journalists : id (5, 3, 1), name ('Michael Johnson', 'William Brown', 'Jane Smith'), email ('john@example.com', 'michael@example.com', 'jane@example.com') | Publications : id (5, 1, 4), title ('The Weekly Times', 'World Report', 'The Daily News'), publication_date ('2021-01-08', '2021-01-29', '2021-01-01') | Articles : id (2, 3, 4), journalist_id (3, 1, 2), publication_id (2, 1, 3), article_title ('Technology Revolution', 'Political Crisis Unfolding', 'Economic Recovery Progress'), publish_date ('2021-01-08', '2021-01-01', '2021-01-22') | Investigative_Reports : id (2, 5, 4), report_name ('Illegal Drug Trade', 'Tax Evasion Schemes', 'Financial Fraud'), start_date ('2021-01-01', '2021-01-01', '2021-01-01'), end_date ('2021-01-31', '2021-01-31', '2021-01-31'), article_id (3, 2, 1) | Elements : element_id (2, 5, 1), element_value ('Witness Testimonies', 'Interviews', 'Videos') | Investigative_Reports_Elements : id (9, 4, 8), investigative_report_id (1, 2, 3), element_id (2, 1, 3), description ('Recorded videos of protestors during the investigation', 'Conducted interviews with key witnesses', 'Gathered testimonies from eyewitnesses')",
        "ambiguous_queries": [
            "SELECT Elements.element_value from Investigative_Reports_Elements join Investigative_Reports on Investigative_Reports_Elements.investigative_report_id = Investigative_Reports.id join Elements on Investigative_Reports_Elements.element_id = Elements.element_id GROUP BY Investigative_Reports_Elements.element_id HAVING COUNT(DISTINCT Investigative_Reports_Elements.investigative_report_id) = (SELECT COUNT(*) FROM Investigative_Reports)",
            "select investigative_reports.report_name , elements.element_value from Investigative_Reports_Elements join Investigative_Reports on Investigative_Reports_Elements.investigative_report_id = Investigative_Reports.id join Elements on Investigative_Reports_Elements.element_id = Elements.element_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each report\": [\"for each report individually\", \"common to all reports\"]}"
        },
        "clarification_context": "\"each report\" refers to \"for each report individually\"",
        "clear_ambiguity": "{\"each report\": \"for each report individually\"}",
        "gold_query": "select investigative_reports.report_name , elements.element_value from Investigative_Reports_Elements join Investigative_Reports on Investigative_Reports_Elements.investigative_report_id = Investigative_Reports.id join Elements on Investigative_Reports_Elements.element_id = Elements.element_id"
    },
    {
        "index": 1208,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_teachers_classrooms/scope_teachers_classrooms.sqlite",
        "question": "What are the room numbers and capacities that every teacher uses?",
        "schema_without_content": "Teachers : teacher_id, full_name | Classrooms : classroom_id, room_number, capacity | Subjects : subject_id, name, description | Students : student_id, first_name, last_name, date_of_birth, enrollment_date | Enrollments : enrollment_id, student_id, subject_id, classroom_id, grade | Teachers_Classrooms : teachers_classrooms_id, teacher_id, classroom_id, start_date, end_date",
        "schema_with_content": "Teachers : teacher_id (3, 2, 5), full_name ('Jane Smith', 'John Doe', 'Michael Brown') | Classrooms : classroom_id (1, 4, 5), room_number (11, 12, 9), capacity (27, 32, 28) | Subjects : subject_id (1, 3, 2), name ('Art', 'History', 'Mathematics'), description ('The study of written works and their social contexts.', 'The study of past events and their impact on present-day society.', 'The study of numbers, quantities, shapes, patterns and structures.') | Students : student_id (3, 5, 4), first_name ('Carol', 'Eva', 'Alice'), last_name ('Garcia', 'Williams', 'Martinez'), date_of_birth ('2007-09-05', '2003-05-15', '2006-08-15'), enrollment_date ('2020-09-01', '2020-09-01', '2020-09-01') | Enrollments : enrollment_id (), student_id (), subject_id (), classroom_id (), grade () | Teachers_Classrooms : teachers_classrooms_id (4, 6, 5), teacher_id (3, 5, 2), classroom_id (3, 5, 2), start_date ('2021-08-30', '2021-08-30', '2021-08-30'), end_date ('2022-05-31', '2022-05-31', '2022-05-31')",
        "ambiguous_queries": [
            "SELECT Classrooms.room_number, Classrooms.capacity from Teachers_Classrooms join Classrooms on Teachers_Classrooms.classroom_id = Classrooms.classroom_id join Teachers on Teachers_Classrooms.teacher_id = Teachers.teacher_id GROUP BY Teachers_Classrooms.classroom_id HAVING COUNT(DISTINCT Teachers_Classrooms.teacher_id) = (SELECT COUNT(*) FROM Teachers)",
            "select teachers.full_name , classrooms.room_number , classrooms.capacity from Teachers_Classrooms join Classrooms on Teachers_Classrooms.classroom_id = Classrooms.classroom_id join Teachers on Teachers_Classrooms.teacher_id = Teachers.teacher_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every teacher\": [\"for each teacher individually\", \"common to all teachers\"]}"
        },
        "clarification_context": "\"every teacher\" refers to \"common to all teachers\"",
        "clear_ambiguity": "{\"every teacher\": \"common to all teachers\"}",
        "gold_query": "SELECT Classrooms.room_number, Classrooms.capacity from Teachers_Classrooms join Classrooms on Teachers_Classrooms.classroom_id = Classrooms.classroom_id join Teachers on Teachers_Classrooms.teacher_id = Teachers.teacher_id GROUP BY Teachers_Classrooms.classroom_id HAVING COUNT(DISTINCT Teachers_Classrooms.teacher_id) = (SELECT COUNT(*) FROM Teachers)"
    },
    {
        "index": 1209,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_hospitals_departments/scope_hospitals_departments.sqlite",
        "question": "Give me the departments that each hospital has.",
        "schema_without_content": "Hospitals : id, name, location | Departments : id, departmentName | Doctors : id, name, specialtyId, hospitalId | Patients : id, firstName, lastName, age, illnessText | Appointments : id, patientId, doctorId, date, time, reasonForVisit | Hospitals_Departments : hospitalId, departmentId",
        "schema_with_content": "Hospitals : id (2, 1, 4), name ('John Hopkins', 'Metro Medical Center', 'New York General'), location ('456 Broadway St', '123 Main St', '2020 University Pl') | Departments : id (2, 5, 1), departmentName ('Cardiology', 'Neurology', 'Orthopedics') | Doctors : id (4, 3, 5), name ('Dr. Brown', 'Dr. Smith', 'Dr. Johnson'), specialtyId (2, 1, 5), hospitalId (3, 2, 1) | Patients : id (2, 3, 4), firstName ('Emily', 'Jane', 'Michael'), lastName ('Brown', 'Miller', 'Doe'), age (45, 55, 35), illnessText ('Anxiety', 'Asthma', 'Diabetes') | Appointments : id (1, 2, 5), patientId (5, 4, 2), doctorId (5, 2, 1), date ('2022-01-02 02:00:00 PM', '2022-01-04 04:00:00 PM', '2022-01-01 10:00:00'), time ('05:00 PM', '10:00 AM', '04:00 PM'), reasonForVisit ('Fractured wrist', 'Allergies', 'Influenza A') | Hospitals_Departments : hospitalId (2, 3, 3), departmentId (1, 5, 2)",
        "ambiguous_queries": [
            "SELECT Departments.departmentName from Hospitals_Departments join Departments on Hospitals_Departments.departmentId = Departments.id join Hospitals on Hospitals_Departments.hospitalId = Hospitals.id GROUP BY Hospitals_Departments.departmentId HAVING COUNT(DISTINCT Hospitals_Departments.hospitalId) = (SELECT COUNT(*) FROM Hospitals)",
            "select hospitals.name , departments.departmentname from Hospitals_Departments join Departments on Hospitals_Departments.departmentId = Departments.id join Hospitals on Hospitals_Departments.hospitalId = Hospitals.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each hospital\": [\"for each hospital individually\", \"common to all hospitals\"]}"
        },
        "clarification_context": "\"each hospital\" refers to \"common to all hospitals\"",
        "clear_ambiguity": "{\"each hospital\": \"common to all hospitals\"}",
        "gold_query": "SELECT Departments.departmentName from Hospitals_Departments join Departments on Hospitals_Departments.departmentId = Departments.id join Hospitals on Hospitals_Departments.hospitalId = Hospitals.id GROUP BY Hospitals_Departments.departmentId HAVING COUNT(DISTINCT Hospitals_Departments.hospitalId) = (SELECT COUNT(*) FROM Hospitals)"
    },
    {
        "index": 1210,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
        "question": "What shows are associated with each television channel?",
        "schema_without_content": "Television_Channels : id, channel_name, country | Shows : id, show_title, genre | Television_Channels_Shows : television_channels_id, shows_id",
        "schema_with_content": "Television_Channels : id (3, 2, 1), channel_name ('Channel Two', 'Channel Five', 'Channel One'), country ('Canada', 'Germany', 'Australia') | Shows : id (4, 5, 2), show_title ('Game Of Thrones', 'Friends', 'Stranger Things'), genre ('Science Fiction', 'Sitcom', 'Crime Drama') | Television_Channels_Shows : television_channels_id (5, 5, 3), shows_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)",
            "select television_channels.channel_name , shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each television channel\": [\"for each television channel individually\", \"common to all television channels\"]}"
        },
        "clarification_context": "\"each television channel\" refers to \"common to all television channels\"",
        "clear_ambiguity": "{\"each television channel\": \"common to all television channels\"}",
        "gold_query": "SELECT Shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)"
    },
    {
        "index": 1211,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
        "question": "What markets are associated with each real estate reporter?",
        "schema_without_content": "Real_Estate_Reporters : id, name, email | Markets : id, market_name, description | Real_Estate_Reporters_Markets : reporter_id, market_id | Articles : article_id, title, content, published_date | Reporter_Articles : reporter_id, article_id",
        "schema_with_content": "Real_Estate_Reporters : id (2, 5, 4), name ('Emily Davis', 'Jane Smith', 'Michael Johnson'), email ('michael@example.com', 'jane@example.com', 'john@example.com') | Markets : id (3, 4, 5), market_name ('Luxury Homes', 'Commercial Properties', 'Investment Properties'), description ('Moderately priced homes for first-time buyers.', 'Agriculture land and rural estates.', 'High-end residential properties.') | Real_Estate_Reporters_Markets : reporter_id (1, 5, 5), market_id (1, 1, 1) | Articles : article_id (5, 2, 4), title ('New Luxury Home Development', 'Office Space Trends', 'First Time Buyers Guide'), content ('Details about a new luxury home development...', 'How retail spaces are making a comeback...', 'Tips for first time home buyers...'), published_date ('2021-07-30', '2021-05-15', '2021-06-20') | Reporter_Articles : reporter_id (), article_id ()",
        "ambiguous_queries": [
            "SELECT Markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)",
            "select real_estate_reporters.name , markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each real estate reporter\": [\"for each real estate reporter individually\", \"common to all real estate reporters\"]}"
        },
        "clarification_context": "\"each real estate reporter\" refers to \"common to all real estate reporters\"",
        "clear_ambiguity": "{\"each real estate reporter\": \"common to all real estate reporters\"}",
        "gold_query": "SELECT Markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)"
    },
    {
        "index": 1212,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_theme_parks_attractions/scope_theme_parks_attractions.sqlite",
        "question": "Show me the attraction types every theme park has.",
        "schema_without_content": "Theme_Parks : park_id, name, location | Attractions : attraction_id, type, description | Theme_Parks_Attractions : theme_park_id, attraction_id",
        "schema_with_content": "Theme_Parks : park_id (1, 5, 2), name ('Wonderland', 'AdventureWorld', 'ThrillZone'), location ('Illinois', 'New York', 'Texas') | Attractions : attraction_id (4, 5, 2), type ('Haunted House', 'Ferris Wheel', 'Carousel'), description ('A merry-go-round featuring various animals for riders to sit on.', 'Cars mounted on rotating platforms so they can bump into one another.', 'An observation wheel that gives riders a panoramic view of the surroundings.') | Theme_Parks_Attractions : theme_park_id (4, 3, 5), attraction_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Attractions.type from Theme_Parks_Attractions join Attractions on Theme_Parks_Attractions.attraction_id = Attractions.attraction_id join Theme_Parks on Theme_Parks_Attractions.theme_park_id = Theme_Parks.park_id GROUP BY Theme_Parks_Attractions.attraction_id HAVING COUNT(DISTINCT Theme_Parks_Attractions.theme_park_id) = (SELECT COUNT(*) FROM Theme_Parks)",
            "select theme_parks.name , attractions.type from Theme_Parks_Attractions join Attractions on Theme_Parks_Attractions.attraction_id = Attractions.attraction_id join Theme_Parks on Theme_Parks_Attractions.theme_park_id = Theme_Parks.park_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every theme park\": [\"for each theme park individually\", \"common to all theme parks\"]}"
        },
        "clarification_context": "\"every theme park\" refers to \"for each theme park individually\"",
        "clear_ambiguity": "{\"every theme park\": \"for each theme park individually\"}",
        "gold_query": "select theme_parks.name , attractions.type from Theme_Parks_Attractions join Attractions on Theme_Parks_Attractions.attraction_id = Attractions.attraction_id join Theme_Parks on Theme_Parks_Attractions.theme_park_id = Theme_Parks.park_id"
    },
    {
        "index": 1213,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_photojournalism_pieces_images/scope_photojournalism_pieces_images.sqlite",
        "question": "What are the image names for every piece?",
        "schema_without_content": "Photojournalism_Pieces : id, title, date | Images : id, image_name, description | Photojournalism_Pieces_Images : photojournalism_piece_id, image_id | Photographers : id, name, birth_date | Photojournalism_Pieces_Photographer : photojournalism_piece_id, photographer_id",
        "schema_with_content": "Photojournalism_Pieces : id (2, 1, 3), title ('Natural Disaster Aftermath', 'Revolutionary Protest', 'Economic Crisis Impact'), date ('2021-05-15', '2021-07-08', '2021-06-30') | Images : id (3, 1, 4), image_name ('Candid_Shots', 'Portrait of a Politician', 'Building_Collapse'), description ('Famous politician is giving a speech.', 'A family struggling during an economic crisis', 'A candid shot of a protestor') | Photojournalism_Pieces_Images : photojournalism_piece_id (3, 1, 1), image_id (3, 2, 4) | Photographers : id (2, 3, 1), name ('Jane Smith', 'Michael Brown', 'John Doe'), birth_date ('1980-01-01', '1988-03-25', '1985-02-20') | Photojournalism_Pieces_Photographer : photojournalism_piece_id (2, 2, 3), photographer_id (3, 3, 2)",
        "ambiguous_queries": [
            "SELECT Images.image_name from Photojournalism_Pieces_Images join Images on Photojournalism_Pieces_Images.image_id = Images.id join Photojournalism_Pieces on Photojournalism_Pieces_Images.photojournalism_piece_id = Photojournalism_Pieces.id GROUP BY Photojournalism_Pieces_Images.image_id HAVING COUNT(DISTINCT Photojournalism_Pieces_Images.photojournalism_piece_id) = (SELECT COUNT(*) FROM Photojournalism_Pieces)",
            "select photojournalism_pieces.title , images.image_name from Photojournalism_Pieces_Images join Images on Photojournalism_Pieces_Images.image_id = Images.id join Photojournalism_Pieces on Photojournalism_Pieces_Images.photojournalism_piece_id = Photojournalism_Pieces.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every piece\": [\"for each piece individually\", \"common to all pieces\"]}"
        },
        "clarification_context": "\"every piece\" refers to \"for each piece individually\"",
        "clear_ambiguity": "{\"every piece\": \"for each piece individually\"}",
        "gold_query": "select photojournalism_pieces.title , images.image_name from Photojournalism_Pieces_Images join Images on Photojournalism_Pieces_Images.image_id = Images.id join Photojournalism_Pieces on Photojournalism_Pieces_Images.photojournalism_piece_id = Photojournalism_Pieces.id"
    },
    {
        "index": 1214,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_beach_resorts_water_sports/scope_beach_resorts_water_sports.sqlite",
        "question": "List the water sports available in each beach resort.",
        "schema_without_content": "Beach_Resorts : ResortID, Name, Location | Water_Sports : SportID, Name, Description | Beach_Resorts_Water_Sports : ResortID, SportID",
        "schema_with_content": "Beach_Resorts : ResortID (4, 2, 5), Name ('Paradise Beach', 'Sunset Shores', 'Wave Rider Bay'), Location ('Hawaii', 'Australia', 'California') | Water_Sports : SportID (1, 2, 3), Name ('Scuba Diving', 'Swimming', 'Snorkeling'), Description ('A water sport involving the riding of ocean waves on a surfboard.', 'Paddling a small narrow boat on rivers or coastal waters.', 'An underwater diving activity that allows divers to breathe underwater using a tank containing compressed air.') | Beach_Resorts_Water_Sports : ResortID (2, 1, 4), SportID (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Water_Sports.Name from Beach_Resorts_Water_Sports join Water_Sports on Beach_Resorts_Water_Sports.SportID = Water_Sports.SportID join Beach_Resorts on Beach_Resorts_Water_Sports.ResortID = Beach_Resorts.ResortID GROUP BY Beach_Resorts_Water_Sports.SportID HAVING COUNT(DISTINCT Beach_Resorts_Water_Sports.ResortID) = (SELECT COUNT(*) FROM Beach_Resorts)",
            "select beach_resorts.name , water_sports.name from Beach_Resorts_Water_Sports join Water_Sports on Beach_Resorts_Water_Sports.SportID = Water_Sports.SportID join Beach_Resorts on Beach_Resorts_Water_Sports.ResortID = Beach_Resorts.ResortID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each beach resort\": [\"for each beach resort individually\", \"common to all beach resorts\"]}"
        },
        "clarification_context": "\"each beach resort\" refers to \"common to all beach resorts\"",
        "clear_ambiguity": "{\"each beach resort\": \"common to all beach resorts\"}",
        "gold_query": "SELECT Water_Sports.Name from Beach_Resorts_Water_Sports join Water_Sports on Beach_Resorts_Water_Sports.SportID = Water_Sports.SportID join Beach_Resorts on Beach_Resorts_Water_Sports.ResortID = Beach_Resorts.ResortID GROUP BY Beach_Resorts_Water_Sports.SportID HAVING COUNT(DISTINCT Beach_Resorts_Water_Sports.ResortID) = (SELECT COUNT(*) FROM Beach_Resorts)"
    },
    {
        "index": 1215,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_gate_facility/scope_gate_facility.sqlite",
        "question": "What is the facility description of each gate?",
        "schema_without_content": "Gate : gate_id, airport_code, terminal_number | Facility : facility_id, name, description | Gate_Facility : gate_facility_id, gate_id, facility_id | Flight : flight_id, airline_name, departure_time, arrival_time | Aircraft : aircraft_id, model, capacity",
        "schema_with_content": "Gate : gate_id (1, 5, 2), airport_code ('ORD', 'JFK', 'YUL'), terminal_number (3, 7, 1) | Facility : facility_id (3, 1, 4), name ('Baggage Claim', 'Currency Exchange', 'Restaurant'), description ('A place where passengers can shop', 'A place where passengers can eat', 'A place where passengers can exchange currency') | Gate_Facility : gate_facility_id (7, 6, 5), gate_id (4, 1, 4), facility_id (2, 1, 1) | Flight : flight_id (5, 4, 1), airline_name ('Spirit Airlines', 'United Airlines', 'Delta Airlines'), departure_time ('08-05-2022 12:00 PM', '08-05-2022 10:00 AM', '08-05-2022 11:00 AM'), arrival_time ('08-05-2022 12:00 PM', '08-05-2022 3:00 PM', '08-05-2022 11:00 PM') | Aircraft : aircraft_id (3, 2, 5), model ('Airbus A321', 'Airbus A380', 'Boeing 747'), capacity (400, 200, 180)",
        "ambiguous_queries": [
            "SELECT Facility.description from Gate_Facility join Facility on Gate_Facility.facility_id = Facility.facility_id join Gate on Gate_Facility.gate_id = Gate.gate_id GROUP BY Gate_Facility.facility_id HAVING COUNT(DISTINCT Gate_Facility.gate_id) = (SELECT COUNT(*) FROM Gate)",
            "select gate.airport_code , facility.description from Gate_Facility join Facility on Gate_Facility.facility_id = Facility.facility_id join Gate on Gate_Facility.gate_id = Gate.gate_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each gate\": [\"for each gate individually\", \"common to all gates\"]}"
        },
        "clarification_context": "\"each gate\" refers to \"for each gate individually\"",
        "clear_ambiguity": "{\"each gate\": \"for each gate individually\"}",
        "gold_query": "select gate.airport_code , facility.description from Gate_Facility join Facility on Gate_Facility.facility_id = Facility.facility_id join Gate on Gate_Facility.gate_id = Gate.gate_id"
    },
    {
        "index": 1216,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_airlines_fleets/scope_airlines_fleets.sqlite",
        "question": "What capacities do the fleets associated with each airline have?",
        "schema_without_content": "Airlines : id, name, country | Fleets : id, fleetName, capacity | Airlines_Fleets : airlineId, fleetId",
        "schema_with_content": "Airlines : id (4, 1, 5), name ('KLM Royal Dutch Airlines', 'Lufthansa', 'Air France'), country ('UAE', 'Germany', 'United States') | Fleets : id (1, 4, 2), fleetName ('Boeing_737', 'De Havilland Canada Dash 8 Q400', 'Bombardier CRJ-900'), capacity (100, 200, 517) | Airlines_Fleets : airlineId (3, 2, 5), fleetId (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Fleets.capacity from Airlines_Fleets join Fleets on Airlines_Fleets.fleetId = Fleets.id join Airlines on Airlines_Fleets.airlineId = Airlines.id GROUP BY Airlines_Fleets.fleetId HAVING COUNT(DISTINCT Airlines_Fleets.airlineId) = (SELECT COUNT(*) FROM Airlines)",
            "select airlines.name , fleets.capacity from Airlines_Fleets join Fleets on Airlines_Fleets.fleetId = Fleets.id join Airlines on Airlines_Fleets.airlineId = Airlines.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each airline\": [\"for each airline individually\", \"common to all airlines\"]}"
        },
        "clarification_context": "\"each airline\" refers to \"common to all airlines\"",
        "clear_ambiguity": "{\"each airline\": \"common to all airlines\"}",
        "gold_query": "SELECT Fleets.capacity from Airlines_Fleets join Fleets on Airlines_Fleets.fleetId = Fleets.id join Airlines on Airlines_Fleets.airlineId = Airlines.id GROUP BY Airlines_Fleets.fleetId HAVING COUNT(DISTINCT Airlines_Fleets.airlineId) = (SELECT COUNT(*) FROM Airlines)"
    },
    {
        "index": 1217,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_product_managers_metrics/scope_product_managers_metrics.sqlite",
        "question": "What values are associated with each product manager's metrics?",
        "schema_without_content": "Product_Managers : id, name, email | Metrics : id, metric_name, value | Product_Managers_Metrics : product_manager_id, metrics_id",
        "schema_with_content": "Product_Managers : id (4, 2, 5), name ('Michael Johnson', 'Jane Smith', 'Emily Davis'), email ('jane@example.com', 'david@example.com', 'john@example.com') | Metrics : id (5, 3, 2), metric_name ('Bounce Rate', 'Revenue', 'Average Order Value'), value (30000.0, 0.85, 0.15) | Product_Managers_Metrics : product_manager_id (1, 2, 5), metrics_id (1, 1, 5)",
        "ambiguous_queries": [
            "SELECT Metrics.value from Product_Managers_Metrics join Metrics on Product_Managers_Metrics.metrics_id = Metrics.id join Product_Managers on Product_Managers_Metrics.product_manager_id = Product_Managers.id GROUP BY Product_Managers_Metrics.metrics_id HAVING COUNT(DISTINCT Product_Managers_Metrics.product_manager_id) = (SELECT COUNT(*) FROM Product_Managers)",
            "select product_managers.name , metrics.value from Product_Managers_Metrics join Metrics on Product_Managers_Metrics.metrics_id = Metrics.id join Product_Managers on Product_Managers_Metrics.product_manager_id = Product_Managers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each product manager\": [\"for each product manager individually\", \"common to all product managers\"]}"
        },
        "clarification_context": "\"each product manager\" refers to \"for each product manager individually\"",
        "clear_ambiguity": "{\"each product manager\": \"for each product manager individually\"}",
        "gold_query": "select product_managers.name , metrics.value from Product_Managers_Metrics join Metrics on Product_Managers_Metrics.metrics_id = Metrics.id join Product_Managers on Product_Managers_Metrics.product_manager_id = Product_Managers.id"
    },
    {
        "index": 1218,
        "db_id": "Traffic",
        "ambig_type": "scope",
        "db_file": "scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
        "question": "List the type of tools we have for each traffic engineer.",
        "schema_without_content": "Traffic_Engineers : id, name, years_of_experience | Tools : tool_id, tool_name, type | Traffic_Engineers_Tools : engineer_id, tool_id",
        "schema_with_content": "Traffic_Engineers : id (1, 2, 5), name ('John', 'Michael', 'Anna'), years_of_experience (28, 20, 25) | Tools : tool_id (3, 4, 1), tool_name ('Accident_Analysis', 'Vehicle_Tracking', 'Signal_Optimization'), type ('software', 'hardware', 'software') | Traffic_Engineers_Tools : engineer_id (4, 5, 5), tool_id (1, 3, 1)",
        "ambiguous_queries": [
            "SELECT Tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)",
            "select traffic_engineers.name , tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each traffic engineer\": [\"for each traffic engineer individually\", \"common to all traffic engineers\"]}"
        },
        "clarification_context": "\"each traffic engineer\" refers to \"common to all traffic engineers\"",
        "clear_ambiguity": "{\"each traffic engineer\": \"common to all traffic engineers\"}",
        "gold_query": "SELECT Tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)"
    },
    {
        "index": 1219,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
        "question": "What is the type of animal for each farm?",
        "schema_without_content": "Farms : FarmID, Name, Location | Animals : AnimalID, Type, Quantity | Crops : CropID, Name, HarvestDate | Equipment : EquipID, Model, PurchaseDate | Farms_Animals : FarmID, AnimalID | Farms_Crops : FarmID, CropID, PlantingDate, HarvestEstimate | Farms_Equipment : FarmID, EquipID, AcquisitionDate, MaintenanceSchedule",
        "schema_with_content": "Farms : FarmID (2, 3, 1), Name ('Farm D', 'Farm A', 'Farm C'), Location ('California', 'Florida', 'Washington') | Animals : AnimalID (2, 1, 3), Type ('Pig', 'Chicken', 'Cow'), Quantity (25, 30, 20) | Crops : CropID (3, 1, 2), Name ('Corn', 'Rice', 'Oats'), HarvestDate ('2023-09-01', '2023-07-01', '2023-06-01') | Equipment : EquipID (2, 3, 5), Model ('Tractor A', 'Irrigation System', 'Combine'), PurchaseDate ('2022-02-01', '2020-01-01', '2020-04-01') | Farms_Animals : FarmID (1, 5, 3), AnimalID (4, 1, 1) | Farms_Crops : FarmID (), CropID (), PlantingDate (), HarvestEstimate () | Farms_Equipment : FarmID (), EquipID (), AcquisitionDate (), MaintenanceSchedule ()",
        "ambiguous_queries": [
            "SELECT Animals.Type from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID GROUP BY Farms_Animals.AnimalID HAVING COUNT(DISTINCT Farms_Animals.FarmID) = (SELECT COUNT(*) FROM Farms)",
            "select farms.name , animals.type from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each farm\": [\"for each farm individually\", \"common to all farms\"]}"
        },
        "clarification_context": "\"each farm\" refers to \"for each farm individually\"",
        "clear_ambiguity": "{\"each farm\": \"for each farm individually\"}",
        "gold_query": "select farms.name , animals.type from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID"
    },
    {
        "index": 1220,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_physicists_fields/scope_physicists_fields.sqlite",
        "question": "Show me the fields that each physicist works in.",
        "schema_without_content": "Physicists : id, name, email | Fields : id, fieldName | Physicist_Fields : physicistId, fieldId",
        "schema_with_content": "Physicists : id (3, 2, 5), name ('Bob', 'Alice', 'Dave'), email ('carol@email.com', 'dave@email.com', 'alice@email.com') | Fields : id (4, 2, 1), fieldName ('Relativity', 'Electromagnetism', 'Cosmology') | Physicist_Fields : physicistId (1, 5, 4), fieldId (3, 1, 1)",
        "ambiguous_queries": [
            "SELECT Fields.fieldName from Physicist_Fields join Fields on Physicist_Fields.fieldId = Fields.id join Physicists on Physicist_Fields.physicistId = Physicists.id GROUP BY Physicist_Fields.fieldId HAVING COUNT(DISTINCT Physicist_Fields.physicistId) = (SELECT COUNT(*) FROM Physicists)",
            "select physicists.name , fields.fieldname from Physicist_Fields join Fields on Physicist_Fields.fieldId = Fields.id join Physicists on Physicist_Fields.physicistId = Physicists.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each physicist\": [\"for each physicist individually\", \"common to all physicists\"]}"
        },
        "clarification_context": "\"each physicist\" refers to \"for each physicist individually\"",
        "clear_ambiguity": "{\"each physicist\": \"for each physicist individually\"}",
        "gold_query": "select physicists.name , fields.fieldname from Physicist_Fields join Fields on Physicist_Fields.fieldId = Fields.id join Physicists on Physicist_Fields.physicistId = Physicists.id"
    },
    {
        "index": 1221,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_meteorological_offices_data_sources/scope_meteorological_offices_data_sources.sqlite",
        "question": "Show me descriptions of data that each meteorological office uses.",
        "schema_without_content": "Meteorological_Offices : id, name, location | Data_Sources : id, source_type, description | Meteorological_Offices_Data_Sources : meteo_office_id, data_source_id | Runways : id, length, width | Terminals : id, terminal_name, capacity | Flights : flight_number, departure_time, arrival_time, destination_airport, airline_company",
        "schema_with_content": "Meteorological_Offices : id (3, 1, 2), name ('Office B', 'Office C', 'Office A'), location ('Atlanta', 'Chicago', 'Dallas') | Data_Sources : id (4, 5, 3), source_type ('Automated_Weather_Station', 'Radar_System', 'Wind_Sensor'), description ('Records ambient temperature.', 'Monitors global atmospheric conditions.', 'Collects real-time weather data.') | Meteorological_Offices_Data_Sources : meteo_office_id (4, 5, 3), data_source_id (1, 1, 1) | Runways : id (), length (), width () | Terminals : id (5, 3, 1), terminal_name ('Terminal 1', 'Terminal 3', 'Terminal 5'), capacity (4500, 5000, 3500) | Flights : flight_number (2, 5, 1), departure_time ('2022-12-01 18:00:00', '2022-12-01 16:00:00', '2022-12-01 12:00:00'), arrival_time ('2022-12-01 13:00:00', '2022-12-01 16:00:00', '2022-12-01 18:00:00'), destination_airport ('ORD', 'DFW', 'LAX'), airline_company ('American Airlines', 'Southwest Airlines', 'United Airlines')",
        "ambiguous_queries": [
            "SELECT Data_Sources.description from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id GROUP BY Meteorological_Offices_Data_Sources.data_source_id HAVING COUNT(DISTINCT Meteorological_Offices_Data_Sources.meteo_office_id) = (SELECT COUNT(*) FROM Meteorological_Offices)",
            "select meteorological_offices.name , data_sources.description from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each meteorological office\": [\"for each meteorological office individually\", \"common to all meteorological offices\"]}"
        },
        "clarification_context": "\"each meteorological office\" refers to \"for each meteorological office individually\"",
        "clear_ambiguity": "{\"each meteorological office\": \"for each meteorological office individually\"}",
        "gold_query": "select meteorological_offices.name , data_sources.description from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id"
    },
    {
        "index": 1222,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_hospitals_procedures/scope_hospitals_procedures.sqlite",
        "question": "what procedure name and description of procedures are available for each hospital?",
        "schema_without_content": "Hospitals : HospitalID, Name, Address | Procedures : ProcedureID, ProcedureName, Description | Hospitals_Procedures : HospitalID, ProcedureID",
        "schema_with_content": "Hospitals : HospitalID (3, 1, 2), Name ('University Hospital', \"St. Mary's General\", \"King's College Hospital\"), Address ('1011 Medical Lane', '1213 Medical Circle', '789 Medical Street') | Procedures : ProcedureID (4, 5, 3), ProcedureName ('Blood Test', 'MRI Scan', 'CT Scan'), Description (\"Use of ionizing radiation to produce images of the inside of a patient's body.\", 'High-frequency sound waves used to visualize internal body structures.', 'Analysis of blood samples for various medical conditions.') | Hospitals_Procedures : HospitalID (3, 2, 1), ProcedureID (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Procedures.ProcedureName, Procedures.Description from Hospitals_Procedures join Procedures on Hospitals_Procedures.ProcedureID = Procedures.ProcedureID join Hospitals on Hospitals_Procedures.HospitalID = Hospitals.HospitalID GROUP BY Hospitals_Procedures.ProcedureID HAVING COUNT(DISTINCT Hospitals_Procedures.HospitalID) = (SELECT COUNT(*) FROM Hospitals)",
            "select hospitals.name , procedures.procedurename , procedures.description from Hospitals_Procedures join Procedures on Hospitals_Procedures.ProcedureID = Procedures.ProcedureID join Hospitals on Hospitals_Procedures.HospitalID = Hospitals.HospitalID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each hospital\": [\"for each hospital individually\", \"common to all hospitals\"]}"
        },
        "clarification_context": "\"each hospital\" refers to \"for each hospital individually\"",
        "clear_ambiguity": "{\"each hospital\": \"for each hospital individually\"}",
        "gold_query": "select hospitals.name , procedures.procedurename , procedures.description from Hospitals_Procedures join Procedures on Hospitals_Procedures.ProcedureID = Procedures.ProcedureID join Hospitals on Hospitals_Procedures.HospitalID = Hospitals.HospitalID"
    },
    {
        "index": 1223,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
        "question": "What name and variety of wine do we have at every vineyard?",
        "schema_without_content": "VineyardTypes : id, typeName | Countries : countryId, countryName | Regions : regionId, regionName, countryId | Vineyards : vineyardId, name, areaSize, typeId, regionId | Wines : wineId, name, variety | Vineyards_Wines : vineyardId, wineId, yearProduced",
        "schema_with_content": "VineyardTypes : id (3, 2, 1), typeName ('Red', 'White', 'Rosé') | Countries : countryId (2, 1, 3), countryName ('Italy', 'Spain', 'France') | Regions : regionId (2, 3, 1), regionName ('Bordeaux', 'La Rioja', 'Tuscany'), countryId (3, 1, 2) | Vineyards : vineyardId (2, 1, 4), name ('Domaine Leflaive', 'Château Lafite Rothschild', 'Marqués de Riscal'), areaSize (100.0, 150.0, 600.0), typeId (2, 3, 1), regionId (3, 2, 2) | Wines : wineId (2, 1, 3), name ('Pinot Noir', 'Merlot', 'Cabernet Sauvignon'), variety ('Pinot Noir', 'Merlot', 'Cabernet Sauvignon') | Vineyards_Wines : vineyardId (5, 2, 4), wineId (1, 2, 2), yearProduced (2020, 2018, 2021)",
        "ambiguous_queries": [
            "SELECT Wines.name, Wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM Vineyards)",
            "select vineyards.name , wines.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every vineyard\": [\"at each vineyard individually\", \"common to all vineyards\"]}"
        },
        "clarification_context": "\"every vineyard\" refers to \"common to all vineyards\"",
        "clear_ambiguity": "{\"every vineyard\": \"common to all vineyards\"}",
        "gold_query": "SELECT Wines.name, Wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM Vineyards)"
    },
    {
        "index": 1224,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_summer_camps_themes/scope_summer_camps_themes.sqlite",
        "question": "what themes are available for each summer camp?",
        "schema_without_content": "Themes : id, themeName | Summer_Camps : id, campName, location, startDate, endDate | Summer_Camp_Themes : summerCampId, themeId",
        "schema_with_content": "Themes : id (2, 3, 1), themeName ('Science', 'Sports', 'Technology') | Summer_Camps : id (5, 3, 2), campName ('Camp E', 'Camp C', 'Camp A'), location ('Houston', 'Miami', 'New York'), startDate ('2023-07-03', '2023-06-20', '2023-06-25'), endDate ('2023-07-02', '2023-07-17', '2023-07-10') | Summer_Camp_Themes : summerCampId (3, 5, 2), themeId (1, 2, 3)",
        "ambiguous_queries": [
            "SELECT Themes.themeName from Summer_Camp_Themes join Themes on Summer_Camp_Themes.themeId = Themes.id join Summer_Camps on Summer_Camp_Themes.summerCampId = Summer_Camps.id GROUP BY Summer_Camp_Themes.themeId HAVING COUNT(DISTINCT Summer_Camp_Themes.summerCampId) = (SELECT COUNT(*) FROM Summer_Camps)",
            "select summer_camps.campname , themes.themename from Summer_Camp_Themes join Themes on Summer_Camp_Themes.themeId = Themes.id join Summer_Camps on Summer_Camp_Themes.summerCampId = Summer_Camps.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each summer camp\": [\"for each summer camp individually\", \"common to all summer camps\"]}"
        },
        "clarification_context": "\"each summer camp\" refers to \"for each summer camp individually\"",
        "clear_ambiguity": "{\"each summer camp\": \"for each summer camp individually\"}",
        "gold_query": "select summer_camps.campname , themes.themename from Summer_Camp_Themes join Themes on Summer_Camp_Themes.themeId = Themes.id join Summer_Camps on Summer_Camp_Themes.summerCampId = Summer_Camps.id"
    },
    {
        "index": 1225,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_meteorological_offices_data_sources/scope_meteorological_offices_data_sources.sqlite",
        "question": "Show me the data source that each meteorological office uses.",
        "schema_without_content": "Meteorological_Offices : id, name, location | Data_Sources : id, source_type, description | Meteorological_Offices_Data_Sources : meteo_office_id, data_source_id | Runways : id, length, width | Terminals : id, terminal_name, capacity | Flights : flight_number, departure_time, arrival_time, destination_airport, airline_company",
        "schema_with_content": "Meteorological_Offices : id (2, 1, 3), name ('Office E', 'Office A', 'Office C'), location ('Chicago', 'Los Angeles', 'New York') | Data_Sources : id (5, 3, 1), source_type ('Wind_Sensor', 'Radar_System', 'Automated_Weather_Station'), description ('Records ambient temperature.', 'Measures wind speed and direction.', 'Tracks precipitation and storm systems.') | Meteorological_Offices_Data_Sources : meteo_office_id (5, 4, 5), data_source_id (1, 1, 1) | Runways : id (), length (), width () | Terminals : id (1, 3, 5), terminal_name ('Terminal 4', 'Terminal 5', 'Terminal 3'), capacity (5000, 3000, 4500) | Flights : flight_number (3, 2, 4), departure_time ('2022-12-01 12:00:00', '2022-12-01 10:00:00', '2022-12-01 14:00:00'), arrival_time ('2022-12-01 20:00:00', '2022-12-01 22:00:00', '2022-12-01 18:00:00'), destination_airport ('ORD', 'DFW', 'LAX'), airline_company ('American Airlines', 'United Airlines', 'Delta Airlines')",
        "ambiguous_queries": [
            "SELECT Data_Sources.source_type from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id GROUP BY Meteorological_Offices_Data_Sources.data_source_id HAVING COUNT(DISTINCT Meteorological_Offices_Data_Sources.meteo_office_id) = (SELECT COUNT(*) FROM Meteorological_Offices)",
            "select meteorological_offices.name , data_sources.source_type from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each meteorological office\": [\"for each meteorological office individually\", \"common to all meteorological offices\"]}"
        },
        "clarification_context": "\"each meteorological office\" refers to \"common to all meteorological offices\"",
        "clear_ambiguity": "{\"each meteorological office\": \"common to all meteorological offices\"}",
        "gold_query": "SELECT Data_Sources.source_type from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id GROUP BY Meteorological_Offices_Data_Sources.data_source_id HAVING COUNT(DISTINCT Meteorological_Offices_Data_Sources.meteo_office_id) = (SELECT COUNT(*) FROM Meteorological_Offices)"
    },
    {
        "index": 1226,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_aquaculture_facility_fish_species/scope_aquaculture_facility_fish_species.sqlite",
        "question": "Tell me the species every facility has.",
        "schema_without_content": "Aquaculture_Facility : id, name, location | Fish_Species : id, species_name | Aquaculture_Facility_Fish_Species : aquaculture_facility_id, fish_species_id",
        "schema_with_content": "Aquaculture_Facility : id (1, 5, 3), name ('Facility A', 'Facility E', 'Facility D'), location ('Location C', 'Location B', 'Location E') | Fish_Species : id (3, 2, 4), species_name ('Catfish', 'Trout', 'Salmon') | Aquaculture_Facility_Fish_Species : aquaculture_facility_id (2, 3, 4), fish_species_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Fish_Species.species_name from Aquaculture_Facility_Fish_Species join Fish_Species on Aquaculture_Facility_Fish_Species.fish_species_id = Fish_Species.id join Aquaculture_Facility on Aquaculture_Facility_Fish_Species.aquaculture_facility_id = Aquaculture_Facility.id GROUP BY Aquaculture_Facility_Fish_Species.fish_species_id HAVING COUNT(DISTINCT Aquaculture_Facility_Fish_Species.aquaculture_facility_id) = (SELECT COUNT(*) FROM Aquaculture_Facility)",
            "select aquaculture_facility.name , fish_species.species_name from Aquaculture_Facility_Fish_Species join Fish_Species on Aquaculture_Facility_Fish_Species.fish_species_id = Fish_Species.id join Aquaculture_Facility on Aquaculture_Facility_Fish_Species.aquaculture_facility_id = Aquaculture_Facility.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every facility\": [\"for each facility individually\", \"common to all facilities\"]}"
        },
        "clarification_context": "\"every facility\" refers to \"common to all facilities\"",
        "clear_ambiguity": "{\"every facility\": \"common to all facilities\"}",
        "gold_query": "SELECT Fish_Species.species_name from Aquaculture_Facility_Fish_Species join Fish_Species on Aquaculture_Facility_Fish_Species.fish_species_id = Fish_Species.id join Aquaculture_Facility on Aquaculture_Facility_Fish_Species.aquaculture_facility_id = Aquaculture_Facility.id GROUP BY Aquaculture_Facility_Fish_Species.fish_species_id HAVING COUNT(DISTINCT Aquaculture_Facility_Fish_Species.aquaculture_facility_id) = (SELECT COUNT(*) FROM Aquaculture_Facility)"
    },
    {
        "index": 1227,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_construction_companies_projects/scope_construction_companies_projects.sqlite",
        "question": "Show me the schedule of each construction company's projects.",
        "schema_without_content": "Construction_Companies : id, company_name, location | Projects : id, project_type, start_date, end_date | Construction_Companies_Projects : construction_company_id, project_id | House_Sizes : house_size_id, size_in_sqft, price | Material_Types : material_type_id, type_of_material, cost_per_unit",
        "schema_with_content": "Construction_Companies : id (1, 2, 3), company_name ('Company D', 'Company A', 'Company E'), location ('Miami', 'New York', 'Los Angeles') | Projects : id (2, 5, 1), project_type ('Residential', 'Infrastructure', 'Commercial'), start_date ('2024-01-01', '2026-01-01', '2023-01-01'), end_date ('2026-12-01', '2024-12-01', '2025-12-01') | Construction_Companies_Projects : construction_company_id (1, 2, 4), project_id (2, 1, 1) | House_Sizes : house_size_id (3, 1, 2), size_in_sqft (3000, 2000, 1500), price (250, 300, 350) | Material_Types : material_type_id (4, 3, 1), type_of_material ('Aluminum', 'Glass', 'Concrete'), cost_per_unit (80.0, 40.0, 50.0)",
        "ambiguous_queries": [
            "SELECT Projects.start_date, Projects.end_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id GROUP BY Construction_Companies_Projects.project_id HAVING COUNT(DISTINCT Construction_Companies_Projects.construction_company_id) = (SELECT COUNT(*) FROM Construction_Companies)",
            "select construction_companies.company_name , projects.start_date , projects.end_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each construction company\": [\"for each construction company individually\", \"common to all construction companies\"]}"
        },
        "clarification_context": "\"each construction company\" refers to \"common to all construction companies\"",
        "clear_ambiguity": "{\"each construction company\": \"common to all construction companies\"}",
        "gold_query": "SELECT Projects.start_date, Projects.end_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id GROUP BY Construction_Companies_Projects.project_id HAVING COUNT(DISTINCT Construction_Companies_Projects.construction_company_id) = (SELECT COUNT(*) FROM Construction_Companies)"
    },
    {
        "index": 1228,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_production_designers_elements/scope_production_designers_elements.sqlite",
        "question": "What element descriptions do we have for every designer?",
        "schema_without_content": "Production_Designers : id, name, email | Elements : id, element_type, description | Production_Designers_Elements : production_designer_id, element_id",
        "schema_with_content": "Production_Designers : id (1, 4, 2), name ('Emily Davis', 'William Brown', 'Michael Johnson'), email ('johnsmith@example.com', 'janedoe@example.com', 'williambrown@example.com') | Elements : id (2, 3, 4), element_type ('Art_Direction', 'Set_Design', 'Location_Scouting'), description ('Oversees all aspects of the visual style of a film.', 'Designs and creates costumes for characters.', 'Creates the visual environment for a film scene.') | Production_Designers_Elements : production_designer_id (3, 2, 5), element_id (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Elements.description from Production_Designers_Elements join Elements on Production_Designers_Elements.element_id = Elements.id join Production_Designers on Production_Designers_Elements.production_designer_id = Production_Designers.id GROUP BY Production_Designers_Elements.element_id HAVING COUNT(DISTINCT Production_Designers_Elements.production_designer_id) = (SELECT COUNT(*) FROM Production_Designers)",
            "select production_designers.name , elements.description from Production_Designers_Elements join Elements on Production_Designers_Elements.element_id = Elements.id join Production_Designers on Production_Designers_Elements.production_designer_id = Production_Designers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every designer\": [\"for each designer individually\", \"common to all designers\"]}"
        },
        "clarification_context": "\"every designer\" refers to \"common to all designers\"",
        "clear_ambiguity": "{\"every designer\": \"common to all designers\"}",
        "gold_query": "SELECT Elements.description from Production_Designers_Elements join Elements on Production_Designers_Elements.element_id = Elements.id join Production_Designers on Production_Designers_Elements.production_designer_id = Production_Designers.id GROUP BY Production_Designers_Elements.element_id HAVING COUNT(DISTINCT Production_Designers_Elements.production_designer_id) = (SELECT COUNT(*) FROM Production_Designers)"
    },
    {
        "index": 1229,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_audio_formats/scope_streaming_services_audio_formats.sqlite",
        "question": "Show me audio formats each streaming service uses and their descriptions.",
        "schema_without_content": "Audio_Formats : id, format_name, description | Streaming_Services : id, service_name, subscription_price, number_of_users | Streaming_Services_Audio_Formats : streaming_service_id, audio_format_id",
        "schema_with_content": "Audio_Formats : id (3, 1, 4), format_name ('MP3', 'FLAC', 'Dolby_Atmos'), description ('An uncompressed PCM audio file format.', 'Digital Theater System sound codec.', 'Lossless compression audio file format.') | Streaming_Services : id (5, 3, 4), service_name ('Service5', 'Service1', 'Service2'), subscription_price (12.99, 9.99, 6.99), number_of_users (5000, 8000, 7000) | Streaming_Services_Audio_Formats : streaming_service_id (3, 4, 1), audio_format_id (4, 5, 5)",
        "ambiguous_queries": [
            "SELECT Audio_Formats.format_name, Audio_Formats.description from Streaming_Services_Audio_Formats join Audio_Formats on Streaming_Services_Audio_Formats.audio_format_id = Audio_Formats.id join Streaming_Services on Streaming_Services_Audio_Formats.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Audio_Formats.audio_format_id HAVING COUNT(DISTINCT Streaming_Services_Audio_Formats.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.service_name , audio_formats.format_name , audio_formats.description from Streaming_Services_Audio_Formats join Audio_Formats on Streaming_Services_Audio_Formats.audio_format_id = Audio_Formats.id join Streaming_Services on Streaming_Services_Audio_Formats.streaming_service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"each streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_services.service_name , audio_formats.format_name , audio_formats.description from Streaming_Services_Audio_Formats join Audio_Formats on Streaming_Services_Audio_Formats.audio_format_id = Audio_Formats.id join Streaming_Services on Streaming_Services_Audio_Formats.streaming_service_id = Streaming_Services.id"
    },
    {
        "index": 1230,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_hostels_dormitories/scope_hostels_dormitories.sqlite",
        "question": "What type of dormitory does each hostel have?",
        "schema_without_content": "Hostels : id, name, address | Dormitories : dormitory_id, type, capacity | Hostels_Dormitories : hostel_dormitory_id, hostel_id, dormitory_id",
        "schema_with_content": "Hostels : id (3, 5, 4), name ('Hostel E', 'Hostel A', 'Hostel C'), address ('456 Elm St', '123 Main St', '012 Pine St') | Dormitories : dormitory_id (7, 2, 4), type ('Female Only', 'Female Only', 'Mixed_Dormitory'), capacity (35, 20, 15) | Hostels_Dormitories : hostel_dormitory_id (10, 6, 8), hostel_id (4, 5, 1), dormitory_id (1, 1, 10)",
        "ambiguous_queries": [
            "SELECT Dormitories.type from Hostels_Dormitories join Dormitories on Hostels_Dormitories.dormitory_id = Dormitories.dormitory_id join Hostels on Hostels_Dormitories.hostel_id = Hostels.id GROUP BY Hostels_Dormitories.dormitory_id HAVING COUNT(DISTINCT Hostels_Dormitories.hostel_id) = (SELECT COUNT(*) FROM Hostels)",
            "select hostels.name , dormitories.type from Hostels_Dormitories join Dormitories on Hostels_Dormitories.dormitory_id = Dormitories.dormitory_id join Hostels on Hostels_Dormitories.hostel_id = Hostels.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each hostel\": [\"for each hostel individually\", \"common to all hostels\"]}"
        },
        "clarification_context": "\"each hostel\" refers to \"common to all hostels\"",
        "clear_ambiguity": "{\"each hostel\": \"common to all hostels\"}",
        "gold_query": "SELECT Dormitories.type from Hostels_Dormitories join Dormitories on Hostels_Dormitories.dormitory_id = Dormitories.dormitory_id join Hostels on Hostels_Dormitories.hostel_id = Hostels.id GROUP BY Hostels_Dormitories.dormitory_id HAVING COUNT(DISTINCT Hostels_Dormitories.hostel_id) = (SELECT COUNT(*) FROM Hostels)"
    },
    {
        "index": 1231,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_apartment_buildings_units/scope_apartment_buildings_units.sqlite",
        "question": "Give me the types and descriptions of units that are in each apartment building.",
        "schema_without_content": "Apartment_Buildings : id, name, address, city, state, zipcode, num_units | Units : id, unit_type, description | Apartment_Buildings_Units : building_id, unit_id | Tenants : tenant_id, firstname, lastname, email, phone | RentPayments : payment_id, amount, paid_date, due_date, tenant_id",
        "schema_with_content": "Apartment_Buildings : id (2, 3, 4), name ('Building D', 'Building B', 'Building A'), address ('10 Main St', '20 Elm St', '50 Maple Ave'), city ('Chicago', 'Dallas', 'Los Angeles'), state ('NY', 'FL', 'TX'), zipcode (60601, 33101, 90001), num_units (50, 30, 60) | Units : id (5, 2, 4), unit_type ('Studio_Apartment', 'Two-Bedroom', 'One-Bedroom'), description ('Spacious studio apartment with modern amenities', 'Luxurious three-bedroom apartment with stunning views', 'Beautiful two-bedroom apartment perfect for families') | Apartment_Buildings_Units : building_id (5, 3, 5), unit_id (1, 1, 1) | Tenants : tenant_id (4, 5, 2), firstname ('Bob', 'Alice', 'Emily'), lastname ('Wilson', 'Martin', 'Doe'), email ('alicewilson@email.com', 'johnsmith@email.com', 'janedoemail@email.com'), phone ('555-321-9876', '555-654-3210', '555-123-4567') | RentPayments : payment_id (2, 3, 1), amount (1200, 1200, 1200), paid_date ('2021-10-01', '2021-10-01', '2021-10-01'), due_date ('2021-10-01', '2021-10-01', '2021-10-01'), tenant_id (2, 4, 5)",
        "ambiguous_queries": [
            "SELECT Units.unit_type, Units.description from Apartment_Buildings_Units join Units on Apartment_Buildings_Units.unit_id = Units.id join Apartment_Buildings on Apartment_Buildings_Units.building_id = Apartment_Buildings.id GROUP BY Apartment_Buildings_Units.unit_id HAVING COUNT(DISTINCT Apartment_Buildings_Units.building_id) = (SELECT COUNT(*) FROM Apartment_Buildings)",
            "select apartment_buildings.name , units.unit_type , units.description from Apartment_Buildings_Units join Units on Apartment_Buildings_Units.unit_id = Units.id join Apartment_Buildings on Apartment_Buildings_Units.building_id = Apartment_Buildings.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each apartment building\": [\"for each apartment building individually\", \"common to all apartment buildings\"]}"
        },
        "clarification_context": "\"each apartment building\" refers to \"common to all apartment buildings\"",
        "clear_ambiguity": "{\"each apartment building\": \"common to all apartment buildings\"}",
        "gold_query": "SELECT Units.unit_type, Units.description from Apartment_Buildings_Units join Units on Apartment_Buildings_Units.unit_id = Units.id join Apartment_Buildings on Apartment_Buildings_Units.building_id = Apartment_Buildings.id GROUP BY Apartment_Buildings_Units.unit_id HAVING COUNT(DISTINCT Apartment_Buildings_Units.building_id) = (SELECT COUNT(*) FROM Apartment_Buildings)"
    },
    {
        "index": 1232,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_travel_agencies_destinations/scope_travel_agencies_destinations.sqlite",
        "question": "What destination names are associated with each travel agency?",
        "schema_without_content": "Travel_Agencies : id, name, location | Destinations : id, destination_name | Accommodations : id, accommodation_type, capacity | Tours : id, tour_name, duration | Bookings : id, travel_agency_id, destination_id, accommodation_id, tour_id, date, price | Travel_Agencies_Destinations : travel_agency_id, destination_id",
        "schema_with_content": "Travel_Agencies : id (3, 1, 5), name ('EuroTrip Expeditions', 'African Explorers', 'Americas Discoveries'), location ('London', 'New York', 'Tokyo') | Destinations : id (3, 5, 1), destination_name ('North America', 'Asia', 'South America') | Accommodations : id (2, 5, 3), accommodation_type ('Hotel', 'Villa', 'Resort'), capacity (10, 300, 20) | Tours : id (3, 5, 1), tour_name ('Beach Vacation', 'City Tour', 'Mountain Trekking'), duration (10, 1, 12) | Bookings : id (5, 3, 2), travel_agency_id (1, 2, 2), destination_id (2, 2, 1), accommodation_id (2, 4, 1), tour_id (1, 4, 5), date ('2023-06-15', '2023-07-01', '2023-07-11'), price (3000, 4500, 4000) | Travel_Agencies_Destinations : travel_agency_id (2, 4, 2), destination_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Destinations.destination_name from Travel_Agencies_Destinations join Destinations on Travel_Agencies_Destinations.destination_id = Destinations.id join Travel_Agencies on Travel_Agencies_Destinations.travel_agency_id = Travel_Agencies.id GROUP BY Travel_Agencies_Destinations.destination_id HAVING COUNT(DISTINCT Travel_Agencies_Destinations.travel_agency_id) = (SELECT COUNT(*) FROM Travel_Agencies)",
            "select travel_agencies.name , destinations.destination_name from Travel_Agencies_Destinations join Destinations on Travel_Agencies_Destinations.destination_id = Destinations.id join Travel_Agencies on Travel_Agencies_Destinations.travel_agency_id = Travel_Agencies.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each travel agency\": [\"for each travel agency individually\", \"common to all travel agencies\"]}"
        },
        "clarification_context": "\"each travel agency\" refers to \"for each travel agency individually\"",
        "clear_ambiguity": "{\"each travel agency\": \"for each travel agency individually\"}",
        "gold_query": "select travel_agencies.name , destinations.destination_name from Travel_Agencies_Destinations join Destinations on Travel_Agencies_Destinations.destination_id = Destinations.id join Travel_Agencies on Travel_Agencies_Destinations.travel_agency_id = Travel_Agencies.id"
    },
    {
        "index": 1233,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_photojournalists_equipment/scope_photojournalists_equipment.sqlite",
        "question": "Show me the equipment each photojournalist uses.",
        "schema_without_content": "Photojournalists : id, name, email | Equipment : equipment_id, type | Photojournalist_Equipment : photojournalist_id, equipment_id",
        "schema_with_content": "Photojournalists : id (1, 4, 3), name ('Jane Smith', 'Emily Williams', 'Michael Johnson'), email ('john@example.com', 'jane@example.com', 'david@example.com') | Equipment : equipment_id (3, 1, 5), type ('Tripod', 'Lens', 'Flash') | Photojournalist_Equipment : photojournalist_id (3, 5, 2), equipment_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Equipment.type from Photojournalist_Equipment join Equipment on Photojournalist_Equipment.equipment_id = Equipment.equipment_id join Photojournalists on Photojournalist_Equipment.photojournalist_id = Photojournalists.id GROUP BY Photojournalist_Equipment.equipment_id HAVING COUNT(DISTINCT Photojournalist_Equipment.photojournalist_id) = (SELECT COUNT(*) FROM Photojournalists)",
            "select photojournalists.name , equipment.type from Photojournalist_Equipment join Equipment on Photojournalist_Equipment.equipment_id = Equipment.equipment_id join Photojournalists on Photojournalist_Equipment.photojournalist_id = Photojournalists.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each photojournalist\": [\"for each photojournalist individually\", \"common to all photojournalists\"]}"
        },
        "clarification_context": "\"each photojournalist\" refers to \"for each photojournalist individually\"",
        "clear_ambiguity": "{\"each photojournalist\": \"for each photojournalist individually\"}",
        "gold_query": "select photojournalists.name , equipment.type from Photojournalist_Equipment join Equipment on Photojournalist_Equipment.equipment_id = Equipment.equipment_id join Photojournalists on Photojournalist_Equipment.photojournalist_id = Photojournalists.id"
    },
    {
        "index": 1234,
        "db_id": "Entertainment",
        "ambig_type": "scope",
        "db_file": "scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
        "question": "Show me the name and description of the events that every festival has",
        "schema_without_content": "Festivals : FestivalID, Name, Location | Events : EventTypeID, EventName, Description | Festivals_Events : FestivalID, EventTypeID",
        "schema_with_content": "Festivals : FestivalID (4, 2, 3), Name ('Diwali', 'Oktoberfest', 'Mardi Gras'), Location ('New Orleans', 'Rio de Janeiro', 'Buenoaia y Foca') | Events : EventTypeID (1, 2, 4), EventName ('Street Performances', 'Fireworks Show', 'Parade'), Description ('Exhibits showcasing traditional and contemporary art from various cultures.', 'Actors, musicians, acrobats and magicians entertain crowds on the streets.', 'A colorful procession featuring floats, music and dancers.') | Festivals_Events : FestivalID (5, 3, 2), EventTypeID (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Events.EventName, Events.Description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM Festivals)",
            "select festivals.name , events.eventname , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every festival\": [\"for each festival individually\", \"common to all festivals\"]}"
        },
        "clarification_context": "\"every festival\" refers to \"common to all festivals\"",
        "clear_ambiguity": "{\"every festival\": \"common to all festivals\"}",
        "gold_query": "SELECT Events.EventName, Events.Description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM Festivals)"
    },
    {
        "index": 1235,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_hostels_dormitories/scope_hostels_dormitories.sqlite",
        "question": "what are the capacities of dormitories associated with every hostel?",
        "schema_without_content": "Hostels : id, name, address | Dormitories : dormitory_id, type, capacity | Hostels_Dormitories : hostel_dormitory_id, hostel_id, dormitory_id",
        "schema_with_content": "Hostels : id (1, 5, 3), name ('Hostel D', 'Hostel E', 'Hostel A'), address ('456 Elm St', '012 Pine St', '123 Main St') | Dormitories : dormitory_id (10, 1, 5), type ('Mixed_Dormitory', 'Mixed_Dormitory', 'Male Only'), capacity (10, 15, 20) | Hostels_Dormitories : hostel_dormitory_id (6, 7, 5), hostel_id (3, 4, 5), dormitory_id (1, 10, 7)",
        "ambiguous_queries": [
            "SELECT Dormitories.capacity from Hostels_Dormitories join Dormitories on Hostels_Dormitories.dormitory_id = Dormitories.dormitory_id join Hostels on Hostels_Dormitories.hostel_id = Hostels.id GROUP BY Hostels_Dormitories.dormitory_id HAVING COUNT(DISTINCT Hostels_Dormitories.hostel_id) = (SELECT COUNT(*) FROM Hostels)",
            "select hostels.name , dormitories.capacity from Hostels_Dormitories join Dormitories on Hostels_Dormitories.dormitory_id = Dormitories.dormitory_id join Hostels on Hostels_Dormitories.hostel_id = Hostels.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every hostel\": [\"for each hostel individually\", \"common to all hostels\"]}"
        },
        "clarification_context": "\"every hostel\" refers to \"for each hostel individually\"",
        "clear_ambiguity": "{\"every hostel\": \"for each hostel individually\"}",
        "gold_query": "select hostels.name , dormitories.capacity from Hostels_Dormitories join Dormitories on Hostels_Dormitories.dormitory_id = Dormitories.dormitory_id join Hostels on Hostels_Dormitories.hostel_id = Hostels.id"
    },
    {
        "index": 1236,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
        "question": "Give me the advertisement types and durations that each streaming service has.",
        "schema_without_content": "Streaming_Service : id, name, platform | Advertisement : id, type, duration | Streaming_Service_Advertisement : streaming_service_id, advertisement_id",
        "schema_with_content": "Streaming_Service : id (4, 5, 3), name ('Amazon Prime Video', 'HBO Max', 'Disney+'), platform ('Web', 'App', 'Web') | Advertisement : id (4, 1, 2), type ('Post_roll_Ads', 'Pre_roll_Ads', 'Interstitial_Ads'), duration (60.0, 90.0, 30.0) | Streaming_Service_Advertisement : streaming_service_id (4, 5, 2), advertisement_id (1, 4, 1)",
        "ambiguous_queries": [
            "SELECT Advertisement.type, Advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)",
            "select streaming_service.name , advertisement.type , advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"each streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_service.name , advertisement.type , advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
    },
    {
        "index": 1237,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_preservation_societies_projects/scope_preservation_societies_projects.sqlite",
        "question": "which project types and costs are associated with each preservation society?",
        "schema_without_content": "Preservation_Societies : ID, Name, Address | Projects : ID, Type, Description, Cost | Preservation_Societies_Projects : Societies_ID, Projects_ID, StartDate, EndDate",
        "schema_with_content": "Preservation_Societies : ID (4, 3, 1), Name ('Liberty Hill Society', 'Woodland Heights Society', 'Riverbend Community Society'), Address ('789 Oak St', '001 Pine St', '135 Maple Ave') | Projects : ID (4, 1, 3), Type ('Development', 'Improvement', 'Landscaping'), Description ('Creating green spaces and gardens around the community.', 'Constructing new houses while preserving the architectural style.', 'Restoring historical buildings in the neighborhood.'), Cost (75000.0, 350000.0, 50000.0) | Preservation_Societies_Projects : Societies_ID (1, 2, 3), Projects_ID (4, 2, 5), StartDate ('2022-01-01', '2022-01-01', '2022-01-01'), EndDate ('2022-12-31', '2022-12-31', '2022-12-31')",
        "ambiguous_queries": [
            "SELECT Projects.Type, Projects.Cost from Preservation_Societies_Projects join Projects on Preservation_Societies_Projects.Projects_ID = Projects.ID join Preservation_Societies on Preservation_Societies_Projects.Societies_ID = Preservation_Societies.ID GROUP BY Preservation_Societies_Projects.Projects_ID HAVING COUNT(DISTINCT Preservation_Societies_Projects.Societies_ID) = (SELECT COUNT(*) FROM Preservation_Societies)",
            "select preservation_societies.name , projects.type , projects.cost from Preservation_Societies_Projects join Projects on Preservation_Societies_Projects.Projects_ID = Projects.ID join Preservation_Societies on Preservation_Societies_Projects.Societies_ID = Preservation_Societies.ID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each preservation society\": [\"for each preservation society individually\", \"common to all preservation societies\"]}"
        },
        "clarification_context": "\"each preservation society\" refers to \"for each preservation society individually\"",
        "clear_ambiguity": "{\"each preservation society\": \"for each preservation society individually\"}",
        "gold_query": "select preservation_societies.name , projects.type , projects.cost from Preservation_Societies_Projects join Projects on Preservation_Societies_Projects.Projects_ID = Projects.ID join Preservation_Societies on Preservation_Societies_Projects.Societies_ID = Preservation_Societies.ID"
    },
    {
        "index": 1238,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_social_media_integrations/scope_streaming_services_social_media_integrations.sqlite",
        "question": "What is the social media integration description for each streaming service?",
        "schema_without_content": "Streaming_Services : id, service_name, subscription_fee | Social_Media_Integrations : id, integration_type, description | Streaming_Services_Social_Media_Integrations : streaming_service_id, social_media_integration_id | Arbitrary_Table1 : id, column1, column2 | Arbitrary_Table2 : id, column1, column2",
        "schema_with_content": "Streaming_Services : id (5, 4, 3), service_name ('Disney+', 'Hulu', 'Netflix'), subscription_fee (5.99, 8.99, 7.99) | Social_Media_Integrations : id (2, 1, 4), integration_type ('Share Button', 'Follow Feature', 'Comment Section'), description ('Lets users follow their favorite channels', 'A feature that lets users save videos to watch later', 'Enables user comments on content') | Streaming_Services_Social_Media_Integrations : streaming_service_id (2, 1, 1), social_media_integration_id (3, 2, 1) | Arbitrary_Table1 : id (3, 2, 4), column1 ('Row2 Col1', 'Row5 Col1', 'Row3 Col1'), column2 (30, 10, 40) | Arbitrary_Table2 : id (2, 3, 4), column1 ('Row5 Col1', 'Row1 Col1', 'Row3 Col1'), column2 (30, 40, 10)",
        "ambiguous_queries": [
            "SELECT Social_Media_Integrations.description from Streaming_Services_Social_Media_Integrations join Social_Media_Integrations on Streaming_Services_Social_Media_Integrations.social_media_integration_id = Social_Media_Integrations.id join Streaming_Services on Streaming_Services_Social_Media_Integrations.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Social_Media_Integrations.social_media_integration_id HAVING COUNT(DISTINCT Streaming_Services_Social_Media_Integrations.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.service_name , social_media_integrations.description from Streaming_Services_Social_Media_Integrations join Social_Media_Integrations on Streaming_Services_Social_Media_Integrations.social_media_integration_id = Social_Media_Integrations.id join Streaming_Services on Streaming_Services_Social_Media_Integrations.streaming_service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"each streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_services.service_name , social_media_integrations.description from Streaming_Services_Social_Media_Integrations join Social_Media_Integrations on Streaming_Services_Social_Media_Integrations.social_media_integration_id = Social_Media_Integrations.id join Streaming_Services on Streaming_Services_Social_Media_Integrations.streaming_service_id = Streaming_Services.id"
    },
    {
        "index": 1239,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_maritime_villages_boat_tours/scope_maritime_villages_boat_tours.sqlite",
        "question": "What are the tour options offered by boat tours in each maritime village?",
        "schema_without_content": "Maritime_Villages : id, name, location | Boat_Tours : id, tour_name, description | Maritime_Villages_Boat_Tours : maritime_village_id, boat_tour_id",
        "schema_with_content": "Maritime_Villages : id (3, 4, 2), name ('Village2', 'Village5', 'Village1'), location ('Location2', 'Location1', 'Location4') | Boat_Tours : id (3, 1, 4), tour_name ('Fishing Tour', 'Dolphin Spotting', 'Whale Watching'), description ('Relaxing cruise on the sea.', 'Spot dolphins in their natural habitat.', 'Enjoy sunset over the ocean.') | Maritime_Villages_Boat_Tours : maritime_village_id (3, 5, 1), boat_tour_id (1, 4, 1)",
        "ambiguous_queries": [
            "SELECT Boat_Tours.tour_name from Maritime_Villages_Boat_Tours join Boat_Tours on Maritime_Villages_Boat_Tours.boat_tour_id = Boat_Tours.id join Maritime_Villages on Maritime_Villages_Boat_Tours.maritime_village_id = Maritime_Villages.id GROUP BY Maritime_Villages_Boat_Tours.boat_tour_id HAVING COUNT(DISTINCT Maritime_Villages_Boat_Tours.maritime_village_id) = (SELECT COUNT(*) FROM Maritime_Villages)",
            "select maritime_villages.name , boat_tours.tour_name from Maritime_Villages_Boat_Tours join Boat_Tours on Maritime_Villages_Boat_Tours.boat_tour_id = Boat_Tours.id join Maritime_Villages on Maritime_Villages_Boat_Tours.maritime_village_id = Maritime_Villages.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each maritime village\": [\"for each maritime village individually\", \"common to all maritime villages\"]}"
        },
        "clarification_context": "\"each maritime village\" refers to \"for each maritime village individually\"",
        "clear_ambiguity": "{\"each maritime village\": \"for each maritime village individually\"}",
        "gold_query": "select maritime_villages.name , boat_tours.tour_name from Maritime_Villages_Boat_Tours join Boat_Tours on Maritime_Villages_Boat_Tours.boat_tour_id = Boat_Tours.id join Maritime_Villages on Maritime_Villages_Boat_Tours.maritime_village_id = Maritime_Villages.id"
    },
    {
        "index": 1240,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_professional_development_programs_topics/scope_professional_development_programs_topics.sqlite",
        "question": "Show me the topics each development program has.",
        "schema_without_content": "Topics : id, topic_name | Professional_Development_Programs : program_id, program_name, duration, cost | Professional_Development_Programs_Topics : pdp_topics_id, topics_id",
        "schema_with_content": "Topics : id (3, 4, 5), topic_name ('Differentiated Instruction', 'Curriculum Design', 'Technology Integration') | Professional_Development_Programs : program_id (2, 4, 1), program_name ('PDP C', 'PDP E', 'PDP A'), duration (90, 45, 30), cost (999.99, 2999.99, 1899.99) | Professional_Development_Programs_Topics : pdp_topics_id (5, 2, 1), topics_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Topics.topic_name from Professional_Development_Programs_Topics join Topics on Professional_Development_Programs_Topics.topics_id = Topics.id join Professional_Development_Programs on Professional_Development_Programs_Topics.pdp_topics_id = Professional_Development_Programs.program_id GROUP BY Professional_Development_Programs_Topics.topics_id HAVING COUNT(DISTINCT Professional_Development_Programs_Topics.pdp_topics_id) = (SELECT COUNT(*) FROM Professional_Development_Programs)",
            "select professional_development_programs.program_name , topics.topic_name from Professional_Development_Programs_Topics join Topics on Professional_Development_Programs_Topics.topics_id = Topics.id join Professional_Development_Programs on Professional_Development_Programs_Topics.pdp_topics_id = Professional_Development_Programs.program_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each development program\": [\"for each development program individually\", \"common to all development programs\"]}"
        },
        "clarification_context": "\"each development program\" refers to \"common to all development programs\"",
        "clear_ambiguity": "{\"each development program\": \"common to all development programs\"}",
        "gold_query": "SELECT Topics.topic_name from Professional_Development_Programs_Topics join Topics on Professional_Development_Programs_Topics.topics_id = Topics.id join Professional_Development_Programs on Professional_Development_Programs_Topics.pdp_topics_id = Professional_Development_Programs.program_id GROUP BY Professional_Development_Programs_Topics.topics_id HAVING COUNT(DISTINCT Professional_Development_Programs_Topics.pdp_topics_id) = (SELECT COUNT(*) FROM Professional_Development_Programs)"
    },
    {
        "index": 1241,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_classroom_equipment/scope_classroom_equipment.sqlite",
        "question": "List the quantity of equipment available in every classroom.",
        "schema_without_content": "Classroom : id, name, capacity | Equipment : id, equipmentName, quantity | Classroom_Equipment : classroomId, equipmentId",
        "schema_with_content": "Classroom : id (5, 1, 3), name ('Room A', 'Room E', 'Room C'), capacity (35, 32, 25) | Equipment : id (3, 4, 5), equipmentName ('Projector Screen', 'Desks And Chairs', 'Computers'), quantity (10, 8, 7) | Classroom_Equipment : classroomId (2, 4, 5), equipmentId (4, 1, 2)",
        "ambiguous_queries": [
            "SELECT Equipment.quantity from Classroom_Equipment join Equipment on Classroom_Equipment.equipmentId = Equipment.id join Classroom on Classroom_Equipment.classroomId = Classroom.id GROUP BY Classroom_Equipment.equipmentId HAVING COUNT(DISTINCT Classroom_Equipment.classroomId) = (SELECT COUNT(*) FROM Classroom)",
            "select classroom.name , equipment.quantity from Classroom_Equipment join Equipment on Classroom_Equipment.equipmentId = Equipment.id join Classroom on Classroom_Equipment.classroomId = Classroom.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every classroom\": [\"for each classroom individually\", \"common to all classrooms\"]}"
        },
        "clarification_context": "\"every classroom\" refers to \"common to all classrooms\"",
        "clear_ambiguity": "{\"every classroom\": \"common to all classrooms\"}",
        "gold_query": "SELECT Equipment.quantity from Classroom_Equipment join Equipment on Classroom_Equipment.equipmentId = Equipment.id join Classroom on Classroom_Equipment.classroomId = Classroom.id GROUP BY Classroom_Equipment.equipmentId HAVING COUNT(DISTINCT Classroom_Equipment.classroomId) = (SELECT COUNT(*) FROM Classroom)"
    },
    {
        "index": 1242,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
        "question": "Which responsibilities does each location manager have?",
        "schema_without_content": "Locations_Managers : id, name, contact_info | Responsibilities : id, description | Locations_Managers_Responsibilities : locations_manager_id, responsibility_id | Film_Crews : id, crew_name, role | Movie_Projects : id, title, release_date, budget | Movies_Cast : movie_id, actor_id, character_name | Directors : id, director_name, birth_year | Directed_Movies : director_id, movie_id",
        "schema_with_content": "Locations_Managers : id (3, 2, 4), name ('Bob Brown', 'Alice Johnson', 'Charlie Davis'), contact_info ('+1234567890', '+7778889990', '+1112223330') | Responsibilities : id (1, 3, 4), description ('Equipment Coordination', 'Location Scouting', 'Film Permit Acquisition') | Locations_Managers_Responsibilities : locations_manager_id (1, 5, 2), responsibility_id (1, 1, 1) | Film_Crews : id (3, 1, 4), crew_name ('Sound Team', 'Camera Team', 'Special Effects'), role ('Pyrotechnics Specialist', 'Art Director', 'Boom Operator') | Movie_Projects : id (2, 5, 3), title ('Alien Invasion', 'Love Story', 'Comedy Drama'), release_date ('2023-06-15', '2026-04-01', '2024-02-14'), budget (5000000.0, 7000000.0, 10000000.0) | Movies_Cast : movie_id (3, 4, 3), actor_id (10, 9, 3), character_name ('Business Tycoon', 'Lonely Heart', 'Gang Leader') | Directors : id (5, 1, 2), director_name ('Anthony Hopkins', 'Robert De Niro', 'Tom Hanks'), birth_year (1948, 1954, 1956) | Directed_Movies : director_id (5, 4, 3), movie_id (4, 3, 1)",
        "ambiguous_queries": [
            "SELECT Responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id GROUP BY Locations_Managers_Responsibilities.responsibility_id HAVING COUNT(DISTINCT Locations_Managers_Responsibilities.locations_manager_id) = (SELECT COUNT(*) FROM Locations_Managers)",
            "select locations_managers.name , responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each location manager\": [\"for each location manager individually\", \"common to all location managers\"]}"
        },
        "clarification_context": "\"each location manager\" refers to \"for each location manager individually\"",
        "clear_ambiguity": "{\"each location manager\": \"for each location manager individually\"}",
        "gold_query": "select locations_managers.name , responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id"
    },
    {
        "index": 1243,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_hotels_amenities/scope_hotels_amenities.sqlite",
        "question": "List the amenities available in each hotel.",
        "schema_without_content": "Hotels : id, name, location | Amenities : amenityId, amenityName | Hotel_Amenities : hotelId, amenityId",
        "schema_with_content": "Hotels : id (1, 2, 5), name ('Le Royal Monceau', 'The Ritz', 'Four Seasons'), location ('Dubai', 'New York', 'London') | Amenities : amenityId (5, 1, 4), amenityName ('Spa', 'Bar', 'Gym') | Hotel_Amenities : hotelId (2, 4, 5), amenityId (4, 1, 1)",
        "ambiguous_queries": [
            "SELECT Amenities.amenityName from Hotel_Amenities join Amenities on Hotel_Amenities.amenityId = Amenities.amenityId join Hotels on Hotel_Amenities.hotelId = Hotels.id GROUP BY Hotel_Amenities.amenityId HAVING COUNT(DISTINCT Hotel_Amenities.hotelId) = (SELECT COUNT(*) FROM Hotels)",
            "select hotels.name , amenities.amenityname from Hotel_Amenities join Amenities on Hotel_Amenities.amenityId = Amenities.amenityId join Hotels on Hotel_Amenities.hotelId = Hotels.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each hotel\": [\"for each hotel individually\", \"common to all hotels\"]}"
        },
        "clarification_context": "\"each hotel\" refers to \"common to all hotels\"",
        "clear_ambiguity": "{\"each hotel\": \"common to all hotels\"}",
        "gold_query": "SELECT Amenities.amenityName from Hotel_Amenities join Amenities on Hotel_Amenities.amenityId = Amenities.amenityId join Hotels on Hotel_Amenities.hotelId = Hotels.id GROUP BY Hotel_Amenities.amenityId HAVING COUNT(DISTINCT Hotel_Amenities.hotelId) = (SELECT COUNT(*) FROM Hotels)"
    },
    {
        "index": 1244,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_terminals_facilities/scope_terminals_facilities.sqlite",
        "question": "Give me the description of the facilities available at each terminal.",
        "schema_without_content": "Terminals : id, name, location | Facilities : id, facilityName, description | Terminals_Facilities : terminalId, facilityId",
        "schema_with_content": "Terminals : id (5, 1, 3), name ('Terminal B', 'Terminal E', 'Terminal C'), location ('Gate 1', 'Gate 2', 'Gate 3') | Facilities : id (3, 1, 4), facilityName ('Dining Hall', 'Kids Play Area', 'Business Lounge'), description ('Clean restroom facilities available.', 'Safe play area for children.', 'Relaxing lounge area for business travelers.') | Terminals_Facilities : terminalId (2, 4, 1), facilityId (2, 4, 1)",
        "ambiguous_queries": [
            "SELECT Facilities.description from Terminals_Facilities join Facilities on Terminals_Facilities.facilityId = Facilities.id join Terminals on Terminals_Facilities.terminalId = Terminals.id GROUP BY Terminals_Facilities.facilityId HAVING COUNT(DISTINCT Terminals_Facilities.terminalId) = (SELECT COUNT(*) FROM Terminals)",
            "select terminals.name , facilities.description from Terminals_Facilities join Facilities on Terminals_Facilities.facilityId = Facilities.id join Terminals on Terminals_Facilities.terminalId = Terminals.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each terminal\": [\"for each terminal individually\", \"common to all terminals\"]}"
        },
        "clarification_context": "\"each terminal\" refers to \"common to all terminals\"",
        "clear_ambiguity": "{\"each terminal\": \"common to all terminals\"}",
        "gold_query": "SELECT Facilities.description from Terminals_Facilities join Facilities on Terminals_Facilities.facilityId = Facilities.id join Terminals on Terminals_Facilities.terminalId = Terminals.id GROUP BY Terminals_Facilities.facilityId HAVING COUNT(DISTINCT Terminals_Facilities.terminalId) = (SELECT COUNT(*) FROM Terminals)"
    },
    {
        "index": 1245,
        "db_id": "Traffic",
        "ambig_type": "scope",
        "db_file": "scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
        "question": "What are the tool types and names for every engineer",
        "schema_without_content": "Traffic_Engineers : id, name, years_of_experience | Tools : tool_id, tool_name, type | Traffic_Engineers_Tools : engineer_id, tool_id",
        "schema_with_content": "Traffic_Engineers : id (4, 2, 5), name ('Michael', 'Anna', 'James'), years_of_experience (25, 28, 20) | Tools : tool_id (3, 4, 5), tool_name ('Accident_Analysis', 'Road_Simulation', 'Software_Modeling'), type ('hardware', 'software', 'hardware') | Traffic_Engineers_Tools : engineer_id (5, 5, 3), tool_id (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Tools.tool_name, Tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)",
            "select traffic_engineers.name , tools.tool_name , tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every engineer\": [\"for each engineer individually\", \"common to all engineers\"]}"
        },
        "clarification_context": "\"every engineer\" refers to \"common to all engineers\"",
        "clear_ambiguity": "{\"every engineer\": \"common to all engineers\"}",
        "gold_query": "SELECT Tools.tool_name, Tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)"
    },
    {
        "index": 1246,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
        "question": "Which languages and default subtitles are associated with every streaming service?",
        "schema_without_content": "Streaming_Services : id, name, url | Subtitles : id, language, default_subtitle | Streaming_Services_Subtitles : streaming_service_id, subtitle_id",
        "schema_with_content": "Streaming_Services : id (5, 4, 2), name ('Hulu', 'Amazon Prime Video', 'Netflix'), url ('https://www.amazon.com/prime-video', 'https://www.disneyplus.com', 'https://www.hulu.com') | Subtitles : id (1, 5, 3), language ('German', 'Italian', 'Spanish'), default_subtitle (0, 1, 0) | Streaming_Services_Subtitles : streaming_service_id (3, 5, 1), subtitle_id (1, 5, 1)",
        "ambiguous_queries": [
            "SELECT Subtitles.language, Subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.name , subtitles.language , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"every streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"every streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_services.name , subtitles.language , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
    },
    {
        "index": 1247,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
        "question": "Which advertisement types are associated with each streaming service?",
        "schema_without_content": "Streaming_Service : id, name, platform | Advertisement : id, type, duration | Streaming_Service_Advertisement : streaming_service_id, advertisement_id",
        "schema_with_content": "Streaming_Service : id (5, 3, 1), name ('Disney+', 'Amazon Prime Video', 'Hulu'), platform ('Web', 'Web', 'App') | Advertisement : id (2, 5, 4), type ('Pre_roll_Ads', 'Mid_roll_Ads', 'Interstitial_Ads'), duration (90.0, 60.0, 30.0) | Streaming_Service_Advertisement : streaming_service_id (2, 3, 5), advertisement_id (1, 1, 4)",
        "ambiguous_queries": [
            "SELECT Advertisement.type from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)",
            "select streaming_service.name , advertisement.type from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"each streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Advertisement.type from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
    },
    {
        "index": 1248,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_press_conferences_participants/scope_press_conferences_participants.sqlite",
        "question": "What id, role, and name of attendees are associated with each conference?",
        "schema_without_content": "Press_Conferences : id, name, date | Participants : id, role, name | Press_Conferences_Participants : press_conference_id, participant_id",
        "schema_with_content": "Press_Conferences : id (3, 4, 5), name ('Tech Company Announcement', 'Environmental Symposium', 'Economic Summit'), date ('2023-01-03', '2023-01-02', '2023-01-04') | Participants : id (1, 3, 5), role ('Expert Panelist', 'Reporter', 'Spokesperson'), name ('Jane Doe', 'David Brown', 'Emily Davis') | Press_Conferences_Participants : press_conference_id (5, 2, 1), participant_id (4, 1, 1)",
        "ambiguous_queries": [
            "SELECT Participants.id, Participants.role, Participants.name from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id GROUP BY Press_Conferences_Participants.participant_id HAVING COUNT(DISTINCT Press_Conferences_Participants.press_conference_id) = (SELECT COUNT(*) FROM Press_Conferences)",
            "select press_conferences.name , participants.id , participants.role , participants.name from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each conference\": [\"for each conference individually\", \"common to all conferences\"]}"
        },
        "clarification_context": "\"each conference\" refers to \"common to all conferences\"",
        "clear_ambiguity": "{\"each conference\": \"common to all conferences\"}",
        "gold_query": "SELECT Participants.id, Participants.role, Participants.name from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id GROUP BY Press_Conferences_Participants.participant_id HAVING COUNT(DISTINCT Press_Conferences_Participants.press_conference_id) = (SELECT COUNT(*) FROM Press_Conferences)"
    },
    {
        "index": 1249,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_environment_and_energy_reporters_sources/scope_environment_and_energy_reporters_sources.sqlite",
        "question": "what descriptions are associated with each environment and energy reporter source?",
        "schema_without_content": "Environment_And_Energy_Reporters : id, name, email | Sources : source_id, source_name, description | Environment_And_Energy_Reporters_Sources : reporter_id, source_id",
        "schema_with_content": "Environment_And_Energy_Reporters : id (1, 3, 5), name ('John Doe', 'Jane Smith', 'Michael Johnson'), email ('jane.smith@example.com', 'david.brown@example.com', 'emily.davis@example.com') | Sources : source_id (5, 4, 1), source_name ('Wind_Energy', 'Solar_Power', 'Bioenergy'), description ('A source on solar power technology and its applications.', 'A source on bioenergy technology and its applications.', 'A source on wind energy technology and its applications.') | Environment_And_Energy_Reporters_Sources : reporter_id (3, 2, 4), source_id (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Sources.description from Environment_And_Energy_Reporters_Sources join Sources on Environment_And_Energy_Reporters_Sources.source_id = Sources.source_id join Environment_And_Energy_Reporters on Environment_And_Energy_Reporters_Sources.reporter_id = Environment_And_Energy_Reporters.id GROUP BY Environment_And_Energy_Reporters_Sources.source_id HAVING COUNT(DISTINCT Environment_And_Energy_Reporters_Sources.reporter_id) = (SELECT COUNT(*) FROM Environment_And_Energy_Reporters)",
            "select environment_and_energy_reporters.name , sources.description from Environment_And_Energy_Reporters_Sources join Sources on Environment_And_Energy_Reporters_Sources.source_id = Sources.source_id join Environment_And_Energy_Reporters on Environment_And_Energy_Reporters_Sources.reporter_id = Environment_And_Energy_Reporters.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each environment and energy reporter source\": [\"for each environment and energy reporter source individually\", \"common to all environment and energy reporter sources\"]}"
        },
        "clarification_context": "\"each environment and energy reporter source\" refers to \"for each environment and energy reporter source individually\"",
        "clear_ambiguity": "{\"each environment and energy reporter source\": \"for each environment and energy reporter source individually\"}",
        "gold_query": "select environment_and_energy_reporters.name , sources.description from Environment_And_Energy_Reporters_Sources join Sources on Environment_And_Energy_Reporters_Sources.source_id = Sources.source_id join Environment_And_Energy_Reporters on Environment_And_Energy_Reporters_Sources.reporter_id = Environment_And_Energy_Reporters.id"
    },
    {
        "index": 1250,
        "db_id": "Traffic",
        "ambig_type": "scope",
        "db_file": "scope/Traffic/scope_education_program_target_audiences/scope_education_program_target_audiences.sqlite",
        "question": "Show me the audience each education program is targeting.",
        "schema_without_content": "Education_Program : id, name, description | Target_Audiences : id, audience_name | Education_Program_Target_Audiences : education_program_id, target_audience_id",
        "schema_with_content": "Education_Program : id (4, 2, 5), name ('Accident Prevention', 'Traffic Laws & Regulations', 'Advanced Driving Techniques'), description ('Understand traffic laws and regulations', 'This program covers the basic driving rules', 'Learn how to prevent accidents on road') | Target_Audiences : id (1, 5, 3), audience_name ('Adult Driver Refresher Course', 'Road Safety Awareness Program', 'Teen Driver Education') | Education_Program_Target_Audiences : education_program_id (3, 5, 4), target_audience_id (2, 2, 1)",
        "ambiguous_queries": [
            "SELECT Target_Audiences.audience_name from Education_Program_Target_Audiences join Target_Audiences on Education_Program_Target_Audiences.target_audience_id = Target_Audiences.id join Education_Program on Education_Program_Target_Audiences.education_program_id = Education_Program.id GROUP BY Education_Program_Target_Audiences.target_audience_id HAVING COUNT(DISTINCT Education_Program_Target_Audiences.education_program_id) = (SELECT COUNT(*) FROM Education_Program)",
            "select education_program.name , target_audiences.audience_name from Education_Program_Target_Audiences join Target_Audiences on Education_Program_Target_Audiences.target_audience_id = Target_Audiences.id join Education_Program on Education_Program_Target_Audiences.education_program_id = Education_Program.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each education program\": [\"for each education program individually\", \"common to all education programs\"]}"
        },
        "clarification_context": "\"each education program\" refers to \"for each education program individually\"",
        "clear_ambiguity": "{\"each education program\": \"for each education program individually\"}",
        "gold_query": "select education_program.name , target_audiences.audience_name from Education_Program_Target_Audiences join Target_Audiences on Education_Program_Target_Audiences.target_audience_id = Target_Audiences.id join Education_Program on Education_Program_Target_Audiences.education_program_id = Education_Program.id"
    },
    {
        "index": 1251,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
        "question": "List the price of products sold in every duty-free shop.",
        "schema_without_content": "Duty_Free_Shops : shop_id, name, location | Products : product_id, category, price | Duty_Free_Shops_Products : shop_id, product_id, quantity",
        "schema_with_content": "Duty_Free_Shops : shop_id (2, 1, 5), name ('Shop3', 'Shop5', 'Shop4'), location ('Terminal A', 'Terminal B', 'Terminal C') | Products : product_id (4, 3, 1), category ('Fashion Accessories', 'Cosmetics', 'Electronics'), price (150.99, 20.0, 65.43) | Duty_Free_Shops_Products : shop_id (1, 3, 2), product_id (4, 3, 1), quantity (5, 10, 30)",
        "ambiguous_queries": [
            "SELECT Products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)",
            "select duty_free_shops.name , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every duty-free shop\": [\"for each duty-free shop individually\", \"common to all duty-free shops\"]}"
        },
        "clarification_context": "\"every duty-free shop\" refers to \"for each duty-free shop individually\"",
        "clear_ambiguity": "{\"every duty-free shop\": \"for each duty-free shop individually\"}",
        "gold_query": "select duty_free_shops.name , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
    },
    {
        "index": 1252,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_screenplays_characters/scope_screenplays_characters.sqlite",
        "question": "Show me the characters that every screenplay has.",
        "schema_without_content": "Screenplays : screenplayID, title, director | Characters : characterID, roleType | Screenplays_Characters : screenplayID, characterID | Directors : directorID, firstName, lastName | Actors : actorID, firstName, lastName | Films : filmID, title, releaseYear, directorID | Film_Actors : filmID, actorID, role",
        "schema_with_content": "Screenplays : screenplayID (3, 2, 4), title ('Inception', 'The Dark Knight', 'Interstellar'), director ('Christopher Nolan', 'Christopher Nolan', 'Christopher Nolan') | Characters : characterID (1, 2, 3), roleType ('Supporting Role', 'Protagonist', 'Antagonist') | Screenplays_Characters : screenplayID (3, 1, 2), characterID (1, 1, 1) | Directors : directorID (2, 1), firstName ('Christopher', 'Quentin'), lastName ('Tarantino', 'Nolan') | Actors : actorID (1, 2, 3), firstName ('Leonardo', 'Joseph', 'Ellen'), lastName ('DiCaprio', 'Hardy', 'Gordon-Levitt') | Films : filmID (3, 2, 1), title ('Inception', 'Interstellar', 'The Dark Knight'), releaseYear (2010, 1994, 2014), directorID (2, 1, 1) | Film_Actors : filmID (3, 2, 4), actorID (1, 3, 4), role ('Rachel Dawes', 'Vincent Vega', 'Jules Winnfield')",
        "ambiguous_queries": [
            "SELECT Characters.roleType from Screenplays_Characters join Characters on Screenplays_Characters.characterID = Characters.characterID join Screenplays on Screenplays_Characters.screenplayID = Screenplays.screenplayID GROUP BY Screenplays_Characters.characterID HAVING COUNT(DISTINCT Screenplays_Characters.screenplayID) = (SELECT COUNT(*) FROM Screenplays)",
            "select screenplays.title , characters.roletype from Screenplays_Characters join Characters on Screenplays_Characters.characterID = Characters.characterID join Screenplays on Screenplays_Characters.screenplayID = Screenplays.screenplayID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every screenplay\": [\"for each screenplay individually\", \"common to all screenplays\"]}"
        },
        "clarification_context": "\"every screenplay\" refers to \"common to all screenplays\"",
        "clear_ambiguity": "{\"every screenplay\": \"common to all screenplays\"}",
        "gold_query": "SELECT Characters.roleType from Screenplays_Characters join Characters on Screenplays_Characters.characterID = Characters.characterID join Screenplays on Screenplays_Characters.screenplayID = Screenplays.screenplayID GROUP BY Screenplays_Characters.characterID HAVING COUNT(DISTINCT Screenplays_Characters.screenplayID) = (SELECT COUNT(*) FROM Screenplays)"
    },
    {
        "index": 1253,
        "db_id": "Traffic",
        "ambig_type": "scope",
        "db_file": "scope/Traffic/scope_routes_restrictions/scope_routes_restrictions.sqlite",
        "question": "Show me the restriction types for each route.",
        "schema_without_content": "Routes : id, routeName, distance | Restrictions : restrictionType, value | Routes_Restrictions : routesId, restrictionsType",
        "schema_with_content": "Routes : id (5, 2, 3), routeName ('Route3', 'Route2', 'Route5'), distance (100.0, 500.0, 200.0) | Restrictions : restrictionType ('Length Clearance', 'Height Clearance', 'Weight Limit'), value (60.0, 7.5, 15.0) | Routes_Restrictions : routesId (2, 1, 2), restrictionsType ('Speed Limit', 'Speed Limit', 'Speed Limit')",
        "ambiguous_queries": [
            "SELECT Restrictions.restrictionType from routes_restrictions join routes ON routes_restrictions.routesId = Routes.id join restrictions ON routes_restrictions.restrictionsType = Restrictions.restrictionType GROUP BY Routes_Restrictions.restrictionsType HAVING COUNT(DISTINCT Routes_Restrictions.routesId) = (SELECT COUNT(*) FROM Routes)",
            "select routes.routename , restrictions.restrictiontype from routes_restrictions join routes ON routes_restrictions.routesId = Routes.id join restrictions ON routes_restrictions.restrictionsType = Restrictions.restrictionType"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each route\": [\"for each route individually\", \"common to all routes\"]}"
        },
        "clarification_context": "\"each route\" refers to \"common to all routes\"",
        "clear_ambiguity": "{\"each route\": \"common to all routes\"}",
        "gold_query": "SELECT Restrictions.restrictionType from routes_restrictions join routes ON routes_restrictions.routesId = Routes.id join restrictions ON routes_restrictions.restrictionsType = Restrictions.restrictionType GROUP BY Routes_Restrictions.restrictionsType HAVING COUNT(DISTINCT Routes_Restrictions.routesId) = (SELECT COUNT(*) FROM Routes)"
    },
    {
        "index": 1254,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
        "question": "Give me the names and descriptions of the components every UX designer uses.",
        "schema_without_content": "Ux_Designers : id, name, years_of_experience | Components : id, component_name, description | Ux_Designers_Components : ux_designer_id, component_id",
        "schema_with_content": "Ux_Designers : id (4, 2, 1), name ('David Brown', 'Mike Johnson', 'Jane Smith'), years_of_experience (3, 6, 2) | Components : id (2, 3, 5), component_name ('User Interface Design', 'Usability Testing', 'Responsive Web Design'), description ('UI design involves creating interfaces that are visually appealing and user-friendly.', 'ID focuses on designing interactive elements within a UI to create an engaging experience.', 'A navigation system helps users move between different sections of a website.') | Ux_Designers_Components : ux_designer_id (1, 4, 2), component_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Components.component_name, Components.description from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id GROUP BY Ux_Designers_Components.component_id HAVING COUNT(DISTINCT Ux_Designers_Components.ux_designer_id) = (SELECT COUNT(*) FROM Ux_Designers)",
            "select ux_designers.name , components.component_name , components.description from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every UX designer\": [\"for each UX designer individually\", \"common to all UX designers\"]}"
        },
        "clarification_context": "\"every UX designer\" refers to \"for each UX designer individually\"",
        "clear_ambiguity": "{\"every UX designer\": \"for each UX designer individually\"}",
        "gold_query": "select ux_designers.name , components.component_name , components.description from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id"
    },
    {
        "index": 1255,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_homeowners_associations_rules/scope_homeowners_associations_rules.sqlite",
        "question": "Show me the rules that each homeowners association has.",
        "schema_without_content": "Homeowners_associations : id, name, location | Rules : ruleid, rulename, description | Homes : houseid, address, price | Homeowners_associations_homes : associd, houseid | Homeowners_association_rules : associd, ruleid",
        "schema_with_content": "Homeowners_associations : id (4, 5, 2), name ('Cherry Blossom Club', 'Sunnyvale HOA', 'Diamond Cove Community'), location ('New York', 'Florida', 'Washington') | Rules : ruleid (1, 3, 2), rulename ('Noise Ordinance', 'Pet Restrictions', 'Parking Regulations'), description ('All vehicles must park on driveways only.', 'Respect quiet hours from 10 PM - 7 AM.', 'Maintain a well-manicured lawn and trimmed hedges.') | Homes : houseid (1, 2, 5), address ('789 Pine Rd', '456 Oak Ave', '202 Maple Dr'), price (600000.0, 400000.0, 300000.0) | Homeowners_associations_homes : associd (1, 3, 2), houseid (3, 2, 5) | Homeowners_association_rules : associd (5, 1, 4), ruleid (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Rules.rulename from Homeowners_association_rules join Rules on Homeowners_association_rules.ruleid = Rules.ruleid join Homeowners_associations on Homeowners_association_rules.associd = Homeowners_associations.id GROUP BY Homeowners_association_rules.ruleid HAVING COUNT(DISTINCT Homeowners_association_rules.associd) = (SELECT COUNT(*) FROM Homeowners_associations)",
            "select homeowners_associations.name , rules.rulename from Homeowners_association_rules join Rules on Homeowners_association_rules.ruleid = Rules.ruleid join Homeowners_associations on Homeowners_association_rules.associd = Homeowners_associations.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each homeowners association\": [\"for each homeowners association individually\", \"common to all homeowners associations\"]}"
        },
        "clarification_context": "\"each homeowners association\" refers to \"for each homeowners association individually\"",
        "clear_ambiguity": "{\"each homeowners association\": \"for each homeowners association individually\"}",
        "gold_query": "select homeowners_associations.name , rules.rulename from Homeowners_association_rules join Rules on Homeowners_association_rules.ruleid = Rules.ruleid join Homeowners_associations on Homeowners_association_rules.associd = Homeowners_associations.id"
    },
    {
        "index": 1256,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_medical_schools_courses/scope_medical_schools_courses.sqlite",
        "question": "Give me the courses and their durations that each medical school offers.",
        "schema_without_content": "Medical_Schools : id, name, location | Courses : id, courseName, duration | Medical_School_Courses : id, schoolId, courseId",
        "schema_with_content": "Medical_Schools : id (3, 1, 2), name ('Harvard Medical School', 'Johns Hopkins University School of Medicine', 'University of California - San Francisco School of Medicine'), location ('New Haven', 'Baltimore', 'San Francisco') | Courses : id (5, 1, 4), courseName ('Physiology', 'Pharmacology', 'Pathology'), duration (3, 3, 2) | Medical_School_Courses : id (6, 4, 2), schoolId (1, 3, 5), courseId (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Courses.courseName, Courses.duration from Medical_School_Courses join Courses on Medical_School_Courses.courseId = Courses.id join Medical_Schools on Medical_School_Courses.schoolId = Medical_Schools.id GROUP BY Medical_School_Courses.courseId HAVING COUNT(DISTINCT Medical_School_Courses.schoolId) = (SELECT COUNT(*) FROM Medical_Schools)",
            "select medical_schools.name , courses.coursename , courses.duration from Medical_School_Courses join Courses on Medical_School_Courses.courseId = Courses.id join Medical_Schools on Medical_School_Courses.schoolId = Medical_Schools.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each medical school\": [\"for each medical school individually\", \"common to all medical schools\"]}"
        },
        "clarification_context": "\"each medical school\" refers to \"common to all medical schools\"",
        "clear_ambiguity": "{\"each medical school\": \"common to all medical schools\"}",
        "gold_query": "SELECT Courses.courseName, Courses.duration from Medical_School_Courses join Courses on Medical_School_Courses.courseId = Courses.id join Medical_Schools on Medical_School_Courses.schoolId = Medical_Schools.id GROUP BY Medical_School_Courses.courseId HAVING COUNT(DISTINCT Medical_School_Courses.schoolId) = (SELECT COUNT(*) FROM Medical_Schools)"
    },
    {
        "index": 1257,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_greenhouse_plant/scope_greenhouse_plant.sqlite",
        "question": "What plant name do we have for every greenhouse?",
        "schema_without_content": "Greenhouse : id, name, location | Plant : id, name, type | Greenhouse_Plant : greenhouse_id, plant_id, quantity",
        "schema_with_content": "Greenhouse : id (2, 5, 3), name ('Greenhouse C', 'Greenhouse B', 'Greenhouse D'), location ('Texas', 'Washington', 'California') | Plant : id (5, 3, 4), name ('Lettuce', 'Tomato', 'Pepper'), type ('Leafy Vegetable', 'Root Vegetable', 'Fruit') | Greenhouse_Plant : greenhouse_id (5, 4, 5), plant_id (1, 1, 1), quantity ()",
        "ambiguous_queries": [
            "SELECT Plant.name from Greenhouse_Plant join Plant on Greenhouse_Plant.plant_id = Plant.id join Greenhouse on Greenhouse_Plant.greenhouse_id = Greenhouse.id GROUP BY Greenhouse_Plant.plant_id HAVING COUNT(DISTINCT Greenhouse_Plant.greenhouse_id) = (SELECT COUNT(*) FROM Greenhouse)",
            "select greenhouse.name , plant.name from Greenhouse_Plant join Plant on Greenhouse_Plant.plant_id = Plant.id join Greenhouse on Greenhouse_Plant.greenhouse_id = Greenhouse.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every greenhouse\": [\"for each greenhouse individually\", \"common to all greenhouses\"]}"
        },
        "clarification_context": "\"every greenhouse\" refers to \"common to all greenhouses\"",
        "clear_ambiguity": "{\"every greenhouse\": \"common to all greenhouses\"}",
        "gold_query": "SELECT Plant.name from Greenhouse_Plant join Plant on Greenhouse_Plant.plant_id = Plant.id join Greenhouse on Greenhouse_Plant.greenhouse_id = Greenhouse.id GROUP BY Greenhouse_Plant.plant_id HAVING COUNT(DISTINCT Greenhouse_Plant.greenhouse_id) = (SELECT COUNT(*) FROM Greenhouse)"
    },
    {
        "index": 1258,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_online_learning_platforms_courses/scope_online_learning_platforms_courses.sqlite",
        "question": "What course descriptions do we have for every learning platform",
        "schema_without_content": "Users : userID, username, password | Online_Learning_Platforms : platformID, name, website | Courses : courseID, title, description | Enrolled_Students : studentID, courseID, enrollmentDate | Ratings : ratingID, studentID, courseID, stars, reviewText, submissionDate | Instructors : instructorID, firstName, lastName, email | Course_Instructor : courseID, instructorID, startDate, endDate | Online_Learning_Platforms_Courses : platformID, courseID, availabilityStatus",
        "schema_with_content": "Users : userID (2, 5, 4), username ('john_doe', 'emily_black', 'alice_white'), password ('securepass', 'mypassword', 'mysecretpass') | Online_Learning_Platforms : platformID (1, 2, 5), name ('LinkedIn Learning', 'Coursera', 'edX'), website ('www.edx.org', 'www.codecademy.com', 'www.udemy.com') | Courses : courseID (3, 1, 4), title ('Programming_Basics', 'Data_Science', 'Mathematics_For_Engineers'), description ('This course covers the basics of programming languages.', 'This advanced course covers artificial intelligence concepts and applications.', 'This comprehensive course teaches data science skills and techniques.') | Enrolled_Students : studentID (3, 2, 4), courseID (4, 5, 2), enrollmentDate ('2021-08-15', '2021-07-01', '2021-10-01') | Ratings : ratingID (5, 1, 4), studentID (3, 2, 4), courseID (3, 5, 1), stars (5, 4, 5), reviewText ('Good course but could use more examples.', 'Excellent course! Highly recommended.', 'The content was good, but I felt it lacked depth at times.'), submissionDate ('2021-09-05', '2021-08-10', '2021-07-15') | Instructors : instructorID (2, 4, 1), firstName ('John', 'Jane', 'Alice'), lastName ('Black', 'Smith', 'Brown'), email ('alicw@example.com', 'johnd@example.com', 'janes@example.com') | Course_Instructor : courseID (2, 1, 5), instructorID (5, 2, 1), startDate ('2021-04-01', '2021-01-01', '2021-05-01'), endDate ('2022-12-31', '2022-12-31', '2022-12-31') | Online_Learning_Platforms_Courses : platformID (2, 4, 5), courseID (2, 3, 1), availabilityStatus ('Available', 'Available', 'Unavailable')",
        "ambiguous_queries": [
            "SELECT Courses.description from Online_Learning_Platforms_Courses join Courses on Online_Learning_Platforms_Courses.courseID = Courses.courseID join Online_Learning_Platforms on Online_Learning_Platforms_Courses.platformID = Online_Learning_Platforms.platformID GROUP BY Online_Learning_Platforms_Courses.courseID HAVING COUNT(DISTINCT Online_Learning_Platforms_Courses.platformID) = (SELECT COUNT(*) FROM Online_Learning_Platforms)",
            "select online_learning_platforms.name , courses.description from Online_Learning_Platforms_Courses join Courses on Online_Learning_Platforms_Courses.courseID = Courses.courseID join Online_Learning_Platforms on Online_Learning_Platforms_Courses.platformID = Online_Learning_Platforms.platformID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every learning platform\": [\"for each learning platform individually\", \"common to all learning platforms\"]}"
        },
        "clarification_context": "\"every learning platform\" refers to \"common to all learning platforms\"",
        "clear_ambiguity": "{\"every learning platform\": \"common to all learning platforms\"}",
        "gold_query": "SELECT Courses.description from Online_Learning_Platforms_Courses join Courses on Online_Learning_Platforms_Courses.courseID = Courses.courseID join Online_Learning_Platforms on Online_Learning_Platforms_Courses.platformID = Online_Learning_Platforms.platformID GROUP BY Online_Learning_Platforms_Courses.courseID HAVING COUNT(DISTINCT Online_Learning_Platforms_Courses.platformID) = (SELECT COUNT(*) FROM Online_Learning_Platforms)"
    },
    {
        "index": 1259,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_marketing_agency_creative_position/scope_marketing_agency_creative_position.sqlite",
        "question": "Give me the creative position for each marketing agency.",
        "schema_without_content": "Marketing_Agency : id, name, location | Creative_Position : id, position | Marketing_Agency_Creative_Positions : agency_id, position_id",
        "schema_with_content": "Marketing_Agency : id (1, 3, 4), name ('Media Consultancy D', 'PR Firm C', 'Digital Media Company B'), location ('Chicago', 'Los Angeles', 'New York') | Creative_Position : id (2, 5, 3), position ('Web Developer', 'Copywriter', 'Graphic Designer') | Marketing_Agency_Creative_Positions : agency_id (2, 5, 4), position_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Creative_Position.position from Marketing_Agency_Creative_Positions join Creative_Position on Marketing_Agency_Creative_Positions.position_id = Creative_Position.id join Marketing_Agency on Marketing_Agency_Creative_Positions.agency_id = Marketing_Agency.id GROUP BY Marketing_Agency_Creative_Positions.position_id HAVING COUNT(DISTINCT Marketing_Agency_Creative_Positions.agency_id) = (SELECT COUNT(*) FROM Marketing_Agency)",
            "select marketing_agency.name , creative_position.position from Marketing_Agency_Creative_Positions join Creative_Position on Marketing_Agency_Creative_Positions.position_id = Creative_Position.id join Marketing_Agency on Marketing_Agency_Creative_Positions.agency_id = Marketing_Agency.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each marketing agency\": [\"for each marketing agency individually\", \"common to all marketing agencies\"]}"
        },
        "clarification_context": "\"each marketing agency\" refers to \"common to all marketing agencies\"",
        "clear_ambiguity": "{\"each marketing agency\": \"common to all marketing agencies\"}",
        "gold_query": "SELECT Creative_Position.position from Marketing_Agency_Creative_Positions join Creative_Position on Marketing_Agency_Creative_Positions.position_id = Creative_Position.id join Marketing_Agency on Marketing_Agency_Creative_Positions.agency_id = Marketing_Agency.id GROUP BY Marketing_Agency_Creative_Positions.position_id HAVING COUNT(DISTINCT Marketing_Agency_Creative_Positions.agency_id) = (SELECT COUNT(*) FROM Marketing_Agency)"
    },
    {
        "index": 1260,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_amusement_parks_rides/scope_amusement_parks_rides.sqlite",
        "question": "What ride types are there at every amusement park?",
        "schema_without_content": "Amusement_Parks : id, name, location | Rides : id, ride_name, ride_type | Amusement_Parks_Rides : amusement_park_id, rides_id",
        "schema_with_content": "Amusement_Parks : id (4, 5, 2), name ('Six Flags Magic Mountain', 'Disneyland', 'Universal Studios'), location ('California', 'Florida', 'California') | Rides : id (5, 3, 1), ride_name ('Bumper Cars', 'Ferris Wheel', 'Roller Coaster'), ride_type ('Family Ride', 'Attraction', 'Kids Ride') | Amusement_Parks_Rides : amusement_park_id (4, 5, 3), rides_id (1, 1, 4)",
        "ambiguous_queries": [
            "SELECT Rides.ride_type from Amusement_Parks_Rides join Rides on Amusement_Parks_Rides.rides_id = Rides.id join Amusement_Parks on Amusement_Parks_Rides.amusement_park_id = Amusement_Parks.id GROUP BY Amusement_Parks_Rides.rides_id HAVING COUNT(DISTINCT Amusement_Parks_Rides.amusement_park_id) = (SELECT COUNT(*) FROM Amusement_Parks)",
            "select amusement_parks.name , rides.ride_type from Amusement_Parks_Rides join Rides on Amusement_Parks_Rides.rides_id = Rides.id join Amusement_Parks on Amusement_Parks_Rides.amusement_park_id = Amusement_Parks.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every amusement park\": [\"for each amusement park individually\", \"common to all amusement parks\"]}"
        },
        "clarification_context": "\"every amusement park\" refers to \"common to all amusement parks\"",
        "clear_ambiguity": "{\"every amusement park\": \"common to all amusement parks\"}",
        "gold_query": "SELECT Rides.ride_type from Amusement_Parks_Rides join Rides on Amusement_Parks_Rides.rides_id = Rides.id join Amusement_Parks on Amusement_Parks_Rides.amusement_park_id = Amusement_Parks.id GROUP BY Amusement_Parks_Rides.rides_id HAVING COUNT(DISTINCT Amusement_Parks_Rides.amusement_park_id) = (SELECT COUNT(*) FROM Amusement_Parks)"
    },
    {
        "index": 1261,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_authorities_programs/scope_authorities_programs.sqlite",
        "question": "Show me the programs each authority has.",
        "schema_without_content": "Authorities : authority_id, name, contact_info | Programs : program_id, program_name, description | Authorities_Programs : id, authority_id, program_id",
        "schema_with_content": "Authorities : authority_id (3, 5, 2), name ('Authority C', 'Authority E', 'Authority A'), contact_info ('contact@authorityd.com', 'contact@authoritye.com', 'contact@authoritya.com') | Programs : program_id (5, 4, 3), program_name ('Emergency_Housing', 'Public_Housing', 'Affordable_Housing'), description ('Temporary housing solutions for those facing homelessness.', 'A government-subsidized housing program.', 'Grants and loans for first-time home buyers.') | Authorities_Programs : id (3, 5, 6), authority_id (5, 3, 5), program_id (1, 5, 1)",
        "ambiguous_queries": [
            "SELECT Programs.program_name from Authorities_Programs join Programs on Authorities_Programs.program_id = Programs.program_id join Authorities on Authorities_Programs.authority_id = Authorities.authority_id GROUP BY Authorities_Programs.program_id HAVING COUNT(DISTINCT Authorities_Programs.authority_id) = (SELECT COUNT(*) FROM Authorities)",
            "select authorities.name , programs.program_name from Authorities_Programs join Programs on Authorities_Programs.program_id = Programs.program_id join Authorities on Authorities_Programs.authority_id = Authorities.authority_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each authority\": [\"for each authority individually\", \"common to all authorities\"]}"
        },
        "clarification_context": "\"each authority\" refers to \"for each authority individually\"",
        "clear_ambiguity": "{\"each authority\": \"for each authority individually\"}",
        "gold_query": "select authorities.name , programs.program_name from Authorities_Programs join Programs on Authorities_Programs.program_id = Programs.program_id join Authorities on Authorities_Programs.authority_id = Authorities.authority_id"
    },
    {
        "index": 1262,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_pesticides_ingredients/scope_pesticides_ingredients.sqlite",
        "question": "Give me the names of the ingredients in all pesticides",
        "schema_without_content": "Pesticides : id, name, usage_instructions | Ingredients : id, ingredient_name | Pesticides_Ingredients : pesticide_id, ingredient_id",
        "schema_with_content": "Pesticides : id (2, 5, 4), name ('EcoGuard', 'CropShield', 'BugOff'), usage_instructions ('Apply only when needed', 'Use sparingly on sensitive crops', 'Reapply after heavy rainfall') | Ingredients : id (1, 5, 2), ingredient_name ('Spinosad', 'Neem Oil', 'Rotenone') | Pesticides_Ingredients : pesticide_id (4, 1, 5), ingredient_id (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Ingredients.ingredient_name from Pesticides_Ingredients join Ingredients on Pesticides_Ingredients.ingredient_id = Ingredients.id join Pesticides on Pesticides_Ingredients.pesticide_id = Pesticides.id GROUP BY Pesticides_Ingredients.ingredient_id HAVING COUNT(DISTINCT Pesticides_Ingredients.pesticide_id) = (SELECT COUNT(*) FROM Pesticides)",
            "select pesticides.name , ingredients.ingredient_name from Pesticides_Ingredients join Ingredients on Pesticides_Ingredients.ingredient_id = Ingredients.id join Pesticides on Pesticides_Ingredients.pesticide_id = Pesticides.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"all pesticides\": [\"for each pesticides individually\", \"common to all pesticides\"]}"
        },
        "clarification_context": "\"all pesticides\" refers to \"for each pesticides individually\"",
        "clear_ambiguity": "{\"all pesticides\": \"for each pesticides individually\"}",
        "gold_query": "select pesticides.name , ingredients.ingredient_name from Pesticides_Ingredients join Ingredients on Pesticides_Ingredients.ingredient_id = Ingredients.id join Pesticides on Pesticides_Ingredients.pesticide_id = Pesticides.id"
    },
    {
        "index": 1263,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_national_parks_trails/scope_national_parks_trails.sqlite",
        "question": "What length of trails do we have for each national park?",
        "schema_without_content": "National_Parks : park_id, name, location | Trails : trail_id, difficulty, length | National_Parks_Trails : national_park_id, trail_id",
        "schema_with_content": "National_Parks : park_id (2, 1, 3), name ('Everglades', 'Great Smoky Mountains', 'Rocky Mountain'), location ('Florida', 'Arizona', 'Wyoming') | Trails : trail_id (5, 2, 4), difficulty ('Difficult_Trail', 'Moderate_Trail', 'Beginner_Trail'), length (9.0, 2.0, 6.0) | National_Parks_Trails : national_park_id (5, 5, 1), trail_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Trails.length from National_Parks_Trails join Trails on National_Parks_Trails.trail_id = Trails.trail_id join National_Parks on National_Parks_Trails.national_park_id = National_Parks.park_id GROUP BY National_Parks_Trails.trail_id HAVING COUNT(DISTINCT National_Parks_Trails.national_park_id) = (SELECT COUNT(*) FROM National_Parks)",
            "select national_parks.name , trails.length from National_Parks_Trails join Trails on National_Parks_Trails.trail_id = Trails.trail_id join National_Parks on National_Parks_Trails.national_park_id = National_Parks.park_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each national park\": [\"for each national park individually\", \"common to all national parks\"]}"
        },
        "clarification_context": "\"each national park\" refers to \"common to all national parks\"",
        "clear_ambiguity": "{\"each national park\": \"common to all national parks\"}",
        "gold_query": "SELECT Trails.length from National_Parks_Trails join Trails on National_Parks_Trails.trail_id = Trails.trail_id join National_Parks on National_Parks_Trails.national_park_id = National_Parks.park_id GROUP BY National_Parks_Trails.trail_id HAVING COUNT(DISTINCT National_Parks_Trails.national_park_id) = (SELECT COUNT(*) FROM National_Parks)"
    },
    {
        "index": 1264,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_post_production_sound_mixers_recording_environments/scope_post_production_sound_mixers_recording_environments.sqlite",
        "question": "Show me the environment every sound mixer records in.",
        "schema_without_content": "Post_Production_Sound_Mixers : id, name, years_of_experience | Recording_Environments : id, environment_name | FilmProjects : id, title, release_date | Films_with_Sound_Mixing : film_id, mixer_id | Sound_Mixer_Environment_History : sound_mixer_id, environment_id, start_year, end_year",
        "schema_with_content": "Post_Production_Sound_Mixers : id (4, 3, 2), name ('Tom Green', 'Jane Smith', 'John Doe'), years_of_experience (7, 6, 8) | Recording_Environments : id (1, 3, 5), environment_name ('Live Studio', 'Dubbing Theatre', 'Outdoor Location') | FilmProjects : id (2, 4, 3), title ('Film E', 'Film D', 'Film B'), release_date ('2023-01-01', '2023-02-01', '2023-05-01') | Films_with_Sound_Mixing : film_id (2, 1, 3), mixer_id (4, 1, 2) | Sound_Mixer_Environment_History : sound_mixer_id (1, 4, 2), environment_id (2, 2, 1), start_year (2014, 2019, 2015), end_year (2020, 2018, 2019)",
        "ambiguous_queries": [
            "SELECT Recording_Environments.environment_name from Sound_Mixer_Environment_History join Recording_Environments on Sound_Mixer_Environment_History.environment_id = Recording_Environments.id join Post_Production_Sound_Mixers on Sound_Mixer_Environment_History.sound_mixer_id = Post_Production_Sound_Mixers.id GROUP BY Sound_Mixer_Environment_History.environment_id HAVING COUNT(DISTINCT Sound_Mixer_Environment_History.sound_mixer_id) = (SELECT COUNT(*) FROM Post_Production_Sound_Mixers)",
            "select post_production_sound_mixers.name , recording_environments.environment_name from Sound_Mixer_Environment_History join Recording_Environments on Sound_Mixer_Environment_History.environment_id = Recording_Environments.id join Post_Production_Sound_Mixers on Sound_Mixer_Environment_History.sound_mixer_id = Post_Production_Sound_Mixers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every sound mixer\": [\"for each sound mixer individually\", \"common to all sound mixers\"]}"
        },
        "clarification_context": "\"every sound mixer\" refers to \"for each sound mixer individually\"",
        "clear_ambiguity": "{\"every sound mixer\": \"for each sound mixer individually\"}",
        "gold_query": "select post_production_sound_mixers.name , recording_environments.environment_name from Sound_Mixer_Environment_History join Recording_Environments on Sound_Mixer_Environment_History.environment_id = Recording_Environments.id join Post_Production_Sound_Mixers on Sound_Mixer_Environment_History.sound_mixer_id = Post_Production_Sound_Mixers.id"
    },
    {
        "index": 1265,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_maritime_villages_boat_tours/scope_maritime_villages_boat_tours.sqlite",
        "question": "Show me the names and descriptions of the tours each maritime village offers.",
        "schema_without_content": "Maritime_Villages : id, name, location | Boat_Tours : id, tour_name, description | Maritime_Villages_Boat_Tours : maritime_village_id, boat_tour_id",
        "schema_with_content": "Maritime_Villages : id (2, 4, 3), name ('Village4', 'Village1', 'Village2'), location ('Location5', 'Location3', 'Location2') | Boat_Tours : id (5, 3, 4), tour_name ('Dolphin Spotting', 'Fishing Tour', 'Sunset Cruise'), description ('Relaxing cruise on the sea.', 'A tour to watch whales.', 'Spot dolphins in their natural habitat.') | Maritime_Villages_Boat_Tours : maritime_village_id (5, 5, 2), boat_tour_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Boat_Tours.tour_name, Boat_Tours.description from Maritime_Villages_Boat_Tours join Boat_Tours on Maritime_Villages_Boat_Tours.boat_tour_id = Boat_Tours.id join Maritime_Villages on Maritime_Villages_Boat_Tours.maritime_village_id = Maritime_Villages.id GROUP BY Maritime_Villages_Boat_Tours.boat_tour_id HAVING COUNT(DISTINCT Maritime_Villages_Boat_Tours.maritime_village_id) = (SELECT COUNT(*) FROM Maritime_Villages)",
            "select maritime_villages.name , boat_tours.tour_name , boat_tours.description from Maritime_Villages_Boat_Tours join Boat_Tours on Maritime_Villages_Boat_Tours.boat_tour_id = Boat_Tours.id join Maritime_Villages on Maritime_Villages_Boat_Tours.maritime_village_id = Maritime_Villages.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each maritime village\": [\"for each maritime village individually\", \"common to all maritime villages\"]}"
        },
        "clarification_context": "\"each maritime village\" refers to \"for each maritime village individually\"",
        "clear_ambiguity": "{\"each maritime village\": \"for each maritime village individually\"}",
        "gold_query": "select maritime_villages.name , boat_tours.tour_name , boat_tours.description from Maritime_Villages_Boat_Tours join Boat_Tours on Maritime_Villages_Boat_Tours.boat_tour_id = Boat_Tours.id join Maritime_Villages on Maritime_Villages_Boat_Tours.maritime_village_id = Maritime_Villages.id"
    },
    {
        "index": 1266,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
        "question": "What languages are available for subtitles on each streaming service?",
        "schema_without_content": "Streaming_Services : id, name, url | Subtitles : id, language, default_subtitle | Streaming_Services_Subtitles : streaming_service_id, subtitle_id",
        "schema_with_content": "Streaming_Services : id (2, 5, 3), name ('Hulu', 'HBO Max', 'Amazon Prime Video'), url ('https://www.hulu.com', 'https://www.hbomax.com', 'https://www.amazon.com/prime-video') | Subtitles : id (1, 5, 4), language ('Italian', 'French', 'German'), default_subtitle (0, 0, 0) | Streaming_Services_Subtitles : streaming_service_id (5, 4, 5), subtitle_id (2, 3, 5)",
        "ambiguous_queries": [
            "SELECT Subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.name , subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"each streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)"
    },
    {
        "index": 1267,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_press_conferences_participants/scope_press_conferences_participants.sqlite",
        "question": "List the names of the participants of every press conference.",
        "schema_without_content": "Press_Conferences : id, name, date | Participants : id, role, name | Press_Conferences_Participants : press_conference_id, participant_id",
        "schema_with_content": "Press_Conferences : id (2, 4, 3), name ('Tech Company Announcement', 'Presidential Speech', 'Economic Summit'), date ('2023-01-03', '2023-01-04', '2023-01-02') | Participants : id (1, 2, 5), role ('Reporter', 'Expert Panelist', 'Head of Department'), name ('Mike Johnson', 'David Brown', 'John Smith') | Press_Conferences_Participants : press_conference_id (3, 1, 2), participant_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Participants.name from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id GROUP BY Press_Conferences_Participants.participant_id HAVING COUNT(DISTINCT Press_Conferences_Participants.press_conference_id) = (SELECT COUNT(*) FROM Press_Conferences)",
            "select press_conferences.name , participants.name from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every press conference\": [\"for each press conference individually\", \"common to all press conferences\"]}"
        },
        "clarification_context": "\"every press conference\" refers to \"for each press conference individually\"",
        "clear_ambiguity": "{\"every press conference\": \"for each press conference individually\"}",
        "gold_query": "select press_conferences.name , participants.name from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id"
    },
    {
        "index": 1268,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_freelance_journalists_assignments/scope_freelance_journalists_assignments.sqlite",
        "question": "What deadline of assignments is associated with each freelance journalist?",
        "schema_without_content": "Freelance_Journalists : journalist_id, name, email | Assignments : assignment_id, title, deadline | Publications : publication_id, publication_name, publisher_name | Article_Publication : article_publication_id, freelance_journalist_id, assignment_id, publication_id, publish_date",
        "schema_with_content": "Freelance_Journalists : journalist_id (2, 3, 4), name ('John Doe', 'Emily Williams', 'Jane Smith'), email ('david@example.com', 'michael@example.com', 'jane@example.com') | Assignments : assignment_id (3, 1, 2), title ('Profile Pieces', 'Opinion Pieces', 'News Articles'), deadline ('2023-02-05', '2023-01-20', '2023-01-15') | Publications : publication_id (4, 2, 3), publication_name ('The Quarterly Report', 'The Annual Review', 'The Weekly Times'), publisher_name ('Annual Reviews Corp.', 'Quarterly Publishers LLC.', 'Weekly Publishing Co.') | Article_Publication : article_publication_id (4, 5, 7), freelance_journalist_id (3, 2, 1), assignment_id (1, 2, 1), publication_id (1, 2, 5), publish_date ('2023-02-08', '2023-02-01', '2023-01-22')",
        "ambiguous_queries": [
            "SELECT Assignments.deadline from Article_Publication join Assignments on Article_Publication.assignment_id = Assignments.assignment_id join Freelance_Journalists on Article_Publication.freelance_journalist_id = Freelance_Journalists.journalist_id GROUP BY Article_Publication.assignment_id HAVING COUNT(DISTINCT Article_Publication.freelance_journalist_id) = (SELECT COUNT(*) FROM Freelance_Journalists)",
            "select freelance_journalists.name , assignments.deadline from Article_Publication join Assignments on Article_Publication.assignment_id = Assignments.assignment_id join Freelance_Journalists on Article_Publication.freelance_journalist_id = Freelance_Journalists.journalist_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each freelance journalist\": [\"for each freelance journalist individually\", \"common to all freelance journalists\"]}"
        },
        "clarification_context": "\"each freelance journalist\" refers to \"for each freelance journalist individually\"",
        "clear_ambiguity": "{\"each freelance journalist\": \"for each freelance journalist individually\"}",
        "gold_query": "select freelance_journalists.name , assignments.deadline from Article_Publication join Assignments on Article_Publication.assignment_id = Assignments.assignment_id join Freelance_Journalists on Article_Publication.freelance_journalist_id = Freelance_Journalists.journalist_id"
    },
    {
        "index": 1269,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_assistants_tasks/scope_assistants_tasks.sqlite",
        "question": "What is the task name for each assistant?",
        "schema_without_content": "Assistants : id, name, email | Tasks : id, task_name, description | Assistants_Tasks : assistant_id, task_id",
        "schema_with_content": "Assistants : id (5, 2, 4), name ('Jane Smith', 'David Brown', 'Emily Davis'), email ('emily@example.com', 'jane@example.com', 'john@example.com') | Tasks : id (3, 1, 4), task_name ('Location Scouting', 'Budget Management', 'Props Acquisition'), description ('Scout locations for shooting scenes.', 'Design and plan set designs.', 'Acquire necessary props for sets.') | Assistants_Tasks : assistant_id (2, 5, 1), task_id (2, 2, 1)",
        "ambiguous_queries": [
            "SELECT Tasks.task_name from Assistants_Tasks join Tasks on Assistants_Tasks.task_id = Tasks.id join Assistants on Assistants_Tasks.assistant_id = Assistants.id GROUP BY Assistants_Tasks.task_id HAVING COUNT(DISTINCT Assistants_Tasks.assistant_id) = (SELECT COUNT(*) FROM Assistants)",
            "select assistants.name , tasks.task_name from Assistants_Tasks join Tasks on Assistants_Tasks.task_id = Tasks.id join Assistants on Assistants_Tasks.assistant_id = Assistants.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each assistant\": [\"for each assistant individually\", \"common to all assistants\"]}"
        },
        "clarification_context": "\"each assistant\" refers to \"for each assistant individually\"",
        "clear_ambiguity": "{\"each assistant\": \"for each assistant individually\"}",
        "gold_query": "select assistants.name , tasks.task_name from Assistants_Tasks join Tasks on Assistants_Tasks.task_id = Tasks.id join Assistants on Assistants_Tasks.assistant_id = Assistants.id"
    },
    {
        "index": 1270,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_real_estate_agencies_services/scope_real_estate_agencies_services.sqlite",
        "question": "Show me the prices of services each real estate agency provides.",
        "schema_without_content": "Real_Estate_Agencies : agency_id, name, location | Services : service_id, description, price | Real_Estate_Agencies_Services : real_estate_agency_id, service_id",
        "schema_with_content": "Real_Estate_Agencies : agency_id (5, 4, 3), name ('Agency C', 'Agency D', 'Agency E'), location ('New York', 'Los Angeles', 'Chicago') | Services : service_id (1, 5, 2), description ('Lease Preparation', 'Eviction Assistance', 'Rent Collection'), price (400.0, 200.0, 100.0) | Real_Estate_Agencies_Services : real_estate_agency_id (5, 4, 3), service_id (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Services.price from Real_Estate_Agencies_Services join Services on Real_Estate_Agencies_Services.service_id = Services.service_id join Real_Estate_Agencies on Real_Estate_Agencies_Services.real_estate_agency_id = Real_Estate_Agencies.agency_id GROUP BY Real_Estate_Agencies_Services.service_id HAVING COUNT(DISTINCT Real_Estate_Agencies_Services.real_estate_agency_id) = (SELECT COUNT(*) FROM Real_Estate_Agencies)",
            "select real_estate_agencies.name , services.price from Real_Estate_Agencies_Services join Services on Real_Estate_Agencies_Services.service_id = Services.service_id join Real_Estate_Agencies on Real_Estate_Agencies_Services.real_estate_agency_id = Real_Estate_Agencies.agency_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each real estate agency\": [\"for each real estate agency individually\", \"common to all real estate agencies\"]}"
        },
        "clarification_context": "\"each real estate agency\" refers to \"common to all real estate agencies\"",
        "clear_ambiguity": "{\"each real estate agency\": \"common to all real estate agencies\"}",
        "gold_query": "SELECT Services.price from Real_Estate_Agencies_Services join Services on Real_Estate_Agencies_Services.service_id = Services.service_id join Real_Estate_Agencies on Real_Estate_Agencies_Services.real_estate_agency_id = Real_Estate_Agencies.agency_id GROUP BY Real_Estate_Agencies_Services.service_id HAVING COUNT(DISTINCT Real_Estate_Agencies_Services.real_estate_agency_id) = (SELECT COUNT(*) FROM Real_Estate_Agencies)"
    },
    {
        "index": 1271,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_conferences_sessions/scope_conferences_sessions.sqlite",
        "question": "Give me the sessions that each conference includes.",
        "schema_without_content": "Conferences : conference_id, name, date | Speakers : speaker_id, first_name, last_name, title | Conference_Speakers : conference_speaker_id, conference_id, speaker_id | Conference_Sessions : conference_session_id, conference_id, session_type_id | Sessions : session_type_id, session_type, duration",
        "schema_with_content": "Conferences : conference_id (2, 5, 3), name ('Teaching Innovations Conference', 'eLearning World Forum', 'Education Tech Summit'), date ('2023-01-01', '2023-02-01', '2023-01-15') | Speakers : speaker_id (4, 5, 2), first_name ('Alice', 'Jane', 'John'), last_name ('Brown', 'Williams', 'Smith'), title ('Researcher at Data Analytics Institute', 'Innovator at ABC Company', 'CEO at Tech Inc.') | Conference_Speakers : conference_speaker_id (), conference_id (), speaker_id () | Conference_Sessions : conference_session_id (3, 4, 1), conference_id (3, 1, 5), session_type_id (1, 1, 1) | Sessions : session_type_id (3, 4, 2), session_type ('Workshop', 'Breakout Session', 'Presentation'), duration (30, 60, 60)",
        "ambiguous_queries": [
            "SELECT Sessions.session_type from conferences join conference_sessions ON conference_sessions.conference_id = Conferences.conference_id join sessions ON Conference_Sessions.session_type_id = Sessions.session_type_id GROUP BY Conference_Sessions.session_type_id HAVING COUNT(DISTINCT Conference_Sessions.conference_id) = (SELECT COUNT(*) FROM Conferences)",
            "select conferences.name , sessions.session_type from conferences join conference_sessions ON conference_sessions.conference_id = Conferences.conference_id join sessions ON Conference_Sessions.session_type_id = Sessions.session_type_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each conference\": [\"for each conference individually\", \"common to all conferences\"]}"
        },
        "clarification_context": "\"each conference\" refers to \"common to all conferences\"",
        "clear_ambiguity": "{\"each conference\": \"common to all conferences\"}",
        "gold_query": "SELECT Sessions.session_type from conferences join conference_sessions ON conference_sessions.conference_id = Conferences.conference_id join sessions ON Conference_Sessions.session_type_id = Sessions.session_type_id GROUP BY Conference_Sessions.session_type_id HAVING COUNT(DISTINCT Conference_Sessions.conference_id) = (SELECT COUNT(*) FROM Conferences)"
    },
    {
        "index": 1272,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_press_conferences_participants/scope_press_conferences_participants.sqlite",
        "question": "Give me the participant roles for each press conference.",
        "schema_without_content": "Press_Conferences : id, name, date | Participants : id, role, name | Press_Conferences_Participants : press_conference_id, participant_id",
        "schema_with_content": "Press_Conferences : id (2, 3, 4), name ('Economic Summit', 'Environmental Symposium', 'Healthcare Conference'), date ('2023-01-01', '2023-01-02', '2023-01-04') | Participants : id (4, 2, 1), role ('Reporter', 'Expert Panelist', 'Head of Department'), name ('John Smith', 'Emily Davis', 'David Brown') | Press_Conferences_Participants : press_conference_id (1, 5, 4), participant_id (4, 1, 1)",
        "ambiguous_queries": [
            "SELECT Participants.role from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id GROUP BY Press_Conferences_Participants.participant_id HAVING COUNT(DISTINCT Press_Conferences_Participants.press_conference_id) = (SELECT COUNT(*) FROM Press_Conferences)",
            "select press_conferences.name , participants.role from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each press conference\": [\"for each press conference individually\", \"common to all press conferences\"]}"
        },
        "clarification_context": "\"each press conference\" refers to \"common to all press conferences\"",
        "clear_ambiguity": "{\"each press conference\": \"common to all press conferences\"}",
        "gold_query": "SELECT Participants.role from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id GROUP BY Press_Conferences_Participants.participant_id HAVING COUNT(DISTINCT Press_Conferences_Participants.press_conference_id) = (SELECT COUNT(*) FROM Press_Conferences)"
    },
    {
        "index": 1273,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_editing_suites_tools/scope_editing_suites_tools.sqlite",
        "question": "What is the type of tool for each editing suite?",
        "schema_without_content": "Editing_Suites : SuiteID, Name, Location | Tools : ToolID, Type | Editing_Suites_Tools : SuiteID, ToolID",
        "schema_with_content": "Editing_Suites : SuiteID (3, 2, 1), Name ('Studio B', 'Studio C', 'Studio A'), Location ('Toronto', 'London', 'Mumbai') | Tools : ToolID (1, 3, 5), Type ('Cutting_Software', 'Sound Design Software', 'Color Grading Software') | Editing_Suites_Tools : SuiteID (2, 1, 3), ToolID (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Tools.Type from Editing_Suites_Tools join Tools on Editing_Suites_Tools.ToolID = Tools.ToolID join Editing_Suites on Editing_Suites_Tools.SuiteID = Editing_Suites.SuiteID GROUP BY Editing_Suites_Tools.ToolID HAVING COUNT(DISTINCT Editing_Suites_Tools.SuiteID) = (SELECT COUNT(*) FROM Editing_Suites)",
            "select editing_suites.name , tools.type from Editing_Suites_Tools join Tools on Editing_Suites_Tools.ToolID = Tools.ToolID join Editing_Suites on Editing_Suites_Tools.SuiteID = Editing_Suites.SuiteID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each editing suite\": [\"for each editing suite individually\", \"common to all editing suites\"]}"
        },
        "clarification_context": "\"each editing suite\" refers to \"for each editing suite individually\"",
        "clear_ambiguity": "{\"each editing suite\": \"for each editing suite individually\"}",
        "gold_query": "select editing_suites.name , tools.type from Editing_Suites_Tools join Tools on Editing_Suites_Tools.ToolID = Tools.ToolID join Editing_Suites on Editing_Suites_Tools.SuiteID = Editing_Suites.SuiteID"
    },
    {
        "index": 1274,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_scuba_diving_centers_dive_sites/scope_scuba_diving_centers_dive_sites.sqlite",
        "question": "What are the dive sites and types for every scuba diving centre?",
        "schema_without_content": "Scuba_Diving_Centers : id, name, location | Dive_Sites : id, site_name, type | Customers : id, first_name, last_name, email | Bookings : booking_id, customer_id, scuba_center_id, dive_site_id, date, time",
        "schema_with_content": "Scuba_Diving_Centers : id (5, 3, 2), name ('Aquatic Adventures', 'Underwater World', 'Blue Wave'), location ('Hawaii', 'Mauritius', 'Bali') | Dive_Sites : id (5, 4, 1), site_name ('Shipwreck Cove', 'Great Barrier Reef', 'The Blue Hole'), type ('Marine Life', 'Wrecks', 'Marine Life') | Customers : id (2, 3, 1), first_name ('Jane', 'Alice', 'Bob'), last_name ('Williams', 'Smith', 'Doe'), email ('charliewilliams@example.com', 'johnsmith@example.com', 'bobjohnson@example.com') | Bookings : booking_id (1, 7, 2), customer_id (3, 5, 2), scuba_center_id (5, 5, 4), dive_site_id (5, 1, 2), date ('2023-07-16', '2023-10-23', '2023-08-09'), time ('10:00', '11:00', '12:00')",
        "ambiguous_queries": [
            "SELECT Dive_Sites.site_name, Dive_Sites.type from Bookings join Dive_Sites on Bookings.dive_site_id = Dive_Sites.id join Scuba_Diving_Centers on Bookings.scuba_center_id = Scuba_Diving_Centers.id GROUP BY Bookings.dive_site_id HAVING COUNT(DISTINCT Bookings.scuba_center_id) = (SELECT COUNT(*) FROM Scuba_Diving_Centers)",
            "select scuba_diving_centers.name , dive_sites.site_name , dive_sites.type from Bookings join Dive_Sites on Bookings.dive_site_id = Dive_Sites.id join Scuba_Diving_Centers on Bookings.scuba_center_id = Scuba_Diving_Centers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every scuba diving centre\": [\"for each scuba diving centre individually\", \"common to all scuba diving centres\"]}"
        },
        "clarification_context": "\"every scuba diving centre\" refers to \"for each scuba diving centre individually\"",
        "clear_ambiguity": "{\"every scuba diving centre\": \"for each scuba diving centre individually\"}",
        "gold_query": "select scuba_diving_centers.name , dive_sites.site_name , dive_sites.type from Bookings join Dive_Sites on Bookings.dive_site_id = Dive_Sites.id join Scuba_Diving_Centers on Bookings.scuba_center_id = Scuba_Diving_Centers.id"
    },
    {
        "index": 1275,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_film_archivists_preservation_methods/scope_film_archivists_preservation_methods.sqlite",
        "question": "Tell me the methods every archivist uses.",
        "schema_without_content": "Film_Archivists : id, name, email | Preservation_Methods : id, method, description | Films : id, title, year | Archived_Films : film_id, archiver_id, preservation_method_id | Director : director_id, firstname, lastname | Producer : producer_id, firstname, lastname | Actor : actor_id, firstname, lastname | Roles : role_id, film_id, director_id, producer_id, actor_id",
        "schema_with_content": "Film_Archivists : id (3, 2, 1), name ('John Doe', 'Michael Johnson', 'Jane Smith'), email ('michael@example.com', 'john@example.com', 'jane@example.com') | Preservation_Methods : id (3, 4, 2), method ('Blu-ray Discs', 'DVDs', 'Film Negatives'), description ('Storing digital copies of films on hard drives or cloud storage.', 'Storing high definition video on Blu-ray discs.', 'Storing standard definition video on DVDs.') | Films : id (2, 3, 5), title ('Forrest Gump', 'Pulp Fiction', \"Schindler's List\"), year (1993.0, 1994.0, 1994.0) | Archived_Films : film_id (), archiver_id (2, 3, 1), preservation_method_id (1, 2, 1) | Director : director_id (2, 5, 4), firstname ('Frank', 'Steven', 'Quentin'), lastname ('Spielberg', 'Zemeckis', 'Darabont') | Producer : producer_id (3, 2, 5), firstname ('Albert', 'Mark', 'Barry'), lastname ('Carroll', 'Ruddy', 'Harrison') | Actor : actor_id (2, 5, 3), firstname ('Marlon', 'Jack', 'Tim'), lastname ('Nicholson', 'Hanks', 'Pitt') | Roles : role_id (4, 1, 2), film_id (4, 3, 1), director_id (2, 6, 9), producer_id (5, 4, 7), actor_id (8, 7, 9)",
        "ambiguous_queries": [
            "SELECT Preservation_Methods.method from Archived_Films join Preservation_Methods on Archived_Films.preservation_method_id = Preservation_Methods.id join Film_Archivists on Archived_Films.archiver_id = Film_Archivists.id GROUP BY Archived_Films.preservation_method_id HAVING COUNT(DISTINCT Archived_Films.archiver_id) = (SELECT COUNT(*) FROM Film_Archivists)",
            "select film_archivists.name , preservation_methods.method from Archived_Films join Preservation_Methods on Archived_Films.preservation_method_id = Preservation_Methods.id join Film_Archivists on Archived_Films.archiver_id = Film_Archivists.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every archivist\": [\"for each archivist individually\", \"common to all archivists\"]}"
        },
        "clarification_context": "\"every archivist\" refers to \"for each archivist individually\"",
        "clear_ambiguity": "{\"every archivist\": \"for each archivist individually\"}",
        "gold_query": "select film_archivists.name , preservation_methods.method from Archived_Films join Preservation_Methods on Archived_Films.preservation_method_id = Preservation_Methods.id join Film_Archivists on Archived_Films.archiver_id = Film_Archivists.id"
    },
    {
        "index": 1276,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_space_reporters_missions/scope_space_reporters_missions.sqlite",
        "question": "Give me the missions each reporter has written about.",
        "schema_without_content": "Space_Reporters : reporter_id, full_name | Missions : mission_id, mission_name | Space_Reporters_Missions : space_reporter_id, mission_id, assignment_date",
        "schema_with_content": "Space_Reporters : reporter_id (5, 2, 4), full_name ('Jane Smith', 'John Doe', 'Alex Brown') | Missions : mission_id (3, 4, 1), mission_name ('Lunar_Exploration', 'Deep_Space_Probes', 'Mars_Exploration') | Space_Reporters_Missions : space_reporter_id (2, 5, 3), mission_id (1, 5, 2), assignment_date ('2035-05-01', '2031-07-01', '2034-11-01')",
        "ambiguous_queries": [
            "SELECT Missions.mission_name from Space_Reporters_Missions join Missions on Space_Reporters_Missions.mission_id = Missions.mission_id join Space_Reporters on Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id GROUP BY Space_Reporters_Missions.mission_id HAVING COUNT(DISTINCT Space_Reporters_Missions.space_reporter_id) = (SELECT COUNT(*) FROM Space_Reporters)",
            "select space_reporters.full_name , missions.mission_name from Space_Reporters_Missions join Missions on Space_Reporters_Missions.mission_id = Missions.mission_id join Space_Reporters on Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each reporter\": [\"for each reporter individually\", \"common to all reporters\"]}"
        },
        "clarification_context": "\"each reporter\" refers to \"for each reporter individually\"",
        "clear_ambiguity": "{\"each reporter\": \"for each reporter individually\"}",
        "gold_query": "select space_reporters.full_name , missions.mission_name from Space_Reporters_Missions join Missions on Space_Reporters_Missions.mission_id = Missions.mission_id join Space_Reporters on Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id"
    },
    {
        "index": 1277,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_real_estate_agencies_services/scope_real_estate_agencies_services.sqlite",
        "question": "what descriptions of services are associated with each real estate agency?",
        "schema_without_content": "Real_Estate_Agencies : agency_id, name, location | Services : service_id, description, price | Real_Estate_Agencies_Services : real_estate_agency_id, service_id",
        "schema_with_content": "Real_Estate_Agencies : agency_id (1, 5, 3), name ('Agency E', 'Agency B', 'Agency C'), location ('Los Angeles', 'New York', 'Chicago') | Services : service_id (2, 3, 5), description ('Property Valuation', 'Eviction Assistance', 'Rent Collection'), price (400.0, 200.0, 500.0) | Real_Estate_Agencies_Services : real_estate_agency_id (1, 5, 3), service_id (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Services.description from Real_Estate_Agencies_Services join Services on Real_Estate_Agencies_Services.service_id = Services.service_id join Real_Estate_Agencies on Real_Estate_Agencies_Services.real_estate_agency_id = Real_Estate_Agencies.agency_id GROUP BY Real_Estate_Agencies_Services.service_id HAVING COUNT(DISTINCT Real_Estate_Agencies_Services.real_estate_agency_id) = (SELECT COUNT(*) FROM Real_Estate_Agencies)",
            "select real_estate_agencies.name , services.description from Real_Estate_Agencies_Services join Services on Real_Estate_Agencies_Services.service_id = Services.service_id join Real_Estate_Agencies on Real_Estate_Agencies_Services.real_estate_agency_id = Real_Estate_Agencies.agency_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each real estate agency\": [\"for each real estate agency individually\", \"common to all real estate agencies\"]}"
        },
        "clarification_context": "\"each real estate agency\" refers to \"common to all real estate agencies\"",
        "clear_ambiguity": "{\"each real estate agency\": \"common to all real estate agencies\"}",
        "gold_query": "SELECT Services.description from Real_Estate_Agencies_Services join Services on Real_Estate_Agencies_Services.service_id = Services.service_id join Real_Estate_Agencies on Real_Estate_Agencies_Services.real_estate_agency_id = Real_Estate_Agencies.agency_id GROUP BY Real_Estate_Agencies_Services.service_id HAVING COUNT(DISTINCT Real_Estate_Agencies_Services.real_estate_agency_id) = (SELECT COUNT(*) FROM Real_Estate_Agencies)"
    },
    {
        "index": 1278,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_construction_companies_projects/scope_construction_companies_projects.sqlite",
        "question": "What is the end date of the project each company is working on?",
        "schema_without_content": "Construction_Companies : id, company_name, location | Projects : id, project_type, start_date, end_date | Construction_Companies_Projects : construction_company_id, project_id | House_Sizes : house_size_id, size_in_sqft, price | Material_Types : material_type_id, type_of_material, cost_per_unit",
        "schema_with_content": "Construction_Companies : id (4, 3, 5), company_name ('Company C', 'Company D', 'Company B'), location ('Houston', 'Los Angeles', 'Miami') | Projects : id (2, 3, 1), project_type ('Industrial', 'Foundation', 'Residential'), start_date ('2024-01-01', '2025-01-01', '2023-07-01'), end_date ('2023-12-01', '2025-12-01', '2023-06-01') | Construction_Companies_Projects : construction_company_id (3, 5, 2), project_id (1, 1, 2) | House_Sizes : house_size_id (2, 3, 1), size_in_sqft (3500, 1500, 3000), price (200, 300, 350) | Material_Types : material_type_id (2, 1, 5), type_of_material ('Aluminum', 'Concrete', 'Wood'), cost_per_unit (80.0, 90.0, 50.0)",
        "ambiguous_queries": [
            "SELECT Projects.end_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id GROUP BY Construction_Companies_Projects.project_id HAVING COUNT(DISTINCT Construction_Companies_Projects.construction_company_id) = (SELECT COUNT(*) FROM Construction_Companies)",
            "select construction_companies.company_name , projects.end_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each company\": [\"for each company individually\", \"common to all companies\"]}"
        },
        "clarification_context": "\"each company\" refers to \"for each company individually\"",
        "clear_ambiguity": "{\"each company\": \"for each company individually\"}",
        "gold_query": "select construction_companies.company_name , projects.end_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id"
    },
    {
        "index": 1279,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_beach_resorts_water_sports/scope_beach_resorts_water_sports.sqlite",
        "question": "Describe the water sports every beach resort has.",
        "schema_without_content": "Beach_Resorts : ResortID, Name, Location | Water_Sports : SportID, Name, Description | Beach_Resorts_Water_Sports : ResortID, SportID",
        "schema_with_content": "Beach_Resorts : ResortID (2, 4, 3), Name ('Tropical Paradise', 'Paradise Beach', 'Sunset Shores'), Location ('Australia', 'Florida', 'California') | Water_Sports : SportID (5, 4, 1), Name ('Snorkeling', 'Kayaking', 'Surfing'), Description ('An activity where you swim underwater while wearing a mask and fins.', 'An underwater diving activity that allows divers to breathe underwater using a tank containing compressed air.', 'The act of propelling oneself through water by moving the limbs.') | Beach_Resorts_Water_Sports : ResortID (2, 4, 3), SportID (1, 1, 5)",
        "ambiguous_queries": [
            "SELECT Water_Sports.Description from Beach_Resorts_Water_Sports join Water_Sports on Beach_Resorts_Water_Sports.SportID = Water_Sports.SportID join Beach_Resorts on Beach_Resorts_Water_Sports.ResortID = Beach_Resorts.ResortID GROUP BY Beach_Resorts_Water_Sports.SportID HAVING COUNT(DISTINCT Beach_Resorts_Water_Sports.ResortID) = (SELECT COUNT(*) FROM Beach_Resorts)",
            "select beach_resorts.name , water_sports.description from Beach_Resorts_Water_Sports join Water_Sports on Beach_Resorts_Water_Sports.SportID = Water_Sports.SportID join Beach_Resorts on Beach_Resorts_Water_Sports.ResortID = Beach_Resorts.ResortID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every beach resort\": [\"for each beach resort individually\", \"common to all beach resorts\"]}"
        },
        "clarification_context": "\"every beach resort\" refers to \"common to all beach resorts\"",
        "clear_ambiguity": "{\"every beach resort\": \"common to all beach resorts\"}",
        "gold_query": "SELECT Water_Sports.Description from Beach_Resorts_Water_Sports join Water_Sports on Beach_Resorts_Water_Sports.SportID = Water_Sports.SportID join Beach_Resorts on Beach_Resorts_Water_Sports.ResortID = Beach_Resorts.ResortID GROUP BY Beach_Resorts_Water_Sports.SportID HAVING COUNT(DISTINCT Beach_Resorts_Water_Sports.ResortID) = (SELECT COUNT(*) FROM Beach_Resorts)"
    },
    {
        "index": 1280,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_laboratory_equipment/scope_laboratory_equipment.sqlite",
        "question": "Show me the type and description of equipment each laboratory has.",
        "schema_without_content": "Laboratory : id, name, address | Equipment : id, type, description | Laboratory_Equipment : laboratory_id, equipment_type_id | Doctors : id, name, specialization | Patients : id, name, age, gender | Appointments : appointment_id, doctor_id, patient_id, date, time",
        "schema_with_content": "Laboratory : id (3, 4, 5), name ('West Lab', 'South Lab', 'Central Lab'), address ('<address_of_central_lab>', '<address_of_north_lab>', '<address_of_west_lab>') | Equipment : id (3, 1, 5), type ('Microscope', 'Ultrasound', 'X-Ray Machine'), description ('<description_for_microscope>', '<description_for_ultrasound>', '<description_for_mri_machine>') | Laboratory_Equipment : laboratory_id (5, 4, 5), equipment_type_id (1, 4, 1) | Doctors : id (5, 2, 4), name ('Dr. Davis', 'Dr. Smith', 'Dr. Johnson'), specialization ('Pediatrics', 'Gastroenterology', 'Neurology') | Patients : id (4, 3, 2), name ('Emily Williams', 'Tom Johnson', 'Jane Smith'), age (60, 35, 45), gender ('M', 'M', 'F') | Appointments : appointment_id (1, 2, 3), doctor_id (3, 5, 1), patient_id (4, 1, 2), date ('2023-09-05', '2023-09-02', '2023-09-04'), time ('15:00', '14:00', '11:00')",
        "ambiguous_queries": [
            "SELECT Equipment.type, Equipment.description from Laboratory_Equipment join Equipment on Laboratory_Equipment.equipment_type_id = Equipment.id join Laboratory on Laboratory_Equipment.laboratory_id = Laboratory.id GROUP BY Laboratory_Equipment.equipment_type_id HAVING COUNT(DISTINCT Laboratory_Equipment.laboratory_id) = (SELECT COUNT(*) FROM Laboratory)",
            "select laboratory.name , equipment.type , equipment.description from Laboratory_Equipment join Equipment on Laboratory_Equipment.equipment_type_id = Equipment.id join Laboratory on Laboratory_Equipment.laboratory_id = Laboratory.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each laboratory\": [\"for each laboratory individually\", \"common to all laboratories\"]}"
        },
        "clarification_context": "\"each laboratory\" refers to \"common to all laboratories\"",
        "clear_ambiguity": "{\"each laboratory\": \"common to all laboratories\"}",
        "gold_query": "SELECT Equipment.type, Equipment.description from Laboratory_Equipment join Equipment on Laboratory_Equipment.equipment_type_id = Equipment.id join Laboratory on Laboratory_Equipment.laboratory_id = Laboratory.id GROUP BY Laboratory_Equipment.equipment_type_id HAVING COUNT(DISTINCT Laboratory_Equipment.laboratory_id) = (SELECT COUNT(*) FROM Laboratory)"
    },
    {
        "index": 1281,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_weather_model_parameters/scope_weather_model_parameters.sqlite",
        "question": "List the parameter units for every weather model.",
        "schema_without_content": "Weather_Model : modelID, modelName, manufacturer | Parameters : parameterID, parameterName, unit | Weather_Model_Parameters : weatherModelId, parameterId, value",
        "schema_with_content": "Weather_Model : modelID (3, 5, 4), modelName ('Model C', 'Model E', 'Model B'), manufacturer ('Manufacturer Y', 'Manufacturer X', 'Manufacturer V') | Parameters : parameterID (4, 1, 3), parameterName ('Visibility', 'Humidity', 'Wind Speed'), unit ('%', 'km/h', '°C') | Weather_Model_Parameters : weatherModelId (5, 4, 3), parameterId (1, 1, 1), value ()",
        "ambiguous_queries": [
            "SELECT Parameters.unit from Weather_Model_Parameters join Parameters on Weather_Model_Parameters.parameterId = Parameters.parameterID join Weather_Model on Weather_Model_Parameters.weatherModelId = Weather_Model.modelID GROUP BY Weather_Model_Parameters.parameterId HAVING COUNT(DISTINCT Weather_Model_Parameters.weatherModelId) = (SELECT COUNT(*) FROM Weather_Model)",
            "select weather_model.modelname , parameters.unit from Weather_Model_Parameters join Parameters on Weather_Model_Parameters.parameterId = Parameters.parameterID join Weather_Model on Weather_Model_Parameters.weatherModelId = Weather_Model.modelID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every weather model\": [\"for each weather model individually\", \"common to all weather models\"]}"
        },
        "clarification_context": "\"every weather model\" refers to \"common to all weather models\"",
        "clear_ambiguity": "{\"every weather model\": \"common to all weather models\"}",
        "gold_query": "SELECT Parameters.unit from Weather_Model_Parameters join Parameters on Weather_Model_Parameters.parameterId = Parameters.parameterID join Weather_Model on Weather_Model_Parameters.weatherModelId = Weather_Model.modelID GROUP BY Weather_Model_Parameters.parameterId HAVING COUNT(DISTINCT Weather_Model_Parameters.weatherModelId) = (SELECT COUNT(*) FROM Weather_Model)"
    },
    {
        "index": 1282,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_teachers_classrooms/scope_teachers_classrooms.sqlite",
        "question": "What are the capacities of the classrooms that every teacher uses?",
        "schema_without_content": "Teachers : teacher_id, full_name | Classrooms : classroom_id, room_number, capacity | Subjects : subject_id, name, description | Students : student_id, first_name, last_name, date_of_birth, enrollment_date | Enrollments : enrollment_id, student_id, subject_id, classroom_id, grade | Teachers_Classrooms : teachers_classrooms_id, teacher_id, classroom_id, start_date, end_date",
        "schema_with_content": "Teachers : teacher_id (5, 1, 4), full_name ('John Doe', 'Jane Smith', 'Michael Brown') | Classrooms : classroom_id (4, 3, 2), room_number (7, 9, 11), capacity (25, 27, 32) | Subjects : subject_id (4, 5, 3), name ('English Literature', 'Physical Education', 'History'), description ('The study of past events and their impact on present-day society.', 'The development of physical fitness and skills through sports and activities.', 'The study of numbers, quantities, shapes, patterns and structures.') | Students : student_id (4, 1, 3), first_name ('Eva', 'Alice', 'Daniel'), last_name ('Garcia', 'Williams', 'Lee'), date_of_birth ('2004-06-20', '2005-07-10', '2006-08-15'), enrollment_date ('2020-09-01', '2020-09-01', '2020-09-01') | Enrollments : enrollment_id (), student_id (), subject_id (), classroom_id (), grade () | Teachers_Classrooms : teachers_classrooms_id (1, 4, 8), teacher_id (4, 2, 3), classroom_id (1, 2, 1), start_date ('2021-08-30', '2021-08-30', '2021-08-30'), end_date ('2022-05-31', '2022-05-31', '2022-05-31')",
        "ambiguous_queries": [
            "SELECT Classrooms.capacity from Teachers_Classrooms join Classrooms on Teachers_Classrooms.classroom_id = Classrooms.classroom_id join Teachers on Teachers_Classrooms.teacher_id = Teachers.teacher_id GROUP BY Teachers_Classrooms.classroom_id HAVING COUNT(DISTINCT Teachers_Classrooms.teacher_id) = (SELECT COUNT(*) FROM Teachers)",
            "select teachers.full_name , classrooms.capacity from Teachers_Classrooms join Classrooms on Teachers_Classrooms.classroom_id = Classrooms.classroom_id join Teachers on Teachers_Classrooms.teacher_id = Teachers.teacher_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every teacher\": [\"for each teacher individually\", \"common to all teachers\"]}"
        },
        "clarification_context": "\"every teacher\" refers to \"common to all teachers\"",
        "clear_ambiguity": "{\"every teacher\": \"common to all teachers\"}",
        "gold_query": "SELECT Classrooms.capacity from Teachers_Classrooms join Classrooms on Teachers_Classrooms.classroom_id = Classrooms.classroom_id join Teachers on Teachers_Classrooms.teacher_id = Teachers.teacher_id GROUP BY Teachers_Classrooms.classroom_id HAVING COUNT(DISTINCT Teachers_Classrooms.teacher_id) = (SELECT COUNT(*) FROM Teachers)"
    },
    {
        "index": 1283,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
        "question": "Tell me about the ids, categories and prices of the products every duty free shop sells.",
        "schema_without_content": "Duty_Free_Shops : shop_id, name, location | Products : product_id, category, price | Duty_Free_Shops_Products : shop_id, product_id, quantity",
        "schema_with_content": "Duty_Free_Shops : shop_id (4, 3, 1), name ('Shop5', 'Shop2', 'Shop4'), location ('Terminal C', 'Terminal A', 'Terminal D') | Products : product_id (2, 5, 1), category ('Perfume', 'Toys', 'Cosmetics'), price (20.0, 250.89, 65.43) | Duty_Free_Shops_Products : shop_id (4, 3, 4), product_id (1, 2, 3), quantity (15, 5, 15)",
        "ambiguous_queries": [
            "SELECT Products.product_id, Products.category, Products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)",
            "select duty_free_shops.name , products.product_id , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every duty free shop\": [\"for each duty free shop individually\", \"common to all duty free shops\"]}"
        },
        "clarification_context": "\"every duty free shop\" refers to \"for each duty free shop individually\"",
        "clear_ambiguity": "{\"every duty free shop\": \"for each duty free shop individually\"}",
        "gold_query": "select duty_free_shops.name , products.product_id , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
    },
    {
        "index": 1284,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_journalism_schools_courses/scope_journalism_schools_courses.sqlite",
        "question": "what course descriptions are available for each journalism school?",
        "schema_without_content": "Journalism_Schools : id, name, location | Courses : id, course_name, description | Journalism_Schools_Courses : journalism_schools_id, course_id",
        "schema_with_content": "Journalism_Schools : id (3, 5, 2), name ('University D', 'University E', 'University A'), location ('City A', 'City C', 'City D') | Courses : id (5, 3, 4), course_name ('Data Analysis For Journalists', 'News Reporting', 'Media Law'), description ('Learn how to analyze and interpret data to inform news stories.', 'Develop skills necessary for effective reporting on current events.', 'This course covers ethical considerations in journalism.') | Journalism_Schools_Courses : journalism_schools_id (3, 4, 5), course_id (5, 1, 1)",
        "ambiguous_queries": [
            "SELECT Courses.description from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id GROUP BY Journalism_Schools_Courses.course_id HAVING COUNT(DISTINCT Journalism_Schools_Courses.journalism_schools_id) = (SELECT COUNT(*) FROM Journalism_Schools)",
            "select journalism_schools.name , courses.description from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each journalism school\": [\"for each journalism school individually\", \"common to all journalism schools\"]}"
        },
        "clarification_context": "\"each journalism school\" refers to \"common to all journalism schools\"",
        "clear_ambiguity": "{\"each journalism school\": \"common to all journalism schools\"}",
        "gold_query": "SELECT Courses.description from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id GROUP BY Journalism_Schools_Courses.course_id HAVING COUNT(DISTINCT Journalism_Schools_Courses.journalism_schools_id) = (SELECT COUNT(*) FROM Journalism_Schools)"
    },
    {
        "index": 1285,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_districts_programs/scope_districts_programs.sqlite",
        "question": "Provide the details of the programmes we have for every district (names and descriptions)",
        "schema_without_content": "Districts : ID, Name, Population | Programs : ID, Name, Description | Students : ID, FirstName, LastName, Age | Teachers : ID, FirstName, LastName, Subject | Schools : ID, Name, Address, DistrictID | School_Students : StudentID, SchoolID, EnrollmentDate | School_Teachers : TeacherID, SchoolID, HireDate | Districts_Programs : DistrictID, ProgramID, Implemented | Students_Programs : StudentID, ProgramID, StartDate, EndDate",
        "schema_with_content": "Districts : ID (3, 4, 5), Name ('District5', 'District1', 'District4'), Population (30000, 50000, 60000) | Programs : ID (2, 1, 3), Name ('Art_and_Music', 'Sports', 'General_Education'), Description ('Physical fitness and sports instruction', 'Program focused on creative arts', 'Career-focused education and training') | Students : ID (5, 4, 2), FirstName ('John', 'Jack', 'Jane'), LastName ('Brown', 'Smith', 'Williams'), Age (17, 19, 18) | Teachers : ID (2, 4, 5), FirstName ('Mrs.', 'Mr.', 'Ms.'), LastName ('Green', 'Jones', 'Smith'), Subject ('Math', 'English', 'Chemistry') | Schools : ID (3, 4, 1), Name ('School1', 'School5', 'School4'), Address ('Address2', 'Address3', 'Address5'), DistrictID (5, 4, 3) | School_Students : StudentID (3, 4, 2), SchoolID (1, 2, 2), EnrollmentDate ('2022-09-01', '2022-09-01', '2022-09-01') | School_Teachers : TeacherID (1, 4, 2), SchoolID (1, 3, 2), HireDate ('2021-09-01', '2021-09-01', '2021-09-01') | Districts_Programs : DistrictID (5, 3, 1), ProgramID (1, 2, 1), Implemented (1, 1, 0) | Students_Programs : StudentID (4, 2, 3), ProgramID (2, 1, 1), StartDate ('2022-08-01', '2022-08-01', '2022-08-01'), EndDate ('2023-05-31', '2023-05-31', '2023-05-31')",
        "ambiguous_queries": [
            "SELECT Programs.Name, Programs.Description from Districts_Programs join Programs on Districts_Programs.ProgramID = Programs.ID join Districts on Districts_Programs.DistrictID = Districts.ID GROUP BY Districts_Programs.ProgramID HAVING COUNT(DISTINCT Districts_Programs.DistrictID) = (SELECT COUNT(*) FROM Districts)",
            "select districts.name , programs.name , programs.description from Districts_Programs join Programs on Districts_Programs.ProgramID = Programs.ID join Districts on Districts_Programs.DistrictID = Districts.ID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every district\": [\"for each district individually\", \"common to all districts\"]}"
        },
        "clarification_context": "\"every district\" refers to \"for each district individually\"",
        "clear_ambiguity": "{\"every district\": \"for each district individually\"}",
        "gold_query": "select districts.name , programs.name , programs.description from Districts_Programs join Programs on Districts_Programs.ProgramID = Programs.ID join Districts on Districts_Programs.DistrictID = Districts.ID"
    },
    {
        "index": 1286,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
        "question": "Give me the video player versions that are supported by each streaming service.",
        "schema_without_content": "Streaming_Services : id, service_name, description | Video_Players : id, player_type, version | Streaming_Services_Video_Players : streaming_service_id, video_player_id",
        "schema_with_content": "Streaming_Services : id (2, 1, 4), service_name ('Disney+', 'Netflix', 'Hulu'), description ('An American subscription video on-demand service offering a library of films and television series.', 'A subsidiary of Amazon that offers digital video streamings of movies and TV shows.', 'A popular streaming platform offering movies, TV shows, documentaries.') | Video_Players : id (1, 3, 5), player_type ('HTML5', 'RealPlayer', 'Windows Media Player'), version (5, 2, 10) | Streaming_Services_Video_Players : streaming_service_id (3, 2, 4), video_player_id (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Video_Players.version from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.service_name , video_players.version from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"each streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Video_Players.version from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)"
    },
    {
        "index": 1287,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_social_media_integrations/scope_streaming_services_social_media_integrations.sqlite",
        "question": "Give me the types and descriptions of social media each streaming service integrates.",
        "schema_without_content": "Streaming_Services : id, service_name, subscription_fee | Social_Media_Integrations : id, integration_type, description | Streaming_Services_Social_Media_Integrations : streaming_service_id, social_media_integration_id | Arbitrary_Table1 : id, column1, column2 | Arbitrary_Table2 : id, column1, column2",
        "schema_with_content": "Streaming_Services : id (2, 5, 4), service_name ('HBO Max', 'Hulu', 'Amazon Prime Video'), subscription_fee (5.99, 9.99, 8.99) | Social_Media_Integrations : id (2, 5, 1), integration_type ('Comment Section', 'Share Button', 'Follow Feature'), description ('Enables user comments on content', 'Allows users to share content', 'A feature that lets users save videos to watch later') | Streaming_Services_Social_Media_Integrations : streaming_service_id (1, 4, 3), social_media_integration_id (1, 2, 5) | Arbitrary_Table1 : id (2, 3, 4), column1 ('Row5 Col1', 'Row1 Col1', 'Row3 Col1'), column2 (30, 10, 50) | Arbitrary_Table2 : id (5, 1, 2), column1 ('Row1 Col1', 'Row4 Col1', 'Row3 Col1'), column2 (50, 10, 20)",
        "ambiguous_queries": [
            "SELECT Social_Media_Integrations.integration_type, Social_Media_Integrations.description from Streaming_Services_Social_Media_Integrations join Social_Media_Integrations on Streaming_Services_Social_Media_Integrations.social_media_integration_id = Social_Media_Integrations.id join Streaming_Services on Streaming_Services_Social_Media_Integrations.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Social_Media_Integrations.social_media_integration_id HAVING COUNT(DISTINCT Streaming_Services_Social_Media_Integrations.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.service_name , social_media_integrations.integration_type , social_media_integrations.description from Streaming_Services_Social_Media_Integrations join Social_Media_Integrations on Streaming_Services_Social_Media_Integrations.social_media_integration_id = Social_Media_Integrations.id join Streaming_Services on Streaming_Services_Social_Media_Integrations.streaming_service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"each streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Social_Media_Integrations.integration_type, Social_Media_Integrations.description from Streaming_Services_Social_Media_Integrations join Social_Media_Integrations on Streaming_Services_Social_Media_Integrations.social_media_integration_id = Social_Media_Integrations.id join Streaming_Services on Streaming_Services_Social_Media_Integrations.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Social_Media_Integrations.social_media_integration_id HAVING COUNT(DISTINCT Streaming_Services_Social_Media_Integrations.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)"
    },
    {
        "index": 1288,
        "db_id": "Entertainment",
        "ambig_type": "scope",
        "db_file": "scope/Entertainment/scope_comedy_shows_acts/scope_comedy_shows_acts.sqlite",
        "question": "What acts are performed at each comedy show?",
        "schema_without_content": "Acts : act_id, act_name | Comedy_Shows : comedy_show_id, show_title, date, location | Comedy_Shows_Acts : acts_comedy_shows_id, comedy_show_id",
        "schema_with_content": "Acts : act_id (4, 5, 1), act_name ('Supporting Act', 'Featured Artist', 'Opening Act') | Comedy_Shows : comedy_show_id (5, 1, 2), show_title ('Laugh Out Loud', 'Humor Festival', 'Giggle Gala'), date ('2022-09-01 19:30:00', '2022-11-01 21:00:00', '2022-09-15 18:00:00'), location ('Los Angeles', 'Miami', 'New York City') | Comedy_Shows_Acts : acts_comedy_shows_id (3, 6, 7), comedy_show_id (4, 5, 5)",
        "ambiguous_queries": [
            "SELECT Acts.act_name from Comedy_Shows_Acts join Comedy_Shows on Comedy_Shows_Acts.comedy_show_id = Comedy_Shows.comedy_show_id join Acts on Comedy_Shows_Acts.acts_comedy_shows_id = Acts.act_id GROUP BY Comedy_Shows_Acts.acts_comedy_shows_id HAVING COUNT(DISTINCT Comedy_Shows_Acts.comedy_show_id) = (SELECT COUNT(*) FROM Comedy_Shows)",
            "select comedy_shows.show_title , acts.act_name from Comedy_Shows_Acts join Comedy_Shows on Comedy_Shows_Acts.comedy_show_id = Comedy_Shows.comedy_show_id join Acts on Comedy_Shows_Acts.acts_comedy_shows_id = Acts.act_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each comedy show\": [\"for each comedy show individually\", \"common to all comedy shows\"]}"
        },
        "clarification_context": "\"each comedy show\" refers to \"for each comedy show individually\"",
        "clear_ambiguity": "{\"each comedy show\": \"for each comedy show individually\"}",
        "gold_query": "select comedy_shows.show_title , acts.act_name from Comedy_Shows_Acts join Comedy_Shows on Comedy_Shows_Acts.comedy_show_id = Comedy_Shows.comedy_show_id join Acts on Comedy_Shows_Acts.acts_comedy_shows_id = Acts.act_id"
    },
    {
        "index": 1289,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_productions_locations/scope_productions_locations.sqlite",
        "question": "Provide the type of locations associated with each production.",
        "schema_without_content": "Productions : ProductionID, Title, ReleaseDate | Locations : LocationID, Name, Type | Productions_Locations : ProductionID, LocationID | Actors : ActorID, FirstName, LastName, Birthdate | Cast : ProductionID, ActorID, Role",
        "schema_with_content": "Productions : ProductionID (2, 3, 5), Title ('Show Five', 'Film Two', 'Movie One'), ReleaseDate ('2021-11-01', '2021-09-01', '2021-07-01') | Locations : LocationID (3, 2, 4), Name ('Backlot 1', 'Interior Scenes 1', 'Exterior Shoots 1'), Type ('Interior', 'Backlot', 'Stage') | Productions_Locations : ProductionID (5, 2, 1), LocationID (1, 2, 1) | Actors : ActorID (2, 4, 5), FirstName ('Alice', 'John', 'Emma'), LastName ('Green', 'Brown', 'Wilson'), Birthdate ('1980-06-23', '1992-04-01', '1978-05-12') | Cast : ProductionID (2, 2, 3), ActorID (2, 1, 3), Role ('Supporting Actor', 'Supporting Actor', 'Narrator')",
        "ambiguous_queries": [
            "SELECT Locations.Type from Productions_Locations join Locations on Productions_Locations.LocationID = Locations.LocationID join Productions on Productions_Locations.ProductionID = Productions.ProductionID GROUP BY Productions_Locations.LocationID HAVING COUNT(DISTINCT Productions_Locations.ProductionID) = (SELECT COUNT(*) FROM Productions)",
            "select productions.title , locations.type from Productions_Locations join Locations on Productions_Locations.LocationID = Locations.LocationID join Productions on Productions_Locations.ProductionID = Productions.ProductionID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each production\": [\"for each production individually\", \"common to all productions\"]}"
        },
        "clarification_context": "\"each production\" refers to \"common to all productions\"",
        "clear_ambiguity": "{\"each production\": \"common to all productions\"}",
        "gold_query": "SELECT Locations.Type from Productions_Locations join Locations on Productions_Locations.LocationID = Locations.LocationID join Productions on Productions_Locations.ProductionID = Productions.ProductionID GROUP BY Productions_Locations.LocationID HAVING COUNT(DISTINCT Productions_Locations.ProductionID) = (SELECT COUNT(*) FROM Productions)"
    },
    {
        "index": 1290,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_continuity_coordinators_challenges/scope_continuity_coordinators_challenges.sqlite",
        "question": "Which challenges are associated with each continuity coordinator?",
        "schema_without_content": "Continuity_Coordinators : ID, Name, Experience | Challenges : ChallengeID, ChallengeName | Continuity_Coordinators_Challenges : CoordinatorID, ChallengeID",
        "schema_with_content": "Continuity_Coordinators : ID (5, 4, 3), Name ('Carol Black', 'Bob White', 'Jane Smith'), Experience (9, 8, 7) | Challenges : ChallengeID (4, 3, 2), ChallengeName ('Prop Management', 'Wardrobe Changes', 'Sound Quality') | Continuity_Coordinators_Challenges : CoordinatorID (4, 1, 3), ChallengeID (5, 2, 1)",
        "ambiguous_queries": [
            "SELECT Challenges.ChallengeName from Continuity_Coordinators_Challenges join Challenges on Continuity_Coordinators_Challenges.ChallengeID = Challenges.ChallengeID join Continuity_Coordinators on Continuity_Coordinators_Challenges.CoordinatorID = Continuity_Coordinators.ID GROUP BY Continuity_Coordinators_Challenges.ChallengeID HAVING COUNT(DISTINCT Continuity_Coordinators_Challenges.CoordinatorID) = (SELECT COUNT(*) FROM Continuity_Coordinators)",
            "select continuity_coordinators.name , challenges.challengename from Continuity_Coordinators_Challenges join Challenges on Continuity_Coordinators_Challenges.ChallengeID = Challenges.ChallengeID join Continuity_Coordinators on Continuity_Coordinators_Challenges.CoordinatorID = Continuity_Coordinators.ID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each continuity coordinator\": [\"for each continuity coordinator individually\", \"common to all continuity coordinators\"]}"
        },
        "clarification_context": "\"each continuity coordinator\" refers to \"common to all continuity coordinators\"",
        "clear_ambiguity": "{\"each continuity coordinator\": \"common to all continuity coordinators\"}",
        "gold_query": "SELECT Challenges.ChallengeName from Continuity_Coordinators_Challenges join Challenges on Continuity_Coordinators_Challenges.ChallengeID = Challenges.ChallengeID join Continuity_Coordinators on Continuity_Coordinators_Challenges.CoordinatorID = Continuity_Coordinators.ID GROUP BY Continuity_Coordinators_Challenges.ChallengeID HAVING COUNT(DISTINCT Continuity_Coordinators_Challenges.CoordinatorID) = (SELECT COUNT(*) FROM Continuity_Coordinators)"
    },
    {
        "index": 1291,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_land_trusts_properties/scope_land_trusts_properties.sqlite",
        "question": "Give me the type of property that every land trust has.",
        "schema_without_content": "Land_Trusts : id, trustName, location | Land_Trusts_Properties : landTrustId, propertyId | Properties : propertyId, typeOfProperty",
        "schema_with_content": "Land_Trusts : id (1, 2, 4), trustName ('Coastal Trust', 'Forest Trust', 'Water Trust'), location ('Washington', 'California', 'Florida') | Land_Trusts_Properties : landTrustId (3, 5, 4), propertyId (1, 4, 1) | Properties : propertyId (4, 2, 5), typeOfProperty ('Residential Property', 'Conservation Easement', 'Commercial Property')",
        "ambiguous_queries": [
            "SELECT Properties.typeOfProperty from Land_Trusts_Properties join Properties on Land_Trusts_Properties.propertyId = Properties.propertyId join Land_Trusts on Land_Trusts_Properties.landTrustId = Land_Trusts.id GROUP BY Land_Trusts_Properties.propertyId HAVING COUNT(DISTINCT Land_Trusts_Properties.landTrustId) = (SELECT COUNT(*) FROM Land_Trusts)",
            "select land_trusts.trustname , properties.typeofproperty from Land_Trusts_Properties join Properties on Land_Trusts_Properties.propertyId = Properties.propertyId join Land_Trusts on Land_Trusts_Properties.landTrustId = Land_Trusts.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every land trust\": [\"for each land trust individually\", \"common to all land trusts\"]}"
        },
        "clarification_context": "\"every land trust\" refers to \"for each land trust individually\"",
        "clear_ambiguity": "{\"every land trust\": \"for each land trust individually\"}",
        "gold_query": "select land_trusts.trustname , properties.typeofproperty from Land_Trusts_Properties join Properties on Land_Trusts_Properties.propertyId = Properties.propertyId join Land_Trusts on Land_Trusts_Properties.landTrustId = Land_Trusts.id"
    },
    {
        "index": 1292,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_content/scope_streaming_service_content.sqlite",
        "question": "Show me the content each streaming service offers.",
        "schema_without_content": "Streaming_Service : id, name, subscription_fee | Content : content_id, type, description, price | Streaming_Service_Content : streaming_service_id, content_id",
        "schema_with_content": "Streaming_Service : id (3, 1, 4), name ('Hulu', 'Netflix', 'Disney+'), subscription_fee (14.99, 5.99, 8.99) | Content : content_id (5, 3, 6), type ('Animation', 'Kids Show', 'Netflix Originals'), description ('A thrilling action movie.', 'An engaging animated film.', 'An exciting crime series.'), price (2.99, 1.99, 4.99) | Streaming_Service_Content : streaming_service_id (4, 5, 2), content_id (5, 2, 1)",
        "ambiguous_queries": [
            "SELECT Content.type from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Content.content_id HAVING COUNT(DISTINCT Streaming_Service_Content.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)",
            "select streaming_service.name , content.type from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"each streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_service.name , content.type from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id"
    },
    {
        "index": 1293,
        "db_id": "Banking",
        "ambig_type": "scope",
        "db_file": "scope/Banking/scope_bank_statements_information/scope_bank_statements_information.sqlite",
        "question": "What value and description do we have for each bank statement?",
        "schema_without_content": "Accounts : id, name, balance | Transactions : id, date, amount, type | Information : info_id, description, value | Bank_Statements : statement_id, account_id, transaction_id | Bank_Statement_Information : bank_statement_info_id, bank_statements_id, information_id",
        "schema_with_content": "Accounts : id (2, 3, 1), name ('Bob Brown', 'Jane Smith', 'John Doe'), balance (3000.0, 2000.0, 4000.0) | Transactions : id (1, 5, 2), date ('2022-01-02', '2022-01-01', '2022-01-04'), amount (100.0, 50.0, 75.0), type ('Deposit', 'Fee', 'Transfer') | Information : info_id (2, 4, 1), description ('Transaction History', 'Other Value', 'Transaction History'), value ('Transaction 2 Description', 5678.9, 'Transaction 1 Description') | Bank_Statements : statement_id (5, 4, 3), account_id (5, 4, 3), transaction_id (5, 3, 4) | Bank_Statement_Information : bank_statement_info_id (6, 7, 3), bank_statements_id (2, 1, 2), information_id (1, 4, 1)",
        "ambiguous_queries": [
            "SELECT Information.description, Information.value from Bank_Statement_Information join Information on Bank_Statement_Information.information_id = Information.info_id join Bank_Statements on Bank_Statement_Information.bank_statements_id = Bank_Statements.statement_id GROUP BY Bank_Statement_Information.information_id HAVING COUNT(DISTINCT Bank_Statement_Information.bank_statements_id) = (SELECT COUNT(*) FROM Bank_Statements)",
            "select bank_statements.statement_id , information.description , information.value from Bank_Statement_Information join Information on Bank_Statement_Information.information_id = Information.info_id join Bank_Statements on Bank_Statement_Information.bank_statements_id = Bank_Statements.statement_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each bank statement\": [\"for each bank statement individually\", \"common to all bank statements\"]}"
        },
        "clarification_context": "\"each bank statement\" refers to \"common to all bank statements\"",
        "clear_ambiguity": "{\"each bank statement\": \"common to all bank statements\"}",
        "gold_query": "SELECT Information.description, Information.value from Bank_Statement_Information join Information on Bank_Statement_Information.information_id = Information.info_id join Bank_Statements on Bank_Statement_Information.bank_statements_id = Bank_Statements.statement_id GROUP BY Bank_Statement_Information.information_id HAVING COUNT(DISTINCT Bank_Statement_Information.bank_statements_id) = (SELECT COUNT(*) FROM Bank_Statements)"
    },
    {
        "index": 1294,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_newspapers_columns/scope_newspapers_columns.sqlite",
        "question": "Show me the columns each newspaper publishes.",
        "schema_without_content": "Newspapers : id, name, publication_date | Columns : id, column_name | Writers : id, first_name, last_name, email | Articles : id, title, content, publish_date, newspaper_id, writer_id | Newspapers_Columns : newspaper_id, column_id",
        "schema_with_content": "Newspapers : id (1, 4, 5), name ('The Weekly Times', 'The Daily News', 'Weekend Review'), publication_date ('2021-11-01', '2021-10-01', '2021-09-01') | Columns : id (3, 2, 1), column_name ('Politics', 'Lifestyle', 'Fashion') | Writers : id (1, 3, 2), first_name ('John', 'Jane', 'Alice'), last_name ('White', 'Doe', 'Green'), email ('robertwhite@hotmail.com', 'johnsmith@example.com', 'alicelgreen@gmail.com') | Articles : id (3, 5, 2), title ('Understanding Modern Technologies', 'How Technology is Changing Our Lives', 'The Impact of Politics on Society'), content ('Exploring the latest tech...', 'This piece discusses...', 'Some useful tips...'), publish_date ('2021-11-22 14:00:00', '2021-10-03 10:00:00', '2021-12-12 09:00:00'), newspaper_id (1, 1, 2), writer_id (4, 2, 3) | Newspapers_Columns : newspaper_id (2, 3, 1), column_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Columns.column_name from Newspapers_Columns join Columns on Newspapers_Columns.column_id = Columns.id join Newspapers on Newspapers_Columns.newspaper_id = Newspapers.id GROUP BY Newspapers_Columns.column_id HAVING COUNT(DISTINCT Newspapers_Columns.newspaper_id) = (SELECT COUNT(*) FROM Newspapers)",
            "select newspapers.name , columns.column_name from Newspapers_Columns join Columns on Newspapers_Columns.column_id = Columns.id join Newspapers on Newspapers_Columns.newspaper_id = Newspapers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each newspaper\": [\"for each newspaper individually\", \"common to all newspapers\"]}"
        },
        "clarification_context": "\"each newspaper\" refers to \"for each newspaper individually\"",
        "clear_ambiguity": "{\"each newspaper\": \"for each newspaper individually\"}",
        "gold_query": "select newspapers.name , columns.column_name from Newspapers_Columns join Columns on Newspapers_Columns.column_id = Columns.id join Newspapers on Newspapers_Columns.newspaper_id = Newspapers.id"
    },
    {
        "index": 1295,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
        "question": "Show me the style description for each hair stylist.",
        "schema_without_content": "Hair_Stylists : id, name, experience | Styles : style_id, style_name, description | Hair_Stylists_Styles : hairdresser_id, style_id | Film_Projects : project_id, title, release_date | Actors : actor_id, first_name, last_name, birth_date | Roles : role_id, character_name, film_project_id | Casting : casting_id, actor_id, role_id",
        "schema_with_content": "Hair_Stylists : id (5, 2, 3), name ('Emily Johnson', 'Linda Davis', 'Jane Smith'), experience (7, 3, 10) | Styles : style_id (2, 4, 1), style_name ('Curl', 'Period Hairstyle', 'Bob'), description ('A short haircut that falls just below the chin.', 'A hairstyle characterized by curls or waves in the hair.', 'A very short haircut with hair cut close to the scalp.') | Hair_Stylists_Styles : hairdresser_id (4, 5, 3), style_id (1, 1, 4) | Film_Projects : project_id (1, 2, 5), title ('Black Swan', 'Inception', 'Interstellar'), release_date ('2010-07-16', '2014-11-07', '2016-12-02') | Actors : actor_id (3, 5, 4), first_name ('Natalie', 'Christian', 'Anne'), last_name ('Hathaway', 'Bale', 'Page'), birth_date ('1974-01-30', '1982-11-12', '1981-06-09') | Roles : role_id (1, 4, 5), character_name ('Arthur', 'Cooper', 'Sebastian'), film_project_id (3, 5, 2) | Casting : casting_id (1, 2, 3), actor_id (5, 4, 1), role_id (1, 5, 4)",
        "ambiguous_queries": [
            "SELECT Styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)",
            "select hair_stylists.name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each hair stylist\": [\"for each hair stylist individually\", \"common to all hair stylists\"]}"
        },
        "clarification_context": "\"each hair stylist\" refers to \"common to all hair stylists\"",
        "clear_ambiguity": "{\"each hair stylist\": \"common to all hair stylists\"}",
        "gold_query": "SELECT Styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)"
    },
    {
        "index": 1296,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
        "question": "What user interface types are there for every streaming service?",
        "schema_without_content": "Streaming_Service : id, name, price | User_Interface : id, interface_type | Streaming_Service_User_Interface : streaming_service_id, user_interface_id",
        "schema_with_content": "Streaming_Service : id (1, 4, 3), name ('Netflix', 'Amazon Prime Video', 'Hulu'), price (12.99, 14.99, 8.99) | User_Interface : id (3, 4, 2), interface_type ('Customizable Mode', 'Light Mode', 'Minimalist Mode') | Streaming_Service_User_Interface : streaming_service_id (4, 1, 2), user_interface_id (2, 2, 4)",
        "ambiguous_queries": [
            "SELECT User_Interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_User_Interface.user_interface_id HAVING COUNT(DISTINCT Streaming_Service_User_Interface.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)",
            "select streaming_service.name , user_interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"every streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"every streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_service.name , user_interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id"
    },
    {
        "index": 1297,
        "db_id": "Banking",
        "ambig_type": "scope",
        "db_file": "scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
        "question": "What is the transaction type, id and account number for each bank statement?",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName | Accounts : AccountNumber, CustomerID, Balance | Transactions : TransactionID, AccountNumber, TransactionType, Amount, Date | Bank_Statements : StatementID, AccountNumber, StartDate, EndDate, TotalAmount | Bank_Statements_Transactions : StatementTransactionID, StatementID, TransactionID",
        "schema_with_content": "Customers : CustomerID (2, 5, 3), FirstName ('David', 'Emily', 'Jane'), LastName ('Doe', 'White', 'Black') | Accounts : AccountNumber (1, 5, 4), CustomerID (1, 3, 4), Balance (900.0, 700.0, 600.0) | Transactions : TransactionID (9, 5, 10), AccountNumber (3, 3, 5), TransactionType ('Transfer', 'Transfer', 'Subscription_Payments'), Amount (170.0, 190.0, 180.0), Date ('2024-01-30 18:53:44', '2024-01-30 18:53:44', '2024-01-30 18:53:44') | Bank_Statements : StatementID (1, 5, 4), AccountNumber (1, 2, 4), StartDate ('2021-04-01', '2021-05-01', '2021-03-01'), EndDate ('2021-03-31', '2021-02-28', '2021-04-30'), TotalAmount (260.0, 250.0, 280.0) | Bank_Statements_Transactions : StatementTransactionID (13, 6, 5), StatementID (3, 2, 4), TransactionID (8, 4, 5)",
        "ambiguous_queries": [
            "SELECT Transactions.TransactionID, Transactions.AccountNumber, Transactions.TransactionType from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)",
            "select bank_statements.accountnumber , transactions.transactionid , transactions.accountnumber , transactions.transactiontype from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each bank statement\": [\"for each bank statement individually\", \"common to all bank statements\"]}"
        },
        "clarification_context": "\"each bank statement\" refers to \"for each bank statement individually\"",
        "clear_ambiguity": "{\"each bank statement\": \"for each bank statement individually\"}",
        "gold_query": "select bank_statements.accountnumber , transactions.transactionid , transactions.accountnumber , transactions.transactiontype from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
    },
    {
        "index": 1298,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_devices_compatibility/scope_streaming_services_devices_compatibility.sqlite",
        "question": "Give me the devices we have for every streaming service",
        "schema_without_content": "Devices_Compatibility : id, deviceName, isActive | Streaming_Services : id, serviceName, subscriptionPrice | SubscriptionPlans : id, planName, price | Users : id, userName, emailAddress | UserSubscriptions : userId, streamingServiceId, subscriptionPlanId | DeviceUsers : deviceId, userId | Streaming_Service_Devices_Compatibility : streamingServiceId, deviceTypeId",
        "schema_with_content": "Devices_Compatibility : id (2, 1, 3), deviceName ('Mobile Phone', 'Laptop', 'Gaming Console'), isActive (1, 0, 1) | Streaming_Services : id (3, 5, 4), serviceName ('Hulu', 'Netflix', 'Amazon Prime Video'), subscriptionPrice (8.99, 7.99, 4.99) | SubscriptionPlans : id (4, 2, 1), planName ('Basic Plan', 'Premium Plan', 'Standard Plan'), price (20, 10, 5) | Users : id (2, 4, 3), userName ('MikeSmith', 'AliceBrown', 'JohnDoe'), emailAddress ('bobwhite@example.com', 'johndoe@example.com', 'alicebrown@example.com') | UserSubscriptions : userId (), streamingServiceId (), subscriptionPlanId () | DeviceUsers : deviceId (), userId () | Streaming_Service_Devices_Compatibility : streamingServiceId (1, 5, 2), deviceTypeId (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Devices_Compatibility.deviceName from Streaming_Service_Devices_Compatibility join Devices_Compatibility on Streaming_Service_Devices_Compatibility.deviceTypeId = Devices_Compatibility.id join Streaming_Services on Streaming_Service_Devices_Compatibility.streamingServiceId = Streaming_Services.id GROUP BY Streaming_Service_Devices_Compatibility.deviceTypeId HAVING COUNT(DISTINCT Streaming_Service_Devices_Compatibility.streamingServiceId) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.servicename , devices_compatibility.devicename from Streaming_Service_Devices_Compatibility join Devices_Compatibility on Streaming_Service_Devices_Compatibility.deviceTypeId = Devices_Compatibility.id join Streaming_Services on Streaming_Service_Devices_Compatibility.streamingServiceId = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"every streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"every streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Devices_Compatibility.deviceName from Streaming_Service_Devices_Compatibility join Devices_Compatibility on Streaming_Service_Devices_Compatibility.deviceTypeId = Devices_Compatibility.id join Streaming_Services on Streaming_Service_Devices_Compatibility.streamingServiceId = Streaming_Services.id GROUP BY Streaming_Service_Devices_Compatibility.deviceTypeId HAVING COUNT(DISTINCT Streaming_Service_Devices_Compatibility.streamingServiceId) = (SELECT COUNT(*) FROM Streaming_Services)"
    },
    {
        "index": 1299,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
        "question": "Give me the name and version of programs for each editor.",
        "schema_without_content": "Editors : editor_id, full_name | Software_Programs : program_id, name, version | FilmProjects : project_id, title, release_date | Directors : director_id, first_name, last_name | Actors : actor_id, first_name, last_name | EditorDirectorRelationship : relationship_id, director_id, editor_id | ProjectActors : project_actor_id, film_project_id, actor_id | DirectorFilmProjects : director_film_project_id, director_id, film_project_id | EditorSoftwarePrograms : editor_software_program_id, editor_id, software_program_id",
        "schema_with_content": "Editors : editor_id (5, 1, 3), full_name ('John Doe', 'Jane Smith', 'David Black') | Software_Programs : program_id (2, 3, 4), name ('HitFilm Express', 'Avid Media Composer', 'Final Cut Pro'), version ('2020', '13', '16') | FilmProjects : project_id (2, 5, 1), title ('Forrest Gump', 'The Godfather', 'The Shawshank Redemption'), release_date ('1994-10-14', '1994-07-06', '1994-09-22') | Directors : director_id (2, 3, 1), first_name ('Steven', 'Quentin', 'Ronald'), last_name ('Scorsese', 'Capra', 'Spielberg') | Actors : actor_id (4, 1, 5), first_name ('Tom', 'Kevin', 'Elijah'), last_name ('Costner', 'DiCaprio', 'Hanks') | EditorDirectorRelationship : relationship_id (3, 5, 2), director_id (3, 1, 2), editor_id (3, 5, 1) | ProjectActors : project_actor_id (4, 3, 2), film_project_id (3, 1, 4), actor_id (2, 1) | DirectorFilmProjects : director_film_project_id (2, 4, 5), director_id (2, 5, 1), film_project_id (1, 3) | EditorSoftwarePrograms : editor_software_program_id (3, 9, 2), editor_id (4, 5, 3), software_program_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Software_Programs.name, Software_Programs.version from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id GROUP BY EditorSoftwarePrograms.software_program_id HAVING COUNT(DISTINCT EditorSoftwarePrograms.editor_id) = (SELECT COUNT(*) FROM Editors)",
            "select editors.full_name , software_programs.name , software_programs.version from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each editor\": [\"for each editor individually\", \"common to all editors\"]}"
        },
        "clarification_context": "\"each editor\" refers to \"for each editor individually\"",
        "clear_ambiguity": "{\"each editor\": \"for each editor individually\"}",
        "gold_query": "select editors.full_name , software_programs.name , software_programs.version from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id"
    },
    {
        "index": 1300,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_medical_schools_courses/scope_medical_schools_courses.sqlite",
        "question": "What courses do we have at every medical school?",
        "schema_without_content": "Medical_Schools : id, name, location | Courses : id, courseName, duration | Medical_School_Courses : id, schoolId, courseId",
        "schema_with_content": "Medical_Schools : id (3, 5, 2), name ('Harvard Medical School', 'Yale School of Medicine', 'Stanford University School of Medicine'), location ('Stanford', 'Boston', 'San Francisco') | Courses : id (4, 3, 5), courseName ('Physiology', 'Anatomy', 'Biology'), duration (3, 3, 1) | Medical_School_Courses : id (6, 4, 2), schoolId (5, 5, 3), courseId (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Courses.courseName from Medical_School_Courses join Courses on Medical_School_Courses.courseId = Courses.id join Medical_Schools on Medical_School_Courses.schoolId = Medical_Schools.id GROUP BY Medical_School_Courses.courseId HAVING COUNT(DISTINCT Medical_School_Courses.schoolId) = (SELECT COUNT(*) FROM Medical_Schools)",
            "select medical_schools.name , courses.coursename from Medical_School_Courses join Courses on Medical_School_Courses.courseId = Courses.id join Medical_Schools on Medical_School_Courses.schoolId = Medical_Schools.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every medical school\": [\"for each medical school individually\", \"common to all medical schools\"]}"
        },
        "clarification_context": "\"every medical school\" refers to \"for each medical school individually\"",
        "clear_ambiguity": "{\"every medical school\": \"for each medical school individually\"}",
        "gold_query": "select medical_schools.name , courses.coursename from Medical_School_Courses join Courses on Medical_School_Courses.courseId = Courses.id join Medical_Schools on Medical_School_Courses.schoolId = Medical_Schools.id"
    },
    {
        "index": 1301,
        "db_id": "Banking",
        "ambig_type": "scope",
        "db_file": "scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
        "question": "Show me the transaction types and dates we have for each bank statement",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName | Accounts : AccountNumber, CustomerID, Balance | Transactions : TransactionID, AccountNumber, TransactionType, Amount, Date | Bank_Statements : StatementID, AccountNumber, StartDate, EndDate, TotalAmount | Bank_Statements_Transactions : StatementTransactionID, StatementID, TransactionID",
        "schema_with_content": "Customers : CustomerID (2, 3, 5), FirstName ('Emily', 'Michael', 'David'), LastName ('White', 'Brown', 'Black') | Accounts : AccountNumber (1, 4, 3), CustomerID (5, 2, 3), Balance (600.0, 800.0, 1000.0) | Transactions : TransactionID (2, 1, 6), AccountNumber (3, 2, 4), TransactionType ('Subscription_Payments', 'Subscription_Payments', 'Transfer'), Amount (200.0, 120.0, 140.0), Date ('2024-01-30 18:53:44', '2024-01-30 18:53:44', '2024-01-30 18:53:44') | Bank_Statements : StatementID (1, 3, 2), AccountNumber (3, 2, 4), StartDate ('2021-05-01', '2021-03-01', '2021-01-01'), EndDate ('2021-01-31', '2021-03-31', '2021-04-30'), TotalAmount (280.0, 250.0, 290.0) | Bank_Statements_Transactions : StatementTransactionID (6, 11, 12), StatementID (1, 1, 3), TransactionID (5, 9, 2)",
        "ambiguous_queries": [
            "SELECT Transactions.TransactionType, Transactions.Date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)",
            "select bank_statements.accountnumber , transactions.transactiontype , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each bank statement\": [\"for each bank statement individually\", \"common to all bank statements\"]}"
        },
        "clarification_context": "\"each bank statement\" refers to \"common to all bank statements\"",
        "clear_ambiguity": "{\"each bank statement\": \"common to all bank statements\"}",
        "gold_query": "SELECT Transactions.TransactionType, Transactions.Date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
    },
    {
        "index": 1302,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_construction_companies_projects/scope_construction_companies_projects.sqlite",
        "question": "Give the type and start date of the project that each construction company is working on.",
        "schema_without_content": "Construction_Companies : id, company_name, location | Projects : id, project_type, start_date, end_date | Construction_Companies_Projects : construction_company_id, project_id | House_Sizes : house_size_id, size_in_sqft, price | Material_Types : material_type_id, type_of_material, cost_per_unit",
        "schema_with_content": "Construction_Companies : id (5, 3, 2), company_name ('Company C', 'Company D', 'Company E'), location ('New York', 'Chicago', 'Houston') | Projects : id (4, 1, 2), project_type ('Foundation', 'Industrial', 'Infrastructure'), start_date ('2024-01-01', '2026-01-01', '2025-01-01'), end_date ('2024-12-01', '2026-12-01', '2023-12-01') | Construction_Companies_Projects : construction_company_id (2, 3, 1), project_id (2, 1, 1) | House_Sizes : house_size_id (1, 2, 3), size_in_sqft (1500, 2500, 3000), price (350, 200, 400) | Material_Types : material_type_id (1, 3, 5), type_of_material ('Wood', 'Steel', 'Glass'), cost_per_unit (90.0, 80.0, 70.0)",
        "ambiguous_queries": [
            "SELECT Projects.project_type, Projects.start_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id GROUP BY Construction_Companies_Projects.project_id HAVING COUNT(DISTINCT Construction_Companies_Projects.construction_company_id) = (SELECT COUNT(*) FROM Construction_Companies)",
            "select construction_companies.company_name , projects.project_type , projects.start_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each construction company\": [\"for each construction company individually\", \"common to all construction companies\"]}"
        },
        "clarification_context": "\"each construction company\" refers to \"for each construction company individually\"",
        "clear_ambiguity": "{\"each construction company\": \"for each construction company individually\"}",
        "gold_query": "select construction_companies.company_name , projects.project_type , projects.start_date from Construction_Companies_Projects join Projects on Construction_Companies_Projects.project_id = Projects.id join Construction_Companies on Construction_Companies_Projects.construction_company_id = Construction_Companies.id"
    },
    {
        "index": 1303,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_communities_features2/scope_communities_features2.sqlite",
        "question": "Show me the features every community has.",
        "schema_without_content": "Communities : id, name, location | Features : id, feature_name | Communities_Features : community_id, feature_id",
        "schema_with_content": "Communities : id (3, 4, 2), name ('Tech City', 'Innovation Hub', 'Silicon Valley'), location ('Colorado', 'New York', 'California') | Features : id (2, 1, 4), feature_name ('Park', 'Hospital', 'School') | Communities_Features : community_id (5, 2, 1), feature_id (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Features.feature_name from Communities_Features join Features on Communities_Features.feature_id = Features.id join Communities on Communities_Features.community_id = Communities.id GROUP BY Communities_Features.feature_id HAVING COUNT(DISTINCT Communities_Features.community_id) = (SELECT COUNT(*) FROM Communities)",
            "select communities.name , features.feature_name from Communities_Features join Features on Communities_Features.feature_id = Features.id join Communities on Communities_Features.community_id = Communities.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every community\": [\"for each community individually\", \"common to all communities\"]}"
        },
        "clarification_context": "\"every community\" refers to \"common to all communities\"",
        "clear_ambiguity": "{\"every community\": \"common to all communities\"}",
        "gold_query": "SELECT Features.feature_name from Communities_Features join Features on Communities_Features.feature_id = Features.id join Communities on Communities_Features.community_id = Communities.id GROUP BY Communities_Features.feature_id HAVING COUNT(DISTINCT Communities_Features.community_id) = (SELECT COUNT(*) FROM Communities)"
    },
    {
        "index": 1304,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_airports_facilities/scope_airports_facilities.sqlite",
        "question": "Give me the facilities that all airports offer.",
        "schema_without_content": "Airports : AirportID, Name, Location | Facilities : FacilityID, Type | Airports_Facilities : AirportID, FacilityID",
        "schema_with_content": "Airports : AirportID (1, 2, 5), Name ('ORD International', 'ATL Hartsfield-Jackson', 'LAX International'), Location ('Washington D.C.', 'New York', 'Chicago') | Facilities : FacilityID (4, 3, 5), Type ('Baggage Storage', 'Car Rental', 'Duty Free Shopping') | Airports_Facilities : AirportID (3, 5, 5), FacilityID (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Facilities.Type from Airports_Facilities join Facilities on Airports_Facilities.FacilityID = Facilities.FacilityID join Airports on Airports_Facilities.AirportID = Airports.AirportID GROUP BY Airports_Facilities.FacilityID HAVING COUNT(DISTINCT Airports_Facilities.AirportID) = (SELECT COUNT(*) FROM Airports)",
            "select airports.name , facilities.type from Airports_Facilities join Facilities on Airports_Facilities.FacilityID = Facilities.FacilityID join Airports on Airports_Facilities.AirportID = Airports.AirportID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"all airports\": [\"for each airports individually\", \"common across all airports\"]}"
        },
        "clarification_context": "\"all airports\" refers to \"for each airports individually\"",
        "clear_ambiguity": "{\"all airports\": \"for each airports individually\"}",
        "gold_query": "select airports.name , facilities.type from Airports_Facilities join Facilities on Airports_Facilities.FacilityID = Facilities.FacilityID join Airports on Airports_Facilities.AirportID = Airports.AirportID"
    },
    {
        "index": 1305,
        "db_id": "Entertainment",
        "ambig_type": "scope",
        "db_file": "scope/Entertainment/scope_circles_performers/scope_circles_performers.sqlite",
        "question": "What performer is there in every circus?",
        "schema_without_content": "Circles : id, name | Performers : id, type | Shows : id, title, start_date, end_date | Venues : id, name | ShowVenues : show_id, venue_id, date | CircleShows : circle_id, show_id | CirclePerformers : circle_id, performer_id",
        "schema_with_content": "Circles : id (2, 3, 1), name ('The Red Nose Circus', 'Acrobatics Extravaganza', 'The Magic Show') | Performers : id (1, 2, 3), type ('Singer', 'Clown', 'Dancer') | Shows : id (3, 1, 2), title ('Midweek Matinee', 'Opening Night', 'End Of Season Party'), start_date ('2023-01-01', '2023-02-15', '2023-03-30'), end_date ('2023-01-31', '2023-03-31', '2023-02-19') | Venues : id (3, 1, 2), name ('Riverfront Amphitheater', 'City Hall Auditorium', 'Big Top Tent') | ShowVenues : show_id (3, 1, 2), venue_id (1, 3, 2), date ('2023-01-01', '2023-03-30', '2023-02-16') | CircleShows : circle_id (1, 3, 2), show_id (1, 1, 3) | CirclePerformers : circle_id (2, 3, 1), performer_id (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Performers.type from CirclePerformers join Performers on CirclePerformers.performer_id = Performers.id join Circles on CirclePerformers.circle_id = Circles.id GROUP BY CirclePerformers.performer_id HAVING COUNT(DISTINCT CirclePerformers.circle_id) = (SELECT COUNT(*) FROM Circles)",
            "select circles.name , performers.type from CirclePerformers join Performers on CirclePerformers.performer_id = Performers.id join Circles on CirclePerformers.circle_id = Circles.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every circus\": [\"for each circus individually\", \"common to all circuses\"]}"
        },
        "clarification_context": "\"every circus\" refers to \"common to all circuses\"",
        "clear_ambiguity": "{\"every circus\": \"common to all circuses\"}",
        "gold_query": "SELECT Performers.type from CirclePerformers join Performers on CirclePerformers.performer_id = Performers.id join Circles on CirclePerformers.circle_id = Circles.id GROUP BY CirclePerformers.performer_id HAVING COUNT(DISTINCT CirclePerformers.circle_id) = (SELECT COUNT(*) FROM Circles)"
    },
    {
        "index": 1306,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_sound_designers_techniques/scope_sound_designers_techniques.sqlite",
        "question": "Show me the techniques each sound designer uses.",
        "schema_without_content": "Sound_Designers : ID, Name, Email | Techniques : ID, MethodName | Movies : ID, Title, ReleaseYear | Directors : ID, Firstname, Lastname | Producers : ID, Firstname, Lastname | Movie_Director : MovieID, DirectorID | Movie_Producer : MovieID, ProducerID | Sound_Designer_Movie : SoundDesignerID, MovieID | Sound_Designer_Technique : SoundDesignerID, TechniqueID",
        "schema_with_content": "Sound_Designers : ID (3, 2, 4), Name ('Jane Smith', 'Alice Johnson', 'Charlie Green'), Email ('jane@example.com', 'alice@example.com', 'charlie@example.com') | Techniques : ID (3, 2, 5), MethodName ('Field Recording', 'Foley Artistry', 'Mixing & Mastering') | Movies : ID (2, 5, 3), Title ('Forrest Gump', 'Good Will Hunting', \"Schindler's List\"), ReleaseYear (1994, 1997, 1994) | Directors : ID (4, 2, 1), Firstname ('Robert', 'Quentin', 'Frank'), Lastname ('Spielberg', 'Zemeckis', 'Darabont') | Producers : ID (2, 1, 4), Firstname ('David', 'Gordon', 'Harvey'), Lastname ('Carroll', 'Brokaw', 'Weinstein') | Movie_Director : MovieID (), DirectorID () | Movie_Producer : MovieID (), ProducerID () | Sound_Designer_Movie : SoundDesignerID (), MovieID () | Sound_Designer_Technique : SoundDesignerID (5, 2, 1), TechniqueID (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Techniques.MethodName from Sound_Designer_Technique join Techniques on Sound_Designer_Technique.TechniqueID = Techniques.ID join Sound_Designers on Sound_Designer_Technique.SoundDesignerID = Sound_Designers.ID GROUP BY Sound_Designer_Technique.TechniqueID HAVING COUNT(DISTINCT Sound_Designer_Technique.SoundDesignerID) = (SELECT COUNT(*) FROM Sound_Designers)",
            "select sound_designers.name , techniques.methodname from Sound_Designer_Technique join Techniques on Sound_Designer_Technique.TechniqueID = Techniques.ID join Sound_Designers on Sound_Designer_Technique.SoundDesignerID = Sound_Designers.ID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each sound designer\": [\"for each sound designer individually\", \"common to all sound designers\"]}"
        },
        "clarification_context": "\"each sound designer\" refers to \"for each sound designer individually\"",
        "clear_ambiguity": "{\"each sound designer\": \"for each sound designer individually\"}",
        "gold_query": "select sound_designers.name , techniques.methodname from Sound_Designer_Technique join Techniques on Sound_Designer_Technique.TechniqueID = Techniques.ID join Sound_Designers on Sound_Designer_Technique.SoundDesignerID = Sound_Designers.ID"
    },
    {
        "index": 1307,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_quality_assurance_testers_test_cases/scope_quality_assurance_testers_test_cases.sqlite",
        "question": "Can you list the test case types each quality assurance tester is qualified for?",
        "schema_without_content": "Quality_Assurance_Testers : testerID, fullName | Test_Cases : testCaseID, caseType, description | Qualified_Tests : testerID, testCaseID, qualificationDate",
        "schema_with_content": "Quality_Assurance_Testers : testerID (1, 5, 2), fullName ('Jane Roe', 'Mike Smith', 'John Doe') | Test_Cases : testCaseID (2, 1, 3), caseType ('Integration_Test', 'Smoke_Test', 'Regression_Test'), description ('This is a functional test case.', 'This is a performance test case.', 'This is an integration test case.') | Qualified_Tests : testerID (2, 1, 1), testCaseID (1, 1, 2), qualificationDate ()",
        "ambiguous_queries": [
            "SELECT Test_Cases.caseType from Qualified_Tests join Test_Cases on Qualified_Tests.testCaseID = Test_Cases.testCaseID join Quality_Assurance_Testers on Qualified_Tests.testerID = Quality_Assurance_Testers.testerID GROUP BY Qualified_Tests.testCaseID HAVING COUNT(DISTINCT Qualified_Tests.testerID) = (SELECT COUNT(*) FROM Quality_Assurance_Testers)",
            "select quality_assurance_testers.fullname , test_cases.casetype from Qualified_Tests join Test_Cases on Qualified_Tests.testCaseID = Test_Cases.testCaseID join Quality_Assurance_Testers on Qualified_Tests.testerID = Quality_Assurance_Testers.testerID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each quality assurance tester\": [\"for each quality assurance tester individually\", \"common to all quality assurance testers\"]}"
        },
        "clarification_context": "\"each quality assurance tester\" refers to \"for each quality assurance tester individually\"",
        "clear_ambiguity": "{\"each quality assurance tester\": \"for each quality assurance tester individually\"}",
        "gold_query": "select quality_assurance_testers.fullname , test_cases.casetype from Qualified_Tests join Test_Cases on Qualified_Tests.testCaseID = Test_Cases.testCaseID join Quality_Assurance_Testers on Qualified_Tests.testerID = Quality_Assurance_Testers.testerID"
    },
    {
        "index": 1308,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_political_reporters_elections/scope_political_reporters_elections.sqlite",
        "question": "Tell me the end dates of elections every reporter covers.",
        "schema_without_content": "Political_Reporters : id, name, email | Elections : id, election_type, start_date, end_date | Political_Reporters_Elections : reporter_id, election_id",
        "schema_with_content": "Political_Reporters : id (3, 5, 1), name ('Bob Brown', 'John Doe', 'Alice Johnson'), email ('john@example.com', 'bob@example.com', 'jane@example.com') | Elections : id (1, 4, 2), election_type ('Presidential_Campaigns', 'Referendums', 'Local_Council_elections'), start_date ('2025-01-01', '2022-01-01', '2024-01-01'), end_date ('2021-12-31', '2024-12-31', '2022-12-31') | Political_Reporters_Elections : reporter_id (2, 2, 1), election_id (1, 3, 1)",
        "ambiguous_queries": [
            "SELECT Elections.end_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id GROUP BY Political_Reporters_Elections.election_id HAVING COUNT(DISTINCT Political_Reporters_Elections.reporter_id) = (SELECT COUNT(*) FROM Political_Reporters)",
            "select political_reporters.name , elections.end_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every reporter\": [\"for each reporter individually\", \"common to all reporters\"]}"
        },
        "clarification_context": "\"every reporter\" refers to \"common to all reporters\"",
        "clear_ambiguity": "{\"every reporter\": \"common to all reporters\"}",
        "gold_query": "SELECT Elections.end_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id GROUP BY Political_Reporters_Elections.election_id HAVING COUNT(DISTINCT Political_Reporters_Elections.reporter_id) = (SELECT COUNT(*) FROM Political_Reporters)"
    },
    {
        "index": 1309,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_press_conferences_participants/scope_press_conferences_participants.sqlite",
        "question": "What are the participant IDs associated with each press conference?",
        "schema_without_content": "Press_Conferences : id, name, date | Participants : id, role, name | Press_Conferences_Participants : press_conference_id, participant_id",
        "schema_with_content": "Press_Conferences : id (3, 2, 5), name ('Presidential Speech', 'Tech Company Announcement', 'Economic Summit'), date ('2023-01-04', '2023-01-02', '2023-01-05') | Participants : id (2, 3, 5), role ('Head of Department', 'Spokesperson', 'Reporter'), name ('Emily Davis', 'John Smith', 'David Brown') | Press_Conferences_Participants : press_conference_id (1, 5, 2), participant_id (1, 1, 4)",
        "ambiguous_queries": [
            "SELECT Participants.id from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id GROUP BY Press_Conferences_Participants.participant_id HAVING COUNT(DISTINCT Press_Conferences_Participants.press_conference_id) = (SELECT COUNT(*) FROM Press_Conferences)",
            "select press_conferences.name , participants.id from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each press conference\": [\"for each press conference individually\", \"common to all press conferences\"]}"
        },
        "clarification_context": "\"each press conference\" refers to \"common to all press conferences\"",
        "clear_ambiguity": "{\"each press conference\": \"common to all press conferences\"}",
        "gold_query": "SELECT Participants.id from Press_Conferences_Participants join Participants on Press_Conferences_Participants.participant_id = Participants.id join Press_Conferences on Press_Conferences_Participants.press_conference_id = Press_Conferences.id GROUP BY Press_Conferences_Participants.participant_id HAVING COUNT(DISTINCT Press_Conferences_Participants.press_conference_id) = (SELECT COUNT(*) FROM Press_Conferences)"
    },
    {
        "index": 1310,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_courts_reporters_trials/scope_courts_reporters_trials.sqlite",
        "question": "Show me the cases each court reporter is covering.",
        "schema_without_content": "Courts_Reporters : id, name, email | Trials : id, caseName, trialType | Courts_Reporters_Trials : reporterId, trialId",
        "schema_with_content": "Courts_Reporters : id (3, 4, 2), name ('Jane Smith', 'Emily Davis', 'David Brown'), email ('emily@example.com', 'michael@example.com', 'david@example.com') | Trials : id (2, 1, 3), caseName ('High_profile_Criminal_Case_3', 'High_profile_Criminal_Case_2', 'Other_Trial_2'), trialType ('Civil', 'Criminal', 'Criminal') | Courts_Reporters_Trials : reporterId (2, 1, 5), trialId (1, 4, 5)",
        "ambiguous_queries": [
            "SELECT Trials.caseName from Courts_Reporters_Trials join Trials on Courts_Reporters_Trials.trialId = Trials.id join Courts_Reporters on Courts_Reporters_Trials.reporterId = Courts_Reporters.id GROUP BY Courts_Reporters_Trials.trialId HAVING COUNT(DISTINCT Courts_Reporters_Trials.reporterId) = (SELECT COUNT(*) FROM Courts_Reporters)",
            "select courts_reporters.name , trials.casename from Courts_Reporters_Trials join Trials on Courts_Reporters_Trials.trialId = Trials.id join Courts_Reporters on Courts_Reporters_Trials.reporterId = Courts_Reporters.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each court reporter\": [\"for each court reporter individually\", \"common to all court reporters\"]}"
        },
        "clarification_context": "\"each court reporter\" refers to \"common to all court reporters\"",
        "clear_ambiguity": "{\"each court reporter\": \"common to all court reporters\"}",
        "gold_query": "SELECT Trials.caseName from Courts_Reporters_Trials join Trials on Courts_Reporters_Trials.trialId = Trials.id join Courts_Reporters on Courts_Reporters_Trials.reporterId = Courts_Reporters.id GROUP BY Courts_Reporters_Trials.trialId HAVING COUNT(DISTINCT Courts_Reporters_Trials.reporterId) = (SELECT COUNT(*) FROM Courts_Reporters)"
    },
    {
        "index": 1311,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_design_build_firms_project_types/scope_design_build_firms_project_types.sqlite",
        "question": "Give me the project descriptions corresponding to each firm.",
        "schema_without_content": "Design_Build_Firms : FirmID, Name, Address | Project_Types : TypeID, Description | Design_Build_Firms_Project_Types : FirmID, TypeID",
        "schema_with_content": "Design_Build_Firms : FirmID (2, 1, 3), Name ('LMN Contractors', 'PQR Builders', 'MNO Homes'), Address ('789 Oak St', '321 Pine St', '123 Main St') | Project_Types : TypeID (6, 4, 3), Description ('Retail', 'Industrial', 'Single Family Residential') | Design_Build_Firms_Project_Types : FirmID (2, 5, 1), TypeID (1, 6, 6)",
        "ambiguous_queries": [
            "SELECT Project_Types.Description from Design_Build_Firms_Project_Types join Project_Types on Design_Build_Firms_Project_Types.TypeID = Project_Types.TypeID join Design_Build_Firms on Design_Build_Firms_Project_Types.FirmID = Design_Build_Firms.FirmID GROUP BY Design_Build_Firms_Project_Types.TypeID HAVING COUNT(DISTINCT Design_Build_Firms_Project_Types.FirmID) = (SELECT COUNT(*) FROM Design_Build_Firms)",
            "select design_build_firms.name , project_types.description from Design_Build_Firms_Project_Types join Project_Types on Design_Build_Firms_Project_Types.TypeID = Project_Types.TypeID join Design_Build_Firms on Design_Build_Firms_Project_Types.FirmID = Design_Build_Firms.FirmID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each firm\": [\"for each firm individually\", \"common to all firms\"]}"
        },
        "clarification_context": "\"each firm\" refers to \"common to all firms\"",
        "clear_ambiguity": "{\"each firm\": \"common to all firms\"}",
        "gold_query": "SELECT Project_Types.Description from Design_Build_Firms_Project_Types join Project_Types on Design_Build_Firms_Project_Types.TypeID = Project_Types.TypeID join Design_Build_Firms on Design_Build_Firms_Project_Types.FirmID = Design_Build_Firms.FirmID GROUP BY Design_Build_Firms_Project_Types.TypeID HAVING COUNT(DISTINCT Design_Build_Firms_Project_Types.FirmID) = (SELECT COUNT(*) FROM Design_Build_Firms)"
    },
    {
        "index": 1312,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_community_development_corporations_initiatives/scope_community_development_corporations_initiatives.sqlite",
        "question": "What description of initiatives is available for each community development corporation?",
        "schema_without_content": "Community_Development_Corporations : id, name, location | Initiatives : id, initiative_name, description | Community_Development_Corporations_Initiatives : community_development_corporation_id, initiative_id",
        "schema_with_content": "Community_Development_Corporations : id (2, 5, 4), name ('CDC2', 'CDC5', 'CDC4'), location ('Houston', 'New York', 'Chicago') | Initiatives : id (3, 4, 2), initiative_name ('Urban_Renewal', 'Youth_Empowerment', 'Eco_Friendly_Construction'), description ('A shelter providing housing for homeless individuals.', 'Revitalizing urban areas by improving infrastructure and public spaces.', 'Promoting sustainable construction practices.') | Community_Development_Corporations_Initiatives : community_development_corporation_id (3, 5, 2), initiative_id (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Initiatives.description from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id GROUP BY Community_Development_Corporations_Initiatives.initiative_id HAVING COUNT(DISTINCT Community_Development_Corporations_Initiatives.community_development_corporation_id) = (SELECT COUNT(*) FROM Community_Development_Corporations)",
            "select community_development_corporations.name , initiatives.description from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each community development corporation\": [\"for each community development corporation individually\", \"common to all community development corporations\"]}"
        },
        "clarification_context": "\"each community development corporation\" refers to \"for each community development corporation individually\"",
        "clear_ambiguity": "{\"each community development corporation\": \"for each community development corporation individually\"}",
        "gold_query": "select community_development_corporations.name , initiatives.description from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id"
    },
    {
        "index": 1313,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
        "question": "Give a list of buildings at our campuses",
        "schema_without_content": "College_Campuses : id, name, location | Buildings : id, type, description | College_Campuses_Buildings : campusId, buildingId",
        "schema_with_content": "College_Campuses : id (5, 1, 3), name ('Harvard University', 'Massachusetts Institute of Technology', 'University of California Berkeley'), location ('Cambridge, MA', 'Stanford, CA', 'Pasadena, CA') | Buildings : id (2, 4, 3), type ('Gymnasium', 'Dormitory', 'Library'), description ('Large rooms used for lectures and presentations.', 'The main office building on campus.', 'Residential living space for students.') | College_Campuses_Buildings : campusId (1, 2, 5), buildingId (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM College_Campuses)",
            "select college_campuses.name , buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"our campuses\": [\"for each campus individually\", \"common to all campuses\"]}"
        },
        "clarification_context": "\"our campuses\" refers to \"for each campus individually\"",
        "clear_ambiguity": "{\"our campuses\": \"for each campus individually\"}",
        "gold_query": "select college_campuses.name , buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
    },
    {
        "index": 1314,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_awards_categories/scope_awards_categories.sqlite",
        "question": "Show me the categories that every award has.",
        "schema_without_content": "Awards : id, awardName, year | Categories : categoryId, categoryName | Awards_Categories : awardsID, categoriesID",
        "schema_with_content": "Awards : id (3, 4, 2), awardName ('BAFTA', 'Academy Award', 'Emmy'), year (2018, 2017, 2019) | Categories : categoryId (1, 2, 4), categoryName ('Best Film', 'Best Screenplay', 'Best Cinematography') | Awards_Categories : awardsID (1, 2, 4), categoriesID (3, 2, 1)",
        "ambiguous_queries": [
            "SELECT Categories.categoryName from Awards_Categories join Categories on Awards_Categories.categoriesID = Categories.categoryId join Awards on Awards_Categories.awardsID = Awards.id GROUP BY Awards_Categories.categoriesID HAVING COUNT(DISTINCT Awards_Categories.awardsID) = (SELECT COUNT(*) FROM Awards)",
            "select awards.awardname , categories.categoryname from Awards_Categories join Categories on Awards_Categories.categoriesID = Categories.categoryId join Awards on Awards_Categories.awardsID = Awards.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every award\": [\"for each award individually\", \"common to all awards\"]}"
        },
        "clarification_context": "\"every award\" refers to \"for each award individually\"",
        "clear_ambiguity": "{\"every award\": \"for each award individually\"}",
        "gold_query": "select awards.awardname , categories.categoryname from Awards_Categories join Categories on Awards_Categories.categoriesID = Categories.categoryId join Awards on Awards_Categories.awardsID = Awards.id"
    },
    {
        "index": 1315,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_health_promotion_program_activities/scope_health_promotion_program_activities.sqlite",
        "question": "What are the names and descriptions of the activities of each program?",
        "schema_without_content": "Health_Promotion_Program : program_id, name, description | Activities : activity_id, activity_name, description | Health_Promotion_Program_Activities : id, program_id, activity_id | Participants : participant_id, first_name, last_name, email, phone_number",
        "schema_with_content": "Health_Promotion_Program : program_id (2, 1, 4), name ('Weight Management Program', 'Mental Wellness Program', 'Heart Health Program'), description ('This program educates individuals about diabetes prevention.', 'This program helps people manage their weight.', 'This program offers resources for mental health.') | Activities : activity_id (1, 2, 4), activity_name ('Nutrition Workshops', 'Yoga Sessions', 'Exercise Classes'), description ('Group exercise sessions that promote physical fitness.', 'Meetings where participants can share experiences and offer support.', 'Relaxing yoga classes to improve flexibility and reduce stress.') | Health_Promotion_Program_Activities : id (2, 5, 4), program_id (2, 2, 5), activity_id (2, 1, 1) | Participants : participant_id (4, 2, 3), first_name ('Alice', 'Bob', 'John'), last_name ('White', 'Smith', 'Brown'), email ('jane.smith@example.com', 'bob.white@example.com', 'emma.black@example.com'), phone_number ('+333-999-8887', '+777-666-5555', '+123-456-7890')",
        "ambiguous_queries": [
            "SELECT Activities.activity_name, Activities.description from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id GROUP BY Health_Promotion_Program_Activities.activity_id HAVING COUNT(DISTINCT Health_Promotion_Program_Activities.program_id) = (SELECT COUNT(*) FROM Health_Promotion_Program)",
            "select health_promotion_program.name , activities.activity_name , activities.description from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each program\": [\"for each program individually\", \"common to all programs\"]}"
        },
        "clarification_context": "\"each program\" refers to \"for each program individually\"",
        "clear_ambiguity": "{\"each program\": \"for each program individually\"}",
        "gold_query": "select health_promotion_program.name , activities.activity_name , activities.description from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id"
    },
    {
        "index": 1316,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_amusement_parks_rides/scope_amusement_parks_rides.sqlite",
        "question": "Give me the rides that each amusement park has.",
        "schema_without_content": "Amusement_Parks : id, name, location | Rides : id, ride_name, ride_type | Amusement_Parks_Rides : amusement_park_id, rides_id",
        "schema_with_content": "Amusement_Parks : id (1, 3, 5), name ('SeaWorld', 'Universal Studios', 'Disneyland'), location ('Florida', 'Texas', 'California') | Rides : id (1, 4, 3), ride_name ('Water Rides', 'Roller Coaster', 'Carousel'), ride_type ('Attraction', 'Thrill Ride', 'Wet & Wild') | Amusement_Parks_Rides : amusement_park_id (2, 5, 3), rides_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Rides.ride_name from Amusement_Parks_Rides join Rides on Amusement_Parks_Rides.rides_id = Rides.id join Amusement_Parks on Amusement_Parks_Rides.amusement_park_id = Amusement_Parks.id GROUP BY Amusement_Parks_Rides.rides_id HAVING COUNT(DISTINCT Amusement_Parks_Rides.amusement_park_id) = (SELECT COUNT(*) FROM Amusement_Parks)",
            "select amusement_parks.name , rides.ride_name from Amusement_Parks_Rides join Rides on Amusement_Parks_Rides.rides_id = Rides.id join Amusement_Parks on Amusement_Parks_Rides.amusement_park_id = Amusement_Parks.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each amusement park\": [\"for each amusement park individually\", \"common to all amusement parks\"]}"
        },
        "clarification_context": "\"each amusement park\" refers to \"common to all amusement parks\"",
        "clear_ambiguity": "{\"each amusement park\": \"common to all amusement parks\"}",
        "gold_query": "SELECT Rides.ride_name from Amusement_Parks_Rides join Rides on Amusement_Parks_Rides.rides_id = Rides.id join Amusement_Parks on Amusement_Parks_Rides.amusement_park_id = Amusement_Parks.id GROUP BY Amusement_Parks_Rides.rides_id HAVING COUNT(DISTINCT Amusement_Parks_Rides.amusement_park_id) = (SELECT COUNT(*) FROM Amusement_Parks)"
    },
    {
        "index": 1317,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
        "question": "Tell me about the styles every hair stylist offers (with their descriptions).",
        "schema_without_content": "Hair_Stylists : id, name, experience | Styles : style_id, style_name, description | Hair_Stylists_Styles : hairdresser_id, style_id | Film_Projects : project_id, title, release_date | Actors : actor_id, first_name, last_name, birth_date | Roles : role_id, character_name, film_project_id | Casting : casting_id, actor_id, role_id",
        "schema_with_content": "Hair_Stylists : id (1, 2, 5), name ('Michael Brown', 'Jane Smith', 'Emily Johnson'), experience (7, 6, 3) | Styles : style_id (3, 4, 5), style_name ('Updo', 'Pixie', 'Bob'), description ('A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.', 'A short haircut that falls just below the chin.', 'A hairstyle from a specific historical period.') | Hair_Stylists_Styles : hairdresser_id (4, 1, 5), style_id (1, 1, 1) | Film_Projects : project_id (5, 1, 2), title ('The Great Gatsby', 'Black Swan', 'Interstellar'), release_date ('2016-12-02', '2010-07-16', '2014-11-07') | Actors : actor_id (2, 5, 3), first_name ('Anne', 'Leonardo', 'Christian'), last_name ('Hathaway', 'Page', 'Portman'), birth_date ('1982-11-12', '1974-11-11', '1987-01-21') | Roles : role_id (1, 5, 3), character_name ('Cobb', 'Arthur', 'Cooper'), film_project_id (2, 4, 3) | Casting : casting_id (4, 3, 5), actor_id (3, 4, 1), role_id (2, 4, 1)",
        "ambiguous_queries": [
            "SELECT Styles.style_name, Styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)",
            "select hair_stylists.name , styles.style_name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every hair stylist\": [\"for each hair stylist individually\", \"common to all hair stylists\"]}"
        },
        "clarification_context": "\"every hair stylist\" refers to \"common to all hair stylists\"",
        "clear_ambiguity": "{\"every hair stylist\": \"common to all hair stylists\"}",
        "gold_query": "SELECT Styles.style_name, Styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)"
    },
    {
        "index": 1318,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_language_schools_course_levels/scope_language_schools_course_levels.sqlite",
        "question": "Show me the level of courses each language school offers.",
        "schema_without_content": "Language_Schools : id, name, location | Course_Levels : id, level | Language_Schools_Course_Levels : language_schools_id, course_levels_id",
        "schema_with_content": "Language_Schools : id (4, 5, 3), name ('DEF School', 'JKL School', 'GHI School'), location ('Berlin', 'London', 'New York') | Course_Levels : id (2, 1, 4), level ('Intermediate_Level', 'Beginner_Level', 'Expert_Level') | Language_Schools_Course_Levels : language_schools_id (2, 5, 3), course_levels_id (4, 3, 4)",
        "ambiguous_queries": [
            "SELECT Course_Levels.level from Language_Schools_Course_Levels join Course_Levels on Language_Schools_Course_Levels.course_levels_id = Course_Levels.id join Language_Schools on Language_Schools_Course_Levels.language_schools_id = Language_Schools.id GROUP BY Language_Schools_Course_Levels.course_levels_id HAVING COUNT(DISTINCT Language_Schools_Course_Levels.language_schools_id) = (SELECT COUNT(*) FROM Language_Schools)",
            "select language_schools.name , course_levels.level from Language_Schools_Course_Levels join Course_Levels on Language_Schools_Course_Levels.course_levels_id = Course_Levels.id join Language_Schools on Language_Schools_Course_Levels.language_schools_id = Language_Schools.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each language school\": [\"for each language school individually\", \"common to all language schools\"]}"
        },
        "clarification_context": "\"each language school\" refers to \"common to all language schools\"",
        "clear_ambiguity": "{\"each language school\": \"common to all language schools\"}",
        "gold_query": "SELECT Course_Levels.level from Language_Schools_Course_Levels join Course_Levels on Language_Schools_Course_Levels.course_levels_id = Course_Levels.id join Language_Schools on Language_Schools_Course_Levels.language_schools_id = Language_Schools.id GROUP BY Language_Schools_Course_Levels.course_levels_id HAVING COUNT(DISTINCT Language_Schools_Course_Levels.language_schools_id) = (SELECT COUNT(*) FROM Language_Schools)"
    },
    {
        "index": 1319,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_revenue_streams/scope_streaming_services_revenue_streams.sqlite",
        "question": "Show me revenue streams each streaming service has and their descriptions.",
        "schema_without_content": "Revenue_Streams : id, name, description | Streaming_Services : id, name, launch_date | Streaming_Service_Revenue : service_id, stream_id",
        "schema_with_content": "Revenue_Streams : id (3, 1, 5), name ('Premium Content Sales', 'Pay-Per-View Events', 'Merchandise Sales'), description ('This is a revenue stream from selling premium content', 'This is a revenue stream from user subscriptions', 'This is a revenue stream from pay-per-view events') | Streaming_Services : id (4, 5, 3), name ('Amazon Prime Video', 'Disney+', 'Hulu'), launch_date ('2019-11-12', '2013-08-29', '2007-10-29') | Streaming_Service_Revenue : service_id (2, 2, 3), stream_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Revenue_Streams.name, Revenue_Streams.description from Streaming_Service_Revenue join Revenue_Streams on Streaming_Service_Revenue.stream_id = Revenue_Streams.id join Streaming_Services on Streaming_Service_Revenue.service_id = Streaming_Services.id GROUP BY Streaming_Service_Revenue.stream_id HAVING COUNT(DISTINCT Streaming_Service_Revenue.service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.name , revenue_streams.name , revenue_streams.description from Streaming_Service_Revenue join Revenue_Streams on Streaming_Service_Revenue.stream_id = Revenue_Streams.id join Streaming_Services on Streaming_Service_Revenue.service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"each streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Revenue_Streams.name, Revenue_Streams.description from Streaming_Service_Revenue join Revenue_Streams on Streaming_Service_Revenue.stream_id = Revenue_Streams.id join Streaming_Services on Streaming_Service_Revenue.service_id = Streaming_Services.id GROUP BY Streaming_Service_Revenue.stream_id HAVING COUNT(DISTINCT Streaming_Service_Revenue.service_id) = (SELECT COUNT(*) FROM Streaming_Services)"
    },
    {
        "index": 1320,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_students_courses/scope_students_courses.sqlite",
        "question": "Give me the teachers that every student has.",
        "schema_without_content": "Students : StudentID, FullName | Courses : CourseID, CourseName, TeacherName | Enrollments : StudentID, CourseID, Grade",
        "schema_with_content": "Students : StudentID (4, 5, 3), FullName ('Jane Smith', 'Michael Brown', 'David Green') | Courses : CourseID (3, 1, 4), CourseName ('Biology', 'English', 'History'), TeacherName ('Ms. Williams', 'Ms. Davis', 'Dr. Baker') | Enrollments : StudentID (5, 5, 1), CourseID (1, 1, 1), Grade (-1, -1, -1)",
        "ambiguous_queries": [
            "SELECT Courses.TeacherName from Enrollments join Courses on Enrollments.CourseID = Courses.CourseID join Students on Enrollments.StudentID = Students.StudentID GROUP BY Enrollments.CourseID HAVING COUNT(DISTINCT Enrollments.StudentID) = (SELECT COUNT(*) FROM Students)",
            "select students.fullname , courses.teachername from Enrollments join Courses on Enrollments.CourseID = Courses.CourseID join Students on Enrollments.StudentID = Students.StudentID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every student\": [\"for each student individually\", \"common to all students\"]}"
        },
        "clarification_context": "\"every student\" refers to \"for each student individually\"",
        "clear_ambiguity": "{\"every student\": \"for each student individually\"}",
        "gold_query": "select students.fullname , courses.teachername from Enrollments join Courses on Enrollments.CourseID = Courses.CourseID join Students on Enrollments.StudentID = Students.StudentID"
    },
    {
        "index": 1321,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_agricultural_research_institutes_focus_areas/scope_agricultural_research_institutes_focus_areas.sqlite",
        "question": "Give me the focus area of each agricultural research institute.",
        "schema_without_content": "Agricultural_Research_Institutes : id, name, location | Focus_Areas : id, area_name | Agricultural_Research_Institutes_Focus_Areas : institute_id, focus_area_id",
        "schema_with_content": "Agricultural_Research_Institutes : id (3, 1, 5), name ('Institute C', 'Institute D', 'Institute E'), location ('Location B', 'Location A', 'Location D') | Focus_Areas : id (3, 2, 5), area_name ('Pest Control', 'Fertilization Techniques', 'Sustainability Research') | Agricultural_Research_Institutes_Focus_Areas : institute_id (5, 3, 2), focus_area_id (3, 1, 1)",
        "ambiguous_queries": [
            "SELECT Focus_Areas.area_name from Agricultural_Research_Institutes_Focus_Areas join Focus_Areas on Agricultural_Research_Institutes_Focus_Areas.focus_area_id = Focus_Areas.id join Agricultural_Research_Institutes on Agricultural_Research_Institutes_Focus_Areas.institute_id = Agricultural_Research_Institutes.id GROUP BY Agricultural_Research_Institutes_Focus_Areas.focus_area_id HAVING COUNT(DISTINCT Agricultural_Research_Institutes_Focus_Areas.institute_id) = (SELECT COUNT(*) FROM Agricultural_Research_Institutes)",
            "select agricultural_research_institutes.name , focus_areas.area_name from Agricultural_Research_Institutes_Focus_Areas join Focus_Areas on Agricultural_Research_Institutes_Focus_Areas.focus_area_id = Focus_Areas.id join Agricultural_Research_Institutes on Agricultural_Research_Institutes_Focus_Areas.institute_id = Agricultural_Research_Institutes.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each agricultural research institute\": [\"for each agricultural research institute individually\", \"common to all agricultural research institutes\"]}"
        },
        "clarification_context": "\"each agricultural research institute\" refers to \"common to all agricultural research institutes\"",
        "clear_ambiguity": "{\"each agricultural research institute\": \"common to all agricultural research institutes\"}",
        "gold_query": "SELECT Focus_Areas.area_name from Agricultural_Research_Institutes_Focus_Areas join Focus_Areas on Agricultural_Research_Institutes_Focus_Areas.focus_area_id = Focus_Areas.id join Agricultural_Research_Institutes on Agricultural_Research_Institutes_Focus_Areas.institute_id = Agricultural_Research_Institutes.id GROUP BY Agricultural_Research_Institutes_Focus_Areas.focus_area_id HAVING COUNT(DISTINCT Agricultural_Research_Institutes_Focus_Areas.institute_id) = (SELECT COUNT(*) FROM Agricultural_Research_Institutes)"
    },
    {
        "index": 1322,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_social_media/scope_streaming_service_social_media.sqlite",
        "question": "Display the type of social media content we have on each streaming service",
        "schema_without_content": "Streaming_Service : id, service_name, service_url | Social_Media : social_media_id, type | Streaming_Service_Social_Media : streaming_service_id, social_media_id | Subscription_Plan : plan_id, name, price | Streaming_Service_Subscription_Plan : streaming_service_id, plan_id",
        "schema_with_content": "Streaming_Service : id (4, 2, 1), service_name ('Amazon Prime Video', 'Netflix', 'Hulu'), service_url ('https://www.netflix.com/', 'https://tv.apple.com/', 'https://www.hulu.com/') | Social_Media : social_media_id (5, 1, 3), type ('Pinterest_Pin', 'LinkedIn_Update', 'Facebook_Share') | Streaming_Service_Social_Media : streaming_service_id (5, 5, 4), social_media_id (1, 4, 1) | Subscription_Plan : plan_id (4, 3, 5), name ('Premium Plan', 'Ultimate Plan', 'Standard Plan'), price (19.99, 29.99, 13.99) | Streaming_Service_Subscription_Plan : streaming_service_id (), plan_id ()",
        "ambiguous_queries": [
            "SELECT Social_Media.type from Streaming_Service_Social_Media join Social_Media on Streaming_Service_Social_Media.social_media_id = Social_Media.social_media_id join Streaming_Service on Streaming_Service_Social_Media.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Social_Media.social_media_id HAVING COUNT(DISTINCT Streaming_Service_Social_Media.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)",
            "select streaming_service.service_name , social_media.type from Streaming_Service_Social_Media join Social_Media on Streaming_Service_Social_Media.social_media_id = Social_Media.social_media_id join Streaming_Service on Streaming_Service_Social_Media.streaming_service_id = Streaming_Service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"each streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Social_Media.type from Streaming_Service_Social_Media join Social_Media on Streaming_Service_Social_Media.social_media_id = Social_Media.social_media_id join Streaming_Service on Streaming_Service_Social_Media.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Social_Media.social_media_id HAVING COUNT(DISTINCT Streaming_Service_Social_Media.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
    },
    {
        "index": 1323,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_online_news_portals_categories/scope_online_news_portals_categories.sqlite",
        "question": "What categories do we have for every news portal?",
        "schema_without_content": "Online_News_Portals : id, name, website | Categories : id, category_name | Online_News_Portals_Categories : online_news_portal_id, category_id",
        "schema_with_content": "Online_News_Portals : id (5, 4, 1), name ('Deutsche Welle', 'New York Times', 'Al Jazeera'), website ('https://www.bbc.co.uk/news', 'https://www.dw.com/', 'https://www.aljazeera.com/') | Categories : id (3, 4, 2), category_name ('Economy', 'Technology', 'Breaking News') | Online_News_Portals_Categories : online_news_portal_id (4, 2, 1), category_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Categories.category_name from Online_News_Portals_Categories join Categories on Online_News_Portals_Categories.category_id = Categories.id join Online_News_Portals on Online_News_Portals_Categories.online_news_portal_id = Online_News_Portals.id GROUP BY Online_News_Portals_Categories.category_id HAVING COUNT(DISTINCT Online_News_Portals_Categories.online_news_portal_id) = (SELECT COUNT(*) FROM Online_News_Portals)",
            "select online_news_portals.name , categories.category_name from Online_News_Portals_Categories join Categories on Online_News_Portals_Categories.category_id = Categories.id join Online_News_Portals on Online_News_Portals_Categories.online_news_portal_id = Online_News_Portals.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every news portal\": [\"for each news portal individually\", \"common to all news portals\"]}"
        },
        "clarification_context": "\"every news portal\" refers to \"common to all news portals\"",
        "clear_ambiguity": "{\"every news portal\": \"common to all news portals\"}",
        "gold_query": "SELECT Categories.category_name from Online_News_Portals_Categories join Categories on Online_News_Portals_Categories.category_id = Categories.id join Online_News_Portals on Online_News_Portals_Categories.online_news_portal_id = Online_News_Portals.id GROUP BY Online_News_Portals_Categories.category_id HAVING COUNT(DISTINCT Online_News_Portals_Categories.online_news_portal_id) = (SELECT COUNT(*) FROM Online_News_Portals)"
    },
    {
        "index": 1324,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
        "question": "What type of building types are associated with each architect?",
        "schema_without_content": "Architects : id, name, experience | Building_Types : id, type | Job_Postings : id, title, description, required_skills, salary, post_date | Architects_Building_Types : architect_id, building_type_id",
        "schema_with_content": "Architects : id (2, 1, 5), name ('David Brown', 'Jane Smith', 'Michael Johnson'), experience (10, 6, 7) | Building_Types : id (5, 1, 2), type ('Institutional', 'Mixed-Use', 'Commercial') | Job_Postings : id (2, 1, 3), title ('Senior Residential Architect', 'BIM Coordinator', 'Junior Commercial Architect'), description ('Assist in designing commercial projects.', 'Support architects on various project types.', 'Oversee construction projects from start to finish.'), required_skills ('Revit, Navisworks, Dynamo, Rhino', 'AutoCAD, Revit, SketchUp, knowledge of local building codes', 'PMP certification, strong communication skills, knowledge of contract law'), salary (50000.0, 90000.0, 80000.0), post_date ('2024-01-30 19:16:14', '2024-01-30 19:16:14', '2024-01-30 19:16:14') | Architects_Building_Types : architect_id (2, 1, 5), building_type_id (1, 2, 2)",
        "ambiguous_queries": [
            "SELECT Building_Types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id GROUP BY Architects_Building_Types.building_type_id HAVING COUNT(DISTINCT Architects_Building_Types.architect_id) = (SELECT COUNT(*) FROM Architects)",
            "select architects.name , building_types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each architect\": [\"for each architect individually\", \"common to all architects\"]}"
        },
        "clarification_context": "\"each architect\" refers to \"for each architect individually\"",
        "clear_ambiguity": "{\"each architect\": \"for each architect individually\"}",
        "gold_query": "select architects.name , building_types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id"
    },
    {
        "index": 1325,
        "db_id": "Entertainment",
        "ambig_type": "scope",
        "db_file": "scope/Entertainment/scope_games_platforms/scope_games_platforms.sqlite",
        "question": "What game platforms are there for all the games listed?",
        "schema_without_content": "Platforms : platformID, name | Games : gameID, title, genre, releaseDate | Games_Platforms : gamesID, platformsID",
        "schema_with_content": "Platforms : platformID (3, 4, 1), name ('Mobile', 'PlayStation 4', 'Xbox One') | Games : gameID (2, 4, 5), title ('Grand Theft Auto V', 'Red Dead Redemption II', 'Call of Duty Modern Warfare'), genre ('Battle Royal', 'RPG', 'Action Adventure'), releaseDate ('2017-09-26', '2013-09-17', '2018-10-26') | Games_Platforms : gamesID (5, 1, 3), platformsID (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Platforms.name from Games_Platforms join Platforms on Games_Platforms.platformsID = Platforms.platformID join Games on Games_Platforms.gamesID = Games.gameID GROUP BY Games_Platforms.platformsID HAVING COUNT(DISTINCT Games_Platforms.gamesID) = (SELECT COUNT(*) FROM Games)",
            "select games.title , platforms.name from Games_Platforms join Platforms on Games_Platforms.platformsID = Platforms.platformID join Games on Games_Platforms.gamesID = Games.gameID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"all the games listed\": [\"for each the games listed individually\", \"common to all the games games\"]}"
        },
        "clarification_context": "\"all the games listed\" refers to \"common to all the games games\"",
        "clear_ambiguity": "{\"all the games listed\": \"common to all the games games\"}",
        "gold_query": "SELECT Platforms.name from Games_Platforms join Platforms on Games_Platforms.platformsID = Platforms.platformID join Games on Games_Platforms.gamesID = Games.gameID GROUP BY Games_Platforms.platformsID HAVING COUNT(DISTINCT Games_Platforms.gamesID) = (SELECT COUNT(*) FROM Games)"
    },
    {
        "index": 1326,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_genres/scope_streaming_services_genres.sqlite",
        "question": "What genres are available on each streaming service?",
        "schema_without_content": "Genres : id, name | Streaming_Services : id, service_name, release_date | Streaming_Services_Genres : streaming_services_id, genres_id",
        "schema_with_content": "Genres : id (3, 5, 1), name ('Drama', 'Horror', 'Documentary') | Streaming_Services : id (3, 4, 1), service_name ('Disney+', 'Amazon Prime Video', 'Netflix'), release_date ('2019-11-12', '2007-11-15', '2006-09-07') | Streaming_Services_Genres : streaming_services_id (5, 2, 4), genres_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Genres.name from Streaming_Services_Genres join Genres on Streaming_Services_Genres.genres_id = Genres.id join Streaming_Services on Streaming_Services_Genres.streaming_services_id = Streaming_Services.id GROUP BY Streaming_Services_Genres.genres_id HAVING COUNT(DISTINCT Streaming_Services_Genres.streaming_services_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.service_name , genres.name from Streaming_Services_Genres join Genres on Streaming_Services_Genres.genres_id = Genres.id join Streaming_Services on Streaming_Services_Genres.streaming_services_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"each streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_services.service_name , genres.name from Streaming_Services_Genres join Genres on Streaming_Services_Genres.genres_id = Genres.id join Streaming_Services on Streaming_Services_Genres.streaming_services_id = Streaming_Services.id"
    },
    {
        "index": 1327,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_exam_type_of_question/scope_exam_type_of_question.sqlite",
        "question": "Show me the types of questions every exam asks.",
        "schema_without_content": "Exam : id, examName, date | Type_Of_Question : id, questionType | Exam_Type_Of_Question : examID, questionTypeID | Students : studentId, firstName, lastName, enrollmentDate | Student_Grades : studentId, examId, grade",
        "schema_with_content": "Exam : id (2, 3, 5), examName ('English Test', 'History Test', 'Science Test'), date ('2021-10-02', '2021-10-04', '2021-10-01') | Type_Of_Question : id (5, 4, 1), questionType ('Essay', 'True_False', 'Short_Answer') | Exam_Type_Of_Question : examID (5, 2, 3), questionTypeID (1, 5, 1) | Students : studentId (3, 1, 4), firstName ('Jane', 'Emily', 'John'), lastName ('White', 'Jackson', 'Brown'), enrollmentDate ('2019-08-17', '2019-08-16', '2019-08-20') | Student_Grades : studentId (), examId (), grade ()",
        "ambiguous_queries": [
            "SELECT Type_Of_Question.questionType from Exam_Type_Of_Question join Type_Of_Question on Exam_Type_Of_Question.questionTypeID = Type_Of_Question.id join Exam on Exam_Type_Of_Question.examID = Exam.id GROUP BY Exam_Type_Of_Question.questionTypeID HAVING COUNT(DISTINCT Exam_Type_Of_Question.examID) = (SELECT COUNT(*) FROM Exam)",
            "select exam.examname , type_of_question.questiontype from Exam_Type_Of_Question join Type_Of_Question on Exam_Type_Of_Question.questionTypeID = Type_Of_Question.id join Exam on Exam_Type_Of_Question.examID = Exam.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every exam\": [\"for each exam individually\", \"common to all exams\"]}"
        },
        "clarification_context": "\"every exam\" refers to \"common to all exams\"",
        "clear_ambiguity": "{\"every exam\": \"common to all exams\"}",
        "gold_query": "SELECT Type_Of_Question.questionType from Exam_Type_Of_Question join Type_Of_Question on Exam_Type_Of_Question.questionTypeID = Type_Of_Question.id join Exam on Exam_Type_Of_Question.examID = Exam.id GROUP BY Exam_Type_Of_Question.questionTypeID HAVING COUNT(DISTINCT Exam_Type_Of_Question.examID) = (SELECT COUNT(*) FROM Exam)"
    },
    {
        "index": 1328,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_political_reporters_elections/scope_political_reporters_elections.sqlite",
        "question": "List all the election start dates for every political reporter.",
        "schema_without_content": "Political_Reporters : id, name, email | Elections : id, election_type, start_date, end_date | Political_Reporters_Elections : reporter_id, election_id",
        "schema_with_content": "Political_Reporters : id (3, 1, 5), name ('Jane Smith', 'Bob Brown', 'Alice Johnson'), email ('john@example.com', 'alice@example.com', 'jane@example.com') | Elections : id (4, 3, 2), election_type ('Local_Council_elections', 'Presidential_Campaigns', 'State_Assembly_elections'), start_date ('2025-01-01', '2024-01-01', '2022-01-01'), end_date ('2021-12-31', '2025-12-31', '2022-12-31') | Political_Reporters_Elections : reporter_id (2, 5, 1), election_id (1, 3, 1)",
        "ambiguous_queries": [
            "SELECT Elections.start_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id GROUP BY Political_Reporters_Elections.election_id HAVING COUNT(DISTINCT Political_Reporters_Elections.reporter_id) = (SELECT COUNT(*) FROM Political_Reporters)",
            "select political_reporters.name , elections.start_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every political reporter\": [\"for each political reporter individually\", \"common to all political reporters\"]}"
        },
        "clarification_context": "\"every political reporter\" refers to \"common to all political reporters\"",
        "clear_ambiguity": "{\"every political reporter\": \"common to all political reporters\"}",
        "gold_query": "SELECT Elections.start_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id GROUP BY Political_Reporters_Elections.election_id HAVING COUNT(DISTINCT Political_Reporters_Elections.reporter_id) = (SELECT COUNT(*) FROM Political_Reporters)"
    },
    {
        "index": 1329,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_convention_centers_event_spaces/scope_convention_centers_event_spaces.sqlite",
        "question": "Display the name of the spaces at each convention center.",
        "schema_without_content": "Convention_Centers : id, name, capacity | Event_Spaces : id, space_name, type | Rooms : id, room_number, floor_no, capacity | Guests : id, first_name, last_name, email | Reservations : id, guest_id, event_space_id, checkin, checkout | Convention_Centers_Event_Spaces : convention_center_id, event_space_id",
        "schema_with_content": "Convention_Centers : id (4, 1, 5), name ('Center C', 'Center B', 'Center E'), capacity (2000, 3000, 1000) | Event_Spaces : id (4, 3, 1), space_name ('Banquet Room', 'Duty-Free Shopping', 'Theater'), type ('hall', 'shop', 'room') | Rooms : id (7, 5, 9), room_number (301, 202, 303), floor_no (1, 1, 2), capacity (90, 70, 50) | Guests : id (5, 3, 2), first_name ('John', 'Michael', 'Jane'), last_name ('White', 'Gray', 'Smith'), email ('janedoe@example.com', 'mblack@example.com', 'johnsmith@example.com') | Reservations : id (5, 1, 2), guest_id (1, 3, 2), event_space_id (5, 3, 4), checkin ('2021-05-03 10:00:00', '2021-05-01 10:00:00', '2021-05-02 10:00:00'), checkout ('2021-05-04 18:00:00', '2021-05-05 18:00:00', '2021-05-02 18:00:00') | Convention_Centers_Event_Spaces : convention_center_id (4, 4, 2), event_space_id (2, 1, 2)",
        "ambiguous_queries": [
            "SELECT Event_Spaces.space_name from Convention_Centers_Event_Spaces join Event_Spaces on Convention_Centers_Event_Spaces.event_space_id = Event_Spaces.id join Convention_Centers on Convention_Centers_Event_Spaces.convention_center_id = Convention_Centers.id GROUP BY Convention_Centers_Event_Spaces.event_space_id HAVING COUNT(DISTINCT Convention_Centers_Event_Spaces.convention_center_id) = (SELECT COUNT(*) FROM Convention_Centers)",
            "select convention_centers.name , event_spaces.space_name from Convention_Centers_Event_Spaces join Event_Spaces on Convention_Centers_Event_Spaces.event_space_id = Event_Spaces.id join Convention_Centers on Convention_Centers_Event_Spaces.convention_center_id = Convention_Centers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each convention center\": [\"for each convention center individually\", \"common to all convention centers\"]}"
        },
        "clarification_context": "\"each convention center\" refers to \"common to all convention centers\"",
        "clear_ambiguity": "{\"each convention center\": \"common to all convention centers\"}",
        "gold_query": "SELECT Event_Spaces.space_name from Convention_Centers_Event_Spaces join Event_Spaces on Convention_Centers_Event_Spaces.event_space_id = Event_Spaces.id join Convention_Centers on Convention_Centers_Event_Spaces.convention_center_id = Convention_Centers.id GROUP BY Convention_Centers_Event_Spaces.event_space_id HAVING COUNT(DISTINCT Convention_Centers_Event_Spaces.convention_center_id) = (SELECT COUNT(*) FROM Convention_Centers)"
    },
    {
        "index": 1330,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_casinos_games/scope_casinos_games.sqlite",
        "question": "Give me the descriptions of the games offered in each casino.",
        "schema_without_content": "Casinos : id, name, location | Games : id, game_name, description | Casinos_Games : casino_id, game_id",
        "schema_with_content": "Casinos : id (3, 2, 5), name ('Caesar Palace', 'The Venetian Resort Hotel Casino', 'Wynn Las Vegas'), location ('Las Vegas', 'Las Vegas', 'Las Vegas') | Games : id (3, 2, 1), game_name ('Poker', 'Slot Machines', 'Blackjack'), description ('Card game played with a standard deck of 52 playing cards, ranked from high to low, in which participants wager into a pot consisting of money contributed by the players themselves.', 'A casino game named after the French word for little wheel. In the game, players may choose to place bets on either a single number, various groupings of numbers, the colors red or black, whether the total of all first and second-digit numbers is odd or even, or if the total of the first two digits is a multiple of a certain number such as 3.', 'Dice game in which players make a series of wagers during the course of a round known as the roll. The main objective of most craps wagers is to correctly predict the outcome of the roll.') | Casinos_Games : casino_id (3, 2, 3), game_id (1, 4, 5)",
        "ambiguous_queries": [
            "SELECT Games.description from Casinos_Games join Games on Casinos_Games.game_id = Games.id join Casinos on Casinos_Games.casino_id = Casinos.id GROUP BY Casinos_Games.game_id HAVING COUNT(DISTINCT Casinos_Games.casino_id) = (SELECT COUNT(*) FROM Casinos)",
            "select casinos.name , games.description from Casinos_Games join Games on Casinos_Games.game_id = Games.id join Casinos on Casinos_Games.casino_id = Casinos.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each casino\": [\"for each casino individually\", \"common to all casinos\"]}"
        },
        "clarification_context": "\"each casino\" refers to \"for each casino individually\"",
        "clear_ambiguity": "{\"each casino\": \"for each casino individually\"}",
        "gold_query": "select casinos.name , games.description from Casinos_Games join Games on Casinos_Games.game_id = Games.id join Casinos on Casinos_Games.casino_id = Casinos.id"
    },
    {
        "index": 1331,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
        "question": "Show me the categories and prices of the products every duty free shop sells.",
        "schema_without_content": "Duty_Free_Shops : shop_id, name, location | Products : product_id, category, price | Duty_Free_Shops_Products : shop_id, product_id, quantity",
        "schema_with_content": "Duty_Free_Shops : shop_id (4, 2, 5), name ('Shop2', 'Shop3', 'Shop5'), location ('Terminal B', 'Terminal C', 'Terminal D') | Products : product_id (2, 4, 5), category ('Cosmetics', 'Perfume', 'Toys'), price (90.78, 20.0, 65.43) | Duty_Free_Shops_Products : shop_id (5, 1, 3), product_id (3, 1, 1), quantity (20, 15, 10)",
        "ambiguous_queries": [
            "SELECT Products.category, Products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)",
            "select duty_free_shops.name , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every duty free shop\": [\"for each duty free shop individually\", \"common to all duty free shops\"]}"
        },
        "clarification_context": "\"every duty free shop\" refers to \"common to all duty free shops\"",
        "clear_ambiguity": "{\"every duty free shop\": \"common to all duty free shops\"}",
        "gold_query": "SELECT Products.category, Products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)"
    },
    {
        "index": 1332,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_mountain_resorts_winter_sports/scope_mountain_resorts_winter_sports.sqlite",
        "question": "Give me the winter sports that each mountain resort offers.",
        "schema_without_content": "Mountain_Resorts : ResortID, Name, Location, NumOfRooms | Winter_Sports : SportID, Name, Description | Mountain_Resorts_Winter_Sports : ResortID, SportID",
        "schema_with_content": "Mountain_Resorts : ResortID (5, 3, 2), Name ('Rocky Peak Inn', 'Peak View Motel', 'Alpine Lodge'), Location ('Utah Mountains', 'California Mountains', 'Colorado Mountains'), NumOfRooms (100, 500, 200) | Winter_Sports : SportID (1, 5, 2), Name ('Ice Skating', 'Snowboarding', 'Cross-Country Skiing'), Description ('A recreational activity where people wear ice skates to glide on an ice surface', 'An athletic team sport played on ice, in which skaters use sticks to shoot a flat puck into the opposing goal', 'A popular alpine winter sport involving sliding down snow-covered slopes on skis with fixed bindings to boots') | Mountain_Resorts_Winter_Sports : ResortID (3, 1, 5), SportID (5, 3, 1)",
        "ambiguous_queries": [
            "SELECT Winter_Sports.Name from Mountain_Resorts_Winter_Sports join Winter_Sports on Mountain_Resorts_Winter_Sports.SportID = Winter_Sports.SportID join Mountain_Resorts on Mountain_Resorts_Winter_Sports.ResortID = Mountain_Resorts.ResortID GROUP BY Mountain_Resorts_Winter_Sports.SportID HAVING COUNT(DISTINCT Mountain_Resorts_Winter_Sports.ResortID) = (SELECT COUNT(*) FROM Mountain_Resorts)",
            "select mountain_resorts.name , winter_sports.name from Mountain_Resorts_Winter_Sports join Winter_Sports on Mountain_Resorts_Winter_Sports.SportID = Winter_Sports.SportID join Mountain_Resorts on Mountain_Resorts_Winter_Sports.ResortID = Mountain_Resorts.ResortID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each mountain resort\": [\"for each mountain resort individually\", \"common to all mountain resorts\"]}"
        },
        "clarification_context": "\"each mountain resort\" refers to \"for each mountain resort individually\"",
        "clear_ambiguity": "{\"each mountain resort\": \"for each mountain resort individually\"}",
        "gold_query": "select mountain_resorts.name , winter_sports.name from Mountain_Resorts_Winter_Sports join Winter_Sports on Mountain_Resorts_Winter_Sports.SportID = Winter_Sports.SportID join Mountain_Resorts on Mountain_Resorts_Winter_Sports.ResortID = Mountain_Resorts.ResortID"
    },
    {
        "index": 1333,
        "db_id": "Banking",
        "ambig_type": "scope",
        "db_file": "scope/Banking/scope_finance_apps_tools/scope_finance_apps_tools.sqlite",
        "question": "Give me the tools that all the finance apps have.",
        "schema_without_content": "Finance_Apps : id, name, description | Tools : id, tool_name, category | Finance_Apps_Tools : finance_app_id, tool_id",
        "schema_with_content": "Finance_Apps : id (2, 5, 4), name ('BankA', 'CreditCardA', 'MoneyBox'), description ('Mobile banking app', 'Online banking service', 'Personal financial management tool') | Tools : id (2, 4, 1), tool_name ('Bill_Reminder', 'Currency_Converter', 'Tax_Return'), category ('Expense Tracker', 'Tax Filings', 'Payment Reminders') | Finance_Apps_Tools : finance_app_id (3, 2, 4), tool_id (1, 1, 5)",
        "ambiguous_queries": [
            "SELECT Tools.tool_name from Finance_Apps_Tools join Tools on Finance_Apps_Tools.tool_id = Tools.id join Finance_Apps on Finance_Apps_Tools.finance_app_id = Finance_Apps.id GROUP BY Finance_Apps_Tools.tool_id HAVING COUNT(DISTINCT Finance_Apps_Tools.finance_app_id) = (SELECT COUNT(*) FROM Finance_Apps)",
            "select finance_apps.name , tools.tool_name from Finance_Apps_Tools join Tools on Finance_Apps_Tools.tool_id = Tools.id join Finance_Apps on Finance_Apps_Tools.finance_app_id = Finance_Apps.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"all the finance apps\": [\"for each the finance apps individually\", \"common to all the finance apps\"]}"
        },
        "clarification_context": "\"all the finance apps\" refers to \"common to all the finance apps\"",
        "clear_ambiguity": "{\"all the finance apps\": \"common to all the finance apps\"}",
        "gold_query": "SELECT Tools.tool_name from Finance_Apps_Tools join Tools on Finance_Apps_Tools.tool_id = Tools.id join Finance_Apps on Finance_Apps_Tools.finance_app_id = Finance_Apps.id GROUP BY Finance_Apps_Tools.tool_id HAVING COUNT(DISTINCT Finance_Apps_Tools.finance_app_id) = (SELECT COUNT(*) FROM Finance_Apps)"
    },
    {
        "index": 1334,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_content/scope_streaming_service_content.sqlite",
        "question": "Which content descriptions are associated with every streaming service?",
        "schema_without_content": "Streaming_Service : id, name, subscription_fee | Content : content_id, type, description, price | Streaming_Service_Content : streaming_service_id, content_id",
        "schema_with_content": "Streaming_Service : id (4, 2, 5), name ('HBO Max', 'Amazon Prime Video', 'Disney+'), subscription_fee (14.99, 7.99, 6.99) | Content : content_id (1, 4, 3), type ('Documentary', 'Movie', 'Animation'), description ('An exciting crime series.', 'A fun-filled show for kids.', 'A thrilling action movie.'), price (0.99, 2.99, 2.99) | Streaming_Service_Content : streaming_service_id (4, 3, 2), content_id (5, 1, 2)",
        "ambiguous_queries": [
            "SELECT Content.description from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Content.content_id HAVING COUNT(DISTINCT Streaming_Service_Content.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)",
            "select streaming_service.name , content.description from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"every streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"every streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Content.description from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Content.content_id HAVING COUNT(DISTINCT Streaming_Service_Content.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
    },
    {
        "index": 1335,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_health_promotion_program_activities/scope_health_promotion_program_activities.sqlite",
        "question": "What individual activity descriptions do we have for each program?",
        "schema_without_content": "Health_Promotion_Program : program_id, name, description | Activities : activity_id, activity_name, description | Health_Promotion_Program_Activities : id, program_id, activity_id | Participants : participant_id, first_name, last_name, email, phone_number",
        "schema_with_content": "Health_Promotion_Program : program_id (2, 5, 3), name ('Mental Wellness Program', 'Diabetes Prevention Program', 'Weight Management Program'), description ('This program offers resources for mental health.', 'This program provides support for quitting smoking.', 'This program focuses on heart disease prevention and management.') | Activities : activity_id (2, 1, 4), activity_name ('Yoga Sessions', 'Nutrition Workshops', 'Support Group Meetings'), description ('Relaxing yoga classes to improve flexibility and reduce stress.', 'Group exercise sessions that promote physical fitness.', 'Educational workshops on healthy eating habits.') | Health_Promotion_Program_Activities : id (3, 7, 1), program_id (3, 2, 1), activity_id (1, 1, 1) | Participants : participant_id (5, 3, 1), first_name ('John', 'Bob', 'Alice'), last_name ('Black', 'White', 'Brown'), email ('john.doe@example.com', 'alice.brown@example.com', 'bob.white@example.com'), phone_number ('+123-456-7890', '+987-654-3210', '+555-123-4567')",
        "ambiguous_queries": [
            "SELECT Activities.description from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id GROUP BY Health_Promotion_Program_Activities.activity_id HAVING COUNT(DISTINCT Health_Promotion_Program_Activities.program_id) = (SELECT COUNT(*) FROM Health_Promotion_Program)",
            "select health_promotion_program.name , activities.description from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each program\": [\"for each program individually\", \"common to all programs\"]}"
        },
        "clarification_context": "\"each program\" refers to \"common to all programs\"",
        "clear_ambiguity": "{\"each program\": \"common to all programs\"}",
        "gold_query": "SELECT Activities.description from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id GROUP BY Health_Promotion_Program_Activities.activity_id HAVING COUNT(DISTINCT Health_Promotion_Program_Activities.program_id) = (SELECT COUNT(*) FROM Health_Promotion_Program)"
    },
    {
        "index": 1336,
        "db_id": "Banking",
        "ambig_type": "scope",
        "db_file": "scope/Banking/scope_bank_branch_facilities/scope_bank_branch_facilities.sqlite",
        "question": "Show me the facility type available at each bank branch.",
        "schema_without_content": "Bank_Branch : BranchID, BranchName, BranchAddress | Facilities : FacilityID, FacilityType | Bank_Branch_Facilities : ID, BranchID, FacilityID",
        "schema_with_content": "Bank_Branch : BranchID (1, 5, 3), BranchName ('Branch1', 'Branch4', 'Branch5'), BranchAddress ('Address1', 'Address3', 'Address5') | Facilities : FacilityID (2, 1, 4), FacilityType ('Mobile_app', 'Internet_banking', 'Drive_thru_Window') | Bank_Branch_Facilities : ID (8, 10, 6), BranchID (2, 5, 5), FacilityID (2, 4, 1)",
        "ambiguous_queries": [
            "SELECT Facilities.FacilityType from Bank_Branch_Facilities join Facilities on Bank_Branch_Facilities.FacilityID = Facilities.FacilityID join Bank_Branch on Bank_Branch_Facilities.BranchID = Bank_Branch.BranchID GROUP BY Bank_Branch_Facilities.FacilityID HAVING COUNT(DISTINCT Bank_Branch_Facilities.BranchID) = (SELECT COUNT(*) FROM Bank_Branch)",
            "select bank_branch.branchname , facilities.facilitytype from Bank_Branch_Facilities join Facilities on Bank_Branch_Facilities.FacilityID = Facilities.FacilityID join Bank_Branch on Bank_Branch_Facilities.BranchID = Bank_Branch.BranchID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each bank branch\": [\"for each bank branch individually\", \"common to all bank branches\"]}"
        },
        "clarification_context": "\"each bank branch\" refers to \"common to all bank branches\"",
        "clear_ambiguity": "{\"each bank branch\": \"common to all bank branches\"}",
        "gold_query": "SELECT Facilities.FacilityType from Bank_Branch_Facilities join Facilities on Bank_Branch_Facilities.FacilityID = Facilities.FacilityID join Bank_Branch on Bank_Branch_Facilities.BranchID = Bank_Branch.BranchID GROUP BY Bank_Branch_Facilities.FacilityID HAVING COUNT(DISTINCT Bank_Branch_Facilities.BranchID) = (SELECT COUNT(*) FROM Bank_Branch)"
    },
    {
        "index": 1337,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_greenhouse_plant/scope_greenhouse_plant.sqlite",
        "question": "Give me the plant type for each greenhouse.",
        "schema_without_content": "Greenhouse : id, name, location | Plant : id, name, type | Greenhouse_Plant : greenhouse_id, plant_id, quantity",
        "schema_with_content": "Greenhouse : id (2, 4, 3), name ('Greenhouse D', 'Greenhouse B', 'Greenhouse C'), location ('Florida', 'Washington', 'New York') | Plant : id (2, 4, 3), name ('Tomato', 'Cucumber', 'Lettuce'), type ('Fruit', 'Root Vegetable', 'Vegetable') | Greenhouse_Plant : greenhouse_id (5, 5, 4), plant_id (1, 3, 1), quantity ()",
        "ambiguous_queries": [
            "SELECT Plant.type from Greenhouse_Plant join Plant on Greenhouse_Plant.plant_id = Plant.id join Greenhouse on Greenhouse_Plant.greenhouse_id = Greenhouse.id GROUP BY Greenhouse_Plant.plant_id HAVING COUNT(DISTINCT Greenhouse_Plant.greenhouse_id) = (SELECT COUNT(*) FROM Greenhouse)",
            "select greenhouse.name , plant.type from Greenhouse_Plant join Plant on Greenhouse_Plant.plant_id = Plant.id join Greenhouse on Greenhouse_Plant.greenhouse_id = Greenhouse.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each greenhouse\": [\"for each greenhouse individually\", \"common to all greenhouses\"]}"
        },
        "clarification_context": "\"each greenhouse\" refers to \"common to all greenhouses\"",
        "clear_ambiguity": "{\"each greenhouse\": \"common to all greenhouses\"}",
        "gold_query": "SELECT Plant.type from Greenhouse_Plant join Plant on Greenhouse_Plant.plant_id = Plant.id join Greenhouse on Greenhouse_Plant.greenhouse_id = Greenhouse.id GROUP BY Greenhouse_Plant.plant_id HAVING COUNT(DISTINCT Greenhouse_Plant.greenhouse_id) = (SELECT COUNT(*) FROM Greenhouse)"
    },
    {
        "index": 1338,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_political_reporters_elections/scope_political_reporters_elections.sqlite",
        "question": "What type of election and start date are associated with each political reporter?",
        "schema_without_content": "Political_Reporters : id, name, email | Elections : id, election_type, start_date, end_date | Political_Reporters_Elections : reporter_id, election_id",
        "schema_with_content": "Political_Reporters : id (4, 5, 3), name ('Alice Johnson', 'John Doe', 'Jane Smith'), email ('jane@example.com', 'john@example.com', 'charlie@example.com') | Elections : id (3, 1, 2), election_type ('Presidential_Campaigns', 'Referendums', 'Local_Council_elections'), start_date ('2023-01-01', '2022-01-01', '2025-01-01'), end_date ('2025-12-31', '2023-12-31', '2021-12-31') | Political_Reporters_Elections : reporter_id (4, 1, 2), election_id (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Elections.election_type, Elections.start_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id GROUP BY Political_Reporters_Elections.election_id HAVING COUNT(DISTINCT Political_Reporters_Elections.reporter_id) = (SELECT COUNT(*) FROM Political_Reporters)",
            "select political_reporters.name , elections.election_type , elections.start_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each political reporter\": [\"for each political reporter individually\", \"common to all political reporters\"]}"
        },
        "clarification_context": "\"each political reporter\" refers to \"common to all political reporters\"",
        "clear_ambiguity": "{\"each political reporter\": \"common to all political reporters\"}",
        "gold_query": "SELECT Elections.election_type, Elections.start_date from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id GROUP BY Political_Reporters_Elections.election_id HAVING COUNT(DISTINCT Political_Reporters_Elections.reporter_id) = (SELECT COUNT(*) FROM Political_Reporters)"
    },
    {
        "index": 1339,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_students_courses/scope_students_courses.sqlite",
        "question": "Give me the names of the courses students are in.",
        "schema_without_content": "Students : StudentID, FullName | Courses : CourseID, CourseName, TeacherName | Enrollments : StudentID, CourseID, Grade",
        "schema_with_content": "Students : StudentID (4, 2, 1), FullName ('Michael Brown', 'Emily White', 'Jane Smith') | Courses : CourseID (2, 4, 3), CourseName ('Biology', 'Art', 'History'), TeacherName ('Mr. Taylor', 'Mr. Johnson', 'Ms. Williams') | Enrollments : StudentID (5, 3, 5), CourseID (2, 1, 1), Grade (-1, -1, -1)",
        "ambiguous_queries": [
            "SELECT Courses.CourseName from Enrollments join Courses on Enrollments.CourseID = Courses.CourseID join Students on Enrollments.StudentID = Students.StudentID GROUP BY Enrollments.CourseID HAVING COUNT(DISTINCT Enrollments.StudentID) = (SELECT COUNT(*) FROM Students)",
            "select students.fullname , courses.coursename from Enrollments join Courses on Enrollments.CourseID = Courses.CourseID join Students on Enrollments.StudentID = Students.StudentID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"students\": [\"for each student individually\", \"common to all students\"]}"
        },
        "clarification_context": "\"students\" refers to \"for each student individually\"",
        "clear_ambiguity": "{\"students\": \"for each student individually\"}",
        "gold_query": "select students.fullname , courses.coursename from Enrollments join Courses on Enrollments.CourseID = Courses.CourseID join Students on Enrollments.StudentID = Students.StudentID"
    },
    {
        "index": 1340,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_labs_equipment/scope_labs_equipment.sqlite",
        "question": "Tell me the equipment each lab uses.",
        "schema_without_content": "Labs : id, name, location | Equipment : id, type | Labs_Equipment : labs_id, equipment_id",
        "schema_with_content": "Labs : id (1, 5, 4), name ('Physics Lab', 'Computer Lab', 'Chemistry Lab'), location ('Room 307', 'Room 203', 'Room 206') | Equipment : id (2, 4, 1), type ('Laser Pointer', 'Headphones', 'Smart Board') | Labs_Equipment : labs_id (1, 4, 5), equipment_id (3, 4, 3)",
        "ambiguous_queries": [
            "SELECT Equipment.type from Labs_Equipment join Equipment on Labs_Equipment.equipment_id = Equipment.id join Labs on Labs_Equipment.labs_id = Labs.id GROUP BY Labs_Equipment.equipment_id HAVING COUNT(DISTINCT Labs_Equipment.labs_id) = (SELECT COUNT(*) FROM Labs)",
            "select labs.name , equipment.type from Labs_Equipment join Equipment on Labs_Equipment.equipment_id = Equipment.id join Labs on Labs_Equipment.labs_id = Labs.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each lab\": [\"for each lab individually\", \"common to all labs\"]}"
        },
        "clarification_context": "\"each lab\" refers to \"for each lab individually\"",
        "clear_ambiguity": "{\"each lab\": \"for each lab individually\"}",
        "gold_query": "select labs.name , equipment.type from Labs_Equipment join Equipment on Labs_Equipment.equipment_id = Equipment.id join Labs on Labs_Equipment.labs_id = Labs.id"
    },
    {
        "index": 1341,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_theme_parks_attractions/scope_theme_parks_attractions.sqlite",
        "question": "What types and descriptions of attractions are available at each theme park?",
        "schema_without_content": "Theme_Parks : park_id, name, location | Attractions : attraction_id, type, description | Theme_Parks_Attractions : theme_park_id, attraction_id",
        "schema_with_content": "Theme_Parks : park_id (4, 3, 5), name ('ThrillZone', 'AdventureWorld', 'Wonderland'), location ('New York', 'Florida', 'California') | Attractions : attraction_id (4, 1, 5), type ('Roller Coaster', 'Bumper Cars', 'Ferris Wheel'), description ('A merry-go-round featuring various animals for riders to sit on.', 'A themed dark ride intended to scare passengers.', 'A thrilling high-speed ride.') | Theme_Parks_Attractions : theme_park_id (4, 3, 5), attraction_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Attractions.type, Attractions.description from Theme_Parks_Attractions join Attractions on Theme_Parks_Attractions.attraction_id = Attractions.attraction_id join Theme_Parks on Theme_Parks_Attractions.theme_park_id = Theme_Parks.park_id GROUP BY Theme_Parks_Attractions.attraction_id HAVING COUNT(DISTINCT Theme_Parks_Attractions.theme_park_id) = (SELECT COUNT(*) FROM Theme_Parks)",
            "select theme_parks.name , attractions.type , attractions.description from Theme_Parks_Attractions join Attractions on Theme_Parks_Attractions.attraction_id = Attractions.attraction_id join Theme_Parks on Theme_Parks_Attractions.theme_park_id = Theme_Parks.park_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each theme park\": [\"for each theme park individually\", \"common to all theme parks\"]}"
        },
        "clarification_context": "\"each theme park\" refers to \"for each theme park individually\"",
        "clear_ambiguity": "{\"each theme park\": \"for each theme park individually\"}",
        "gold_query": "select theme_parks.name , attractions.type , attractions.description from Theme_Parks_Attractions join Attractions on Theme_Parks_Attractions.attraction_id = Attractions.attraction_id join Theme_Parks on Theme_Parks_Attractions.theme_park_id = Theme_Parks.park_id"
    },
    {
        "index": 1342,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_scuba_diving_centers_dive_sites/scope_scuba_diving_centers_dive_sites.sqlite",
        "question": "What dive sites are used by every scuba diving center?",
        "schema_without_content": "Scuba_Diving_Centers : id, name, location | Dive_Sites : id, site_name, type | Customers : id, first_name, last_name, email | Bookings : booking_id, customer_id, scuba_center_id, dive_site_id, date, time",
        "schema_with_content": "Scuba_Diving_Centers : id (1, 3, 5), name ('Blue Wave', 'Poseidon Divers', 'Underwater World'), location ('Hawaii', 'Cancun', 'Bali') | Dive_Sites : id (4, 2, 5), site_name ('Shark Alley', 'Shipwreck Cove', 'The Blue Hole'), type ('Marine Life', 'Caverns', 'Marine Life') | Customers : id (1, 2, 3), first_name ('Charlie', 'Jane', 'Bob'), last_name ('Smith', 'Williams', 'King'), email ('janedoe@example.com', 'bobjohnson@example.com', 'aliceking@example.com') | Bookings : booking_id (4, 2, 5), customer_id (5, 4, 2), scuba_center_id (3, 4, 2), dive_site_id (4, 1, 2), date ('2023-11-30', '2023-11-30', '2023-10-23'), time ('11:00', '13:00', '12:00')",
        "ambiguous_queries": [
            "SELECT Dive_Sites.site_name from Bookings join Dive_Sites on Bookings.dive_site_id = Dive_Sites.id join Scuba_Diving_Centers on Bookings.scuba_center_id = Scuba_Diving_Centers.id GROUP BY Bookings.dive_site_id HAVING COUNT(DISTINCT Bookings.scuba_center_id) = (SELECT COUNT(*) FROM Scuba_Diving_Centers)",
            "select scuba_diving_centers.name , dive_sites.site_name from Bookings join Dive_Sites on Bookings.dive_site_id = Dive_Sites.id join Scuba_Diving_Centers on Bookings.scuba_center_id = Scuba_Diving_Centers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every scuba diving center\": [\"for each scuba diving center individually\", \"common to all scuba diving centers\"]}"
        },
        "clarification_context": "\"every scuba diving center\" refers to \"for each scuba diving center individually\"",
        "clear_ambiguity": "{\"every scuba diving center\": \"for each scuba diving center individually\"}",
        "gold_query": "select scuba_diving_centers.name , dive_sites.site_name from Bookings join Dive_Sites on Bookings.dive_site_id = Dive_Sites.id join Scuba_Diving_Centers on Bookings.scuba_center_id = Scuba_Diving_Centers.id"
    },
    {
        "index": 1343,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_services_third_party_apps/scope_streaming_services_third_party_apps.sqlite",
        "question": "Give me the third-party apps that every streaming service supports and their statuses.",
        "schema_without_content": "Streaming_Services : id, name, description | Third_Party_Apps : app_id, app_name, is_active | Streaming_Services_Third_Party_Apps : streaming_service_id, third_party_app_id",
        "schema_with_content": "Streaming_Services : id (1, 4, 5), name ('Amazon Prime Video', 'Disney+', 'HBO Max'), description ('Streaming service featuring movies, shows, and original content from Disney', 'Online streaming service from Amazon', 'Subscription video on demand service offering a selection of films and TV series') | Third_Party_Apps : app_id (5, 2, 4), app_name ('Roku', 'Apple TV', 'Spotify_Connect'), is_active (1, 1, 1) | Streaming_Services_Third_Party_Apps : streaming_service_id (4, 4, 3), third_party_app_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Third_Party_Apps.app_name, Third_Party_Apps.is_active from Streaming_Services_Third_Party_Apps join Third_Party_Apps on Streaming_Services_Third_Party_Apps.third_party_app_id = Third_Party_Apps.app_id join Streaming_Services on Streaming_Services_Third_Party_Apps.streaming_service_id = Streaming_Services.id GROUP BY Streaming_Services_Third_Party_Apps.third_party_app_id HAVING COUNT(DISTINCT Streaming_Services_Third_Party_Apps.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)",
            "select streaming_services.name , third_party_apps.app_name , third_party_apps.is_active from Streaming_Services_Third_Party_Apps join Third_Party_Apps on Streaming_Services_Third_Party_Apps.third_party_app_id = Third_Party_Apps.app_id join Streaming_Services on Streaming_Services_Third_Party_Apps.streaming_service_id = Streaming_Services.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"every streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"every streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_services.name , third_party_apps.app_name , third_party_apps.is_active from Streaming_Services_Third_Party_Apps join Third_Party_Apps on Streaming_Services_Third_Party_Apps.third_party_app_id = Third_Party_Apps.app_id join Streaming_Services on Streaming_Services_Third_Party_Apps.streaming_service_id = Streaming_Services.id"
    },
    {
        "index": 1344,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
        "question": "What categories are associated with each film festival?",
        "schema_without_content": "Film_Festivals : id, name, location | Categories : id, category_name | Film_Festivals_Categories : film_festival_id, category_id",
        "schema_with_content": "Film_Festivals : id (2, 4, 5), name ('World Narrative Film Festival', 'Los Angeles Short Film Festival', 'Austin Experimental Film Festival'), location ('London', 'Toronto', 'Los Angeles') | Categories : id (1, 4, 2), category_name ('Experimental_Films', 'Short_Films', 'Documentary_Films') | Film_Festivals_Categories : film_festival_id (5, 4, 3), category_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Categories.category_name from Film_Festivals_Categories join Categories on Film_Festivals_Categories.category_id = Categories.id join Film_Festivals on Film_Festivals_Categories.film_festival_id = Film_Festivals.id GROUP BY Film_Festivals_Categories.category_id HAVING COUNT(DISTINCT Film_Festivals_Categories.film_festival_id) = (SELECT COUNT(*) FROM Film_Festivals)",
            "select film_festivals.name , categories.category_name from Film_Festivals_Categories join Categories on Film_Festivals_Categories.category_id = Categories.id join Film_Festivals on Film_Festivals_Categories.film_festival_id = Film_Festivals.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each film festival\": [\"for each film festival individually\", \"common to all film festivals\"]}"
        },
        "clarification_context": "\"each film festival\" refers to \"for each film festival individually\"",
        "clear_ambiguity": "{\"each film festival\": \"for each film festival individually\"}",
        "gold_query": "select film_festivals.name , categories.category_name from Film_Festivals_Categories join Categories on Film_Festivals_Categories.category_id = Categories.id join Film_Festivals on Film_Festivals_Categories.film_festival_id = Film_Festivals.id"
    },
    {
        "index": 1345,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_weather_model_parameters/scope_weather_model_parameters.sqlite",
        "question": "Show me the parameters each weather model uses.",
        "schema_without_content": "Weather_Model : modelID, modelName, manufacturer | Parameters : parameterID, parameterName, unit | Weather_Model_Parameters : weatherModelId, parameterId, value",
        "schema_with_content": "Weather_Model : modelID (1, 4, 5), modelName ('Model B', 'Model E', 'Model A'), manufacturer ('Manufacturer V', 'Manufacturer Z', 'Manufacturer Y') | Parameters : parameterID (1, 4, 3), parameterName ('Humidity', 'Visibility', 'Temperature'), unit ('%', 'km/h', '°C') | Weather_Model_Parameters : weatherModelId (2, 3, 1), parameterId (1, 4, 1), value ()",
        "ambiguous_queries": [
            "SELECT Parameters.parameterName from Weather_Model_Parameters join Parameters on Weather_Model_Parameters.parameterId = Parameters.parameterID join Weather_Model on Weather_Model_Parameters.weatherModelId = Weather_Model.modelID GROUP BY Weather_Model_Parameters.parameterId HAVING COUNT(DISTINCT Weather_Model_Parameters.weatherModelId) = (SELECT COUNT(*) FROM Weather_Model)",
            "select weather_model.modelname , parameters.parametername from Weather_Model_Parameters join Parameters on Weather_Model_Parameters.parameterId = Parameters.parameterID join Weather_Model on Weather_Model_Parameters.weatherModelId = Weather_Model.modelID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each weather model\": [\"for each weather model individually\", \"common to all weather models\"]}"
        },
        "clarification_context": "\"each weather model\" refers to \"for each weather model individually\"",
        "clear_ambiguity": "{\"each weather model\": \"for each weather model individually\"}",
        "gold_query": "select weather_model.modelname , parameters.parametername from Weather_Model_Parameters join Parameters on Weather_Model_Parameters.parameterId = Parameters.parameterID join Weather_Model on Weather_Model_Parameters.weatherModelId = Weather_Model.modelID"
    },
    {
        "index": 1346,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
        "question": "List the building description for every college campus.",
        "schema_without_content": "College_Campuses : id, name, location | Buildings : id, type, description | College_Campuses_Buildings : campusId, buildingId",
        "schema_with_content": "College_Campuses : id (2, 1, 3), name ('Harvard University', 'California Institute of Technology', 'Stanford University'), location ('Berkeley, CA', 'Stanford, CA', 'Cambridge, MA') | Buildings : id (2, 4, 3), type ('Administration Building', 'Dormitory', 'Gymnasium'), description ('The main office building on campus.', 'Facility for sports activities.', 'Residential living space for students.') | College_Campuses_Buildings : campusId (1, 1, 5), buildingId (1, 1, 3)",
        "ambiguous_queries": [
            "SELECT Buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM College_Campuses)",
            "select college_campuses.name , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every college campus\": [\"for each college campus individually\", \"common to all college campuses\"]}"
        },
        "clarification_context": "\"every college campus\" refers to \"common to all college campuses\"",
        "clear_ambiguity": "{\"every college campus\": \"common to all college campuses\"}",
        "gold_query": "SELECT Buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM College_Campuses)"
    },
    {
        "index": 1347,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_photography_workshops_techniques/scope_photography_workshops_techniques.sqlite",
        "question": "What techniques do we have for every photography workshop?",
        "schema_without_content": "Techniques : technique_id, technique_name | Photographers : photographer_id, name, experience | Workshop_Sessions : session_id, workshop_title, start_time, end_time | Photography_Workshops_Techniques : id, photography_workshop_id, technique_id | Participants : participant_id, first_name, last_name, email | Enrollments : enrollment_id, participant_id, workshop_session_id | Photography_Workshops : workshop_id, workshop_leader_id",
        "schema_with_content": "Techniques : technique_id (3, 5, 2), technique_name ('Manual_Photography', 'Street_Photography', 'Landscape_Photography') | Photographers : photographer_id (4, 5, 3), name ('Michael Johnson', 'David Brown', 'John Doe'), experience (10, 6, 8) | Workshop_Sessions : session_id (5, 3, 4), workshop_title ('Introduction to Portrait Photography', 'Capturing Night Skies', 'Mastering Landscape Photography'), start_time ('2022-01-04 10:00:00', '2022-01-05 10:00:00', '2022-01-02 10:00:00'), end_time ('2022-01-01 16:00:00', '2022-01-02 16:00:00', '2022-01-04 16:00:00') | Photography_Workshops_Techniques : id (4, 9, 2), photography_workshop_id (1, 3, 5), technique_id (1, 5, 1) | Participants : participant_id (1, 4, 5), first_name ('Dave', 'Carol', 'Alice'), last_name ('Johnson', 'Smith', 'Brown'), email ('evewhite@example.com', 'carolwilliams@example.com', 'davebrown@example.com') | Enrollments : enrollment_id (5, 4, 2), participant_id (2, 5, 1), workshop_session_id (4, 2, 1) | Photography_Workshops : workshop_id (3, 4, 5), workshop_leader_id (3, 5, 1)",
        "ambiguous_queries": [
            "SELECT Techniques.technique_name from Photography_Workshops_Techniques join Techniques on Photography_Workshops_Techniques.technique_id = Techniques.technique_id join Photography_Workshops on Photography_Workshops_Techniques.photography_workshop_id = Photography_Workshops.workshop_id GROUP BY Photography_Workshops_Techniques.technique_id HAVING COUNT(DISTINCT Photography_Workshops_Techniques.photography_workshop_id) = (SELECT COUNT(*) FROM Photography_Workshops)",
            "select photography_workshops.workshop_id , techniques.technique_name from Photography_Workshops_Techniques join Techniques on Photography_Workshops_Techniques.technique_id = Techniques.technique_id join Photography_Workshops on Photography_Workshops_Techniques.photography_workshop_id = Photography_Workshops.workshop_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every photography workshop\": [\"for each photography workshop individually\", \"common to all photography workshops\"]}"
        },
        "clarification_context": "\"every photography workshop\" refers to \"for each photography workshop individually\"",
        "clear_ambiguity": "{\"every photography workshop\": \"for each photography workshop individually\"}",
        "gold_query": "select photography_workshops.workshop_id , techniques.technique_name from Photography_Workshops_Techniques join Techniques on Photography_Workshops_Techniques.technique_id = Techniques.technique_id join Photography_Workshops on Photography_Workshops_Techniques.photography_workshop_id = Photography_Workshops.workshop_id"
    },
    {
        "index": 1348,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_cinematographies_techniques/scope_cinematographies_techniques.sqlite",
        "question": "Tell me what techniques were used in each film.",
        "schema_without_content": "Cinematographies : id, name, release_year | Techniques : id, technique_name | Cinematographies_Techniques : cinematography_id, technique_id",
        "schema_with_content": "Cinematographies : id (3, 2, 1), name ('Movie4', 'Movie5', 'Movie2'), release_year (2000, 2002, 2001) | Techniques : id (1, 2, 5), technique_name ('Close_Up', 'Low_Angle', 'Overhead') | Cinematographies_Techniques : cinematography_id (4, 5, 2), technique_id (2, 2, 2)",
        "ambiguous_queries": [
            "SELECT Techniques.technique_name from Cinematographies_Techniques join Techniques on Cinematographies_Techniques.technique_id = Techniques.id join Cinematographies on Cinematographies_Techniques.cinematography_id = Cinematographies.id GROUP BY Cinematographies_Techniques.technique_id HAVING COUNT(DISTINCT Cinematographies_Techniques.cinematography_id) = (SELECT COUNT(*) FROM Cinematographies)",
            "select cinematographies.name , techniques.technique_name from Cinematographies_Techniques join Techniques on Cinematographies_Techniques.technique_id = Techniques.id join Cinematographies on Cinematographies_Techniques.cinematography_id = Cinematographies.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each film\": [\"for each film individually\", \"common to all films\"]}"
        },
        "clarification_context": "\"each film\" refers to \"for each film individually\"",
        "clear_ambiguity": "{\"each film\": \"for each film individually\"}",
        "gold_query": "select cinematographies.name , techniques.technique_name from Cinematographies_Techniques join Techniques on Cinematographies_Techniques.technique_id = Techniques.id join Cinematographies on Cinematographies_Techniques.cinematography_id = Cinematographies.id"
    },
    {
        "index": 1349,
        "db_id": "Banking",
        "ambig_type": "scope",
        "db_file": "scope/Banking/scope_online_banking_platforms_features/scope_online_banking_platforms_features.sqlite",
        "question": "Show me features every banking platform has.",
        "schema_without_content": "Online_Banking_Platforms : id, name, website | Features : feature_id, feature_value | Online_Banking_Platforms_Features : platform_id, feature_id",
        "schema_with_content": "Online_Banking_Platforms : id (1, 4, 2), name ('Platform3', 'Platform4', 'Platform1'), website ('www.bank5.com', 'www.bank4.com', 'www.bank1.com') | Features : feature_id (1, 4, 5), feature_value ('Secure Login', 'Bill Pay', 'Mobile App') | Online_Banking_Platforms_Features : platform_id (5, 4, 4), feature_id (2, 3, 1)",
        "ambiguous_queries": [
            "SELECT Features.feature_value from Online_Banking_Platforms_Features join Features on Online_Banking_Platforms_Features.feature_id = Features.feature_id join Online_Banking_Platforms on Online_Banking_Platforms_Features.platform_id = Online_Banking_Platforms.id GROUP BY Online_Banking_Platforms_Features.feature_id HAVING COUNT(DISTINCT Online_Banking_Platforms_Features.platform_id) = (SELECT COUNT(*) FROM Online_Banking_Platforms)",
            "select online_banking_platforms.name , features.feature_value from Online_Banking_Platforms_Features join Features on Online_Banking_Platforms_Features.feature_id = Features.feature_id join Online_Banking_Platforms on Online_Banking_Platforms_Features.platform_id = Online_Banking_Platforms.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every banking platform\": [\"for each banking platform individually\", \"common to all banking platforms\"]}"
        },
        "clarification_context": "\"every banking platform\" refers to \"for each banking platform individually\"",
        "clear_ambiguity": "{\"every banking platform\": \"for each banking platform individually\"}",
        "gold_query": "select online_banking_platforms.name , features.feature_value from Online_Banking_Platforms_Features join Features on Online_Banking_Platforms_Features.feature_id = Features.feature_id join Online_Banking_Platforms on Online_Banking_Platforms_Features.platform_id = Online_Banking_Platforms.id"
    },
    {
        "index": 1350,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
        "question": "What is the customer support description for each streaming service?",
        "schema_without_content": "streaming_service : id, name, price | customer_support : id, support_type, description | streaming_service_customer_support : id, streaming_service_id, customer_support_id",
        "schema_with_content": "streaming_service : id (3, 4, 2), name ('HBO Max', 'Netflix', 'Hulu'), price (9.99, 14.99, 8.99) | customer_support : id (3, 5, 2), support_type ('Forum Support', 'Live Chat', 'Phone Support'), description ('Real-time chat assistance', 'Find answers to common questions', 'Response within 24 hours') | streaming_service_customer_support : id (3, 1, 2), streaming_service_id (5, 3, 2), customer_support_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT customer_support.description from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM streaming_service)",
            "select streaming_service.name , customer_support.description from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"for each streaming service individually\"",
        "clear_ambiguity": "{\"each streaming service\": \"for each streaming service individually\"}",
        "gold_query": "select streaming_service.name , customer_support.description from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
    },
    {
        "index": 1351,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_health_promotion_program_activities/scope_health_promotion_program_activities.sqlite",
        "question": "Show me the activities each health program uses.",
        "schema_without_content": "Health_Promotion_Program : program_id, name, description | Activities : activity_id, activity_name, description | Health_Promotion_Program_Activities : id, program_id, activity_id | Participants : participant_id, first_name, last_name, email, phone_number",
        "schema_with_content": "Health_Promotion_Program : program_id (3, 1, 4), name ('Heart Health Program', 'Smoking Cessation Program', 'Diabetes Prevention Program'), description ('This program focuses on heart disease prevention and management.', 'This program offers resources for mental health.', 'This program provides support for quitting smoking.') | Activities : activity_id (3, 2, 4), activity_name ('Yoga Sessions', 'Nutrition Workshops', 'Exercise Classes'), description ('Group exercise sessions that promote physical fitness.', 'Relaxing yoga classes to improve flexibility and reduce stress.', 'Sessions designed to help participants cope with stress.') | Health_Promotion_Program_Activities : id (3, 1, 4), program_id (1, 2, 5), activity_id (2, 1, 2) | Participants : participant_id (3, 4, 5), first_name ('John', 'Jane', 'Bob'), last_name ('Smith', 'White', 'Doe'), email ('emma.black@example.com', 'bob.white@example.com', 'john.doe@example.com'), phone_number ('+123-456-7890', '+555-123-4567', '+987-654-3210')",
        "ambiguous_queries": [
            "SELECT Activities.activity_name from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id GROUP BY Health_Promotion_Program_Activities.activity_id HAVING COUNT(DISTINCT Health_Promotion_Program_Activities.program_id) = (SELECT COUNT(*) FROM Health_Promotion_Program)",
            "select health_promotion_program.name , activities.activity_name from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each health program\": [\"for each health program individually\", \"common to all health programs\"]}"
        },
        "clarification_context": "\"each health program\" refers to \"common to all health programs\"",
        "clear_ambiguity": "{\"each health program\": \"common to all health programs\"}",
        "gold_query": "SELECT Activities.activity_name from Health_Promotion_Program_Activities join Activities on Health_Promotion_Program_Activities.activity_id = Activities.activity_id join Health_Promotion_Program on Health_Promotion_Program_Activities.program_id = Health_Promotion_Program.program_id GROUP BY Health_Promotion_Program_Activities.activity_id HAVING COUNT(DISTINCT Health_Promotion_Program_Activities.program_id) = (SELECT COUNT(*) FROM Health_Promotion_Program)"
    },
    {
        "index": 1352,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_wine_regions_winery_tours/scope_wine_regions_winery_tours.sqlite",
        "question": "Show me the tours that each wine region offers.",
        "schema_without_content": "Wine_Regions : RegionID, Name, Description | Winery_Tours : TourID, Type, Duration | Wine_Regions_Winery_Tours : WineRegionID, TourType",
        "schema_with_content": "Wine_Regions : RegionID (3, 5, 1), Name ('Bordeaux', 'Marlborough', 'Champagne'), Description (\"Known for producing some of the world's finest sparkling wines.\", \"Australia's most renowned wine region, producing a wide variety of styles.\", 'A famous wine region known for its Cabernet Sauvignon.') | Winery_Tours : TourID (1, 4, 3), Type ('Educational_tours', 'Group_tours', 'Custom_tours'), Duration (5.0, 4.0, 3.0) | Wine_Regions_Winery_Tours : WineRegionID (2, 1, 4), TourType ('Group_tours', 'Self_guided_Tours', 'Self_guided_Tours')",
        "ambiguous_queries": [
            "SELECT Winery_Tours.Type from Wine_Regions_Winery_Tours join Winery_Tours on Wine_Regions_Winery_Tours.TourType = Winery_Tours.Type join Wine_Regions on Wine_Regions_Winery_Tours.WineRegionID = Wine_Regions.RegionID GROUP BY Wine_Regions_Winery_Tours.TourType HAVING COUNT(DISTINCT Wine_Regions_Winery_Tours.WineRegionID) = (SELECT COUNT(*) FROM Wine_Regions)",
            "select wine_regions.name , winery_tours.type from Wine_Regions_Winery_Tours join Winery_Tours on Wine_Regions_Winery_Tours.TourType = Winery_Tours.Type join Wine_Regions on Wine_Regions_Winery_Tours.WineRegionID = Wine_Regions.RegionID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each wine region\": [\"for each wine region individually\", \"common to all wine regions\"]}"
        },
        "clarification_context": "\"each wine region\" refers to \"for each wine region individually\"",
        "clear_ambiguity": "{\"each wine region\": \"for each wine region individually\"}",
        "gold_query": "select wine_regions.name , winery_tours.type from Wine_Regions_Winery_Tours join Winery_Tours on Wine_Regions_Winery_Tours.TourType = Winery_Tours.Type join Wine_Regions on Wine_Regions_Winery_Tours.WineRegionID = Wine_Regions.RegionID"
    },
    {
        "index": 1353,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
        "question": "Give me the advertisement duration we have on every streaming service.",
        "schema_without_content": "Streaming_Service : id, name, platform | Advertisement : id, type, duration | Streaming_Service_Advertisement : streaming_service_id, advertisement_id",
        "schema_with_content": "Streaming_Service : id (5, 4, 3), name ('HBO Max', 'Amazon Prime Video', 'Netflix'), platform ('App', 'Web', 'Web') | Advertisement : id (5, 2, 4), type ('Mid_roll_Ads', 'Interstitial_Ads', 'Post_roll_Ads'), duration (60.0, 10.0, 90.0) | Streaming_Service_Advertisement : streaming_service_id (5, 4, 5), advertisement_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)",
            "select streaming_service.name , advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"every streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"every streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
    },
    {
        "index": 1354,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_patient_advocates_issues/scope_patient_advocates_issues.sqlite",
        "question": "Give me the issue description of each patient advocate.",
        "schema_without_content": "Patient_Advocates : id, name, email | Issues : id, issue_name, description | Patient_Advocates_Issues : patient_advocate_id, issue_id",
        "schema_with_content": "Patient_Advocates : id (4, 2, 5), name ('Jane Smith', 'John Doe', 'Emily Davis'), email ('johndoe@example.com', 'davidbrown@example.com', 'michaeljohnson@example.com') | Issues : id (2, 1, 4), issue_name ('Medical Records', 'Billing', 'Health Insurance'), description ('Assisting patients during emergencies and coordinating care.', 'Coordinating appointments for patients and healthcare providers.', 'Managing and maintaining patients medical records.') | Patient_Advocates_Issues : patient_advocate_id (4, 3, 5), issue_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Issues.description from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id GROUP BY Patient_Advocates_Issues.issue_id HAVING COUNT(DISTINCT Patient_Advocates_Issues.patient_advocate_id) = (SELECT COUNT(*) FROM Patient_Advocates)",
            "select patient_advocates.name , issues.description from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each patient advocate\": [\"for each patient advocate individually\", \"common to all patient advocates\"]}"
        },
        "clarification_context": "\"each patient advocate\" refers to \"common to all patient advocates\"",
        "clear_ambiguity": "{\"each patient advocate\": \"common to all patient advocates\"}",
        "gold_query": "SELECT Issues.description from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id GROUP BY Patient_Advocates_Issues.issue_id HAVING COUNT(DISTINCT Patient_Advocates_Issues.patient_advocate_id) = (SELECT COUNT(*) FROM Patient_Advocates)"
    },
    {
        "index": 1355,
        "db_id": "Entertainment",
        "ambig_type": "scope",
        "db_file": "scope/Entertainment/scope_books_formats/scope_books_formats.sqlite",
        "question": "Which formats are associated with each book?",
        "schema_without_content": "Formats : id, name | Books : id, title, author | Authors : id, firstname, lastname | Books_Authors : book_id, author_id | Book_Formats : book_id, format_id",
        "schema_with_content": "Formats : id (3, 5, 4), name ('Ebook', 'Digital', 'Hardcover') | Books : id (5, 2, 4), title ('The Adventures of Huckleberry Finn', 'Great Expectations', 'Pride and Prejudice'), author ('Leo Tolstoy', 'Charles Dickens', 'Jane Austen') | Authors : id (3, 2, 1), firstname ('Leo', 'Charles', 'Jane'), lastname ('Orwell', 'Dickens', 'Tolstoy') | Books_Authors : book_id (1, 4, 2), author_id (1, 3, 5) | Book_Formats : book_id (3, 2, 3), format_id (1, 5, 1)",
        "ambiguous_queries": [
            "SELECT Formats.name from Book_Formats join Formats on Book_Formats.format_id = Formats.id join Books on Book_Formats.book_id = Books.id GROUP BY Book_Formats.format_id HAVING COUNT(DISTINCT Book_Formats.book_id) = (SELECT COUNT(*) FROM Books)",
            "select books.title , formats.name from Book_Formats join Formats on Book_Formats.format_id = Formats.id join Books on Book_Formats.book_id = Books.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each book\": [\"for each book individually\", \"common to all books\"]}"
        },
        "clarification_context": "\"each book\" refers to \"common to all books\"",
        "clear_ambiguity": "{\"each book\": \"common to all books\"}",
        "gold_query": "SELECT Formats.name from Book_Formats join Formats on Book_Formats.format_id = Formats.id join Books on Book_Formats.book_id = Books.id GROUP BY Book_Formats.format_id HAVING COUNT(DISTINCT Book_Formats.book_id) = (SELECT COUNT(*) FROM Books)"
    },
    {
        "index": 1356,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_pharmacies_medications/scope_pharmacies_medications.sqlite",
        "question": "Give the medication type and its dosage available at each pharmacy.",
        "schema_without_content": "Pharmacies : id, name, location | Medications : medication_id, type, dosage, side_effects | Prescriptions : prescription_id, pharmacy_id, patient_name, date | Pharmacy_Prescriptions : pharmacy_prescription_id, pharmacy_id, prescription_id, quantity | Pharmacy_Medications : pharmacy_medication_id, pharmacy_id, medication_id",
        "schema_with_content": "Pharmacies : id (2, 1, 3), name ('Ace Medical Center', 'Dogwood Apothecary', 'Cedar Health Solutions'), location ('098 Pine St', '123 Main St', '456 Elm St') | Medications : medication_id (4, 1, 2), type ('Pain Relievers', 'Anti-Inflammatories', 'Respiratory Medications'), dosage ('As directed', 'As directed', 'As directed'), side_effects ('Stomach bleeding, dizziness', 'Dizziness, fatigue', 'Dry mouth, headache') | Prescriptions : prescription_id (3, 2, 10), pharmacy_id (1, 1, 3), patient_name ('David Brown', 'Jane Smith', 'Emily Davis'), date ('2021-10-02', '2021-10-03', '2021-10-05') | Pharmacy_Prescriptions : pharmacy_prescription_id (2, 4, 3), pharmacy_id (1, 1, 3), prescription_id (2, 1, 3), quantity (15, 20, 10) | Pharmacy_Medications : pharmacy_medication_id (4, 2, 7), pharmacy_id (5, 1, 2), medication_id (1, 3, 1)",
        "ambiguous_queries": [
            "SELECT Medications.type, Medications.dosage from Pharmacy_Medications join Medications on Pharmacy_Medications.medication_id = Medications.medication_id join Pharmacies on Pharmacy_Medications.pharmacy_id = Pharmacies.id GROUP BY Pharmacy_Medications.medication_id HAVING COUNT(DISTINCT Pharmacy_Medications.pharmacy_id) = (SELECT COUNT(*) FROM Pharmacies)",
            "select pharmacies.name , medications.type , medications.dosage from Pharmacy_Medications join Medications on Pharmacy_Medications.medication_id = Medications.medication_id join Pharmacies on Pharmacy_Medications.pharmacy_id = Pharmacies.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each pharmacy\": [\"for each pharmacy individually\", \"common to all pharmacies\"]}"
        },
        "clarification_context": "\"each pharmacy\" refers to \"for each pharmacy individually\"",
        "clear_ambiguity": "{\"each pharmacy\": \"for each pharmacy individually\"}",
        "gold_query": "select pharmacies.name , medications.type , medications.dosage from Pharmacy_Medications join Medications on Pharmacy_Medications.medication_id = Medications.medication_id join Pharmacies on Pharmacy_Medications.pharmacy_id = Pharmacies.id"
    },
    {
        "index": 1357,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_patient_advocates_issues/scope_patient_advocates_issues.sqlite",
        "question": "What issues are associated with each patient advocate?",
        "schema_without_content": "Patient_Advocates : id, name, email | Issues : id, issue_name, description | Patient_Advocates_Issues : patient_advocate_id, issue_id",
        "schema_with_content": "Patient_Advocates : id (4, 5, 3), name ('Jane Smith', 'Emily Davis', 'David Brown'), email ('davidbrown@example.com', 'johndoe@example.com', 'michaeljohnson@example.com') | Issues : id (1, 4, 2), issue_name ('Emergency Assistance', 'Appointment Scheduling', 'Medical Records'), description ('Coordinating appointments for patients and healthcare providers.', 'Helping patients navigate their health insurance options.', 'Handling insurance claims and billing issues.') | Patient_Advocates_Issues : patient_advocate_id (3, 4, 5), issue_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Issues.issue_name from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id GROUP BY Patient_Advocates_Issues.issue_id HAVING COUNT(DISTINCT Patient_Advocates_Issues.patient_advocate_id) = (SELECT COUNT(*) FROM Patient_Advocates)",
            "select patient_advocates.name , issues.issue_name from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each patient advocate\": [\"for each patient advocate individually\", \"common to all patient advocates\"]}"
        },
        "clarification_context": "\"each patient advocate\" refers to \"for each patient advocate individually\"",
        "clear_ambiguity": "{\"each patient advocate\": \"for each patient advocate individually\"}",
        "gold_query": "select patient_advocates.name , issues.issue_name from Patient_Advocates_Issues join Issues on Patient_Advocates_Issues.issue_id = Issues.id join Patient_Advocates on Patient_Advocates_Issues.patient_advocate_id = Patient_Advocates.id"
    },
    {
        "index": 1358,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_journalism_schools_courses/scope_journalism_schools_courses.sqlite",
        "question": "What are the course names we have for each school",
        "schema_without_content": "Journalism_Schools : id, name, location | Courses : id, course_name, description | Journalism_Schools_Courses : journalism_schools_id, course_id",
        "schema_with_content": "Journalism_Schools : id (4, 5, 3), name ('University D', 'University C', 'University B'), location ('City B', 'City A', 'City D') | Courses : id (1, 3, 2), course_name ('Ethics In Journalism', 'Media Law', 'News Reporting'), description ('Develop skills necessary for effective reporting on current events.', 'Learn how to analyze and interpret data to inform news stories.', 'Master the art of crafting compelling feature articles.') | Journalism_Schools_Courses : journalism_schools_id (3, 2, 4), course_id (5, 1, 1)",
        "ambiguous_queries": [
            "SELECT Courses.course_name from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id GROUP BY Journalism_Schools_Courses.course_id HAVING COUNT(DISTINCT Journalism_Schools_Courses.journalism_schools_id) = (SELECT COUNT(*) FROM Journalism_Schools)",
            "select journalism_schools.name , courses.course_name from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each school\": [\"for each school individually\", \"common to all schools\"]}"
        },
        "clarification_context": "\"each school\" refers to \"for each school individually\"",
        "clear_ambiguity": "{\"each school\": \"for each school individually\"}",
        "gold_query": "select journalism_schools.name , courses.course_name from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id"
    },
    {
        "index": 1359,
        "db_id": "Banking",
        "ambig_type": "scope",
        "db_file": "scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
        "question": "Show me information on transactions every bank statement shows.",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName | Accounts : AccountNumber, CustomerID, Balance | Transactions : TransactionID, AccountNumber, TransactionType, Amount, Date | Bank_Statements : StatementID, AccountNumber, StartDate, EndDate, TotalAmount | Bank_Statements_Transactions : StatementTransactionID, StatementID, TransactionID",
        "schema_with_content": "Customers : CustomerID (2, 3, 4), FirstName ('David', 'Michael', 'John'), LastName ('Brown', 'Smith', 'White') | Accounts : AccountNumber (4, 3, 1), CustomerID (2, 3, 1), Balance (1000.0, 600.0, 900.0) | Transactions : TransactionID (9, 10, 4), AccountNumber (5, 2, 1), TransactionType ('Subscription_Payments', 'Transfer', 'Transfer'), Amount (180.0, 220.0, 110.0), Date ('2024-01-30 18:53:44', '2024-01-30 18:53:44', '2024-01-30 18:53:44') | Bank_Statements : StatementID (5, 1, 2), AccountNumber (5, 3, 1), StartDate ('2021-05-01', '2021-01-01', '2021-03-01'), EndDate ('2021-01-31', '2021-05-31', '2021-03-31'), TotalAmount (270.0, 260.0, 250.0) | Bank_Statements_Transactions : StatementTransactionID (12, 11, 9), StatementID (3, 4, 4), TransactionID (1, 3, 1)",
        "ambiguous_queries": [
            "SELECT Transactions.TransactionID, Transactions.Amount, Transactions.Date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)",
            "select bank_statements.accountnumber , transactions.transactionid , transactions.amount , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every bank statement\": [\"for each bank statement individually\", \"common to all bank statements\"]}"
        },
        "clarification_context": "\"every bank statement\" refers to \"common to all bank statements\"",
        "clear_ambiguity": "{\"every bank statement\": \"common to all bank statements\"}",
        "gold_query": "SELECT Transactions.TransactionID, Transactions.Amount, Transactions.Date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
    },
    {
        "index": 1360,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_lessons_activities/scope_lessons_activities.sqlite",
        "question": "Tell me the activities every lesson has.",
        "schema_without_content": "Lessons : id, lessonName, teacherId | Activities : activityType, description | Students : studentId, name, age | Teachers : teacherId, name, subject | Enrollments : enrollmentId, studentId, classId | Lessons_Activities : lessonsActivityId, lessonsId, activitiesType",
        "schema_with_content": "Lessons : id (5, 1, 4), lessonName ('Basics of Physics', 'Cell Structure and Function', 'Ancient History Timeline'), teacherId (4, 3, 2) | Activities : activityType ('Quiz', 'Lecture', 'Group_Work'), description ('Collaborative learning task', 'Instructor-led presentation on a topic', 'Short test to assess understanding') | Students : studentId (2, 1, 4), name ('David', 'Eva', 'Bob'), age (13, 15, 12) | Teachers : teacherId (4, 1, 3), name ('Professor White', 'Mrs. Lee', 'Ms. Johnson'), subject ('Math', 'Biology', 'Physics') | Enrollments : enrollmentId (5, 4, 3), studentId (1, 3, 5), classId (1, 5, 2) | Lessons_Activities : lessonsActivityId (1, 2, 6), lessonsId (5, 4, 2), activitiesType ('Lecture', 'Quiz', 'Quiz')",
        "ambiguous_queries": [
            "SELECT Activities.activityType from Lessons_Activities join Activities on Lessons_Activities.activitiesType = Activities.activityType join Lessons on Lessons_Activities.lessonsId = Lessons.id GROUP BY Lessons_Activities.activitiesType HAVING COUNT(DISTINCT Lessons_Activities.lessonsId) = (SELECT COUNT(*) FROM Lessons)",
            "select lessons.lessonname , activities.activitytype from Lessons_Activities join Activities on Lessons_Activities.activitiesType = Activities.activityType join Lessons on Lessons_Activities.lessonsId = Lessons.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every lesson\": [\"for each lesson individually\", \"common to all lessons\"]}"
        },
        "clarification_context": "\"every lesson\" refers to \"common to all lessons\"",
        "clear_ambiguity": "{\"every lesson\": \"common to all lessons\"}",
        "gold_query": "SELECT Activities.activityType from Lessons_Activities join Activities on Lessons_Activities.activitiesType = Activities.activityType join Lessons on Lessons_Activities.lessonsId = Lessons.id GROUP BY Lessons_Activities.activitiesType HAVING COUNT(DISTINCT Lessons_Activities.lessonsId) = (SELECT COUNT(*) FROM Lessons)"
    },
    {
        "index": 1361,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_projects_research_techniques/scope_projects_research_techniques.sqlite",
        "question": "which research techniques are utilized for each project?",
        "schema_without_content": "Projects : id, project_name, description | Research_Techniques : id, technique_name, description | Projects_Research_Techniques : project_id, technique_id",
        "schema_with_content": "Projects : id (4, 3, 2), project_name ('Educational Game Development', 'Smart Classroom System', 'AI-Based Tutoring System'), description ('Designing an AI system for personalized tutoring', 'Creating AR textbooks for enhanced learning experience', 'Implementing IoT devices in classrooms') | Research_Techniques : id (5, 2, 1), technique_name ('Expert Interviews', 'Literature Review', 'Focus Group Discussions'), description ('Analyzing specific examples in depth', 'Interviewing experts in the field', 'Reviewing existing research on the topic') | Projects_Research_Techniques : project_id (3, 5, 4), technique_id (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Research_Techniques.technique_name from Projects_Research_Techniques join Research_Techniques on Projects_Research_Techniques.technique_id = Research_Techniques.id join Projects on Projects_Research_Techniques.project_id = Projects.id GROUP BY Projects_Research_Techniques.technique_id HAVING COUNT(DISTINCT Projects_Research_Techniques.project_id) = (SELECT COUNT(*) FROM Projects)",
            "select projects.project_name , research_techniques.technique_name from Projects_Research_Techniques join Research_Techniques on Projects_Research_Techniques.technique_id = Research_Techniques.id join Projects on Projects_Research_Techniques.project_id = Projects.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each project\": [\"for each project individually\", \"common to all projects\"]}"
        },
        "clarification_context": "\"each project\" refers to \"common to all projects\"",
        "clear_ambiguity": "{\"each project\": \"common to all projects\"}",
        "gold_query": "SELECT Research_Techniques.technique_name from Projects_Research_Techniques join Research_Techniques on Projects_Research_Techniques.technique_id = Research_Techniques.id join Projects on Projects_Research_Techniques.project_id = Projects.id GROUP BY Projects_Research_Techniques.technique_id HAVING COUNT(DISTINCT Projects_Research_Techniques.project_id) = (SELECT COUNT(*) FROM Projects)"
    },
    {
        "index": 1362,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_nutritionists_diets/scope_nutritionists_diets.sqlite",
        "question": "Show me the diets that every nutritionist covers.",
        "schema_without_content": "Nutritionists : nutritionist_id, email, full_name | Diets : diet_type_id, diet_type_value | Nutritionists_Diets : nutritionist_id, diet_type_id | JobPostings : job_posting_id, title, description, location, salary | Applicants : applicant_id, first_name, last_name, email, phone_number | ApplicationStatus : application_id, job_posting_id, applicant_id, status, applied_date",
        "schema_with_content": "Nutritionists : nutritionist_id (2, 1, 5), email ('emily.white@example.com', 'john.smith@example.com', 'michael.brown@example.com'), full_name ('Jane Doe', 'David Black', 'Michael Brown') | Diets : diet_type_id (4, 1, 2), diet_type_value ('Gluten Free', 'Vegan', 'Paleo') | Nutritionists_Diets : nutritionist_id (2, 3, 5), diet_type_id (3, 1, 1) | JobPostings : job_posting_id (1, 4, 5), title ('Clinical Nutritionist', 'Health Coach', 'Food Scientist'), description ('Help clients achieve their nutritional goals.', 'Guide clients towards healthier lifestyles.', 'Research and develop new food products.'), location ('San Francisco, CA', 'New York, NY', 'Los Angeles, CA'), salary (80000, 85000, 65000) | Applicants : applicant_id (5, 1, 4), first_name ('Robert', 'Laura', 'Mark'), last_name ('Wilson', 'Lee', 'Martinez'), email ('alice.wilson@example.com', 'anna.martinez@example.com', 'robert.lee@example.com'), phone_number ('+2468135790', '+1357924680', '+1234567890') | ApplicationStatus : application_id (4, 2, 3), job_posting_id (1, 4, 1), applicant_id (3, 4, 2), status ('On Hold', 'Offer Made', 'Applied'), applied_date ('2024-01-30 19:23:08', '2024-01-30 19:23:08', '2024-01-30 19:23:08')",
        "ambiguous_queries": [
            "SELECT Diets.diet_type_value from Nutritionists_Diets join Diets on Nutritionists_Diets.diet_type_id = Diets.diet_type_id join Nutritionists on Nutritionists_Diets.nutritionist_id = Nutritionists.nutritionist_id GROUP BY Nutritionists_Diets.diet_type_id HAVING COUNT(DISTINCT Nutritionists_Diets.nutritionist_id) = (SELECT COUNT(*) FROM Nutritionists)",
            "select nutritionists.email , diets.diet_type_value from Nutritionists_Diets join Diets on Nutritionists_Diets.diet_type_id = Diets.diet_type_id join Nutritionists on Nutritionists_Diets.nutritionist_id = Nutritionists.nutritionist_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every nutritionist\": [\"for each nutritionist individually\", \"common to all nutritionists\"]}"
        },
        "clarification_context": "\"every nutritionist\" refers to \"common to all nutritionists\"",
        "clear_ambiguity": "{\"every nutritionist\": \"common to all nutritionists\"}",
        "gold_query": "SELECT Diets.diet_type_value from Nutritionists_Diets join Diets on Nutritionists_Diets.diet_type_id = Diets.diet_type_id join Nutritionists on Nutritionists_Diets.nutritionist_id = Nutritionists.nutritionist_id GROUP BY Nutritionists_Diets.diet_type_id HAVING COUNT(DISTINCT Nutritionists_Diets.nutritionist_id) = (SELECT COUNT(*) FROM Nutritionists)"
    },
    {
        "index": 1363,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_visual_effects_artists_programs/scope_visual_effects_artists_programs.sqlite",
        "question": "What program does each visual effects artist have?",
        "schema_without_content": "Visual_Effects_Artists : artist_id, name, email | Programs : program_id, name, version | Movies : movie_id, title, release_date | Film_Movies : film_id, movie_id | Visual_Effects_Artists_Programs : visual_effects_artist_id, program_id",
        "schema_with_content": "Visual_Effects_Artists : artist_id (4, 1, 3), name ('John Doe', 'Bob Brown', 'Charlie Green'), email ('charliegreen@example.com', 'bobbrown@example.com', 'johndoe@example.com') | Programs : program_id (4, 5, 1), name ('After_Effects', 'Nuke', 'Premiere Pro'), version (2021, 2021, 2021) | Movies : movie_id (3, 1, 2), title ('The Matrix', 'Inception', 'Gravity'), release_date ('1999-03-31', '2010-07-16', '2013-10-04') | Film_Movies : film_id (4, 5, 2), movie_id (2, 5, 4) | Visual_Effects_Artists_Programs : visual_effects_artist_id (3, 3, 5), program_id (1, 2, 4)",
        "ambiguous_queries": [
            "SELECT Programs.name from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id GROUP BY Visual_Effects_Artists_Programs.program_id HAVING COUNT(DISTINCT Visual_Effects_Artists_Programs.visual_effects_artist_id) = (SELECT COUNT(*) FROM Visual_Effects_Artists)",
            "select visual_effects_artists.name , programs.name from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each visual effects artist\": [\"for each visual effects artist individually\", \"common to all visual effects artists\"]}"
        },
        "clarification_context": "\"each visual effects artist\" refers to \"common to all visual effects artists\"",
        "clear_ambiguity": "{\"each visual effects artist\": \"common to all visual effects artists\"}",
        "gold_query": "SELECT Programs.name from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id GROUP BY Visual_Effects_Artists_Programs.program_id HAVING COUNT(DISTINCT Visual_Effects_Artists_Programs.visual_effects_artist_id) = (SELECT COUNT(*) FROM Visual_Effects_Artists)"
    },
    {
        "index": 1364,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_business_reporters_industries/scope_business_reporters_industries.sqlite",
        "question": "Give me the name of the industry each business reporter is in.",
        "schema_without_content": "Industries : industryID, name | Business_Reporters : reporterID, fullName | Articles : articleID, title, content | Business_Reporters_Articles : businessReporterID, articleID | Reporters_Industries : businessReporterID, industryID | Business_Reporters_Industries : businessReporterID, industryID",
        "schema_with_content": "Industries : industryID (3, 1, 5), name ('Education', 'Retail', 'Finance') | Business_Reporters : reporterID (3, 1, 2), fullName ('David Williams', 'John Doe', 'Jane Smith') | Articles : articleID (4, 2, 3), title ('Online Shopping Trends in Retail', 'Tech Innovations in Healthcare', 'The Impact of AI on Different Industries'), content ('A look at the latest technological advancements in healthcare.', 'An analysis of the growing trend towards online shopping.', 'Understanding how artificial intelligence is affecting various industries.') | Business_Reporters_Articles : businessReporterID (5, 3, 2), articleID (1, 3, 4) | Reporters_Industries : businessReporterID (2, 3, 5), industryID (3, 5, 1) | Business_Reporters_Industries : businessReporterID (4, 3, 3), industryID (1, 2, 3)",
        "ambiguous_queries": [
            "SELECT Industries.name from Business_Reporters_Industries join Industries on Business_Reporters_Industries.industryID = Industries.industryID join Business_Reporters on Business_Reporters_Industries.businessReporterID = Business_Reporters.reporterID GROUP BY Business_Reporters_Industries.industryID HAVING COUNT(DISTINCT Business_Reporters_Industries.businessReporterID) = (SELECT COUNT(*) FROM Business_Reporters)",
            "select business_reporters.fullname , industries.name from Business_Reporters_Industries join Industries on Business_Reporters_Industries.industryID = Industries.industryID join Business_Reporters on Business_Reporters_Industries.businessReporterID = Business_Reporters.reporterID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each business reporter\": [\"for each business reporter individually\", \"common to all business reporters\"]}"
        },
        "clarification_context": "\"each business reporter\" refers to \"common to all business reporters\"",
        "clear_ambiguity": "{\"each business reporter\": \"common to all business reporters\"}",
        "gold_query": "SELECT Industries.name from Business_Reporters_Industries join Industries on Business_Reporters_Industries.industryID = Industries.industryID join Business_Reporters on Business_Reporters_Industries.businessReporterID = Business_Reporters.reporterID GROUP BY Business_Reporters_Industries.industryID HAVING COUNT(DISTINCT Business_Reporters_Industries.businessReporterID) = (SELECT COUNT(*) FROM Business_Reporters)"
    },
    {
        "index": 1365,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_healthcare_centers_programs/scope_healthcare_centers_programs.sqlite",
        "question": "Show me the type of program for each health care centre.",
        "schema_without_content": "Healthcare_Centers : CenterID, CenterName, Address | Programs : ProgramID, ProgramType | Patients : PatientID, FirstName, LastName, Age, CenterID | Doctors : DoctorID, Name, Specialization, CenterID | Appointments : AppointmentID, PatientID, DoctorID, Date | MedicalHistory : HistoryID, PatientID, Diagnosis, Treatment | Healthcare_Centers_Programs : CenterID, ProgramID, StartDate, EndDate",
        "schema_with_content": "Healthcare_Centers : CenterID (4, 3, 1), CenterName ('Center2', 'Center3', 'Center4'), Address ('Address2', 'Address1', 'Address4') | Programs : ProgramID (2, 3, 5), ProgramType ('Emergency', 'Wellness_Initiatives', 'Hospitality') | Patients : PatientID (3, 2, 4), FirstName ('Emma', 'John', 'David'), LastName ('Brown', 'Smith', 'Jackson'), Age (30, 28, 26), CenterID (4, 2, 1) | Doctors : DoctorID (3, 4, 2), Name ('Dr. Brown', 'Dr. Johnson', 'Dr. Williams'), Specialization ('Orthopedics', 'Neurology', 'Cardiology'), CenterID (3, 2, 5) | Appointments : AppointmentID (2, 3, 4), PatientID (1, 4, 5), DoctorID (3, 4, 1), Date ('2022-07-18 14:00:00', '2022-07-20 09:00:00', '2022-07-24 16:00:00') | MedicalHistory : HistoryID (3, 1, 5), PatientID (2, 5, 3), Diagnosis ('Broken Arm', 'High Blood Pressure', 'Diabetes'), Treatment ('Cast', 'Insulin Injections', 'Iron Supplements') | Healthcare_Centers_Programs : CenterID (4, 5, 1), ProgramID (2, 1, 2), StartDate ('2022-09-01', '2022-06-01', '2022-06-01'), EndDate ('2022-11-30', '2022-08-31', '2022-11-30')",
        "ambiguous_queries": [
            "SELECT Programs.ProgramType from Healthcare_Centers_Programs join Programs on Healthcare_Centers_Programs.ProgramID = Programs.ProgramID join Healthcare_Centers on Healthcare_Centers_Programs.CenterID = Healthcare_Centers.CenterID GROUP BY Healthcare_Centers_Programs.ProgramID HAVING COUNT(DISTINCT Healthcare_Centers_Programs.CenterID) = (SELECT COUNT(*) FROM Healthcare_Centers)",
            "select healthcare_centers.centername , programs.programtype from Healthcare_Centers_Programs join Programs on Healthcare_Centers_Programs.ProgramID = Programs.ProgramID join Healthcare_Centers on Healthcare_Centers_Programs.CenterID = Healthcare_Centers.CenterID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each health care centre\": [\"for each health care centre individually\", \"common to all health care centres\"]}"
        },
        "clarification_context": "\"each health care centre\" refers to \"common to all health care centres\"",
        "clear_ambiguity": "{\"each health care centre\": \"common to all health care centres\"}",
        "gold_query": "SELECT Programs.ProgramType from Healthcare_Centers_Programs join Programs on Healthcare_Centers_Programs.ProgramID = Programs.ProgramID join Healthcare_Centers on Healthcare_Centers_Programs.CenterID = Healthcare_Centers.CenterID GROUP BY Healthcare_Centers_Programs.ProgramID HAVING COUNT(DISTINCT Healthcare_Centers_Programs.CenterID) = (SELECT COUNT(*) FROM Healthcare_Centers)"
    },
    {
        "index": 1366,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_farm_stays_activities/scope_farm_stays_activities.sqlite",
        "question": "What is the description of each activity for each farm stay?",
        "schema_without_content": "Farm_Stays : id, name, location | Activities : activity_id, description | Farm_Stays_Activities : farm_stay_id, activity_id",
        "schema_with_content": "Farm_Stays : id (1, 4, 3), name ('Green Valley', 'Oak Tree Lodge', 'Country Retreat'), location ('Urban Suburbia', 'Lake Side', 'Rural Area') | Activities : activity_id (3, 5, 4), description ('Harvesting fruits', 'Feeding animals', 'Egg collection') | Farm_Stays_Activities : farm_stay_id (3, 1, 5), activity_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Activities.description from Farm_Stays_Activities join Activities on Farm_Stays_Activities.activity_id = Activities.activity_id join Farm_Stays on Farm_Stays_Activities.farm_stay_id = Farm_Stays.id GROUP BY Farm_Stays_Activities.activity_id HAVING COUNT(DISTINCT Farm_Stays_Activities.farm_stay_id) = (SELECT COUNT(*) FROM Farm_Stays)",
            "select farm_stays.name , activities.description from Farm_Stays_Activities join Activities on Farm_Stays_Activities.activity_id = Activities.activity_id join Farm_Stays on Farm_Stays_Activities.farm_stay_id = Farm_Stays.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each farm stay\": [\"for each farm stay individually\", \"common to all farm stays\"]}"
        },
        "clarification_context": "\"each farm stay\" refers to \"for each farm stay individually\"",
        "clear_ambiguity": "{\"each farm stay\": \"for each farm stay individually\"}",
        "gold_query": "select farm_stays.name , activities.description from Farm_Stays_Activities join Activities on Farm_Stays_Activities.activity_id = Activities.activity_id join Farm_Stays on Farm_Stays_Activities.farm_stay_id = Farm_Stays.id"
    },
    {
        "index": 1367,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_content/scope_streaming_service_content.sqlite",
        "question": "Give me the type, description and price of the content that we have for every streaming service",
        "schema_without_content": "Streaming_Service : id, name, subscription_fee | Content : content_id, type, description, price | Streaming_Service_Content : streaming_service_id, content_id",
        "schema_with_content": "Streaming_Service : id (5, 3, 2), name ('Amazon Prime Video', 'Netflix', 'Disney+'), subscription_fee (8.99, 6.99, 5.99) | Content : content_id (2, 6, 4), type ('Netflix Originals', 'Movie', 'Animation'), description ('An educational documentary on space exploration.', 'A thrilling action movie.', 'A fun-filled show for kids.'), price (1.99, 4.99, 2.99) | Streaming_Service_Content : streaming_service_id (5, 2, 5), content_id (5, 6, 2)",
        "ambiguous_queries": [
            "SELECT Content.type, Content.description, Content.price from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Content.content_id HAVING COUNT(DISTINCT Streaming_Service_Content.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)",
            "select streaming_service.name , content.type , content.description , content.price from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"every streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"every streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT Content.type, Content.description, Content.price from Streaming_Service_Content join Content on Streaming_Service_Content.content_id = Content.content_id join Streaming_Service on Streaming_Service_Content.streaming_service_id = Streaming_Service.id GROUP BY Streaming_Service_Content.content_id HAVING COUNT(DISTINCT Streaming_Service_Content.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
    },
    {
        "index": 1368,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
        "question": "Show me the type of support each streaming service provides.",
        "schema_without_content": "streaming_service : id, name, price | customer_support : id, support_type, description | streaming_service_customer_support : id, streaming_service_id, customer_support_id",
        "schema_with_content": "streaming_service : id (5, 3, 1), name ('Netflix', 'HBO Max', 'Disney+'), price (8.99, 9.99, 14.99) | customer_support : id (4, 5, 1), support_type ('Phone Support', 'Forum Support', 'FAQs'), description ('Ask questions and get help from community members', 'Find answers to common questions', 'Call us at our toll-free number') | streaming_service_customer_support : id (6, 2, 4), streaming_service_id (5, 1, 2), customer_support_id (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT customer_support.support_type from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM streaming_service)",
            "select streaming_service.name , customer_support.support_type from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each streaming service\": [\"for each streaming service individually\", \"common to all streaming services\"]}"
        },
        "clarification_context": "\"each streaming service\" refers to \"common to all streaming services\"",
        "clear_ambiguity": "{\"each streaming service\": \"common to all streaming services\"}",
        "gold_query": "SELECT customer_support.support_type from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM streaming_service)"
    },
    {
        "index": 1369,
        "db_id": "Banking",
        "ambig_type": "scope",
        "db_file": "scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
        "question": "List the transaction IDs for every bank statement.",
        "schema_without_content": "Customers : CustomerID, FirstName, LastName | Accounts : AccountNumber, CustomerID, Balance | Transactions : TransactionID, AccountNumber, TransactionType, Amount, Date | Bank_Statements : StatementID, AccountNumber, StartDate, EndDate, TotalAmount | Bank_Statements_Transactions : StatementTransactionID, StatementID, TransactionID",
        "schema_with_content": "Customers : CustomerID (5, 1, 2), FirstName ('John', 'David', 'Emily'), LastName ('Brown', 'Smith', 'White') | Accounts : AccountNumber (4, 5, 3), CustomerID (2, 4, 5), Balance (900.0, 600.0, 700.0) | Transactions : TransactionID (3, 1, 10), AccountNumber (1, 5, 3), TransactionType ('Transfer', 'Transfer', 'Subscription_Payments'), Amount (190.0, 220.0, 120.0), Date ('2024-01-30 18:53:44', '2024-01-30 18:53:44', '2024-01-30 18:53:44') | Bank_Statements : StatementID (2, 3, 4), AccountNumber (1, 5, 2), StartDate ('2021-02-01', '2021-05-01', '2021-04-01'), EndDate ('2021-01-31', '2021-05-31', '2021-02-28'), TotalAmount (290.0, 270.0, 260.0) | Bank_Statements_Transactions : StatementTransactionID (9, 8, 5), StatementID (3, 1, 4), TransactionID (8, 1, 1)",
        "ambiguous_queries": [
            "SELECT Transactions.TransactionID from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)",
            "select bank_statements.accountnumber , transactions.transactionid from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every bank statement\": [\"for each bank statement individually\", \"common to all bank statements\"]}"
        },
        "clarification_context": "\"every bank statement\" refers to \"common to all bank statements\"",
        "clear_ambiguity": "{\"every bank statement\": \"common to all bank statements\"}",
        "gold_query": "SELECT Transactions.TransactionID from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
    },
    {
        "index": 1370,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_authorities_programs/scope_authorities_programs.sqlite",
        "question": "which program descriptions are associated with each authority?",
        "schema_without_content": "Authorities : authority_id, name, contact_info | Programs : program_id, program_name, description | Authorities_Programs : id, authority_id, program_id",
        "schema_with_content": "Authorities : authority_id (1, 4, 5), name ('Authority A', 'Authority D', 'Authority E'), contact_info ('contact@authorityd.com', 'contact@authorityc.com', 'contact@authoritye.com') | Programs : program_id (5, 2, 1), program_name ('Emergency_Housing', 'Public_Housing', 'Affordable_Housing'), description ('Temporary housing solutions for those facing homelessness.', 'Financial assistance for rent payments.', 'Grants and loans for first-time home buyers.') | Authorities_Programs : id (4, 6, 2), authority_id (4, 2, 3), program_id (5, 1, 1)",
        "ambiguous_queries": [
            "SELECT Programs.description from Authorities_Programs join Programs on Authorities_Programs.program_id = Programs.program_id join Authorities on Authorities_Programs.authority_id = Authorities.authority_id GROUP BY Authorities_Programs.program_id HAVING COUNT(DISTINCT Authorities_Programs.authority_id) = (SELECT COUNT(*) FROM Authorities)",
            "select authorities.name , programs.description from Authorities_Programs join Programs on Authorities_Programs.program_id = Programs.program_id join Authorities on Authorities_Programs.authority_id = Authorities.authority_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each authority\": [\"for each authority individually\", \"common to all authorities\"]}"
        },
        "clarification_context": "\"each authority\" refers to \"common to all authorities\"",
        "clear_ambiguity": "{\"each authority\": \"common to all authorities\"}",
        "gold_query": "SELECT Programs.description from Authorities_Programs join Programs on Authorities_Programs.program_id = Programs.program_id join Authorities on Authorities_Programs.authority_id = Authorities.authority_id GROUP BY Authorities_Programs.program_id HAVING COUNT(DISTINCT Authorities_Programs.authority_id) = (SELECT COUNT(*) FROM Authorities)"
    },
    {
        "index": 1371,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_gate_facility/scope_gate_facility.sqlite",
        "question": "What name and description of facility are associated with each gate?",
        "schema_without_content": "Gate : gate_id, airport_code, terminal_number | Facility : facility_id, name, description | Gate_Facility : gate_facility_id, gate_id, facility_id | Flight : flight_id, airline_name, departure_time, arrival_time | Aircraft : aircraft_id, model, capacity",
        "schema_with_content": "Gate : gate_id (3, 2, 4), airport_code ('ATL', 'JFK', 'ORD'), terminal_number (3, 7, 2) | Facility : facility_id (1, 2, 3), name ('Currency Exchange', 'Restaurant', 'Shopping Center'), description ('A place where passengers can eat', 'A place where passengers can shop', 'A place where passengers collect their luggage') | Gate_Facility : gate_facility_id (7, 6, 1), gate_id (3, 5, 1), facility_id (5, 3, 1) | Flight : flight_id (1, 4, 3), airline_name ('Delta Airlines', 'Spirit Airlines', 'Southwest Airlines'), departure_time ('08-05-2022 1:00 PM', '08-05-2022 10:00 AM', '08-05-2022 9:00 AM'), arrival_time ('08-05-2022 1:00 PM', '08-05-2022 3:00 PM', '08-05-2022 11:00 PM') | Aircraft : aircraft_id (1, 5, 2), model ('Airbus A380', 'Boeing 737', 'Airbus A321'), capacity (450, 180, 110)",
        "ambiguous_queries": [
            "SELECT Facility.name, Facility.description from Gate_Facility join Facility on Gate_Facility.facility_id = Facility.facility_id join Gate on Gate_Facility.gate_id = Gate.gate_id GROUP BY Gate_Facility.facility_id HAVING COUNT(DISTINCT Gate_Facility.gate_id) = (SELECT COUNT(*) FROM Gate)",
            "select gate.airport_code , facility.name , facility.description from Gate_Facility join Facility on Gate_Facility.facility_id = Facility.facility_id join Gate on Gate_Facility.gate_id = Gate.gate_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each gate\": [\"for each gate individually\", \"common to all gates\"]}"
        },
        "clarification_context": "\"each gate\" refers to \"common to all gates\"",
        "clear_ambiguity": "{\"each gate\": \"common to all gates\"}",
        "gold_query": "SELECT Facility.name, Facility.description from Gate_Facility join Facility on Gate_Facility.facility_id = Facility.facility_id join Gate on Gate_Facility.gate_id = Gate.gate_id GROUP BY Gate_Facility.facility_id HAVING COUNT(DISTINCT Gate_Facility.gate_id) = (SELECT COUNT(*) FROM Gate)"
    },
    {
        "index": 1372,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_property_management_companies_services/scope_property_management_companies_services.sqlite",
        "question": "Tell me services each property management company provides.",
        "schema_without_content": "Property_Management_Companies : id, name, address | Services : id, service_name | Properties : id, property_address, price | Clients : id, client_name, contact | Transactions : transaction_id, property_id, client_id, management_company_id, service_id | Property_Management_Companies_Services : company_id, service_id",
        "schema_with_content": "Property_Management_Companies : id (1, 3, 2), name ('Company3', 'Company2', 'Company5'), address ('Address5', 'Address4', 'Address3') | Services : id (3, 4, 2), service_name ('Rent Collection', 'Eviction Service', 'Lease Agreement') | Properties : id (3, 2, 1), property_address ('Property5 Address', 'Property3 Address', 'Property4 Address'), price (900000.0, 600000.0, 700000.0) | Clients : id (5, 2, 3), client_name ('Client4 Name', 'Client2 Name', 'Client3 Name'), contact ('Contact3', 'Contact1', 'Contact2') | Transactions : transaction_id (1, 4, 2), property_id (5, 1, 3), client_id (2, 1, 3), management_company_id (4, 5, 3), service_id (4, 3, 2) | Property_Management_Companies_Services : company_id (2, 1, 5), service_id (1, 2, 1)",
        "ambiguous_queries": [
            "SELECT Services.service_name from Property_Management_Companies_Services join Services on Property_Management_Companies_Services.service_id = Services.id join Property_Management_Companies on Property_Management_Companies_Services.company_id = Property_Management_Companies.id GROUP BY Property_Management_Companies_Services.service_id HAVING COUNT(DISTINCT Property_Management_Companies_Services.company_id) = (SELECT COUNT(*) FROM Property_Management_Companies)",
            "select property_management_companies.name , services.service_name from Property_Management_Companies_Services join Services on Property_Management_Companies_Services.service_id = Services.id join Property_Management_Companies on Property_Management_Companies_Services.company_id = Property_Management_Companies.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each property management company\": [\"for each property management company individually\", \"common to all property management companies\"]}"
        },
        "clarification_context": "\"each property management company\" refers to \"for each property management company individually\"",
        "clear_ambiguity": "{\"each property management company\": \"for each property management company individually\"}",
        "gold_query": "select property_management_companies.name , services.service_name from Property_Management_Companies_Services join Services on Property_Management_Companies_Services.service_id = Services.id join Property_Management_Companies on Property_Management_Companies_Services.company_id = Property_Management_Companies.id"
    },
    {
        "index": 1373,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_apartment_buildings_units/scope_apartment_buildings_units.sqlite",
        "question": "What unit descriptions do we have for every apartment building?",
        "schema_without_content": "Apartment_Buildings : id, name, address, city, state, zipcode, num_units | Units : id, unit_type, description | Apartment_Buildings_Units : building_id, unit_id | Tenants : tenant_id, firstname, lastname, email, phone | RentPayments : payment_id, amount, paid_date, due_date, tenant_id",
        "schema_with_content": "Apartment_Buildings : id (2, 4, 3), name ('Building A', 'Building B', 'Building E'), address ('20 Elm St', '50 Maple Ave', '40 Pine St'), city ('Chicago', 'Dallas', 'New York'), state ('IL', 'NY', 'CA'), zipcode (75201, 10001, 90001), num_units (30, 40, 70) | Units : id (2, 3, 4), unit_type ('One-Bedroom', 'Two-Bedroom', 'Three-Bedroom'), description ('Spacious studio apartment with modern amenities', 'Comfortable one-bedroom apartment with a fully equipped kitchen', 'Beautiful two-bedroom apartment perfect for families') | Apartment_Buildings_Units : building_id (3, 2, 4), unit_id (1, 1, 1) | Tenants : tenant_id (4, 2, 5), firstname ('Bob', 'Alice', 'John'), lastname ('Martin', 'Smith', 'Doe'), email ('johnsmith@email.com', 'emilymartin@email.com', 'janedoemail@email.com'), phone ('555-321-9876', '555-987-6543', '555-135-7890') | RentPayments : payment_id (2, 4, 1), amount (1200, 1200, 1200), paid_date ('2021-10-01', '2021-10-01', '2021-10-01'), due_date ('2021-10-01', '2021-10-01', '2021-10-01'), tenant_id (4, 5, 3)",
        "ambiguous_queries": [
            "SELECT Units.description from Apartment_Buildings_Units join Units on Apartment_Buildings_Units.unit_id = Units.id join Apartment_Buildings on Apartment_Buildings_Units.building_id = Apartment_Buildings.id GROUP BY Apartment_Buildings_Units.unit_id HAVING COUNT(DISTINCT Apartment_Buildings_Units.building_id) = (SELECT COUNT(*) FROM Apartment_Buildings)",
            "select apartment_buildings.name , units.description from Apartment_Buildings_Units join Units on Apartment_Buildings_Units.unit_id = Units.id join Apartment_Buildings on Apartment_Buildings_Units.building_id = Apartment_Buildings.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every apartment building\": [\"for each apartment building individually\", \"common to all apartment buildings\"]}"
        },
        "clarification_context": "\"every apartment building\" refers to \"for each apartment building individually\"",
        "clear_ambiguity": "{\"every apartment building\": \"for each apartment building individually\"}",
        "gold_query": "select apartment_buildings.name , units.description from Apartment_Buildings_Units join Units on Apartment_Buildings_Units.unit_id = Units.id join Apartment_Buildings on Apartment_Buildings_Units.building_id = Apartment_Buildings.id"
    },
    {
        "index": 1374,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_farms_crops/scope_farms_crops.sqlite",
        "question": "Show me the names and yields of crops each farm grows.",
        "schema_without_content": "Farms : FarmID, Name, Location | Crops : CropID, CropName, YieldPerAcre | SoilTypes : TypeID, TypeName | WeatherConditions : ConditionID, Description | FarmsSoil : FarmID, SoilTypeID | CropsWeather : CropID, ConditionID | FarmsCrops : FarmID, CropID, Quantity, PlantingDate, HarvestDate",
        "schema_with_content": "Farms : FarmID (5, 2, 3), Name ('Farm C', 'Farm A', 'Farm D'), Location ('Location C', 'Location B', 'Location A') | Crops : CropID (5, 4, 3), CropName ('Oats', 'Rice', 'Corn'), YieldPerAcre (6000.0, 3500.0, 2700.0) | SoilTypes : TypeID (1, 3, 2), TypeName ('Clay Loam', 'Gravelly Sandy Loam', 'Loamy Sand') | WeatherConditions : ConditionID (4, 3, 5), Description ('Sunny', 'Stormy', 'Rainy') | FarmsSoil : FarmID (1, 2, 3), SoilTypeID (4, 1, 2) | CropsWeather : CropID (2, 1, 3), ConditionID (3, 2, 1) | FarmsCrops : FarmID (5, 1, 2), CropID (1, 1, 1), Quantity (0, 400, 500), PlantingDate ('2022-04-01', '2022-04-01', '2022-04-01'), HarvestDate ('2022-09-01', '2022-09-01', '2022-09-01')",
        "ambiguous_queries": [
            "SELECT Crops.CropName, Crops.YieldPerAcre from FarmsCrops join Crops on FarmsCrops.CropID = Crops.CropID join Farms on FarmsCrops.FarmID = Farms.FarmID GROUP BY FarmsCrops.CropID HAVING COUNT(DISTINCT FarmsCrops.FarmID) = (SELECT COUNT(*) FROM Farms)",
            "select farms.name , crops.cropname , crops.yieldperacre from FarmsCrops join Crops on FarmsCrops.CropID = Crops.CropID join Farms on FarmsCrops.FarmID = Farms.FarmID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each farm\": [\"for each farm individually\", \"common to all farms\"]}"
        },
        "clarification_context": "\"each farm\" refers to \"for each farm individually\"",
        "clear_ambiguity": "{\"each farm\": \"for each farm individually\"}",
        "gold_query": "select farms.name , crops.cropname , crops.yieldperacre from FarmsCrops join Crops on FarmsCrops.CropID = Crops.CropID join Farms on FarmsCrops.FarmID = Farms.FarmID"
    },
    {
        "index": 1375,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_quality_assurance_testers_test_cases/scope_quality_assurance_testers_test_cases.sqlite",
        "question": "Describe the test cases each quality assurance tester uses.",
        "schema_without_content": "Quality_Assurance_Testers : testerID, fullName | Test_Cases : testCaseID, caseType, description | Qualified_Tests : testerID, testCaseID, qualificationDate",
        "schema_with_content": "Quality_Assurance_Testers : testerID (3, 5, 1), fullName ('John Doe', 'David White', 'Mike Smith') | Test_Cases : testCaseID (3, 1, 2), caseType ('Regression_Test', 'Integration_Test', 'Performance_Test'), description ('This is a regression test case.', 'This is a functional test case.', 'This is an integration test case.') | Qualified_Tests : testerID (3, 2, 5), testCaseID (2, 1, 1), qualificationDate ()",
        "ambiguous_queries": [
            "SELECT Test_Cases.description from Qualified_Tests join Test_Cases on Qualified_Tests.testCaseID = Test_Cases.testCaseID join Quality_Assurance_Testers on Qualified_Tests.testerID = Quality_Assurance_Testers.testerID GROUP BY Qualified_Tests.testCaseID HAVING COUNT(DISTINCT Qualified_Tests.testerID) = (SELECT COUNT(*) FROM Quality_Assurance_Testers)",
            "select quality_assurance_testers.fullname , test_cases.description from Qualified_Tests join Test_Cases on Qualified_Tests.testCaseID = Test_Cases.testCaseID join Quality_Assurance_Testers on Qualified_Tests.testerID = Quality_Assurance_Testers.testerID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each quality assurance tester\": [\"for each quality assurance tester individually\", \"common to all quality assurance testers\"]}"
        },
        "clarification_context": "\"each quality assurance tester\" refers to \"common to all quality assurance testers\"",
        "clear_ambiguity": "{\"each quality assurance tester\": \"common to all quality assurance testers\"}",
        "gold_query": "SELECT Test_Cases.description from Qualified_Tests join Test_Cases on Qualified_Tests.testCaseID = Test_Cases.testCaseID join Quality_Assurance_Testers on Qualified_Tests.testerID = Quality_Assurance_Testers.testerID GROUP BY Qualified_Tests.testCaseID HAVING COUNT(DISTINCT Qualified_Tests.testerID) = (SELECT COUNT(*) FROM Quality_Assurance_Testers)"
    },
    {
        "index": 1376,
        "db_id": "Streaming Service",
        "ambig_type": "scope",
        "db_file": "scope/Streaming Service/scope_streamings_captions_and_subtitles/scope_streamings_captions_and_subtitles.sqlite",
        "question": "Show me caption and subtitle languages each stream has.",
        "schema_without_content": "Streamings : streaming_id, title, duration | Captions_and_subtitles : caption_id, type, language | Streamings_captions_and_subtitles : streamings_id, captions_and_subtitles_id | Users : user_id, username, email | Payments : payment_id, amount, date | User_Payments : user_id, payment_id",
        "schema_with_content": "Streamings : streaming_id (4, 1, 5), title ('TV Show1', 'Short Film1', 'Movie1'), duration (60.0, 400.0, 300.0) | Captions_and_subtitles : caption_id (1, 4, 3), type ('Manual_subtitles', 'Manual_subtitles', 'No_subtitles'), language ('German', 'Italian', 'Spanish') | Streamings_captions_and_subtitles : streamings_id (1, 1, 2), captions_and_subtitles_id (1, 1, 3) | Users : user_id (2, 1, 3), username ('User4', 'User5', 'User1'), email ('user1@example.com', 'user2@example.com', 'user4@example.com') | Payments : payment_id (2, 5, 1), amount (19.99, 49.99, 29.99), date ('2024-01-30 18:45:30', '2024-01-30 18:45:30', '2024-01-30 18:45:30') | User_Payments : user_id (3, 2, 2), payment_id (3, 5, 4)",
        "ambiguous_queries": [
            "SELECT Captions_and_subtitles.language from Streamings_captions_and_subtitles join Captions_and_subtitles on Streamings_captions_and_subtitles.captions_and_subtitles_id = Captions_and_subtitles.caption_id join Streamings on Streamings_captions_and_subtitles.streamings_id = Streamings.streaming_id GROUP BY Streamings_captions_and_subtitles.captions_and_subtitles_id HAVING COUNT(DISTINCT Streamings_captions_and_subtitles.streamings_id) = (SELECT COUNT(*) FROM Streamings)",
            "select streamings.title , captions_and_subtitles.language from Streamings_captions_and_subtitles join Captions_and_subtitles on Streamings_captions_and_subtitles.captions_and_subtitles_id = Captions_and_subtitles.caption_id join Streamings on Streamings_captions_and_subtitles.streamings_id = Streamings.streaming_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each stream\": [\"for each stream individually\", \"common to all streams\"]}"
        },
        "clarification_context": "\"each stream\" refers to \"for each stream individually\"",
        "clear_ambiguity": "{\"each stream\": \"for each stream individually\"}",
        "gold_query": "select streamings.title , captions_and_subtitles.language from Streamings_captions_and_subtitles join Captions_and_subtitles on Streamings_captions_and_subtitles.captions_and_subtitles_id = Captions_and_subtitles.caption_id join Streamings on Streamings_captions_and_subtitles.streamings_id = Streamings.streaming_id"
    },
    {
        "index": 1377,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_meteorological_offices_data_sources/scope_meteorological_offices_data_sources.sqlite",
        "question": "Give me the data sources (and their descriptions) we have for every meteorological office",
        "schema_without_content": "Meteorological_Offices : id, name, location | Data_Sources : id, source_type, description | Meteorological_Offices_Data_Sources : meteo_office_id, data_source_id | Runways : id, length, width | Terminals : id, terminal_name, capacity | Flights : flight_number, departure_time, arrival_time, destination_airport, airline_company",
        "schema_with_content": "Meteorological_Offices : id (3, 5, 4), name ('Office C', 'Office D', 'Office B'), location ('New York', 'Chicago', 'Dallas') | Data_Sources : id (1, 2, 5), source_type ('Satellite', 'Automated_Weather_Station', 'Radar_System'), description ('Collects real-time weather data.', 'Records ambient temperature.', 'Monitors global atmospheric conditions.') | Meteorological_Offices_Data_Sources : meteo_office_id (5, 2, 5), data_source_id (1, 1, 1) | Runways : id (), length (), width () | Terminals : id (4, 2, 1), terminal_name ('Terminal 3', 'Terminal 5', 'Terminal 2'), capacity (3000, 4000, 4500) | Flights : flight_number (2, 3, 4), departure_time ('2022-12-01 14:00:00', '2022-12-01 12:00:00', '2022-12-01 18:00:00'), arrival_time ('2022-12-01 16:00:00', '2022-12-01 22:00:00', '2022-12-01 18:00:00'), destination_airport ('ATL', 'ORD', 'LAX'), airline_company ('Delta Airlines', 'Southwest Airlines', 'United Airlines')",
        "ambiguous_queries": [
            "SELECT Data_Sources.source_type, Data_Sources.description from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id GROUP BY Meteorological_Offices_Data_Sources.data_source_id HAVING COUNT(DISTINCT Meteorological_Offices_Data_Sources.meteo_office_id) = (SELECT COUNT(*) FROM Meteorological_Offices)",
            "select meteorological_offices.name , data_sources.source_type , data_sources.description from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every meteorological office\": [\"for each meteorological office individually\", \"common to all meteorological offices\"]}"
        },
        "clarification_context": "\"every meteorological office\" refers to \"common to all meteorological offices\"",
        "clear_ambiguity": "{\"every meteorological office\": \"common to all meteorological offices\"}",
        "gold_query": "SELECT Data_Sources.source_type, Data_Sources.description from Meteorological_Offices_Data_Sources join Data_Sources on Meteorological_Offices_Data_Sources.data_source_id = Data_Sources.id join Meteorological_Offices on Meteorological_Offices_Data_Sources.meteo_office_id = Meteorological_Offices.id GROUP BY Meteorological_Offices_Data_Sources.data_source_id HAVING COUNT(DISTINCT Meteorological_Offices_Data_Sources.meteo_office_id) = (SELECT COUNT(*) FROM Meteorological_Offices)"
    },
    {
        "index": 1378,
        "db_id": "Agriculture",
        "ambig_type": "scope",
        "db_file": "scope/Agriculture/scope_insurances_options/scope_insurances_options.sqlite",
        "question": "What options do we have for every insurance",
        "schema_without_content": "Insurances : id, policy_holder, premium | Options : id, option_name | Insurance_Options : insurance_id, option_id",
        "schema_with_content": "Insurances : id (5, 4, 3), policy_holder ('Mike Johnson', 'John Doe', 'Jane Smith'), premium (5000.0, 4000.0, 1000.0) | Options : id (1, 2, 4), option_name ('Crop_Insurance', 'Worker_sCompensation', 'Revenue_Insurance') | Insurance_Options : insurance_id (5, 3, 2), option_id (4, 1, 1)",
        "ambiguous_queries": [
            "SELECT Options.option_name from Insurance_Options join Options on Insurance_Options.option_id = Options.id join Insurances on Insurance_Options.insurance_id = Insurances.id GROUP BY Insurance_Options.option_id HAVING COUNT(DISTINCT Insurance_Options.insurance_id) = (SELECT COUNT(*) FROM Insurances)",
            "select insurances.policy_holder , options.option_name from Insurance_Options join Options on Insurance_Options.option_id = Options.id join Insurances on Insurance_Options.insurance_id = Insurances.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every insurance\": [\"for each insurance individually\", \"common to all insurances\"]}"
        },
        "clarification_context": "\"every insurance\" refers to \"common to all insurances\"",
        "clear_ambiguity": "{\"every insurance\": \"common to all insurances\"}",
        "gold_query": "SELECT Options.option_name from Insurance_Options join Options on Insurance_Options.option_id = Options.id join Insurances on Insurance_Options.insurance_id = Insurances.id GROUP BY Insurance_Options.option_id HAVING COUNT(DISTINCT Insurance_Options.insurance_id) = (SELECT COUNT(*) FROM Insurances)"
    },
    {
        "index": 1379,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_directors_additional_roles/scope_directors_additional_roles.sqlite",
        "question": "Show me the roles and corresponding fees each director hires.",
        "schema_without_content": "Directors : DirectorID, Name, BirthDate | Films : FilmID, Title, ReleaseYear | DirectorFilms : DirectorFilmID, DirectorID, FilmID | Additional_Roles : AdditionalRoleID, Role, Fee | Directors_Roles : DirectorRoleID, DirectorID, AdditionalRoleID",
        "schema_with_content": "Directors : DirectorID (4, 2, 1), Name ('Martin Scorsese', 'Christopher Nolan', 'Steven Spielberg'), BirthDate ('March 27, 1963', 'July 30, 1970', 'August 13, 1899') | Films : FilmID (4, 2, 3), Title ('Psycho', 'Django Unchained', 'Inception'), ReleaseYear (1960, 2010, 2012) | DirectorFilms : DirectorFilmID (2, 1, 3), DirectorID (2, 1, 4), FilmID (5, 1, 2) | Additional_Roles : AdditionalRoleID (3, 5, 2), Role ('Screenwriter', 'Composer', 'Editor'), Fee (100000, 35000, 50000) | Directors_Roles : DirectorRoleID (1, 3, 4), DirectorID (5, 1, 2), AdditionalRoleID (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Additional_Roles.Role, Additional_Roles.Fee from Directors_Roles join Additional_Roles on Directors_Roles.AdditionalRoleID = Additional_Roles.AdditionalRoleID join Directors on Directors_Roles.DirectorID = Directors.DirectorID GROUP BY Directors_Roles.AdditionalRoleID HAVING COUNT(DISTINCT Directors_Roles.DirectorID) = (SELECT COUNT(*) FROM Directors)",
            "select directors.name , additional_roles.role , additional_roles.fee from Directors_Roles join Additional_Roles on Directors_Roles.AdditionalRoleID = Additional_Roles.AdditionalRoleID join Directors on Directors_Roles.DirectorID = Directors.DirectorID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each director\": [\"for each director individually\", \"common to all directors\"]}"
        },
        "clarification_context": "\"each director\" refers to \"for each director individually\"",
        "clear_ambiguity": "{\"each director\": \"for each director individually\"}",
        "gold_query": "select directors.name , additional_roles.role , additional_roles.fee from Directors_Roles join Additional_Roles on Directors_Roles.AdditionalRoleID = Additional_Roles.AdditionalRoleID join Directors on Directors_Roles.DirectorID = Directors.DirectorID"
    },
    {
        "index": 1380,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_political_reporters_elections/scope_political_reporters_elections.sqlite",
        "question": "Show me the elections that every political reporter covers.",
        "schema_without_content": "Political_Reporters : id, name, email | Elections : id, election_type, start_date, end_date | Political_Reporters_Elections : reporter_id, election_id",
        "schema_with_content": "Political_Reporters : id (5, 3, 1), name ('Bob Brown', 'Jane Smith', 'John Doe'), email ('alice@example.com', 'bob@example.com', 'jane@example.com') | Elections : id (3, 1, 5), election_type ('State_Assembly_elections', 'Referendums', 'Presidential_Campaigns'), start_date ('2022-01-01', '2023-01-01', '2021-01-01'), end_date ('2023-12-31', '2022-12-31', '2021-12-31') | Political_Reporters_Elections : reporter_id (3, 4, 1), election_id (2, 1, 1)",
        "ambiguous_queries": [
            "SELECT Elections.election_type from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id GROUP BY Political_Reporters_Elections.election_id HAVING COUNT(DISTINCT Political_Reporters_Elections.reporter_id) = (SELECT COUNT(*) FROM Political_Reporters)",
            "select political_reporters.name , elections.election_type from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every political reporter\": [\"for each political reporter individually\", \"common to all political reporters\"]}"
        },
        "clarification_context": "\"every political reporter\" refers to \"for each political reporter individually\"",
        "clear_ambiguity": "{\"every political reporter\": \"for each political reporter individually\"}",
        "gold_query": "select political_reporters.name , elections.election_type from Political_Reporters_Elections join Elections on Political_Reporters_Elections.election_id = Elections.id join Political_Reporters on Political_Reporters_Elections.reporter_id = Political_Reporters.id"
    },
    {
        "index": 1381,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_community_development_corporations_initiatives/scope_community_development_corporations_initiatives.sqlite",
        "question": "Show me the information about the initiatives available in each area (names and descriptions).",
        "schema_without_content": "Community_Development_Corporations : id, name, location | Initiatives : id, initiative_name, description | Community_Development_Corporations_Initiatives : community_development_corporation_id, initiative_id",
        "schema_with_content": "Community_Development_Corporations : id (3, 1, 4), name ('CDC2', 'CDC4', 'CDC3'), location ('Houston', 'New York', 'Philadelphia') | Initiatives : id (2, 1, 5), initiative_name ('Youth_Empowerment', 'Affordable_Housing', 'Eco_Friendly_Construction'), description ('Building low-cost housing units for low-income families.', 'A shelter providing housing for homeless individuals.', 'Promoting sustainable construction practices.') | Community_Development_Corporations_Initiatives : community_development_corporation_id (4, 5, 3), initiative_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Initiatives.initiative_name, Initiatives.description from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id GROUP BY Community_Development_Corporations_Initiatives.initiative_id HAVING COUNT(DISTINCT Community_Development_Corporations_Initiatives.community_development_corporation_id) = (SELECT COUNT(*) FROM Community_Development_Corporations)",
            "select community_development_corporations.name , initiatives.initiative_name , initiatives.description from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each area\": [\"for each area individually\", \"common to all areas\"]}"
        },
        "clarification_context": "\"each area\" refers to \"for each area individually\"",
        "clear_ambiguity": "{\"each area\": \"for each area individually\"}",
        "gold_query": "select community_development_corporations.name , initiatives.initiative_name , initiatives.description from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id"
    },
    {
        "index": 1382,
        "db_id": "Airport",
        "ambig_type": "scope",
        "db_file": "scope/Airport/scope_airlines_fleets/scope_airlines_fleets.sqlite",
        "question": "What are all the fleet names and capacities shown for every airline?",
        "schema_without_content": "Airlines : id, name, country | Fleets : id, fleetName, capacity | Airlines_Fleets : airlineId, fleetId",
        "schema_with_content": "Airlines : id (5, 3, 4), name ('Air France', 'KLM Royal Dutch Airlines', 'Emirates'), country ('UAE', 'United States', 'Netherlands') | Fleets : id (3, 1, 5), fleetName ('De Havilland Canada Dash 8 Q400', 'Boeing_737', 'Airbus A380'), capacity (517, 200, 78) | Airlines_Fleets : airlineId (2, 1, 5), fleetId (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Fleets.fleetName, Fleets.capacity from Airlines_Fleets join Fleets on Airlines_Fleets.fleetId = Fleets.id join Airlines on Airlines_Fleets.airlineId = Airlines.id GROUP BY Airlines_Fleets.fleetId HAVING COUNT(DISTINCT Airlines_Fleets.airlineId) = (SELECT COUNT(*) FROM Airlines)",
            "select airlines.name , fleets.fleetname , fleets.capacity from Airlines_Fleets join Fleets on Airlines_Fleets.fleetId = Fleets.id join Airlines on Airlines_Fleets.airlineId = Airlines.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every airline\": [\"for each airline individually\", \"common to all airlines\"]}"
        },
        "clarification_context": "\"every airline\" refers to \"common to all airlines\"",
        "clear_ambiguity": "{\"every airline\": \"common to all airlines\"}",
        "gold_query": "SELECT Fleets.fleetName, Fleets.capacity from Airlines_Fleets join Fleets on Airlines_Fleets.fleetId = Fleets.id join Airlines on Airlines_Fleets.airlineId = Airlines.id GROUP BY Airlines_Fleets.fleetId HAVING COUNT(DISTINCT Airlines_Fleets.airlineId) = (SELECT COUNT(*) FROM Airlines)"
    },
    {
        "index": 1383,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_adventure_tour_operators_activities/scope_adventure_tour_operators_activities.sqlite",
        "question": "Describe the activities that each tour operator offers.",
        "schema_without_content": "Adventure_Tour_Operators : id, name, location | Activities : id, activity_name, description | Adventure_Tour_Operators_Activities : adventure_tour_operator_id, activity_id",
        "schema_with_content": "Adventure_Tour_Operators : id (1, 3, 5), name ('Company D', 'Company A', 'Company E'), location ('New York', 'Florida', 'California') | Activities : id (3, 1, 2), activity_name ('Biking', 'Zipline', 'Rafting'), description ('Cycle through picturesque countryside.', 'Set up camp under starry skies in nature.', 'Navigate white waters on an exciting river trip.') | Adventure_Tour_Operators_Activities : adventure_tour_operator_id (5, 4, 1), activity_id (3, 1, 1)",
        "ambiguous_queries": [
            "SELECT Activities.description from Adventure_Tour_Operators_Activities join Activities on Adventure_Tour_Operators_Activities.activity_id = Activities.id join Adventure_Tour_Operators on Adventure_Tour_Operators_Activities.adventure_tour_operator_id = Adventure_Tour_Operators.id GROUP BY Adventure_Tour_Operators_Activities.activity_id HAVING COUNT(DISTINCT Adventure_Tour_Operators_Activities.adventure_tour_operator_id) = (SELECT COUNT(*) FROM Adventure_Tour_Operators)",
            "select adventure_tour_operators.name , activities.description from Adventure_Tour_Operators_Activities join Activities on Adventure_Tour_Operators_Activities.activity_id = Activities.id join Adventure_Tour_Operators on Adventure_Tour_Operators_Activities.adventure_tour_operator_id = Adventure_Tour_Operators.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each tour operator\": [\"for each tour operator individually\", \"common to all tour operators\"]}"
        },
        "clarification_context": "\"each tour operator\" refers to \"common to all tour operators\"",
        "clear_ambiguity": "{\"each tour operator\": \"common to all tour operators\"}",
        "gold_query": "SELECT Activities.description from Adventure_Tour_Operators_Activities join Activities on Adventure_Tour_Operators_Activities.activity_id = Activities.id join Adventure_Tour_Operators on Adventure_Tour_Operators_Activities.adventure_tour_operator_id = Adventure_Tour_Operators.id GROUP BY Adventure_Tour_Operators_Activities.activity_id HAVING COUNT(DISTINCT Adventure_Tour_Operators_Activities.adventure_tour_operator_id) = (SELECT COUNT(*) FROM Adventure_Tour_Operators)"
    },
    {
        "index": 1384,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_courts_reporters_trials/scope_courts_reporters_trials.sqlite",
        "question": "what trial types are associated with each court reporter?",
        "schema_without_content": "Courts_Reporters : id, name, email | Trials : id, caseName, trialType | Courts_Reporters_Trials : reporterId, trialId",
        "schema_with_content": "Courts_Reporters : id (4, 5, 3), name ('Michael Johnson', 'John Doe', 'David Brown'), email ('david@example.com', 'jane@example.com', 'emily@example.com') | Trials : id (4, 3, 1), caseName ('High_profile_Criminal_Case_1', 'Other_Trial_2', 'High_profile_Criminal_Case_3'), trialType ('Criminal', 'Civil', 'Criminal') | Courts_Reporters_Trials : reporterId (3, 5, 1), trialId (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Trials.trialType from Courts_Reporters_Trials join Trials on Courts_Reporters_Trials.trialId = Trials.id join Courts_Reporters on Courts_Reporters_Trials.reporterId = Courts_Reporters.id GROUP BY Courts_Reporters_Trials.trialId HAVING COUNT(DISTINCT Courts_Reporters_Trials.reporterId) = (SELECT COUNT(*) FROM Courts_Reporters)",
            "select courts_reporters.name , trials.trialtype from Courts_Reporters_Trials join Trials on Courts_Reporters_Trials.trialId = Trials.id join Courts_Reporters on Courts_Reporters_Trials.reporterId = Courts_Reporters.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each court reporter\": [\"for each court reporter individually\", \"common to all court reporters\"]}"
        },
        "clarification_context": "\"each court reporter\" refers to \"common to all court reporters\"",
        "clear_ambiguity": "{\"each court reporter\": \"common to all court reporters\"}",
        "gold_query": "SELECT Trials.trialType from Courts_Reporters_Trials join Trials on Courts_Reporters_Trials.trialId = Trials.id join Courts_Reporters on Courts_Reporters_Trials.reporterId = Courts_Reporters.id GROUP BY Courts_Reporters_Trials.trialId HAVING COUNT(DISTINCT Courts_Reporters_Trials.reporterId) = (SELECT COUNT(*) FROM Courts_Reporters)"
    },
    {
        "index": 1385,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_wine_regions_winery_tours/scope_wine_regions_winery_tours.sqlite",
        "question": "What type and duration of winery tours are available for each wine region?",
        "schema_without_content": "Wine_Regions : RegionID, Name, Description | Winery_Tours : TourID, Type, Duration | Wine_Regions_Winery_Tours : WineRegionID, TourType",
        "schema_with_content": "Wine_Regions : RegionID (3, 4, 5), Name ('Barossa Valley', 'Marlborough', 'Bordeaux'), Description (\"Australia's most renowned wine region, producing a wide variety of styles.\", 'A famous wine region known for its Cabernet Sauvignon.', \"Known for producing some of the world's finest sparkling wines.\") | Winery_Tours : TourID (3, 4, 2), Type ('VIP_tours', 'Group_tours', 'Custom_tours'), Duration (3.0, 5.0, 2.0) | Wine_Regions_Winery_Tours : WineRegionID (2, 3, 5), TourType ('Self_guided_Tours', 'Group_tours', 'Self_guided_Tours')",
        "ambiguous_queries": [
            "SELECT Winery_Tours.Type, Winery_Tours.Duration from Wine_Regions_Winery_Tours join Winery_Tours on Wine_Regions_Winery_Tours.TourType = Winery_Tours.Type join Wine_Regions on Wine_Regions_Winery_Tours.WineRegionID = Wine_Regions.RegionID GROUP BY Wine_Regions_Winery_Tours.TourType HAVING COUNT(DISTINCT Wine_Regions_Winery_Tours.WineRegionID) = (SELECT COUNT(*) FROM Wine_Regions)",
            "select wine_regions.name , winery_tours.type , winery_tours.duration from Wine_Regions_Winery_Tours join Winery_Tours on Wine_Regions_Winery_Tours.TourType = Winery_Tours.Type join Wine_Regions on Wine_Regions_Winery_Tours.WineRegionID = Wine_Regions.RegionID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each wine region\": [\"for each wine region individually\", \"common to all wine regions\"]}"
        },
        "clarification_context": "\"each wine region\" refers to \"for each wine region individually\"",
        "clear_ambiguity": "{\"each wine region\": \"for each wine region individually\"}",
        "gold_query": "select wine_regions.name , winery_tours.type , winery_tours.duration from Wine_Regions_Winery_Tours join Winery_Tours on Wine_Regions_Winery_Tours.TourType = Winery_Tours.Type join Wine_Regions on Wine_Regions_Winery_Tours.WineRegionID = Wine_Regions.RegionID"
    },
    {
        "index": 1386,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_district_school_grades/scope_district_school_grades.sqlite",
        "question": "List the school grades and their descriptions that we have in each district.",
        "schema_without_content": "District : id, name, location | School_Grades : id, grade, description | District_School_Grades : district_id, school_grade_id",
        "schema_with_content": "District : id (3, 4, 1), name ('District D', 'District E', 'District C'), location ('Illinois', 'New York', 'Florida') | School_Grades : id (2, 4, 1), grade ('2nd Grade', '1st Grade', 'Kindergarten'), description ('Early childhood education program', 'Fourth year of primary education', 'Third year of primary education') | District_School_Grades : district_id (4, 3, 3), school_grade_id (2, 2, 1)",
        "ambiguous_queries": [
            "SELECT School_Grades.grade, School_Grades.description from District_School_Grades join School_Grades on District_School_Grades.school_grade_id = School_Grades.id join District on District_School_Grades.district_id = District.id GROUP BY District_School_Grades.school_grade_id HAVING COUNT(DISTINCT District_School_Grades.district_id) = (SELECT COUNT(*) FROM District)",
            "select district.name , school_grades.grade , school_grades.description from District_School_Grades join School_Grades on District_School_Grades.school_grade_id = School_Grades.id join District on District_School_Grades.district_id = District.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each district\": [\"for each district individually\", \"common to all districts\"]}"
        },
        "clarification_context": "\"each district\" refers to \"common to all districts\"",
        "clear_ambiguity": "{\"each district\": \"common to all districts\"}",
        "gold_query": "SELECT School_Grades.grade, School_Grades.description from District_School_Grades join School_Grades on District_School_Grades.school_grade_id = School_Grades.id join District on District_School_Grades.district_id = District.id GROUP BY District_School_Grades.school_grade_id HAVING COUNT(DISTINCT District_School_Grades.district_id) = (SELECT COUNT(*) FROM District)"
    },
    {
        "index": 1387,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
        "question": "What film categories does each film festival offer?",
        "schema_without_content": "Film_Festivals : id, name, location | Categories : id, categoryName | Films : id, title, director, yearReleased | Film_Festival_Entries : festivalId, filmId, entryDate | Film_Festival_Winners : festivalId, awardType, winningFilmId, winYear | Film_Festival_Categories : festivalId, categoryId",
        "schema_with_content": "Film_Festivals : id (1, 4, 3), name ('Festival B', 'Festival E', 'Festival C'), location ('Location V', 'Location W', 'Location Y') | Categories : id (1, 2, 5), categoryName ('Feature_Film', 'Short_Film', 'Animation') | Films : id (4, 1, 5), title ('Movie A', 'Movie D', 'Movie E'), director ('Director Y', 'Director W', 'Director Z'), yearReleased (2019, 2023, 2022) | Film_Festival_Entries : festivalId (2, 3, 1), filmId (4, 5, 3), entryDate ('2022-07-01', '2021-08-01', '2023-05-01') | Film_Festival_Winners : festivalId (1, 3, 2), awardType ('Best Feature Film', 'Best Short Film', 'Best Experimental'), winningFilmId (1, 4, 3), winYear (2021, 2022, 2023) | Film_Festival_Categories : festivalId (4, 2, 2), categoryId (4, 1, 1)",
        "ambiguous_queries": [
            "SELECT Categories.categoryName from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id GROUP BY Film_Festival_Categories.categoryId HAVING COUNT(DISTINCT Film_Festival_Categories.festivalId) = (SELECT COUNT(*) FROM Film_Festivals)",
            "select film_festivals.name , categories.categoryname from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each film festival\": [\"for each film festival individually\", \"common to all film festivals\"]}"
        },
        "clarification_context": "\"each film festival\" refers to \"for each film festival individually\"",
        "clear_ambiguity": "{\"each film festival\": \"for each film festival individually\"}",
        "gold_query": "select film_festivals.name , categories.categoryname from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id"
    },
    {
        "index": 1388,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_music_festivals_genres/scope_music_festivals_genres.sqlite",
        "question": "Give me the music genres that each music festival includes.",
        "schema_without_content": "Genres : genre_id, genre_name | Music_Festivals : festival_id, festival_name, location | Music_Festivals_Genres : music_festival_id, genre_id",
        "schema_with_content": "Genres : genre_id (3, 2, 5), genre_name ('Jazz', 'Pop_Music', 'Rock_Music') | Music_Festivals : festival_id (5, 1, 3), festival_name ('Lollapalooza', 'Burning Man', 'Coachella'), location ('Black Rock City, Nevada', 'Boom, Belgium', 'Chicago, Illinois') | Music_Festivals_Genres : music_festival_id (2, 4, 3), genre_id (1, 4, 1)",
        "ambiguous_queries": [
            "SELECT Genres.genre_name from Music_Festivals_Genres join Genres on Music_Festivals_Genres.genre_id = Genres.genre_id join Music_Festivals on Music_Festivals_Genres.music_festival_id = Music_Festivals.festival_id GROUP BY Music_Festivals_Genres.genre_id HAVING COUNT(DISTINCT Music_Festivals_Genres.music_festival_id) = (SELECT COUNT(*) FROM Music_Festivals)",
            "select music_festivals.festival_name , genres.genre_name from Music_Festivals_Genres join Genres on Music_Festivals_Genres.genre_id = Genres.genre_id join Music_Festivals on Music_Festivals_Genres.music_festival_id = Music_Festivals.festival_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each music festival\": [\"for each music festival individually\", \"common to all music festivals\"]}"
        },
        "clarification_context": "\"each music festival\" refers to \"common to all music festivals\"",
        "clear_ambiguity": "{\"each music festival\": \"common to all music festivals\"}",
        "gold_query": "SELECT Genres.genre_name from Music_Festivals_Genres join Genres on Music_Festivals_Genres.genre_id = Genres.genre_id join Music_Festivals on Music_Festivals_Genres.music_festival_id = Music_Festivals.festival_id GROUP BY Music_Festivals_Genres.genre_id HAVING COUNT(DISTINCT Music_Festivals_Genres.music_festival_id) = (SELECT COUNT(*) FROM Music_Festivals)"
    },
    {
        "index": 1389,
        "db_id": "Healthcare",
        "ambig_type": "scope",
        "db_file": "scope/Healthcare/scope_laboratory_equipment/scope_laboratory_equipment.sqlite",
        "question": "What type of equipment corresponds to each laboratory?",
        "schema_without_content": "Laboratory : id, name, address | Equipment : id, type, description | Laboratory_Equipment : laboratory_id, equipment_type_id | Doctors : id, name, specialization | Patients : id, name, age, gender | Appointments : appointment_id, doctor_id, patient_id, date, time",
        "schema_with_content": "Laboratory : id (1, 5, 3), name ('South Lab', 'Central Lab', 'East Lab'), address ('<address_of_central_lab>', '<address_of_south_lab>', '<address_of_north_lab>') | Equipment : id (3, 5, 2), type ('X-Ray Machine', 'Microscope', 'Ultrasound'), description ('<description_for_mri_machine>', '<description_for_ultrasound>', '<description_for_microscope>') | Laboratory_Equipment : laboratory_id (1, 3, 4), equipment_type_id (1, 1, 1) | Doctors : id (2, 4, 3), name ('Dr. Smith', 'Dr. Johnson', 'Dr. Brown'), specialization ('Pediatrics', 'Neurology', 'Cardiology') | Patients : id (1, 5, 3), name ('John Doe', 'Tom Johnson', 'Emily Williams'), age (28, 60, 30), gender ('F', 'M', 'M') | Appointments : appointment_id (3, 5, 1), doctor_id (4, 1, 5), patient_id (4, 5, 2), date ('2023-09-04', '2023-09-03', '2023-09-02'), time ('15:00', '09:00', '14:00')",
        "ambiguous_queries": [
            "SELECT Equipment.type from Laboratory_Equipment join Equipment on Laboratory_Equipment.equipment_type_id = Equipment.id join Laboratory on Laboratory_Equipment.laboratory_id = Laboratory.id GROUP BY Laboratory_Equipment.equipment_type_id HAVING COUNT(DISTINCT Laboratory_Equipment.laboratory_id) = (SELECT COUNT(*) FROM Laboratory)",
            "select laboratory.name , equipment.type from Laboratory_Equipment join Equipment on Laboratory_Equipment.equipment_type_id = Equipment.id join Laboratory on Laboratory_Equipment.laboratory_id = Laboratory.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each laboratory\": [\"for each laboratory individually\", \"common to all laboratories\"]}"
        },
        "clarification_context": "\"each laboratory\" refers to \"common to all laboratories\"",
        "clear_ambiguity": "{\"each laboratory\": \"common to all laboratories\"}",
        "gold_query": "SELECT Equipment.type from Laboratory_Equipment join Equipment on Laboratory_Equipment.equipment_type_id = Equipment.id join Laboratory on Laboratory_Equipment.laboratory_id = Laboratory.id GROUP BY Laboratory_Equipment.equipment_type_id HAVING COUNT(DISTINCT Laboratory_Equipment.laboratory_id) = (SELECT COUNT(*) FROM Laboratory)"
    },
    {
        "index": 1390,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_resorts_activities/scope_resorts_activities.sqlite",
        "question": "List the activities offered by every resort.",
        "schema_without_content": "Resorts : id, name, location | Activities : activityID, activityName | Resorts_Activities : resortID, activityID",
        "schema_with_content": "Resorts : id (3, 4, 2), name ('Tropical Oasis', 'Paradise Beach', 'Crystal Waters'), location ('Hawaii', 'Colorado', 'Maldives') | Activities : activityID (10, 4, 9), activityName ('Fitness Center', 'Golf Course', 'Yoga Classes') | Resorts_Activities : resortID (3, 3, 2), activityID (2, 9, 8)",
        "ambiguous_queries": [
            "SELECT Activities.activityName from Resorts_Activities join Activities on Resorts_Activities.activityID = Activities.activityID join Resorts on Resorts_Activities.resortID = Resorts.id GROUP BY Resorts_Activities.activityID HAVING COUNT(DISTINCT Resorts_Activities.resortID) = (SELECT COUNT(*) FROM Resorts)",
            "select resorts.name , activities.activityname from Resorts_Activities join Activities on Resorts_Activities.activityID = Activities.activityID join Resorts on Resorts_Activities.resortID = Resorts.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every resort\": [\"for each resort individually\", \"common to all resorts\"]}"
        },
        "clarification_context": "\"every resort\" refers to \"common to all resorts\"",
        "clear_ambiguity": "{\"every resort\": \"common to all resorts\"}",
        "gold_query": "SELECT Activities.activityName from Resorts_Activities join Activities on Resorts_Activities.activityID = Activities.activityID join Resorts on Resorts_Activities.resortID = Resorts.id GROUP BY Resorts_Activities.activityID HAVING COUNT(DISTINCT Resorts_Activities.resortID) = (SELECT COUNT(*) FROM Resorts)"
    },
    {
        "index": 1391,
        "db_id": "Job Postings",
        "ambig_type": "scope",
        "db_file": "scope/Job Postings/scope_project_managers_methodologies/scope_project_managers_methodologies.sqlite",
        "question": "Show me the methodologies that every project manager uses.",
        "schema_without_content": "Project_Managers : id, name, years_of_experience | Methodologies : methodology_id, name | Project_Managers_Methodologies : project_manager_id, methodology_id | Other_Tables1 : id, column2, column3 | Other_Tables2 : id, columnA, columnB",
        "schema_with_content": "Project_Managers : id (5, 2, 1), name ('David Johnson', 'Emily Davis', 'Mike Brown'), years_of_experience (7, 9, 6) | Methodologies : methodology_id (2, 3, 4), name ('Waterfall', 'Scrum', 'Lean') | Project_Managers_Methodologies : project_manager_id (5, 5, 1), methodology_id (1, 1, 1) | Other_Tables1 : id (3, 1, 5), column2 ('Data E', 'Data C', 'Data B'), column3 ('2021-04-01', '2021-05-01', '2021-03-01') | Other_Tables2 : id (2, 5, 4), columnA (3, 1, 5), columnB (6.5, 4.5, 5.5)",
        "ambiguous_queries": [
            "SELECT Methodologies.name from Project_Managers_Methodologies join Methodologies on Project_Managers_Methodologies.methodology_id = Methodologies.methodology_id join Project_Managers on Project_Managers_Methodologies.project_manager_id = Project_Managers.id GROUP BY Project_Managers_Methodologies.methodology_id HAVING COUNT(DISTINCT Project_Managers_Methodologies.project_manager_id) = (SELECT COUNT(*) FROM Project_Managers)",
            "select project_managers.name , methodologies.name from Project_Managers_Methodologies join Methodologies on Project_Managers_Methodologies.methodology_id = Methodologies.methodology_id join Project_Managers on Project_Managers_Methodologies.project_manager_id = Project_Managers.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every project manager\": [\"for each project manager individually\", \"common to all project managers\"]}"
        },
        "clarification_context": "\"every project manager\" refers to \"common to all project managers\"",
        "clear_ambiguity": "{\"every project manager\": \"common to all project managers\"}",
        "gold_query": "SELECT Methodologies.name from Project_Managers_Methodologies join Methodologies on Project_Managers_Methodologies.methodology_id = Methodologies.methodology_id join Project_Managers on Project_Managers_Methodologies.project_manager_id = Project_Managers.id GROUP BY Project_Managers_Methodologies.methodology_id HAVING COUNT(DISTINCT Project_Managers_Methodologies.project_manager_id) = (SELECT COUNT(*) FROM Project_Managers)"
    },
    {
        "index": 1392,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_visual_effects_artists_programs/scope_visual_effects_artists_programs.sqlite",
        "question": "What are the versions of programs associated with each visual effects artists?",
        "schema_without_content": "Visual_Effects_Artists : artist_id, name, email | Programs : program_id, name, version | Movies : movie_id, title, release_date | Film_Movies : film_id, movie_id | Visual_Effects_Artists_Programs : visual_effects_artist_id, program_id",
        "schema_with_content": "Visual_Effects_Artists : artist_id (4, 3, 2), name ('John Doe', 'Bob Brown', 'Alice Johnson'), email ('johndoe@example.com', 'charliegreen@example.com', 'janesmith@example.com') | Programs : program_id (4, 3, 1), name ('Nuke', 'Cinema 4D', 'Premiere Pro'), version (2021, 2021, 2021) | Movies : movie_id (3, 5, 1), title ('Interstellar', 'Gravity', 'Inception'), release_date ('2010-07-16', '1999-03-31', '2013-10-04') | Film_Movies : film_id (3, 2, 5), movie_id (5, 1, 3) | Visual_Effects_Artists_Programs : visual_effects_artist_id (3, 4, 5), program_id (1, 1, 4)",
        "ambiguous_queries": [
            "SELECT Programs.version from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id GROUP BY Visual_Effects_Artists_Programs.program_id HAVING COUNT(DISTINCT Visual_Effects_Artists_Programs.visual_effects_artist_id) = (SELECT COUNT(*) FROM Visual_Effects_Artists)",
            "select visual_effects_artists.name , programs.version from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each visual effects artist\": [\"for each visual effects artist individually\", \"common to all visual effects artists\"]}"
        },
        "clarification_context": "\"each visual effects artist\" refers to \"for each visual effects artist individually\"",
        "clear_ambiguity": "{\"each visual effects artist\": \"for each visual effects artist individually\"}",
        "gold_query": "select visual_effects_artists.name , programs.version from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id"
    },
    {
        "index": 1393,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_directors_additional_roles/scope_directors_additional_roles.sqlite",
        "question": "What fees are associated with each director's additional roles?",
        "schema_without_content": "Directors : DirectorID, Name, BirthDate | Films : FilmID, Title, ReleaseYear | DirectorFilms : DirectorFilmID, DirectorID, FilmID | Additional_Roles : AdditionalRoleID, Role, Fee | Directors_Roles : DirectorRoleID, DirectorID, AdditionalRoleID",
        "schema_with_content": "Directors : DirectorID (1, 2, 5), Name ('Martin Scorsese', 'Quentin Tarantino', 'Steven Spielberg'), BirthDate ('November 22, 1942', 'July 30, 1970', 'August 13, 1899') | Films : FilmID (2, 1, 3), Title ('Django Unchained', 'Psycho', 'Taxi Driver'), ReleaseYear (2010, 1960, 1982) | DirectorFilms : DirectorFilmID (5, 2, 3), DirectorID (5, 4, 2), FilmID (3, 1, 4) | Additional_Roles : AdditionalRoleID (3, 2, 4), Role ('Producer', 'Screenwriter', 'Editor'), Fee (50000, 35000, 75000) | Directors_Roles : DirectorRoleID (5, 2, 1), DirectorID (1, 5, 2), AdditionalRoleID (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Additional_Roles.Fee from Directors_Roles join Additional_Roles on Directors_Roles.AdditionalRoleID = Additional_Roles.AdditionalRoleID join Directors on Directors_Roles.DirectorID = Directors.DirectorID GROUP BY Directors_Roles.AdditionalRoleID HAVING COUNT(DISTINCT Directors_Roles.DirectorID) = (SELECT COUNT(*) FROM Directors)",
            "select directors.name , additional_roles.fee from Directors_Roles join Additional_Roles on Directors_Roles.AdditionalRoleID = Additional_Roles.AdditionalRoleID join Directors on Directors_Roles.DirectorID = Directors.DirectorID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each director\": [\"for each director individually\", \"common to all directors\"]}"
        },
        "clarification_context": "\"each director\" refers to \"common to all directors\"",
        "clear_ambiguity": "{\"each director\": \"common to all directors\"}",
        "gold_query": "SELECT Additional_Roles.Fee from Directors_Roles join Additional_Roles on Directors_Roles.AdditionalRoleID = Additional_Roles.AdditionalRoleID join Directors on Directors_Roles.DirectorID = Directors.DirectorID GROUP BY Directors_Roles.AdditionalRoleID HAVING COUNT(DISTINCT Directors_Roles.DirectorID) = (SELECT COUNT(*) FROM Directors)"
    },
    {
        "index": 1394,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_classroom_equipment/scope_classroom_equipment.sqlite",
        "question": "What equipment names do we have in every class?",
        "schema_without_content": "Classroom : id, name, capacity | Equipment : id, equipmentName, quantity | Classroom_Equipment : classroomId, equipmentId",
        "schema_with_content": "Classroom : id (4, 2, 5), name ('Room A', 'Room D', 'Room B'), capacity (30, 35, 28) | Equipment : id (3, 5, 4), equipmentName ('Computers', 'Smart Board', 'Whiteboard'), quantity (7, 5, 8) | Classroom_Equipment : classroomId (5, 2, 3), equipmentId (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Equipment.equipmentName from Classroom_Equipment join Equipment on Classroom_Equipment.equipmentId = Equipment.id join Classroom on Classroom_Equipment.classroomId = Classroom.id GROUP BY Classroom_Equipment.equipmentId HAVING COUNT(DISTINCT Classroom_Equipment.classroomId) = (SELECT COUNT(*) FROM Classroom)",
            "select classroom.name , equipment.equipmentname from Classroom_Equipment join Equipment on Classroom_Equipment.equipmentId = Equipment.id join Classroom on Classroom_Equipment.classroomId = Classroom.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every class\": [\"for each class individually\", \"common to all classes\"]}"
        },
        "clarification_context": "\"every class\" refers to \"common to all classes\"",
        "clear_ambiguity": "{\"every class\": \"common to all classes\"}",
        "gold_query": "SELECT Equipment.equipmentName from Classroom_Equipment join Equipment on Classroom_Equipment.equipmentId = Equipment.id join Classroom on Classroom_Equipment.classroomId = Classroom.id GROUP BY Classroom_Equipment.equipmentId HAVING COUNT(DISTINCT Classroom_Equipment.classroomId) = (SELECT COUNT(*) FROM Classroom)"
    },
    {
        "index": 1395,
        "db_id": "Filmmaking",
        "ambig_type": "scope",
        "db_file": "scope/Filmmaking/scope_visual_effects_artists_programs/scope_visual_effects_artists_programs.sqlite",
        "question": "Tell me the programs every visual effects artist uses and their versions.",
        "schema_without_content": "Visual_Effects_Artists : artist_id, name, email | Programs : program_id, name, version | Movies : movie_id, title, release_date | Film_Movies : film_id, movie_id | Visual_Effects_Artists_Programs : visual_effects_artist_id, program_id",
        "schema_with_content": "Visual_Effects_Artists : artist_id (5, 2, 3), name ('Alice Johnson', 'Jane Smith', 'John Doe'), email ('janesmith@example.com', 'alicejohnson@example.com', 'charliegreen@example.com') | Programs : program_id (1, 4, 2), name ('Maya', 'Cinema 4D', 'After_Effects'), version (2021, 2021, 2021) | Movies : movie_id (1, 2, 5), title ('Gravity', 'Avatar', 'Interstellar'), release_date ('2014-11-07', '1999-03-31', '2009-12-18') | Film_Movies : film_id (1, 3, 2), movie_id (1, 3, 2) | Visual_Effects_Artists_Programs : visual_effects_artist_id (5, 1, 5), program_id (4, 1, 1)",
        "ambiguous_queries": [
            "SELECT Programs.name, Programs.version from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id GROUP BY Visual_Effects_Artists_Programs.program_id HAVING COUNT(DISTINCT Visual_Effects_Artists_Programs.visual_effects_artist_id) = (SELECT COUNT(*) FROM Visual_Effects_Artists)",
            "select visual_effects_artists.name , programs.name , programs.version from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every visual effects artist\": [\"for each visual effects artist individually\", \"common to all visual effects artists\"]}"
        },
        "clarification_context": "\"every visual effects artist\" refers to \"for each visual effects artist individually\"",
        "clear_ambiguity": "{\"every visual effects artist\": \"for each visual effects artist individually\"}",
        "gold_query": "select visual_effects_artists.name , programs.name , programs.version from Visual_Effects_Artists_Programs join Programs on Visual_Effects_Artists_Programs.program_id = Programs.program_id join Visual_Effects_Artists on Visual_Effects_Artists_Programs.visual_effects_artist_id = Visual_Effects_Artists.artist_id"
    },
    {
        "index": 1396,
        "db_id": "Journalism",
        "ambig_type": "scope",
        "db_file": "scope/Journalism/scope_journalism_schools_courses/scope_journalism_schools_courses.sqlite",
        "question": "Give me the names and descriptions of courses each journalism school offers.",
        "schema_without_content": "Journalism_Schools : id, name, location | Courses : id, course_name, description | Journalism_Schools_Courses : journalism_schools_id, course_id",
        "schema_with_content": "Journalism_Schools : id (1, 3, 2), name ('University A', 'University B', 'University C'), location ('City D', 'City B', 'City C') | Courses : id (2, 4, 3), course_name ('Ethics In Journalism', 'Feature Writing', 'Data Analysis For Journalists'), description ('Master the art of crafting compelling feature articles.', 'Understand legal issues related to media and journalism.', 'Learn how to analyze and interpret data to inform news stories.') | Journalism_Schools_Courses : journalism_schools_id (3, 4, 5), course_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Courses.course_name, Courses.description from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id GROUP BY Journalism_Schools_Courses.course_id HAVING COUNT(DISTINCT Journalism_Schools_Courses.journalism_schools_id) = (SELECT COUNT(*) FROM Journalism_Schools)",
            "select journalism_schools.name , courses.course_name , courses.description from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each journalism school\": [\"for each journalism school individually\", \"common to all journalism schools\"]}"
        },
        "clarification_context": "\"each journalism school\" refers to \"common to all journalism schools\"",
        "clear_ambiguity": "{\"each journalism school\": \"common to all journalism schools\"}",
        "gold_query": "SELECT Courses.course_name, Courses.description from Journalism_Schools_Courses join Courses on Journalism_Schools_Courses.course_id = Courses.id join Journalism_Schools on Journalism_Schools_Courses.journalism_schools_id = Journalism_Schools.id GROUP BY Journalism_Schools_Courses.course_id HAVING COUNT(DISTINCT Journalism_Schools_Courses.journalism_schools_id) = (SELECT COUNT(*) FROM Journalism_Schools)"
    },
    {
        "index": 1397,
        "db_id": "Housing Market",
        "ambig_type": "scope",
        "db_file": "scope/Housing Market/scope_community_development_corporations_initiatives/scope_community_development_corporations_initiatives.sqlite",
        "question": "What initiatives are there for every community development corporation?",
        "schema_without_content": "Community_Development_Corporations : id, name, location | Initiatives : id, initiative_name, description | Community_Development_Corporations_Initiatives : community_development_corporation_id, initiative_id",
        "schema_with_content": "Community_Development_Corporations : id (5, 4, 3), name ('CDC5', 'CDC1', 'CDC2'), location ('Chicago', 'Philadelphia', 'Houston') | Initiatives : id (3, 2, 5), initiative_name ('Affordable_Housing', 'Urban_Renewal', 'Youth_Empowerment'), description ('Revitalizing urban areas by improving infrastructure and public spaces.', 'Building low-cost housing units for low-income families.', 'Promoting sustainable construction practices.') | Community_Development_Corporations_Initiatives : community_development_corporation_id (1, 5, 5), initiative_id (1, 1, 2)",
        "ambiguous_queries": [
            "SELECT Initiatives.initiative_name from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id GROUP BY Community_Development_Corporations_Initiatives.initiative_id HAVING COUNT(DISTINCT Community_Development_Corporations_Initiatives.community_development_corporation_id) = (SELECT COUNT(*) FROM Community_Development_Corporations)",
            "select community_development_corporations.name , initiatives.initiative_name from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"every community development corporation\": [\"for each community development corporation individually\", \"common to all community development corporations\"]}"
        },
        "clarification_context": "\"every community development corporation\" refers to \"common to all community development corporations\"",
        "clear_ambiguity": "{\"every community development corporation\": \"common to all community development corporations\"}",
        "gold_query": "SELECT Initiatives.initiative_name from Community_Development_Corporations_Initiatives join Initiatives on Community_Development_Corporations_Initiatives.initiative_id = Initiatives.id join Community_Development_Corporations on Community_Development_Corporations_Initiatives.community_development_corporation_id = Community_Development_Corporations.id GROUP BY Community_Development_Corporations_Initiatives.initiative_id HAVING COUNT(DISTINCT Community_Development_Corporations_Initiatives.community_development_corporation_id) = (SELECT COUNT(*) FROM Community_Development_Corporations)"
    },
    {
        "index": 1398,
        "db_id": "Education",
        "ambig_type": "scope",
        "db_file": "scope/Education/scope_districts_programs/scope_districts_programs.sqlite",
        "question": "What lessons do we have for each school district",
        "schema_without_content": "Districts : ID, Name, Population | Programs : ID, Name, Description | Students : ID, FirstName, LastName, Age | Teachers : ID, FirstName, LastName, Subject | Schools : ID, Name, Address, DistrictID | School_Students : StudentID, SchoolID, EnrollmentDate | School_Teachers : TeacherID, SchoolID, HireDate | Districts_Programs : DistrictID, ProgramID, Implemented | Students_Programs : StudentID, ProgramID, StartDate, EndDate",
        "schema_with_content": "Districts : ID (1, 5, 4), Name ('District1', 'District2', 'District3'), Population (20000, 50000, 60000) | Programs : ID (3, 5, 4), Name ('Sports', 'Special_Education', 'Vocational_Training'), Description ('Program focused on creative arts', 'Career-focused education and training', 'Standard curriculum offered in most schools') | Students : ID (4, 2, 1), FirstName ('Jane', 'Emma', 'Jack'), LastName ('Smith', 'Brown', 'Doe'), Age (20, 16, 18) | Teachers : ID (1, 5, 3), FirstName ('Ms.', 'Mr.', 'Mrs.'), LastName ('Smith', 'White', 'Green'), Subject ('History', 'Chemistry', 'English') | Schools : ID (5, 2, 1), Name ('School2', 'School4', 'School3'), Address ('Address4', 'Address1', 'Address2'), DistrictID (1, 5, 3) | School_Students : StudentID (1, 2, 5), SchoolID (2, 1, 1), EnrollmentDate ('2022-09-01', '2022-09-01', '2022-09-01') | School_Teachers : TeacherID (2, 1, 5), SchoolID (2, 1, 3), HireDate ('2021-09-01', '2021-09-01', '2021-09-01') | Districts_Programs : DistrictID (2, 2, 1), ProgramID (1, 2, 1), Implemented (1, 1, 0) | Students_Programs : StudentID (1, 4, 2), ProgramID (2, 1, 1), StartDate ('2022-08-01', '2022-08-01', '2022-08-01'), EndDate ('2023-05-31', '2023-05-31', '2023-05-31')",
        "ambiguous_queries": [
            "SELECT Programs.Name from Districts_Programs join Programs on Districts_Programs.ProgramID = Programs.ID join Districts on Districts_Programs.DistrictID = Districts.ID GROUP BY Districts_Programs.ProgramID HAVING COUNT(DISTINCT Districts_Programs.DistrictID) = (SELECT COUNT(*) FROM Districts)",
            "select districts.name , programs.name from Districts_Programs join Programs on Districts_Programs.ProgramID = Programs.ID join Districts on Districts_Programs.DistrictID = Districts.ID"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each school district\": [\"for each school district individually\", \"common to all school districts\"]}"
        },
        "clarification_context": "\"each school district\" refers to \"common to all school districts\"",
        "clear_ambiguity": "{\"each school district\": \"common to all school districts\"}",
        "gold_query": "SELECT Programs.Name from Districts_Programs join Programs on Districts_Programs.ProgramID = Programs.ID join Districts on Districts_Programs.DistrictID = Districts.ID GROUP BY Districts_Programs.ProgramID HAVING COUNT(DISTINCT Districts_Programs.DistrictID) = (SELECT COUNT(*) FROM Districts)"
    },
    {
        "index": 1399,
        "db_id": "Hospitality",
        "ambig_type": "scope",
        "db_file": "scope/Hospitality/scope_adventure_tour_operators_activities/scope_adventure_tour_operators_activities.sqlite",
        "question": "Show me activities each tour operator organises.",
        "schema_without_content": "Adventure_Tour_Operators : id, name, location | Activities : id, activity_name, description | Adventure_Tour_Operators_Activities : adventure_tour_operator_id, activity_id",
        "schema_with_content": "Adventure_Tour_Operators : id (1, 2, 5), name ('Company B', 'Company C', 'Company A'), location ('Florida', 'California', 'Texas') | Activities : id (5, 4, 2), activity_name ('Rafting', 'Hiking', 'Biking'), description ('Cycle through picturesque countryside.', 'Explore scenic trails through beautiful landscapes.', 'An adrenaline-pumping aerial ride down a mountain.') | Adventure_Tour_Operators_Activities : adventure_tour_operator_id (2, 1, 5), activity_id (1, 1, 1)",
        "ambiguous_queries": [
            "SELECT Activities.activity_name from Adventure_Tour_Operators_Activities join Activities on Adventure_Tour_Operators_Activities.activity_id = Activities.id join Adventure_Tour_Operators on Adventure_Tour_Operators_Activities.adventure_tour_operator_id = Adventure_Tour_Operators.id GROUP BY Adventure_Tour_Operators_Activities.activity_id HAVING COUNT(DISTINCT Adventure_Tour_Operators_Activities.adventure_tour_operator_id) = (SELECT COUNT(*) FROM Adventure_Tour_Operators)",
            "select adventure_tour_operators.name , activities.activity_name from Adventure_Tour_Operators_Activities join Activities on Adventure_Tour_Operators_Activities.activity_id = Activities.id join Adventure_Tour_Operators on Adventure_Tour_Operators_Activities.adventure_tour_operator_id = Adventure_Tour_Operators.id"
        ],
        "gold_ambiguity": {
            "match": "{}",
            "query": "{\"each tour operator\": [\"for each tour operator individually\", \"common to all tour operators\"]}"
        },
        "clarification_context": "\"each tour operator\" refers to \"common to all tour operators\"",
        "clear_ambiguity": "{\"each tour operator\": \"common to all tour operators\"}",
        "gold_query": "SELECT Activities.activity_name from Adventure_Tour_Operators_Activities join Activities on Adventure_Tour_Operators_Activities.activity_id = Activities.id join Adventure_Tour_Operators on Adventure_Tour_Operators_Activities.adventure_tour_operator_id = Adventure_Tour_Operators.id GROUP BY Adventure_Tour_Operators_Activities.activity_id HAVING COUNT(DISTINCT Adventure_Tour_Operators_Activities.adventure_tour_operator_id) = (SELECT COUNT(*) FROM Adventure_Tour_Operators)"
    }
]